{{%CONTENT_TYPE:TEXT}}
{{>header}}

@_exported import SotoCore

import SotoCore

// MARK: Waiters

extension {{name}} {
{{#waiters}}
    public func waitUntil{{waiterName}}(
        _ input: {{operation.inputShape}},
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
{{#acceptors}}
{{#matcher.path}}
                .init(state: .{{state}}, matcher: AWSPathMatcher(path: \{{operation.outputShape}}.{{path}}, expected: {{expected}})),
{{/matcher.path}}
{{#matcher.anyPath}}
                .init(state: .{{state}}, matcher: AWSAnyPathMatcher(arrayPath: \{{operation.outputShape}}.{{arrayPath}}, elementPath: \{{elementPath}}, expected: {{expected}})),
{{/matcher.anyPath}}
{{#matcher.allPath}}
                .init(state: .{{state}}, matcher: AWSAllPathMatcher(arrayPath: \{{operation.outputShape}}.{{arrayPath}}, elementPath: \{{elementPath}}, expected: {{expected}})),
{{/matcher.allPath}}
{{#matcher.error}}
                .init(state: .{{state}}, matcher: AWSErrorCodeMatcher("{{.}}")),
{{/matcher.error}}
{{#matcher.errorStatus}}
                .init(state: .{{state}}, matcher: AWSErrorStatusMatcher({{.}})),
{{/matcher.errorStatus}}
{{#success}}
                .init(state: .{{state}}, matcher: AWSSuccessMatcher()),
{{/success}}
{{/acceptors}}
            ],
            command: {{operation.funcName}}
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }
{{#last()}}

{{/last()}}
{{/waiters}}
}
