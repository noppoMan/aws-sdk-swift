{%include "header.stencil" %}

import Foundation
import AWSSDKSwiftCore
import NIO

{% if middlewareFramework %}
import {{ middlewareFramework }}

{% endif %}
{%if description %}
/**
{{description}}
*/
{% endif %}
public struct {{ name }} {

    public let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil, middlewares: [AWSServiceMiddleware] = [], eventLoopGroupProvider: AWSClient.EventLoopGroupProvider) {
{% if middlewareClass %}
        let middlewares = [{{middlewareClass}}] + middlewares
{% endif %}
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            sessionToken: sessionToken,
            region: region,
{% if amzTarget %}
            amzTarget: "{{amzTarget}}",
{% endif %}
            service: "{{endpointPrefix}}",
{% if signingName %}
            signingName: "{{signingName}}",
{% endif %}
            serviceProtocol: {{protocol}},
            apiVersion: "{{apiVersion}}",
            endpoint: endpoint,
{% if serviceEndpoints %}
            serviceEndpoints: [{{ serviceEndpoints|join:", "}}],
{% endif %}
{% if partitionEndpoint %}
            partitionEndpoint: "{{partitionEndpoint}}",
{% endif %}
            middlewares: middlewares,
{% if errorTypes %}
            possibleErrorTypes: [{{errorTypes}}.self],
{% endif %}
            eventLoopGroupProvider: eventLoopGroupProvider
        )
    }
{%for op in operations %}

{%for comment in op.comment %}
    ///  {{comment}}
{%endfor %}
{%if op.deprecated %}
    @available(*, deprecated, message:"{{op.deprecated}}")
{%endif %}
    {% if not op.outputShape %}@discardableResult {% endif %}public func {{op.funcName}}({% if op.inputShape %}_ input: {{op.inputShape}}{% endif %}) -> Future<{% if op.outputShape %}{{op.outputShape}}{% else %}Void{% endif %}> {
        return client.send(operation: "{{op.name}}", path: "{{op.path}}", httpMethod: "{{op.httpMethod}}"{% if op.inputShape %}, input: input{% endif %})
    }
{%endfor %}
}
