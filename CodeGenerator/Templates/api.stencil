{%include "header.stencil" %}

@_exported import AWSSDKSwiftCore
import NIO

{% if middlewareFramework %}
import {{ middlewareFramework }}

{% endif %}
/**
Client object for interacting with AWS {{name}} service.

{%if description %}
{{description}}
{% endif %}
*/
public struct {{ name }} {

    //MARK: Member variables

    public let client: AWSClient
    public let serviceConfig: AWSServiceConfig

    //MARK: Initialization

    /// Initialize the {{name}} client
    /// - parameters:
    ///     - credentialProvider: Object providing credential to sign requests
{% if regionalized %}
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
{% endif %}
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - retryPolicy: Object returning whether retries should be attempted. Possible options are NoRetry(), ExponentialRetry() or JitterRetry()
    ///     - middlewares: Array of middlewares to apply to requests and responses
    ///     - httpClientProvider: HTTPClient to use. Use `createNew` if the client should manage its own HTTPClient.
    public init(
        credentialProvider credentialProviderFactory: CredentialProviderFactory = .default,
{% if regionalized %}
        region: AWSSDKSwiftCore.Region? = nil,
{% endif %}
        partition: AWSSDKSwiftCore.Partition = .aws,
        endpoint: String? = nil,
        retryPolicy: RetryPolicy = JitterRetry(),
        middlewares: [AWSServiceMiddleware] = [],
        httpClientProvider: AWSClient.HTTPClientProvider = .createNew
    ) {
        self.serviceConfig = AWSServiceConfig(
{% if regionalized %}
            region: region,
            partition: region?.partition ?? partition,
{% else %}
            region: nil,
            partition: partition,
{% endif %}
{% if amzTarget %}
            amzTarget: "{{amzTarget}}",
{% endif %}
            service: "{{endpointPrefix}}",
{% if signingName %}
            signingName: "{{signingName}}",
{% endif %}
            serviceProtocol: {{protocol}},
            apiVersion: "{{apiVersion}}",
            endpoint: endpoint{% if serviceEndpoints %},
            serviceEndpoints: [{{ serviceEndpoints|join:", "}}]{% endif %}{% if partitionEndpoints %},
            partitionEndpoints: [{{ partitionEndpoints|join:", "}}]{% endif %}{% if errorTypes %},
            possibleErrorTypes: [{{errorTypes}}.self]{% endif %}{% if middlewareClass %},
            middlewares: [{{middlewareClass}}]{% endif %}

        )
        self.client = AWSClient(
            credentialProvider: credentialProviderFactory,
            retryPolicy: retryPolicy,
            middlewares: middlewares,
            httpClientProvider: httpClientProvider
        )
    }
    
    public func syncShutdown() throws {
        try client.syncShutdown()
    }
    
    //MARK: API Calls
{%for op in operations %}

{%for comment in op.comment %}
    ///  {{comment}}
{%endfor %}
{%if op.documentationUrl %}
    ///  {{op.documentationUrl}}
{%endif %}
{%if op.deprecated %}
    @available(*, deprecated, message:"{{op.deprecated}}")
{%endif %}
    {% if not op.outputShape %}@discardableResult {% endif %}public func {{op.funcName}}({% if op.inputShape %}_ input: {{op.inputShape}}, {% endif %}on eventLoop: EventLoop? = nil{% if op.streaming %}, _ stream: @escaping ({{op.streaming}}, EventLoop)->EventLoopFuture<Void>{% endif %}) -> EventLoopFuture<{% if op.outputShape %}{{op.outputShape}}{% else %}Void{% endif %}> {
        return client.execute(operation: "{{op.name}}", path: "{{op.path}}", httpMethod: "{{op.httpMethod}}", serviceConfig: serviceConfig{% if op.inputShape %}, input: input{% endif %}, on: eventLoop{% if op.streaming %}, stream: stream{% endif %})
    }
{%endfor %}
{%if streamingOperations.count > 0 %}

    //MARK: Streaming API Calls
{%for op in streamingOperations %}

{%for comment in op.comment %}
    ///  {{comment}}
{%endfor %}
{%if op.deprecated %}
    @available(*, deprecated, message:"{{op.deprecated}}")
{%endif %}
    {% if not op.outputShape %}@discardableResult {% endif %}public func {{op.funcName}}({% if op.inputShape %}_ input: {{op.inputShape}}, {% endif %}on eventLoop: EventLoop? = nil{% if op.streaming %}, _ stream: @escaping ({{op.streaming}}, EventLoop)->EventLoopFuture<Void>{% endif %}) -> EventLoopFuture<{% if op.outputShape %}{{op.outputShape}}{% else %}Void{% endif %}> {
        return client.execute(operation: "{{op.name}}", path: "{{op.path}}", httpMethod: "{{op.httpMethod}}", serviceConfig: serviceConfig{% if op.inputShape %}, input: input{% endif %}, on: eventLoop{% if op.streaming %}, stream: stream{% endif %})
    }
{%endfor %}
{%endif %}
}
