{%include "header.stencil" %}

@_exported import AWSSDKSwiftCore
import Foundation
import NIO

{% if middlewareFramework %}
import {{ middlewareFramework }}

{% endif %}
/**
Client object for interacting with AWS {{name}} service.

{%if description %}
{{description}}
{% endif %}
*/
public struct {{ name }} {

    //MARK: Member variables

    public let client: AWSClient

    //MARK: Initialization

    /// Initialize the {{name}} client
    /// - parameters:
    ///     - accessKeyId: Public access key provided by AWS
    ///     - secretAccessKey: Private access key provided by AWS
    ///     - sessionToken: Token provided by STS.AssumeRole() which allows access to another AWS account
{% if regionalized %}
    ///     - region: Region of server you want to communicate with
{% endif %}
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middlewares: Array of middlewares to apply to requests and responses
    ///     - httpClientProvider: HTTPClient to use. Use `createNew` if the client should manage its own HTTPClient.
    public init(
        accessKeyId: String? = nil,
        secretAccessKey: String? = nil,
        sessionToken: String? = nil,
{% if regionalized %}
        region: AWSSDKSwiftCore.Region? = nil,
{% endif %}
        endpoint: String? = nil,
        middlewares: [AWSServiceMiddleware] = [],
        httpClientProvider: AWSClient.HTTPClientProvider = .createNew
    ) {
{% if middlewareClass %}
        let middlewares = [{{middlewareClass}}] + middlewares
{% endif %}
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            sessionToken: sessionToken,
{% if regionalized %}
            region: region,
{% else %}
            region: nil,
{% endif %}
{% if amzTarget %}
            amzTarget: "{{amzTarget}}",
{% endif %}
            service: "{{endpointPrefix}}",
{% if signingName %}
            signingName: "{{signingName}}",
{% endif %}
            serviceProtocol: {{protocol}},
            apiVersion: "{{apiVersion}}",
            endpoint: endpoint,
{% if serviceEndpoints %}
            serviceEndpoints: [{{ serviceEndpoints|join:", "}}],
{% endif %}
{% if partitionEndpoints %}
            partitionEndpoints: [{{ partitionEndpoints|join:", "}}],
{% endif %}
            middlewares: middlewares,
{% if errorTypes %}
            possibleErrorTypes: [{{errorTypes}}.self],
{% endif %}
            httpClientProvider: httpClientProvider
        )
    }
    
    //MARK: API Calls
{%for op in operations %}

{%for comment in op.comment %}
    ///  {{comment}}
{%endfor %}
{%if op.deprecated %}
    @available(*, deprecated, message:"{{op.deprecated}}")
{%endif %}
    {% if not op.outputShape %}@discardableResult {% endif %}public func {{op.funcName}}({% if op.inputShape %}_ input: {{op.inputShape}}, {% endif %}on eventLoop: EventLoop? = nil) -> EventLoopFuture<{% if op.outputShape %}{{op.outputShape}}{% else %}Void{% endif %}> {
        return client.send(operation: "{{op.name}}", path: "{{op.path}}", httpMethod: "{{op.httpMethod}}"{% if op.inputShape %}, input: input{% endif %}, on: eventLoop)
    }
{%endfor %}
}
