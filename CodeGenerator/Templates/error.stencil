{%include "header.stencil" %}

import SotoCore

/// Error enum for {{name}}
public struct {{errorName}}: AWSErrorType {
    enum Code: String {
{%for error in errors %}
        case {{error.enum}} = "{{error.string}}"
{% endfor %}
    }
    
    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }
    
{%for error in errors %}
    public static var {{error.enum}}: Self { .init(.{{error.enum}}) }
{% endfor %}
}

extension {{errorName}}: Equatable {
    public static func == (lhs: {{errorName}}, rhs: {{errorName}}) -> Bool {
        lhs.error == rhs.error
    }
}

extension {{errorName}}: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
