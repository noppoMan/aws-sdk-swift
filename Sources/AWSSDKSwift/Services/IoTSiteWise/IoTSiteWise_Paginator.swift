// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

//MARK: Paginators

extension IoTSiteWise {

    ///  Gets aggregated values for an asset property. For more information, see Querying aggregates in the AWS IoT SiteWise User Guide. To identify an asset property, you must specify one of the following:   The assetId and propertyId of an asset property.   A propertyAlias, which is a data stream alias (for example, /company/windfarm/3/turbine/7/temperature). To define an asset property's alias, see UpdateAssetProperty.  
    public func getAssetPropertyAggregatesPaginator(_ input: GetAssetPropertyAggregatesRequest, onPage: @escaping (GetAssetPropertyAggregatesResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: getAssetPropertyAggregates, tokenKey: \GetAssetPropertyAggregatesResponse.nextToken, onPage: onPage)
    }

    ///  Gets the history of an asset property's values. For more information, see Querying historical values in the AWS IoT SiteWise User Guide. To identify an asset property, you must specify one of the following:   The assetId and propertyId of an asset property.   A propertyAlias, which is a data stream alias (for example, /company/windfarm/3/turbine/7/temperature). To define an asset property's alias, see UpdateAssetProperty.  
    public func getAssetPropertyValueHistoryPaginator(_ input: GetAssetPropertyValueHistoryRequest, onPage: @escaping (GetAssetPropertyValueHistoryResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: getAssetPropertyValueHistory, tokenKey: \GetAssetPropertyValueHistoryResponse.nextToken, onPage: onPage)
    }

    ///  Retrieves a paginated list of access policies for an identity (an AWS SSO user, an AWS SSO group, or an IAM user) or an AWS IoT SiteWise Monitor resource (a portal or project).
    public func listAccessPoliciesPaginator(_ input: ListAccessPoliciesRequest, onPage: @escaping (ListAccessPoliciesResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listAccessPolicies, tokenKey: \ListAccessPoliciesResponse.nextToken, onPage: onPage)
    }

    ///  Retrieves a paginated list of summaries of all asset models.
    public func listAssetModelsPaginator(_ input: ListAssetModelsRequest, onPage: @escaping (ListAssetModelsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listAssetModels, tokenKey: \ListAssetModelsResponse.nextToken, onPage: onPage)
    }

    ///  Retrieves a paginated list of asset summaries. You can use this operation to do the following:   List assets based on a specific asset model.   List top-level assets.   You can't use this operation to list all assets. To retrieve summaries for all of your assets, use ListAssetModels to get all of your asset model IDs. Then, use ListAssets to get all assets for each asset model.
    public func listAssetsPaginator(_ input: ListAssetsRequest, onPage: @escaping (ListAssetsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listAssets, tokenKey: \ListAssetsResponse.nextToken, onPage: onPage)
    }

    ///  Retrieves a paginated list of associated assets. You can use this operation to do the following:   List child assets associated to a parent asset by a hierarchy that you specify.   List an asset's parent asset.  
    public func listAssociatedAssetsPaginator(_ input: ListAssociatedAssetsRequest, onPage: @escaping (ListAssociatedAssetsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listAssociatedAssets, tokenKey: \ListAssociatedAssetsResponse.nextToken, onPage: onPage)
    }

    ///  Retrieves a paginated list of dashboards for an AWS IoT SiteWise Monitor project.
    public func listDashboardsPaginator(_ input: ListDashboardsRequest, onPage: @escaping (ListDashboardsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listDashboards, tokenKey: \ListDashboardsResponse.nextToken, onPage: onPage)
    }

    ///  Retrieves a paginated list of gateways.
    public func listGatewaysPaginator(_ input: ListGatewaysRequest, onPage: @escaping (ListGatewaysResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listGateways, tokenKey: \ListGatewaysResponse.nextToken, onPage: onPage)
    }

    ///  Retrieves a paginated list of AWS IoT SiteWise Monitor portals.
    public func listPortalsPaginator(_ input: ListPortalsRequest, onPage: @escaping (ListPortalsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listPortals, tokenKey: \ListPortalsResponse.nextToken, onPage: onPage)
    }

    ///  Retrieves a paginated list of assets associated with an AWS IoT SiteWise Monitor project.
    public func listProjectAssetsPaginator(_ input: ListProjectAssetsRequest, onPage: @escaping (ListProjectAssetsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listProjectAssets, tokenKey: \ListProjectAssetsResponse.nextToken, onPage: onPage)
    }

    ///  Retrieves a paginated list of projects for an AWS IoT SiteWise Monitor portal.
    public func listProjectsPaginator(_ input: ListProjectsRequest, onPage: @escaping (ListProjectsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listProjects, tokenKey: \ListProjectsResponse.nextToken, onPage: onPage)
    }

}

extension IoTSiteWise.GetAssetPropertyAggregatesRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.GetAssetPropertyAggregatesRequest {
        return .init(
            aggregateTypes: self.aggregateTypes, 
            assetId: self.assetId, 
            endDate: self.endDate, 
            maxResults: self.maxResults, 
            nextToken: token, 
            propertyAlias: self.propertyAlias, 
            propertyId: self.propertyId, 
            qualities: self.qualities, 
            resolution: self.resolution, 
            startDate: self.startDate, 
            timeOrdering: self.timeOrdering
        )

    }
}

extension IoTSiteWise.GetAssetPropertyValueHistoryRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.GetAssetPropertyValueHistoryRequest {
        return .init(
            assetId: self.assetId, 
            endDate: self.endDate, 
            maxResults: self.maxResults, 
            nextToken: token, 
            propertyAlias: self.propertyAlias, 
            propertyId: self.propertyId, 
            qualities: self.qualities, 
            startDate: self.startDate, 
            timeOrdering: self.timeOrdering
        )

    }
}

extension IoTSiteWise.ListAccessPoliciesRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListAccessPoliciesRequest {
        return .init(
            iamArn: self.iamArn, 
            identityId: self.identityId, 
            identityType: self.identityType, 
            maxResults: self.maxResults, 
            nextToken: token, 
            resourceId: self.resourceId, 
            resourceType: self.resourceType
        )

    }
}

extension IoTSiteWise.ListAssetModelsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListAssetModelsRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension IoTSiteWise.ListAssetsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListAssetsRequest {
        return .init(
            assetModelId: self.assetModelId, 
            filter: self.filter, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension IoTSiteWise.ListAssociatedAssetsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListAssociatedAssetsRequest {
        return .init(
            assetId: self.assetId, 
            hierarchyId: self.hierarchyId, 
            maxResults: self.maxResults, 
            nextToken: token, 
            traversalDirection: self.traversalDirection
        )

    }
}

extension IoTSiteWise.ListDashboardsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListDashboardsRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token, 
            projectId: self.projectId
        )

    }
}

extension IoTSiteWise.ListGatewaysRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListGatewaysRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension IoTSiteWise.ListPortalsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListPortalsRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension IoTSiteWise.ListProjectAssetsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListProjectAssetsRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token, 
            projectId: self.projectId
        )

    }
}

extension IoTSiteWise.ListProjectsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListProjectsRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token, 
            portalId: self.portalId
        )

    }
}


