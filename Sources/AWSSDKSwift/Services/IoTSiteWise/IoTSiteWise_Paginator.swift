//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

//MARK: Paginators

extension IoTSiteWise {

    ///  Gets aggregated values for an asset property. For more information, see Querying Aggregated Property Values in the AWS IoT SiteWise User Guide. To identify an asset property, you must specify one of the following:   The assetId and propertyId of an asset property.   A propertyAlias, which is a data stream alias (for example, /company/windfarm/3/turbine/7/temperature). To define an asset property's alias, see UpdateAssetProperty.  
    public func getAssetPropertyAggregatesPaginator(
        _ input: GetAssetPropertyAggregatesRequest,
        on eventLoop: EventLoop? = nil,
        onPage: @escaping (GetAssetPropertyAggregatesResponse,
        EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: getAssetPropertyAggregates, tokenKey: \GetAssetPropertyAggregatesResponse.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Gets the history of an asset property's values. For more information, see Querying Historical Property Values in the AWS IoT SiteWise User Guide. To identify an asset property, you must specify one of the following:   The assetId and propertyId of an asset property.   A propertyAlias, which is a data stream alias (for example, /company/windfarm/3/turbine/7/temperature). To define an asset property's alias, see UpdateAssetProperty.  
    public func getAssetPropertyValueHistoryPaginator(
        _ input: GetAssetPropertyValueHistoryRequest,
        on eventLoop: EventLoop? = nil,
        onPage: @escaping (GetAssetPropertyValueHistoryResponse,
        EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: getAssetPropertyValueHistory, tokenKey: \GetAssetPropertyValueHistoryResponse.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Retrieves a paginated list of access policies for an AWS SSO identity (a user or group) or an AWS IoT SiteWise Monitor resource (a portal or project).
    public func listAccessPoliciesPaginator(
        _ input: ListAccessPoliciesRequest,
        on eventLoop: EventLoop? = nil,
        onPage: @escaping (ListAccessPoliciesResponse,
        EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listAccessPolicies, tokenKey: \ListAccessPoliciesResponse.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Retrieves a paginated list of summaries of all asset models.
    public func listAssetModelsPaginator(
        _ input: ListAssetModelsRequest,
        on eventLoop: EventLoop? = nil,
        onPage: @escaping (ListAssetModelsResponse,
        EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listAssetModels, tokenKey: \ListAssetModelsResponse.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Retrieves a paginated list of asset summaries.
    public func listAssetsPaginator(
        _ input: ListAssetsRequest,
        on eventLoop: EventLoop? = nil,
        onPage: @escaping (ListAssetsResponse,
        EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listAssets, tokenKey: \ListAssetsResponse.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Retrieves a paginated list of the assets associated to a parent asset (assetId) by a given hierarchy (hierarchyId).
    public func listAssociatedAssetsPaginator(
        _ input: ListAssociatedAssetsRequest,
        on eventLoop: EventLoop? = nil,
        onPage: @escaping (ListAssociatedAssetsResponse,
        EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listAssociatedAssets, tokenKey: \ListAssociatedAssetsResponse.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Retrieves a paginated list of dashboards for an AWS IoT SiteWise Monitor project.
    public func listDashboardsPaginator(
        _ input: ListDashboardsRequest,
        on eventLoop: EventLoop? = nil,
        onPage: @escaping (ListDashboardsResponse,
        EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listDashboards, tokenKey: \ListDashboardsResponse.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Retrieves a paginated list of gateways.
    public func listGatewaysPaginator(
        _ input: ListGatewaysRequest,
        on eventLoop: EventLoop? = nil,
        onPage: @escaping (ListGatewaysResponse,
        EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listGateways, tokenKey: \ListGatewaysResponse.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Retrieves a paginated list of AWS IoT SiteWise Monitor portals.
    public func listPortalsPaginator(
        _ input: ListPortalsRequest,
        on eventLoop: EventLoop? = nil,
        onPage: @escaping (ListPortalsResponse,
        EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listPortals, tokenKey: \ListPortalsResponse.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Retrieves a paginated list of assets associated with an AWS IoT SiteWise Monitor project.
    public func listProjectAssetsPaginator(
        _ input: ListProjectAssetsRequest,
        on eventLoop: EventLoop? = nil,
        onPage: @escaping (ListProjectAssetsResponse,
        EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listProjectAssets, tokenKey: \ListProjectAssetsResponse.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Retrieves a paginated list of projects for an AWS IoT SiteWise Monitor portal.
    public func listProjectsPaginator(
        _ input: ListProjectsRequest,
        on eventLoop: EventLoop? = nil,
        onPage: @escaping (ListProjectsResponse,
        EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listProjects, tokenKey: \ListProjectsResponse.nextToken, on: eventLoop, onPage: onPage)
    }

}

extension IoTSiteWise.GetAssetPropertyAggregatesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.GetAssetPropertyAggregatesRequest {
        return .init(
            aggregateTypes: self.aggregateTypes,
            assetId: self.assetId,
            endDate: self.endDate,
            maxResults: self.maxResults,
            nextToken: token,
            propertyAlias: self.propertyAlias,
            propertyId: self.propertyId,
            qualities: self.qualities,
            resolution: self.resolution,
            startDate: self.startDate,
            timeOrdering: self.timeOrdering
        )

    }
}

extension IoTSiteWise.GetAssetPropertyValueHistoryRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.GetAssetPropertyValueHistoryRequest {
        return .init(
            assetId: self.assetId,
            endDate: self.endDate,
            maxResults: self.maxResults,
            nextToken: token,
            propertyAlias: self.propertyAlias,
            propertyId: self.propertyId,
            qualities: self.qualities,
            startDate: self.startDate,
            timeOrdering: self.timeOrdering
        )

    }
}

extension IoTSiteWise.ListAccessPoliciesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListAccessPoliciesRequest {
        return .init(
            identityId: self.identityId,
            identityType: self.identityType,
            maxResults: self.maxResults,
            nextToken: token,
            resourceId: self.resourceId,
            resourceType: self.resourceType
        )

    }
}

extension IoTSiteWise.ListAssetModelsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListAssetModelsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )

    }
}

extension IoTSiteWise.ListAssetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListAssetsRequest {
        return .init(
            assetModelId: self.assetModelId,
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token
        )

    }
}

extension IoTSiteWise.ListAssociatedAssetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListAssociatedAssetsRequest {
        return .init(
            assetId: self.assetId,
            hierarchyId: self.hierarchyId,
            maxResults: self.maxResults,
            nextToken: token
        )

    }
}

extension IoTSiteWise.ListDashboardsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListDashboardsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            projectId: self.projectId
        )

    }
}

extension IoTSiteWise.ListGatewaysRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListGatewaysRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )

    }
}

extension IoTSiteWise.ListPortalsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListPortalsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )

    }
}

extension IoTSiteWise.ListProjectAssetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListProjectAssetsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            projectId: self.projectId
        )

    }
}

extension IoTSiteWise.ListProjectsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTSiteWise.ListProjectsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            portalId: self.portalId
        )

    }
}


