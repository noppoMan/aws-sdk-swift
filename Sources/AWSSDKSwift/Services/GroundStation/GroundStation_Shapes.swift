// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension GroundStation {
    //MARK: Enums

    public enum AngleUnits: String, CustomStringConvertible, Codable {
        case degreeAngle = "DEGREE_ANGLE"
        case radian = "RADIAN"
        public var description: String { return self.rawValue }
    }

    public enum BandwidthUnits: String, CustomStringConvertible, Codable {
        case ghz = "GHz"
        case mhz = "MHz"
        case khz = "kHz"
        public var description: String { return self.rawValue }
    }

    public enum ConfigCapabilityType: String, CustomStringConvertible, Codable {
        case antennaDownlink = "antenna-downlink"
        case antennaDownlinkDemodDecode = "antenna-downlink-demod-decode"
        case antennaUplink = "antenna-uplink"
        case dataflowEndpoint = "dataflow-endpoint"
        case tracking = "tracking"
        case uplinkEcho = "uplink-echo"
        public var description: String { return self.rawValue }
    }

    public enum ContactStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case awsCancelled = "AWS_CANCELLED"
        case cancelled = "CANCELLED"
        case cancelling = "CANCELLING"
        case completed = "COMPLETED"
        case failed = "FAILED"
        case failedToSchedule = "FAILED_TO_SCHEDULE"
        case pass = "PASS"
        case postpass = "POSTPASS"
        case prepass = "PREPASS"
        case scheduled = "SCHEDULED"
        case scheduling = "SCHEDULING"
        public var description: String { return self.rawValue }
    }

    public enum Criticality: String, CustomStringConvertible, Codable {
        case preferred = "PREFERRED"
        case removed = "REMOVED"
        case required = "REQUIRED"
        public var description: String { return self.rawValue }
    }

    public enum EirpUnits: String, CustomStringConvertible, Codable {
        case dbw = "dBW"
        public var description: String { return self.rawValue }
    }

    public enum EndpointStatus: String, CustomStringConvertible, Codable {
        case created = "created"
        case creating = "creating"
        case deleted = "deleted"
        case deleting = "deleting"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public enum FrequencyUnits: String, CustomStringConvertible, Codable {
        case ghz = "GHz"
        case mhz = "MHz"
        case khz = "kHz"
        public var description: String { return self.rawValue }
    }

    public enum Polarization: String, CustomStringConvertible, Codable {
        case leftHand = "LEFT_HAND"
        case none = "NONE"
        case rightHand = "RIGHT_HAND"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AntennaDemodDecodeDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "outputNode", required: false, type: .string)
        ]

        /// Name of an antenna demod decode output node used in a contact.
        public let outputNode: String?

        public init(outputNode: String? = nil) {
            self.outputNode = outputNode
        }

        private enum CodingKeys: String, CodingKey {
            case outputNode = "outputNode"
        }
    }

    public struct AntennaDownlinkConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "spectrumConfig", required: true, type: .structure)
        ]

        /// Object that describes a spectral Config.
        public let spectrumConfig: SpectrumConfig

        public init(spectrumConfig: SpectrumConfig) {
            self.spectrumConfig = spectrumConfig
        }

        private enum CodingKeys: String, CodingKey {
            case spectrumConfig = "spectrumConfig"
        }
    }

    public struct AntennaDownlinkDemodDecodeConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "decodeConfig", required: true, type: .structure), 
            AWSShapeMember(label: "demodulationConfig", required: true, type: .structure), 
            AWSShapeMember(label: "spectrumConfig", required: true, type: .structure)
        ]

        /// Information about the decode Config.
        public let decodeConfig: DecodeConfig
        /// Information about the demodulation Config.
        public let demodulationConfig: DemodulationConfig
        /// Information about the spectral Config.
        public let spectrumConfig: SpectrumConfig

        public init(decodeConfig: DecodeConfig, demodulationConfig: DemodulationConfig, spectrumConfig: SpectrumConfig) {
            self.decodeConfig = decodeConfig
            self.demodulationConfig = demodulationConfig
            self.spectrumConfig = spectrumConfig
        }

        public func validate(name: String) throws {
            try self.decodeConfig.validate(name: "\(name).decodeConfig")
            try self.demodulationConfig.validate(name: "\(name).demodulationConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case decodeConfig = "decodeConfig"
            case demodulationConfig = "demodulationConfig"
            case spectrumConfig = "spectrumConfig"
        }
    }

    public struct AntennaUplinkConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "spectrumConfig", required: true, type: .structure), 
            AWSShapeMember(label: "targetEirp", required: true, type: .structure), 
            AWSShapeMember(label: "transmitDisabled", required: false, type: .boolean)
        ]

        /// Information about the uplink spectral Config.
        public let spectrumConfig: UplinkSpectrumConfig
        /// EIRP of the target.
        public let targetEirp: Eirp
        /// Whether or not uplink transmit is disabled.
        public let transmitDisabled: Bool?

        public init(spectrumConfig: UplinkSpectrumConfig, targetEirp: Eirp, transmitDisabled: Bool? = nil) {
            self.spectrumConfig = spectrumConfig
            self.targetEirp = targetEirp
            self.transmitDisabled = transmitDisabled
        }

        private enum CodingKeys: String, CodingKey {
            case spectrumConfig = "spectrumConfig"
            case targetEirp = "targetEirp"
            case transmitDisabled = "transmitDisabled"
        }
    }

    public struct CancelContactRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contactId", location: .uri(locationName: "contactId"), required: true, type: .string)
        ]

        /// UUID of a contact.
        public let contactId: String

        public init(contactId: String) {
            self.contactId = contactId
        }

        private enum CodingKeys: String, CodingKey {
            case contactId = "contactId"
        }
    }

    public struct ConfigDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "antennaDemodDecodeDetails", required: false, type: .structure), 
            AWSShapeMember(label: "endpointDetails", required: false, type: .structure)
        ]

        /// Details for antenna demod decode Config in a contact.
        public let antennaDemodDecodeDetails: AntennaDemodDecodeDetails?
        public let endpointDetails: EndpointDetails?

        public init(antennaDemodDecodeDetails: AntennaDemodDecodeDetails? = nil, endpointDetails: EndpointDetails? = nil) {
            self.antennaDemodDecodeDetails = antennaDemodDecodeDetails
            self.endpointDetails = endpointDetails
        }

        private enum CodingKeys: String, CodingKey {
            case antennaDemodDecodeDetails = "antennaDemodDecodeDetails"
            case endpointDetails = "endpointDetails"
        }
    }

    public struct ConfigIdResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configArn", required: false, type: .string), 
            AWSShapeMember(label: "configId", required: false, type: .string), 
            AWSShapeMember(label: "configType", required: false, type: .enum)
        ]

        /// ARN of a Config.
        public let configArn: String?
        /// UUID of a Config.
        public let configId: String?
        /// Type of a Config.
        public let configType: ConfigCapabilityType?

        public init(configArn: String? = nil, configId: String? = nil, configType: ConfigCapabilityType? = nil) {
            self.configArn = configArn
            self.configId = configId
            self.configType = configType
        }

        private enum CodingKeys: String, CodingKey {
            case configArn = "configArn"
            case configId = "configId"
            case configType = "configType"
        }
    }

    public struct ConfigListItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configArn", required: false, type: .string), 
            AWSShapeMember(label: "configId", required: false, type: .string), 
            AWSShapeMember(label: "configType", required: false, type: .enum), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]

        /// ARN of a Config.
        public let configArn: String?
        /// UUID of a Config.
        public let configId: String?
        /// Type of a Config.
        public let configType: ConfigCapabilityType?
        /// Name of a Config.
        public let name: String?

        public init(configArn: String? = nil, configId: String? = nil, configType: ConfigCapabilityType? = nil, name: String? = nil) {
            self.configArn = configArn
            self.configId = configId
            self.configType = configType
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case configArn = "configArn"
            case configId = "configId"
            case configType = "configType"
            case name = "name"
        }
    }

    public struct ConfigTypeData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "antennaDownlinkConfig", required: false, type: .structure), 
            AWSShapeMember(label: "antennaDownlinkDemodDecodeConfig", required: false, type: .structure), 
            AWSShapeMember(label: "antennaUplinkConfig", required: false, type: .structure), 
            AWSShapeMember(label: "dataflowEndpointConfig", required: false, type: .structure), 
            AWSShapeMember(label: "trackingConfig", required: false, type: .structure), 
            AWSShapeMember(label: "uplinkEchoConfig", required: false, type: .structure)
        ]

        /// Information about how AWS Ground Station should configure an antenna for downlink during a contact.
        public let antennaDownlinkConfig: AntennaDownlinkConfig?
        /// Information about how AWS Ground Station should conﬁgure an antenna for downlink demod decode during a contact.
        public let antennaDownlinkDemodDecodeConfig: AntennaDownlinkDemodDecodeConfig?
        /// Information about how AWS Ground Station should conﬁgure an antenna for uplink during a contact.
        public let antennaUplinkConfig: AntennaUplinkConfig?
        /// Information about the dataflow endpoint Config.
        public let dataflowEndpointConfig: DataflowEndpointConfig?
        /// Object that determines whether tracking should be used during a contact executed with this Config in the mission profile. 
        public let trackingConfig: TrackingConfig?
        /// Information about an uplink echo Config. Parameters from the AntennaUplinkConfig, corresponding to the specified AntennaUplinkConfigArn, are used when this UplinkEchoConfig is used in a contact.
        public let uplinkEchoConfig: UplinkEchoConfig?

        public init(antennaDownlinkConfig: AntennaDownlinkConfig? = nil, antennaDownlinkDemodDecodeConfig: AntennaDownlinkDemodDecodeConfig? = nil, antennaUplinkConfig: AntennaUplinkConfig? = nil, dataflowEndpointConfig: DataflowEndpointConfig? = nil, trackingConfig: TrackingConfig? = nil, uplinkEchoConfig: UplinkEchoConfig? = nil) {
            self.antennaDownlinkConfig = antennaDownlinkConfig
            self.antennaDownlinkDemodDecodeConfig = antennaDownlinkDemodDecodeConfig
            self.antennaUplinkConfig = antennaUplinkConfig
            self.dataflowEndpointConfig = dataflowEndpointConfig
            self.trackingConfig = trackingConfig
            self.uplinkEchoConfig = uplinkEchoConfig
        }

        public func validate(name: String) throws {
            try self.antennaDownlinkDemodDecodeConfig?.validate(name: "\(name).antennaDownlinkDemodDecodeConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case antennaDownlinkConfig = "antennaDownlinkConfig"
            case antennaDownlinkDemodDecodeConfig = "antennaDownlinkDemodDecodeConfig"
            case antennaUplinkConfig = "antennaUplinkConfig"
            case dataflowEndpointConfig = "dataflowEndpointConfig"
            case trackingConfig = "trackingConfig"
            case uplinkEchoConfig = "uplinkEchoConfig"
        }
    }

    public struct ContactData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contactId", required: false, type: .string), 
            AWSShapeMember(label: "contactStatus", required: false, type: .enum), 
            AWSShapeMember(label: "endTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "errorMessage", required: false, type: .string), 
            AWSShapeMember(label: "groundStation", required: false, type: .string), 
            AWSShapeMember(label: "maximumElevation", required: false, type: .structure), 
            AWSShapeMember(label: "missionProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "postPassEndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "prePassStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "region", required: false, type: .string), 
            AWSShapeMember(label: "satelliteArn", required: false, type: .string), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]

        /// UUID of a contact.
        public let contactId: String?
        /// Status of a contact.
        public let contactStatus: ContactStatus?
        /// End time of a contact.
        public let endTime: TimeStamp?
        /// Error message of a contact.
        public let errorMessage: String?
        /// Name of a ground station.
        public let groundStation: String?
        /// Maximum elevation angle of a contact.
        public let maximumElevation: Elevation?
        /// ARN of a mission profile.
        public let missionProfileArn: String?
        /// Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
        public let postPassEndTime: TimeStamp?
        /// Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.
        public let prePassStartTime: TimeStamp?
        /// Region of a contact.
        public let region: String?
        /// ARN of a satellite.
        public let satelliteArn: String?
        /// Start time of a contact.
        public let startTime: TimeStamp?
        /// Tags assigned to a contact.
        public let tags: [String: String]?

        public init(contactId: String? = nil, contactStatus: ContactStatus? = nil, endTime: TimeStamp? = nil, errorMessage: String? = nil, groundStation: String? = nil, maximumElevation: Elevation? = nil, missionProfileArn: String? = nil, postPassEndTime: TimeStamp? = nil, prePassStartTime: TimeStamp? = nil, region: String? = nil, satelliteArn: String? = nil, startTime: TimeStamp? = nil, tags: [String: String]? = nil) {
            self.contactId = contactId
            self.contactStatus = contactStatus
            self.endTime = endTime
            self.errorMessage = errorMessage
            self.groundStation = groundStation
            self.maximumElevation = maximumElevation
            self.missionProfileArn = missionProfileArn
            self.postPassEndTime = postPassEndTime
            self.prePassStartTime = prePassStartTime
            self.region = region
            self.satelliteArn = satelliteArn
            self.startTime = startTime
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case contactId = "contactId"
            case contactStatus = "contactStatus"
            case endTime = "endTime"
            case errorMessage = "errorMessage"
            case groundStation = "groundStation"
            case maximumElevation = "maximumElevation"
            case missionProfileArn = "missionProfileArn"
            case postPassEndTime = "postPassEndTime"
            case prePassStartTime = "prePassStartTime"
            case region = "region"
            case satelliteArn = "satelliteArn"
            case startTime = "startTime"
            case tags = "tags"
        }
    }

    public struct ContactIdResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contactId", required: false, type: .string)
        ]

        /// UUID of a contact.
        public let contactId: String?

        public init(contactId: String? = nil) {
            self.contactId = contactId
        }

        private enum CodingKeys: String, CodingKey {
            case contactId = "contactId"
        }
    }

    public struct CreateConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configData", required: true, type: .structure), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]

        /// Parameters of a Config.
        public let configData: ConfigTypeData
        /// Name of a Config.
        public let name: String
        /// Tags assigned to a Config.
        public let tags: [String: String]?

        public init(configData: ConfigTypeData, name: String, tags: [String: String]? = nil) {
            self.configData = configData
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.configData.validate(name: "\(name).configData")
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[ a-zA-Z0-9_:-]{1,256}$")
        }

        private enum CodingKeys: String, CodingKey {
            case configData = "configData"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct CreateDataflowEndpointGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endpointDetails", required: true, type: .list), 
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]

        /// Endpoint details of each endpoint in the dataflow endpoint group.
        public let endpointDetails: [EndpointDetails]
        /// Tags of a dataflow endpoint group.
        public let tags: [String: String]?

        public init(endpointDetails: [EndpointDetails], tags: [String: String]? = nil) {
            self.endpointDetails = endpointDetails
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.endpointDetails.forEach {
                try $0.validate(name: "\(name).endpointDetails[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case endpointDetails = "endpointDetails"
            case tags = "tags"
        }
    }

    public struct CreateMissionProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contactPostPassDurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "contactPrePassDurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "dataflowEdges", required: true, type: .list), 
            AWSShapeMember(label: "minimumViableContactDurationSeconds", required: true, type: .integer), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .map), 
            AWSShapeMember(label: "trackingConfigArn", required: true, type: .string)
        ]

        /// Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
        public let contactPostPassDurationSeconds: Int?
        /// Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.
        public let contactPrePassDurationSeconds: Int?
        /// A list of lists of ARNs. Each list of ARNs is an edge, with a from Config and a to Config.
        public let dataflowEdges: [[String]]
        /// Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
        public let minimumViableContactDurationSeconds: Int
        /// Name of a mission profile.
        public let name: String
        /// Tags assigned to a mission profile.
        public let tags: [String: String]?
        /// ARN of a tracking Config.
        public let trackingConfigArn: String

        public init(contactPostPassDurationSeconds: Int? = nil, contactPrePassDurationSeconds: Int? = nil, dataflowEdges: [[String]], minimumViableContactDurationSeconds: Int, name: String, tags: [String: String]? = nil, trackingConfigArn: String) {
            self.contactPostPassDurationSeconds = contactPostPassDurationSeconds
            self.contactPrePassDurationSeconds = contactPrePassDurationSeconds
            self.dataflowEdges = dataflowEdges
            self.minimumViableContactDurationSeconds = minimumViableContactDurationSeconds
            self.name = name
            self.tags = tags
            self.trackingConfigArn = trackingConfigArn
        }

        public func validate(name: String) throws {
            try validate(self.contactPostPassDurationSeconds, name:"contactPostPassDurationSeconds", parent: name, max: 21600)
            try validate(self.contactPostPassDurationSeconds, name:"contactPostPassDurationSeconds", parent: name, min: 1)
            try validate(self.contactPrePassDurationSeconds, name:"contactPrePassDurationSeconds", parent: name, max: 21600)
            try validate(self.contactPrePassDurationSeconds, name:"contactPrePassDurationSeconds", parent: name, min: 1)
            try self.dataflowEdges.forEach {
                try validate($0, name: "dataflowEdges[]", parent: name, max: 2)
                try validate($0, name: "dataflowEdges[]", parent: name, min: 2)
            }
            try validate(self.minimumViableContactDurationSeconds, name:"minimumViableContactDurationSeconds", parent: name, max: 21600)
            try validate(self.minimumViableContactDurationSeconds, name:"minimumViableContactDurationSeconds", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[ a-zA-Z0-9_:-]{1,256}$")
        }

        private enum CodingKeys: String, CodingKey {
            case contactPostPassDurationSeconds = "contactPostPassDurationSeconds"
            case contactPrePassDurationSeconds = "contactPrePassDurationSeconds"
            case dataflowEdges = "dataflowEdges"
            case minimumViableContactDurationSeconds = "minimumViableContactDurationSeconds"
            case name = "name"
            case tags = "tags"
            case trackingConfigArn = "trackingConfigArn"
        }
    }

    public struct DataflowDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destination", required: false, type: .structure), 
            AWSShapeMember(label: "source", required: false, type: .structure)
        ]

        public let destination: Destination?
        public let source: Source?

        public init(destination: Destination? = nil, source: Source? = nil) {
            self.destination = destination
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "destination"
            case source = "source"
        }
    }

    public struct DataflowEndpoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "address", required: false, type: .structure), 
            AWSShapeMember(label: "mtu", required: false, type: .integer), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]

        /// Socket address of a dataflow endpoint.
        public let address: SocketAddress?
        /// Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.
        public let mtu: Int?
        /// Name of a dataflow endpoint.
        public let name: String?
        /// Status of a dataflow endpoint.
        public let status: EndpointStatus?

        public init(address: SocketAddress? = nil, mtu: Int? = nil, name: String? = nil, status: EndpointStatus? = nil) {
            self.address = address
            self.mtu = mtu
            self.name = name
            self.status = status
        }

        public func validate(name: String) throws {
            try validate(self.mtu, name:"mtu", parent: name, max: 1500)
            try validate(self.mtu, name:"mtu", parent: name, min: 1400)
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[ a-zA-Z0-9_:-]{1,256}$")
        }

        private enum CodingKeys: String, CodingKey {
            case address = "address"
            case mtu = "mtu"
            case name = "name"
            case status = "status"
        }
    }

    public struct DataflowEndpointConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataflowEndpointName", required: true, type: .string), 
            AWSShapeMember(label: "dataflowEndpointRegion", required: false, type: .string)
        ]

        /// Name of a dataflow endpoint.
        public let dataflowEndpointName: String
        /// Region of a dataflow endpoint.
        public let dataflowEndpointRegion: String?

        public init(dataflowEndpointName: String, dataflowEndpointRegion: String? = nil) {
            self.dataflowEndpointName = dataflowEndpointName
            self.dataflowEndpointRegion = dataflowEndpointRegion
        }

        private enum CodingKeys: String, CodingKey {
            case dataflowEndpointName = "dataflowEndpointName"
            case dataflowEndpointRegion = "dataflowEndpointRegion"
        }
    }

    public struct DataflowEndpointGroupIdResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataflowEndpointGroupId", required: false, type: .string)
        ]

        /// UUID of a dataflow endpoint group.
        public let dataflowEndpointGroupId: String?

        public init(dataflowEndpointGroupId: String? = nil) {
            self.dataflowEndpointGroupId = dataflowEndpointGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case dataflowEndpointGroupId = "dataflowEndpointGroupId"
        }
    }

    public struct DataflowEndpointListItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataflowEndpointGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "dataflowEndpointGroupId", required: false, type: .string)
        ]

        /// ARN of a dataflow endpoint group.
        public let dataflowEndpointGroupArn: String?
        /// UUID of a dataflow endpoint group.
        public let dataflowEndpointGroupId: String?

        public init(dataflowEndpointGroupArn: String? = nil, dataflowEndpointGroupId: String? = nil) {
            self.dataflowEndpointGroupArn = dataflowEndpointGroupArn
            self.dataflowEndpointGroupId = dataflowEndpointGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case dataflowEndpointGroupArn = "dataflowEndpointGroupArn"
            case dataflowEndpointGroupId = "dataflowEndpointGroupId"
        }
    }

    public struct DecodeConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "unvalidatedJSON", required: true, type: .string)
        ]

        /// Unvalidated JSON of a decode Config.
        public let unvalidatedJSON: String

        public init(unvalidatedJSON: String) {
            self.unvalidatedJSON = unvalidatedJSON
        }

        public func validate(name: String) throws {
            try validate(self.unvalidatedJSON, name:"unvalidatedJSON", parent: name, max: 8192)
            try validate(self.unvalidatedJSON, name:"unvalidatedJSON", parent: name, min: 2)
            try validate(self.unvalidatedJSON, name:"unvalidatedJSON", parent: name, pattern: "^[{}\\[\\]:.,\"0-9A-z\\-_\\s]{2,8192}$")
        }

        private enum CodingKeys: String, CodingKey {
            case unvalidatedJSON = "unvalidatedJSON"
        }
    }

    public struct DeleteConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configId", location: .uri(locationName: "configId"), required: true, type: .string), 
            AWSShapeMember(label: "configType", location: .uri(locationName: "configType"), required: true, type: .enum)
        ]

        /// UUID of a Config.
        public let configId: String
        /// Type of a Config.
        public let configType: ConfigCapabilityType

        public init(configId: String, configType: ConfigCapabilityType) {
            self.configId = configId
            self.configType = configType
        }

        private enum CodingKeys: String, CodingKey {
            case configId = "configId"
            case configType = "configType"
        }
    }

    public struct DeleteDataflowEndpointGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataflowEndpointGroupId", location: .uri(locationName: "dataflowEndpointGroupId"), required: true, type: .string)
        ]

        /// UUID of a dataflow endpoint group.
        public let dataflowEndpointGroupId: String

        public init(dataflowEndpointGroupId: String) {
            self.dataflowEndpointGroupId = dataflowEndpointGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case dataflowEndpointGroupId = "dataflowEndpointGroupId"
        }
    }

    public struct DeleteMissionProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "missionProfileId", location: .uri(locationName: "missionProfileId"), required: true, type: .string)
        ]

        /// UUID of a mission profile.
        public let missionProfileId: String

        public init(missionProfileId: String) {
            self.missionProfileId = missionProfileId
        }

        private enum CodingKeys: String, CodingKey {
            case missionProfileId = "missionProfileId"
        }
    }

    public struct DemodulationConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "unvalidatedJSON", required: true, type: .string)
        ]

        /// Unvalidated JSON of a demodulation Config.
        public let unvalidatedJSON: String

        public init(unvalidatedJSON: String) {
            self.unvalidatedJSON = unvalidatedJSON
        }

        public func validate(name: String) throws {
            try validate(self.unvalidatedJSON, name:"unvalidatedJSON", parent: name, max: 8192)
            try validate(self.unvalidatedJSON, name:"unvalidatedJSON", parent: name, min: 2)
            try validate(self.unvalidatedJSON, name:"unvalidatedJSON", parent: name, pattern: "^[{}\\[\\]:.,\"0-9A-z\\-_\\s]{2,8192}$")
        }

        private enum CodingKeys: String, CodingKey {
            case unvalidatedJSON = "unvalidatedJSON"
        }
    }

    public struct DescribeContactRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contactId", location: .uri(locationName: "contactId"), required: true, type: .string)
        ]

        /// UUID of a contact.
        public let contactId: String

        public init(contactId: String) {
            self.contactId = contactId
        }

        private enum CodingKeys: String, CodingKey {
            case contactId = "contactId"
        }
    }

    public struct DescribeContactResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contactId", required: false, type: .string), 
            AWSShapeMember(label: "contactStatus", required: false, type: .enum), 
            AWSShapeMember(label: "dataflowList", required: false, type: .list), 
            AWSShapeMember(label: "endTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "errorMessage", required: false, type: .string), 
            AWSShapeMember(label: "groundStation", required: false, type: .string), 
            AWSShapeMember(label: "maximumElevation", required: false, type: .structure), 
            AWSShapeMember(label: "missionProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "postPassEndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "prePassStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "region", required: false, type: .string), 
            AWSShapeMember(label: "satelliteArn", required: false, type: .string), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]

        /// UUID of a contact.
        public let contactId: String?
        /// Status of a contact.
        public let contactStatus: ContactStatus?
        /// List describing source and destination details for each dataflow edge.
        public let dataflowList: [DataflowDetail]?
        /// End time of a contact.
        public let endTime: TimeStamp?
        /// Error message for a contact.
        public let errorMessage: String?
        /// Ground station for a contact.
        public let groundStation: String?
        /// Maximum elevation angle of a contact.
        public let maximumElevation: Elevation?
        /// ARN of a mission profile.
        public let missionProfileArn: String?
        /// Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
        public let postPassEndTime: TimeStamp?
        /// Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.
        public let prePassStartTime: TimeStamp?
        /// Region of a contact.
        public let region: String?
        /// ARN of a satellite.
        public let satelliteArn: String?
        /// Start time of a contact.
        public let startTime: TimeStamp?
        /// Tags assigned to a contact.
        public let tags: [String: String]?

        public init(contactId: String? = nil, contactStatus: ContactStatus? = nil, dataflowList: [DataflowDetail]? = nil, endTime: TimeStamp? = nil, errorMessage: String? = nil, groundStation: String? = nil, maximumElevation: Elevation? = nil, missionProfileArn: String? = nil, postPassEndTime: TimeStamp? = nil, prePassStartTime: TimeStamp? = nil, region: String? = nil, satelliteArn: String? = nil, startTime: TimeStamp? = nil, tags: [String: String]? = nil) {
            self.contactId = contactId
            self.contactStatus = contactStatus
            self.dataflowList = dataflowList
            self.endTime = endTime
            self.errorMessage = errorMessage
            self.groundStation = groundStation
            self.maximumElevation = maximumElevation
            self.missionProfileArn = missionProfileArn
            self.postPassEndTime = postPassEndTime
            self.prePassStartTime = prePassStartTime
            self.region = region
            self.satelliteArn = satelliteArn
            self.startTime = startTime
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case contactId = "contactId"
            case contactStatus = "contactStatus"
            case dataflowList = "dataflowList"
            case endTime = "endTime"
            case errorMessage = "errorMessage"
            case groundStation = "groundStation"
            case maximumElevation = "maximumElevation"
            case missionProfileArn = "missionProfileArn"
            case postPassEndTime = "postPassEndTime"
            case prePassStartTime = "prePassStartTime"
            case region = "region"
            case satelliteArn = "satelliteArn"
            case startTime = "startTime"
            case tags = "tags"
        }
    }

    public struct Destination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configDetails", required: false, type: .structure), 
            AWSShapeMember(label: "configId", required: false, type: .string), 
            AWSShapeMember(label: "configType", required: false, type: .enum), 
            AWSShapeMember(label: "dataflowDestinationRegion", required: false, type: .string)
        ]

        /// Additional details for a Config, if type is dataflow endpoint or antenna demod decode.
        public let configDetails: ConfigDetails?
        /// UUID of a Config.
        public let configId: String?
        /// Type of a Config.
        public let configType: ConfigCapabilityType?
        /// Region of a dataflow destination.
        public let dataflowDestinationRegion: String?

        public init(configDetails: ConfigDetails? = nil, configId: String? = nil, configType: ConfigCapabilityType? = nil, dataflowDestinationRegion: String? = nil) {
            self.configDetails = configDetails
            self.configId = configId
            self.configType = configType
            self.dataflowDestinationRegion = dataflowDestinationRegion
        }

        private enum CodingKeys: String, CodingKey {
            case configDetails = "configDetails"
            case configId = "configId"
            case configType = "configType"
            case dataflowDestinationRegion = "dataflowDestinationRegion"
        }
    }

    public struct Eirp: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "units", required: true, type: .enum), 
            AWSShapeMember(label: "value", required: true, type: .double)
        ]

        /// Units of an EIRP.
        public let units: EirpUnits
        /// Value of an EIRP. Valid values are between 20.0 to 50.0 dBW.
        public let value: Double

        public init(units: EirpUnits, value: Double) {
            self.units = units
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case units = "units"
            case value = "value"
        }
    }

    public struct Elevation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "unit", required: true, type: .enum), 
            AWSShapeMember(label: "value", required: true, type: .double)
        ]

        /// Elevation angle units.
        public let unit: AngleUnits
        /// Elevation angle value.
        public let value: Double

        public init(unit: AngleUnits, value: Double) {
            self.unit = unit
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case unit = "unit"
            case value = "value"
        }
    }

    public struct EndpointDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endpoint", required: false, type: .structure), 
            AWSShapeMember(label: "securityDetails", required: false, type: .structure)
        ]

        /// A dataflow endpoint.
        public let endpoint: DataflowEndpoint?
        /// Endpoint security details.
        public let securityDetails: SecurityDetails?

        public init(endpoint: DataflowEndpoint? = nil, securityDetails: SecurityDetails? = nil) {
            self.endpoint = endpoint
            self.securityDetails = securityDetails
        }

        public func validate(name: String) throws {
            try self.endpoint?.validate(name: "\(name).endpoint")
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "endpoint"
            case securityDetails = "securityDetails"
        }
    }

    public struct Frequency: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "units", required: true, type: .enum), 
            AWSShapeMember(label: "value", required: true, type: .double)
        ]

        /// Frequency units.
        public let units: FrequencyUnits
        /// Frequency value. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.
        public let value: Double

        public init(units: FrequencyUnits, value: Double) {
            self.units = units
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case units = "units"
            case value = "value"
        }
    }

    public struct FrequencyBandwidth: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "units", required: true, type: .enum), 
            AWSShapeMember(label: "value", required: true, type: .double)
        ]

        /// Frequency bandwidth units.
        public let units: BandwidthUnits
        /// Frequency bandwidth value. AWS Ground Station currently has the following bandwidth limitations:   For AntennaDownlinkDemodDecodeconfig, valid values are between 125 kHz to 650 MHz.   For AntennaDownlinkconfig, valid values are between 10 kHz to 54 MHz.   For AntennaUplinkConfig, valid values are between 10 kHz to 54 MHz.  
        public let value: Double

        public init(units: BandwidthUnits, value: Double) {
            self.units = units
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case units = "units"
            case value = "value"
        }
    }

    public struct GetConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configId", location: .uri(locationName: "configId"), required: true, type: .string), 
            AWSShapeMember(label: "configType", location: .uri(locationName: "configType"), required: true, type: .enum)
        ]

        /// UUID of a Config.
        public let configId: String
        /// Type of a Config.
        public let configType: ConfigCapabilityType

        public init(configId: String, configType: ConfigCapabilityType) {
            self.configId = configId
            self.configType = configType
        }

        private enum CodingKeys: String, CodingKey {
            case configId = "configId"
            case configType = "configType"
        }
    }

    public struct GetConfigResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configArn", required: true, type: .string), 
            AWSShapeMember(label: "configData", required: true, type: .structure), 
            AWSShapeMember(label: "configId", required: true, type: .string), 
            AWSShapeMember(label: "configType", required: false, type: .enum), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]

        /// ARN of a Config 
        public let configArn: String
        /// Data elements in a Config.
        public let configData: ConfigTypeData
        /// UUID of a Config.
        public let configId: String
        /// Type of a Config.
        public let configType: ConfigCapabilityType?
        /// Name of a Config.
        public let name: String
        /// Tags assigned to a Config.
        public let tags: [String: String]?

        public init(configArn: String, configData: ConfigTypeData, configId: String, configType: ConfigCapabilityType? = nil, name: String, tags: [String: String]? = nil) {
            self.configArn = configArn
            self.configData = configData
            self.configId = configId
            self.configType = configType
            self.name = name
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case configArn = "configArn"
            case configData = "configData"
            case configId = "configId"
            case configType = "configType"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct GetDataflowEndpointGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataflowEndpointGroupId", location: .uri(locationName: "dataflowEndpointGroupId"), required: true, type: .string)
        ]

        /// UUID of a dataflow endpoint group.
        public let dataflowEndpointGroupId: String

        public init(dataflowEndpointGroupId: String) {
            self.dataflowEndpointGroupId = dataflowEndpointGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case dataflowEndpointGroupId = "dataflowEndpointGroupId"
        }
    }

    public struct GetDataflowEndpointGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataflowEndpointGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "dataflowEndpointGroupId", required: false, type: .string), 
            AWSShapeMember(label: "endpointsDetails", required: false, type: .list), 
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]

        /// ARN of a dataflow endpoint group.
        public let dataflowEndpointGroupArn: String?
        /// UUID of a dataflow endpoint group.
        public let dataflowEndpointGroupId: String?
        /// Details of a dataflow endpoint.
        public let endpointsDetails: [EndpointDetails]?
        /// Tags assigned to a dataflow endpoint group.
        public let tags: [String: String]?

        public init(dataflowEndpointGroupArn: String? = nil, dataflowEndpointGroupId: String? = nil, endpointsDetails: [EndpointDetails]? = nil, tags: [String: String]? = nil) {
            self.dataflowEndpointGroupArn = dataflowEndpointGroupArn
            self.dataflowEndpointGroupId = dataflowEndpointGroupId
            self.endpointsDetails = endpointsDetails
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dataflowEndpointGroupArn = "dataflowEndpointGroupArn"
            case dataflowEndpointGroupId = "dataflowEndpointGroupId"
            case endpointsDetails = "endpointsDetails"
            case tags = "tags"
        }
    }

    public struct GetMinuteUsageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "month", required: true, type: .integer), 
            AWSShapeMember(label: "year", required: true, type: .integer)
        ]

        /// The month being requested, with a value of 1-12.
        public let month: Int
        /// The year being requested, in the format of YYYY.
        public let year: Int

        public init(month: Int, year: Int) {
            self.month = month
            self.year = year
        }

        private enum CodingKeys: String, CodingKey {
            case month = "month"
            case year = "year"
        }
    }

    public struct GetMinuteUsageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "estimatedMinutesRemaining", required: false, type: .integer), 
            AWSShapeMember(label: "isReservedMinutesCustomer", required: false, type: .boolean), 
            AWSShapeMember(label: "totalReservedMinuteAllocation", required: false, type: .integer), 
            AWSShapeMember(label: "totalScheduledMinutes", required: false, type: .integer), 
            AWSShapeMember(label: "upcomingMinutesScheduled", required: false, type: .integer)
        ]

        /// Estimated number of minutes remaining for an account, specific to the month being requested.
        public let estimatedMinutesRemaining: Int?
        /// Returns whether or not an account has signed up for the reserved minutes pricing plan, specific to the month being requested.
        public let isReservedMinutesCustomer: Bool?
        /// Total number of reserved minutes allocated, specific to the month being requested.
        public let totalReservedMinuteAllocation: Int?
        /// Total scheduled minutes for an account, specific to the month being requested.
        public let totalScheduledMinutes: Int?
        /// Upcoming minutes scheduled for an account, specific to the month being requested.
        public let upcomingMinutesScheduled: Int?

        public init(estimatedMinutesRemaining: Int? = nil, isReservedMinutesCustomer: Bool? = nil, totalReservedMinuteAllocation: Int? = nil, totalScheduledMinutes: Int? = nil, upcomingMinutesScheduled: Int? = nil) {
            self.estimatedMinutesRemaining = estimatedMinutesRemaining
            self.isReservedMinutesCustomer = isReservedMinutesCustomer
            self.totalReservedMinuteAllocation = totalReservedMinuteAllocation
            self.totalScheduledMinutes = totalScheduledMinutes
            self.upcomingMinutesScheduled = upcomingMinutesScheduled
        }

        private enum CodingKeys: String, CodingKey {
            case estimatedMinutesRemaining = "estimatedMinutesRemaining"
            case isReservedMinutesCustomer = "isReservedMinutesCustomer"
            case totalReservedMinuteAllocation = "totalReservedMinuteAllocation"
            case totalScheduledMinutes = "totalScheduledMinutes"
            case upcomingMinutesScheduled = "upcomingMinutesScheduled"
        }
    }

    public struct GetMissionProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "missionProfileId", location: .uri(locationName: "missionProfileId"), required: true, type: .string)
        ]

        /// UUID of a mission profile.
        public let missionProfileId: String

        public init(missionProfileId: String) {
            self.missionProfileId = missionProfileId
        }

        private enum CodingKeys: String, CodingKey {
            case missionProfileId = "missionProfileId"
        }
    }

    public struct GetMissionProfileResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contactPostPassDurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "contactPrePassDurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "dataflowEdges", required: false, type: .list), 
            AWSShapeMember(label: "minimumViableContactDurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "missionProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "missionProfileId", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "region", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .map), 
            AWSShapeMember(label: "trackingConfigArn", required: false, type: .string)
        ]

        /// Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
        public let contactPostPassDurationSeconds: Int?
        /// Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.
        public let contactPrePassDurationSeconds: Int?
        /// A list of lists of ARNs. Each list of ARNs is an edge, with a from Config and a to Config.
        public let dataflowEdges: [[String]]?
        /// Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
        public let minimumViableContactDurationSeconds: Int?
        /// ARN of a mission profile.
        public let missionProfileArn: String?
        /// UUID of a mission profile.
        public let missionProfileId: String?
        /// Name of a mission profile.
        public let name: String?
        /// Region of a mission profile.
        public let region: String?
        /// Tags assigned to a mission profile.
        public let tags: [String: String]?
        /// ARN of a tracking Config.
        public let trackingConfigArn: String?

        public init(contactPostPassDurationSeconds: Int? = nil, contactPrePassDurationSeconds: Int? = nil, dataflowEdges: [[String]]? = nil, minimumViableContactDurationSeconds: Int? = nil, missionProfileArn: String? = nil, missionProfileId: String? = nil, name: String? = nil, region: String? = nil, tags: [String: String]? = nil, trackingConfigArn: String? = nil) {
            self.contactPostPassDurationSeconds = contactPostPassDurationSeconds
            self.contactPrePassDurationSeconds = contactPrePassDurationSeconds
            self.dataflowEdges = dataflowEdges
            self.minimumViableContactDurationSeconds = minimumViableContactDurationSeconds
            self.missionProfileArn = missionProfileArn
            self.missionProfileId = missionProfileId
            self.name = name
            self.region = region
            self.tags = tags
            self.trackingConfigArn = trackingConfigArn
        }

        private enum CodingKeys: String, CodingKey {
            case contactPostPassDurationSeconds = "contactPostPassDurationSeconds"
            case contactPrePassDurationSeconds = "contactPrePassDurationSeconds"
            case dataflowEdges = "dataflowEdges"
            case minimumViableContactDurationSeconds = "minimumViableContactDurationSeconds"
            case missionProfileArn = "missionProfileArn"
            case missionProfileId = "missionProfileId"
            case name = "name"
            case region = "region"
            case tags = "tags"
            case trackingConfigArn = "trackingConfigArn"
        }
    }

    public struct GetSatelliteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "satelliteId", location: .uri(locationName: "satelliteId"), required: true, type: .string)
        ]

        /// UUID of a satellite.
        public let satelliteId: String

        public init(satelliteId: String) {
            self.satelliteId = satelliteId
        }

        private enum CodingKeys: String, CodingKey {
            case satelliteId = "satelliteId"
        }
    }

    public struct GetSatelliteResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "groundStations", required: false, type: .list), 
            AWSShapeMember(label: "noradSatelliteID", required: false, type: .integer), 
            AWSShapeMember(label: "satelliteArn", required: false, type: .string), 
            AWSShapeMember(label: "satelliteId", required: false, type: .string)
        ]

        /// A list of ground stations to which the satellite is on-boarded.
        public let groundStations: [String]?
        /// NORAD satellite ID number.
        public let noradSatelliteID: Int?
        /// ARN of a satellite.
        public let satelliteArn: String?
        /// UUID of a satellite.
        public let satelliteId: String?

        public init(groundStations: [String]? = nil, noradSatelliteID: Int? = nil, satelliteArn: String? = nil, satelliteId: String? = nil) {
            self.groundStations = groundStations
            self.noradSatelliteID = noradSatelliteID
            self.satelliteArn = satelliteArn
            self.satelliteId = satelliteId
        }

        private enum CodingKeys: String, CodingKey {
            case groundStations = "groundStations"
            case noradSatelliteID = "noradSatelliteID"
            case satelliteArn = "satelliteArn"
            case satelliteId = "satelliteId"
        }
    }

    public struct GroundStationData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "groundStationId", required: false, type: .string), 
            AWSShapeMember(label: "groundStationName", required: false, type: .string), 
            AWSShapeMember(label: "region", required: false, type: .string)
        ]

        /// UUID of a ground station.
        public let groundStationId: String?
        /// Name of a ground station.
        public let groundStationName: String?
        /// Ground station Region.
        public let region: String?

        public init(groundStationId: String? = nil, groundStationName: String? = nil, region: String? = nil) {
            self.groundStationId = groundStationId
            self.groundStationName = groundStationName
            self.region = region
        }

        private enum CodingKeys: String, CodingKey {
            case groundStationId = "groundStationId"
            case groundStationName = "groundStationName"
            case region = "region"
        }
    }

    public struct ListConfigsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Maximum number of Configs returned.
        public let maxResults: Int?
        /// Next token returned in the request of a previous ListConfigs call. Used to get the next page of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListConfigsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configList", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// List of Config items.
        public let configList: [ConfigListItem]?
        /// Next token returned in the response of a previous ListConfigs call. Used to get the next page of results.
        public let nextToken: String?

        public init(configList: [ConfigListItem]? = nil, nextToken: String? = nil) {
            self.configList = configList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case configList = "configList"
            case nextToken = "nextToken"
        }
    }

    public struct ListContactsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "groundStation", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "missionProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "satelliteArn", required: false, type: .string), 
            AWSShapeMember(label: "startTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "statusList", required: true, type: .list)
        ]

        /// End time of a contact.
        public let endTime: TimeStamp
        /// Name of a ground station.
        public let groundStation: String?
        /// Maximum number of contacts returned.
        public let maxResults: Int?
        /// ARN of a mission profile.
        public let missionProfileArn: String?
        /// Next token returned in the request of a previous ListContacts call. Used to get the next page of results.
        public let nextToken: String?
        /// ARN of a satellite.
        public let satelliteArn: String?
        /// Start time of a contact.
        public let startTime: TimeStamp
        /// Status of a contact reservation.
        public let statusList: [ContactStatus]

        public init(endTime: TimeStamp, groundStation: String? = nil, maxResults: Int? = nil, missionProfileArn: String? = nil, nextToken: String? = nil, satelliteArn: String? = nil, startTime: TimeStamp, statusList: [ContactStatus]) {
            self.endTime = endTime
            self.groundStation = groundStation
            self.maxResults = maxResults
            self.missionProfileArn = missionProfileArn
            self.nextToken = nextToken
            self.satelliteArn = satelliteArn
            self.startTime = startTime
            self.statusList = statusList
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "endTime"
            case groundStation = "groundStation"
            case maxResults = "maxResults"
            case missionProfileArn = "missionProfileArn"
            case nextToken = "nextToken"
            case satelliteArn = "satelliteArn"
            case startTime = "startTime"
            case statusList = "statusList"
        }
    }

    public struct ListContactsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contactList", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// List of contacts.
        public let contactList: [ContactData]?
        /// Next token returned in the response of a previous ListContacts call. Used to get the next page of results.
        public let nextToken: String?

        public init(contactList: [ContactData]? = nil, nextToken: String? = nil) {
            self.contactList = contactList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case contactList = "contactList"
            case nextToken = "nextToken"
        }
    }

    public struct ListDataflowEndpointGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Maximum number of dataflow endpoint groups returned.
        public let maxResults: Int?
        /// Next token returned in the request of a previous ListDataflowEndpointGroups call. Used to get the next page of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListDataflowEndpointGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataflowEndpointGroupList", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// A list of dataflow endpoint groups.
        public let dataflowEndpointGroupList: [DataflowEndpointListItem]?
        /// Next token returned in the response of a previous ListDataflowEndpointGroups call. Used to get the next page of results.
        public let nextToken: String?

        public init(dataflowEndpointGroupList: [DataflowEndpointListItem]? = nil, nextToken: String? = nil) {
            self.dataflowEndpointGroupList = dataflowEndpointGroupList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dataflowEndpointGroupList = "dataflowEndpointGroupList"
            case nextToken = "nextToken"
        }
    }

    public struct ListGroundStationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "satelliteId", location: .querystring(locationName: "satelliteId"), required: false, type: .string)
        ]

        /// Maximum number of ground stations returned.
        public let maxResults: Int?
        /// Next token that can be supplied in the next call to get the next page of ground stations.
        public let nextToken: String?
        /// Satellite ID to retrieve on-boarded ground stations.
        public let satelliteId: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, satelliteId: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.satelliteId = satelliteId
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case satelliteId = "satelliteId"
        }
    }

    public struct ListGroundStationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "groundStationList", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// List of ground stations.
        public let groundStationList: [GroundStationData]?
        /// Next token that can be supplied in the next call to get the next page of ground stations.
        public let nextToken: String?

        public init(groundStationList: [GroundStationData]? = nil, nextToken: String? = nil) {
            self.groundStationList = groundStationList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case groundStationList = "groundStationList"
            case nextToken = "nextToken"
        }
    }

    public struct ListMissionProfilesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Maximum number of mission profiles returned.
        public let maxResults: Int?
        /// Next token returned in the request of a previous ListMissionProfiles call. Used to get the next page of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListMissionProfilesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "missionProfileList", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// List of mission profiles.
        public let missionProfileList: [MissionProfileListItem]?
        /// Next token returned in the response of a previous ListMissionProfiles call. Used to get the next page of results.
        public let nextToken: String?

        public init(missionProfileList: [MissionProfileListItem]? = nil, nextToken: String? = nil) {
            self.missionProfileList = missionProfileList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case missionProfileList = "missionProfileList"
            case nextToken = "nextToken"
        }
    }

    public struct ListSatellitesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Maximum number of satellites returned.
        public let maxResults: Int?
        /// Next token that can be supplied in the next call to get the next page of satellites.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListSatellitesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "satellites", required: false, type: .list)
        ]

        /// Next token that can be supplied in the next call to get the next page of satellites.
        public let nextToken: String?
        /// List of satellites.
        public let satellites: [SatelliteListItem]?

        public init(nextToken: String? = nil, satellites: [SatelliteListItem]? = nil) {
            self.nextToken = nextToken
            self.satellites = satellites
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case satellites = "satellites"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resourceArn"), required: true, type: .string)
        ]

        /// ARN of a resource.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]

        /// Tags assigned to a resource.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct MissionProfileIdResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "missionProfileId", required: false, type: .string)
        ]

        /// UUID of a mission profile.
        public let missionProfileId: String?

        public init(missionProfileId: String? = nil) {
            self.missionProfileId = missionProfileId
        }

        private enum CodingKeys: String, CodingKey {
            case missionProfileId = "missionProfileId"
        }
    }

    public struct MissionProfileListItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "missionProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "missionProfileId", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "region", required: false, type: .string)
        ]

        /// ARN of a mission profile.
        public let missionProfileArn: String?
        /// UUID of a mission profile.
        public let missionProfileId: String?
        /// Name of a mission profile.
        public let name: String?
        /// Region of a mission profile.
        public let region: String?

        public init(missionProfileArn: String? = nil, missionProfileId: String? = nil, name: String? = nil, region: String? = nil) {
            self.missionProfileArn = missionProfileArn
            self.missionProfileId = missionProfileId
            self.name = name
            self.region = region
        }

        private enum CodingKeys: String, CodingKey {
            case missionProfileArn = "missionProfileArn"
            case missionProfileId = "missionProfileId"
            case name = "name"
            case region = "region"
        }
    }

    public struct ReserveContactRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "groundStation", required: true, type: .string), 
            AWSShapeMember(label: "missionProfileArn", required: true, type: .string), 
            AWSShapeMember(label: "satelliteArn", required: true, type: .string), 
            AWSShapeMember(label: "startTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]

        /// End time of a contact.
        public let endTime: TimeStamp
        /// Name of a ground station.
        public let groundStation: String
        /// ARN of a mission profile.
        public let missionProfileArn: String
        /// ARN of a satellite
        public let satelliteArn: String
        /// Start time of a contact.
        public let startTime: TimeStamp
        /// Tags assigned to a contact.
        public let tags: [String: String]?

        public init(endTime: TimeStamp, groundStation: String, missionProfileArn: String, satelliteArn: String, startTime: TimeStamp, tags: [String: String]? = nil) {
            self.endTime = endTime
            self.groundStation = groundStation
            self.missionProfileArn = missionProfileArn
            self.satelliteArn = satelliteArn
            self.startTime = startTime
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "endTime"
            case groundStation = "groundStation"
            case missionProfileArn = "missionProfileArn"
            case satelliteArn = "satelliteArn"
            case startTime = "startTime"
            case tags = "tags"
        }
    }

    public struct SatelliteListItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "groundStations", required: false, type: .list), 
            AWSShapeMember(label: "noradSatelliteID", required: false, type: .integer), 
            AWSShapeMember(label: "satelliteArn", required: false, type: .string), 
            AWSShapeMember(label: "satelliteId", required: false, type: .string)
        ]

        /// A list of ground stations to which the satellite is on-boarded.
        public let groundStations: [String]?
        /// NORAD satellite ID number.
        public let noradSatelliteID: Int?
        /// ARN of a satellite.
        public let satelliteArn: String?
        /// UUID of a satellite.
        public let satelliteId: String?

        public init(groundStations: [String]? = nil, noradSatelliteID: Int? = nil, satelliteArn: String? = nil, satelliteId: String? = nil) {
            self.groundStations = groundStations
            self.noradSatelliteID = noradSatelliteID
            self.satelliteArn = satelliteArn
            self.satelliteId = satelliteId
        }

        private enum CodingKeys: String, CodingKey {
            case groundStations = "groundStations"
            case noradSatelliteID = "noradSatelliteID"
            case satelliteArn = "satelliteArn"
            case satelliteId = "satelliteId"
        }
    }

    public struct SecurityDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "securityGroupIds", required: true, type: .list), 
            AWSShapeMember(label: "subnetIds", required: true, type: .list)
        ]

        /// ARN to a role needed for connecting streams to your instances. 
        public let roleArn: String
        /// The security groups to attach to the elastic network interfaces.
        public let securityGroupIds: [String]
        /// A list of subnets where AWS Ground Station places elastic network interfaces to send streams to your instances.
        public let subnetIds: [String]

        public init(roleArn: String, securityGroupIds: [String], subnetIds: [String]) {
            self.roleArn = roleArn
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case securityGroupIds = "securityGroupIds"
            case subnetIds = "subnetIds"
        }
    }

    public struct SocketAddress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "port", required: true, type: .integer)
        ]

        /// Name of a socket address.
        public let name: String
        /// Port of a socket address.
        public let port: Int

        public init(name: String, port: Int) {
            self.name = name
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case port = "port"
        }
    }

    public struct Source: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configDetails", required: false, type: .structure), 
            AWSShapeMember(label: "configId", required: false, type: .string), 
            AWSShapeMember(label: "configType", required: false, type: .enum), 
            AWSShapeMember(label: "dataflowSourceRegion", required: false, type: .string)
        ]

        /// Additional details for a Config, if type is dataflow endpoint or antenna demod decode.
        public let configDetails: ConfigDetails?
        /// UUID of a Config.
        public let configId: String?
        /// Type of a Config.
        public let configType: ConfigCapabilityType?
        /// Region of a dataflow source.
        public let dataflowSourceRegion: String?

        public init(configDetails: ConfigDetails? = nil, configId: String? = nil, configType: ConfigCapabilityType? = nil, dataflowSourceRegion: String? = nil) {
            self.configDetails = configDetails
            self.configId = configId
            self.configType = configType
            self.dataflowSourceRegion = dataflowSourceRegion
        }

        private enum CodingKeys: String, CodingKey {
            case configDetails = "configDetails"
            case configId = "configId"
            case configType = "configType"
            case dataflowSourceRegion = "dataflowSourceRegion"
        }
    }

    public struct SpectrumConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "bandwidth", required: true, type: .structure), 
            AWSShapeMember(label: "centerFrequency", required: true, type: .structure), 
            AWSShapeMember(label: "polarization", required: false, type: .enum)
        ]

        /// Bandwidth of a spectral Config. AWS Ground Station currently has the following bandwidth limitations:   For AntennaDownlinkDemodDecodeconfig, valid values are between 125 kHz to 650 MHz.   For AntennaDownlinkconfig valid values are between 10 kHz to 54 MHz.   For AntennaUplinkConfig, valid values are between 10 kHz to 54 MHz.  
        public let bandwidth: FrequencyBandwidth
        /// Center frequency of a spectral Config. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.
        public let centerFrequency: Frequency
        /// Polarization of a spectral Config. Capturing both "RIGHT_HAND" and "LEFT_HAND" polarization requires two separate configs.
        public let polarization: Polarization?

        public init(bandwidth: FrequencyBandwidth, centerFrequency: Frequency, polarization: Polarization? = nil) {
            self.bandwidth = bandwidth
            self.centerFrequency = centerFrequency
            self.polarization = polarization
        }

        private enum CodingKeys: String, CodingKey {
            case bandwidth = "bandwidth"
            case centerFrequency = "centerFrequency"
            case polarization = "polarization"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .map)
        ]

        /// ARN of a resource tag.
        public let resourceArn: String
        /// Tags assigned to a resource.
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct TrackingConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "autotrack", required: true, type: .enum)
        ]

        /// Current setting for autotrack.
        public let autotrack: Criticality

        public init(autotrack: Criticality) {
            self.autotrack = autotrack
        }

        private enum CodingKeys: String, CodingKey {
            case autotrack = "autotrack"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "tagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list)
        ]

        /// ARN of a resource.
        public let resourceArn: String
        /// Keys of a resource tag.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UntagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configData", required: true, type: .structure), 
            AWSShapeMember(label: "configId", location: .uri(locationName: "configId"), required: true, type: .string), 
            AWSShapeMember(label: "configType", location: .uri(locationName: "configType"), required: true, type: .enum), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]

        /// Parameters of a Config.
        public let configData: ConfigTypeData
        /// UUID of a Config.
        public let configId: String
        /// Type of a Config.
        public let configType: ConfigCapabilityType
        /// Name of a Config.
        public let name: String

        public init(configData: ConfigTypeData, configId: String, configType: ConfigCapabilityType, name: String) {
            self.configData = configData
            self.configId = configId
            self.configType = configType
            self.name = name
        }

        public func validate(name: String) throws {
            try self.configData.validate(name: "\(name).configData")
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[ a-zA-Z0-9_:-]{1,256}$")
        }

        private enum CodingKeys: String, CodingKey {
            case configData = "configData"
            case configId = "configId"
            case configType = "configType"
            case name = "name"
        }
    }

    public struct UpdateMissionProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contactPostPassDurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "contactPrePassDurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "dataflowEdges", required: false, type: .list), 
            AWSShapeMember(label: "minimumViableContactDurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "missionProfileId", location: .uri(locationName: "missionProfileId"), required: true, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "trackingConfigArn", required: false, type: .string)
        ]

        /// Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
        public let contactPostPassDurationSeconds: Int?
        /// Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
        public let contactPrePassDurationSeconds: Int?
        /// A list of lists of ARNs. Each list of ARNs is an edge, with a from Config and a to Config.
        public let dataflowEdges: [[String]]?
        /// Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
        public let minimumViableContactDurationSeconds: Int?
        /// UUID of a mission profile.
        public let missionProfileId: String
        /// Name of a mission profile.
        public let name: String?
        /// ARN of a tracking Config.
        public let trackingConfigArn: String?

        public init(contactPostPassDurationSeconds: Int? = nil, contactPrePassDurationSeconds: Int? = nil, dataflowEdges: [[String]]? = nil, minimumViableContactDurationSeconds: Int? = nil, missionProfileId: String, name: String? = nil, trackingConfigArn: String? = nil) {
            self.contactPostPassDurationSeconds = contactPostPassDurationSeconds
            self.contactPrePassDurationSeconds = contactPrePassDurationSeconds
            self.dataflowEdges = dataflowEdges
            self.minimumViableContactDurationSeconds = minimumViableContactDurationSeconds
            self.missionProfileId = missionProfileId
            self.name = name
            self.trackingConfigArn = trackingConfigArn
        }

        public func validate(name: String) throws {
            try validate(self.contactPostPassDurationSeconds, name:"contactPostPassDurationSeconds", parent: name, max: 21600)
            try validate(self.contactPostPassDurationSeconds, name:"contactPostPassDurationSeconds", parent: name, min: 1)
            try validate(self.contactPrePassDurationSeconds, name:"contactPrePassDurationSeconds", parent: name, max: 21600)
            try validate(self.contactPrePassDurationSeconds, name:"contactPrePassDurationSeconds", parent: name, min: 1)
            try self.dataflowEdges?.forEach {
                try validate($0, name: "dataflowEdges[]", parent: name, max: 2)
                try validate($0, name: "dataflowEdges[]", parent: name, min: 2)
            }
            try validate(self.minimumViableContactDurationSeconds, name:"minimumViableContactDurationSeconds", parent: name, max: 21600)
            try validate(self.minimumViableContactDurationSeconds, name:"minimumViableContactDurationSeconds", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[ a-zA-Z0-9_:-]{1,256}$")
        }

        private enum CodingKeys: String, CodingKey {
            case contactPostPassDurationSeconds = "contactPostPassDurationSeconds"
            case contactPrePassDurationSeconds = "contactPrePassDurationSeconds"
            case dataflowEdges = "dataflowEdges"
            case minimumViableContactDurationSeconds = "minimumViableContactDurationSeconds"
            case missionProfileId = "missionProfileId"
            case name = "name"
            case trackingConfigArn = "trackingConfigArn"
        }
    }

    public struct UplinkEchoConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "antennaUplinkConfigArn", required: true, type: .string), 
            AWSShapeMember(label: "enabled", required: true, type: .boolean)
        ]

        /// ARN of an uplink Config.
        public let antennaUplinkConfigArn: String
        /// Whether or not an uplink Config is enabled.
        public let enabled: Bool

        public init(antennaUplinkConfigArn: String, enabled: Bool) {
            self.antennaUplinkConfigArn = antennaUplinkConfigArn
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case antennaUplinkConfigArn = "antennaUplinkConfigArn"
            case enabled = "enabled"
        }
    }

    public struct UplinkSpectrumConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "centerFrequency", required: true, type: .structure), 
            AWSShapeMember(label: "polarization", required: false, type: .enum)
        ]

        /// Center frequency of an uplink spectral Config. Valid values are between 2025 to 2120 MHz.
        public let centerFrequency: Frequency
        /// Polarization of an uplink spectral Config. Capturing both "RIGHT_HAND" and "LEFT_HAND" polarization requires two separate configs.
        public let polarization: Polarization?

        public init(centerFrequency: Frequency, polarization: Polarization? = nil) {
            self.centerFrequency = centerFrequency
            self.polarization = polarization
        }

        private enum CodingKeys: String, CodingKey {
            case centerFrequency = "centerFrequency"
            case polarization = "polarization"
        }
    }
}
