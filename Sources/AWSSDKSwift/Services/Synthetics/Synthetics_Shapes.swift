// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Synthetics {
    //MARK: Enums

    public enum CanaryRunState: String, CustomStringConvertible, Codable {
        case running = "RUNNING"
        case passed = "PASSED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum CanaryRunStateReasonCode: String, CustomStringConvertible, Codable {
        case canaryFailure = "CANARY_FAILURE"
        case executionFailure = "EXECUTION_FAILURE"
        public var description: String { return self.rawValue }
    }

    public enum CanaryState: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case ready = "READY"
        case starting = "STARTING"
        case running = "RUNNING"
        case updating = "UPDATING"
        case stopping = "STOPPING"
        case stopped = "STOPPED"
        case error = "ERROR"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public enum CanaryStateReasonCode: String, CustomStringConvertible, Codable {
        case invalidPermissions = "INVALID_PERMISSIONS"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct Canary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ArtifactS3Location", required: false, type: .string), 
            AWSShapeMember(label: "Code", required: false, type: .structure), 
            AWSShapeMember(label: "EngineArn", required: false, type: .string), 
            AWSShapeMember(label: "ExecutionRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "FailureRetentionPeriodInDays", required: false, type: .integer), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "RunConfig", required: false, type: .structure), 
            AWSShapeMember(label: "RuntimeVersion", required: false, type: .string), 
            AWSShapeMember(label: "Schedule", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "SuccessRetentionPeriodInDays", required: false, type: .integer), 
            AWSShapeMember(label: "Tags", required: false, type: .map), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure), 
            AWSShapeMember(label: "VpcConfig", required: false, type: .structure)
        ]

        /// The location in Amazon S3 where Synthetics stores artifacts from the runs of this canary. Artifacts include the log file, screenshots, and HAR files.
        public let artifactS3Location: String?
        public let code: CanaryCodeOutput?
        /// The ARN of the Lambda function that is used as your canary's engine. For more information about Lambda ARN format, see Resources and Conditions for Lambda Actions.
        public let engineArn: String?
        /// The ARN of the IAM role used to run the canary. This role must include lambda.amazonaws.com as a principal in the trust policy.
        public let executionRoleArn: String?
        /// The number of days to retain data about failed runs of this canary.
        public let failureRetentionPeriodInDays: Int?
        /// The unique ID of this canary.
        public let id: String?
        /// The name of the canary.
        public let name: String?
        public let runConfig: CanaryRunConfigOutput?
        /// Specifies the runtime version to use for the canary. Currently, the only valid value is syn-1.0. For more information about runtime versions, see  Canary Runtime Versions.
        public let runtimeVersion: String?
        /// A structure that contains information about how often the canary is to run, and when these runs are to stop.
        public let schedule: CanaryScheduleOutput?
        /// A structure that contains information about the canary's status.
        public let status: CanaryStatus?
        /// The number of days to retain data about successful runs of this canary.
        public let successRetentionPeriodInDays: Int?
        /// The list of key-value pairs that are associated with the canary.
        public let tags: [String: String]?
        /// A structure that contains information about when the canary was created, modified, and most recently run.
        public let timeline: CanaryTimeline?
        public let vpcConfig: VpcConfigOutput?

        public init(artifactS3Location: String? = nil, code: CanaryCodeOutput? = nil, engineArn: String? = nil, executionRoleArn: String? = nil, failureRetentionPeriodInDays: Int? = nil, id: String? = nil, name: String? = nil, runConfig: CanaryRunConfigOutput? = nil, runtimeVersion: String? = nil, schedule: CanaryScheduleOutput? = nil, status: CanaryStatus? = nil, successRetentionPeriodInDays: Int? = nil, tags: [String: String]? = nil, timeline: CanaryTimeline? = nil, vpcConfig: VpcConfigOutput? = nil) {
            self.artifactS3Location = artifactS3Location
            self.code = code
            self.engineArn = engineArn
            self.executionRoleArn = executionRoleArn
            self.failureRetentionPeriodInDays = failureRetentionPeriodInDays
            self.id = id
            self.name = name
            self.runConfig = runConfig
            self.runtimeVersion = runtimeVersion
            self.schedule = schedule
            self.status = status
            self.successRetentionPeriodInDays = successRetentionPeriodInDays
            self.tags = tags
            self.timeline = timeline
            self.vpcConfig = vpcConfig
        }

        private enum CodingKeys: String, CodingKey {
            case artifactS3Location = "ArtifactS3Location"
            case code = "Code"
            case engineArn = "EngineArn"
            case executionRoleArn = "ExecutionRoleArn"
            case failureRetentionPeriodInDays = "FailureRetentionPeriodInDays"
            case id = "Id"
            case name = "Name"
            case runConfig = "RunConfig"
            case runtimeVersion = "RuntimeVersion"
            case schedule = "Schedule"
            case status = "Status"
            case successRetentionPeriodInDays = "SuccessRetentionPeriodInDays"
            case tags = "Tags"
            case timeline = "Timeline"
            case vpcConfig = "VpcConfig"
        }
    }

    public struct CanaryCodeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Handler", required: true, type: .string), 
            AWSShapeMember(label: "S3Bucket", required: false, type: .string), 
            AWSShapeMember(label: "S3Key", required: false, type: .string), 
            AWSShapeMember(label: "S3Version", required: false, type: .string), 
            AWSShapeMember(label: "ZipFile", required: false, type: .blob)
        ]

        /// The entry point to use for the source code when running the canary. This value must end with the string .handler.
        public let handler: String
        /// If your canary script is located in S3, specify the full bucket name here. The bucket must already exist. Specify the full bucket name, including s3:// as the start of the bucket name.
        public let s3Bucket: String?
        /// The S3 key of your script. For more information, see Working with Amazon S3 Objects.
        public let s3Key: String?
        /// The S3 version ID of your script.
        public let s3Version: String?
        /// If you input your canary script directly into the canary instead of referring to an S3 location, the value of this parameter is the .zip file that contains the script. It can be up to 5 MB.
        public let zipFile: Data?

        public init(handler: String, s3Bucket: String? = nil, s3Key: String? = nil, s3Version: String? = nil, zipFile: Data? = nil) {
            self.handler = handler
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
            self.s3Version = s3Version
            self.zipFile = zipFile
        }

        public func validate(name: String) throws {
            try validate(self.handler, name:"handler", parent: name, max: 1024)
            try validate(self.handler, name:"handler", parent: name, min: 1)
            try validate(self.s3Bucket, name:"s3Bucket", parent: name, max: 1024)
            try validate(self.s3Bucket, name:"s3Bucket", parent: name, min: 1)
            try validate(self.s3Key, name:"s3Key", parent: name, max: 1024)
            try validate(self.s3Key, name:"s3Key", parent: name, min: 1)
            try validate(self.s3Version, name:"s3Version", parent: name, max: 1024)
            try validate(self.s3Version, name:"s3Version", parent: name, min: 1)
            try validate(self.zipFile, name:"zipFile", parent: name, max: 10000000)
            try validate(self.zipFile, name:"zipFile", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case handler = "Handler"
            case s3Bucket = "S3Bucket"
            case s3Key = "S3Key"
            case s3Version = "S3Version"
            case zipFile = "ZipFile"
        }
    }

    public struct CanaryCodeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Handler", required: false, type: .string), 
            AWSShapeMember(label: "SourceLocationArn", required: false, type: .string)
        ]

        /// The entry point to use for the source code when running the canary.
        public let handler: String?
        /// The ARN of the Lambda layer where Synthetics stores the canary script code.
        public let sourceLocationArn: String?

        public init(handler: String? = nil, sourceLocationArn: String? = nil) {
            self.handler = handler
            self.sourceLocationArn = sourceLocationArn
        }

        private enum CodingKeys: String, CodingKey {
            case handler = "Handler"
            case sourceLocationArn = "SourceLocationArn"
        }
    }

    public struct CanaryLastRun: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CanaryName", required: false, type: .string), 
            AWSShapeMember(label: "LastRun", required: false, type: .structure)
        ]

        /// The name of the canary.
        public let canaryName: String?
        /// The results from this canary's most recent run.
        public let lastRun: CanaryRun?

        public init(canaryName: String? = nil, lastRun: CanaryRun? = nil) {
            self.canaryName = canaryName
            self.lastRun = lastRun
        }

        private enum CodingKeys: String, CodingKey {
            case canaryName = "CanaryName"
            case lastRun = "LastRun"
        }
    }

    public struct CanaryRun: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ArtifactS3Location", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure)
        ]

        /// The location where the canary stored artifacts from the run. Artifacts include the log file, screenshots, and HAR files.
        public let artifactS3Location: String?
        /// The name of the canary.
        public let name: String?
        /// The status of this run.
        public let status: CanaryRunStatus?
        /// A structure that contains the start and end times of this run.
        public let timeline: CanaryRunTimeline?

        public init(artifactS3Location: String? = nil, name: String? = nil, status: CanaryRunStatus? = nil, timeline: CanaryRunTimeline? = nil) {
            self.artifactS3Location = artifactS3Location
            self.name = name
            self.status = status
            self.timeline = timeline
        }

        private enum CodingKeys: String, CodingKey {
            case artifactS3Location = "ArtifactS3Location"
            case name = "Name"
            case status = "Status"
            case timeline = "Timeline"
        }
    }

    public struct CanaryRunConfigInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TimeoutInSeconds", required: true, type: .integer)
        ]

        /// How long the canary is allowed to run before it must stop. If you omit this field, the frequency of the canary is used as this value, up to a maximum of 14 minutes.
        public let timeoutInSeconds: Int

        public init(timeoutInSeconds: Int) {
            self.timeoutInSeconds = timeoutInSeconds
        }

        public func validate(name: String) throws {
            try validate(self.timeoutInSeconds, name:"timeoutInSeconds", parent: name, max: 900)
            try validate(self.timeoutInSeconds, name:"timeoutInSeconds", parent: name, min: 60)
        }

        private enum CodingKeys: String, CodingKey {
            case timeoutInSeconds = "TimeoutInSeconds"
        }
    }

    public struct CanaryRunConfigOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TimeoutInSeconds", required: false, type: .integer)
        ]

        /// How long the canary is allowed to run before it must stop.
        public let timeoutInSeconds: Int?

        public init(timeoutInSeconds: Int? = nil) {
            self.timeoutInSeconds = timeoutInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case timeoutInSeconds = "TimeoutInSeconds"
        }
    }

    public struct CanaryRunStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "StateReason", required: false, type: .string), 
            AWSShapeMember(label: "StateReasonCode", required: false, type: .enum)
        ]

        /// The current state of the run.
        public let state: CanaryRunState?
        /// If run of the canary failed, this field contains the reason for the error.
        public let stateReason: String?
        /// If this value is CANARY_FAILURE, an exception occurred in the canary code. If this value is EXECUTION_FAILURE, an exception occurred in CloudWatch Synthetics.
        public let stateReasonCode: CanaryRunStateReasonCode?

        public init(state: CanaryRunState? = nil, stateReason: String? = nil, stateReasonCode: CanaryRunStateReasonCode? = nil) {
            self.state = state
            self.stateReason = stateReason
            self.stateReasonCode = stateReasonCode
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case stateReason = "StateReason"
            case stateReasonCode = "StateReasonCode"
        }
    }

    public struct CanaryRunTimeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Completed", required: false, type: .timestamp), 
            AWSShapeMember(label: "Started", required: false, type: .timestamp)
        ]

        /// The end time of the run.
        public let completed: TimeStamp?
        /// The start time of the run.
        public let started: TimeStamp?

        public init(completed: TimeStamp? = nil, started: TimeStamp? = nil) {
            self.completed = completed
            self.started = started
        }

        private enum CodingKeys: String, CodingKey {
            case completed = "Completed"
            case started = "Started"
        }
    }

    public struct CanaryScheduleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DurationInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "Expression", required: true, type: .string)
        ]

        /// How long, in seconds, for the canary to continue making regular runs according to the schedule in the Expression value. If you specify 0, the canary continues making runs until you stop it. If you omit this field, the default of 0 is used.
        public let durationInSeconds: Int64?
        /// A rate expression that defines how often the canary is to run. The syntax is rate(number unit). unit can be minute, minutes, or hour.  For example, rate(1 minute) runs the canary once a minute, rate(10 minutes) runs it once every 10 minutes, and rate(1 hour) runs it once every hour. You can specify a frequency between rate(1 minute) and rate(1 hour). Specifying rate(0 minute) or rate(0 hour) is a special value that causes the canary to run only once when it is started.
        public let expression: String

        public init(durationInSeconds: Int64? = nil, expression: String) {
            self.durationInSeconds = durationInSeconds
            self.expression = expression
        }

        public func validate(name: String) throws {
            try validate(self.durationInSeconds, name:"durationInSeconds", parent: name, max: 31622400)
            try validate(self.durationInSeconds, name:"durationInSeconds", parent: name, min: 0)
            try validate(self.expression, name:"expression", parent: name, max: 1024)
            try validate(self.expression, name:"expression", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case durationInSeconds = "DurationInSeconds"
            case expression = "Expression"
        }
    }

    public struct CanaryScheduleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DurationInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "Expression", required: false, type: .string)
        ]

        /// How long, in seconds, for the canary to continue making regular runs after it was created. The runs are performed according to the schedule in the Expression value.
        public let durationInSeconds: Int64?
        /// A rate expression that defines how often the canary is to run. The syntax is rate(number unit). unit can be minute, minutes, or hour.  For example, rate(1 minute) runs the canary once a minute, rate(10 minutes) runs it once every 10 minutes, and rate(1 hour) runs it once every hour. Specifying rate(0 minute) or rate(0 hour) is a special value that causes the canary to run only once when it is started.
        public let expression: String?

        public init(durationInSeconds: Int64? = nil, expression: String? = nil) {
            self.durationInSeconds = durationInSeconds
            self.expression = expression
        }

        private enum CodingKeys: String, CodingKey {
            case durationInSeconds = "DurationInSeconds"
            case expression = "Expression"
        }
    }

    public struct CanaryStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "StateReason", required: false, type: .string), 
            AWSShapeMember(label: "StateReasonCode", required: false, type: .enum)
        ]

        /// The current state of the canary.
        public let state: CanaryState?
        /// If the canary has insufficient permissions to run, this field provides more details.
        public let stateReason: String?
        /// If the canary cannot run or has failed, this field displays the reason.
        public let stateReasonCode: CanaryStateReasonCode?

        public init(state: CanaryState? = nil, stateReason: String? = nil, stateReasonCode: CanaryStateReasonCode? = nil) {
            self.state = state
            self.stateReason = stateReason
            self.stateReasonCode = stateReasonCode
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case stateReason = "StateReason"
            case stateReasonCode = "StateReasonCode"
        }
    }

    public struct CanaryTimeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Created", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastStarted", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastStopped", required: false, type: .timestamp)
        ]

        /// The date and time the canary was created.
        public let created: TimeStamp?
        /// The date and time the canary was most recently modified.
        public let lastModified: TimeStamp?
        /// The date and time that the canary's most recent run started.
        public let lastStarted: TimeStamp?
        /// The date and time that the canary's most recent run ended.
        public let lastStopped: TimeStamp?

        public init(created: TimeStamp? = nil, lastModified: TimeStamp? = nil, lastStarted: TimeStamp? = nil, lastStopped: TimeStamp? = nil) {
            self.created = created
            self.lastModified = lastModified
            self.lastStarted = lastStarted
            self.lastStopped = lastStopped
        }

        private enum CodingKeys: String, CodingKey {
            case created = "Created"
            case lastModified = "LastModified"
            case lastStarted = "LastStarted"
            case lastStopped = "LastStopped"
        }
    }

    public struct CreateCanaryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ArtifactS3Location", required: true, type: .string), 
            AWSShapeMember(label: "Code", required: true, type: .structure), 
            AWSShapeMember(label: "ExecutionRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "FailureRetentionPeriodInDays", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "RunConfig", required: false, type: .structure), 
            AWSShapeMember(label: "RuntimeVersion", required: true, type: .string), 
            AWSShapeMember(label: "Schedule", required: true, type: .structure), 
            AWSShapeMember(label: "SuccessRetentionPeriodInDays", required: false, type: .integer), 
            AWSShapeMember(label: "Tags", required: false, type: .map), 
            AWSShapeMember(label: "VpcConfig", required: false, type: .structure)
        ]

        /// The location in Amazon S3 where Synthetics stores artifacts from the test runs of this canary. Artifacts include the log file, screenshots, and HAR files.
        public let artifactS3Location: String
        /// A structure that includes the entry point from which the canary should start running your script. If the script is stored in an S3 bucket, the bucket name, key, and version are also included. 
        public let code: CanaryCodeInput
        /// The ARN of the IAM role to be used to run the canary. This role must already exist, and must include lambda.amazonaws.com as a principal in the trust policy. The role must also have the following permissions:    s3:PutObject     s3:GetBucketLocation     s3:ListAllMyBuckets     cloudwatch:PutMetricData     logs:CreateLogGroup     logs:CreateLogStream     logs:CreateLogStream   
        public let executionRoleArn: String
        /// The number of days to retain data about failed runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.
        public let failureRetentionPeriodInDays: Int?
        /// The name for this canary. Be sure to give it a descriptive name that distinguishes it from other canaries in your account. Do not include secrets or proprietary information in your canary names. The canary name makes up part of the canary ARN, and the ARN is included in outbound calls over the internet. For more information, see Security Considerations for Synthetics Canaries.
        public let name: String
        /// A structure that contains the configuration for individual canary runs, such as timeout value.
        public let runConfig: CanaryRunConfigInput?
        /// Specifies the runtime version to use for the canary. Currently, the only valid value is syn-1.0. For more information about runtime versions, see  Canary Runtime Versions.
        public let runtimeVersion: String
        /// A structure that contains information about how often the canary is to run and when these test runs are to stop.
        public let schedule: CanaryScheduleInput
        /// The number of days to retain data about successful runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.
        public let successRetentionPeriodInDays: Int?
        /// A list of key-value pairs to associate with the canary. You can associate as many as 50 tags with a canary. Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values.
        public let tags: [String: String]?
        /// If this canary is to test an endpoint in a VPC, this structure contains information about the subnet and security groups of the VPC endpoint. For more information, see  Running a Canary in a VPC.
        public let vpcConfig: VpcConfigInput?

        public init(artifactS3Location: String, code: CanaryCodeInput, executionRoleArn: String, failureRetentionPeriodInDays: Int? = nil, name: String, runConfig: CanaryRunConfigInput? = nil, runtimeVersion: String, schedule: CanaryScheduleInput, successRetentionPeriodInDays: Int? = nil, tags: [String: String]? = nil, vpcConfig: VpcConfigInput? = nil) {
            self.artifactS3Location = artifactS3Location
            self.code = code
            self.executionRoleArn = executionRoleArn
            self.failureRetentionPeriodInDays = failureRetentionPeriodInDays
            self.name = name
            self.runConfig = runConfig
            self.runtimeVersion = runtimeVersion
            self.schedule = schedule
            self.successRetentionPeriodInDays = successRetentionPeriodInDays
            self.tags = tags
            self.vpcConfig = vpcConfig
        }

        public func validate(name: String) throws {
            try validate(self.artifactS3Location, name:"artifactS3Location", parent: name, max: 1024)
            try validate(self.artifactS3Location, name:"artifactS3Location", parent: name, min: 1)
            try self.code.validate(name: "\(name).code")
            try validate(self.executionRoleArn, name:"executionRoleArn", parent: name, pattern: "^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$")
            try validate(self.failureRetentionPeriodInDays, name:"failureRetentionPeriodInDays", parent: name, max: 1024)
            try validate(self.failureRetentionPeriodInDays, name:"failureRetentionPeriodInDays", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, max: 21)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_\\-]+$")
            try self.runConfig?.validate(name: "\(name).runConfig")
            try validate(self.runtimeVersion, name:"runtimeVersion", parent: name, max: 1024)
            try validate(self.runtimeVersion, name:"runtimeVersion", parent: name, min: 1)
            try self.schedule.validate(name: "\(name).schedule")
            try validate(self.successRetentionPeriodInDays, name:"successRetentionPeriodInDays", parent: name, max: 1024)
            try validate(self.successRetentionPeriodInDays, name:"successRetentionPeriodInDays", parent: name, min: 1)
            try self.tags?.forEach {
                try validate($0.key, name:"tags.key", parent: name, max: 128)
                try validate($0.key, name:"tags.key", parent: name, min: 1)
                try validate($0.key, name:"tags.key", parent: name, pattern: "^(?!aws:)[a-zA-Z+-=._:/]+$")
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.vpcConfig?.validate(name: "\(name).vpcConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case artifactS3Location = "ArtifactS3Location"
            case code = "Code"
            case executionRoleArn = "ExecutionRoleArn"
            case failureRetentionPeriodInDays = "FailureRetentionPeriodInDays"
            case name = "Name"
            case runConfig = "RunConfig"
            case runtimeVersion = "RuntimeVersion"
            case schedule = "Schedule"
            case successRetentionPeriodInDays = "SuccessRetentionPeriodInDays"
            case tags = "Tags"
            case vpcConfig = "VpcConfig"
        }
    }

    public struct CreateCanaryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Canary", required: false, type: .structure)
        ]

        /// The full details about the canary you have created.
        public let canary: Canary?

        public init(canary: Canary? = nil) {
            self.canary = canary
        }

        private enum CodingKeys: String, CodingKey {
            case canary = "Canary"
        }
    }

    public struct DeleteCanaryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .uri(locationName: "name"), required: true, type: .string)
        ]

        /// The name of the canary that you want to delete. To find the names of your canaries, use DescribeCanaries.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 21)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct DeleteCanaryResponse: AWSShape {


        public init() {
        }

    }

    public struct DescribeCanariesLastRunRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Specify this parameter to limit how many runs are returned each time you use the DescribeLastRun operation. If you omit this parameter, the default of 100 is used.
        public let maxResults: Int?
        /// A token that indicates that there is more data available. You can use this token in a subsequent DescribeCanaries operation to retrieve the next set of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "^[a-zA-Z0-9=/+_.-]{4,252}$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeCanariesLastRunResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CanariesLastRun", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// An array that contains the information from the most recent run of each canary.
        public let canariesLastRun: [CanaryLastRun]?
        /// A token that indicates that there is more data available. You can use this token in a subsequent DescribeCanariesLastRun operation to retrieve the next set of results.
        public let nextToken: String?

        public init(canariesLastRun: [CanaryLastRun]? = nil, nextToken: String? = nil) {
            self.canariesLastRun = canariesLastRun
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case canariesLastRun = "CanariesLastRun"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeCanariesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Specify this parameter to limit how many canaries are returned each time you use the DescribeCanaries operation. If you omit this parameter, the default of 100 is used.
        public let maxResults: Int?
        /// A token that indicates that there is more data available. You can use this token in a subsequent operation to retrieve the next set of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 20)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "^[a-zA-Z0-9=/+_.-]{4,252}$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeCanariesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Canaries", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Returns an array. Each item in the array contains the full information about one canary.
        public let canaries: [Canary]?
        /// A token that indicates that there is more data available. You can use this token in a subsequent DescribeCanaries operation to retrieve the next set of results.
        public let nextToken: String?

        public init(canaries: [Canary]? = nil, nextToken: String? = nil) {
            self.canaries = canaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case canaries = "Canaries"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeRuntimeVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Specify this parameter to limit how many runs are returned each time you use the DescribeRuntimeVersions operation. If you omit this parameter, the default of 100 is used.
        public let maxResults: Int?
        /// A token that indicates that there is more data available. You can use this token in a subsequent DescribeRuntimeVersions operation to retrieve the next set of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "^[a-zA-Z0-9=/+_.-]{4,252}$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeRuntimeVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "RuntimeVersions", required: false, type: .list)
        ]

        /// A token that indicates that there is more data available. You can use this token in a subsequent DescribeRuntimeVersions operation to retrieve the next set of results.
        public let nextToken: String?
        /// An array of objects that display the details about each Synthetics canary runtime version.
        public let runtimeVersions: [RuntimeVersion]?

        public init(nextToken: String? = nil, runtimeVersions: [RuntimeVersion]? = nil) {
            self.nextToken = nextToken
            self.runtimeVersions = runtimeVersions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case runtimeVersions = "RuntimeVersions"
        }
    }

    public struct GetCanaryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .uri(locationName: "name"), required: true, type: .string)
        ]

        /// The name of the canary that you want details for.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 21)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct GetCanaryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Canary", required: false, type: .structure)
        ]

        /// A strucure that contains the full information about the canary.
        public let canary: Canary?

        public init(canary: Canary? = nil) {
            self.canary = canary
        }

        private enum CodingKeys: String, CodingKey {
            case canary = "Canary"
        }
    }

    public struct GetCanaryRunsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Specify this parameter to limit how many runs are returned each time you use the GetCanaryRuns operation. If you omit this parameter, the default of 100 is used.
        public let maxResults: Int?
        /// The name of the canary that you want to see runs for.
        public let name: String
        /// A token that indicates that there is more data available. You can use this token in a subsequent GetCanaryRuns operation to retrieve the next set of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, name: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.name = name
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, max: 21)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_\\-]+$")
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "^[a-zA-Z0-9=/+_.-]{4,252}$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case name = "name"
            case nextToken = "NextToken"
        }
    }

    public struct GetCanaryRunsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CanaryRuns", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// An array of structures. Each structure contains the details of one of the retrieved canary runs.
        public let canaryRuns: [CanaryRun]?
        /// A token that indicates that there is more data available. You can use this token in a subsequent GetCanaryRuns operation to retrieve the next set of results.
        public let nextToken: String?

        public init(canaryRuns: [CanaryRun]? = nil, nextToken: String? = nil) {
            self.canaryRuns = canaryRuns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case canaryRuns = "CanaryRuns"
            case nextToken = "NextToken"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resourceArn"), required: true, type: .string)
        ]

        /// The ARN of the canary that you want to view tags for. The ARN format of a canary is arn:aws:synthetics:Region:account-id:canary:canary-name .
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, pattern: "^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .map)
        ]

        /// The list of tag keys and values associated with the canary that you specified.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct RuntimeVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeprecationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ReleaseDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "VersionName", required: false, type: .string)
        ]

        /// If this runtime version is deprecated, this value is the date of deprecation.
        public let deprecationDate: TimeStamp?
        /// A description of the runtime version, created by Amazon.
        public let description: String?
        /// The date that the runtime version was released.
        public let releaseDate: TimeStamp?
        /// The name of the runtime version. Currently, the only valid value is syn-1.0.  Specifies the runtime version to use for the canary. Currently, the only valid value is syn-1.0.
        public let versionName: String?

        public init(deprecationDate: TimeStamp? = nil, description: String? = nil, releaseDate: TimeStamp? = nil, versionName: String? = nil) {
            self.deprecationDate = deprecationDate
            self.description = description
            self.releaseDate = releaseDate
            self.versionName = versionName
        }

        private enum CodingKeys: String, CodingKey {
            case deprecationDate = "DeprecationDate"
            case description = "Description"
            case releaseDate = "ReleaseDate"
            case versionName = "VersionName"
        }
    }

    public struct StartCanaryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .uri(locationName: "name"), required: true, type: .string)
        ]

        /// The name of the canary that you want to run. To find canary names, use DescribeCanaries.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 21)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct StartCanaryResponse: AWSShape {


        public init() {
        }

    }

    public struct StopCanaryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .uri(locationName: "name"), required: true, type: .string)
        ]

        /// The name of the canary that you want to stop. To find the names of your canaries, use DescribeCanaries.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 21)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct StopCanaryResponse: AWSShape {


        public init() {
        }

    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .map)
        ]

        /// The ARN of the canary that you're adding tags to. The ARN format of a canary is arn:aws:synthetics:Region:account-id:canary:canary-name .
        public let resourceArn: String
        /// The list of key-value pairs to associate with the canary.
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, pattern: "^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$")
            try self.tags.forEach {
                try validate($0.key, name:"tags.key", parent: name, max: 128)
                try validate($0.key, name:"tags.key", parent: name, min: 1)
                try validate($0.key, name:"tags.key", parent: name, pattern: "^(?!aws:)[a-zA-Z+-=._:/]+$")
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, max: 256)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "Tags"
        }
    }

    public struct TagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list)
        ]

        /// The ARN of the canary that you're removing tags from. The ARN format of a canary is arn:aws:synthetics:Region:account-id:canary:canary-name .
        public let resourceArn: String
        /// The list of tag keys to remove from the resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, pattern: "^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
                try validate($0, name: "tagKeys[]", parent: name, pattern: "^(?!aws:)[a-zA-Z+-=._:/]+$")
            }
            try validate(self.tagKeys, name:"tagKeys", parent: name, max: 50)
            try validate(self.tagKeys, name:"tagKeys", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UntagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateCanaryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .structure), 
            AWSShapeMember(label: "ExecutionRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "FailureRetentionPeriodInDays", required: false, type: .integer), 
            AWSShapeMember(label: "Name", location: .uri(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "RunConfig", required: false, type: .structure), 
            AWSShapeMember(label: "RuntimeVersion", required: false, type: .string), 
            AWSShapeMember(label: "Schedule", required: false, type: .structure), 
            AWSShapeMember(label: "SuccessRetentionPeriodInDays", required: false, type: .integer), 
            AWSShapeMember(label: "VpcConfig", required: false, type: .structure)
        ]

        /// A structure that includes the entry point from which the canary should start running your script. If the script is stored in an S3 bucket, the bucket name, key, and version are also included. 
        public let code: CanaryCodeInput?
        /// The ARN of the IAM role to be used to run the canary. This role must already exist, and must include lambda.amazonaws.com as a principal in the trust policy. The role must also have the following permissions:    s3:PutObject     s3:GetBucketLocation     s3:ListAllMyBuckets     cloudwatch:PutMetricData     logs:CreateLogGroup     logs:CreateLogStream     logs:CreateLogStream   
        public let executionRoleArn: String?
        /// The number of days to retain data about failed runs of this canary.
        public let failureRetentionPeriodInDays: Int?
        /// The name of the canary that you want to update. To find the names of your canaries, use DescribeCanaries. You cannot change the name of a canary that has already been created.
        public let name: String
        /// A structure that contains the timeout value that is used for each individual run of the canary.
        public let runConfig: CanaryRunConfigInput?
        /// Specifies the runtime version to use for the canary. Currently, the only valid value is syn-1.0. For more information about runtime versions, see  Canary Runtime Versions.
        public let runtimeVersion: String?
        /// A structure that contains information about how often the canary is to run, and when these runs are to stop.
        public let schedule: CanaryScheduleInput?
        /// The number of days to retain data about successful runs of this canary.
        public let successRetentionPeriodInDays: Int?
        /// If this canary is to test an endpoint in a VPC, this structure contains information about the subnet and security groups of the VPC endpoint. For more information, see  Running a Canary in a VPC.
        public let vpcConfig: VpcConfigInput?

        public init(code: CanaryCodeInput? = nil, executionRoleArn: String? = nil, failureRetentionPeriodInDays: Int? = nil, name: String, runConfig: CanaryRunConfigInput? = nil, runtimeVersion: String? = nil, schedule: CanaryScheduleInput? = nil, successRetentionPeriodInDays: Int? = nil, vpcConfig: VpcConfigInput? = nil) {
            self.code = code
            self.executionRoleArn = executionRoleArn
            self.failureRetentionPeriodInDays = failureRetentionPeriodInDays
            self.name = name
            self.runConfig = runConfig
            self.runtimeVersion = runtimeVersion
            self.schedule = schedule
            self.successRetentionPeriodInDays = successRetentionPeriodInDays
            self.vpcConfig = vpcConfig
        }

        public func validate(name: String) throws {
            try self.code?.validate(name: "\(name).code")
            try validate(self.executionRoleArn, name:"executionRoleArn", parent: name, pattern: "^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$")
            try validate(self.failureRetentionPeriodInDays, name:"failureRetentionPeriodInDays", parent: name, max: 1024)
            try validate(self.failureRetentionPeriodInDays, name:"failureRetentionPeriodInDays", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, max: 21)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_\\-]+$")
            try self.runConfig?.validate(name: "\(name).runConfig")
            try validate(self.runtimeVersion, name:"runtimeVersion", parent: name, max: 1024)
            try validate(self.runtimeVersion, name:"runtimeVersion", parent: name, min: 1)
            try self.schedule?.validate(name: "\(name).schedule")
            try validate(self.successRetentionPeriodInDays, name:"successRetentionPeriodInDays", parent: name, max: 1024)
            try validate(self.successRetentionPeriodInDays, name:"successRetentionPeriodInDays", parent: name, min: 1)
            try self.vpcConfig?.validate(name: "\(name).vpcConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case executionRoleArn = "ExecutionRoleArn"
            case failureRetentionPeriodInDays = "FailureRetentionPeriodInDays"
            case name = "name"
            case runConfig = "RunConfig"
            case runtimeVersion = "RuntimeVersion"
            case schedule = "Schedule"
            case successRetentionPeriodInDays = "SuccessRetentionPeriodInDays"
            case vpcConfig = "VpcConfig"
        }
    }

    public struct UpdateCanaryResponse: AWSShape {


        public init() {
        }

    }

    public struct VpcConfigInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "SubnetIds", required: false, type: .list)
        ]

        /// The IDs of the security groups for this canary.
        public let securityGroupIds: [String]?
        /// The IDs of the subnets where this canary is to run.
        public let subnetIds: [String]?

        public init(securityGroupIds: [String]? = nil, subnetIds: [String]? = nil) {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }

        public func validate(name: String) throws {
            try validate(self.securityGroupIds, name:"securityGroupIds", parent: name, max: 5)
            try validate(self.securityGroupIds, name:"securityGroupIds", parent: name, min: 0)
            try validate(self.subnetIds, name:"subnetIds", parent: name, max: 16)
            try validate(self.subnetIds, name:"subnetIds", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds = "SecurityGroupIds"
            case subnetIds = "SubnetIds"
        }
    }

    public struct VpcConfigOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "VpcId", required: false, type: .string)
        ]

        /// The IDs of the security groups for this canary.
        public let securityGroupIds: [String]?
        /// The IDs of the subnets where this canary is to run.
        public let subnetIds: [String]?
        /// The IDs of the VPC where this canary is to run.
        public let vpcId: String?

        public init(securityGroupIds: [String]? = nil, subnetIds: [String]? = nil, vpcId: String? = nil) {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds = "SecurityGroupIds"
            case subnetIds = "SubnetIds"
            case vpcId = "VpcId"
        }
    }
}
