// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore
import NIO

/**
Amazon GuardDuty is a continuous security monitoring service that analyzes and processes the following data sources: VPC Flow Logs, AWS CloudTrail event logs, and DNS logs. It uses threat intelligence feeds, such as lists of malicious IPs and domains, and machine learning to identify unexpected and potentially unauthorized and malicious activity within your AWS environment. This can include issues like escalations of privileges, uses of exposed credentials, or communication with malicious IPs, URLs, or domains. For example, GuardDuty can detect compromised EC2 instances serving malware or mining bitcoin. It also monitors AWS account access behavior for signs of compromise, such as unauthorized infrastructure deployments, like instances deployed in a region that has never been used, or unusual API calls, like a password policy change to reduce password strength. GuardDuty informs you of the status of your AWS environment by producing security findings that you can view in the GuardDuty console or through Amazon CloudWatch events. For more information, see  Amazon GuardDuty User Guide. 
*/
public struct GuardDuty {

    let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            service: "guardduty",
            serviceProtocol: ServiceProtocol(type: .restjson, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2017-11-28",
            endpoint: endpoint,
            middlewares: [],
            possibleErrorTypes: [GuardDutyErrorType.self]
        )
    }

    ///  Accepts the invitation to be monitored by a master GuardDuty account.
    public func acceptInvitation(_ input: AcceptInvitationRequest) throws -> Future<AcceptInvitationResponse> {
        return try client.send(operation: "AcceptInvitation", path: "/detector/{detectorId}/master", httpMethod: "POST", input: input)
    }

    ///  Archives Amazon GuardDuty findings specified by the list of finding IDs.
    public func archiveFindings(_ input: ArchiveFindingsRequest) throws -> Future<ArchiveFindingsResponse> {
        return try client.send(operation: "ArchiveFindings", path: "/detector/{detectorId}/findings/archive", httpMethod: "POST", input: input)
    }

    ///  Creates a single Amazon GuardDuty detector. A detector is an object that represents the GuardDuty service. A detector must be created in order for GuardDuty to become operational.
    public func createDetector(_ input: CreateDetectorRequest) throws -> Future<CreateDetectorResponse> {
        return try client.send(operation: "CreateDetector", path: "/detector", httpMethod: "POST", input: input)
    }

    ///  Creates a filter using the specified finding criteria.
    public func createFilter(_ input: CreateFilterRequest) throws -> Future<CreateFilterResponse> {
        return try client.send(operation: "CreateFilter", path: "/detector/{detectorId}/filter", httpMethod: "POST", input: input)
    }

    ///  Creates a new IPSet - a list of trusted IP addresses that have been whitelisted for secure communication with AWS infrastructure and applications.
    public func createIPSet(_ input: CreateIPSetRequest) throws -> Future<CreateIPSetResponse> {
        return try client.send(operation: "CreateIPSet", path: "/detector/{detectorId}/ipset", httpMethod: "POST", input: input)
    }

    ///  Creates member accounts of the current AWS account by specifying a list of AWS account IDs. The current AWS account can then invite these members to manage GuardDuty in their accounts.
    public func createMembers(_ input: CreateMembersRequest) throws -> Future<CreateMembersResponse> {
        return try client.send(operation: "CreateMembers", path: "/detector/{detectorId}/member", httpMethod: "POST", input: input)
    }

    ///  Generates example findings of types specified by the list of finding types. If 'NULL' is specified for findingTypes, the API generates example findings of all supported finding types.
    public func createSampleFindings(_ input: CreateSampleFindingsRequest) throws -> Future<CreateSampleFindingsResponse> {
        return try client.send(operation: "CreateSampleFindings", path: "/detector/{detectorId}/findings/create", httpMethod: "POST", input: input)
    }

    ///  Create a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses. GuardDuty generates findings based on ThreatIntelSets.
    public func createThreatIntelSet(_ input: CreateThreatIntelSetRequest) throws -> Future<CreateThreatIntelSetResponse> {
        return try client.send(operation: "CreateThreatIntelSet", path: "/detector/{detectorId}/threatintelset", httpMethod: "POST", input: input)
    }

    ///  Declines invitations sent to the current member account by AWS account specified by their account IDs.
    public func declineInvitations(_ input: DeclineInvitationsRequest) throws -> Future<DeclineInvitationsResponse> {
        return try client.send(operation: "DeclineInvitations", path: "/invitation/decline", httpMethod: "POST", input: input)
    }

    ///  Deletes a Amazon GuardDuty detector specified by the detector ID.
    public func deleteDetector(_ input: DeleteDetectorRequest) throws -> Future<DeleteDetectorResponse> {
        return try client.send(operation: "DeleteDetector", path: "/detector/{detectorId}", httpMethod: "DELETE", input: input)
    }

    ///  Deletes the filter specified by the filter name.
    public func deleteFilter(_ input: DeleteFilterRequest) throws -> Future<DeleteFilterResponse> {
        return try client.send(operation: "DeleteFilter", path: "/detector/{detectorId}/filter/{filterName}", httpMethod: "DELETE", input: input)
    }

    ///  Deletes the IPSet specified by the IPSet ID.
    public func deleteIPSet(_ input: DeleteIPSetRequest) throws -> Future<DeleteIPSetResponse> {
        return try client.send(operation: "DeleteIPSet", path: "/detector/{detectorId}/ipset/{ipSetId}", httpMethod: "DELETE", input: input)
    }

    ///  Deletes invitations sent to the current member account by AWS accounts specified by their account IDs.
    public func deleteInvitations(_ input: DeleteInvitationsRequest) throws -> Future<DeleteInvitationsResponse> {
        return try client.send(operation: "DeleteInvitations", path: "/invitation/delete", httpMethod: "POST", input: input)
    }

    ///  Deletes GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.
    public func deleteMembers(_ input: DeleteMembersRequest) throws -> Future<DeleteMembersResponse> {
        return try client.send(operation: "DeleteMembers", path: "/detector/{detectorId}/member/delete", httpMethod: "POST", input: input)
    }

    ///  Deletes ThreatIntelSet specified by the ThreatIntelSet ID.
    public func deleteThreatIntelSet(_ input: DeleteThreatIntelSetRequest) throws -> Future<DeleteThreatIntelSetResponse> {
        return try client.send(operation: "DeleteThreatIntelSet", path: "/detector/{detectorId}/threatintelset/{threatIntelSetId}", httpMethod: "DELETE", input: input)
    }

    ///  Disassociates the current GuardDuty member account from its master account.
    public func disassociateFromMasterAccount(_ input: DisassociateFromMasterAccountRequest) throws -> Future<DisassociateFromMasterAccountResponse> {
        return try client.send(operation: "DisassociateFromMasterAccount", path: "/detector/{detectorId}/master/disassociate", httpMethod: "POST", input: input)
    }

    ///  Disassociates GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.
    public func disassociateMembers(_ input: DisassociateMembersRequest) throws -> Future<DisassociateMembersResponse> {
        return try client.send(operation: "DisassociateMembers", path: "/detector/{detectorId}/member/disassociate", httpMethod: "POST", input: input)
    }

    ///  Retrieves an Amazon GuardDuty detector specified by the detectorId.
    public func getDetector(_ input: GetDetectorRequest) throws -> Future<GetDetectorResponse> {
        return try client.send(operation: "GetDetector", path: "/detector/{detectorId}", httpMethod: "GET", input: input)
    }

    ///  Returns the details of the filter specified by the filter name.
    public func getFilter(_ input: GetFilterRequest) throws -> Future<GetFilterResponse> {
        return try client.send(operation: "GetFilter", path: "/detector/{detectorId}/filter/{filterName}", httpMethod: "GET", input: input)
    }

    ///  Describes Amazon GuardDuty findings specified by finding IDs.
    public func getFindings(_ input: GetFindingsRequest) throws -> Future<GetFindingsResponse> {
        return try client.send(operation: "GetFindings", path: "/detector/{detectorId}/findings/get", httpMethod: "POST", input: input)
    }

    ///  Lists Amazon GuardDuty findings' statistics for the specified detector ID.
    public func getFindingsStatistics(_ input: GetFindingsStatisticsRequest) throws -> Future<GetFindingsStatisticsResponse> {
        return try client.send(operation: "GetFindingsStatistics", path: "/detector/{detectorId}/findings/statistics", httpMethod: "POST", input: input)
    }

    ///  Retrieves the IPSet specified by the IPSet ID.
    public func getIPSet(_ input: GetIPSetRequest) throws -> Future<GetIPSetResponse> {
        return try client.send(operation: "GetIPSet", path: "/detector/{detectorId}/ipset/{ipSetId}", httpMethod: "GET", input: input)
    }

    ///  Returns the count of all GuardDuty membership invitations that were sent to the current member account except the currently accepted invitation.
    public func getInvitationsCount(_ input: GetInvitationsCountRequest) throws -> Future<GetInvitationsCountResponse> {
        return try client.send(operation: "GetInvitationsCount", path: "/invitation/count", httpMethod: "GET", input: input)
    }

    ///  Provides the details for the GuardDuty master account to the current GuardDuty member account.
    public func getMasterAccount(_ input: GetMasterAccountRequest) throws -> Future<GetMasterAccountResponse> {
        return try client.send(operation: "GetMasterAccount", path: "/detector/{detectorId}/master", httpMethod: "GET", input: input)
    }

    ///  Retrieves GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.
    public func getMembers(_ input: GetMembersRequest) throws -> Future<GetMembersResponse> {
        return try client.send(operation: "GetMembers", path: "/detector/{detectorId}/member/get", httpMethod: "POST", input: input)
    }

    ///  Retrieves the ThreatIntelSet that is specified by the ThreatIntelSet ID.
    public func getThreatIntelSet(_ input: GetThreatIntelSetRequest) throws -> Future<GetThreatIntelSetResponse> {
        return try client.send(operation: "GetThreatIntelSet", path: "/detector/{detectorId}/threatintelset/{threatIntelSetId}", httpMethod: "GET", input: input)
    }

    ///  Invites other AWS accounts (created as members of the current AWS account by CreateMembers) to enable GuardDuty and allow the current AWS account to view and manage these accounts' GuardDuty findings on their behalf as the master account.
    public func inviteMembers(_ input: InviteMembersRequest) throws -> Future<InviteMembersResponse> {
        return try client.send(operation: "InviteMembers", path: "/detector/{detectorId}/member/invite", httpMethod: "POST", input: input)
    }

    ///  Lists detectorIds of all the existing Amazon GuardDuty detector resources.
    public func listDetectors(_ input: ListDetectorsRequest) throws -> Future<ListDetectorsResponse> {
        return try client.send(operation: "ListDetectors", path: "/detector", httpMethod: "GET", input: input)
    }

    ///  Returns a paginated list of the current filters.
    public func listFilters(_ input: ListFiltersRequest) throws -> Future<ListFiltersResponse> {
        return try client.send(operation: "ListFilters", path: "/detector/{detectorId}/filter", httpMethod: "GET", input: input)
    }

    ///  Lists Amazon GuardDuty findings for the specified detector ID.
    public func listFindings(_ input: ListFindingsRequest) throws -> Future<ListFindingsResponse> {
        return try client.send(operation: "ListFindings", path: "/detector/{detectorId}/findings", httpMethod: "POST", input: input)
    }

    ///  Lists the IPSets of the GuardDuty service specified by the detector ID.
    public func listIPSets(_ input: ListIPSetsRequest) throws -> Future<ListIPSetsResponse> {
        return try client.send(operation: "ListIPSets", path: "/detector/{detectorId}/ipset", httpMethod: "GET", input: input)
    }

    ///  Lists all GuardDuty membership invitations that were sent to the current AWS account.
    public func listInvitations(_ input: ListInvitationsRequest) throws -> Future<ListInvitationsResponse> {
        return try client.send(operation: "ListInvitations", path: "/invitation", httpMethod: "GET", input: input)
    }

    ///  Lists details about all member accounts for the current GuardDuty master account.
    public func listMembers(_ input: ListMembersRequest) throws -> Future<ListMembersResponse> {
        return try client.send(operation: "ListMembers", path: "/detector/{detectorId}/member", httpMethod: "GET", input: input)
    }

    ///  Lists tags for a resource. Tagging is currently supported for detectors, finding filters, IP sets, and Threat Intel sets, with a limit of 50 tags per resource. When invoked, this operation returns all assigned tags for a given resource..
    public func listTagsForResource(_ input: ListTagsForResourceRequest) throws -> Future<ListTagsForResourceResponse> {
        return try client.send(operation: "ListTagsForResource", path: "/tags/{resourceArn}", httpMethod: "GET", input: input)
    }

    ///  Lists the ThreatIntelSets of the GuardDuty service specified by the detector ID.
    public func listThreatIntelSets(_ input: ListThreatIntelSetsRequest) throws -> Future<ListThreatIntelSetsResponse> {
        return try client.send(operation: "ListThreatIntelSets", path: "/detector/{detectorId}/threatintelset", httpMethod: "GET", input: input)
    }

    ///  Re-enables GuardDuty to monitor findings of the member accounts specified by the account IDs. A master GuardDuty account can run this command after disabling GuardDuty from monitoring these members' findings by running StopMonitoringMembers.
    public func startMonitoringMembers(_ input: StartMonitoringMembersRequest) throws -> Future<StartMonitoringMembersResponse> {
        return try client.send(operation: "StartMonitoringMembers", path: "/detector/{detectorId}/member/start", httpMethod: "POST", input: input)
    }

    ///  Disables GuardDuty from monitoring findings of the member accounts specified by the account IDs. After running this command, a master GuardDuty account can run StartMonitoringMembers to re-enable GuardDuty to monitor these members’ findings.
    public func stopMonitoringMembers(_ input: StopMonitoringMembersRequest) throws -> Future<StopMonitoringMembersResponse> {
        return try client.send(operation: "StopMonitoringMembers", path: "/detector/{detectorId}/member/stop", httpMethod: "POST", input: input)
    }

    ///  Adds tags to a resource.
    public func tagResource(_ input: TagResourceRequest) throws -> Future<TagResourceResponse> {
        return try client.send(operation: "TagResource", path: "/tags/{resourceArn}", httpMethod: "POST", input: input)
    }

    ///  Unarchives Amazon GuardDuty findings specified by the list of finding IDs.
    public func unarchiveFindings(_ input: UnarchiveFindingsRequest) throws -> Future<UnarchiveFindingsResponse> {
        return try client.send(operation: "UnarchiveFindings", path: "/detector/{detectorId}/findings/unarchive", httpMethod: "POST", input: input)
    }

    ///  Removes tags from a resource.
    public func untagResource(_ input: UntagResourceRequest) throws -> Future<UntagResourceResponse> {
        return try client.send(operation: "UntagResource", path: "/tags/{resourceArn}", httpMethod: "DELETE", input: input)
    }

    ///  Updates an Amazon GuardDuty detector specified by the detectorId.
    public func updateDetector(_ input: UpdateDetectorRequest) throws -> Future<UpdateDetectorResponse> {
        return try client.send(operation: "UpdateDetector", path: "/detector/{detectorId}", httpMethod: "POST", input: input)
    }

    ///  Updates the filter specified by the filter name.
    public func updateFilter(_ input: UpdateFilterRequest) throws -> Future<UpdateFilterResponse> {
        return try client.send(operation: "UpdateFilter", path: "/detector/{detectorId}/filter/{filterName}", httpMethod: "POST", input: input)
    }

    ///  Marks specified Amazon GuardDuty findings as useful or not useful.
    public func updateFindingsFeedback(_ input: UpdateFindingsFeedbackRequest) throws -> Future<UpdateFindingsFeedbackResponse> {
        return try client.send(operation: "UpdateFindingsFeedback", path: "/detector/{detectorId}/findings/feedback", httpMethod: "POST", input: input)
    }

    ///  Updates the IPSet specified by the IPSet ID.
    public func updateIPSet(_ input: UpdateIPSetRequest) throws -> Future<UpdateIPSetResponse> {
        return try client.send(operation: "UpdateIPSet", path: "/detector/{detectorId}/ipset/{ipSetId}", httpMethod: "POST", input: input)
    }

    ///  Updates the ThreatIntelSet specified by ThreatIntelSet ID.
    public func updateThreatIntelSet(_ input: UpdateThreatIntelSetRequest) throws -> Future<UpdateThreatIntelSetResponse> {
        return try client.send(operation: "UpdateThreatIntelSet", path: "/detector/{detectorId}/threatintelset/{threatIntelSetId}", httpMethod: "POST", input: input)
    }


}