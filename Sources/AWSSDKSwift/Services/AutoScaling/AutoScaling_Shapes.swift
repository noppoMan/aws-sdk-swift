// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension AutoScaling {
    //MARK: Enums

    public enum LifecycleState: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case pendingWait = "Pending:Wait"
        case pendingProceed = "Pending:Proceed"
        case quarantined = "Quarantined"
        case inservice = "InService"
        case terminating = "Terminating"
        case terminatingWait = "Terminating:Wait"
        case terminatingProceed = "Terminating:Proceed"
        case terminated = "Terminated"
        case detaching = "Detaching"
        case detached = "Detached"
        case enteringstandby = "EnteringStandby"
        case standby = "Standby"
        public var description: String { return self.rawValue }
    }

    public enum MetricStatistic: String, CustomStringConvertible, Codable {
        case average = "Average"
        case minimum = "Minimum"
        case maximum = "Maximum"
        case samplecount = "SampleCount"
        case sum = "Sum"
        public var description: String { return self.rawValue }
    }

    public enum MetricType: String, CustomStringConvertible, Codable {
        case asgaveragecpuutilization = "ASGAverageCPUUtilization"
        case asgaveragenetworkin = "ASGAverageNetworkIn"
        case asgaveragenetworkout = "ASGAverageNetworkOut"
        case albrequestcountpertarget = "ALBRequestCountPerTarget"
        public var description: String { return self.rawValue }
    }

    public enum ScalingActivityStatusCode: String, CustomStringConvertible, Codable {
        case pendingspotbidplacement = "PendingSpotBidPlacement"
        case waitingforspotinstancerequestid = "WaitingForSpotInstanceRequestId"
        case waitingforspotinstanceid = "WaitingForSpotInstanceId"
        case waitingforinstanceid = "WaitingForInstanceId"
        case preinservice = "PreInService"
        case inprogress = "InProgress"
        case waitingforelbconnectiondraining = "WaitingForELBConnectionDraining"
        case midlifecycleaction = "MidLifecycleAction"
        case waitingforinstancewarmup = "WaitingForInstanceWarmup"
        case successful = "Successful"
        case failed = "Failed"
        case cancelled = "Cancelled"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct ActivitiesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Activities", encoding: .list(member:"member"))
        ]

        /// The scaling activities. Activities are sorted by start time. Activities still in progress are described first.
        public let activities: [Activity]
        /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(activities: [Activity], nextToken: String? = nil) {
            self.activities = activities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case activities = "Activities"
            case nextToken = "NextToken"
        }
    }

    public struct Activity: AWSShape {

        /// The ID of the activity.
        public let activityId: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The reason the activity began.
        public let cause: String
        /// A friendly, more verbose description of the activity.
        public let description: String?
        /// The details about the activity.
        public let details: String?
        /// The end time of the activity.
        public let endTime: TimeStamp?
        /// A value between 0 and 100 that indicates the progress of the activity.
        public let progress: Int?
        /// The start time of the activity.
        public let startTime: TimeStamp
        /// The current status of the activity.
        public let statusCode: ScalingActivityStatusCode
        /// A friendly, more verbose description of the activity status.
        public let statusMessage: String?

        public init(activityId: String, autoScalingGroupName: String, cause: String, description: String? = nil, details: String? = nil, endTime: TimeStamp? = nil, progress: Int? = nil, startTime: TimeStamp, statusCode: ScalingActivityStatusCode, statusMessage: String? = nil) {
            self.activityId = activityId
            self.autoScalingGroupName = autoScalingGroupName
            self.cause = cause
            self.description = description
            self.details = details
            self.endTime = endTime
            self.progress = progress
            self.startTime = startTime
            self.statusCode = statusCode
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case activityId = "ActivityId"
            case autoScalingGroupName = "AutoScalingGroupName"
            case cause = "Cause"
            case description = "Description"
            case details = "Details"
            case endTime = "EndTime"
            case progress = "Progress"
            case startTime = "StartTime"
            case statusCode = "StatusCode"
            case statusMessage = "StatusMessage"
        }
    }

    public struct ActivityType: AWSShape {

        /// A scaling activity.
        public let activity: Activity?

        public init(activity: Activity? = nil) {
            self.activity = activity
        }

        private enum CodingKeys: String, CodingKey {
            case activity = "Activity"
        }
    }

    public struct AdjustmentType: AWSShape {

        /// The policy adjustment type. The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
        public let adjustmentType: String?

        public init(adjustmentType: String? = nil) {
            self.adjustmentType = adjustmentType
        }

        private enum CodingKeys: String, CodingKey {
            case adjustmentType = "AdjustmentType"
        }
    }

    public struct Alarm: AWSShape {

        /// The Amazon Resource Name (ARN) of the alarm.
        public let alarmARN: String?
        /// The name of the alarm.
        public let alarmName: String?

        public init(alarmARN: String? = nil, alarmName: String? = nil) {
            self.alarmARN = alarmARN
            self.alarmName = alarmName
        }

        private enum CodingKeys: String, CodingKey {
            case alarmARN = "AlarmARN"
            case alarmName = "AlarmName"
        }
    }

    public struct AttachInstancesQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The IDs of the instances. You can specify up to 20 instances.
        public let instanceIds: [String]?

        public init(autoScalingGroupName: String, instanceIds: [String]? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.instanceIds?.forEach {
                try validate($0, name: "instanceIds[]", parent: name, max: 19)
                try validate($0, name: "instanceIds[]", parent: name, min: 1)
                try validate($0, name: "instanceIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceIds = "InstanceIds"
        }
    }

    public struct AttachLoadBalancerTargetGroupsResultType: AWSShape {


        public init() {
        }

    }

    public struct AttachLoadBalancerTargetGroupsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupARNs", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
        public let targetGroupARNs: [String]

        public init(autoScalingGroupName: String, targetGroupARNs: [String]) {
            self.autoScalingGroupName = autoScalingGroupName
            self.targetGroupARNs = targetGroupARNs
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.targetGroupARNs.forEach {
                try validate($0, name: "targetGroupARNs[]", parent: name, max: 511)
                try validate($0, name: "targetGroupARNs[]", parent: name, min: 1)
                try validate($0, name: "targetGroupARNs[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case targetGroupARNs = "TargetGroupARNs"
        }
    }

    public struct AttachLoadBalancersResultType: AWSShape {


        public init() {
        }

    }

    public struct AttachLoadBalancersType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerNames", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The names of the load balancers. You can specify up to 10 load balancers.
        public let loadBalancerNames: [String]

        public init(autoScalingGroupName: String, loadBalancerNames: [String]) {
            self.autoScalingGroupName = autoScalingGroupName
            self.loadBalancerNames = loadBalancerNames
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.loadBalancerNames.forEach {
                try validate($0, name: "loadBalancerNames[]", parent: name, max: 255)
                try validate($0, name: "loadBalancerNames[]", parent: name, min: 1)
                try validate($0, name: "loadBalancerNames[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case loadBalancerNames = "LoadBalancerNames"
        }
    }

    public struct AutoScalingGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", encoding: .list(member:"member")), 
            AWSShapeMember(label: "EnabledMetrics", encoding: .list(member:"member")), 
            AWSShapeMember(label: "Instances", encoding: .list(member:"member")), 
            AWSShapeMember(label: "LoadBalancerNames", encoding: .list(member:"member")), 
            AWSShapeMember(label: "SuspendedProcesses", encoding: .list(member:"member")), 
            AWSShapeMember(label: "Tags", encoding: .list(member:"member")), 
            AWSShapeMember(label: "TargetGroupARNs", encoding: .list(member:"member")), 
            AWSShapeMember(label: "TerminationPolicies", encoding: .list(member:"member"))
        ]

        /// The Amazon Resource Name (ARN) of the Auto Scaling group.
        public let autoScalingGroupARN: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more Availability Zones for the group.
        public let availabilityZones: [String]
        /// The date and time the group was created.
        public let createdTime: TimeStamp
        /// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
        public let defaultCooldown: Int
        /// The desired size of the group.
        public let desiredCapacity: Int
        /// The metrics enabled for the group.
        public let enabledMetrics: [EnabledMetric]?
        /// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service.
        public let healthCheckGracePeriod: Int?
        /// The service to use for the health checks. The valid values are EC2 and ELB. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
        public let healthCheckType: String
        /// The EC2 instances associated with the group.
        public let instances: [Instance]?
        /// The name of the associated launch configuration.
        public let launchConfigurationName: String?
        /// The launch template for the group.
        public let launchTemplate: LaunchTemplateSpecification?
        /// One or more load balancers associated with the group.
        public let loadBalancerNames: [String]?
        /// The maximum amount of time, in seconds, that an instance can be in service. Valid Range: Minimum value of 604800.
        public let maxInstanceLifetime: Int?
        /// The maximum size of the group.
        public let maxSize: Int
        /// The minimum size of the group.
        public let minSize: Int
        /// The mixed instances policy for the group.
        public let mixedInstancesPolicy: MixedInstancesPolicy?
        /// Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.
        public let newInstancesProtectedFromScaleIn: Bool?
        /// The name of the placement group into which to launch your instances, if any.
        public let placementGroup: String?
        /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf.
        public let serviceLinkedRoleARN: String?
        /// The current state of the group when DeleteAutoScalingGroup is in progress.
        public let status: String?
        /// The suspended processes associated with the group.
        public let suspendedProcesses: [SuspendedProcess]?
        /// The tags for the group.
        public let tags: [TagDescription]?
        /// The Amazon Resource Names (ARN) of the target groups for your load balancer.
        public let targetGroupARNs: [String]?
        /// The termination policies for the group.
        public let terminationPolicies: [String]?
        /// One or more subnet IDs, if applicable, separated by commas.
        public let vPCZoneIdentifier: String?

        public init(autoScalingGroupARN: String? = nil, autoScalingGroupName: String, availabilityZones: [String], createdTime: TimeStamp, defaultCooldown: Int, desiredCapacity: Int, enabledMetrics: [EnabledMetric]? = nil, healthCheckGracePeriod: Int? = nil, healthCheckType: String, instances: [Instance]? = nil, launchConfigurationName: String? = nil, launchTemplate: LaunchTemplateSpecification? = nil, loadBalancerNames: [String]? = nil, maxInstanceLifetime: Int? = nil, maxSize: Int, minSize: Int, mixedInstancesPolicy: MixedInstancesPolicy? = nil, newInstancesProtectedFromScaleIn: Bool? = nil, placementGroup: String? = nil, serviceLinkedRoleARN: String? = nil, status: String? = nil, suspendedProcesses: [SuspendedProcess]? = nil, tags: [TagDescription]? = nil, targetGroupARNs: [String]? = nil, terminationPolicies: [String]? = nil, vPCZoneIdentifier: String? = nil) {
            self.autoScalingGroupARN = autoScalingGroupARN
            self.autoScalingGroupName = autoScalingGroupName
            self.availabilityZones = availabilityZones
            self.createdTime = createdTime
            self.defaultCooldown = defaultCooldown
            self.desiredCapacity = desiredCapacity
            self.enabledMetrics = enabledMetrics
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.healthCheckType = healthCheckType
            self.instances = instances
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.loadBalancerNames = loadBalancerNames
            self.maxInstanceLifetime = maxInstanceLifetime
            self.maxSize = maxSize
            self.minSize = minSize
            self.mixedInstancesPolicy = mixedInstancesPolicy
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.placementGroup = placementGroup
            self.serviceLinkedRoleARN = serviceLinkedRoleARN
            self.status = status
            self.suspendedProcesses = suspendedProcesses
            self.tags = tags
            self.targetGroupARNs = targetGroupARNs
            self.terminationPolicies = terminationPolicies
            self.vPCZoneIdentifier = vPCZoneIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupARN = "AutoScalingGroupARN"
            case autoScalingGroupName = "AutoScalingGroupName"
            case availabilityZones = "AvailabilityZones"
            case createdTime = "CreatedTime"
            case defaultCooldown = "DefaultCooldown"
            case desiredCapacity = "DesiredCapacity"
            case enabledMetrics = "EnabledMetrics"
            case healthCheckGracePeriod = "HealthCheckGracePeriod"
            case healthCheckType = "HealthCheckType"
            case instances = "Instances"
            case launchConfigurationName = "LaunchConfigurationName"
            case launchTemplate = "LaunchTemplate"
            case loadBalancerNames = "LoadBalancerNames"
            case maxInstanceLifetime = "MaxInstanceLifetime"
            case maxSize = "MaxSize"
            case minSize = "MinSize"
            case mixedInstancesPolicy = "MixedInstancesPolicy"
            case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
            case placementGroup = "PlacementGroup"
            case serviceLinkedRoleARN = "ServiceLinkedRoleARN"
            case status = "Status"
            case suspendedProcesses = "SuspendedProcesses"
            case tags = "Tags"
            case targetGroupARNs = "TargetGroupARNs"
            case terminationPolicies = "TerminationPolicies"
            case vPCZoneIdentifier = "VPCZoneIdentifier"
        }
    }

    public struct AutoScalingGroupNamesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupNames", encoding: .list(member:"member"))
        ]

        /// The names of the Auto Scaling groups. Each name can be a maximum of 1600 characters. By default, you can only specify up to 50 names. You can optionally increase this limit using the MaxRecords parameter. If you omit this parameter, all Auto Scaling groups are described.
        public let autoScalingGroupNames: [String]?
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(autoScalingGroupNames: [String]? = nil, maxRecords: Int? = nil, nextToken: String? = nil) {
            self.autoScalingGroupNames = autoScalingGroupNames
            self.maxRecords = maxRecords
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.autoScalingGroupNames?.forEach {
                try validate($0, name: "autoScalingGroupNames[]", parent: name, max: 1600)
                try validate($0, name: "autoScalingGroupNames[]", parent: name, min: 1)
                try validate($0, name: "autoScalingGroupNames[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupNames = "AutoScalingGroupNames"
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
        }
    }

    public struct AutoScalingGroupsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroups", encoding: .list(member:"member"))
        ]

        /// The groups.
        public let autoScalingGroups: [AutoScalingGroup]
        /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(autoScalingGroups: [AutoScalingGroup], nextToken: String? = nil) {
            self.autoScalingGroups = autoScalingGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroups = "AutoScalingGroups"
            case nextToken = "NextToken"
        }
    }

    public struct AutoScalingInstanceDetails: AWSShape {

        /// The name of the Auto Scaling group for the instance.
        public let autoScalingGroupName: String
        /// The Availability Zone for the instance.
        public let availabilityZone: String
        /// The last reported health status of this instance. "Healthy" means that the instance is healthy and should remain in service. "Unhealthy" means that the instance is unhealthy and Amazon EC2 Auto Scaling should terminate and replace it.
        public let healthStatus: String
        /// The ID of the instance.
        public let instanceId: String
        /// The instance type of the EC2 instance.
        public let instanceType: String?
        /// The launch configuration used to launch the instance. This value is not available if you attached the instance to the Auto Scaling group.
        public let launchConfigurationName: String?
        /// The launch template for the instance.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The lifecycle state for the instance.
        public let lifecycleState: String
        /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
        public let protectedFromScaleIn: Bool
        /// The number of capacity units contributed by the instance based on its instance type. Valid Range: Minimum value of 1. Maximum value of 999.
        public let weightedCapacity: String?

        public init(autoScalingGroupName: String, availabilityZone: String, healthStatus: String, instanceId: String, instanceType: String? = nil, launchConfigurationName: String? = nil, launchTemplate: LaunchTemplateSpecification? = nil, lifecycleState: String, protectedFromScaleIn: Bool, weightedCapacity: String? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.availabilityZone = availabilityZone
            self.healthStatus = healthStatus
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.lifecycleState = lifecycleState
            self.protectedFromScaleIn = protectedFromScaleIn
            self.weightedCapacity = weightedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case availabilityZone = "AvailabilityZone"
            case healthStatus = "HealthStatus"
            case instanceId = "InstanceId"
            case instanceType = "InstanceType"
            case launchConfigurationName = "LaunchConfigurationName"
            case launchTemplate = "LaunchTemplate"
            case lifecycleState = "LifecycleState"
            case protectedFromScaleIn = "ProtectedFromScaleIn"
            case weightedCapacity = "WeightedCapacity"
        }
    }

    public struct AutoScalingInstancesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingInstances", encoding: .list(member:"member"))
        ]

        /// The instances.
        public let autoScalingInstances: [AutoScalingInstanceDetails]?
        /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(autoScalingInstances: [AutoScalingInstanceDetails]? = nil, nextToken: String? = nil) {
            self.autoScalingInstances = autoScalingInstances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingInstances = "AutoScalingInstances"
            case nextToken = "NextToken"
        }
    }

    public struct BatchDeleteScheduledActionAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedScheduledActions", encoding: .list(member:"member"))
        ]

        /// The names of the scheduled actions that could not be deleted, including an error message.
        public let failedScheduledActions: [FailedScheduledUpdateGroupActionRequest]?

        public init(failedScheduledActions: [FailedScheduledUpdateGroupActionRequest]? = nil) {
            self.failedScheduledActions = failedScheduledActions
        }

        private enum CodingKeys: String, CodingKey {
            case failedScheduledActions = "FailedScheduledActions"
        }
    }

    public struct BatchDeleteScheduledActionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledActionNames", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The names of the scheduled actions to delete. The maximum number allowed is 50. 
        public let scheduledActionNames: [String]

        public init(autoScalingGroupName: String, scheduledActionNames: [String]) {
            self.autoScalingGroupName = autoScalingGroupName
            self.scheduledActionNames = scheduledActionNames
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.scheduledActionNames.forEach {
                try validate($0, name: "scheduledActionNames[]", parent: name, max: 1600)
                try validate($0, name: "scheduledActionNames[]", parent: name, min: 1)
                try validate($0, name: "scheduledActionNames[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case scheduledActionNames = "ScheduledActionNames"
        }
    }

    public struct BatchPutScheduledUpdateGroupActionAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedScheduledUpdateGroupActions", encoding: .list(member:"member"))
        ]

        /// The names of the scheduled actions that could not be created or updated, including an error message.
        public let failedScheduledUpdateGroupActions: [FailedScheduledUpdateGroupActionRequest]?

        public init(failedScheduledUpdateGroupActions: [FailedScheduledUpdateGroupActionRequest]? = nil) {
            self.failedScheduledUpdateGroupActions = failedScheduledUpdateGroupActions
        }

        private enum CodingKeys: String, CodingKey {
            case failedScheduledUpdateGroupActions = "FailedScheduledUpdateGroupActions"
        }
    }

    public struct BatchPutScheduledUpdateGroupActionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledUpdateGroupActions", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more scheduled actions. The maximum number allowed is 50.
        public let scheduledUpdateGroupActions: [ScheduledUpdateGroupActionRequest]

        public init(autoScalingGroupName: String, scheduledUpdateGroupActions: [ScheduledUpdateGroupActionRequest]) {
            self.autoScalingGroupName = autoScalingGroupName
            self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.scheduledUpdateGroupActions.forEach {
                try $0.validate(name: "\(name).scheduledUpdateGroupActions[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case scheduledUpdateGroupActions = "ScheduledUpdateGroupActions"
        }
    }

    public struct BlockDeviceMapping: AWSShape {

        /// The device name exposed to the EC2 instance (for example, /dev/sdh or xvdh). For more information, see Device Naming on Linux Instances in the Amazon EC2 User Guide for Linux Instances.
        public let deviceName: String
        /// The information about the Amazon EBS volume.
        public let ebs: Ebs?
        /// Suppresses a device mapping. If this parameter is true for the root device, the instance might fail the EC2 health check. In that case, Amazon EC2 Auto Scaling launches a replacement instance.
        public let noDevice: Bool?
        /// The name of the virtual device (for example, ephemeral0).
        public let virtualName: String?

        public init(deviceName: String, ebs: Ebs? = nil, noDevice: Bool? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        public func validate(name: String) throws {
            try validate(self.deviceName, name:"deviceName", parent: name, max: 255)
            try validate(self.deviceName, name:"deviceName", parent: name, min: 1)
            try validate(self.deviceName, name:"deviceName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.ebs?.validate(name: "\(name).ebs")
            try validate(self.virtualName, name:"virtualName", parent: name, max: 255)
            try validate(self.virtualName, name:"virtualName", parent: name, min: 1)
            try validate(self.virtualName, name:"virtualName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "DeviceName"
            case ebs = "Ebs"
            case noDevice = "NoDevice"
            case virtualName = "VirtualName"
        }
    }

    public struct CompleteLifecycleActionAnswer: AWSShape {


        public init() {
        }

    }

    public struct CompleteLifecycleActionType: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The ID of the instance.
        public let instanceId: String?
        /// The action for the group to take. This parameter can be either CONTINUE or ABANDON.
        public let lifecycleActionResult: String
        /// A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
        public let lifecycleActionToken: String?
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String

        public init(autoScalingGroupName: String, instanceId: String? = nil, lifecycleActionResult: String, lifecycleActionToken: String? = nil, lifecycleHookName: String) {
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceId = instanceId
            self.lifecycleActionResult = lifecycleActionResult
            self.lifecycleActionToken = lifecycleActionToken
            self.lifecycleHookName = lifecycleHookName
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.instanceId, name:"instanceId", parent: name, max: 19)
            try validate(self.instanceId, name:"instanceId", parent: name, min: 1)
            try validate(self.instanceId, name:"instanceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.lifecycleActionToken, name:"lifecycleActionToken", parent: name, max: 36)
            try validate(self.lifecycleActionToken, name:"lifecycleActionToken", parent: name, min: 36)
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, max: 255)
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, min: 1)
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, pattern: "[A-Za-z0-9\\-_\\/]+")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceId = "InstanceId"
            case lifecycleActionResult = "LifecycleActionResult"
            case lifecycleActionToken = "LifecycleActionToken"
            case lifecycleHookName = "LifecycleHookName"
        }
    }

    public struct CreateAutoScalingGroupType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", encoding: .list(member:"member")), 
            AWSShapeMember(label: "LifecycleHookSpecificationList", encoding: .list(member:"member")), 
            AWSShapeMember(label: "LoadBalancerNames", encoding: .list(member:"member")), 
            AWSShapeMember(label: "Tags", encoding: .list(member:"member")), 
            AWSShapeMember(label: "TargetGroupARNs", encoding: .list(member:"member")), 
            AWSShapeMember(label: "TerminationPolicies", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group. This name must be unique per Region per account.
        public let autoScalingGroupName: String
        /// One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets for VPCZoneIdentifier. Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into EC2-Classic.
        public let availabilityZones: [String]?
        /// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is 300. For more information, see Scaling Cooldowns in the Amazon EC2 Auto Scaling User Guide.
        public let defaultCooldown: Int?
        /// The number of Amazon EC2 instances that the Auto Scaling group attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
        public let desiredCapacity: Int?
        /// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default value is 0. For more information, see Health Check Grace Period in the Amazon EC2 Auto Scaling User Guide. Conditional: This parameter is required if you are adding an ELB health check.
        public let healthCheckGracePeriod: Int?
        /// The service to use for the health checks. The valid values are EC2 and ELB. The default value is EC2. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks. For more information, see Health Checks for Auto Scaling Instances in the Amazon EC2 Auto Scaling User Guide.
        public let healthCheckType: String?
        /// The ID of the instance used to create a launch configuration for the group. When you specify an ID of an instance, Amazon EC2 Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, except for the block device mapping. For more information, see Create an Auto Scaling Group Using an EC2 Instance in the Amazon EC2 Auto Scaling User Guide. You must specify one of the following parameters in your request: LaunchConfigurationName, LaunchTemplate, InstanceId, or MixedInstancesPolicy.
        public let instanceId: String?
        /// The name of the launch configuration. If you do not specify LaunchConfigurationName, you must specify one of the following parameters: InstanceId, LaunchTemplate, or MixedInstancesPolicy.
        public let launchConfigurationName: String?
        /// The launch template to use to launch instances. For more information, see LaunchTemplateSpecification in the Amazon EC2 Auto Scaling API Reference. If you do not specify LaunchTemplate, you must specify one of the following parameters: InstanceId, LaunchConfigurationName, or MixedInstancesPolicy.
        public let launchTemplate: LaunchTemplateSpecification?
        /// One or more lifecycle hooks.
        public let lifecycleHookSpecificationList: [LifecycleHookSpecification]?
        /// A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers and Network Load Balancers, specify a list of target groups using the TargetGroupARNs property instead. For more information, see Using a Load Balancer with an Auto Scaling Group in the Amazon EC2 Auto Scaling User Guide.
        public let loadBalancerNames: [String]?
        /// The maximum amount of time, in seconds, that an instance can be in service. Valid Range: Minimum value of 604800.
        public let maxInstanceLifetime: Int?
        /// The maximum size of the group.
        public let maxSize: Int
        /// The minimum size of the group.
        public let minSize: Int
        /// An embedded object that specifies a mixed instances policy. The required parameters must be specified. If optional parameters are unspecified, their default values are used. The policy includes parameters that not only define the distribution of On-Demand Instances and Spot Instances, the maximum price to pay for Spot Instances, and how the Auto Scaling group allocates instance types to fulfill On-Demand and Spot capacity, but also the parameters that specify the instance configuration information—the launch template and instance types. For more information, see MixedInstancesPolicy in the Amazon EC2 Auto Scaling API Reference and Auto Scaling Groups with Multiple Instance Types and Purchase Options in the Amazon EC2 Auto Scaling User Guide. You must specify one of the following parameters in your request: LaunchConfigurationName, LaunchTemplate, InstanceId, or MixedInstancesPolicy.
        public let mixedInstancesPolicy: MixedInstancesPolicy?
        /// Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see Instance Protection in the Amazon EC2 Auto Scaling User Guide.
        public let newInstancesProtectedFromScaleIn: Bool?
        /// The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see Placement Groups in the Amazon EC2 User Guide for Linux Instances.
        public let placementGroup: String?
        /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see Service-Linked Roles in the Amazon EC2 Auto Scaling User Guide.
        public let serviceLinkedRoleARN: String?
        /// One or more tags. For more information, see Tagging Auto Scaling Groups and Instances in the Amazon EC2 Auto Scaling User Guide.
        public let tags: [Tag]?
        /// The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group. Instances are registered as targets in a target group, and traffic is routed to the target group. For more information, see Using a Load Balancer with an Auto Scaling Group in the Amazon EC2 Auto Scaling User Guide.
        public let targetGroupARNs: [String]?
        /// One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed. For more information, see Controlling Which Instances Auto Scaling Terminates During Scale In in the Amazon EC2 Auto Scaling User Guide.
        public let terminationPolicies: [String]?
        /// A comma-separated list of subnet IDs for your virtual private cloud (VPC). If you specify VPCZoneIdentifier with AvailabilityZones, the subnets that you specify for this parameter must reside in those Availability Zones. Conditional: If your account supports EC2-Classic and VPC, this parameter is required to launch instances into a VPC.
        public let vPCZoneIdentifier: String?

        public init(autoScalingGroupName: String, availabilityZones: [String]? = nil, defaultCooldown: Int? = nil, desiredCapacity: Int? = nil, healthCheckGracePeriod: Int? = nil, healthCheckType: String? = nil, instanceId: String? = nil, launchConfigurationName: String? = nil, launchTemplate: LaunchTemplateSpecification? = nil, lifecycleHookSpecificationList: [LifecycleHookSpecification]? = nil, loadBalancerNames: [String]? = nil, maxInstanceLifetime: Int? = nil, maxSize: Int, minSize: Int, mixedInstancesPolicy: MixedInstancesPolicy? = nil, newInstancesProtectedFromScaleIn: Bool? = nil, placementGroup: String? = nil, serviceLinkedRoleARN: String? = nil, tags: [Tag]? = nil, targetGroupARNs: [String]? = nil, terminationPolicies: [String]? = nil, vPCZoneIdentifier: String? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.availabilityZones = availabilityZones
            self.defaultCooldown = defaultCooldown
            self.desiredCapacity = desiredCapacity
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.healthCheckType = healthCheckType
            self.instanceId = instanceId
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.lifecycleHookSpecificationList = lifecycleHookSpecificationList
            self.loadBalancerNames = loadBalancerNames
            self.maxInstanceLifetime = maxInstanceLifetime
            self.maxSize = maxSize
            self.minSize = minSize
            self.mixedInstancesPolicy = mixedInstancesPolicy
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.placementGroup = placementGroup
            self.serviceLinkedRoleARN = serviceLinkedRoleARN
            self.tags = tags
            self.targetGroupARNs = targetGroupARNs
            self.terminationPolicies = terminationPolicies
            self.vPCZoneIdentifier = vPCZoneIdentifier
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 255)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.availabilityZones?.forEach {
                try validate($0, name: "availabilityZones[]", parent: name, max: 255)
                try validate($0, name: "availabilityZones[]", parent: name, min: 1)
                try validate($0, name: "availabilityZones[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.availabilityZones, name:"availabilityZones", parent: name, min: 1)
            try validate(self.healthCheckType, name:"healthCheckType", parent: name, max: 32)
            try validate(self.healthCheckType, name:"healthCheckType", parent: name, min: 1)
            try validate(self.healthCheckType, name:"healthCheckType", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.instanceId, name:"instanceId", parent: name, max: 19)
            try validate(self.instanceId, name:"instanceId", parent: name, min: 1)
            try validate(self.instanceId, name:"instanceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.launchConfigurationName, name:"launchConfigurationName", parent: name, max: 1600)
            try validate(self.launchConfigurationName, name:"launchConfigurationName", parent: name, min: 1)
            try validate(self.launchConfigurationName, name:"launchConfigurationName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.launchTemplate?.validate(name: "\(name).launchTemplate")
            try self.lifecycleHookSpecificationList?.forEach {
                try $0.validate(name: "\(name).lifecycleHookSpecificationList[]")
            }
            try self.loadBalancerNames?.forEach {
                try validate($0, name: "loadBalancerNames[]", parent: name, max: 255)
                try validate($0, name: "loadBalancerNames[]", parent: name, min: 1)
                try validate($0, name: "loadBalancerNames[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try self.mixedInstancesPolicy?.validate(name: "\(name).mixedInstancesPolicy")
            try validate(self.placementGroup, name:"placementGroup", parent: name, max: 255)
            try validate(self.placementGroup, name:"placementGroup", parent: name, min: 1)
            try validate(self.placementGroup, name:"placementGroup", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.serviceLinkedRoleARN, name:"serviceLinkedRoleARN", parent: name, max: 1600)
            try validate(self.serviceLinkedRoleARN, name:"serviceLinkedRoleARN", parent: name, min: 1)
            try validate(self.serviceLinkedRoleARN, name:"serviceLinkedRoleARN", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.targetGroupARNs?.forEach {
                try validate($0, name: "targetGroupARNs[]", parent: name, max: 511)
                try validate($0, name: "targetGroupARNs[]", parent: name, min: 1)
                try validate($0, name: "targetGroupARNs[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try self.terminationPolicies?.forEach {
                try validate($0, name: "terminationPolicies[]", parent: name, max: 1600)
                try validate($0, name: "terminationPolicies[]", parent: name, min: 1)
                try validate($0, name: "terminationPolicies[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.vPCZoneIdentifier, name:"vPCZoneIdentifier", parent: name, max: 2047)
            try validate(self.vPCZoneIdentifier, name:"vPCZoneIdentifier", parent: name, min: 1)
            try validate(self.vPCZoneIdentifier, name:"vPCZoneIdentifier", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case availabilityZones = "AvailabilityZones"
            case defaultCooldown = "DefaultCooldown"
            case desiredCapacity = "DesiredCapacity"
            case healthCheckGracePeriod = "HealthCheckGracePeriod"
            case healthCheckType = "HealthCheckType"
            case instanceId = "InstanceId"
            case launchConfigurationName = "LaunchConfigurationName"
            case launchTemplate = "LaunchTemplate"
            case lifecycleHookSpecificationList = "LifecycleHookSpecificationList"
            case loadBalancerNames = "LoadBalancerNames"
            case maxInstanceLifetime = "MaxInstanceLifetime"
            case maxSize = "MaxSize"
            case minSize = "MinSize"
            case mixedInstancesPolicy = "MixedInstancesPolicy"
            case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
            case placementGroup = "PlacementGroup"
            case serviceLinkedRoleARN = "ServiceLinkedRoleARN"
            case tags = "Tags"
            case targetGroupARNs = "TargetGroupARNs"
            case terminationPolicies = "TerminationPolicies"
            case vPCZoneIdentifier = "VPCZoneIdentifier"
        }
    }

    public struct CreateLaunchConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", encoding: .list(member:"member")), 
            AWSShapeMember(label: "ClassicLinkVPCSecurityGroups", encoding: .list(member:"member")), 
            AWSShapeMember(label: "SecurityGroups", encoding: .list(member:"member"))
        ]

        /// For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances. If you specify true, each instance in the Auto Scaling group receives a unique public IP address. For more information, see Launching Auto Scaling Instances in a VPC in the Amazon EC2 Auto Scaling User Guide. If you specify this parameter, you must specify at least one subnet for VPCZoneIdentifier when you create your group.  If the instance is launched into a default subnet, the default is to assign a public IP address, unless you disabled the option to assign a public IP address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IP address, unless you enabled the option to assign a public IP address on the subnet. 
        public let associatePublicIpAddress: Bool?
        /// A block device mapping, which specifies the block devices for the instance. You can specify virtual devices and EBS volumes. For more information, see Block Device Mapping in the Amazon EC2 User Guide for Linux Instances.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see ClassicLink in the Amazon EC2 User Guide for Linux Instances and Linking EC2-Classic Instances to a VPC in the Amazon EC2 Auto Scaling User Guide. This parameter can only be used if you are launching EC2-Classic instances.
        public let classicLinkVPCId: String?
        /// The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For more information, see ClassicLink in the Amazon EC2 User Guide for Linux Instances and Linking EC2-Classic Instances to a VPC in the Amazon EC2 Auto Scaling User Guide. If you specify the ClassicLinkVPCId parameter, you must specify this parameter.
        public let classicLinkVPCSecurityGroups: [String]?
        /// Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see Amazon EBS-Optimized Instances in the Amazon EC2 User Guide for Linux Instances. The default value is false.
        public let ebsOptimized: Bool?
        /// The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. For more information, see IAM Role for Applications That Run on Amazon EC2 Instances in the Amazon EC2 Auto Scaling User Guide.
        public let iamInstanceProfile: String?
        /// The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see Finding an AMI in the Amazon EC2 User Guide for Linux Instances. If you do not specify InstanceId, you must specify ImageId.
        public let imageId: String?
        /// The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping. To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request. For more information, see Create a Launch Configuration Using an EC2 Instance in the Amazon EC2 Auto Scaling User Guide. If you do not specify InstanceId, you must specify both ImageId and InstanceType.
        public let instanceId: String?
        /// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring. The default value is true (enabled).  When detailed monitoring is enabled, Amazon CloudWatch generates metrics every minute and your account is charged a fee. When you disable detailed monitoring, CloudWatch generates metrics every 5 minutes. For more information, see Configure Monitoring for Auto Scaling Instances in the Amazon EC2 Auto Scaling User Guide. 
        public let instanceMonitoring: InstanceMonitoring?
        /// Specifies the instance type of the EC2 instance. For information about available instance types, see Available Instance Types in the Amazon EC2 User Guide for Linux Instances.  If you do not specify InstanceId, you must specify InstanceType.
        public let instanceType: String?
        /// The ID of the kernel associated with the AMI.
        public let kernelId: String?
        /// The name of the key pair. For more information, see Amazon EC2 Key Pairs in the Amazon EC2 User Guide for Linux Instances.
        public let keyName: String?
        /// The name of the launch configuration. This name must be unique per Region per account.
        public let launchConfigurationName: String
        /// The tenancy of the instance. An instance with dedicated tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC. To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to default), you must set the value of this parameter to dedicated. If you specify PlacementTenancy, you must specify at least one subnet for VPCZoneIdentifier when you create your group. For more information, see Instance Placement Tenancy in the Amazon EC2 Auto Scaling User Guide. Valid Values: default | dedicated 
        public let placementTenancy: String?
        /// The ID of the RAM disk to select.
        public let ramdiskId: String?
        /// A list that contains the security groups to assign to the instances in the Auto Scaling group. [EC2-VPC] Specify the security group IDs. For more information, see Security Groups for Your VPC in the Amazon Virtual Private Cloud User Guide. [EC2-Classic] Specify either the security group names or the security group IDs. For more information, see Amazon EC2 Security Groups in the Amazon EC2 User Guide for Linux Instances.
        public let securityGroups: [String]?
        /// The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see Launching Spot Instances in Your Auto Scaling Group in the Amazon EC2 Auto Scaling User Guide.  When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price. 
        public let spotPrice: String?
        /// The Base64-encoded user data to make available to the launched EC2 instances. For more information, see Instance Metadata and User Data in the Amazon EC2 User Guide for Linux Instances.
        public let userData: String?

        public init(associatePublicIpAddress: Bool? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, classicLinkVPCId: String? = nil, classicLinkVPCSecurityGroups: [String]? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: String? = nil, imageId: String? = nil, instanceId: String? = nil, instanceMonitoring: InstanceMonitoring? = nil, instanceType: String? = nil, kernelId: String? = nil, keyName: String? = nil, launchConfigurationName: String, placementTenancy: String? = nil, ramdiskId: String? = nil, securityGroups: [String]? = nil, spotPrice: String? = nil, userData: String? = nil) {
            self.associatePublicIpAddress = associatePublicIpAddress
            self.blockDeviceMappings = blockDeviceMappings
            self.classicLinkVPCId = classicLinkVPCId
            self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceId = instanceId
            self.instanceMonitoring = instanceMonitoring
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.launchConfigurationName = launchConfigurationName
            self.placementTenancy = placementTenancy
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.spotPrice = spotPrice
            self.userData = userData
        }

        public func validate(name: String) throws {
            try self.blockDeviceMappings?.forEach {
                try $0.validate(name: "\(name).blockDeviceMappings[]")
            }
            try validate(self.classicLinkVPCId, name:"classicLinkVPCId", parent: name, max: 255)
            try validate(self.classicLinkVPCId, name:"classicLinkVPCId", parent: name, min: 1)
            try validate(self.classicLinkVPCId, name:"classicLinkVPCId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.classicLinkVPCSecurityGroups?.forEach {
                try validate($0, name: "classicLinkVPCSecurityGroups[]", parent: name, max: 255)
                try validate($0, name: "classicLinkVPCSecurityGroups[]", parent: name, min: 1)
                try validate($0, name: "classicLinkVPCSecurityGroups[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.iamInstanceProfile, name:"iamInstanceProfile", parent: name, max: 1600)
            try validate(self.iamInstanceProfile, name:"iamInstanceProfile", parent: name, min: 1)
            try validate(self.iamInstanceProfile, name:"iamInstanceProfile", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.imageId, name:"imageId", parent: name, max: 255)
            try validate(self.imageId, name:"imageId", parent: name, min: 1)
            try validate(self.imageId, name:"imageId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.instanceId, name:"instanceId", parent: name, max: 19)
            try validate(self.instanceId, name:"instanceId", parent: name, min: 1)
            try validate(self.instanceId, name:"instanceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.instanceType, name:"instanceType", parent: name, max: 255)
            try validate(self.instanceType, name:"instanceType", parent: name, min: 1)
            try validate(self.instanceType, name:"instanceType", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.kernelId, name:"kernelId", parent: name, max: 255)
            try validate(self.kernelId, name:"kernelId", parent: name, min: 1)
            try validate(self.kernelId, name:"kernelId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.keyName, name:"keyName", parent: name, max: 255)
            try validate(self.keyName, name:"keyName", parent: name, min: 1)
            try validate(self.keyName, name:"keyName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.launchConfigurationName, name:"launchConfigurationName", parent: name, max: 255)
            try validate(self.launchConfigurationName, name:"launchConfigurationName", parent: name, min: 1)
            try validate(self.launchConfigurationName, name:"launchConfigurationName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.placementTenancy, name:"placementTenancy", parent: name, max: 64)
            try validate(self.placementTenancy, name:"placementTenancy", parent: name, min: 1)
            try validate(self.placementTenancy, name:"placementTenancy", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.ramdiskId, name:"ramdiskId", parent: name, max: 255)
            try validate(self.ramdiskId, name:"ramdiskId", parent: name, min: 1)
            try validate(self.ramdiskId, name:"ramdiskId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.securityGroups?.forEach {
                try validate($0, name: "securityGroups[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.spotPrice, name:"spotPrice", parent: name, max: 255)
            try validate(self.spotPrice, name:"spotPrice", parent: name, min: 1)
            try validate(self.userData, name:"userData", parent: name, max: 21847)
            try validate(self.userData, name:"userData", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case blockDeviceMappings = "BlockDeviceMappings"
            case classicLinkVPCId = "ClassicLinkVPCId"
            case classicLinkVPCSecurityGroups = "ClassicLinkVPCSecurityGroups"
            case ebsOptimized = "EbsOptimized"
            case iamInstanceProfile = "IamInstanceProfile"
            case imageId = "ImageId"
            case instanceId = "InstanceId"
            case instanceMonitoring = "InstanceMonitoring"
            case instanceType = "InstanceType"
            case kernelId = "KernelId"
            case keyName = "KeyName"
            case launchConfigurationName = "LaunchConfigurationName"
            case placementTenancy = "PlacementTenancy"
            case ramdiskId = "RamdiskId"
            case securityGroups = "SecurityGroups"
            case spotPrice = "SpotPrice"
            case userData = "UserData"
        }
    }

    public struct CreateOrUpdateTagsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", encoding: .list(member:"member"))
        ]

        /// One or more tags.
        public let tags: [Tag]

        public init(tags: [Tag]) {
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct CustomizedMetricSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", encoding: .list(member:"member"))
        ]

        /// The dimensions of the metric. Conditional: If you published your metric with dimensions, you must specify the same dimensions in your scaling policy.
        public let dimensions: [MetricDimension]?
        /// The name of the metric.
        public let metricName: String
        /// The namespace of the metric.
        public let namespace: String
        /// The statistic of the metric.
        public let statistic: MetricStatistic
        /// The unit of the metric.
        public let unit: String?

        public init(dimensions: [MetricDimension]? = nil, metricName: String, namespace: String, statistic: MetricStatistic, unit: String? = nil) {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.statistic = statistic
            self.unit = unit
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case statistic = "Statistic"
            case unit = "Unit"
        }
    }

    public struct DeleteAutoScalingGroupType: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
        public let forceDelete: Bool?

        public init(autoScalingGroupName: String, forceDelete: Bool? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.forceDelete = forceDelete
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case forceDelete = "ForceDelete"
        }
    }

    public struct DeleteLifecycleHookAnswer: AWSShape {


        public init() {
        }

    }

    public struct DeleteLifecycleHookType: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String

        public init(autoScalingGroupName: String, lifecycleHookName: String) {
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleHookName = lifecycleHookName
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, max: 255)
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, min: 1)
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, pattern: "[A-Za-z0-9\\-_\\/]+")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case lifecycleHookName = "LifecycleHookName"
        }
    }

    public struct DeleteNotificationConfigurationType: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
        public let topicARN: String

        public init(autoScalingGroupName: String, topicARN: String) {
            self.autoScalingGroupName = autoScalingGroupName
            self.topicARN = topicARN
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.topicARN, name:"topicARN", parent: name, max: 1600)
            try validate(self.topicARN, name:"topicARN", parent: name, min: 1)
            try validate(self.topicARN, name:"topicARN", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case topicARN = "TopicARN"
        }
    }

    public struct DeletePolicyType: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The name or Amazon Resource Name (ARN) of the policy.
        public let policyName: String

        public init(autoScalingGroupName: String? = nil, policyName: String) {
            self.autoScalingGroupName = autoScalingGroupName
            self.policyName = policyName
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.policyName, name:"policyName", parent: name, max: 1600)
            try validate(self.policyName, name:"policyName", parent: name, min: 1)
            try validate(self.policyName, name:"policyName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case policyName = "PolicyName"
        }
    }

    public struct DeleteScheduledActionType: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The name of the action to delete.
        public let scheduledActionName: String

        public init(autoScalingGroupName: String, scheduledActionName: String) {
            self.autoScalingGroupName = autoScalingGroupName
            self.scheduledActionName = scheduledActionName
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, max: 1600)
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, min: 1)
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case scheduledActionName = "ScheduledActionName"
        }
    }

    public struct DeleteTagsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", encoding: .list(member:"member"))
        ]

        /// One or more tags.
        public let tags: [Tag]

        public init(tags: [Tag]) {
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct DescribeAccountLimitsAnswer: AWSShape {

        /// The maximum number of groups allowed for your AWS account. The default limit is 200 per AWS Region.
        public let maxNumberOfAutoScalingGroups: Int?
        /// The maximum number of launch configurations allowed for your AWS account. The default limit is 200 per AWS Region.
        public let maxNumberOfLaunchConfigurations: Int?
        /// The current number of groups for your AWS account.
        public let numberOfAutoScalingGroups: Int?
        /// The current number of launch configurations for your AWS account.
        public let numberOfLaunchConfigurations: Int?

        public init(maxNumberOfAutoScalingGroups: Int? = nil, maxNumberOfLaunchConfigurations: Int? = nil, numberOfAutoScalingGroups: Int? = nil, numberOfLaunchConfigurations: Int? = nil) {
            self.maxNumberOfAutoScalingGroups = maxNumberOfAutoScalingGroups
            self.maxNumberOfLaunchConfigurations = maxNumberOfLaunchConfigurations
            self.numberOfAutoScalingGroups = numberOfAutoScalingGroups
            self.numberOfLaunchConfigurations = numberOfLaunchConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case maxNumberOfAutoScalingGroups = "MaxNumberOfAutoScalingGroups"
            case maxNumberOfLaunchConfigurations = "MaxNumberOfLaunchConfigurations"
            case numberOfAutoScalingGroups = "NumberOfAutoScalingGroups"
            case numberOfLaunchConfigurations = "NumberOfLaunchConfigurations"
        }
    }

    public struct DescribeAdjustmentTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdjustmentTypes", encoding: .list(member:"member"))
        ]

        /// The policy adjustment types.
        public let adjustmentTypes: [AdjustmentType]?

        public init(adjustmentTypes: [AdjustmentType]? = nil) {
            self.adjustmentTypes = adjustmentTypes
        }

        private enum CodingKeys: String, CodingKey {
            case adjustmentTypes = "AdjustmentTypes"
        }
    }

    public struct DescribeAutoScalingInstancesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", encoding: .list(member:"member"))
        ]

        /// The IDs of the instances. You can specify up to MaxRecords IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
        public let instanceIds: [String]?
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 50.
        public let maxRecords: Int?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(instanceIds: [String]? = nil, maxRecords: Int? = nil, nextToken: String? = nil) {
            self.instanceIds = instanceIds
            self.maxRecords = maxRecords
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.instanceIds?.forEach {
                try validate($0, name: "instanceIds[]", parent: name, max: 19)
                try validate($0, name: "instanceIds[]", parent: name, min: 1)
                try validate($0, name: "instanceIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceIds"
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAutoScalingNotificationTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingNotificationTypes", encoding: .list(member:"member"))
        ]

        /// The notification types.
        public let autoScalingNotificationTypes: [String]?

        public init(autoScalingNotificationTypes: [String]? = nil) {
            self.autoScalingNotificationTypes = autoScalingNotificationTypes
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingNotificationTypes = "AutoScalingNotificationTypes"
        }
    }

    public struct DescribeLifecycleHookTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleHookTypes", encoding: .list(member:"member"))
        ]

        /// The lifecycle hook types.
        public let lifecycleHookTypes: [String]?

        public init(lifecycleHookTypes: [String]? = nil) {
            self.lifecycleHookTypes = lifecycleHookTypes
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleHookTypes = "LifecycleHookTypes"
        }
    }

    public struct DescribeLifecycleHooksAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleHooks", encoding: .list(member:"member"))
        ]

        /// The lifecycle hooks for the specified group.
        public let lifecycleHooks: [LifecycleHook]?

        public init(lifecycleHooks: [LifecycleHook]? = nil) {
            self.lifecycleHooks = lifecycleHooks
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleHooks = "LifecycleHooks"
        }
    }

    public struct DescribeLifecycleHooksType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleHookNames", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
        public let lifecycleHookNames: [String]?

        public init(autoScalingGroupName: String, lifecycleHookNames: [String]? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleHookNames = lifecycleHookNames
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.lifecycleHookNames?.forEach {
                try validate($0, name: "lifecycleHookNames[]", parent: name, max: 255)
                try validate($0, name: "lifecycleHookNames[]", parent: name, min: 1)
                try validate($0, name: "lifecycleHookNames[]", parent: name, pattern: "[A-Za-z0-9\\-_\\/]+")
            }
            try validate(self.lifecycleHookNames, name:"lifecycleHookNames", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case lifecycleHookNames = "LifecycleHookNames"
        }
    }

    public struct DescribeLoadBalancerTargetGroupsRequest: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The maximum number of items to return with this call. The default value is 100 and the maximum value is 100.
        public let maxRecords: Int?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(autoScalingGroupName: String, maxRecords: Int? = nil, nextToken: String? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.maxRecords = maxRecords
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLoadBalancerTargetGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerTargetGroups", encoding: .list(member:"member"))
        ]

        /// Information about the target groups.
        public let loadBalancerTargetGroups: [LoadBalancerTargetGroupState]?
        /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(loadBalancerTargetGroups: [LoadBalancerTargetGroupState]? = nil, nextToken: String? = nil) {
            self.loadBalancerTargetGroups = loadBalancerTargetGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerTargetGroups = "LoadBalancerTargetGroups"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLoadBalancersRequest: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The maximum number of items to return with this call. The default value is 100 and the maximum value is 100.
        public let maxRecords: Int?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(autoScalingGroupName: String, maxRecords: Int? = nil, nextToken: String? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.maxRecords = maxRecords
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLoadBalancersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancers", encoding: .list(member:"member"))
        ]

        /// The load balancers.
        public let loadBalancers: [LoadBalancerState]?
        /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(loadBalancers: [LoadBalancerState]? = nil, nextToken: String? = nil) {
            self.loadBalancers = loadBalancers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancers = "LoadBalancers"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeMetricCollectionTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Granularities", encoding: .list(member:"member")), 
            AWSShapeMember(label: "Metrics", encoding: .list(member:"member"))
        ]

        /// The granularities for the metrics.
        public let granularities: [MetricGranularityType]?
        /// One or more metrics.
        public let metrics: [MetricCollectionType]?

        public init(granularities: [MetricGranularityType]? = nil, metrics: [MetricCollectionType]? = nil) {
            self.granularities = granularities
            self.metrics = metrics
        }

        private enum CodingKeys: String, CodingKey {
            case granularities = "Granularities"
            case metrics = "Metrics"
        }
    }

    public struct DescribeNotificationConfigurationsAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationConfigurations", encoding: .list(member:"member"))
        ]

        /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// The notification configurations.
        public let notificationConfigurations: [NotificationConfiguration]

        public init(nextToken: String? = nil, notificationConfigurations: [NotificationConfiguration]) {
            self.nextToken = nextToken
            self.notificationConfigurations = notificationConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case notificationConfigurations = "NotificationConfigurations"
        }
    }

    public struct DescribeNotificationConfigurationsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupNames", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupNames: [String]?
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(autoScalingGroupNames: [String]? = nil, maxRecords: Int? = nil, nextToken: String? = nil) {
            self.autoScalingGroupNames = autoScalingGroupNames
            self.maxRecords = maxRecords
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.autoScalingGroupNames?.forEach {
                try validate($0, name: "autoScalingGroupNames[]", parent: name, max: 1600)
                try validate($0, name: "autoScalingGroupNames[]", parent: name, min: 1)
                try validate($0, name: "autoScalingGroupNames[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupNames = "AutoScalingGroupNames"
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
        }
    }

    public struct DescribePoliciesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyNames", encoding: .list(member:"member")), 
            AWSShapeMember(label: "PolicyTypes", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The maximum number of items to be returned with each call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The names of one or more policies. If you omit this parameter, all policies are described. If a group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
        public let policyNames: [String]?
        /// One or more policy types. The valid values are SimpleScaling, StepScaling, and TargetTrackingScaling.
        public let policyTypes: [String]?

        public init(autoScalingGroupName: String? = nil, maxRecords: Int? = nil, nextToken: String? = nil, policyNames: [String]? = nil, policyTypes: [String]? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.policyNames = policyNames
            self.policyTypes = policyTypes
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.policyNames?.forEach {
                try validate($0, name: "policyNames[]", parent: name, max: 1600)
                try validate($0, name: "policyNames[]", parent: name, min: 1)
                try validate($0, name: "policyNames[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try self.policyTypes?.forEach {
                try validate($0, name: "policyTypes[]", parent: name, max: 64)
                try validate($0, name: "policyTypes[]", parent: name, min: 1)
                try validate($0, name: "policyTypes[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case policyNames = "PolicyNames"
            case policyTypes = "PolicyTypes"
        }
    }

    public struct DescribeScalingActivitiesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivityIds", encoding: .list(member:"member"))
        ]

        /// The activity IDs of the desired scaling activities. You can specify up to 50 IDs. If you omit this parameter, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.
        public let activityIds: [String]?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The maximum number of items to return with this call. The default value is 100 and the maximum value is 100.
        public let maxRecords: Int?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(activityIds: [String]? = nil, autoScalingGroupName: String? = nil, maxRecords: Int? = nil, nextToken: String? = nil) {
            self.activityIds = activityIds
            self.autoScalingGroupName = autoScalingGroupName
            self.maxRecords = maxRecords
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.activityIds?.forEach {
                try validate($0, name: "activityIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case activityIds = "ActivityIds"
            case autoScalingGroupName = "AutoScalingGroupName"
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeScheduledActionsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledActionNames", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
        public let endTime: TimeStamp?
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The names of one or more scheduled actions. You can specify up to 50 actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.
        public let scheduledActionNames: [String]?
        /// The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
        public let startTime: TimeStamp?

        public init(autoScalingGroupName: String? = nil, endTime: TimeStamp? = nil, maxRecords: Int? = nil, nextToken: String? = nil, scheduledActionNames: [String]? = nil, startTime: TimeStamp? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.endTime = endTime
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.scheduledActionNames = scheduledActionNames
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.scheduledActionNames?.forEach {
                try validate($0, name: "scheduledActionNames[]", parent: name, max: 1600)
                try validate($0, name: "scheduledActionNames[]", parent: name, min: 1)
                try validate($0, name: "scheduledActionNames[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case endTime = "EndTime"
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case scheduledActionNames = "ScheduledActionNames"
            case startTime = "StartTime"
        }
    }

    public struct DescribeTagsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"member"))
        ]

        /// One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, auto-scaling-group) is 1000.
        public let filters: [Filter]?
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(filters: [Filter]? = nil, maxRecords: Int? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeTerminationPolicyTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TerminationPolicyTypes", encoding: .list(member:"member"))
        ]

        /// The termination policies supported by Amazon EC2 Auto Scaling: OldestInstance, OldestLaunchConfiguration, NewestInstance, ClosestToNextInstanceHour, Default, OldestLaunchTemplate, and AllocationStrategy.
        public let terminationPolicyTypes: [String]?

        public init(terminationPolicyTypes: [String]? = nil) {
            self.terminationPolicyTypes = terminationPolicyTypes
        }

        private enum CodingKeys: String, CodingKey {
            case terminationPolicyTypes = "TerminationPolicyTypes"
        }
    }

    public struct DetachInstancesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Activities", encoding: .list(member:"member"))
        ]

        /// The activities related to detaching the instances from the Auto Scaling group.
        public let activities: [Activity]?

        public init(activities: [Activity]? = nil) {
            self.activities = activities
        }

        private enum CodingKeys: String, CodingKey {
            case activities = "Activities"
        }
    }

    public struct DetachInstancesQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The IDs of the instances. You can specify up to 20 instances.
        public let instanceIds: [String]?
        /// Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
        public let shouldDecrementDesiredCapacity: Bool

        public init(autoScalingGroupName: String, instanceIds: [String]? = nil, shouldDecrementDesiredCapacity: Bool) {
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.instanceIds?.forEach {
                try validate($0, name: "instanceIds[]", parent: name, max: 19)
                try validate($0, name: "instanceIds[]", parent: name, min: 1)
                try validate($0, name: "instanceIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceIds = "InstanceIds"
            case shouldDecrementDesiredCapacity = "ShouldDecrementDesiredCapacity"
        }
    }

    public struct DetachLoadBalancerTargetGroupsResultType: AWSShape {


        public init() {
        }

    }

    public struct DetachLoadBalancerTargetGroupsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupARNs", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
        public let targetGroupARNs: [String]

        public init(autoScalingGroupName: String, targetGroupARNs: [String]) {
            self.autoScalingGroupName = autoScalingGroupName
            self.targetGroupARNs = targetGroupARNs
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.targetGroupARNs.forEach {
                try validate($0, name: "targetGroupARNs[]", parent: name, max: 511)
                try validate($0, name: "targetGroupARNs[]", parent: name, min: 1)
                try validate($0, name: "targetGroupARNs[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case targetGroupARNs = "TargetGroupARNs"
        }
    }

    public struct DetachLoadBalancersResultType: AWSShape {


        public init() {
        }

    }

    public struct DetachLoadBalancersType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerNames", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The names of the load balancers. You can specify up to 10 load balancers.
        public let loadBalancerNames: [String]

        public init(autoScalingGroupName: String, loadBalancerNames: [String]) {
            self.autoScalingGroupName = autoScalingGroupName
            self.loadBalancerNames = loadBalancerNames
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.loadBalancerNames.forEach {
                try validate($0, name: "loadBalancerNames[]", parent: name, max: 255)
                try validate($0, name: "loadBalancerNames[]", parent: name, min: 1)
                try validate($0, name: "loadBalancerNames[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case loadBalancerNames = "LoadBalancerNames"
        }
    }

    public struct DisableMetricsCollectionQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metrics", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more of the following metrics. If you omit this parameter, all metrics are disabled.    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances   
        public let metrics: [String]?

        public init(autoScalingGroupName: String, metrics: [String]? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.metrics = metrics
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.metrics?.forEach {
                try validate($0, name: "metrics[]", parent: name, max: 255)
                try validate($0, name: "metrics[]", parent: name, min: 1)
                try validate($0, name: "metrics[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case metrics = "Metrics"
        }
    }

    public struct Ebs: AWSShape {

        /// Indicates whether the volume is deleted on instance termination. For Amazon EC2 Auto Scaling, the default value is true.
        public let deleteOnTermination: Bool?
        /// Specifies whether the volume should be encrypted. Encrypted EBS volumes can only be attached to instances that support Amazon EBS encryption. For more information, see Supported Instance Types. If your AMI uses encrypted volumes, you can also only launch it on supported instance types.  If you are creating a volume from a snapshot, you cannot specify an encryption value. Volumes that are created from encrypted snapshots are automatically encrypted, and volumes that are created from unencrypted snapshots are automatically unencrypted. By default, encrypted snapshots use the AWS managed CMK that is used for EBS encryption, but you can specify a custom CMK when you create the snapshot. The ability to encrypt a snapshot during copying also allows you to apply a new CMK to an already-encrypted snapshot. Volumes restored from the resulting copy are only accessible using the new CMK. Enabling encryption by default results in all EBS volumes being encrypted with the AWS managed CMK or a customer managed CMK, whether or not the snapshot was encrypted.  For more information, see Using Encryption with EBS-Backed AMIs in the Amazon EC2 User Guide for Linux Instances and Required CMK Key Policy for Use with Encrypted Volumes in the Amazon EC2 Auto Scaling User Guide.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) to provision for the volume. The maximum ratio of IOPS to volume size (in GiB) is 50:1. For more information, see Amazon EBS Volume Types in the Amazon EC2 User Guide for Linux Instances. Conditional: This parameter is required when the volume type is io1. (Not used with standard, gp2, st1, or sc1 volumes.) 
        public let iops: Int?
        /// The snapshot ID of the volume to use. Conditional: This parameter is optional if you specify a volume size. If you specify both SnapshotId and VolumeSize, VolumeSize must be equal or greater than the size of the snapshot.
        public let snapshotId: String?
        /// The volume size, in Gibibytes (GiB). This can be a number from 1-1,024 for standard, 4-16,384 for io1, 1-16,384 for gp2, and 500-16,384 for st1 and sc1. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size. Default: If you create a volume from a snapshot and you don't specify a volume size, the default is the snapshot size.  At least one of VolumeSize or SnapshotId is required. 
        public let volumeSize: Int?
        /// The volume type, which can be standard for Magnetic, io1 for Provisioned IOPS SSD, gp2 for General Purpose SSD, st1 for Throughput Optimized HDD, or sc1 for Cold HDD. For more information, see Amazon EBS Volume Types in the Amazon EC2 User Guide for Linux Instances. Valid Values: standard | io1 | gp2 | st1 | sc1 
        public let volumeType: String?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, snapshotId: String? = nil, volumeSize: Int? = nil, volumeType: String? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.snapshotId = snapshotId
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        public func validate(name: String) throws {
            try validate(self.iops, name:"iops", parent: name, max: 20000)
            try validate(self.iops, name:"iops", parent: name, min: 100)
            try validate(self.snapshotId, name:"snapshotId", parent: name, max: 255)
            try validate(self.snapshotId, name:"snapshotId", parent: name, min: 1)
            try validate(self.snapshotId, name:"snapshotId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.volumeSize, name:"volumeSize", parent: name, max: 16384)
            try validate(self.volumeSize, name:"volumeSize", parent: name, min: 1)
            try validate(self.volumeType, name:"volumeType", parent: name, max: 255)
            try validate(self.volumeType, name:"volumeType", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "DeleteOnTermination"
            case encrypted = "Encrypted"
            case iops = "Iops"
            case snapshotId = "SnapshotId"
            case volumeSize = "VolumeSize"
            case volumeType = "VolumeType"
        }
    }

    public struct EnableMetricsCollectionQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metrics", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The granularity to associate with the metrics to collect. The only valid value is 1Minute.
        public let granularity: String
        /// One or more of the following metrics. If you omit this parameter, all metrics are enabled.    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances   
        public let metrics: [String]?

        public init(autoScalingGroupName: String, granularity: String, metrics: [String]? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.granularity = granularity
            self.metrics = metrics
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.granularity, name:"granularity", parent: name, max: 255)
            try validate(self.granularity, name:"granularity", parent: name, min: 1)
            try validate(self.granularity, name:"granularity", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.metrics?.forEach {
                try validate($0, name: "metrics[]", parent: name, max: 255)
                try validate($0, name: "metrics[]", parent: name, min: 1)
                try validate($0, name: "metrics[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case granularity = "Granularity"
            case metrics = "Metrics"
        }
    }

    public struct EnabledMetric: AWSShape {

        /// The granularity of the metric. The only valid value is 1Minute.
        public let granularity: String?
        /// One of the following metrics:    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances   
        public let metric: String?

        public init(granularity: String? = nil, metric: String? = nil) {
            self.granularity = granularity
            self.metric = metric
        }

        private enum CodingKeys: String, CodingKey {
            case granularity = "Granularity"
            case metric = "Metric"
        }
    }

    public struct EnterStandbyAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Activities", encoding: .list(member:"member"))
        ]

        /// The activities related to moving instances into Standby mode.
        public let activities: [Activity]?

        public init(activities: [Activity]? = nil) {
            self.activities = activities
        }

        private enum CodingKeys: String, CodingKey {
            case activities = "Activities"
        }
    }

    public struct EnterStandbyQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The IDs of the instances. You can specify up to 20 instances.
        public let instanceIds: [String]?
        /// Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to Standby mode.
        public let shouldDecrementDesiredCapacity: Bool

        public init(autoScalingGroupName: String, instanceIds: [String]? = nil, shouldDecrementDesiredCapacity: Bool) {
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.instanceIds?.forEach {
                try validate($0, name: "instanceIds[]", parent: name, max: 19)
                try validate($0, name: "instanceIds[]", parent: name, min: 1)
                try validate($0, name: "instanceIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceIds = "InstanceIds"
            case shouldDecrementDesiredCapacity = "ShouldDecrementDesiredCapacity"
        }
    }

    public struct ExecutePolicyType: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The breach threshold for the alarm. Conditional: This parameter is required if the policy type is StepScaling and not supported otherwise.
        public let breachThreshold: Double?
        /// Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy. This parameter is not supported if the policy type is StepScaling or TargetTrackingScaling. For more information, see Scaling Cooldowns in the Amazon EC2 Auto Scaling User Guide.
        public let honorCooldown: Bool?
        /// The metric value to compare to BreachThreshold. This enables you to execute a policy of type StepScaling and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59. If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error. Conditional: This parameter is required if the policy type is StepScaling and not supported otherwise.
        public let metricValue: Double?
        /// The name or ARN of the policy.
        public let policyName: String

        public init(autoScalingGroupName: String? = nil, breachThreshold: Double? = nil, honorCooldown: Bool? = nil, metricValue: Double? = nil, policyName: String) {
            self.autoScalingGroupName = autoScalingGroupName
            self.breachThreshold = breachThreshold
            self.honorCooldown = honorCooldown
            self.metricValue = metricValue
            self.policyName = policyName
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.policyName, name:"policyName", parent: name, max: 1600)
            try validate(self.policyName, name:"policyName", parent: name, min: 1)
            try validate(self.policyName, name:"policyName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case breachThreshold = "BreachThreshold"
            case honorCooldown = "HonorCooldown"
            case metricValue = "MetricValue"
            case policyName = "PolicyName"
        }
    }

    public struct ExitStandbyAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Activities", encoding: .list(member:"member"))
        ]

        /// The activities related to moving instances out of Standby mode.
        public let activities: [Activity]?

        public init(activities: [Activity]? = nil) {
            self.activities = activities
        }

        private enum CodingKeys: String, CodingKey {
            case activities = "Activities"
        }
    }

    public struct ExitStandbyQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The IDs of the instances. You can specify up to 20 instances.
        public let instanceIds: [String]?

        public init(autoScalingGroupName: String, instanceIds: [String]? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.instanceIds?.forEach {
                try validate($0, name: "instanceIds[]", parent: name, max: 19)
                try validate($0, name: "instanceIds[]", parent: name, min: 1)
                try validate($0, name: "instanceIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceIds = "InstanceIds"
        }
    }

    public struct FailedScheduledUpdateGroupActionRequest: AWSShape {

        /// The error code.
        public let errorCode: String?
        /// The error message accompanying the error code.
        public let errorMessage: String?
        /// The name of the scheduled action.
        public let scheduledActionName: String

        public init(errorCode: String? = nil, errorMessage: String? = nil, scheduledActionName: String) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.scheduledActionName = scheduledActionName
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "ErrorCode"
            case errorMessage = "ErrorMessage"
            case scheduledActionName = "ScheduledActionName"
        }
    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", encoding: .list(member:"member"))
        ]

        /// The name of the filter. The valid values are: "auto-scaling-group", "key", "value", and "propagate-at-launch".
        public let name: String?
        /// The value of the filter.
        public let values: [String]?

        public init(name: String? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.values?.forEach {
                try validate($0, name: "values[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    public struct Instance: AWSShape {

        /// The Availability Zone in which the instance is running.
        public let availabilityZone: String
        /// The last reported health status of the instance. "Healthy" means that the instance is healthy and should remain in service. "Unhealthy" means that the instance is unhealthy and that Amazon EC2 Auto Scaling should terminate and replace it.
        public let healthStatus: String
        /// The ID of the instance.
        public let instanceId: String
        /// The instance type of the EC2 instance.
        public let instanceType: String?
        /// The launch configuration associated with the instance.
        public let launchConfigurationName: String?
        /// The launch template for the instance.
        public let launchTemplate: LaunchTemplateSpecification?
        /// A description of the current lifecycle state. The Quarantined state is not used.
        public let lifecycleState: LifecycleState
        /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
        public let protectedFromScaleIn: Bool
        /// The number of capacity units contributed by the instance based on its instance type. Valid Range: Minimum value of 1. Maximum value of 999.
        public let weightedCapacity: String?

        public init(availabilityZone: String, healthStatus: String, instanceId: String, instanceType: String? = nil, launchConfigurationName: String? = nil, launchTemplate: LaunchTemplateSpecification? = nil, lifecycleState: LifecycleState, protectedFromScaleIn: Bool, weightedCapacity: String? = nil) {
            self.availabilityZone = availabilityZone
            self.healthStatus = healthStatus
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.lifecycleState = lifecycleState
            self.protectedFromScaleIn = protectedFromScaleIn
            self.weightedCapacity = weightedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case healthStatus = "HealthStatus"
            case instanceId = "InstanceId"
            case instanceType = "InstanceType"
            case launchConfigurationName = "LaunchConfigurationName"
            case launchTemplate = "LaunchTemplate"
            case lifecycleState = "LifecycleState"
            case protectedFromScaleIn = "ProtectedFromScaleIn"
            case weightedCapacity = "WeightedCapacity"
        }
    }

    public struct InstanceMonitoring: AWSShape {

        /// If true, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct InstancesDistribution: AWSShape {

        /// Indicates how to allocate instance types to fulfill On-Demand capacity. The only valid value is prioritized, which is also the default value. This strategy uses the order of instance type overrides for the LaunchTemplate to define the launch priority of each instance type. The first instance type in the array is prioritized higher than the last. If all your On-Demand capacity cannot be fulfilled using your highest priority instance, then the Auto Scaling groups launches the remaining capacity using the second priority instance type, and so on.
        public let onDemandAllocationStrategy: String?
        /// The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances. This base portion is provisioned first as your group scales. Default if not set is 0. If you leave it set to 0, On-Demand Instances are launched as a percentage of the Auto Scaling group's desired capacity, per the OnDemandPercentageAboveBaseCapacity setting.  An update to this setting means a gradual replacement of instances to maintain the specified number of On-Demand Instances for your base capacity. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones. 
        public let onDemandBaseCapacity: Int?
        /// Controls the percentages of On-Demand Instances and Spot Instances for your additional capacity beyond OnDemandBaseCapacity. Default if not set is 100. If you leave it set to 100, the percentages are 100% for On-Demand Instances and 0% for Spot Instances.  An update to this setting means a gradual replacement of instances to maintain the percentage of On-Demand Instances for your additional capacity above the base capacity. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones.  Valid Range: Minimum value of 0. Maximum value of 100.
        public let onDemandPercentageAboveBaseCapacity: Int?
        /// Indicates how to allocate instances across Spot Instance pools. If the allocation strategy is lowest-price, the Auto Scaling group launches instances using the Spot pools with the lowest price, and evenly allocates your instances across the number of Spot pools that you specify. If the allocation strategy is capacity-optimized, the Auto Scaling group launches instances using Spot pools that are optimally chosen based on the available Spot capacity. The default Spot allocation strategy for calls that you make through the API, the AWS CLI, or the AWS SDKs is lowest-price. The default Spot allocation strategy for the AWS Management Console is capacity-optimized. Valid values: lowest-price | capacity-optimized 
        public let spotAllocationStrategy: String?
        /// The number of Spot Instance pools across which to allocate your Spot Instances. The Spot pools are determined from the different instance types in the Overrides array of LaunchTemplate. Default if not set is 2. Used only when the Spot allocation strategy is lowest-price. Valid Range: Minimum value of 1. Maximum value of 20.
        public let spotInstancePools: Int?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. If you leave the value of this parameter blank (which is the default), the maximum Spot price is set at the On-Demand price. To remove a value that you previously set, include the parameter but leave the value blank.
        public let spotMaxPrice: String?

        public init(onDemandAllocationStrategy: String? = nil, onDemandBaseCapacity: Int? = nil, onDemandPercentageAboveBaseCapacity: Int? = nil, spotAllocationStrategy: String? = nil, spotInstancePools: Int? = nil, spotMaxPrice: String? = nil) {
            self.onDemandAllocationStrategy = onDemandAllocationStrategy
            self.onDemandBaseCapacity = onDemandBaseCapacity
            self.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity
            self.spotAllocationStrategy = spotAllocationStrategy
            self.spotInstancePools = spotInstancePools
            self.spotMaxPrice = spotMaxPrice
        }

        public func validate(name: String) throws {
            try validate(self.onDemandAllocationStrategy, name:"onDemandAllocationStrategy", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.spotAllocationStrategy, name:"spotAllocationStrategy", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.spotMaxPrice, name:"spotMaxPrice", parent: name, max: 255)
            try validate(self.spotMaxPrice, name:"spotMaxPrice", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case onDemandAllocationStrategy = "OnDemandAllocationStrategy"
            case onDemandBaseCapacity = "OnDemandBaseCapacity"
            case onDemandPercentageAboveBaseCapacity = "OnDemandPercentageAboveBaseCapacity"
            case spotAllocationStrategy = "SpotAllocationStrategy"
            case spotInstancePools = "SpotInstancePools"
            case spotMaxPrice = "SpotMaxPrice"
        }
    }

    public struct LaunchConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", encoding: .list(member:"member")), 
            AWSShapeMember(label: "ClassicLinkVPCSecurityGroups", encoding: .list(member:"member")), 
            AWSShapeMember(label: "SecurityGroups", encoding: .list(member:"member"))
        ]

        /// For Auto Scaling groups that are running in a VPC, specifies whether to assign a public IP address to the group's instances. For more information, see Launching Auto Scaling Instances in a VPC in the Amazon EC2 Auto Scaling User Guide.
        public let associatePublicIpAddress: Bool?
        /// A block device mapping, which specifies the block devices for the instance. For more information, see Block Device Mapping in the Amazon EC2 User Guide for Linux Instances.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more information, see ClassicLink in the Amazon EC2 User Guide for Linux Instances and Linking EC2-Classic Instances to a VPC in the Amazon EC2 Auto Scaling User Guide.
        public let classicLinkVPCId: String?
        /// The IDs of one or more security groups for the VPC specified in ClassicLinkVPCId. For more information, see ClassicLink in the Amazon EC2 User Guide for Linux Instances and Linking EC2-Classic Instances to a VPC in the Amazon EC2 Auto Scaling User Guide.
        public let classicLinkVPCSecurityGroups: [String]?
        /// The creation date and time for the launch configuration.
        public let createdTime: TimeStamp
        /// Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false). For more information, see Amazon EBS-Optimized Instances in the Amazon EC2 User Guide for Linux Instances.
        public let ebsOptimized: Bool?
        /// The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. For more information, see IAM Role for Applications That Run on Amazon EC2 Instances in the Amazon EC2 Auto Scaling User Guide.
        public let iamInstanceProfile: String?
        /// The ID of the Amazon Machine Image (AMI) to use to launch your EC2 instances. For more information, see Finding an AMI in the Amazon EC2 User Guide for Linux Instances.
        public let imageId: String
        /// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring. For more information, see Configure Monitoring for Auto Scaling Instances in the Amazon EC2 Auto Scaling User Guide.
        public let instanceMonitoring: InstanceMonitoring?
        /// The instance type for the instances. For information about available instance types, see Available Instance Types in the Amazon EC2 User Guide for Linux Instances. 
        public let instanceType: String
        /// The ID of the kernel associated with the AMI.
        public let kernelId: String?
        /// The name of the key pair. For more information, see Amazon EC2 Key Pairs in the Amazon EC2 User Guide for Linux Instances.
        public let keyName: String?
        /// The Amazon Resource Name (ARN) of the launch configuration.
        public let launchConfigurationARN: String?
        /// The name of the launch configuration.
        public let launchConfigurationName: String
        /// The tenancy of the instance, either default or dedicated. An instance with dedicated tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC. For more information, see Instance Placement Tenancy in the Amazon EC2 Auto Scaling User Guide.
        public let placementTenancy: String?
        /// The ID of the RAM disk associated with the AMI.
        public let ramdiskId: String?
        /// A list that contains the security groups to assign to the instances in the Auto Scaling group. For more information, see Security Groups for Your VPC in the Amazon Virtual Private Cloud User Guide.
        public let securityGroups: [String]?
        /// The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see Launching Spot Instances in Your Auto Scaling Group in the Amazon EC2 Auto Scaling User Guide.
        public let spotPrice: String?
        /// The Base64-encoded user data to make available to the launched EC2 instances. For more information, see Instance Metadata and User Data in the Amazon EC2 User Guide for Linux Instances.
        public let userData: String?

        public init(associatePublicIpAddress: Bool? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, classicLinkVPCId: String? = nil, classicLinkVPCSecurityGroups: [String]? = nil, createdTime: TimeStamp, ebsOptimized: Bool? = nil, iamInstanceProfile: String? = nil, imageId: String, instanceMonitoring: InstanceMonitoring? = nil, instanceType: String, kernelId: String? = nil, keyName: String? = nil, launchConfigurationARN: String? = nil, launchConfigurationName: String, placementTenancy: String? = nil, ramdiskId: String? = nil, securityGroups: [String]? = nil, spotPrice: String? = nil, userData: String? = nil) {
            self.associatePublicIpAddress = associatePublicIpAddress
            self.blockDeviceMappings = blockDeviceMappings
            self.classicLinkVPCId = classicLinkVPCId
            self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
            self.createdTime = createdTime
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceMonitoring = instanceMonitoring
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.launchConfigurationARN = launchConfigurationARN
            self.launchConfigurationName = launchConfigurationName
            self.placementTenancy = placementTenancy
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.spotPrice = spotPrice
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case blockDeviceMappings = "BlockDeviceMappings"
            case classicLinkVPCId = "ClassicLinkVPCId"
            case classicLinkVPCSecurityGroups = "ClassicLinkVPCSecurityGroups"
            case createdTime = "CreatedTime"
            case ebsOptimized = "EbsOptimized"
            case iamInstanceProfile = "IamInstanceProfile"
            case imageId = "ImageId"
            case instanceMonitoring = "InstanceMonitoring"
            case instanceType = "InstanceType"
            case kernelId = "KernelId"
            case keyName = "KeyName"
            case launchConfigurationARN = "LaunchConfigurationARN"
            case launchConfigurationName = "LaunchConfigurationName"
            case placementTenancy = "PlacementTenancy"
            case ramdiskId = "RamdiskId"
            case securityGroups = "SecurityGroups"
            case spotPrice = "SpotPrice"
            case userData = "UserData"
        }
    }

    public struct LaunchConfigurationNameType: AWSShape {

        /// The name of the launch configuration.
        public let launchConfigurationName: String

        public init(launchConfigurationName: String) {
            self.launchConfigurationName = launchConfigurationName
        }

        public func validate(name: String) throws {
            try validate(self.launchConfigurationName, name:"launchConfigurationName", parent: name, max: 1600)
            try validate(self.launchConfigurationName, name:"launchConfigurationName", parent: name, min: 1)
            try validate(self.launchConfigurationName, name:"launchConfigurationName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case launchConfigurationName = "LaunchConfigurationName"
        }
    }

    public struct LaunchConfigurationNamesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchConfigurationNames", encoding: .list(member:"member"))
        ]

        /// The launch configuration names. If you omit this parameter, all launch configurations are described.
        public let launchConfigurationNames: [String]?
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(launchConfigurationNames: [String]? = nil, maxRecords: Int? = nil, nextToken: String? = nil) {
            self.launchConfigurationNames = launchConfigurationNames
            self.maxRecords = maxRecords
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.launchConfigurationNames?.forEach {
                try validate($0, name: "launchConfigurationNames[]", parent: name, max: 1600)
                try validate($0, name: "launchConfigurationNames[]", parent: name, min: 1)
                try validate($0, name: "launchConfigurationNames[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case launchConfigurationNames = "LaunchConfigurationNames"
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
        }
    }

    public struct LaunchConfigurationsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchConfigurations", encoding: .list(member:"member"))
        ]

        /// The launch configurations.
        public let launchConfigurations: [LaunchConfiguration]
        /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(launchConfigurations: [LaunchConfiguration], nextToken: String? = nil) {
            self.launchConfigurations = launchConfigurations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchConfigurations = "LaunchConfigurations"
            case nextToken = "NextToken"
        }
    }

    public struct LaunchTemplate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Overrides", encoding: .list(member:"member"))
        ]

        /// The launch template to use. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateSpecification: LaunchTemplateSpecification?
        /// An optional setting. Any parameters that you specify override the same parameters in the launch template. Currently, the only supported override is instance type. You can specify between 1 and 20 instance types.
        public let overrides: [LaunchTemplateOverrides]?

        public init(launchTemplateSpecification: LaunchTemplateSpecification? = nil, overrides: [LaunchTemplateOverrides]? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        public func validate(name: String) throws {
            try self.launchTemplateSpecification?.validate(name: "\(name).launchTemplateSpecification")
            try self.overrides?.forEach {
                try $0.validate(name: "\(name).overrides[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "LaunchTemplateSpecification"
            case overrides = "Overrides"
        }
    }

    public struct LaunchTemplateOverrides: AWSShape {

        /// The instance type. For information about available instance types, see Available Instance Types in the Amazon Elastic Compute Cloud User Guide. 
        public let instanceType: String?
        /// The number of capacity units, which gives the instance type a proportional weight to other instance types. For example, larger instance types are generally weighted more than smaller instance types. These are the same units that you chose to set the desired capacity in terms of instances, or a performance attribute such as vCPUs, memory, or I/O. Valid Range: Minimum value of 1. Maximum value of 999.
        public let weightedCapacity: String?

        public init(instanceType: String? = nil, weightedCapacity: String? = nil) {
            self.instanceType = instanceType
            self.weightedCapacity = weightedCapacity
        }

        public func validate(name: String) throws {
            try validate(self.instanceType, name:"instanceType", parent: name, max: 255)
            try validate(self.instanceType, name:"instanceType", parent: name, min: 1)
            try validate(self.instanceType, name:"instanceType", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.weightedCapacity, name:"weightedCapacity", parent: name, max: 32)
            try validate(self.weightedCapacity, name:"weightedCapacity", parent: name, min: 1)
            try validate(self.weightedCapacity, name:"weightedCapacity", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case weightedCapacity = "WeightedCapacity"
        }
    }

    public struct LaunchTemplateSpecification: AWSShape {

        /// The ID of the launch template. You must specify either a template ID or a template name.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either a template name or a template ID.
        public let launchTemplateName: String?
        /// The version number, $Latest, or $Default. If the value is $Latest, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is $Default, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is $Default.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        public func validate(name: String) throws {
            try validate(self.launchTemplateId, name:"launchTemplateId", parent: name, max: 255)
            try validate(self.launchTemplateId, name:"launchTemplateId", parent: name, min: 1)
            try validate(self.launchTemplateId, name:"launchTemplateId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, max: 128)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, min: 3)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.-/_]+")
            try validate(self.version, name:"version", parent: name, max: 255)
            try validate(self.version, name:"version", parent: name, min: 1)
            try validate(self.version, name:"version", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case version = "Version"
        }
    }

    public struct LifecycleHook: AWSShape {

        /// The name of the Auto Scaling group for the lifecycle hook.
        public let autoScalingGroupName: String?
        /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The possible values are CONTINUE and ABANDON.
        public let defaultResult: String?
        /// The maximum time, in seconds, that an instance can remain in a Pending:Wait or Terminating:Wait state. The maximum is 172800 seconds (48 hours) or 100 times HeartbeatTimeout, whichever is smaller.
        public let globalTimeout: Int?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the DefaultResult parameter.
        public let heartbeatTimeout: Int?
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String?
        /// The state of the EC2 instance to which to attach the lifecycle hook. The following are possible values:   autoscaling:EC2_INSTANCE_LAUNCHING   autoscaling:EC2_INSTANCE_TERMINATING  
        public let lifecycleTransition: String?
        /// Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.
        public let notificationMetadata: String?
        /// The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in the transition state for the lifecycle hook. The notification target can be either an SQS queue or an SNS topic.
        public let notificationTargetARN: String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
        public let roleARN: String?

        public init(autoScalingGroupName: String? = nil, defaultResult: String? = nil, globalTimeout: Int? = nil, heartbeatTimeout: Int? = nil, lifecycleHookName: String? = nil, lifecycleTransition: String? = nil, notificationMetadata: String? = nil, notificationTargetARN: String? = nil, roleARN: String? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.defaultResult = defaultResult
            self.globalTimeout = globalTimeout
            self.heartbeatTimeout = heartbeatTimeout
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleTransition = lifecycleTransition
            self.notificationMetadata = notificationMetadata
            self.notificationTargetARN = notificationTargetARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case defaultResult = "DefaultResult"
            case globalTimeout = "GlobalTimeout"
            case heartbeatTimeout = "HeartbeatTimeout"
            case lifecycleHookName = "LifecycleHookName"
            case lifecycleTransition = "LifecycleTransition"
            case notificationMetadata = "NotificationMetadata"
            case notificationTargetARN = "NotificationTargetARN"
            case roleARN = "RoleARN"
        }
    }

    public struct LifecycleHookSpecification: AWSShape {

        /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The valid values are CONTINUE and ABANDON. The default value is ABANDON.
        public let defaultResult: String?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the DefaultResult parameter. You can prevent the lifecycle hook from timing out by calling RecordLifecycleActionHeartbeat.
        public let heartbeatTimeout: Int?
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String
        /// The state of the EC2 instance to which you want to attach the lifecycle hook. The valid values are:   autoscaling:EC2_INSTANCE_LAUNCHING   autoscaling:EC2_INSTANCE_TERMINATING  
        public let lifecycleTransition: String
        /// Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
        public let notificationMetadata: String?
        /// The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in the transition state for the lifecycle hook. The notification target can be either an SQS queue or an SNS topic.
        public let notificationTargetARN: String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.
        public let roleARN: String?

        public init(defaultResult: String? = nil, heartbeatTimeout: Int? = nil, lifecycleHookName: String, lifecycleTransition: String, notificationMetadata: String? = nil, notificationTargetARN: String? = nil, roleARN: String? = nil) {
            self.defaultResult = defaultResult
            self.heartbeatTimeout = heartbeatTimeout
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleTransition = lifecycleTransition
            self.notificationMetadata = notificationMetadata
            self.notificationTargetARN = notificationTargetARN
            self.roleARN = roleARN
        }

        public func validate(name: String) throws {
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, max: 255)
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, min: 1)
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, pattern: "[A-Za-z0-9\\-_\\/]+")
            try validate(self.notificationMetadata, name:"notificationMetadata", parent: name, max: 1023)
            try validate(self.notificationMetadata, name:"notificationMetadata", parent: name, min: 1)
            try validate(self.notificationMetadata, name:"notificationMetadata", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.notificationTargetARN, name:"notificationTargetARN", parent: name, max: 1600)
            try validate(self.notificationTargetARN, name:"notificationTargetARN", parent: name, min: 0)
            try validate(self.notificationTargetARN, name:"notificationTargetARN", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.roleARN, name:"roleARN", parent: name, max: 1600)
            try validate(self.roleARN, name:"roleARN", parent: name, min: 1)
            try validate(self.roleARN, name:"roleARN", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case defaultResult = "DefaultResult"
            case heartbeatTimeout = "HeartbeatTimeout"
            case lifecycleHookName = "LifecycleHookName"
            case lifecycleTransition = "LifecycleTransition"
            case notificationMetadata = "NotificationMetadata"
            case notificationTargetARN = "NotificationTargetARN"
            case roleARN = "RoleARN"
        }
    }

    public struct LoadBalancerState: AWSShape {

        /// The name of the load balancer.
        public let loadBalancerName: String?
        /// One of the following load balancer states:    Adding - The instances in the group are being registered with the load balancer.    Added - All instances in the group are registered with the load balancer.    InService - At least one instance in the group passed an ELB health check.    Removing - The instances in the group are being deregistered from the load balancer. If connection draining is enabled, Elastic Load Balancing waits for in-flight requests to complete before deregistering the instances.    Removed - All instances in the group are deregistered from the load balancer.  
        public let state: String?

        public init(loadBalancerName: String? = nil, state: String? = nil) {
            self.loadBalancerName = loadBalancerName
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerName = "LoadBalancerName"
            case state = "State"
        }
    }

    public struct LoadBalancerTargetGroupState: AWSShape {

        /// The Amazon Resource Name (ARN) of the target group.
        public let loadBalancerTargetGroupARN: String?
        /// The state of the target group.    Adding - The Auto Scaling instances are being registered with the target group.    Added - All Auto Scaling instances are registered with the target group.    InService - At least one Auto Scaling instance passed an ELB health check.    Removing - The Auto Scaling instances are being deregistered from the target group. If connection draining is enabled, Elastic Load Balancing waits for in-flight requests to complete before deregistering the instances.    Removed - All Auto Scaling instances are deregistered from the target group.  
        public let state: String?

        public init(loadBalancerTargetGroupARN: String? = nil, state: String? = nil) {
            self.loadBalancerTargetGroupARN = loadBalancerTargetGroupARN
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerTargetGroupARN = "LoadBalancerTargetGroupARN"
            case state = "State"
        }
    }

    public struct MetricCollectionType: AWSShape {

        /// One of the following metrics:    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances   
        public let metric: String?

        public init(metric: String? = nil) {
            self.metric = metric
        }

        private enum CodingKeys: String, CodingKey {
            case metric = "Metric"
        }
    }

    public struct MetricDimension: AWSShape {

        /// The name of the dimension.
        public let name: String
        /// The value of the dimension.
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct MetricGranularityType: AWSShape {

        /// The granularity. The only valid value is 1Minute.
        public let granularity: String?

        public init(granularity: String? = nil) {
            self.granularity = granularity
        }

        private enum CodingKeys: String, CodingKey {
            case granularity = "Granularity"
        }
    }

    public struct MixedInstancesPolicy: AWSShape {

        /// The instances distribution to use. If you leave this parameter unspecified, the value for each parameter in InstancesDistribution uses a default value.
        public let instancesDistribution: InstancesDistribution?
        /// The launch template and instance types (overrides). This parameter must be specified when creating a mixed instances policy.
        public let launchTemplate: LaunchTemplate?

        public init(instancesDistribution: InstancesDistribution? = nil, launchTemplate: LaunchTemplate? = nil) {
            self.instancesDistribution = instancesDistribution
            self.launchTemplate = launchTemplate
        }

        public func validate(name: String) throws {
            try self.instancesDistribution?.validate(name: "\(name).instancesDistribution")
            try self.launchTemplate?.validate(name: "\(name).launchTemplate")
        }

        private enum CodingKeys: String, CodingKey {
            case instancesDistribution = "InstancesDistribution"
            case launchTemplate = "LaunchTemplate"
        }
    }

    public struct NotificationConfiguration: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// One of the following event notification types:    autoscaling:EC2_INSTANCE_LAUNCH     autoscaling:EC2_INSTANCE_LAUNCH_ERROR     autoscaling:EC2_INSTANCE_TERMINATE     autoscaling:EC2_INSTANCE_TERMINATE_ERROR     autoscaling:TEST_NOTIFICATION   
        public let notificationType: String?
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
        public let topicARN: String?

        public init(autoScalingGroupName: String? = nil, notificationType: String? = nil, topicARN: String? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.notificationType = notificationType
            self.topicARN = topicARN
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case notificationType = "NotificationType"
            case topicARN = "TopicARN"
        }
    }

    public struct PoliciesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingPolicies", encoding: .list(member:"member"))
        ]

        /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// The scaling policies.
        public let scalingPolicies: [ScalingPolicy]?

        public init(nextToken: String? = nil, scalingPolicies: [ScalingPolicy]? = nil) {
            self.nextToken = nextToken
            self.scalingPolicies = scalingPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPolicies = "ScalingPolicies"
        }
    }

    public struct PolicyARNType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alarms", encoding: .list(member:"member"))
        ]

        /// The CloudWatch alarms created for the target tracking scaling policy.
        public let alarms: [Alarm]?
        /// The Amazon Resource Name (ARN) of the policy.
        public let policyARN: String?

        public init(alarms: [Alarm]? = nil, policyARN: String? = nil) {
            self.alarms = alarms
            self.policyARN = policyARN
        }

        private enum CodingKeys: String, CodingKey {
            case alarms = "Alarms"
            case policyARN = "PolicyARN"
        }
    }

    public struct PredefinedMetricSpecification: AWSShape {

        /// The metric type. The following predefined metrics are available:    ASGAverageCPUUtilization - Average CPU utilization of the Auto Scaling group.    ASGAverageNetworkIn - Average number of bytes received on all network interfaces by the Auto Scaling group.    ASGAverageNetworkOut - Average number of bytes sent out on all network interfaces by the Auto Scaling group.    ALBRequestCountPerTarget - Number of requests completed per target in an Application Load Balancer target group.  
        public let predefinedMetricType: MetricType
        /// Identifies the resource associated with the metric type. You can't specify a resource label unless the metric type is ALBRequestCountPerTarget and there is a target group attached to the Auto Scaling group. The format is app/load-balancer-name/load-balancer-id/targetgroup/target-group-name/target-group-id , where     app/load-balancer-name/load-balancer-id  is the final portion of the load balancer ARN, and    targetgroup/target-group-name/target-group-id  is the final portion of the target group ARN.  
        public let resourceLabel: String?

        public init(predefinedMetricType: MetricType, resourceLabel: String? = nil) {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }

        public func validate(name: String) throws {
            try validate(self.resourceLabel, name:"resourceLabel", parent: name, max: 1023)
            try validate(self.resourceLabel, name:"resourceLabel", parent: name, min: 1)
            try validate(self.resourceLabel, name:"resourceLabel", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case predefinedMetricType = "PredefinedMetricType"
            case resourceLabel = "ResourceLabel"
        }
    }

    public struct ProcessType: AWSShape {

        /// One of the following processes:    Launch     Terminate     AddToLoadBalancer     AlarmNotification     AZRebalance     HealthCheck     ReplaceUnhealthy     ScheduledActions   
        public let processName: String

        public init(processName: String) {
            self.processName = processName
        }

        private enum CodingKeys: String, CodingKey {
            case processName = "ProcessName"
        }
    }

    public struct ProcessesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Processes", encoding: .list(member:"member"))
        ]

        /// The names of the process types.
        public let processes: [ProcessType]?

        public init(processes: [ProcessType]? = nil) {
            self.processes = processes
        }

        private enum CodingKeys: String, CodingKey {
            case processes = "Processes"
        }
    }

    public struct PutLifecycleHookAnswer: AWSShape {


        public init() {
        }

    }

    public struct PutLifecycleHookType: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either CONTINUE or ABANDON. The default value is ABANDON.
        public let defaultResult: String?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default value is 3600 seconds (1 hour). If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the DefaultResult parameter. You can prevent the lifecycle hook from timing out by calling RecordLifecycleActionHeartbeat.
        public let heartbeatTimeout: Int?
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String
        /// The instance state to which you want to attach the lifecycle hook. The valid values are:   autoscaling:EC2_INSTANCE_LAUNCHING   autoscaling:EC2_INSTANCE_TERMINATING   Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.
        public let lifecycleTransition: String?
        /// Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
        public let notificationMetadata: String?
        /// The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic. If you specify an empty string, this overrides the current ARN. This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic. When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: "Event": "autoscaling:TEST_NOTIFICATION".
        public let notificationTargetARN: String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue. Conditional: This parameter is required for new lifecycle hooks, but optional when updating existing hooks.
        public let roleARN: String?

        public init(autoScalingGroupName: String, defaultResult: String? = nil, heartbeatTimeout: Int? = nil, lifecycleHookName: String, lifecycleTransition: String? = nil, notificationMetadata: String? = nil, notificationTargetARN: String? = nil, roleARN: String? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.defaultResult = defaultResult
            self.heartbeatTimeout = heartbeatTimeout
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleTransition = lifecycleTransition
            self.notificationMetadata = notificationMetadata
            self.notificationTargetARN = notificationTargetARN
            self.roleARN = roleARN
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, max: 255)
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, min: 1)
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, pattern: "[A-Za-z0-9\\-_\\/]+")
            try validate(self.notificationMetadata, name:"notificationMetadata", parent: name, max: 1023)
            try validate(self.notificationMetadata, name:"notificationMetadata", parent: name, min: 1)
            try validate(self.notificationMetadata, name:"notificationMetadata", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.notificationTargetARN, name:"notificationTargetARN", parent: name, max: 1600)
            try validate(self.notificationTargetARN, name:"notificationTargetARN", parent: name, min: 0)
            try validate(self.notificationTargetARN, name:"notificationTargetARN", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.roleARN, name:"roleARN", parent: name, max: 1600)
            try validate(self.roleARN, name:"roleARN", parent: name, min: 1)
            try validate(self.roleARN, name:"roleARN", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case defaultResult = "DefaultResult"
            case heartbeatTimeout = "HeartbeatTimeout"
            case lifecycleHookName = "LifecycleHookName"
            case lifecycleTransition = "LifecycleTransition"
            case notificationMetadata = "NotificationMetadata"
            case notificationTargetARN = "NotificationTargetARN"
            case roleARN = "RoleARN"
        }
    }

    public struct PutNotificationConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationTypes", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The type of event that causes the notification to be sent. For more information about notification types supported by Amazon EC2 Auto Scaling, see DescribeAutoScalingNotificationTypes.
        public let notificationTypes: [String]
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic.
        public let topicARN: String

        public init(autoScalingGroupName: String, notificationTypes: [String], topicARN: String) {
            self.autoScalingGroupName = autoScalingGroupName
            self.notificationTypes = notificationTypes
            self.topicARN = topicARN
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.notificationTypes.forEach {
                try validate($0, name: "notificationTypes[]", parent: name, max: 255)
                try validate($0, name: "notificationTypes[]", parent: name, min: 1)
                try validate($0, name: "notificationTypes[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.topicARN, name:"topicARN", parent: name, max: 1600)
            try validate(self.topicARN, name:"topicARN", parent: name, min: 1)
            try validate(self.topicARN, name:"topicARN", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case notificationTypes = "NotificationTypes"
            case topicARN = "TopicARN"
        }
    }

    public struct PutScalingPolicyType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StepAdjustments", encoding: .list(member:"member"))
        ]

        /// Specifies whether the ScalingAdjustment parameter is an absolute number or a percentage of the current capacity. The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity. Valid only if the policy type is StepScaling or SimpleScaling. For more information, see Scaling Adjustment Types in the Amazon EC2 Auto Scaling User Guide.
        public let adjustmentType: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start. If this parameter is not specified, the default cooldown period for the group applies. Valid only if the policy type is SimpleScaling. For more information, see Scaling Cooldowns in the Amazon EC2 Auto Scaling User Guide.
        public let cooldown: Int?
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group. Valid only if the policy type is StepScaling or TargetTrackingScaling.
        public let estimatedInstanceWarmup: Int?
        /// The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average. If the aggregation type is null, the value is treated as Average. Valid only if the policy type is StepScaling.
        public let metricAggregationType: String?
        /// The minimum number of instances to scale. If the value of AdjustmentType is PercentChangeInCapacity, the scaling policy changes the DesiredCapacity of the Auto Scaling group by at least this many instances. Otherwise, the error is ValidationError. This property replaces the MinAdjustmentStep property. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a MinAdjustmentMagnitude of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a MinAdjustmentMagnitude of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances. Valid only if the policy type is SimpleScaling or StepScaling.
        public let minAdjustmentMagnitude: Int?
        /// Available for backward compatibility. Use MinAdjustmentMagnitude instead.
        public let minAdjustmentStep: Int?
        /// The name of the policy.
        public let policyName: String
        /// The policy type. The valid values are SimpleScaling, StepScaling, and TargetTrackingScaling. If the policy type is null, the value is treated as SimpleScaling.
        public let policyType: String?
        /// The amount by which a simple scaling policy scales the Auto Scaling group in response to an alarm breach. The adjustment is based on the value that you specified in the AdjustmentType parameter (either an absolute number or a percentage). A positive value adds to the current capacity and a negative value subtracts from the current capacity. For exact capacity, you must specify a positive value. Conditional: If you specify SimpleScaling for the policy type, you must specify this parameter. (Not used with any other policy type.) 
        public let scalingAdjustment: Int?
        /// A set of adjustments that enable you to scale based on the size of the alarm breach. Conditional: If you specify StepScaling for the policy type, you must specify this parameter. (Not used with any other policy type.) 
        public let stepAdjustments: [StepAdjustment]?
        /// A target tracking scaling policy. Includes support for predefined or customized metrics. For more information, see TargetTrackingConfiguration in the Amazon EC2 Auto Scaling API Reference. Conditional: If you specify TargetTrackingScaling for the policy type, you must specify this parameter. (Not used with any other policy type.) 
        public let targetTrackingConfiguration: TargetTrackingConfiguration?

        public init(adjustmentType: String? = nil, autoScalingGroupName: String, cooldown: Int? = nil, estimatedInstanceWarmup: Int? = nil, metricAggregationType: String? = nil, minAdjustmentMagnitude: Int? = nil, minAdjustmentStep: Int? = nil, policyName: String, policyType: String? = nil, scalingAdjustment: Int? = nil, stepAdjustments: [StepAdjustment]? = nil, targetTrackingConfiguration: TargetTrackingConfiguration? = nil) {
            self.adjustmentType = adjustmentType
            self.autoScalingGroupName = autoScalingGroupName
            self.cooldown = cooldown
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.metricAggregationType = metricAggregationType
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.minAdjustmentStep = minAdjustmentStep
            self.policyName = policyName
            self.policyType = policyType
            self.scalingAdjustment = scalingAdjustment
            self.stepAdjustments = stepAdjustments
            self.targetTrackingConfiguration = targetTrackingConfiguration
        }

        public func validate(name: String) throws {
            try validate(self.adjustmentType, name:"adjustmentType", parent: name, max: 255)
            try validate(self.adjustmentType, name:"adjustmentType", parent: name, min: 1)
            try validate(self.adjustmentType, name:"adjustmentType", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.metricAggregationType, name:"metricAggregationType", parent: name, max: 32)
            try validate(self.metricAggregationType, name:"metricAggregationType", parent: name, min: 1)
            try validate(self.metricAggregationType, name:"metricAggregationType", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.policyName, name:"policyName", parent: name, max: 255)
            try validate(self.policyName, name:"policyName", parent: name, min: 1)
            try validate(self.policyName, name:"policyName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.policyType, name:"policyType", parent: name, max: 64)
            try validate(self.policyType, name:"policyType", parent: name, min: 1)
            try validate(self.policyType, name:"policyType", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.targetTrackingConfiguration?.validate(name: "\(name).targetTrackingConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case adjustmentType = "AdjustmentType"
            case autoScalingGroupName = "AutoScalingGroupName"
            case cooldown = "Cooldown"
            case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
            case metricAggregationType = "MetricAggregationType"
            case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
            case minAdjustmentStep = "MinAdjustmentStep"
            case policyName = "PolicyName"
            case policyType = "PolicyType"
            case scalingAdjustment = "ScalingAdjustment"
            case stepAdjustments = "StepAdjustments"
            case targetTrackingConfiguration = "TargetTrackingConfiguration"
        }
    }

    public struct PutScheduledUpdateGroupActionType: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The number of EC2 instances that should be running in the Auto Scaling group.
        public let desiredCapacity: Int?
        /// The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
        public let endTime: TimeStamp?
        /// The maximum number of instances in the Auto Scaling group.
        public let maxSize: Int?
        /// The minimum number of instances in the Auto Scaling group.
        public let minSize: Int?
        /// The recurring schedule for this action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, "30 0 1 1,6,12 *"). For more information about this format, see Crontab. When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action starts and stops.
        public let recurrence: String?
        /// The name of this scaling action.
        public let scheduledActionName: String
        /// The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, "2019-06-01T00:00:00Z"). If you specify Recurrence and StartTime, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence. If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.
        public let startTime: TimeStamp?
        /// This parameter is no longer used.
        public let time: TimeStamp?

        public init(autoScalingGroupName: String, desiredCapacity: Int? = nil, endTime: TimeStamp? = nil, maxSize: Int? = nil, minSize: Int? = nil, recurrence: String? = nil, scheduledActionName: String, startTime: TimeStamp? = nil, time: TimeStamp? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.desiredCapacity = desiredCapacity
            self.endTime = endTime
            self.maxSize = maxSize
            self.minSize = minSize
            self.recurrence = recurrence
            self.scheduledActionName = scheduledActionName
            self.startTime = startTime
            self.time = time
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.recurrence, name:"recurrence", parent: name, max: 255)
            try validate(self.recurrence, name:"recurrence", parent: name, min: 1)
            try validate(self.recurrence, name:"recurrence", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, max: 255)
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, min: 1)
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case desiredCapacity = "DesiredCapacity"
            case endTime = "EndTime"
            case maxSize = "MaxSize"
            case minSize = "MinSize"
            case recurrence = "Recurrence"
            case scheduledActionName = "ScheduledActionName"
            case startTime = "StartTime"
            case time = "Time"
        }
    }

    public struct RecordLifecycleActionHeartbeatAnswer: AWSShape {


        public init() {
        }

    }

    public struct RecordLifecycleActionHeartbeatType: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The ID of the instance.
        public let instanceId: String?
        /// A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
        public let lifecycleActionToken: String?
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String

        public init(autoScalingGroupName: String, instanceId: String? = nil, lifecycleActionToken: String? = nil, lifecycleHookName: String) {
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceId = instanceId
            self.lifecycleActionToken = lifecycleActionToken
            self.lifecycleHookName = lifecycleHookName
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.instanceId, name:"instanceId", parent: name, max: 19)
            try validate(self.instanceId, name:"instanceId", parent: name, min: 1)
            try validate(self.instanceId, name:"instanceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.lifecycleActionToken, name:"lifecycleActionToken", parent: name, max: 36)
            try validate(self.lifecycleActionToken, name:"lifecycleActionToken", parent: name, min: 36)
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, max: 255)
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, min: 1)
            try validate(self.lifecycleHookName, name:"lifecycleHookName", parent: name, pattern: "[A-Za-z0-9\\-_\\/]+")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceId = "InstanceId"
            case lifecycleActionToken = "LifecycleActionToken"
            case lifecycleHookName = "LifecycleHookName"
        }
    }

    public struct ScalingPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alarms", encoding: .list(member:"member")), 
            AWSShapeMember(label: "StepAdjustments", encoding: .list(member:"member"))
        ]

        /// The adjustment type, which specifies how ScalingAdjustment is interpreted. The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
        public let adjustmentType: String?
        /// The CloudWatch alarms related to the policy.
        public let alarms: [Alarm]?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start.
        public let cooldown: Int?
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics.
        public let estimatedInstanceWarmup: Int?
        /// The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average.
        public let metricAggregationType: String?
        /// The minimum number of instances to scale. If the value of AdjustmentType is PercentChangeInCapacity, the scaling policy changes the DesiredCapacity of the Auto Scaling group by at least this many instances. Otherwise, the error is ValidationError.
        public let minAdjustmentMagnitude: Int?
        /// Available for backward compatibility. Use MinAdjustmentMagnitude instead.
        public let minAdjustmentStep: Int?
        /// The Amazon Resource Name (ARN) of the policy.
        public let policyARN: String?
        /// The name of the scaling policy.
        public let policyName: String?
        /// The policy type. The valid values are SimpleScaling, StepScaling, and TargetTrackingScaling.
        public let policyType: String?
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity.
        public let scalingAdjustment: Int?
        /// A set of adjustments that enable you to scale based on the size of the alarm breach.
        public let stepAdjustments: [StepAdjustment]?
        /// A target tracking scaling policy.
        public let targetTrackingConfiguration: TargetTrackingConfiguration?

        public init(adjustmentType: String? = nil, alarms: [Alarm]? = nil, autoScalingGroupName: String? = nil, cooldown: Int? = nil, estimatedInstanceWarmup: Int? = nil, metricAggregationType: String? = nil, minAdjustmentMagnitude: Int? = nil, minAdjustmentStep: Int? = nil, policyARN: String? = nil, policyName: String? = nil, policyType: String? = nil, scalingAdjustment: Int? = nil, stepAdjustments: [StepAdjustment]? = nil, targetTrackingConfiguration: TargetTrackingConfiguration? = nil) {
            self.adjustmentType = adjustmentType
            self.alarms = alarms
            self.autoScalingGroupName = autoScalingGroupName
            self.cooldown = cooldown
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.metricAggregationType = metricAggregationType
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.minAdjustmentStep = minAdjustmentStep
            self.policyARN = policyARN
            self.policyName = policyName
            self.policyType = policyType
            self.scalingAdjustment = scalingAdjustment
            self.stepAdjustments = stepAdjustments
            self.targetTrackingConfiguration = targetTrackingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case adjustmentType = "AdjustmentType"
            case alarms = "Alarms"
            case autoScalingGroupName = "AutoScalingGroupName"
            case cooldown = "Cooldown"
            case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
            case metricAggregationType = "MetricAggregationType"
            case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
            case minAdjustmentStep = "MinAdjustmentStep"
            case policyARN = "PolicyARN"
            case policyName = "PolicyName"
            case policyType = "PolicyType"
            case scalingAdjustment = "ScalingAdjustment"
            case stepAdjustments = "StepAdjustments"
            case targetTrackingConfiguration = "TargetTrackingConfiguration"
        }
    }

    public struct ScalingProcessQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingProcesses", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more of the following processes. If you omit this parameter, all processes are specified.    Launch     Terminate     HealthCheck     ReplaceUnhealthy     AZRebalance     AlarmNotification     ScheduledActions     AddToLoadBalancer   
        public let scalingProcesses: [String]?

        public init(autoScalingGroupName: String, scalingProcesses: [String]? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.scalingProcesses = scalingProcesses
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.scalingProcesses?.forEach {
                try validate($0, name: "scalingProcesses[]", parent: name, max: 255)
                try validate($0, name: "scalingProcesses[]", parent: name, min: 1)
                try validate($0, name: "scalingProcesses[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case scalingProcesses = "ScalingProcesses"
        }
    }

    public struct ScheduledActionsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledUpdateGroupActions", encoding: .list(member:"member"))
        ]

        /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// The scheduled actions.
        public let scheduledUpdateGroupActions: [ScheduledUpdateGroupAction]?

        public init(nextToken: String? = nil, scheduledUpdateGroupActions: [ScheduledUpdateGroupAction]? = nil) {
            self.nextToken = nextToken
            self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scheduledUpdateGroupActions = "ScheduledUpdateGroupActions"
        }
    }

    public struct ScheduledUpdateGroupAction: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The number of instances you prefer to maintain in the group.
        public let desiredCapacity: Int?
        /// The date and time in UTC for the recurring schedule to end. For example, "2019-06-01T00:00:00Z". 
        public let endTime: TimeStamp?
        /// The maximum number of instances in the Auto Scaling group.
        public let maxSize: Int?
        /// The minimum number of instances in the Auto Scaling group.
        public let minSize: Int?
        /// The recurring schedule for the action, in Unix cron syntax format. When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action starts and stops.
        public let recurrence: String?
        /// The Amazon Resource Name (ARN) of the scheduled action.
        public let scheduledActionARN: String?
        /// The name of the scheduled action.
        public let scheduledActionName: String?
        /// The date and time in UTC for this action to start. For example, "2019-06-01T00:00:00Z". 
        public let startTime: TimeStamp?
        /// This parameter is no longer used.
        public let time: TimeStamp?

        public init(autoScalingGroupName: String? = nil, desiredCapacity: Int? = nil, endTime: TimeStamp? = nil, maxSize: Int? = nil, minSize: Int? = nil, recurrence: String? = nil, scheduledActionARN: String? = nil, scheduledActionName: String? = nil, startTime: TimeStamp? = nil, time: TimeStamp? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.desiredCapacity = desiredCapacity
            self.endTime = endTime
            self.maxSize = maxSize
            self.minSize = minSize
            self.recurrence = recurrence
            self.scheduledActionARN = scheduledActionARN
            self.scheduledActionName = scheduledActionName
            self.startTime = startTime
            self.time = time
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case desiredCapacity = "DesiredCapacity"
            case endTime = "EndTime"
            case maxSize = "MaxSize"
            case minSize = "MinSize"
            case recurrence = "Recurrence"
            case scheduledActionARN = "ScheduledActionARN"
            case scheduledActionName = "ScheduledActionName"
            case startTime = "StartTime"
            case time = "Time"
        }
    }

    public struct ScheduledUpdateGroupActionRequest: AWSShape {

        /// The number of EC2 instances that should be running in the group.
        public let desiredCapacity: Int?
        /// The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling does not perform the action after this time.
        public let endTime: TimeStamp?
        /// The maximum number of instances in the Auto Scaling group.
        public let maxSize: Int?
        /// The minimum number of instances in the Auto Scaling group.
        public let minSize: Int?
        /// The recurring schedule for the action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, "30 0 1 1,6,12 *"). For more information about this format, see Crontab. When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action starts and stops.
        public let recurrence: String?
        /// The name of the scaling action.
        public let scheduledActionName: String
        /// The date and time for the action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, "2019-06-01T00:00:00Z"). If you specify Recurrence and StartTime, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence. If you try to schedule the action in the past, Amazon EC2 Auto Scaling returns an error message.
        public let startTime: TimeStamp?

        public init(desiredCapacity: Int? = nil, endTime: TimeStamp? = nil, maxSize: Int? = nil, minSize: Int? = nil, recurrence: String? = nil, scheduledActionName: String, startTime: TimeStamp? = nil) {
            self.desiredCapacity = desiredCapacity
            self.endTime = endTime
            self.maxSize = maxSize
            self.minSize = minSize
            self.recurrence = recurrence
            self.scheduledActionName = scheduledActionName
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try validate(self.recurrence, name:"recurrence", parent: name, max: 255)
            try validate(self.recurrence, name:"recurrence", parent: name, min: 1)
            try validate(self.recurrence, name:"recurrence", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, max: 255)
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, min: 1)
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case desiredCapacity = "DesiredCapacity"
            case endTime = "EndTime"
            case maxSize = "MaxSize"
            case minSize = "MinSize"
            case recurrence = "Recurrence"
            case scheduledActionName = "ScheduledActionName"
            case startTime = "StartTime"
        }
    }

    public struct SetDesiredCapacityType: AWSShape {

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The number of EC2 instances that should be running in the Auto Scaling group.
        public let desiredCapacity: Int
        /// Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
        public let honorCooldown: Bool?

        public init(autoScalingGroupName: String, desiredCapacity: Int, honorCooldown: Bool? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.desiredCapacity = desiredCapacity
            self.honorCooldown = honorCooldown
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case desiredCapacity = "DesiredCapacity"
            case honorCooldown = "HonorCooldown"
        }
    }

    public struct SetInstanceHealthQuery: AWSShape {

        /// The health status of the instance. Set to Healthy to have the instance remain in service. Set to Unhealthy to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
        public let healthStatus: String
        /// The ID of the instance.
        public let instanceId: String
        /// If the Auto Scaling group of the specified instance has a HealthCheckGracePeriod specified for the group, by default, this call respects the grace period. Set this to False, to have the call not respect the grace period associated with the group. For more information about the health check grace period, see CreateAutoScalingGroup.
        public let shouldRespectGracePeriod: Bool?

        public init(healthStatus: String, instanceId: String, shouldRespectGracePeriod: Bool? = nil) {
            self.healthStatus = healthStatus
            self.instanceId = instanceId
            self.shouldRespectGracePeriod = shouldRespectGracePeriod
        }

        public func validate(name: String) throws {
            try validate(self.healthStatus, name:"healthStatus", parent: name, max: 32)
            try validate(self.healthStatus, name:"healthStatus", parent: name, min: 1)
            try validate(self.healthStatus, name:"healthStatus", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.instanceId, name:"instanceId", parent: name, max: 19)
            try validate(self.instanceId, name:"instanceId", parent: name, min: 1)
            try validate(self.instanceId, name:"instanceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case healthStatus = "HealthStatus"
            case instanceId = "InstanceId"
            case shouldRespectGracePeriod = "ShouldRespectGracePeriod"
        }
    }

    public struct SetInstanceProtectionAnswer: AWSShape {


        public init() {
        }

    }

    public struct SetInstanceProtectionQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more instance IDs.
        public let instanceIds: [String]
        /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
        public let protectedFromScaleIn: Bool

        public init(autoScalingGroupName: String, instanceIds: [String], protectedFromScaleIn: Bool) {
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
            self.protectedFromScaleIn = protectedFromScaleIn
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.instanceIds.forEach {
                try validate($0, name: "instanceIds[]", parent: name, max: 19)
                try validate($0, name: "instanceIds[]", parent: name, min: 1)
                try validate($0, name: "instanceIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceIds = "InstanceIds"
            case protectedFromScaleIn = "ProtectedFromScaleIn"
        }
    }

    public struct StepAdjustment: AWSShape {

        /// The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.
        public let metricIntervalLowerBound: Double?
        /// The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity. The upper bound must be greater than the lower bound.
        public let metricIntervalUpperBound: Double?
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity.
        public let scalingAdjustment: Int

        public init(metricIntervalLowerBound: Double? = nil, metricIntervalUpperBound: Double? = nil, scalingAdjustment: Int) {
            self.metricIntervalLowerBound = metricIntervalLowerBound
            self.metricIntervalUpperBound = metricIntervalUpperBound
            self.scalingAdjustment = scalingAdjustment
        }

        private enum CodingKeys: String, CodingKey {
            case metricIntervalLowerBound = "MetricIntervalLowerBound"
            case metricIntervalUpperBound = "MetricIntervalUpperBound"
            case scalingAdjustment = "ScalingAdjustment"
        }
    }

    public struct SuspendedProcess: AWSShape {

        /// The name of the suspended process.
        public let processName: String?
        /// The reason that the process was suspended.
        public let suspensionReason: String?

        public init(processName: String? = nil, suspensionReason: String? = nil) {
            self.processName = processName
            self.suspensionReason = suspensionReason
        }

        private enum CodingKeys: String, CodingKey {
            case processName = "ProcessName"
            case suspensionReason = "SuspensionReason"
        }
    }

    public struct Tag: AWSShape {

        /// The tag key.
        public let key: String
        /// Determines whether the tag is added to new instances as they are launched in the group.
        public let propagateAtLaunch: Bool?
        /// The name of the group.
        public let resourceId: String?
        /// The type of resource. The only supported value is auto-scaling-group.
        public let resourceType: String?
        /// The tag value.
        public let value: String?

        public init(key: String, propagateAtLaunch: Bool? = nil, resourceId: String? = nil, resourceType: String? = nil, value: String? = nil) {
            self.key = key
            self.propagateAtLaunch = propagateAtLaunch
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.key, name:"key", parent: name, max: 128)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.key, name:"key", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.resourceId, name:"resourceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.resourceType, name:"resourceType", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.value, name:"value", parent: name, max: 256)
            try validate(self.value, name:"value", parent: name, min: 0)
            try validate(self.value, name:"value", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case propagateAtLaunch = "PropagateAtLaunch"
            case resourceId = "ResourceId"
            case resourceType = "ResourceType"
            case value = "Value"
        }
    }

    public struct TagDescription: AWSShape {

        /// The tag key.
        public let key: String?
        /// Determines whether the tag is added to new instances as they are launched in the group.
        public let propagateAtLaunch: Bool?
        /// The name of the group.
        public let resourceId: String?
        /// The type of resource. The only supported value is auto-scaling-group.
        public let resourceType: String?
        /// The tag value.
        public let value: String?

        public init(key: String? = nil, propagateAtLaunch: Bool? = nil, resourceId: String? = nil, resourceType: String? = nil, value: String? = nil) {
            self.key = key
            self.propagateAtLaunch = propagateAtLaunch
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case propagateAtLaunch = "PropagateAtLaunch"
            case resourceId = "ResourceId"
            case resourceType = "ResourceType"
            case value = "Value"
        }
    }

    public struct TagsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", encoding: .list(member:"member"))
        ]

        /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// One or more tags.
        public let tags: [TagDescription]?

        public init(nextToken: String? = nil, tags: [TagDescription]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tags = "Tags"
        }
    }

    public struct TargetTrackingConfiguration: AWSShape {

        /// A customized metric. You must specify either a predefined metric or a customized metric.
        public let customizedMetricSpecification: CustomizedMetricSpecification?
        /// Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is false.
        public let disableScaleIn: Bool?
        /// A predefined metric. You must specify either a predefined metric or a customized metric.
        public let predefinedMetricSpecification: PredefinedMetricSpecification?
        /// The target value for the metric.
        public let targetValue: Double

        public init(customizedMetricSpecification: CustomizedMetricSpecification? = nil, disableScaleIn: Bool? = nil, predefinedMetricSpecification: PredefinedMetricSpecification? = nil, targetValue: Double) {
            self.customizedMetricSpecification = customizedMetricSpecification
            self.disableScaleIn = disableScaleIn
            self.predefinedMetricSpecification = predefinedMetricSpecification
            self.targetValue = targetValue
        }

        public func validate(name: String) throws {
            try self.predefinedMetricSpecification?.validate(name: "\(name).predefinedMetricSpecification")
        }

        private enum CodingKeys: String, CodingKey {
            case customizedMetricSpecification = "CustomizedMetricSpecification"
            case disableScaleIn = "DisableScaleIn"
            case predefinedMetricSpecification = "PredefinedMetricSpecification"
            case targetValue = "TargetValue"
        }
    }

    public struct TerminateInstanceInAutoScalingGroupType: AWSShape {

        /// The ID of the instance.
        public let instanceId: String
        /// Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
        public let shouldDecrementDesiredCapacity: Bool

        public init(instanceId: String, shouldDecrementDesiredCapacity: Bool) {
            self.instanceId = instanceId
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
        }

        public func validate(name: String) throws {
            try validate(self.instanceId, name:"instanceId", parent: name, max: 19)
            try validate(self.instanceId, name:"instanceId", parent: name, min: 1)
            try validate(self.instanceId, name:"instanceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case shouldDecrementDesiredCapacity = "ShouldDecrementDesiredCapacity"
        }
    }

    public struct UpdateAutoScalingGroupType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", encoding: .list(member:"member")), 
            AWSShapeMember(label: "TerminationPolicies", encoding: .list(member:"member"))
        ]

        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more Availability Zones for the group.
        public let availabilityZones: [String]?
        /// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default value is 300. This cooldown period is not used when a scaling-specific cooldown is specified. Cooldown periods are not supported for target tracking scaling policies, step scaling policies, or scheduled scaling. For more information, see Scaling Cooldowns in the Amazon EC2 Auto Scaling User Guide.
        public let defaultCooldown: Int?
        /// The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
        public let desiredCapacity: Int?
        /// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default value is 0. For more information, see Health Check Grace Period in the Amazon EC2 Auto Scaling User Guide. Conditional: This parameter is required if you are adding an ELB health check.
        public let healthCheckGracePeriod: Int?
        /// The service to use for the health checks. The valid values are EC2 and ELB. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
        public let healthCheckType: String?
        /// The name of the launch configuration. If you specify LaunchConfigurationName in your update request, you can't specify LaunchTemplate or MixedInstancesPolicy.
        public let launchConfigurationName: String?
        /// The launch template and version to use to specify the updates. If you specify LaunchTemplate in your update request, you can't specify LaunchConfigurationName or MixedInstancesPolicy. For more information, see LaunchTemplateSpecification in the Amazon EC2 Auto Scaling API Reference.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The maximum amount of time, in seconds, that an instance can be in service. Valid Range: Minimum value of 604800.
        public let maxInstanceLifetime: Int?
        /// The maximum size of the Auto Scaling group.
        public let maxSize: Int?
        /// The minimum size of the Auto Scaling group.
        public let minSize: Int?
        /// An embedded object that specifies a mixed instances policy. In your call to UpdateAutoScalingGroup, you can make changes to the policy that is specified. All optional parameters are left unchanged if not specified. For more information, see MixedInstancesPolicy in the Amazon EC2 Auto Scaling API Reference and Auto Scaling Groups with Multiple Instance Types and Purchase Options in the Amazon EC2 Auto Scaling User Guide.
        public let mixedInstancesPolicy: MixedInstancesPolicy?
        /// Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see Instance Protection in the Amazon EC2 Auto Scaling User Guide.
        public let newInstancesProtectedFromScaleIn: Bool?
        /// The name of the placement group into which to launch your instances, if any. A placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a placement group. For more information, see Placement Groups in the Amazon EC2 User Guide for Linux Instances.
        public let placementGroup: String?
        /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS services on your behalf. For more information, see Service-Linked Roles in the Amazon EC2 Auto Scaling User Guide.
        public let serviceLinkedRoleARN: String?
        /// A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed. For more information, see Controlling Which Instances Auto Scaling Terminates During Scale In in the Amazon EC2 Auto Scaling User Guide.
        public let terminationPolicies: [String]?
        /// A comma-separated list of subnet IDs for virtual private cloud (VPC). If you specify VPCZoneIdentifier with AvailabilityZones, the subnets that you specify for this parameter must reside in those Availability Zones.
        public let vPCZoneIdentifier: String?

        public init(autoScalingGroupName: String, availabilityZones: [String]? = nil, defaultCooldown: Int? = nil, desiredCapacity: Int? = nil, healthCheckGracePeriod: Int? = nil, healthCheckType: String? = nil, launchConfigurationName: String? = nil, launchTemplate: LaunchTemplateSpecification? = nil, maxInstanceLifetime: Int? = nil, maxSize: Int? = nil, minSize: Int? = nil, mixedInstancesPolicy: MixedInstancesPolicy? = nil, newInstancesProtectedFromScaleIn: Bool? = nil, placementGroup: String? = nil, serviceLinkedRoleARN: String? = nil, terminationPolicies: [String]? = nil, vPCZoneIdentifier: String? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.availabilityZones = availabilityZones
            self.defaultCooldown = defaultCooldown
            self.desiredCapacity = desiredCapacity
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.healthCheckType = healthCheckType
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.maxInstanceLifetime = maxInstanceLifetime
            self.maxSize = maxSize
            self.minSize = minSize
            self.mixedInstancesPolicy = mixedInstancesPolicy
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.placementGroup = placementGroup
            self.serviceLinkedRoleARN = serviceLinkedRoleARN
            self.terminationPolicies = terminationPolicies
            self.vPCZoneIdentifier = vPCZoneIdentifier
        }

        public func validate(name: String) throws {
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, max: 1600)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, min: 1)
            try validate(self.autoScalingGroupName, name:"autoScalingGroupName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.availabilityZones?.forEach {
                try validate($0, name: "availabilityZones[]", parent: name, max: 255)
                try validate($0, name: "availabilityZones[]", parent: name, min: 1)
                try validate($0, name: "availabilityZones[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.availabilityZones, name:"availabilityZones", parent: name, min: 1)
            try validate(self.healthCheckType, name:"healthCheckType", parent: name, max: 32)
            try validate(self.healthCheckType, name:"healthCheckType", parent: name, min: 1)
            try validate(self.healthCheckType, name:"healthCheckType", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.launchConfigurationName, name:"launchConfigurationName", parent: name, max: 1600)
            try validate(self.launchConfigurationName, name:"launchConfigurationName", parent: name, min: 1)
            try validate(self.launchConfigurationName, name:"launchConfigurationName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.launchTemplate?.validate(name: "\(name).launchTemplate")
            try self.mixedInstancesPolicy?.validate(name: "\(name).mixedInstancesPolicy")
            try validate(self.placementGroup, name:"placementGroup", parent: name, max: 255)
            try validate(self.placementGroup, name:"placementGroup", parent: name, min: 1)
            try validate(self.placementGroup, name:"placementGroup", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.serviceLinkedRoleARN, name:"serviceLinkedRoleARN", parent: name, max: 1600)
            try validate(self.serviceLinkedRoleARN, name:"serviceLinkedRoleARN", parent: name, min: 1)
            try validate(self.serviceLinkedRoleARN, name:"serviceLinkedRoleARN", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.terminationPolicies?.forEach {
                try validate($0, name: "terminationPolicies[]", parent: name, max: 1600)
                try validate($0, name: "terminationPolicies[]", parent: name, min: 1)
                try validate($0, name: "terminationPolicies[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.vPCZoneIdentifier, name:"vPCZoneIdentifier", parent: name, max: 2047)
            try validate(self.vPCZoneIdentifier, name:"vPCZoneIdentifier", parent: name, min: 1)
            try validate(self.vPCZoneIdentifier, name:"vPCZoneIdentifier", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case availabilityZones = "AvailabilityZones"
            case defaultCooldown = "DefaultCooldown"
            case desiredCapacity = "DesiredCapacity"
            case healthCheckGracePeriod = "HealthCheckGracePeriod"
            case healthCheckType = "HealthCheckType"
            case launchConfigurationName = "LaunchConfigurationName"
            case launchTemplate = "LaunchTemplate"
            case maxInstanceLifetime = "MaxInstanceLifetime"
            case maxSize = "MaxSize"
            case minSize = "MinSize"
            case mixedInstancesPolicy = "MixedInstancesPolicy"
            case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
            case placementGroup = "PlacementGroup"
            case serviceLinkedRoleARN = "ServiceLinkedRoleARN"
            case terminationPolicies = "TerminationPolicies"
            case vPCZoneIdentifier = "VPCZoneIdentifier"
        }
    }
}
