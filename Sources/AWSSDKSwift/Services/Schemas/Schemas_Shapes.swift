// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Schemas {
    //MARK: Enums

    public enum CodeGenerationStatus: String, CustomStringConvertible, Codable {
        case createInProgress = "CREATE_IN_PROGRESS"
        case createComplete = "CREATE_COMPLETE"
        case createFailed = "CREATE_FAILED"
        public var description: String { return self.rawValue }
    }

    public enum DiscovererState: String, CustomStringConvertible, Codable {
        case started = "STARTED"
        case stopped = "STOPPED"
        public var description: String { return self.rawValue }
    }

    public enum `Type`: String, CustomStringConvertible, Codable {
        case openapi3 = "OpenApi3"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct CreateDiscovererRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SourceArn", required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let description: String?
        public let sourceArn: String
        public let tags: [String: String]?

        public init(description: String? = nil, sourceArn: String, tags: [String: String]? = nil) {
            self.description = description
            self.sourceArn = sourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 256)
            try validate(self.description, name:"description", parent: name, min: 0)
            try validate(self.sourceArn, name:"sourceArn", parent: name, max: 1600)
            try validate(self.sourceArn, name:"sourceArn", parent: name, min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case sourceArn = "SourceArn"
            case tags = "tags"
        }
    }

    public struct CreateDiscovererResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DiscovererArn", required: false, type: .string), 
            AWSShapeMember(label: "DiscovererId", required: false, type: .string), 
            AWSShapeMember(label: "SourceArn", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let description: String?
        public let discovererArn: String?
        public let discovererId: String?
        public let sourceArn: String?
        public let state: DiscovererState?
        public let tags: [String: String]?

        public init(description: String? = nil, discovererArn: String? = nil, discovererId: String? = nil, sourceArn: String? = nil, state: DiscovererState? = nil, tags: [String: String]? = nil) {
            self.description = description
            self.discovererArn = discovererArn
            self.discovererId = discovererId
            self.sourceArn = sourceArn
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case discovererArn = "DiscovererArn"
            case discovererId = "DiscovererId"
            case sourceArn = "SourceArn"
            case state = "State"
            case tags = "tags"
        }
    }

    public struct CreateRegistryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let description: String?
        public let registryName: String
        public let tags: [String: String]?

        public init(description: String? = nil, registryName: String, tags: [String: String]? = nil) {
            self.description = description
            self.registryName = registryName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 256)
            try validate(self.description, name:"description", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case registryName = "registryName"
            case tags = "tags"
        }
    }

    public struct CreateRegistryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "RegistryArn", required: false, type: .string), 
            AWSShapeMember(label: "RegistryName", required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let description: String?
        public let registryArn: String?
        public let registryName: String?
        public let tags: [String: String]?

        public init(description: String? = nil, registryArn: String? = nil, registryName: String? = nil, tags: [String: String]? = nil) {
            self.description = description
            self.registryArn = registryArn
            self.registryName = registryName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case registryArn = "RegistryArn"
            case registryName = "RegistryName"
            case tags = "tags"
        }
    }

    public struct CreateSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Content", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaName", location: .uri(locationName: "schemaName"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Type", required: true, type: .enum)
        ]

        public let content: String
        public let description: String?
        public let registryName: String
        public let schemaName: String
        public let tags: [String: String]?
        public let `type`: `Type`

        public init(content: String, description: String? = nil, registryName: String, schemaName: String, tags: [String: String]? = nil, type: `Type`) {
            self.content = content
            self.description = description
            self.registryName = registryName
            self.schemaName = schemaName
            self.tags = tags
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try validate(self.content, name:"content", parent: name, max: 100000)
            try validate(self.content, name:"content", parent: name, min: 1)
            try validate(self.description, name:"description", parent: name, max: 256)
            try validate(self.description, name:"description", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
            case description = "Description"
            case registryName = "registryName"
            case schemaName = "schemaName"
            case tags = "tags"
            case `type` = "Type"
        }
    }

    public struct CreateSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "SchemaName", required: false, type: .string), 
            AWSShapeMember(label: "SchemaVersion", required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "VersionCreatedDate", required: false, type: .timestamp)
        ]

        public let description: String?
        public let lastModified: TimeStamp?
        public let schemaArn: String?
        public let schemaName: String?
        public let schemaVersion: String?
        public let tags: [String: String]?
        public let `type`: String?
        public let versionCreatedDate: TimeStamp?

        public init(description: String? = nil, lastModified: TimeStamp? = nil, schemaArn: String? = nil, schemaName: String? = nil, schemaVersion: String? = nil, tags: [String: String]? = nil, type: String? = nil, versionCreatedDate: TimeStamp? = nil) {
            self.description = description
            self.lastModified = lastModified
            self.schemaArn = schemaArn
            self.schemaName = schemaName
            self.schemaVersion = schemaVersion
            self.tags = tags
            self.`type` = `type`
            self.versionCreatedDate = versionCreatedDate
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case lastModified = "LastModified"
            case schemaArn = "SchemaArn"
            case schemaName = "SchemaName"
            case schemaVersion = "SchemaVersion"
            case tags = "tags"
            case `type` = "Type"
            case versionCreatedDate = "VersionCreatedDate"
        }
    }

    public struct DeleteDiscovererRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiscovererId", location: .uri(locationName: "discovererId"), required: true, type: .string)
        ]

        public let discovererId: String

        public init(discovererId: String) {
            self.discovererId = discovererId
        }

        private enum CodingKeys: String, CodingKey {
            case discovererId = "discovererId"
        }
    }

    public struct DeleteRegistryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string)
        ]

        public let registryName: String

        public init(registryName: String) {
            self.registryName = registryName
        }

        private enum CodingKeys: String, CodingKey {
            case registryName = "registryName"
        }
    }

    public struct DeleteResourcePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegistryName", location: .querystring(locationName: "registryName"), required: false, type: .string)
        ]

        public let registryName: String?

        public init(registryName: String? = nil) {
            self.registryName = registryName
        }

        private enum CodingKeys: String, CodingKey {
            case registryName = "registryName"
        }
    }

    public struct DeleteSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaName", location: .uri(locationName: "schemaName"), required: true, type: .string)
        ]

        public let registryName: String
        public let schemaName: String

        public init(registryName: String, schemaName: String) {
            self.registryName = registryName
            self.schemaName = schemaName
        }

        private enum CodingKeys: String, CodingKey {
            case registryName = "registryName"
            case schemaName = "schemaName"
        }
    }

    public struct DeleteSchemaVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaName", location: .uri(locationName: "schemaName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaVersion", location: .uri(locationName: "schemaVersion"), required: true, type: .string)
        ]

        public let registryName: String
        public let schemaName: String
        public let schemaVersion: String

        public init(registryName: String, schemaName: String, schemaVersion: String) {
            self.registryName = registryName
            self.schemaName = schemaName
            self.schemaVersion = schemaVersion
        }

        private enum CodingKeys: String, CodingKey {
            case registryName = "registryName"
            case schemaName = "schemaName"
            case schemaVersion = "schemaVersion"
        }
    }

    public struct DescribeCodeBindingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Language", location: .uri(locationName: "language"), required: true, type: .string), 
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaName", location: .uri(locationName: "schemaName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaVersion", location: .querystring(locationName: "schemaVersion"), required: false, type: .string)
        ]

        public let language: String
        public let registryName: String
        public let schemaName: String
        public let schemaVersion: String?

        public init(language: String, registryName: String, schemaName: String, schemaVersion: String? = nil) {
            self.language = language
            self.registryName = registryName
            self.schemaName = schemaName
            self.schemaVersion = schemaVersion
        }

        private enum CodingKeys: String, CodingKey {
            case language = "language"
            case registryName = "registryName"
            case schemaName = "schemaName"
            case schemaVersion = "schemaVersion"
        }
    }

    public struct DescribeCodeBindingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "SchemaVersion", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]

        public let creationDate: TimeStamp?
        public let lastModified: TimeStamp?
        public let schemaVersion: String?
        public let status: CodeGenerationStatus?

        public init(creationDate: TimeStamp? = nil, lastModified: TimeStamp? = nil, schemaVersion: String? = nil, status: CodeGenerationStatus? = nil) {
            self.creationDate = creationDate
            self.lastModified = lastModified
            self.schemaVersion = schemaVersion
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case creationDate = "CreationDate"
            case lastModified = "LastModified"
            case schemaVersion = "SchemaVersion"
            case status = "Status"
        }
    }

    public struct DescribeDiscovererRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiscovererId", location: .uri(locationName: "discovererId"), required: true, type: .string)
        ]

        public let discovererId: String

        public init(discovererId: String) {
            self.discovererId = discovererId
        }

        private enum CodingKeys: String, CodingKey {
            case discovererId = "discovererId"
        }
    }

    public struct DescribeDiscovererResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DiscovererArn", required: false, type: .string), 
            AWSShapeMember(label: "DiscovererId", required: false, type: .string), 
            AWSShapeMember(label: "SourceArn", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let description: String?
        public let discovererArn: String?
        public let discovererId: String?
        public let sourceArn: String?
        public let state: DiscovererState?
        public let tags: [String: String]?

        public init(description: String? = nil, discovererArn: String? = nil, discovererId: String? = nil, sourceArn: String? = nil, state: DiscovererState? = nil, tags: [String: String]? = nil) {
            self.description = description
            self.discovererArn = discovererArn
            self.discovererId = discovererId
            self.sourceArn = sourceArn
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case discovererArn = "DiscovererArn"
            case discovererId = "DiscovererId"
            case sourceArn = "SourceArn"
            case state = "State"
            case tags = "tags"
        }
    }

    public struct DescribeRegistryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string)
        ]

        public let registryName: String

        public init(registryName: String) {
            self.registryName = registryName
        }

        private enum CodingKeys: String, CodingKey {
            case registryName = "registryName"
        }
    }

    public struct DescribeRegistryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "RegistryArn", required: false, type: .string), 
            AWSShapeMember(label: "RegistryName", required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let description: String?
        public let registryArn: String?
        public let registryName: String?
        public let tags: [String: String]?

        public init(description: String? = nil, registryArn: String? = nil, registryName: String? = nil, tags: [String: String]? = nil) {
            self.description = description
            self.registryArn = registryArn
            self.registryName = registryName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case registryArn = "RegistryArn"
            case registryName = "RegistryName"
            case tags = "tags"
        }
    }

    public struct DescribeSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaName", location: .uri(locationName: "schemaName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaVersion", location: .querystring(locationName: "schemaVersion"), required: false, type: .string)
        ]

        public let registryName: String
        public let schemaName: String
        public let schemaVersion: String?

        public init(registryName: String, schemaName: String, schemaVersion: String? = nil) {
            self.registryName = registryName
            self.schemaName = schemaName
            self.schemaVersion = schemaVersion
        }

        private enum CodingKeys: String, CodingKey {
            case registryName = "registryName"
            case schemaName = "schemaName"
            case schemaVersion = "schemaVersion"
        }
    }

    public struct DescribeSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Content", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "SchemaName", required: false, type: .string), 
            AWSShapeMember(label: "SchemaVersion", required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "VersionCreatedDate", required: false, type: .timestamp)
        ]

        public let content: String?
        public let description: String?
        public let lastModified: TimeStamp?
        public let schemaArn: String?
        public let schemaName: String?
        public let schemaVersion: String?
        public let tags: [String: String]?
        public let `type`: String?
        public let versionCreatedDate: TimeStamp?

        public init(content: String? = nil, description: String? = nil, lastModified: TimeStamp? = nil, schemaArn: String? = nil, schemaName: String? = nil, schemaVersion: String? = nil, tags: [String: String]? = nil, type: String? = nil, versionCreatedDate: TimeStamp? = nil) {
            self.content = content
            self.description = description
            self.lastModified = lastModified
            self.schemaArn = schemaArn
            self.schemaName = schemaName
            self.schemaVersion = schemaVersion
            self.tags = tags
            self.`type` = `type`
            self.versionCreatedDate = versionCreatedDate
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
            case description = "Description"
            case lastModified = "LastModified"
            case schemaArn = "SchemaArn"
            case schemaName = "SchemaName"
            case schemaVersion = "SchemaVersion"
            case tags = "tags"
            case `type` = "Type"
            case versionCreatedDate = "VersionCreatedDate"
        }
    }

    public struct DiscovererSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiscovererArn", required: false, type: .string), 
            AWSShapeMember(label: "DiscovererId", required: false, type: .string), 
            AWSShapeMember(label: "SourceArn", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        /// The ARN of the discoverer.
        public let discovererArn: String?
        /// The ID of the discoverer.
        public let discovererId: String?
        /// The ARN of the event bus.
        public let sourceArn: String?
        /// The state of the discoverer.
        public let state: DiscovererState?
        /// Tags associated with the resource.
        public let tags: [String: String]?

        public init(discovererArn: String? = nil, discovererId: String? = nil, sourceArn: String? = nil, state: DiscovererState? = nil, tags: [String: String]? = nil) {
            self.discovererArn = discovererArn
            self.discovererId = discovererId
            self.sourceArn = sourceArn
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case discovererArn = "DiscovererArn"
            case discovererId = "DiscovererId"
            case sourceArn = "SourceArn"
            case state = "State"
            case tags = "tags"
        }
    }

    public struct GetCodeBindingSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Language", location: .uri(locationName: "language"), required: true, type: .string), 
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaName", location: .uri(locationName: "schemaName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaVersion", location: .querystring(locationName: "schemaVersion"), required: false, type: .string)
        ]

        public let language: String
        public let registryName: String
        public let schemaName: String
        public let schemaVersion: String?

        public init(language: String, registryName: String, schemaName: String, schemaVersion: String? = nil) {
            self.language = language
            self.registryName = registryName
            self.schemaName = schemaName
            self.schemaVersion = schemaVersion
        }

        private enum CodingKeys: String, CodingKey {
            case language = "language"
            case registryName = "registryName"
            case schemaName = "schemaName"
            case schemaVersion = "schemaVersion"
        }
    }

    public struct GetCodeBindingSourceResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Body", required: false, type: .blob)
        ]

        public let body: Data?

        public init(body: Data? = nil) {
            self.body = body
        }

        private enum CodingKeys: String, CodingKey {
            case body = "Body"
        }
    }

    public struct GetDiscoveredSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", required: true, type: .list), 
            AWSShapeMember(label: "Type", required: true, type: .enum)
        ]

        public let events: [String]
        public let `type`: `Type`

        public init(events: [String], type: `Type`) {
            self.events = events
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try self.events.forEach {
                try validate($0, name: "events[]", parent: name, max: 100000)
                try validate($0, name: "events[]", parent: name, min: 1)
            }
            try validate(self.events, name:"events", parent: name, max: 10)
            try validate(self.events, name:"events", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case `type` = "Type"
        }
    }

    public struct GetDiscoveredSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Content", required: false, type: .string)
        ]

        public let content: String?

        public init(content: String? = nil) {
            self.content = content
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
        }
    }

    public struct GetResourcePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegistryName", location: .querystring(locationName: "registryName"), required: false, type: .string)
        ]

        public let registryName: String?

        public init(registryName: String? = nil) {
            self.registryName = registryName
        }

        private enum CodingKeys: String, CodingKey {
            case registryName = "registryName"
        }
    }

    public struct GetResourcePolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: false, type: .string), 
            AWSShapeMember(label: "RevisionId", required: false, type: .string)
        ]

        public let policy: String?
        public let revisionId: String?

        public init(policy: String? = nil, revisionId: String? = nil) {
            self.policy = policy
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
            case revisionId = "RevisionId"
        }
    }

    public struct ListDiscoverersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiscovererIdPrefix", location: .querystring(locationName: "discovererIdPrefix"), required: false, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SourceArnPrefix", location: .querystring(locationName: "sourceArnPrefix"), required: false, type: .string)
        ]

        public let discovererIdPrefix: String?
        public let limit: Int?
        public let nextToken: String?
        public let sourceArnPrefix: String?

        public init(discovererIdPrefix: String? = nil, limit: Int? = nil, nextToken: String? = nil, sourceArnPrefix: String? = nil) {
            self.discovererIdPrefix = discovererIdPrefix
            self.limit = limit
            self.nextToken = nextToken
            self.sourceArnPrefix = sourceArnPrefix
        }

        private enum CodingKeys: String, CodingKey {
            case discovererIdPrefix = "discovererIdPrefix"
            case limit = "limit"
            case nextToken = "nextToken"
            case sourceArnPrefix = "sourceArnPrefix"
        }
    }

    public struct ListDiscoverersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Discoverers", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        public let discoverers: [DiscovererSummary]?
        public let nextToken: String?

        public init(discoverers: [DiscovererSummary]? = nil, nextToken: String? = nil) {
            self.discoverers = discoverers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case discoverers = "Discoverers"
            case nextToken = "NextToken"
        }
    }

    public struct ListRegistriesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "RegistryNamePrefix", location: .querystring(locationName: "registryNamePrefix"), required: false, type: .string), 
            AWSShapeMember(label: "Scope", location: .querystring(locationName: "scope"), required: false, type: .string)
        ]

        public let limit: Int?
        public let nextToken: String?
        public let registryNamePrefix: String?
        public let scope: String?

        public init(limit: Int? = nil, nextToken: String? = nil, registryNamePrefix: String? = nil, scope: String? = nil) {
            self.limit = limit
            self.nextToken = nextToken
            self.registryNamePrefix = registryNamePrefix
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case nextToken = "nextToken"
            case registryNamePrefix = "registryNamePrefix"
            case scope = "scope"
        }
    }

    public struct ListRegistriesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Registries", required: false, type: .list)
        ]

        public let nextToken: String?
        public let registries: [RegistrySummary]?

        public init(nextToken: String? = nil, registries: [RegistrySummary]? = nil) {
            self.nextToken = nextToken
            self.registries = registries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case registries = "Registries"
        }
    }

    public struct ListSchemaVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaName", location: .uri(locationName: "schemaName"), required: true, type: .string)
        ]

        public let limit: Int?
        public let nextToken: String?
        public let registryName: String
        public let schemaName: String

        public init(limit: Int? = nil, nextToken: String? = nil, registryName: String, schemaName: String) {
            self.limit = limit
            self.nextToken = nextToken
            self.registryName = registryName
            self.schemaName = schemaName
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case nextToken = "nextToken"
            case registryName = "registryName"
            case schemaName = "schemaName"
        }
    }

    public struct ListSchemaVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SchemaVersions", required: false, type: .list)
        ]

        public let nextToken: String?
        public let schemaVersions: [SchemaVersionSummary]?

        public init(nextToken: String? = nil, schemaVersions: [SchemaVersionSummary]? = nil) {
            self.nextToken = nextToken
            self.schemaVersions = schemaVersions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case schemaVersions = "SchemaVersions"
        }
    }

    public struct ListSchemasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaNamePrefix", location: .querystring(locationName: "schemaNamePrefix"), required: false, type: .string)
        ]

        public let limit: Int?
        public let nextToken: String?
        public let registryName: String
        public let schemaNamePrefix: String?

        public init(limit: Int? = nil, nextToken: String? = nil, registryName: String, schemaNamePrefix: String? = nil) {
            self.limit = limit
            self.nextToken = nextToken
            self.registryName = registryName
            self.schemaNamePrefix = schemaNamePrefix
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "limit"
            case nextToken = "nextToken"
            case registryName = "registryName"
            case schemaNamePrefix = "schemaNamePrefix"
        }
    }

    public struct ListSchemasResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Schemas", required: false, type: .list)
        ]

        public let nextToken: String?
        public let schemas: [SchemaSummary]?

        public init(nextToken: String? = nil, schemas: [SchemaSummary]? = nil) {
            self.nextToken = nextToken
            self.schemas = schemas
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case schemas = "Schemas"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string)
        ]

        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct PutCodeBindingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Language", location: .uri(locationName: "language"), required: true, type: .string), 
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaName", location: .uri(locationName: "schemaName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaVersion", location: .querystring(locationName: "schemaVersion"), required: false, type: .string)
        ]

        public let language: String
        public let registryName: String
        public let schemaName: String
        public let schemaVersion: String?

        public init(language: String, registryName: String, schemaName: String, schemaVersion: String? = nil) {
            self.language = language
            self.registryName = registryName
            self.schemaName = schemaName
            self.schemaVersion = schemaVersion
        }

        private enum CodingKeys: String, CodingKey {
            case language = "language"
            case registryName = "registryName"
            case schemaName = "schemaName"
            case schemaVersion = "schemaVersion"
        }
    }

    public struct PutCodeBindingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "SchemaVersion", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]

        public let creationDate: TimeStamp?
        public let lastModified: TimeStamp?
        public let schemaVersion: String?
        public let status: CodeGenerationStatus?

        public init(creationDate: TimeStamp? = nil, lastModified: TimeStamp? = nil, schemaVersion: String? = nil, status: CodeGenerationStatus? = nil) {
            self.creationDate = creationDate
            self.lastModified = lastModified
            self.schemaVersion = schemaVersion
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case creationDate = "CreationDate"
            case lastModified = "LastModified"
            case schemaVersion = "SchemaVersion"
            case status = "Status"
        }
    }

    public struct PutResourcePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: true, type: .string), 
            AWSShapeMember(label: "RegistryName", location: .querystring(locationName: "registryName"), required: false, type: .string), 
            AWSShapeMember(label: "RevisionId", required: false, type: .string)
        ]

        public let policy: String
        public let registryName: String?
        public let revisionId: String?

        public init(policy: String, registryName: String? = nil, revisionId: String? = nil) {
            self.policy = policy
            self.registryName = registryName
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
            case registryName = "registryName"
            case revisionId = "RevisionId"
        }
    }

    public struct PutResourcePolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: false, type: .string), 
            AWSShapeMember(label: "RevisionId", required: false, type: .string)
        ]

        public let policy: String?
        public let revisionId: String?

        public init(policy: String? = nil, revisionId: String? = nil) {
            self.policy = policy
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
            case revisionId = "RevisionId"
        }
    }

    public struct RegistrySummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegistryArn", required: false, type: .string), 
            AWSShapeMember(label: "RegistryName", required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        /// The ARN of the registry.
        public let registryArn: String?
        /// The name of the registry.
        public let registryName: String?
        /// Tags associated with the registry.
        public let tags: [String: String]?

        public init(registryArn: String? = nil, registryName: String? = nil, tags: [String: String]? = nil) {
            self.registryArn = registryArn
            self.registryName = registryName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case registryArn = "RegistryArn"
            case registryName = "RegistryName"
            case tags = "tags"
        }
    }

    public struct SchemaSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "SchemaName", required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "VersionCount", required: false, type: .long)
        ]

        /// The date and time that schema was modified.
        public let lastModified: TimeStamp?
        /// The ARN of the schema.
        public let schemaArn: String?
        /// The name of the schema.
        public let schemaName: String?
        /// Tags associated with the schema.
        public let tags: [String: String]?
        /// The number of versions available for the schema.
        public let versionCount: Int64?

        public init(lastModified: TimeStamp? = nil, schemaArn: String? = nil, schemaName: String? = nil, tags: [String: String]? = nil, versionCount: Int64? = nil) {
            self.lastModified = lastModified
            self.schemaArn = schemaArn
            self.schemaName = schemaName
            self.tags = tags
            self.versionCount = versionCount
        }

        private enum CodingKeys: String, CodingKey {
            case lastModified = "LastModified"
            case schemaArn = "SchemaArn"
            case schemaName = "SchemaName"
            case tags = "tags"
            case versionCount = "VersionCount"
        }
    }

    public struct SchemaVersionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "SchemaName", required: false, type: .string), 
            AWSShapeMember(label: "SchemaVersion", required: false, type: .string)
        ]

        /// The ARN of the schema version.
        public let schemaArn: String?
        /// The name of the schema.
        public let schemaName: String?
        /// The version number of the schema.
        public let schemaVersion: String?

        public init(schemaArn: String? = nil, schemaName: String? = nil, schemaVersion: String? = nil) {
            self.schemaArn = schemaArn
            self.schemaName = schemaName
            self.schemaVersion = schemaVersion
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
            case schemaName = "SchemaName"
            case schemaVersion = "SchemaVersion"
        }
    }

    public struct SearchSchemaSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegistryName", required: false, type: .string), 
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "SchemaName", required: false, type: .string), 
            AWSShapeMember(label: "SchemaVersions", required: false, type: .list)
        ]

        /// The name of the registry.
        public let registryName: String?
        /// The ARN of the schema.
        public let schemaArn: String?
        /// The name of the schema.
        public let schemaName: String?
        /// An array of schema version summaries.
        public let schemaVersions: [SearchSchemaVersionSummary]?

        public init(registryName: String? = nil, schemaArn: String? = nil, schemaName: String? = nil, schemaVersions: [SearchSchemaVersionSummary]? = nil) {
            self.registryName = registryName
            self.schemaArn = schemaArn
            self.schemaName = schemaName
            self.schemaVersions = schemaVersions
        }

        private enum CodingKeys: String, CodingKey {
            case registryName = "RegistryName"
            case schemaArn = "SchemaArn"
            case schemaName = "SchemaName"
            case schemaVersions = "SchemaVersions"
        }
    }

    public struct SearchSchemaVersionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "SchemaVersion", required: false, type: .string)
        ]

        /// The date the schema version was created.
        public let createdDate: TimeStamp?
        /// The version number of the schema
        public let schemaVersion: String?

        public init(createdDate: TimeStamp? = nil, schemaVersion: String? = nil) {
            self.createdDate = createdDate
            self.schemaVersion = schemaVersion
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "CreatedDate"
            case schemaVersion = "SchemaVersion"
        }
    }

    public struct SearchSchemasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Keywords", location: .querystring(locationName: "keywords"), required: true, type: .string), 
            AWSShapeMember(label: "Limit", location: .querystring(locationName: "limit"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string)
        ]

        public let keywords: String
        public let limit: Int?
        public let nextToken: String?
        public let registryName: String

        public init(keywords: String, limit: Int? = nil, nextToken: String? = nil, registryName: String) {
            self.keywords = keywords
            self.limit = limit
            self.nextToken = nextToken
            self.registryName = registryName
        }

        private enum CodingKeys: String, CodingKey {
            case keywords = "keywords"
            case limit = "limit"
            case nextToken = "nextToken"
            case registryName = "registryName"
        }
    }

    public struct SearchSchemasResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Schemas", required: false, type: .list)
        ]

        public let nextToken: String?
        public let schemas: [SearchSchemaSummary]?

        public init(nextToken: String? = nil, schemas: [SearchSchemaSummary]? = nil) {
            self.nextToken = nextToken
            self.schemas = schemas
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case schemas = "Schemas"
        }
    }

    public struct StartDiscovererRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiscovererId", location: .uri(locationName: "discovererId"), required: true, type: .string)
        ]

        public let discovererId: String

        public init(discovererId: String) {
            self.discovererId = discovererId
        }

        private enum CodingKeys: String, CodingKey {
            case discovererId = "discovererId"
        }
    }

    public struct StartDiscovererResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiscovererId", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum)
        ]

        public let discovererId: String?
        public let state: DiscovererState?

        public init(discovererId: String? = nil, state: DiscovererState? = nil) {
            self.discovererId = discovererId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case discovererId = "DiscovererId"
            case state = "State"
        }
    }

    public struct StopDiscovererRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiscovererId", location: .uri(locationName: "discovererId"), required: true, type: .string)
        ]

        public let discovererId: String

        public init(discovererId: String) {
            self.discovererId = discovererId
        }

        private enum CodingKeys: String, CodingKey {
            case discovererId = "discovererId"
        }
    }

    public struct StopDiscovererResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiscovererId", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum)
        ]

        public let discovererId: String?
        public let state: DiscovererState?

        public init(discovererId: String? = nil, state: DiscovererState? = nil) {
            self.discovererId = discovererId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case discovererId = "DiscovererId"
            case state = "State"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: true, type: .map)
        ]

        public let resourceArn: String
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
            case tags = "tags"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list)
        ]

        public let resourceArn: String
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UpdateDiscovererRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DiscovererId", location: .uri(locationName: "discovererId"), required: true, type: .string)
        ]

        public let description: String?
        public let discovererId: String

        public init(description: String? = nil, discovererId: String) {
            self.description = description
            self.discovererId = discovererId
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 256)
            try validate(self.description, name:"description", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case discovererId = "discovererId"
        }
    }

    public struct UpdateDiscovererResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DiscovererArn", required: false, type: .string), 
            AWSShapeMember(label: "DiscovererId", required: false, type: .string), 
            AWSShapeMember(label: "SourceArn", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let description: String?
        public let discovererArn: String?
        public let discovererId: String?
        public let sourceArn: String?
        public let state: DiscovererState?
        public let tags: [String: String]?

        public init(description: String? = nil, discovererArn: String? = nil, discovererId: String? = nil, sourceArn: String? = nil, state: DiscovererState? = nil, tags: [String: String]? = nil) {
            self.description = description
            self.discovererArn = discovererArn
            self.discovererId = discovererId
            self.sourceArn = sourceArn
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case discovererArn = "DiscovererArn"
            case discovererId = "DiscovererId"
            case sourceArn = "SourceArn"
            case state = "State"
            case tags = "tags"
        }
    }

    public struct UpdateRegistryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string)
        ]

        public let description: String?
        public let registryName: String

        public init(description: String? = nil, registryName: String) {
            self.description = description
            self.registryName = registryName
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 256)
            try validate(self.description, name:"description", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case registryName = "registryName"
        }
    }

    public struct UpdateRegistryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "RegistryArn", required: false, type: .string), 
            AWSShapeMember(label: "RegistryName", required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let description: String?
        public let registryArn: String?
        public let registryName: String?
        public let tags: [String: String]?

        public init(description: String? = nil, registryArn: String? = nil, registryName: String? = nil, tags: [String: String]? = nil) {
            self.description = description
            self.registryArn = registryArn
            self.registryName = registryName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case registryArn = "RegistryArn"
            case registryName = "RegistryName"
            case tags = "tags"
        }
    }

    public struct UpdateSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientTokenId", required: false, type: .string), 
            AWSShapeMember(label: "Content", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "RegistryName", location: .uri(locationName: "registryName"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaName", location: .uri(locationName: "schemaName"), required: true, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]

        public let clientTokenId: String?
        public let content: String?
        public let description: String?
        public let registryName: String
        public let schemaName: String
        public let `type`: `Type`?

        public init(clientTokenId: String? = UpdateSchemaRequest.idempotencyToken(), content: String? = nil, description: String? = nil, registryName: String, schemaName: String, type: `Type`? = nil) {
            self.clientTokenId = clientTokenId
            self.content = content
            self.description = description
            self.registryName = registryName
            self.schemaName = schemaName
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try validate(self.clientTokenId, name:"clientTokenId", parent: name, max: 36)
            try validate(self.clientTokenId, name:"clientTokenId", parent: name, min: 0)
            try validate(self.content, name:"content", parent: name, max: 100000)
            try validate(self.content, name:"content", parent: name, min: 1)
            try validate(self.description, name:"description", parent: name, max: 256)
            try validate(self.description, name:"description", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case clientTokenId = "ClientTokenId"
            case content = "Content"
            case description = "Description"
            case registryName = "registryName"
            case schemaName = "schemaName"
            case `type` = "Type"
        }
    }

    public struct UpdateSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "SchemaName", required: false, type: .string), 
            AWSShapeMember(label: "SchemaVersion", required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "VersionCreatedDate", required: false, type: .timestamp)
        ]

        public let description: String?
        public let lastModified: TimeStamp?
        public let schemaArn: String?
        public let schemaName: String?
        public let schemaVersion: String?
        public let tags: [String: String]?
        public let `type`: String?
        public let versionCreatedDate: TimeStamp?

        public init(description: String? = nil, lastModified: TimeStamp? = nil, schemaArn: String? = nil, schemaName: String? = nil, schemaVersion: String? = nil, tags: [String: String]? = nil, type: String? = nil, versionCreatedDate: TimeStamp? = nil) {
            self.description = description
            self.lastModified = lastModified
            self.schemaArn = schemaArn
            self.schemaName = schemaName
            self.schemaVersion = schemaVersion
            self.tags = tags
            self.`type` = `type`
            self.versionCreatedDate = versionCreatedDate
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case lastModified = "LastModified"
            case schemaArn = "SchemaArn"
            case schemaName = "SchemaName"
            case schemaVersion = "SchemaVersion"
            case tags = "tags"
            case `type` = "Type"
            case versionCreatedDate = "VersionCreatedDate"
        }
    }
}
