// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore
import NIO

/**
AWS Elemental MediaPackage
*/
public struct MediaPackage {

    public let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil, middlewares: [AWSServiceMiddleware] = [], eventLoopGroupProvider: AWSClient.EventLoopGroupProvider) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            sessionToken: sessionToken,
            region: region,
            service: "mediapackage",
            serviceProtocol: ServiceProtocol(type: .restjson, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2017-10-12",
            endpoint: endpoint,
            middlewares: middlewares,
            possibleErrorTypes: [MediaPackageErrorType.self],
            eventLoopGroupProvider: eventLoopGroupProvider
        )
    }

    ///  Creates a new Channel.
    public func createChannel(_ input: CreateChannelRequest) -> Future<CreateChannelResponse> {
        return client.send(operation: "CreateChannel", path: "/channels", httpMethod: "POST", input: input)
    }

    ///  Creates a new HarvestJob record.
    public func createHarvestJob(_ input: CreateHarvestJobRequest) -> Future<CreateHarvestJobResponse> {
        return client.send(operation: "CreateHarvestJob", path: "/harvest_jobs", httpMethod: "POST", input: input)
    }

    ///  Creates a new OriginEndpoint record.
    public func createOriginEndpoint(_ input: CreateOriginEndpointRequest) -> Future<CreateOriginEndpointResponse> {
        return client.send(operation: "CreateOriginEndpoint", path: "/origin_endpoints", httpMethod: "POST", input: input)
    }

    ///  Deletes an existing Channel.
    public func deleteChannel(_ input: DeleteChannelRequest) -> Future<DeleteChannelResponse> {
        return client.send(operation: "DeleteChannel", path: "/channels/{id}", httpMethod: "DELETE", input: input)
    }

    ///  Deletes an existing OriginEndpoint.
    public func deleteOriginEndpoint(_ input: DeleteOriginEndpointRequest) -> Future<DeleteOriginEndpointResponse> {
        return client.send(operation: "DeleteOriginEndpoint", path: "/origin_endpoints/{id}", httpMethod: "DELETE", input: input)
    }

    ///  Gets details about a Channel.
    public func describeChannel(_ input: DescribeChannelRequest) -> Future<DescribeChannelResponse> {
        return client.send(operation: "DescribeChannel", path: "/channels/{id}", httpMethod: "GET", input: input)
    }

    ///  Gets details about an existing HarvestJob.
    public func describeHarvestJob(_ input: DescribeHarvestJobRequest) -> Future<DescribeHarvestJobResponse> {
        return client.send(operation: "DescribeHarvestJob", path: "/harvest_jobs/{id}", httpMethod: "GET", input: input)
    }

    ///  Gets details about an existing OriginEndpoint.
    public func describeOriginEndpoint(_ input: DescribeOriginEndpointRequest) -> Future<DescribeOriginEndpointResponse> {
        return client.send(operation: "DescribeOriginEndpoint", path: "/origin_endpoints/{id}", httpMethod: "GET", input: input)
    }

    ///  Returns a collection of Channels.
    public func listChannels(_ input: ListChannelsRequest) -> Future<ListChannelsResponse> {
        return client.send(operation: "ListChannels", path: "/channels", httpMethod: "GET", input: input)
    }

    ///  Returns a collection of HarvestJob records.
    public func listHarvestJobs(_ input: ListHarvestJobsRequest) -> Future<ListHarvestJobsResponse> {
        return client.send(operation: "ListHarvestJobs", path: "/harvest_jobs", httpMethod: "GET", input: input)
    }

    ///  Returns a collection of OriginEndpoint records.
    public func listOriginEndpoints(_ input: ListOriginEndpointsRequest) -> Future<ListOriginEndpointsResponse> {
        return client.send(operation: "ListOriginEndpoints", path: "/origin_endpoints", httpMethod: "GET", input: input)
    }

    public func listTagsForResource(_ input: ListTagsForResourceRequest) -> Future<ListTagsForResourceResponse> {
        return client.send(operation: "ListTagsForResource", path: "/tags/{resource-arn}", httpMethod: "GET", input: input)
    }

    ///  Changes the Channel's first IngestEndpoint's username and password. WARNING - This API is deprecated. Please use RotateIngestEndpointCredentials instead
    @available(*, deprecated, message:"This API is deprecated. Please use RotateIngestEndpointCredentials instead")
    public func rotateChannelCredentials(_ input: RotateChannelCredentialsRequest) -> Future<RotateChannelCredentialsResponse> {
        return client.send(operation: "RotateChannelCredentials", path: "/channels/{id}/credentials", httpMethod: "PUT", input: input)
    }

    ///  Rotate the IngestEndpoint's username and password, as specified by the IngestEndpoint's id.
    public func rotateIngestEndpointCredentials(_ input: RotateIngestEndpointCredentialsRequest) -> Future<RotateIngestEndpointCredentialsResponse> {
        return client.send(operation: "RotateIngestEndpointCredentials", path: "/channels/{id}/ingest_endpoints/{ingest_endpoint_id}/credentials", httpMethod: "PUT", input: input)
    }

    @discardableResult public func tagResource(_ input: TagResourceRequest) -> Future<Void> {
        return client.send(operation: "TagResource", path: "/tags/{resource-arn}", httpMethod: "POST", input: input)
    }

    @discardableResult public func untagResource(_ input: UntagResourceRequest) -> Future<Void> {
        return client.send(operation: "UntagResource", path: "/tags/{resource-arn}", httpMethod: "DELETE", input: input)
    }

    ///  Updates an existing Channel.
    public func updateChannel(_ input: UpdateChannelRequest) -> Future<UpdateChannelResponse> {
        return client.send(operation: "UpdateChannel", path: "/channels/{id}", httpMethod: "PUT", input: input)
    }

    ///  Updates an existing OriginEndpoint.
    public func updateOriginEndpoint(_ input: UpdateOriginEndpointRequest) -> Future<UpdateOriginEndpointResponse> {
        return client.send(operation: "UpdateOriginEndpoint", path: "/origin_endpoints/{id}", httpMethod: "PUT", input: input)
    }
}
