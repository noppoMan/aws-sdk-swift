// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

//MARK: Paginators

extension SSM {

    ///  Describes details about the activation, such as the date and time the activation was created, its expiration date, the IAM role assigned to the instances in the activation, and the number of instances registered by using this activation.
    public func describeActivationsPaginator(_ input: DescribeActivationsRequest, onPage: @escaping (DescribeActivationsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeActivations, tokenKey: \DescribeActivationsResult.nextToken, onPage: onPage)
    }

    ///  Use this API action to view information about a specific execution of a specific association.
    public func describeAssociationExecutionTargetsPaginator(_ input: DescribeAssociationExecutionTargetsRequest, onPage: @escaping (DescribeAssociationExecutionTargetsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeAssociationExecutionTargets, tokenKey: \DescribeAssociationExecutionTargetsResult.nextToken, onPage: onPage)
    }

    ///  Use this API action to view all executions for a specific association ID. 
    public func describeAssociationExecutionsPaginator(_ input: DescribeAssociationExecutionsRequest, onPage: @escaping (DescribeAssociationExecutionsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeAssociationExecutions, tokenKey: \DescribeAssociationExecutionsResult.nextToken, onPage: onPage)
    }

    ///  Provides details about all active and terminated Automation executions.
    public func describeAutomationExecutionsPaginator(_ input: DescribeAutomationExecutionsRequest, onPage: @escaping (DescribeAutomationExecutionsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeAutomationExecutions, tokenKey: \DescribeAutomationExecutionsResult.nextToken, onPage: onPage)
    }

    ///  Information about all active and terminated step executions in an Automation workflow.
    public func describeAutomationStepExecutionsPaginator(_ input: DescribeAutomationStepExecutionsRequest, onPage: @escaping (DescribeAutomationStepExecutionsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeAutomationStepExecutions, tokenKey: \DescribeAutomationStepExecutionsResult.nextToken, onPage: onPage)
    }

    ///  Lists all patches eligible to be included in a patch baseline.
    public func describeAvailablePatchesPaginator(_ input: DescribeAvailablePatchesRequest, onPage: @escaping (DescribeAvailablePatchesResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeAvailablePatches, tokenKey: \DescribeAvailablePatchesResult.nextToken, onPage: onPage)
    }

    ///  All associations for the instance(s).
    public func describeEffectiveInstanceAssociationsPaginator(_ input: DescribeEffectiveInstanceAssociationsRequest, onPage: @escaping (DescribeEffectiveInstanceAssociationsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeEffectiveInstanceAssociations, tokenKey: \DescribeEffectiveInstanceAssociationsResult.nextToken, onPage: onPage)
    }

    ///  Retrieves the current effective patches (the patch and the approval state) for the specified patch baseline. Note that this API applies only to Windows patch baselines.
    public func describeEffectivePatchesForPatchBaselinePaginator(_ input: DescribeEffectivePatchesForPatchBaselineRequest, onPage: @escaping (DescribeEffectivePatchesForPatchBaselineResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeEffectivePatchesForPatchBaseline, tokenKey: \DescribeEffectivePatchesForPatchBaselineResult.nextToken, onPage: onPage)
    }

    ///  The status of the associations for the instance(s).
    public func describeInstanceAssociationsStatusPaginator(_ input: DescribeInstanceAssociationsStatusRequest, onPage: @escaping (DescribeInstanceAssociationsStatusResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeInstanceAssociationsStatus, tokenKey: \DescribeInstanceAssociationsStatusResult.nextToken, onPage: onPage)
    }

    ///  Describes one or more of your instances, including information about the operating system platform, the version of SSM Agent installed on the instance, instance status, and so on. If you specify one or more instance IDs, it returns information for those instances. If you do not specify instance IDs, it returns information for all your instances. If you specify an instance ID that is not valid or an instance that you do not own, you receive an error.  The IamRole field for this API action is the Amazon Identity and Access Management (IAM) role assigned to on-premises instances. This call does not return the IAM role for EC2 instances. 
    public func describeInstanceInformationPaginator(_ input: DescribeInstanceInformationRequest, onPage: @escaping (DescribeInstanceInformationResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeInstanceInformation, tokenKey: \DescribeInstanceInformationResult.nextToken, onPage: onPage)
    }

    ///  Retrieves the high-level patch state of one or more instances.
    public func describeInstancePatchStatesPaginator(_ input: DescribeInstancePatchStatesRequest, onPage: @escaping (DescribeInstancePatchStatesResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeInstancePatchStates, tokenKey: \DescribeInstancePatchStatesResult.nextToken, onPage: onPage)
    }

    ///  Retrieves the high-level patch state for the instances in the specified patch group.
    public func describeInstancePatchStatesForPatchGroupPaginator(_ input: DescribeInstancePatchStatesForPatchGroupRequest, onPage: @escaping (DescribeInstancePatchStatesForPatchGroupResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeInstancePatchStatesForPatchGroup, tokenKey: \DescribeInstancePatchStatesForPatchGroupResult.nextToken, onPage: onPage)
    }

    ///  Retrieves information about the patches on the specified instance and their state relative to the patch baseline being used for the instance.
    public func describeInstancePatchesPaginator(_ input: DescribeInstancePatchesRequest, onPage: @escaping (DescribeInstancePatchesResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeInstancePatches, tokenKey: \DescribeInstancePatchesResult.nextToken, onPage: onPage)
    }

    ///  Describes a specific delete inventory operation.
    public func describeInventoryDeletionsPaginator(_ input: DescribeInventoryDeletionsRequest, onPage: @escaping (DescribeInventoryDeletionsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeInventoryDeletions, tokenKey: \DescribeInventoryDeletionsResult.nextToken, onPage: onPage)
    }

    ///  Retrieves the individual task executions (one per target) for a particular task run as part of a maintenance window execution.
    public func describeMaintenanceWindowExecutionTaskInvocationsPaginator(_ input: DescribeMaintenanceWindowExecutionTaskInvocationsRequest, onPage: @escaping (DescribeMaintenanceWindowExecutionTaskInvocationsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeMaintenanceWindowExecutionTaskInvocations, tokenKey: \DescribeMaintenanceWindowExecutionTaskInvocationsResult.nextToken, onPage: onPage)
    }

    ///  For a given maintenance window execution, lists the tasks that were run.
    public func describeMaintenanceWindowExecutionTasksPaginator(_ input: DescribeMaintenanceWindowExecutionTasksRequest, onPage: @escaping (DescribeMaintenanceWindowExecutionTasksResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeMaintenanceWindowExecutionTasks, tokenKey: \DescribeMaintenanceWindowExecutionTasksResult.nextToken, onPage: onPage)
    }

    ///  Lists the executions of a maintenance window. This includes information about when the maintenance window was scheduled to be active, and information about tasks registered and run with the maintenance window.
    public func describeMaintenanceWindowExecutionsPaginator(_ input: DescribeMaintenanceWindowExecutionsRequest, onPage: @escaping (DescribeMaintenanceWindowExecutionsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeMaintenanceWindowExecutions, tokenKey: \DescribeMaintenanceWindowExecutionsResult.nextToken, onPage: onPage)
    }

    ///  Retrieves information about upcoming executions of a maintenance window.
    public func describeMaintenanceWindowSchedulePaginator(_ input: DescribeMaintenanceWindowScheduleRequest, onPage: @escaping (DescribeMaintenanceWindowScheduleResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeMaintenanceWindowSchedule, tokenKey: \DescribeMaintenanceWindowScheduleResult.nextToken, onPage: onPage)
    }

    ///  Lists the targets registered with the maintenance window.
    public func describeMaintenanceWindowTargetsPaginator(_ input: DescribeMaintenanceWindowTargetsRequest, onPage: @escaping (DescribeMaintenanceWindowTargetsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeMaintenanceWindowTargets, tokenKey: \DescribeMaintenanceWindowTargetsResult.nextToken, onPage: onPage)
    }

    ///  Lists the tasks in a maintenance window.
    public func describeMaintenanceWindowTasksPaginator(_ input: DescribeMaintenanceWindowTasksRequest, onPage: @escaping (DescribeMaintenanceWindowTasksResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeMaintenanceWindowTasks, tokenKey: \DescribeMaintenanceWindowTasksResult.nextToken, onPage: onPage)
    }

    ///  Retrieves the maintenance windows in an AWS account.
    public func describeMaintenanceWindowsPaginator(_ input: DescribeMaintenanceWindowsRequest, onPage: @escaping (DescribeMaintenanceWindowsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeMaintenanceWindows, tokenKey: \DescribeMaintenanceWindowsResult.nextToken, onPage: onPage)
    }

    ///  Retrieves information about the maintenance window targets or tasks that an instance is associated with.
    public func describeMaintenanceWindowsForTargetPaginator(_ input: DescribeMaintenanceWindowsForTargetRequest, onPage: @escaping (DescribeMaintenanceWindowsForTargetResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeMaintenanceWindowsForTarget, tokenKey: \DescribeMaintenanceWindowsForTargetResult.nextToken, onPage: onPage)
    }

    ///  Query a set of OpsItems. You must have permission in AWS Identity and Access Management (IAM) to query a list of OpsItems. For more information, see Getting started with OpsCenter in the AWS Systems Manager User Guide. Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see AWS Systems Manager OpsCenter in the AWS Systems Manager User Guide. 
    public func describeOpsItemsPaginator(_ input: DescribeOpsItemsRequest, onPage: @escaping (DescribeOpsItemsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeOpsItems, tokenKey: \DescribeOpsItemsResponse.nextToken, onPage: onPage)
    }

    ///  Get information about a parameter.  Request results are returned on a best-effort basis. If you specify MaxResults in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of MaxResults. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a NextToken. You can specify the NextToken in a subsequent call to get the next set of results. 
    public func describeParametersPaginator(_ input: DescribeParametersRequest, onPage: @escaping (DescribeParametersResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeParameters, tokenKey: \DescribeParametersResult.nextToken, onPage: onPage)
    }

    ///  Lists the patch baselines in your AWS account.
    public func describePatchBaselinesPaginator(_ input: DescribePatchBaselinesRequest, onPage: @escaping (DescribePatchBaselinesResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describePatchBaselines, tokenKey: \DescribePatchBaselinesResult.nextToken, onPage: onPage)
    }

    ///  Lists all patch groups that have been registered with patch baselines.
    public func describePatchGroupsPaginator(_ input: DescribePatchGroupsRequest, onPage: @escaping (DescribePatchGroupsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describePatchGroups, tokenKey: \DescribePatchGroupsResult.nextToken, onPage: onPage)
    }

    ///  Lists the properties of available patches organized by product, product family, classification, severity, and other properties of available patches. You can use the reported properties in the filters you specify in requests for actions such as CreatePatchBaseline, UpdatePatchBaseline, DescribeAvailablePatches, and DescribePatchBaselines. The following section lists the properties that can be used in filters for each major operating system type:  AMAZON_LINUX  Valid properties: PRODUCT, CLASSIFICATION, SEVERITY  AMAZON_LINUX_2  Valid properties: PRODUCT, CLASSIFICATION, SEVERITY  CENTOS  Valid properties: PRODUCT, CLASSIFICATION, SEVERITY  DEBIAN  Valid properties: PRODUCT, PRIORITY  ORACLE_LINUX  Valid properties: PRODUCT, CLASSIFICATION, SEVERITY  REDHAT_ENTERPRISE_LINUX  Valid properties: PRODUCT, CLASSIFICATION, SEVERITY  SUSE  Valid properties: PRODUCT, CLASSIFICATION, SEVERITY  UBUNTU  Valid properties: PRODUCT, PRIORITY  WINDOWS  Valid properties: PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, MSRC_SEVERITY  
    public func describePatchPropertiesPaginator(_ input: DescribePatchPropertiesRequest, onPage: @escaping (DescribePatchPropertiesResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describePatchProperties, tokenKey: \DescribePatchPropertiesResult.nextToken, onPage: onPage)
    }

    ///  Retrieves a list of all active sessions (both connected and disconnected) or terminated sessions from the past 30 days.
    public func describeSessionsPaginator(_ input: DescribeSessionsRequest, onPage: @escaping (DescribeSessionsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeSessions, tokenKey: \DescribeSessionsResponse.nextToken, onPage: onPage)
    }

    ///  Query inventory information.
    public func getInventoryPaginator(_ input: GetInventoryRequest, onPage: @escaping (GetInventoryResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: getInventory, tokenKey: \GetInventoryResult.nextToken, onPage: onPage)
    }

    ///  Return a list of inventory type names for the account, or return a list of attribute names for a specific Inventory item type.
    public func getInventorySchemaPaginator(_ input: GetInventorySchemaRequest, onPage: @escaping (GetInventorySchemaResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: getInventorySchema, tokenKey: \GetInventorySchemaResult.nextToken, onPage: onPage)
    }

    ///  View a summary of OpsItems based on specified filters and aggregators.
    public func getOpsSummaryPaginator(_ input: GetOpsSummaryRequest, onPage: @escaping (GetOpsSummaryResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: getOpsSummary, tokenKey: \GetOpsSummaryResult.nextToken, onPage: onPage)
    }

    ///  Query a list of all parameters used by the AWS account.
    public func getParameterHistoryPaginator(_ input: GetParameterHistoryRequest, onPage: @escaping (GetParameterHistoryResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: getParameterHistory, tokenKey: \GetParameterHistoryResult.nextToken, onPage: onPage)
    }

    ///  Retrieve information about one or more parameters in a specific hierarchy.   Request results are returned on a best-effort basis. If you specify MaxResults in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of MaxResults. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a NextToken. You can specify the NextToken in a subsequent call to get the next set of results. 
    public func getParametersByPathPaginator(_ input: GetParametersByPathRequest, onPage: @escaping (GetParametersByPathResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: getParametersByPath, tokenKey: \GetParametersByPathResult.nextToken, onPage: onPage)
    }

    ///  Retrieves all versions of an association for a specific association ID.
    public func listAssociationVersionsPaginator(_ input: ListAssociationVersionsRequest, onPage: @escaping (ListAssociationVersionsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listAssociationVersions, tokenKey: \ListAssociationVersionsResult.nextToken, onPage: onPage)
    }

    ///  Returns all State Manager associations in the current AWS account and Region. You can limit the results to a specific State Manager association document or instance by specifying a filter.
    public func listAssociationsPaginator(_ input: ListAssociationsRequest, onPage: @escaping (ListAssociationsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listAssociations, tokenKey: \ListAssociationsResult.nextToken, onPage: onPage)
    }

    ///  An invocation is copy of a command sent to a specific instance. A command can apply to one or more instances. A command invocation applies to one instance. For example, if a user runs SendCommand against three instances, then a command invocation is created for each requested instance ID. ListCommandInvocations provide status about command execution.
    public func listCommandInvocationsPaginator(_ input: ListCommandInvocationsRequest, onPage: @escaping (ListCommandInvocationsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listCommandInvocations, tokenKey: \ListCommandInvocationsResult.nextToken, onPage: onPage)
    }

    ///  Lists the commands requested by users of the AWS account.
    public func listCommandsPaginator(_ input: ListCommandsRequest, onPage: @escaping (ListCommandsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listCommands, tokenKey: \ListCommandsResult.nextToken, onPage: onPage)
    }

    ///  For a specified resource ID, this API action returns a list of compliance statuses for different resource types. Currently, you can only specify one resource ID per call. List results depend on the criteria specified in the filter.
    public func listComplianceItemsPaginator(_ input: ListComplianceItemsRequest, onPage: @escaping (ListComplianceItemsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listComplianceItems, tokenKey: \ListComplianceItemsResult.nextToken, onPage: onPage)
    }

    ///  Returns a summary count of compliant and non-compliant resources for a compliance type. For example, this call can return State Manager associations, patches, or custom compliance types according to the filter criteria that you specify.
    public func listComplianceSummariesPaginator(_ input: ListComplianceSummariesRequest, onPage: @escaping (ListComplianceSummariesResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listComplianceSummaries, tokenKey: \ListComplianceSummariesResult.nextToken, onPage: onPage)
    }

    ///  List all versions for a document.
    public func listDocumentVersionsPaginator(_ input: ListDocumentVersionsRequest, onPage: @escaping (ListDocumentVersionsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listDocumentVersions, tokenKey: \ListDocumentVersionsResult.nextToken, onPage: onPage)
    }

    ///  Returns all Systems Manager (SSM) documents in the current AWS account and Region. You can limit the results of this request by using a filter.
    public func listDocumentsPaginator(_ input: ListDocumentsRequest, onPage: @escaping (ListDocumentsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listDocuments, tokenKey: \ListDocumentsResult.nextToken, onPage: onPage)
    }

    ///  Returns a resource-level summary count. The summary includes information about compliant and non-compliant statuses and detailed compliance-item severity counts, according to the filter criteria you specify.
    public func listResourceComplianceSummariesPaginator(_ input: ListResourceComplianceSummariesRequest, onPage: @escaping (ListResourceComplianceSummariesResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listResourceComplianceSummaries, tokenKey: \ListResourceComplianceSummariesResult.nextToken, onPage: onPage)
    }

    ///  Lists your resource data sync configurations. Includes information about the last time a sync attempted to start, the last sync status, and the last time a sync successfully completed. The number of sync configurations might be too large to return using a single call to ListResourceDataSync. You can limit the number of sync configurations returned by using the MaxResults parameter. To determine whether there are more sync configurations to list, check the value of NextToken in the output. If there are more sync configurations to list, you can request them by specifying the NextToken returned in the call to the parameter of a subsequent call. 
    public func listResourceDataSyncPaginator(_ input: ListResourceDataSyncRequest, onPage: @escaping (ListResourceDataSyncResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listResourceDataSync, tokenKey: \ListResourceDataSyncResult.nextToken, onPage: onPage)
    }

}

extension SSM.DescribeActivationsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeActivationsRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribeAssociationExecutionTargetsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeAssociationExecutionTargetsRequest {
        return .init(
            associationId: self.associationId, 
            executionId: self.executionId, 
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribeAssociationExecutionsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeAssociationExecutionsRequest {
        return .init(
            associationId: self.associationId, 
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribeAutomationExecutionsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeAutomationExecutionsRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribeAutomationStepExecutionsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeAutomationStepExecutionsRequest {
        return .init(
            automationExecutionId: self.automationExecutionId, 
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token, 
            reverseOrder: self.reverseOrder
        )

    }
}

extension SSM.DescribeAvailablePatchesRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeAvailablePatchesRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribeEffectiveInstanceAssociationsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeEffectiveInstanceAssociationsRequest {
        return .init(
            instanceId: self.instanceId, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribeEffectivePatchesForPatchBaselineRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeEffectivePatchesForPatchBaselineRequest {
        return .init(
            baselineId: self.baselineId, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribeInstanceAssociationsStatusRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeInstanceAssociationsStatusRequest {
        return .init(
            instanceId: self.instanceId, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribeInstanceInformationRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeInstanceInformationRequest {
        return .init(
            filters: self.filters, 
            instanceInformationFilterList: self.instanceInformationFilterList, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribeInstancePatchStatesRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeInstancePatchStatesRequest {
        return .init(
            instanceIds: self.instanceIds, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribeInstancePatchStatesForPatchGroupRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeInstancePatchStatesForPatchGroupRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token, 
            patchGroup: self.patchGroup
        )

    }
}

extension SSM.DescribeInstancePatchesRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeInstancePatchesRequest {
        return .init(
            filters: self.filters, 
            instanceId: self.instanceId, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribeInventoryDeletionsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeInventoryDeletionsRequest {
        return .init(
            deletionId: self.deletionId, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribeMaintenanceWindowExecutionTaskInvocationsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeMaintenanceWindowExecutionTaskInvocationsRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token, 
            taskId: self.taskId, 
            windowExecutionId: self.windowExecutionId
        )

    }
}

extension SSM.DescribeMaintenanceWindowExecutionTasksRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeMaintenanceWindowExecutionTasksRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token, 
            windowExecutionId: self.windowExecutionId
        )

    }
}

extension SSM.DescribeMaintenanceWindowExecutionsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeMaintenanceWindowExecutionsRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token, 
            windowId: self.windowId
        )

    }
}

extension SSM.DescribeMaintenanceWindowScheduleRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeMaintenanceWindowScheduleRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token, 
            resourceType: self.resourceType, 
            targets: self.targets, 
            windowId: self.windowId
        )

    }
}

extension SSM.DescribeMaintenanceWindowTargetsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeMaintenanceWindowTargetsRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token, 
            windowId: self.windowId
        )

    }
}

extension SSM.DescribeMaintenanceWindowTasksRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeMaintenanceWindowTasksRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token, 
            windowId: self.windowId
        )

    }
}

extension SSM.DescribeMaintenanceWindowsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeMaintenanceWindowsRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribeMaintenanceWindowsForTargetRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeMaintenanceWindowsForTargetRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token, 
            resourceType: self.resourceType, 
            targets: self.targets
        )

    }
}

extension SSM.DescribeOpsItemsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeOpsItemsRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token, 
            opsItemFilters: self.opsItemFilters
        )

    }
}

extension SSM.DescribeParametersRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeParametersRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token, 
            parameterFilters: self.parameterFilters
        )

    }
}

extension SSM.DescribePatchBaselinesRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribePatchBaselinesRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribePatchGroupsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribePatchGroupsRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.DescribePatchPropertiesRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribePatchPropertiesRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token, 
            operatingSystem: self.operatingSystem, 
            patchSet: self.patchSet, 
            property: self.property
        )

    }
}

extension SSM.DescribeSessionsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.DescribeSessionsRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token, 
            state: self.state
        )

    }
}

extension SSM.GetInventoryRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.GetInventoryRequest {
        return .init(
            aggregators: self.aggregators, 
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token, 
            resultAttributes: self.resultAttributes
        )

    }
}

extension SSM.GetInventorySchemaRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.GetInventorySchemaRequest {
        return .init(
            aggregator: self.aggregator, 
            maxResults: self.maxResults, 
            nextToken: token, 
            subType: self.subType, 
            typeName: self.typeName
        )

    }
}

extension SSM.GetOpsSummaryRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.GetOpsSummaryRequest {
        return .init(
            aggregators: self.aggregators, 
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token, 
            resultAttributes: self.resultAttributes, 
            syncName: self.syncName
        )

    }
}

extension SSM.GetParameterHistoryRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.GetParameterHistoryRequest {
        return .init(
            maxResults: self.maxResults, 
            name: self.name, 
            nextToken: token, 
            withDecryption: self.withDecryption
        )

    }
}

extension SSM.GetParametersByPathRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.GetParametersByPathRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token, 
            parameterFilters: self.parameterFilters, 
            path: self.path, 
            recursive: self.recursive, 
            withDecryption: self.withDecryption
        )

    }
}

extension SSM.ListAssociationVersionsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.ListAssociationVersionsRequest {
        return .init(
            associationId: self.associationId, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.ListAssociationsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.ListAssociationsRequest {
        return .init(
            associationFilterList: self.associationFilterList, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.ListCommandInvocationsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.ListCommandInvocationsRequest {
        return .init(
            commandId: self.commandId, 
            details: self.details, 
            filters: self.filters, 
            instanceId: self.instanceId, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.ListCommandsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.ListCommandsRequest {
        return .init(
            commandId: self.commandId, 
            filters: self.filters, 
            instanceId: self.instanceId, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.ListComplianceItemsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.ListComplianceItemsRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token, 
            resourceIds: self.resourceIds, 
            resourceTypes: self.resourceTypes
        )

    }
}

extension SSM.ListComplianceSummariesRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.ListComplianceSummariesRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.ListDocumentVersionsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.ListDocumentVersionsRequest {
        return .init(
            maxResults: self.maxResults, 
            name: self.name, 
            nextToken: token
        )

    }
}

extension SSM.ListDocumentsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.ListDocumentsRequest {
        return .init(
            documentFilterList: self.documentFilterList, 
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.ListResourceComplianceSummariesRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.ListResourceComplianceSummariesRequest {
        return .init(
            filters: self.filters, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension SSM.ListResourceDataSyncRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> SSM.ListResourceDataSyncRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token, 
            syncType: self.syncType
        )

    }
}


