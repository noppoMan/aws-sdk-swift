// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension PersonalizeRuntime {
    //MARK: Enums

    //MARK: Shapes

    public struct GetPersonalizedRankingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "campaignArn", required: true, type: .string), 
            AWSShapeMember(label: "context", required: false, type: .map), 
            AWSShapeMember(label: "filterArn", required: false, type: .string), 
            AWSShapeMember(label: "inputList", required: true, type: .list), 
            AWSShapeMember(label: "userId", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the campaign to use for generating the personalized ranking.
        public let campaignArn: String
        /// The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.
        public let context: [String: String]?
        /// The Amazon Resource Name (ARN) of a filter you created to include or exclude items from recommendations for a given user.
        public let filterArn: String?
        /// A list of items (by itemId) to rank. If an item was not included in the training dataset, the item is appended to the end of the reranked list. The maximum is 500.
        public let inputList: [String]
        /// The user for which you want the campaign to provide a personalized ranking.
        public let userId: String

        public init(campaignArn: String, context: [String: String]? = nil, filterArn: String? = nil, inputList: [String], userId: String) {
            self.campaignArn = campaignArn
            self.context = context
            self.filterArn = filterArn
            self.inputList = inputList
            self.userId = userId
        }

        public func validate(name: String) throws {
            try validate(self.campaignArn, name:"campaignArn", parent: name, max: 256)
            try validate(self.campaignArn, name:"campaignArn", parent: name, pattern: "arn:([a-z\\d-]+):personalize:.*:.*:.+")
            try self.context?.forEach {
                try validate($0.key, name:"context.key", parent: name, max: 150)
                try validate($0.key, name:"context.key", parent: name, pattern: "[A-Za-z\\d_]+")
                try validate($0.value, name:"context[\"\($0.key)\"]", parent: name, max: 1000)
            }
            try validate(self.filterArn, name:"filterArn", parent: name, max: 256)
            try validate(self.filterArn, name:"filterArn", parent: name, pattern: "arn:([a-z\\d-]+):personalize:.*:.*:.+")
            try self.inputList.forEach {
                try validate($0, name: "inputList[]", parent: name, max: 256)
            }
            try validate(self.userId, name:"userId", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case campaignArn = "campaignArn"
            case context = "context"
            case filterArn = "filterArn"
            case inputList = "inputList"
            case userId = "userId"
        }
    }

    public struct GetPersonalizedRankingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "personalizedRanking", required: false, type: .list), 
            AWSShapeMember(label: "recommendationId", required: false, type: .string)
        ]

        /// A list of items in order of most likely interest to the user. The maximum is 500.
        public let personalizedRanking: [PredictedItem]?
        /// The ID of the recommendation.
        public let recommendationId: String?

        public init(personalizedRanking: [PredictedItem]? = nil, recommendationId: String? = nil) {
            self.personalizedRanking = personalizedRanking
            self.recommendationId = recommendationId
        }

        private enum CodingKeys: String, CodingKey {
            case personalizedRanking = "personalizedRanking"
            case recommendationId = "recommendationId"
        }
    }

    public struct GetRecommendationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "campaignArn", required: true, type: .string), 
            AWSShapeMember(label: "context", required: false, type: .map), 
            AWSShapeMember(label: "filterArn", required: false, type: .string), 
            AWSShapeMember(label: "itemId", required: false, type: .string), 
            AWSShapeMember(label: "numResults", required: false, type: .integer), 
            AWSShapeMember(label: "userId", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the campaign to use for getting recommendations.
        public let campaignArn: String
        /// The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.
        public let context: [String: String]?
        /// The ARN of the filter to apply to the returned recommendations. For more information, see Using Filters with Amazon Personalize. When using this parameter, be sure the filter resource is ACTIVE.
        public let filterArn: String?
        /// The item ID to provide recommendations for. Required for RELATED_ITEMS recipe type.
        public let itemId: String?
        /// The number of results to return. The default is 25. The maximum is 500.
        public let numResults: Int?
        /// The user ID to provide recommendations for. Required for USER_PERSONALIZATION recipe type.
        public let userId: String?

        public init(campaignArn: String, context: [String: String]? = nil, filterArn: String? = nil, itemId: String? = nil, numResults: Int? = nil, userId: String? = nil) {
            self.campaignArn = campaignArn
            self.context = context
            self.filterArn = filterArn
            self.itemId = itemId
            self.numResults = numResults
            self.userId = userId
        }

        public func validate(name: String) throws {
            try validate(self.campaignArn, name:"campaignArn", parent: name, max: 256)
            try validate(self.campaignArn, name:"campaignArn", parent: name, pattern: "arn:([a-z\\d-]+):personalize:.*:.*:.+")
            try self.context?.forEach {
                try validate($0.key, name:"context.key", parent: name, max: 150)
                try validate($0.key, name:"context.key", parent: name, pattern: "[A-Za-z\\d_]+")
                try validate($0.value, name:"context[\"\($0.key)\"]", parent: name, max: 1000)
            }
            try validate(self.filterArn, name:"filterArn", parent: name, max: 256)
            try validate(self.filterArn, name:"filterArn", parent: name, pattern: "arn:([a-z\\d-]+):personalize:.*:.*:.+")
            try validate(self.itemId, name:"itemId", parent: name, max: 256)
            try validate(self.numResults, name:"numResults", parent: name, min: 0)
            try validate(self.userId, name:"userId", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case campaignArn = "campaignArn"
            case context = "context"
            case filterArn = "filterArn"
            case itemId = "itemId"
            case numResults = "numResults"
            case userId = "userId"
        }
    }

    public struct GetRecommendationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "itemList", required: false, type: .list), 
            AWSShapeMember(label: "recommendationId", required: false, type: .string)
        ]

        /// A list of recommendations sorted in ascending order by prediction score. There can be a maximum of 500 items in the list.
        public let itemList: [PredictedItem]?
        /// The ID of the recommendation.
        public let recommendationId: String?

        public init(itemList: [PredictedItem]? = nil, recommendationId: String? = nil) {
            self.itemList = itemList
            self.recommendationId = recommendationId
        }

        private enum CodingKeys: String, CodingKey {
            case itemList = "itemList"
            case recommendationId = "recommendationId"
        }
    }

    public struct PredictedItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "itemId", required: false, type: .string), 
            AWSShapeMember(label: "score", required: false, type: .double)
        ]

        /// The recommended item ID.
        public let itemId: String?
        /// A numeric representation of the model's certainty that the item will be the next user selection. For more information on scoring logic, see how-scores-work.
        public let score: Double?

        public init(itemId: String? = nil, score: Double? = nil) {
            self.itemId = itemId
            self.score = score
        }

        private enum CodingKeys: String, CodingKey {
            case itemId = "itemId"
            case score = "score"
        }
    }
}
