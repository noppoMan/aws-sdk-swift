// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Macie2 {
    //MARK: Enums

    public enum AdminStatus: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disablingInProgress = "DISABLING_IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public enum Currency: String, CustomStringConvertible, Codable {
        case usd = "USD"
        public var description: String { return self.rawValue }
    }

    public enum DayOfWeek: String, CustomStringConvertible, Codable {
        case sunday = "SUNDAY"
        case monday = "MONDAY"
        case tuesday = "TUESDAY"
        case wednesday = "WEDNESDAY"
        case thursday = "THURSDAY"
        case friday = "FRIDAY"
        case saturday = "SATURDAY"
        public var description: String { return self.rawValue }
    }

    public enum EffectivePermission: String, CustomStringConvertible, Codable {
        case `public` = "PUBLIC"
        case notPublic = "NOT_PUBLIC"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum EncryptionType: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case aes256 = "AES256"
        case awsKms = "aws:kms"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum ErrorCode: String, CustomStringConvertible, Codable {
        case clienterror = "ClientError"
        case internalerror = "InternalError"
        public var description: String { return self.rawValue }
    }

    public enum FindingActionType: String, CustomStringConvertible, Codable {
        case awsApiCall = "AWS_API_CALL"
        public var description: String { return self.rawValue }
    }

    public enum FindingCategory: String, CustomStringConvertible, Codable {
        case classification = "CLASSIFICATION"
        case policy = "POLICY"
        public var description: String { return self.rawValue }
    }

    public enum FindingPublishingFrequency: String, CustomStringConvertible, Codable {
        case fifteenMinutes = "FIFTEEN_MINUTES"
        case oneHour = "ONE_HOUR"
        case sixHours = "SIX_HOURS"
        public var description: String { return self.rawValue }
    }

    public enum FindingStatisticsSortAttributeName: String, CustomStringConvertible, Codable {
        case groupkey = "groupKey"
        case count = "count"
        public var description: String { return self.rawValue }
    }

    public enum FindingType: String, CustomStringConvertible, Codable {
        case sensitivedataS3ObjectMultiple = "SensitiveData:S3Object/Multiple"
        case sensitivedataS3ObjectFinancial = "SensitiveData:S3Object/Financial"
        case sensitivedataS3ObjectPersonal = "SensitiveData:S3Object/Personal"
        case sensitivedataS3ObjectCredentials = "SensitiveData:S3Object/Credentials"
        case sensitivedataS3ObjectCustomidentifier = "SensitiveData:S3Object/CustomIdentifier"
        case policyIamuserS3Bucketpublic = "Policy:IAMUser/S3BucketPublic"
        case policyIamuserS3Bucketsharedexternally = "Policy:IAMUser/S3BucketSharedExternally"
        case policyIamuserS3Bucketreplicatedexternally = "Policy:IAMUser/S3BucketReplicatedExternally"
        case policyIamuserS3Bucketencryptiondisabled = "Policy:IAMUser/S3BucketEncryptionDisabled"
        case policyIamuserS3Blockpublicaccessdisabled = "Policy:IAMUser/S3BlockPublicAccessDisabled"
        public var description: String { return self.rawValue }
    }

    public enum FindingsFilterAction: String, CustomStringConvertible, Codable {
        case archive = "ARCHIVE"
        case noop = "NOOP"
        public var description: String { return self.rawValue }
    }

    public enum GroupBy: String, CustomStringConvertible, Codable {
        case resourcesaffectedS3BucketName = "resourcesAffected.s3Bucket.name"
        case `type` = "type"
        case classificationdetailsJobid = "classificationDetails.jobId"
        case severityDescription = "severity.description"
        public var description: String { return self.rawValue }
    }

    public enum JobComparator: String, CustomStringConvertible, Codable {
        case eq = "EQ"
        case gt = "GT"
        case gte = "GTE"
        case lt = "LT"
        case lte = "LTE"
        case ne = "NE"
        case contains = "CONTAINS"
        public var description: String { return self.rawValue }
    }

    public enum JobStatus: String, CustomStringConvertible, Codable {
        case running = "RUNNING"
        case paused = "PAUSED"
        case cancelled = "CANCELLED"
        case complete = "COMPLETE"
        case idle = "IDLE"
        public var description: String { return self.rawValue }
    }

    public enum JobType: String, CustomStringConvertible, Codable {
        case oneTime = "ONE_TIME"
        case scheduled = "SCHEDULED"
        public var description: String { return self.rawValue }
    }

    public enum ListJobsFilterKey: String, CustomStringConvertible, Codable {
        case jobtype = "jobType"
        case jobstatus = "jobStatus"
        case createdat = "createdAt"
        case name = "name"
        public var description: String { return self.rawValue }
    }

    public enum ListJobsSortAttributeName: String, CustomStringConvertible, Codable {
        case createdat = "createdAt"
        case jobstatus = "jobStatus"
        case name = "name"
        case jobtype = "jobType"
        public var description: String { return self.rawValue }
    }

    public enum MacieStatus: String, CustomStringConvertible, Codable {
        case paused = "PAUSED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum OrderBy: String, CustomStringConvertible, Codable {
        case asc = "ASC"
        case desc = "DESC"
        public var description: String { return self.rawValue }
    }

    public enum RelationshipStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case paused = "Paused"
        case invited = "Invited"
        case created = "Created"
        case removed = "Removed"
        case resigned = "Resigned"
        case emailverificationinprogress = "EmailVerificationInProgress"
        case emailverificationfailed = "EmailVerificationFailed"
        case regiondisabled = "RegionDisabled"
        case accountsuspended = "AccountSuspended"
        public var description: String { return self.rawValue }
    }

    public enum ScopeFilterKey: String, CustomStringConvertible, Codable {
        case bucketCreationDate = "BUCKET_CREATION_DATE"
        case objectExtension = "OBJECT_EXTENSION"
        case objectLastModifiedDate = "OBJECT_LAST_MODIFIED_DATE"
        case objectSize = "OBJECT_SIZE"
        case tag = "TAG"
        public var description: String { return self.rawValue }
    }

    public enum SensitiveDataItemCategory: String, CustomStringConvertible, Codable {
        case financialInformation = "FINANCIAL_INFORMATION"
        case personalInformation = "PERSONAL_INFORMATION"
        case credentials = "CREDENTIALS"
        case customIdentifier = "CUSTOM_IDENTIFIER"
        public var description: String { return self.rawValue }
    }

    public enum SeverityDescription: String, CustomStringConvertible, Codable {
        case low = "Low"
        case medium = "Medium"
        case high = "High"
        public var description: String { return self.rawValue }
    }

    public enum SharedAccess: String, CustomStringConvertible, Codable {
        case external = "EXTERNAL"
        case `internal` = "INTERNAL"
        case notShared = "NOT_SHARED"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum StorageClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        case reducedRedundancy = "REDUCED_REDUNDANCY"
        case standardIa = "STANDARD_IA"
        case intelligentTiering = "INTELLIGENT_TIERING"
        case deepArchive = "DEEP_ARCHIVE"
        case onezoneIa = "ONEZONE_IA"
        case glacier = "GLACIER"
        public var description: String { return self.rawValue }
    }

    public enum TagTarget: String, CustomStringConvertible, Codable {
        case s3Object = "S3_OBJECT"
        public var description: String { return self.rawValue }
    }

    public enum Unit: String, CustomStringConvertible, Codable {
        case terabytes = "TERABYTES"
        public var description: String { return self.rawValue }
    }

    public enum UsageStatisticsFilterComparator: String, CustomStringConvertible, Codable {
        case gt = "GT"
        case gte = "GTE"
        case lt = "LT"
        case lte = "LTE"
        case eq = "EQ"
        case ne = "NE"
        case contains = "CONTAINS"
        public var description: String { return self.rawValue }
    }

    public enum UsageStatisticsFilterKey: String, CustomStringConvertible, Codable {
        case accountid = "accountId"
        case servicelimit = "serviceLimit"
        case freetrialstartdate = "freeTrialStartDate"
        case total = "total"
        public var description: String { return self.rawValue }
    }

    public enum UsageStatisticsSortKey: String, CustomStringConvertible, Codable {
        case accountid = "accountId"
        case total = "total"
        case servicelimitvalue = "serviceLimitValue"
        case freetrialstartdate = "freeTrialStartDate"
        public var description: String { return self.rawValue }
    }

    public enum UsageType: String, CustomStringConvertible, Codable {
        case dataInventoryEvaluation = "DATA_INVENTORY_EVALUATION"
        case sensitiveDataDiscovery = "SENSITIVE_DATA_DISCOVERY"
        public var description: String { return self.rawValue }
    }

    public enum UserIdentityType: String, CustomStringConvertible, Codable {
        case assumedrole = "AssumedRole"
        case iamuser = "IAMUser"
        case federateduser = "FederatedUser"
        case root = "Root"
        case awsaccount = "AWSAccount"
        case awsservice = "AWSService"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AcceptInvitationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "invitationId", location: .body(locationName: "invitationId"), required: true, type: .string), 
            AWSShapeMember(label: "masterAccount", location: .body(locationName: "masterAccount"), required: true, type: .string)
        ]

        public let invitationId: String
        public let masterAccount: String

        public init(invitationId: String, masterAccount: String) {
            self.invitationId = invitationId
            self.masterAccount = masterAccount
        }

        private enum CodingKeys: String, CodingKey {
            case invitationId = "invitationId"
            case masterAccount = "masterAccount"
        }
    }

    public struct AcceptInvitationResponse: AWSShape {


        public init() {
        }

    }

    public struct AccessControlList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "allowsPublicReadAccess", location: .body(locationName: "allowsPublicReadAccess"), required: false, type: .boolean), 
            AWSShapeMember(label: "allowsPublicWriteAccess", location: .body(locationName: "allowsPublicWriteAccess"), required: false, type: .boolean)
        ]

        public let allowsPublicReadAccess: Bool?
        public let allowsPublicWriteAccess: Bool?

        public init(allowsPublicReadAccess: Bool? = nil, allowsPublicWriteAccess: Bool? = nil) {
            self.allowsPublicReadAccess = allowsPublicReadAccess
            self.allowsPublicWriteAccess = allowsPublicWriteAccess
        }

        private enum CodingKeys: String, CodingKey {
            case allowsPublicReadAccess = "allowsPublicReadAccess"
            case allowsPublicWriteAccess = "allowsPublicWriteAccess"
        }
    }

    public struct AccountDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: true, type: .string), 
            AWSShapeMember(label: "email", location: .body(locationName: "email"), required: true, type: .string)
        ]

        public let accountId: String
        public let email: String

        public init(accountId: String, email: String) {
            self.accountId = accountId
            self.email = email
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case email = "email"
        }
    }

    public struct AccountLevelPermissions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "blockPublicAccess", location: .body(locationName: "blockPublicAccess"), required: false, type: .structure)
        ]

        public let blockPublicAccess: BlockPublicAccess?

        public init(blockPublicAccess: BlockPublicAccess? = nil) {
            self.blockPublicAccess = blockPublicAccess
        }

        private enum CodingKeys: String, CodingKey {
            case blockPublicAccess = "blockPublicAccess"
        }
    }

    public struct AdminAccount: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        public let accountId: String?
        public let status: AdminStatus?

        public init(accountId: String? = nil, status: AdminStatus? = nil) {
            self.accountId = accountId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case status = "status"
        }
    }

    public struct ApiCallDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "api", location: .body(locationName: "api"), required: false, type: .string), 
            AWSShapeMember(label: "apiServiceName", location: .body(locationName: "apiServiceName"), required: false, type: .string), 
            AWSShapeMember(label: "firstSeen", location: .body(locationName: "firstSeen"), required: false, type: .timestamp), 
            AWSShapeMember(label: "lastSeen", location: .body(locationName: "lastSeen"), required: false, type: .timestamp)
        ]

        public let api: String?
        public let apiServiceName: String?
        public let firstSeen: TimeStamp?
        public let lastSeen: TimeStamp?

        public init(api: String? = nil, apiServiceName: String? = nil, firstSeen: TimeStamp? = nil, lastSeen: TimeStamp? = nil) {
            self.api = api
            self.apiServiceName = apiServiceName
            self.firstSeen = firstSeen
            self.lastSeen = lastSeen
        }

        private enum CodingKeys: String, CodingKey {
            case api = "api"
            case apiServiceName = "apiServiceName"
            case firstSeen = "firstSeen"
            case lastSeen = "lastSeen"
        }
    }

    public struct AssumedRole: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accessKeyId", location: .body(locationName: "accessKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "principalId", location: .body(locationName: "principalId"), required: false, type: .string), 
            AWSShapeMember(label: "sessionContext", location: .body(locationName: "sessionContext"), required: false, type: .structure)
        ]

        public let accessKeyId: String?
        public let accountId: String?
        public let arn: String?
        public let principalId: String?
        public let sessionContext: SessionContext?

        public init(accessKeyId: String? = nil, accountId: String? = nil, arn: String? = nil, principalId: String? = nil, sessionContext: SessionContext? = nil) {
            self.accessKeyId = accessKeyId
            self.accountId = accountId
            self.arn = arn
            self.principalId = principalId
            self.sessionContext = sessionContext
        }

        private enum CodingKeys: String, CodingKey {
            case accessKeyId = "accessKeyId"
            case accountId = "accountId"
            case arn = "arn"
            case principalId = "principalId"
            case sessionContext = "sessionContext"
        }
    }

    public struct AwsAccount: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "principalId", location: .body(locationName: "principalId"), required: false, type: .string)
        ]

        public let accountId: String?
        public let principalId: String?

        public init(accountId: String? = nil, principalId: String? = nil) {
            self.accountId = accountId
            self.principalId = principalId
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case principalId = "principalId"
        }
    }

    public struct AwsService: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "invokedBy", location: .body(locationName: "invokedBy"), required: false, type: .string)
        ]

        public let invokedBy: String?

        public init(invokedBy: String? = nil) {
            self.invokedBy = invokedBy
        }

        private enum CodingKeys: String, CodingKey {
            case invokedBy = "invokedBy"
        }
    }

    public struct BatchGetCustomDataIdentifierSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "createdAt", location: .body(locationName: "createdAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "deleted", location: .body(locationName: "deleted"), required: false, type: .boolean), 
            AWSShapeMember(label: "description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        public let arn: String?
        public let createdAt: TimeStamp?
        public let deleted: Bool?
        public let description: String?
        public let id: String?
        public let name: String?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, deleted: Bool? = nil, description: String? = nil, id: String? = nil, name: String? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.deleted = deleted
            self.description = description
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case deleted = "deleted"
            case description = "description"
            case id = "id"
            case name = "name"
        }
    }

    public struct BatchGetCustomDataIdentifiersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ids", location: .body(locationName: "ids"), required: false, type: .list)
        ]

        public let ids: [String]?

        public init(ids: [String]? = nil) {
            self.ids = ids
        }

        private enum CodingKeys: String, CodingKey {
            case ids = "ids"
        }
    }

    public struct BatchGetCustomDataIdentifiersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "customDataIdentifiers", location: .body(locationName: "customDataIdentifiers"), required: false, type: .list), 
            AWSShapeMember(label: "notFoundIdentifierIds", location: .body(locationName: "notFoundIdentifierIds"), required: false, type: .list)
        ]

        public let customDataIdentifiers: [BatchGetCustomDataIdentifierSummary]?
        public let notFoundIdentifierIds: [String]?

        public init(customDataIdentifiers: [BatchGetCustomDataIdentifierSummary]? = nil, notFoundIdentifierIds: [String]? = nil) {
            self.customDataIdentifiers = customDataIdentifiers
            self.notFoundIdentifierIds = notFoundIdentifierIds
        }

        private enum CodingKeys: String, CodingKey {
            case customDataIdentifiers = "customDataIdentifiers"
            case notFoundIdentifierIds = "notFoundIdentifierIds"
        }
    }

    public struct BlockPublicAccess: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "blockPublicAcls", location: .body(locationName: "blockPublicAcls"), required: false, type: .boolean), 
            AWSShapeMember(label: "blockPublicPolicy", location: .body(locationName: "blockPublicPolicy"), required: false, type: .boolean), 
            AWSShapeMember(label: "ignorePublicAcls", location: .body(locationName: "ignorePublicAcls"), required: false, type: .boolean), 
            AWSShapeMember(label: "restrictPublicBuckets", location: .body(locationName: "restrictPublicBuckets"), required: false, type: .boolean)
        ]

        public let blockPublicAcls: Bool?
        public let blockPublicPolicy: Bool?
        public let ignorePublicAcls: Bool?
        public let restrictPublicBuckets: Bool?

        public init(blockPublicAcls: Bool? = nil, blockPublicPolicy: Bool? = nil, ignorePublicAcls: Bool? = nil, restrictPublicBuckets: Bool? = nil) {
            self.blockPublicAcls = blockPublicAcls
            self.blockPublicPolicy = blockPublicPolicy
            self.ignorePublicAcls = ignorePublicAcls
            self.restrictPublicBuckets = restrictPublicBuckets
        }

        private enum CodingKeys: String, CodingKey {
            case blockPublicAcls = "blockPublicAcls"
            case blockPublicPolicy = "blockPublicPolicy"
            case ignorePublicAcls = "ignorePublicAcls"
            case restrictPublicBuckets = "restrictPublicBuckets"
        }
    }

    public struct BucketCountByEffectivePermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "publiclyAccessible", location: .body(locationName: "publiclyAccessible"), required: false, type: .long), 
            AWSShapeMember(label: "publiclyReadable", location: .body(locationName: "publiclyReadable"), required: false, type: .long), 
            AWSShapeMember(label: "publiclyWritable", location: .body(locationName: "publiclyWritable"), required: false, type: .long)
        ]

        public let publiclyAccessible: Int64?
        public let publiclyReadable: Int64?
        public let publiclyWritable: Int64?

        public init(publiclyAccessible: Int64? = nil, publiclyReadable: Int64? = nil, publiclyWritable: Int64? = nil) {
            self.publiclyAccessible = publiclyAccessible
            self.publiclyReadable = publiclyReadable
            self.publiclyWritable = publiclyWritable
        }

        private enum CodingKeys: String, CodingKey {
            case publiclyAccessible = "publiclyAccessible"
            case publiclyReadable = "publiclyReadable"
            case publiclyWritable = "publiclyWritable"
        }
    }

    public struct BucketCountByEncryptionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "kmsManaged", location: .body(locationName: "kmsManaged"), required: false, type: .long), 
            AWSShapeMember(label: "s3Managed", location: .body(locationName: "s3Managed"), required: false, type: .long), 
            AWSShapeMember(label: "unencrypted", location: .body(locationName: "unencrypted"), required: false, type: .long)
        ]

        public let kmsManaged: Int64?
        public let s3Managed: Int64?
        public let unencrypted: Int64?

        public init(kmsManaged: Int64? = nil, s3Managed: Int64? = nil, unencrypted: Int64? = nil) {
            self.kmsManaged = kmsManaged
            self.s3Managed = s3Managed
            self.unencrypted = unencrypted
        }

        private enum CodingKeys: String, CodingKey {
            case kmsManaged = "kmsManaged"
            case s3Managed = "s3Managed"
            case unencrypted = "unencrypted"
        }
    }

    public struct BucketCountBySharedAccessType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "external", location: .body(locationName: "external"), required: false, type: .long), 
            AWSShapeMember(label: "internal", location: .body(locationName: "internal"), required: false, type: .long), 
            AWSShapeMember(label: "notShared", location: .body(locationName: "notShared"), required: false, type: .long)
        ]

        public let external: Int64?
        public let `internal`: Int64?
        public let notShared: Int64?

        public init(external: Int64? = nil, internal: Int64? = nil, notShared: Int64? = nil) {
            self.external = external
            self.`internal` = `internal`
            self.notShared = notShared
        }

        private enum CodingKeys: String, CodingKey {
            case external = "external"
            case `internal` = "internal"
            case notShared = "notShared"
        }
    }

    public struct BucketCriteriaAdditionalProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "eq", location: .body(locationName: "eq"), required: false, type: .list), 
            AWSShapeMember(label: "gt", location: .body(locationName: "gt"), required: false, type: .long), 
            AWSShapeMember(label: "gte", location: .body(locationName: "gte"), required: false, type: .long), 
            AWSShapeMember(label: "lt", location: .body(locationName: "lt"), required: false, type: .long), 
            AWSShapeMember(label: "lte", location: .body(locationName: "lte"), required: false, type: .long), 
            AWSShapeMember(label: "neq", location: .body(locationName: "neq"), required: false, type: .list), 
            AWSShapeMember(label: "prefix", location: .body(locationName: "prefix"), required: false, type: .string)
        ]

        public let eq: [String]?
        public let gt: Int64?
        public let gte: Int64?
        public let lt: Int64?
        public let lte: Int64?
        public let neq: [String]?
        public let prefix: String?

        public init(eq: [String]? = nil, gt: Int64? = nil, gte: Int64? = nil, lt: Int64? = nil, lte: Int64? = nil, neq: [String]? = nil, prefix: String? = nil) {
            self.eq = eq
            self.gt = gt
            self.gte = gte
            self.lt = lt
            self.lte = lte
            self.neq = neq
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case eq = "eq"
            case gt = "gt"
            case gte = "gte"
            case lt = "lt"
            case lte = "lte"
            case neq = "neq"
            case prefix = "prefix"
        }
    }

    public struct BucketLevelPermissions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accessControlList", location: .body(locationName: "accessControlList"), required: false, type: .structure), 
            AWSShapeMember(label: "blockPublicAccess", location: .body(locationName: "blockPublicAccess"), required: false, type: .structure), 
            AWSShapeMember(label: "bucketPolicy", location: .body(locationName: "bucketPolicy"), required: false, type: .structure)
        ]

        public let accessControlList: AccessControlList?
        public let blockPublicAccess: BlockPublicAccess?
        public let bucketPolicy: BucketPolicy?

        public init(accessControlList: AccessControlList? = nil, blockPublicAccess: BlockPublicAccess? = nil, bucketPolicy: BucketPolicy? = nil) {
            self.accessControlList = accessControlList
            self.blockPublicAccess = blockPublicAccess
            self.bucketPolicy = bucketPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case accessControlList = "accessControlList"
            case blockPublicAccess = "blockPublicAccess"
            case bucketPolicy = "bucketPolicy"
        }
    }

    public struct BucketMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "bucketArn", location: .body(locationName: "bucketArn"), required: false, type: .string), 
            AWSShapeMember(label: "bucketCreatedAt", location: .body(locationName: "bucketCreatedAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "bucketName", location: .body(locationName: "bucketName"), required: false, type: .string), 
            AWSShapeMember(label: "classifiableObjectCount", location: .body(locationName: "classifiableObjectCount"), required: false, type: .long), 
            AWSShapeMember(label: "classifiableSizeInBytes", location: .body(locationName: "classifiableSizeInBytes"), required: false, type: .long), 
            AWSShapeMember(label: "lastUpdated", location: .body(locationName: "lastUpdated"), required: false, type: .timestamp), 
            AWSShapeMember(label: "objectCount", location: .body(locationName: "objectCount"), required: false, type: .long), 
            AWSShapeMember(label: "objectCountByEncryptionType", location: .body(locationName: "objectCountByEncryptionType"), required: false, type: .structure), 
            AWSShapeMember(label: "publicAccess", location: .body(locationName: "publicAccess"), required: false, type: .structure), 
            AWSShapeMember(label: "region", location: .body(locationName: "region"), required: false, type: .string), 
            AWSShapeMember(label: "replicationDetails", location: .body(locationName: "replicationDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "sharedAccess", location: .body(locationName: "sharedAccess"), required: false, type: .enum), 
            AWSShapeMember(label: "sizeInBytes", location: .body(locationName: "sizeInBytes"), required: false, type: .long), 
            AWSShapeMember(label: "sizeInBytesCompressed", location: .body(locationName: "sizeInBytesCompressed"), required: false, type: .long), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .list), 
            AWSShapeMember(label: "unclassifiableObjectCount", location: .body(locationName: "unclassifiableObjectCount"), required: false, type: .structure), 
            AWSShapeMember(label: "unclassifiableObjectSizeInBytes", location: .body(locationName: "unclassifiableObjectSizeInBytes"), required: false, type: .structure), 
            AWSShapeMember(label: "versioning", location: .body(locationName: "versioning"), required: false, type: .boolean)
        ]

        public let accountId: String?
        public let bucketArn: String?
        public let bucketCreatedAt: TimeStamp?
        public let bucketName: String?
        public let classifiableObjectCount: Int64?
        public let classifiableSizeInBytes: Int64?
        public let lastUpdated: TimeStamp?
        public let objectCount: Int64?
        public let objectCountByEncryptionType: ObjectCountByEncryptionType?
        public let publicAccess: BucketPublicAccess?
        public let region: String?
        public let replicationDetails: ReplicationDetails?
        public let sharedAccess: SharedAccess?
        public let sizeInBytes: Int64?
        public let sizeInBytesCompressed: Int64?
        public let tags: [KeyValuePair]?
        public let unclassifiableObjectCount: ObjectLevelStatistics?
        public let unclassifiableObjectSizeInBytes: ObjectLevelStatistics?
        public let versioning: Bool?

        public init(accountId: String? = nil, bucketArn: String? = nil, bucketCreatedAt: TimeStamp? = nil, bucketName: String? = nil, classifiableObjectCount: Int64? = nil, classifiableSizeInBytes: Int64? = nil, lastUpdated: TimeStamp? = nil, objectCount: Int64? = nil, objectCountByEncryptionType: ObjectCountByEncryptionType? = nil, publicAccess: BucketPublicAccess? = nil, region: String? = nil, replicationDetails: ReplicationDetails? = nil, sharedAccess: SharedAccess? = nil, sizeInBytes: Int64? = nil, sizeInBytesCompressed: Int64? = nil, tags: [KeyValuePair]? = nil, unclassifiableObjectCount: ObjectLevelStatistics? = nil, unclassifiableObjectSizeInBytes: ObjectLevelStatistics? = nil, versioning: Bool? = nil) {
            self.accountId = accountId
            self.bucketArn = bucketArn
            self.bucketCreatedAt = bucketCreatedAt
            self.bucketName = bucketName
            self.classifiableObjectCount = classifiableObjectCount
            self.classifiableSizeInBytes = classifiableSizeInBytes
            self.lastUpdated = lastUpdated
            self.objectCount = objectCount
            self.objectCountByEncryptionType = objectCountByEncryptionType
            self.publicAccess = publicAccess
            self.region = region
            self.replicationDetails = replicationDetails
            self.sharedAccess = sharedAccess
            self.sizeInBytes = sizeInBytes
            self.sizeInBytesCompressed = sizeInBytesCompressed
            self.tags = tags
            self.unclassifiableObjectCount = unclassifiableObjectCount
            self.unclassifiableObjectSizeInBytes = unclassifiableObjectSizeInBytes
            self.versioning = versioning
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case bucketArn = "bucketArn"
            case bucketCreatedAt = "bucketCreatedAt"
            case bucketName = "bucketName"
            case classifiableObjectCount = "classifiableObjectCount"
            case classifiableSizeInBytes = "classifiableSizeInBytes"
            case lastUpdated = "lastUpdated"
            case objectCount = "objectCount"
            case objectCountByEncryptionType = "objectCountByEncryptionType"
            case publicAccess = "publicAccess"
            case region = "region"
            case replicationDetails = "replicationDetails"
            case sharedAccess = "sharedAccess"
            case sizeInBytes = "sizeInBytes"
            case sizeInBytesCompressed = "sizeInBytesCompressed"
            case tags = "tags"
            case unclassifiableObjectCount = "unclassifiableObjectCount"
            case unclassifiableObjectSizeInBytes = "unclassifiableObjectSizeInBytes"
            case versioning = "versioning"
        }
    }

    public struct BucketPermissionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountLevelPermissions", location: .body(locationName: "accountLevelPermissions"), required: false, type: .structure), 
            AWSShapeMember(label: "bucketLevelPermissions", location: .body(locationName: "bucketLevelPermissions"), required: false, type: .structure)
        ]

        public let accountLevelPermissions: AccountLevelPermissions?
        public let bucketLevelPermissions: BucketLevelPermissions?

        public init(accountLevelPermissions: AccountLevelPermissions? = nil, bucketLevelPermissions: BucketLevelPermissions? = nil) {
            self.accountLevelPermissions = accountLevelPermissions
            self.bucketLevelPermissions = bucketLevelPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case accountLevelPermissions = "accountLevelPermissions"
            case bucketLevelPermissions = "bucketLevelPermissions"
        }
    }

    public struct BucketPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "allowsPublicReadAccess", location: .body(locationName: "allowsPublicReadAccess"), required: false, type: .boolean), 
            AWSShapeMember(label: "allowsPublicWriteAccess", location: .body(locationName: "allowsPublicWriteAccess"), required: false, type: .boolean)
        ]

        public let allowsPublicReadAccess: Bool?
        public let allowsPublicWriteAccess: Bool?

        public init(allowsPublicReadAccess: Bool? = nil, allowsPublicWriteAccess: Bool? = nil) {
            self.allowsPublicReadAccess = allowsPublicReadAccess
            self.allowsPublicWriteAccess = allowsPublicWriteAccess
        }

        private enum CodingKeys: String, CodingKey {
            case allowsPublicReadAccess = "allowsPublicReadAccess"
            case allowsPublicWriteAccess = "allowsPublicWriteAccess"
        }
    }

    public struct BucketPublicAccess: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "effectivePermission", location: .body(locationName: "effectivePermission"), required: false, type: .enum), 
            AWSShapeMember(label: "permissionConfiguration", location: .body(locationName: "permissionConfiguration"), required: false, type: .structure)
        ]

        public let effectivePermission: EffectivePermission?
        public let permissionConfiguration: BucketPermissionConfiguration?

        public init(effectivePermission: EffectivePermission? = nil, permissionConfiguration: BucketPermissionConfiguration? = nil) {
            self.effectivePermission = effectivePermission
            self.permissionConfiguration = permissionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case effectivePermission = "effectivePermission"
            case permissionConfiguration = "permissionConfiguration"
        }
    }

    public struct BucketSortCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributeName", location: .body(locationName: "attributeName"), required: false, type: .string), 
            AWSShapeMember(label: "orderBy", location: .body(locationName: "orderBy"), required: false, type: .enum)
        ]

        public let attributeName: String?
        public let orderBy: OrderBy?

        public init(attributeName: String? = nil, orderBy: OrderBy? = nil) {
            self.attributeName = attributeName
            self.orderBy = orderBy
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
            case orderBy = "orderBy"
        }
    }

    public struct ClassificationDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detailedResultsLocation", location: .body(locationName: "detailedResultsLocation"), required: false, type: .string), 
            AWSShapeMember(label: "jobArn", location: .body(locationName: "jobArn"), required: false, type: .string), 
            AWSShapeMember(label: "jobId", location: .body(locationName: "jobId"), required: false, type: .string), 
            AWSShapeMember(label: "result", location: .body(locationName: "result"), required: false, type: .structure)
        ]

        public let detailedResultsLocation: String?
        public let jobArn: String?
        public let jobId: String?
        public let result: ClassificationResult?

        public init(detailedResultsLocation: String? = nil, jobArn: String? = nil, jobId: String? = nil, result: ClassificationResult? = nil) {
            self.detailedResultsLocation = detailedResultsLocation
            self.jobArn = jobArn
            self.jobId = jobId
            self.result = result
        }

        private enum CodingKeys: String, CodingKey {
            case detailedResultsLocation = "detailedResultsLocation"
            case jobArn = "jobArn"
            case jobId = "jobId"
            case result = "result"
        }
    }

    public struct ClassificationExportConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "s3Destination", location: .body(locationName: "s3Destination"), required: false, type: .structure)
        ]

        public let s3Destination: S3Destination?

        public init(s3Destination: S3Destination? = nil) {
            self.s3Destination = s3Destination
        }

        private enum CodingKeys: String, CodingKey {
            case s3Destination = "s3Destination"
        }
    }

    public struct ClassificationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "customDataIdentifiers", location: .body(locationName: "customDataIdentifiers"), required: false, type: .structure), 
            AWSShapeMember(label: "mimeType", location: .body(locationName: "mimeType"), required: false, type: .string), 
            AWSShapeMember(label: "sensitiveData", location: .body(locationName: "sensitiveData"), required: false, type: .list), 
            AWSShapeMember(label: "sizeClassified", location: .body(locationName: "sizeClassified"), required: false, type: .long), 
            AWSShapeMember(label: "status", location: .body(locationName: "status"), required: false, type: .structure)
        ]

        public let customDataIdentifiers: CustomDataIdentifiers?
        public let mimeType: String?
        public let sensitiveData: [SensitiveDataItem]?
        public let sizeClassified: Int64?
        public let status: ClassificationResultStatus?

        public init(customDataIdentifiers: CustomDataIdentifiers? = nil, mimeType: String? = nil, sensitiveData: [SensitiveDataItem]? = nil, sizeClassified: Int64? = nil, status: ClassificationResultStatus? = nil) {
            self.customDataIdentifiers = customDataIdentifiers
            self.mimeType = mimeType
            self.sensitiveData = sensitiveData
            self.sizeClassified = sizeClassified
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case customDataIdentifiers = "customDataIdentifiers"
            case mimeType = "mimeType"
            case sensitiveData = "sensitiveData"
            case sizeClassified = "sizeClassified"
            case status = "status"
        }
    }

    public struct ClassificationResultStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "reason", location: .body(locationName: "reason"), required: false, type: .string)
        ]

        public let code: String?
        public let reason: String?

        public init(code: String? = nil, reason: String? = nil) {
            self.code = code
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case reason = "reason"
        }
    }

    public struct CreateClassificationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", location: .body(locationName: "clientToken"), required: true, type: .string), 
            AWSShapeMember(label: "customDataIdentifierIds", location: .body(locationName: "customDataIdentifierIds"), required: false, type: .list), 
            AWSShapeMember(label: "description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "initialRun", location: .body(locationName: "initialRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "jobType", location: .body(locationName: "jobType"), required: true, type: .enum), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "s3JobDefinition", location: .body(locationName: "s3JobDefinition"), required: true, type: .structure), 
            AWSShapeMember(label: "samplingPercentage", location: .body(locationName: "samplingPercentage"), required: false, type: .integer), 
            AWSShapeMember(label: "scheduleFrequency", location: .body(locationName: "scheduleFrequency"), required: false, type: .structure), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let clientToken: String
        public let customDataIdentifierIds: [String]?
        public let description: String?
        public let initialRun: Bool?
        public let jobType: JobType
        public let name: String
        public let s3JobDefinition: S3JobDefinition
        public let samplingPercentage: Int?
        public let scheduleFrequency: JobScheduleFrequency?
        public let tags: [String: String]?

        public init(clientToken: String = CreateClassificationJobRequest.idempotencyToken(), customDataIdentifierIds: [String]? = nil, description: String? = nil, initialRun: Bool? = nil, jobType: JobType, name: String, s3JobDefinition: S3JobDefinition, samplingPercentage: Int? = nil, scheduleFrequency: JobScheduleFrequency? = nil, tags: [String: String]? = nil) {
            self.clientToken = clientToken
            self.customDataIdentifierIds = customDataIdentifierIds
            self.description = description
            self.initialRun = initialRun
            self.jobType = jobType
            self.name = name
            self.s3JobDefinition = s3JobDefinition
            self.samplingPercentage = samplingPercentage
            self.scheduleFrequency = scheduleFrequency
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case customDataIdentifierIds = "customDataIdentifierIds"
            case description = "description"
            case initialRun = "initialRun"
            case jobType = "jobType"
            case name = "name"
            case s3JobDefinition = "s3JobDefinition"
            case samplingPercentage = "samplingPercentage"
            case scheduleFrequency = "scheduleFrequency"
            case tags = "tags"
        }
    }

    public struct CreateClassificationJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobArn", location: .body(locationName: "jobArn"), required: false, type: .string), 
            AWSShapeMember(label: "jobId", location: .body(locationName: "jobId"), required: false, type: .string)
        ]

        public let jobArn: String?
        public let jobId: String?

        public init(jobArn: String? = nil, jobId: String? = nil) {
            self.jobArn = jobArn
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobArn = "jobArn"
            case jobId = "jobId"
        }
    }

    public struct CreateCustomDataIdentifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ignoreWords", location: .body(locationName: "ignoreWords"), required: false, type: .list), 
            AWSShapeMember(label: "keywords", location: .body(locationName: "keywords"), required: false, type: .list), 
            AWSShapeMember(label: "maximumMatchDistance", location: .body(locationName: "maximumMatchDistance"), required: false, type: .integer), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "regex", location: .body(locationName: "regex"), required: false, type: .string), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let clientToken: String?
        public let description: String?
        public let ignoreWords: [String]?
        public let keywords: [String]?
        public let maximumMatchDistance: Int?
        public let name: String?
        public let regex: String?
        public let tags: [String: String]?

        public init(clientToken: String? = CreateCustomDataIdentifierRequest.idempotencyToken(), description: String? = nil, ignoreWords: [String]? = nil, keywords: [String]? = nil, maximumMatchDistance: Int? = nil, name: String? = nil, regex: String? = nil, tags: [String: String]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.ignoreWords = ignoreWords
            self.keywords = keywords
            self.maximumMatchDistance = maximumMatchDistance
            self.name = name
            self.regex = regex
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case description = "description"
            case ignoreWords = "ignoreWords"
            case keywords = "keywords"
            case maximumMatchDistance = "maximumMatchDistance"
            case name = "name"
            case regex = "regex"
            case tags = "tags"
        }
    }

    public struct CreateCustomDataIdentifierResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "customDataIdentifierId", location: .body(locationName: "customDataIdentifierId"), required: false, type: .string)
        ]

        public let customDataIdentifierId: String?

        public init(customDataIdentifierId: String? = nil) {
            self.customDataIdentifierId = customDataIdentifierId
        }

        private enum CodingKeys: String, CodingKey {
            case customDataIdentifierId = "customDataIdentifierId"
        }
    }

    public struct CreateFindingsFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "action", location: .body(locationName: "action"), required: true, type: .enum), 
            AWSShapeMember(label: "clientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "findingCriteria", location: .body(locationName: "findingCriteria"), required: true, type: .structure), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "position", location: .body(locationName: "position"), required: false, type: .integer), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let action: FindingsFilterAction
        public let clientToken: String?
        public let description: String?
        public let findingCriteria: FindingCriteria
        public let name: String
        public let position: Int?
        public let tags: [String: String]?

        public init(action: FindingsFilterAction, clientToken: String? = CreateFindingsFilterRequest.idempotencyToken(), description: String? = nil, findingCriteria: FindingCriteria, name: String, position: Int? = nil, tags: [String: String]? = nil) {
            self.action = action
            self.clientToken = clientToken
            self.description = description
            self.findingCriteria = findingCriteria
            self.name = name
            self.position = position
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
            case clientToken = "clientToken"
            case description = "description"
            case findingCriteria = "findingCriteria"
            case name = "name"
            case position = "position"
            case tags = "tags"
        }
    }

    public struct CreateFindingsFilterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "id", location: .body(locationName: "id"), required: false, type: .string)
        ]

        public let arn: String?
        public let id: String?

        public init(arn: String? = nil, id: String? = nil) {
            self.arn = arn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case id = "id"
        }
    }

    public struct CreateInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountIds", location: .body(locationName: "accountIds"), required: true, type: .list), 
            AWSShapeMember(label: "disableEmailNotification", location: .body(locationName: "disableEmailNotification"), required: false, type: .boolean), 
            AWSShapeMember(label: "message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        public let accountIds: [String]
        public let disableEmailNotification: Bool?
        public let message: String?

        public init(accountIds: [String], disableEmailNotification: Bool? = nil, message: String? = nil) {
            self.accountIds = accountIds
            self.disableEmailNotification = disableEmailNotification
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
            case disableEmailNotification = "disableEmailNotification"
            case message = "message"
        }
    }

    public struct CreateInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "unprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]

        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct CreateMemberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "account", location: .body(locationName: "account"), required: true, type: .structure), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let account: AccountDetail
        public let tags: [String: String]?

        public init(account: AccountDetail, tags: [String: String]? = nil) {
            self.account = account
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case account = "account"
            case tags = "tags"
        }
    }

    public struct CreateMemberResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string)
        ]

        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public struct CreateSampleFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findingTypes", location: .body(locationName: "findingTypes"), required: false, type: .list)
        ]

        public let findingTypes: [FindingType]?

        public init(findingTypes: [FindingType]? = nil) {
            self.findingTypes = findingTypes
        }

        private enum CodingKeys: String, CodingKey {
            case findingTypes = "findingTypes"
        }
    }

    public struct CreateSampleFindingsResponse: AWSShape {


        public init() {
        }

    }

    public struct CriterionAdditionalProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "eq", location: .body(locationName: "eq"), required: false, type: .list), 
            AWSShapeMember(label: "gt", location: .body(locationName: "gt"), required: false, type: .long), 
            AWSShapeMember(label: "gte", location: .body(locationName: "gte"), required: false, type: .long), 
            AWSShapeMember(label: "lt", location: .body(locationName: "lt"), required: false, type: .long), 
            AWSShapeMember(label: "lte", location: .body(locationName: "lte"), required: false, type: .long), 
            AWSShapeMember(label: "neq", location: .body(locationName: "neq"), required: false, type: .list)
        ]

        public let eq: [String]?
        public let gt: Int64?
        public let gte: Int64?
        public let lt: Int64?
        public let lte: Int64?
        public let neq: [String]?

        public init(eq: [String]? = nil, gt: Int64? = nil, gte: Int64? = nil, lt: Int64? = nil, lte: Int64? = nil, neq: [String]? = nil) {
            self.eq = eq
            self.gt = gt
            self.gte = gte
            self.lt = lt
            self.lte = lte
            self.neq = neq
        }

        private enum CodingKeys: String, CodingKey {
            case eq = "eq"
            case gt = "gt"
            case gte = "gte"
            case lt = "lt"
            case lte = "lte"
            case neq = "neq"
        }
    }

    public struct CustomDataIdentifierSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "createdAt", location: .body(locationName: "createdAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        public let arn: String?
        public let createdAt: TimeStamp?
        public let description: String?
        public let id: String?
        public let name: String?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, description: String? = nil, id: String? = nil, name: String? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case description = "description"
            case id = "id"
            case name = "name"
        }
    }

    public struct CustomDataIdentifiers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detections", location: .body(locationName: "detections"), required: false, type: .list), 
            AWSShapeMember(label: "totalCount", location: .body(locationName: "totalCount"), required: false, type: .long)
        ]

        public let detections: [CustomDetection]?
        public let totalCount: Int64?

        public init(detections: [CustomDetection]? = nil, totalCount: Int64? = nil) {
            self.detections = detections
            self.totalCount = totalCount
        }

        private enum CodingKeys: String, CodingKey {
            case detections = "detections"
            case totalCount = "totalCount"
        }
    }

    public struct CustomDetection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "count", location: .body(locationName: "count"), required: false, type: .long), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        public let arn: String?
        public let count: Int64?
        public let name: String?

        public init(arn: String? = nil, count: Int64? = nil, name: String? = nil) {
            self.arn = arn
            self.count = count
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case count = "count"
            case name = "name"
        }
    }

    public struct DailySchedule: AWSShape {


        public init() {
        }

    }

    public struct DeclineInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountIds", location: .body(locationName: "accountIds"), required: true, type: .list)
        ]

        public let accountIds: [String]

        public init(accountIds: [String]) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
        }
    }

    public struct DeclineInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "unprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]

        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct DefaultDetection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "count", location: .body(locationName: "count"), required: false, type: .long), 
            AWSShapeMember(label: "type", location: .body(locationName: "type"), required: false, type: .string)
        ]

        public let count: Int64?
        public let `type`: String?

        public init(count: Int64? = nil, type: String? = nil) {
            self.count = count
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case `type` = "type"
        }
    }

    public struct DeleteCustomDataIdentifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", location: .uri(locationName: "id"), required: true, type: .string)
        ]

        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
        }
    }

    public struct DeleteCustomDataIdentifierResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteFindingsFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", location: .uri(locationName: "id"), required: true, type: .string)
        ]

        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
        }
    }

    public struct DeleteFindingsFilterResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountIds", location: .body(locationName: "accountIds"), required: true, type: .list)
        ]

        public let accountIds: [String]

        public init(accountIds: [String]) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
        }
    }

    public struct DeleteInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "unprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]

        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct DeleteMemberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", location: .uri(locationName: "id"), required: true, type: .string)
        ]

        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
        }
    }

    public struct DeleteMemberResponse: AWSShape {


        public init() {
        }

    }

    public struct DescribeBucketsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "criteria", location: .body(locationName: "criteria"), required: false, type: .map), 
            AWSShapeMember(label: "maxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "sortCriteria", location: .body(locationName: "sortCriteria"), required: false, type: .structure)
        ]

        public let criteria: [String: BucketCriteriaAdditionalProperties]?
        public let maxResults: Int?
        public let nextToken: String?
        public let sortCriteria: BucketSortCriteria?

        public init(criteria: [String: BucketCriteriaAdditionalProperties]? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortCriteria: BucketSortCriteria? = nil) {
            self.criteria = criteria
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortCriteria = sortCriteria
        }

        private enum CodingKeys: String, CodingKey {
            case criteria = "criteria"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case sortCriteria = "sortCriteria"
        }
    }

    public struct DescribeBucketsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "buckets", location: .body(locationName: "buckets"), required: false, type: .list), 
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let buckets: [BucketMetadata]?
        public let nextToken: String?

        public init(buckets: [BucketMetadata]? = nil, nextToken: String? = nil) {
            self.buckets = buckets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case buckets = "buckets"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClassificationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string)
        ]

        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
        }
    }

    public struct DescribeClassificationJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "createdAt", location: .body(locationName: "createdAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "customDataIdentifierIds", location: .body(locationName: "customDataIdentifierIds"), required: false, type: .list), 
            AWSShapeMember(label: "description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "initialRun", location: .body(locationName: "initialRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "jobArn", location: .body(locationName: "jobArn"), required: false, type: .string), 
            AWSShapeMember(label: "jobId", location: .body(locationName: "jobId"), required: false, type: .string), 
            AWSShapeMember(label: "jobStatus", location: .body(locationName: "jobStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "jobType", location: .body(locationName: "jobType"), required: false, type: .enum), 
            AWSShapeMember(label: "lastRunTime", location: .body(locationName: "lastRunTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "s3JobDefinition", location: .body(locationName: "s3JobDefinition"), required: false, type: .structure), 
            AWSShapeMember(label: "samplingPercentage", location: .body(locationName: "samplingPercentage"), required: false, type: .integer), 
            AWSShapeMember(label: "scheduleFrequency", location: .body(locationName: "scheduleFrequency"), required: false, type: .structure), 
            AWSShapeMember(label: "statistics", location: .body(locationName: "statistics"), required: false, type: .structure), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let clientToken: String?
        public let createdAt: TimeStamp?
        public let customDataIdentifierIds: [String]?
        public let description: String?
        public let initialRun: Bool?
        public let jobArn: String?
        public let jobId: String?
        public let jobStatus: JobStatus?
        public let jobType: JobType?
        public let lastRunTime: TimeStamp?
        public let name: String?
        public let s3JobDefinition: S3JobDefinition?
        public let samplingPercentage: Int?
        public let scheduleFrequency: JobScheduleFrequency?
        public let statistics: Statistics?
        public let tags: [String: String]?

        public init(clientToken: String? = DescribeClassificationJobResponse.idempotencyToken(), createdAt: TimeStamp? = nil, customDataIdentifierIds: [String]? = nil, description: String? = nil, initialRun: Bool? = nil, jobArn: String? = nil, jobId: String? = nil, jobStatus: JobStatus? = nil, jobType: JobType? = nil, lastRunTime: TimeStamp? = nil, name: String? = nil, s3JobDefinition: S3JobDefinition? = nil, samplingPercentage: Int? = nil, scheduleFrequency: JobScheduleFrequency? = nil, statistics: Statistics? = nil, tags: [String: String]? = nil) {
            self.clientToken = clientToken
            self.createdAt = createdAt
            self.customDataIdentifierIds = customDataIdentifierIds
            self.description = description
            self.initialRun = initialRun
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobStatus = jobStatus
            self.jobType = jobType
            self.lastRunTime = lastRunTime
            self.name = name
            self.s3JobDefinition = s3JobDefinition
            self.samplingPercentage = samplingPercentage
            self.scheduleFrequency = scheduleFrequency
            self.statistics = statistics
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case createdAt = "createdAt"
            case customDataIdentifierIds = "customDataIdentifierIds"
            case description = "description"
            case initialRun = "initialRun"
            case jobArn = "jobArn"
            case jobId = "jobId"
            case jobStatus = "jobStatus"
            case jobType = "jobType"
            case lastRunTime = "lastRunTime"
            case name = "name"
            case s3JobDefinition = "s3JobDefinition"
            case samplingPercentage = "samplingPercentage"
            case scheduleFrequency = "scheduleFrequency"
            case statistics = "statistics"
            case tags = "tags"
        }
    }

    public struct DescribeOrganizationConfigurationRequest: AWSShape {


        public init() {
        }

    }

    public struct DescribeOrganizationConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "autoEnable", location: .body(locationName: "autoEnable"), required: false, type: .boolean), 
            AWSShapeMember(label: "maxAccountLimitReached", location: .body(locationName: "maxAccountLimitReached"), required: false, type: .boolean)
        ]

        public let autoEnable: Bool?
        public let maxAccountLimitReached: Bool?

        public init(autoEnable: Bool? = nil, maxAccountLimitReached: Bool? = nil) {
            self.autoEnable = autoEnable
            self.maxAccountLimitReached = maxAccountLimitReached
        }

        private enum CodingKeys: String, CodingKey {
            case autoEnable = "autoEnable"
            case maxAccountLimitReached = "maxAccountLimitReached"
        }
    }

    public struct DisableMacieRequest: AWSShape {


        public init() {
        }

    }

    public struct DisableMacieResponse: AWSShape {


        public init() {
        }

    }

    public struct DisableOrganizationAdminAccountRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "adminAccountId", location: .querystring(locationName: "adminAccountId"), required: true, type: .string)
        ]

        public let adminAccountId: String

        public init(adminAccountId: String) {
            self.adminAccountId = adminAccountId
        }

        private enum CodingKeys: String, CodingKey {
            case adminAccountId = "adminAccountId"
        }
    }

    public struct DisableOrganizationAdminAccountResponse: AWSShape {


        public init() {
        }

    }

    public struct DisassociateFromMasterAccountRequest: AWSShape {


        public init() {
        }

    }

    public struct DisassociateFromMasterAccountResponse: AWSShape {


        public init() {
        }

    }

    public struct DisassociateMemberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", location: .uri(locationName: "id"), required: true, type: .string)
        ]

        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
        }
    }

    public struct DisassociateMemberResponse: AWSShape {


        public init() {
        }

    }

    public struct DomainDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", location: .body(locationName: "domainName"), required: false, type: .string)
        ]

        public let domainName: String?

        public init(domainName: String? = nil) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

    public struct EnableMacieRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "findingPublishingFrequency", location: .body(locationName: "findingPublishingFrequency"), required: false, type: .enum), 
            AWSShapeMember(label: "status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        public let clientToken: String?
        public let findingPublishingFrequency: FindingPublishingFrequency?
        public let status: MacieStatus?

        public init(clientToken: String? = EnableMacieRequest.idempotencyToken(), findingPublishingFrequency: FindingPublishingFrequency? = nil, status: MacieStatus? = nil) {
            self.clientToken = clientToken
            self.findingPublishingFrequency = findingPublishingFrequency
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case findingPublishingFrequency = "findingPublishingFrequency"
            case status = "status"
        }
    }

    public struct EnableMacieResponse: AWSShape {


        public init() {
        }

    }

    public struct EnableOrganizationAdminAccountRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "adminAccountId", location: .body(locationName: "adminAccountId"), required: true, type: .string), 
            AWSShapeMember(label: "clientToken", location: .body(locationName: "clientToken"), required: false, type: .string)
        ]

        public let adminAccountId: String
        public let clientToken: String?

        public init(adminAccountId: String, clientToken: String? = EnableOrganizationAdminAccountRequest.idempotencyToken()) {
            self.adminAccountId = adminAccountId
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case adminAccountId = "adminAccountId"
            case clientToken = "clientToken"
        }
    }

    public struct EnableOrganizationAdminAccountResponse: AWSShape {


        public init() {
        }

    }

    public struct FederatedUser: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accessKeyId", location: .body(locationName: "accessKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "principalId", location: .body(locationName: "principalId"), required: false, type: .string), 
            AWSShapeMember(label: "sessionContext", location: .body(locationName: "sessionContext"), required: false, type: .structure)
        ]

        public let accessKeyId: String?
        public let accountId: String?
        public let arn: String?
        public let principalId: String?
        public let sessionContext: SessionContext?

        public init(accessKeyId: String? = nil, accountId: String? = nil, arn: String? = nil, principalId: String? = nil, sessionContext: SessionContext? = nil) {
            self.accessKeyId = accessKeyId
            self.accountId = accountId
            self.arn = arn
            self.principalId = principalId
            self.sessionContext = sessionContext
        }

        private enum CodingKeys: String, CodingKey {
            case accessKeyId = "accessKeyId"
            case accountId = "accountId"
            case arn = "arn"
            case principalId = "principalId"
            case sessionContext = "sessionContext"
        }
    }

    public struct Finding: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "archived", location: .body(locationName: "archived"), required: false, type: .boolean), 
            AWSShapeMember(label: "category", location: .body(locationName: "category"), required: false, type: .enum), 
            AWSShapeMember(label: "classificationDetails", location: .body(locationName: "classificationDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "count", location: .body(locationName: "count"), required: false, type: .long), 
            AWSShapeMember(label: "createdAt", location: .body(locationName: "createdAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "partition", location: .body(locationName: "partition"), required: false, type: .string), 
            AWSShapeMember(label: "policyDetails", location: .body(locationName: "policyDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "region", location: .body(locationName: "region"), required: false, type: .string), 
            AWSShapeMember(label: "resourcesAffected", location: .body(locationName: "resourcesAffected"), required: false, type: .structure), 
            AWSShapeMember(label: "sample", location: .body(locationName: "sample"), required: false, type: .boolean), 
            AWSShapeMember(label: "schemaVersion", location: .body(locationName: "schemaVersion"), required: false, type: .string), 
            AWSShapeMember(label: "severity", location: .body(locationName: "severity"), required: false, type: .structure), 
            AWSShapeMember(label: "title", location: .body(locationName: "title"), required: false, type: .string), 
            AWSShapeMember(label: "type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "updatedAt", location: .body(locationName: "updatedAt"), required: false, type: .timestamp)
        ]

        public let accountId: String?
        public let archived: Bool?
        public let category: FindingCategory?
        public let classificationDetails: ClassificationDetails?
        public let count: Int64?
        public let createdAt: TimeStamp?
        public let description: String?
        public let id: String?
        public let partition: String?
        public let policyDetails: PolicyDetails?
        public let region: String?
        public let resourcesAffected: ResourcesAffected?
        public let sample: Bool?
        public let schemaVersion: String?
        public let severity: Severity?
        public let title: String?
        public let `type`: FindingType?
        public let updatedAt: TimeStamp?

        public init(accountId: String? = nil, archived: Bool? = nil, category: FindingCategory? = nil, classificationDetails: ClassificationDetails? = nil, count: Int64? = nil, createdAt: TimeStamp? = nil, description: String? = nil, id: String? = nil, partition: String? = nil, policyDetails: PolicyDetails? = nil, region: String? = nil, resourcesAffected: ResourcesAffected? = nil, sample: Bool? = nil, schemaVersion: String? = nil, severity: Severity? = nil, title: String? = nil, type: FindingType? = nil, updatedAt: TimeStamp? = nil) {
            self.accountId = accountId
            self.archived = archived
            self.category = category
            self.classificationDetails = classificationDetails
            self.count = count
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.partition = partition
            self.policyDetails = policyDetails
            self.region = region
            self.resourcesAffected = resourcesAffected
            self.sample = sample
            self.schemaVersion = schemaVersion
            self.severity = severity
            self.title = title
            self.`type` = `type`
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case archived = "archived"
            case category = "category"
            case classificationDetails = "classificationDetails"
            case count = "count"
            case createdAt = "createdAt"
            case description = "description"
            case id = "id"
            case partition = "partition"
            case policyDetails = "policyDetails"
            case region = "region"
            case resourcesAffected = "resourcesAffected"
            case sample = "sample"
            case schemaVersion = "schemaVersion"
            case severity = "severity"
            case title = "title"
            case `type` = "type"
            case updatedAt = "updatedAt"
        }
    }

    public struct FindingAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actionType", location: .body(locationName: "actionType"), required: false, type: .enum), 
            AWSShapeMember(label: "apiCallDetails", location: .body(locationName: "apiCallDetails"), required: false, type: .structure)
        ]

        public let actionType: FindingActionType?
        public let apiCallDetails: ApiCallDetails?

        public init(actionType: FindingActionType? = nil, apiCallDetails: ApiCallDetails? = nil) {
            self.actionType = actionType
            self.apiCallDetails = apiCallDetails
        }

        private enum CodingKeys: String, CodingKey {
            case actionType = "actionType"
            case apiCallDetails = "apiCallDetails"
        }
    }

    public struct FindingActor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainDetails", location: .body(locationName: "domainDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "ipAddressDetails", location: .body(locationName: "ipAddressDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "userIdentity", location: .body(locationName: "userIdentity"), required: false, type: .structure)
        ]

        public let domainDetails: DomainDetails?
        public let ipAddressDetails: IpAddressDetails?
        public let userIdentity: UserIdentity?

        public init(domainDetails: DomainDetails? = nil, ipAddressDetails: IpAddressDetails? = nil, userIdentity: UserIdentity? = nil) {
            self.domainDetails = domainDetails
            self.ipAddressDetails = ipAddressDetails
            self.userIdentity = userIdentity
        }

        private enum CodingKeys: String, CodingKey {
            case domainDetails = "domainDetails"
            case ipAddressDetails = "ipAddressDetails"
            case userIdentity = "userIdentity"
        }
    }

    public struct FindingCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "criterion", location: .body(locationName: "criterion"), required: false, type: .map)
        ]

        public let criterion: [String: CriterionAdditionalProperties]?

        public init(criterion: [String: CriterionAdditionalProperties]? = nil) {
            self.criterion = criterion
        }

        private enum CodingKeys: String, CodingKey {
            case criterion = "criterion"
        }
    }

    public struct FindingStatisticsSortCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributeName", location: .body(locationName: "attributeName"), required: false, type: .enum), 
            AWSShapeMember(label: "orderBy", location: .body(locationName: "orderBy"), required: false, type: .enum)
        ]

        public let attributeName: FindingStatisticsSortAttributeName?
        public let orderBy: OrderBy?

        public init(attributeName: FindingStatisticsSortAttributeName? = nil, orderBy: OrderBy? = nil) {
            self.attributeName = attributeName
            self.orderBy = orderBy
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
            case orderBy = "orderBy"
        }
    }

    public struct FindingsFilterListItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "action", location: .body(locationName: "action"), required: false, type: .enum), 
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let action: FindingsFilterAction?
        public let arn: String?
        public let id: String?
        public let name: String?
        public let tags: [String: String]?

        public init(action: FindingsFilterAction? = nil, arn: String? = nil, id: String? = nil, name: String? = nil, tags: [String: String]? = nil) {
            self.action = action
            self.arn = arn
            self.id = id
            self.name = name
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
            case arn = "arn"
            case id = "id"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct GetBucketStatisticsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string)
        ]

        public let accountId: String?

        public init(accountId: String? = nil) {
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
        }
    }

    public struct GetBucketStatisticsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "bucketCount", location: .body(locationName: "bucketCount"), required: false, type: .long), 
            AWSShapeMember(label: "bucketCountByEffectivePermission", location: .body(locationName: "bucketCountByEffectivePermission"), required: false, type: .structure), 
            AWSShapeMember(label: "bucketCountByEncryptionType", location: .body(locationName: "bucketCountByEncryptionType"), required: false, type: .structure), 
            AWSShapeMember(label: "bucketCountBySharedAccessType", location: .body(locationName: "bucketCountBySharedAccessType"), required: false, type: .structure), 
            AWSShapeMember(label: "classifiableObjectCount", location: .body(locationName: "classifiableObjectCount"), required: false, type: .long), 
            AWSShapeMember(label: "classifiableSizeInBytes", location: .body(locationName: "classifiableSizeInBytes"), required: false, type: .long), 
            AWSShapeMember(label: "lastUpdated", location: .body(locationName: "lastUpdated"), required: false, type: .timestamp), 
            AWSShapeMember(label: "objectCount", location: .body(locationName: "objectCount"), required: false, type: .long), 
            AWSShapeMember(label: "sizeInBytes", location: .body(locationName: "sizeInBytes"), required: false, type: .long), 
            AWSShapeMember(label: "sizeInBytesCompressed", location: .body(locationName: "sizeInBytesCompressed"), required: false, type: .long), 
            AWSShapeMember(label: "unclassifiableObjectCount", location: .body(locationName: "unclassifiableObjectCount"), required: false, type: .structure), 
            AWSShapeMember(label: "unclassifiableObjectSizeInBytes", location: .body(locationName: "unclassifiableObjectSizeInBytes"), required: false, type: .structure)
        ]

        public let bucketCount: Int64?
        public let bucketCountByEffectivePermission: BucketCountByEffectivePermission?
        public let bucketCountByEncryptionType: BucketCountByEncryptionType?
        public let bucketCountBySharedAccessType: BucketCountBySharedAccessType?
        public let classifiableObjectCount: Int64?
        public let classifiableSizeInBytes: Int64?
        public let lastUpdated: TimeStamp?
        public let objectCount: Int64?
        public let sizeInBytes: Int64?
        public let sizeInBytesCompressed: Int64?
        public let unclassifiableObjectCount: ObjectLevelStatistics?
        public let unclassifiableObjectSizeInBytes: ObjectLevelStatistics?

        public init(bucketCount: Int64? = nil, bucketCountByEffectivePermission: BucketCountByEffectivePermission? = nil, bucketCountByEncryptionType: BucketCountByEncryptionType? = nil, bucketCountBySharedAccessType: BucketCountBySharedAccessType? = nil, classifiableObjectCount: Int64? = nil, classifiableSizeInBytes: Int64? = nil, lastUpdated: TimeStamp? = nil, objectCount: Int64? = nil, sizeInBytes: Int64? = nil, sizeInBytesCompressed: Int64? = nil, unclassifiableObjectCount: ObjectLevelStatistics? = nil, unclassifiableObjectSizeInBytes: ObjectLevelStatistics? = nil) {
            self.bucketCount = bucketCount
            self.bucketCountByEffectivePermission = bucketCountByEffectivePermission
            self.bucketCountByEncryptionType = bucketCountByEncryptionType
            self.bucketCountBySharedAccessType = bucketCountBySharedAccessType
            self.classifiableObjectCount = classifiableObjectCount
            self.classifiableSizeInBytes = classifiableSizeInBytes
            self.lastUpdated = lastUpdated
            self.objectCount = objectCount
            self.sizeInBytes = sizeInBytes
            self.sizeInBytesCompressed = sizeInBytesCompressed
            self.unclassifiableObjectCount = unclassifiableObjectCount
            self.unclassifiableObjectSizeInBytes = unclassifiableObjectSizeInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case bucketCount = "bucketCount"
            case bucketCountByEffectivePermission = "bucketCountByEffectivePermission"
            case bucketCountByEncryptionType = "bucketCountByEncryptionType"
            case bucketCountBySharedAccessType = "bucketCountBySharedAccessType"
            case classifiableObjectCount = "classifiableObjectCount"
            case classifiableSizeInBytes = "classifiableSizeInBytes"
            case lastUpdated = "lastUpdated"
            case objectCount = "objectCount"
            case sizeInBytes = "sizeInBytes"
            case sizeInBytesCompressed = "sizeInBytesCompressed"
            case unclassifiableObjectCount = "unclassifiableObjectCount"
            case unclassifiableObjectSizeInBytes = "unclassifiableObjectSizeInBytes"
        }
    }

    public struct GetClassificationExportConfigurationRequest: AWSShape {


        public init() {
        }

    }

    public struct GetClassificationExportConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configuration", location: .body(locationName: "configuration"), required: false, type: .structure)
        ]

        public let configuration: ClassificationExportConfiguration?

        public init(configuration: ClassificationExportConfiguration? = nil) {
            self.configuration = configuration
        }

        private enum CodingKeys: String, CodingKey {
            case configuration = "configuration"
        }
    }

    public struct GetCustomDataIdentifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", location: .uri(locationName: "id"), required: true, type: .string)
        ]

        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
        }
    }

    public struct GetCustomDataIdentifierResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "createdAt", location: .body(locationName: "createdAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "deleted", location: .body(locationName: "deleted"), required: false, type: .boolean), 
            AWSShapeMember(label: "description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "ignoreWords", location: .body(locationName: "ignoreWords"), required: false, type: .list), 
            AWSShapeMember(label: "keywords", location: .body(locationName: "keywords"), required: false, type: .list), 
            AWSShapeMember(label: "maximumMatchDistance", location: .body(locationName: "maximumMatchDistance"), required: false, type: .integer), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "regex", location: .body(locationName: "regex"), required: false, type: .string), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let arn: String?
        public let createdAt: TimeStamp?
        public let deleted: Bool?
        public let description: String?
        public let id: String?
        public let ignoreWords: [String]?
        public let keywords: [String]?
        public let maximumMatchDistance: Int?
        public let name: String?
        public let regex: String?
        public let tags: [String: String]?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, deleted: Bool? = nil, description: String? = nil, id: String? = nil, ignoreWords: [String]? = nil, keywords: [String]? = nil, maximumMatchDistance: Int? = nil, name: String? = nil, regex: String? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.deleted = deleted
            self.description = description
            self.id = id
            self.ignoreWords = ignoreWords
            self.keywords = keywords
            self.maximumMatchDistance = maximumMatchDistance
            self.name = name
            self.regex = regex
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case deleted = "deleted"
            case description = "description"
            case id = "id"
            case ignoreWords = "ignoreWords"
            case keywords = "keywords"
            case maximumMatchDistance = "maximumMatchDistance"
            case name = "name"
            case regex = "regex"
            case tags = "tags"
        }
    }

    public struct GetFindingStatisticsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "groupBy", location: .body(locationName: "groupBy"), required: true, type: .enum), 
            AWSShapeMember(label: "size", location: .body(locationName: "size"), required: false, type: .integer), 
            AWSShapeMember(label: "sortCriteria", location: .body(locationName: "sortCriteria"), required: false, type: .structure)
        ]

        public let findingCriteria: FindingCriteria?
        public let groupBy: GroupBy
        public let size: Int?
        public let sortCriteria: FindingStatisticsSortCriteria?

        public init(findingCriteria: FindingCriteria? = nil, groupBy: GroupBy, size: Int? = nil, sortCriteria: FindingStatisticsSortCriteria? = nil) {
            self.findingCriteria = findingCriteria
            self.groupBy = groupBy
            self.size = size
            self.sortCriteria = sortCriteria
        }

        private enum CodingKeys: String, CodingKey {
            case findingCriteria = "findingCriteria"
            case groupBy = "groupBy"
            case size = "size"
            case sortCriteria = "sortCriteria"
        }
    }

    public struct GetFindingStatisticsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "countsByGroup", location: .body(locationName: "countsByGroup"), required: false, type: .list)
        ]

        public let countsByGroup: [GroupCount]?

        public init(countsByGroup: [GroupCount]? = nil) {
            self.countsByGroup = countsByGroup
        }

        private enum CodingKeys: String, CodingKey {
            case countsByGroup = "countsByGroup"
        }
    }

    public struct GetFindingsFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", location: .uri(locationName: "id"), required: true, type: .string)
        ]

        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
        }
    }

    public struct GetFindingsFilterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "action", location: .body(locationName: "action"), required: false, type: .enum), 
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "findingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "position", location: .body(locationName: "position"), required: false, type: .integer), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let action: FindingsFilterAction?
        public let arn: String?
        public let description: String?
        public let findingCriteria: FindingCriteria?
        public let id: String?
        public let name: String?
        public let position: Int?
        public let tags: [String: String]?

        public init(action: FindingsFilterAction? = nil, arn: String? = nil, description: String? = nil, findingCriteria: FindingCriteria? = nil, id: String? = nil, name: String? = nil, position: Int? = nil, tags: [String: String]? = nil) {
            self.action = action
            self.arn = arn
            self.description = description
            self.findingCriteria = findingCriteria
            self.id = id
            self.name = name
            self.position = position
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
            case arn = "arn"
            case description = "description"
            case findingCriteria = "findingCriteria"
            case id = "id"
            case name = "name"
            case position = "position"
            case tags = "tags"
        }
    }

    public struct GetFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findingIds", location: .body(locationName: "findingIds"), required: true, type: .list), 
            AWSShapeMember(label: "sortCriteria", location: .body(locationName: "sortCriteria"), required: false, type: .structure)
        ]

        public let findingIds: [String]
        public let sortCriteria: SortCriteria?

        public init(findingIds: [String], sortCriteria: SortCriteria? = nil) {
            self.findingIds = findingIds
            self.sortCriteria = sortCriteria
        }

        private enum CodingKeys: String, CodingKey {
            case findingIds = "findingIds"
            case sortCriteria = "sortCriteria"
        }
    }

    public struct GetFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findings", location: .body(locationName: "findings"), required: false, type: .list)
        ]

        public let findings: [Finding]?

        public init(findings: [Finding]? = nil) {
            self.findings = findings
        }

        private enum CodingKeys: String, CodingKey {
            case findings = "findings"
        }
    }

    public struct GetInvitationsCountRequest: AWSShape {


        public init() {
        }

    }

    public struct GetInvitationsCountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "invitationsCount", location: .body(locationName: "invitationsCount"), required: false, type: .long)
        ]

        public let invitationsCount: Int64?

        public init(invitationsCount: Int64? = nil) {
            self.invitationsCount = invitationsCount
        }

        private enum CodingKeys: String, CodingKey {
            case invitationsCount = "invitationsCount"
        }
    }

    public struct GetMacieSessionRequest: AWSShape {


        public init() {
        }

    }

    public struct GetMacieSessionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "createdAt", location: .body(locationName: "createdAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "findingPublishingFrequency", location: .body(locationName: "findingPublishingFrequency"), required: false, type: .enum), 
            AWSShapeMember(label: "serviceRole", location: .body(locationName: "serviceRole"), required: false, type: .string), 
            AWSShapeMember(label: "status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "updatedAt", location: .body(locationName: "updatedAt"), required: false, type: .timestamp)
        ]

        public let createdAt: TimeStamp?
        public let findingPublishingFrequency: FindingPublishingFrequency?
        public let serviceRole: String?
        public let status: MacieStatus?
        public let updatedAt: TimeStamp?

        public init(createdAt: TimeStamp? = nil, findingPublishingFrequency: FindingPublishingFrequency? = nil, serviceRole: String? = nil, status: MacieStatus? = nil, updatedAt: TimeStamp? = nil) {
            self.createdAt = createdAt
            self.findingPublishingFrequency = findingPublishingFrequency
            self.serviceRole = serviceRole
            self.status = status
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case findingPublishingFrequency = "findingPublishingFrequency"
            case serviceRole = "serviceRole"
            case status = "status"
            case updatedAt = "updatedAt"
        }
    }

    public struct GetMasterAccountRequest: AWSShape {


        public init() {
        }

    }

    public struct GetMasterAccountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "master", location: .body(locationName: "master"), required: false, type: .structure)
        ]

        public let master: Invitation?

        public init(master: Invitation? = nil) {
            self.master = master
        }

        private enum CodingKeys: String, CodingKey {
            case master = "master"
        }
    }

    public struct GetMemberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", location: .uri(locationName: "id"), required: true, type: .string)
        ]

        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
        }
    }

    public struct GetMemberResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "email", location: .body(locationName: "email"), required: false, type: .string), 
            AWSShapeMember(label: "invitedAt", location: .body(locationName: "invitedAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "masterAccountId", location: .body(locationName: "masterAccountId"), required: false, type: .string), 
            AWSShapeMember(label: "relationshipStatus", location: .body(locationName: "relationshipStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "updatedAt", location: .body(locationName: "updatedAt"), required: false, type: .timestamp)
        ]

        public let accountId: String?
        public let arn: String?
        public let email: String?
        public let invitedAt: TimeStamp?
        public let masterAccountId: String?
        public let relationshipStatus: RelationshipStatus?
        public let tags: [String: String]?
        public let updatedAt: TimeStamp?

        public init(accountId: String? = nil, arn: String? = nil, email: String? = nil, invitedAt: TimeStamp? = nil, masterAccountId: String? = nil, relationshipStatus: RelationshipStatus? = nil, tags: [String: String]? = nil, updatedAt: TimeStamp? = nil) {
            self.accountId = accountId
            self.arn = arn
            self.email = email
            self.invitedAt = invitedAt
            self.masterAccountId = masterAccountId
            self.relationshipStatus = relationshipStatus
            self.tags = tags
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case arn = "arn"
            case email = "email"
            case invitedAt = "invitedAt"
            case masterAccountId = "masterAccountId"
            case relationshipStatus = "relationshipStatus"
            case tags = "tags"
            case updatedAt = "updatedAt"
        }
    }

    public struct GetUsageStatisticsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "filterBy", location: .body(locationName: "filterBy"), required: false, type: .list), 
            AWSShapeMember(label: "maxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "sortBy", location: .body(locationName: "sortBy"), required: false, type: .structure)
        ]

        public let filterBy: [UsageStatisticsFilter]?
        public let maxResults: Int?
        public let nextToken: String?
        public let sortBy: UsageStatisticsSortBy?

        public init(filterBy: [UsageStatisticsFilter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortBy: UsageStatisticsSortBy? = nil) {
            self.filterBy = filterBy
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
        }

        private enum CodingKeys: String, CodingKey {
            case filterBy = "filterBy"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case sortBy = "sortBy"
        }
    }

    public struct GetUsageStatisticsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "records", location: .body(locationName: "records"), required: false, type: .list)
        ]

        public let nextToken: String?
        public let records: [UsageRecord]?

        public init(nextToken: String? = nil, records: [UsageRecord]? = nil) {
            self.nextToken = nextToken
            self.records = records
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case records = "records"
        }
    }

    public struct GetUsageTotalsRequest: AWSShape {


        public init() {
        }

    }

    public struct GetUsageTotalsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "usageTotals", location: .body(locationName: "usageTotals"), required: false, type: .list)
        ]

        public let usageTotals: [UsageTotal]?

        public init(usageTotals: [UsageTotal]? = nil) {
            self.usageTotals = usageTotals
        }

        private enum CodingKeys: String, CodingKey {
            case usageTotals = "usageTotals"
        }
    }

    public struct GroupCount: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "count", location: .body(locationName: "count"), required: false, type: .long), 
            AWSShapeMember(label: "groupKey", location: .body(locationName: "groupKey"), required: false, type: .string)
        ]

        public let count: Int64?
        public let groupKey: String?

        public init(count: Int64? = nil, groupKey: String? = nil) {
            self.count = count
            self.groupKey = groupKey
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case groupKey = "groupKey"
        }
    }

    public struct IamUser: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "principalId", location: .body(locationName: "principalId"), required: false, type: .string), 
            AWSShapeMember(label: "userName", location: .body(locationName: "userName"), required: false, type: .string)
        ]

        public let accountId: String?
        public let arn: String?
        public let principalId: String?
        public let userName: String?

        public init(accountId: String? = nil, arn: String? = nil, principalId: String? = nil, userName: String? = nil) {
            self.accountId = accountId
            self.arn = arn
            self.principalId = principalId
            self.userName = userName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case arn = "arn"
            case principalId = "principalId"
            case userName = "userName"
        }
    }

    public struct Invitation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "invitationId", location: .body(locationName: "invitationId"), required: false, type: .string), 
            AWSShapeMember(label: "invitedAt", location: .body(locationName: "invitedAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "relationshipStatus", location: .body(locationName: "relationshipStatus"), required: false, type: .enum)
        ]

        public let accountId: String?
        public let invitationId: String?
        public let invitedAt: TimeStamp?
        public let relationshipStatus: RelationshipStatus?

        public init(accountId: String? = nil, invitationId: String? = nil, invitedAt: TimeStamp? = nil, relationshipStatus: RelationshipStatus? = nil) {
            self.accountId = accountId
            self.invitationId = invitationId
            self.invitedAt = invitedAt
            self.relationshipStatus = relationshipStatus
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case invitationId = "invitationId"
            case invitedAt = "invitedAt"
            case relationshipStatus = "relationshipStatus"
        }
    }

    public struct IpAddressDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ipAddressV4", location: .body(locationName: "ipAddressV4"), required: false, type: .string), 
            AWSShapeMember(label: "ipCity", location: .body(locationName: "ipCity"), required: false, type: .structure), 
            AWSShapeMember(label: "ipCountry", location: .body(locationName: "ipCountry"), required: false, type: .structure), 
            AWSShapeMember(label: "ipGeoLocation", location: .body(locationName: "ipGeoLocation"), required: false, type: .structure), 
            AWSShapeMember(label: "ipOwner", location: .body(locationName: "ipOwner"), required: false, type: .structure)
        ]

        public let ipAddressV4: String?
        public let ipCity: IpCity?
        public let ipCountry: IpCountry?
        public let ipGeoLocation: IpGeoLocation?
        public let ipOwner: IpOwner?

        public init(ipAddressV4: String? = nil, ipCity: IpCity? = nil, ipCountry: IpCountry? = nil, ipGeoLocation: IpGeoLocation? = nil, ipOwner: IpOwner? = nil) {
            self.ipAddressV4 = ipAddressV4
            self.ipCity = ipCity
            self.ipCountry = ipCountry
            self.ipGeoLocation = ipGeoLocation
            self.ipOwner = ipOwner
        }

        private enum CodingKeys: String, CodingKey {
            case ipAddressV4 = "ipAddressV4"
            case ipCity = "ipCity"
            case ipCountry = "ipCountry"
            case ipGeoLocation = "ipGeoLocation"
            case ipOwner = "ipOwner"
        }
    }

    public struct IpCity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct IpCountry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        public let code: String?
        public let name: String?

        public init(code: String? = nil, name: String? = nil) {
            self.code = code
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case name = "name"
        }
    }

    public struct IpGeoLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lat", location: .body(locationName: "lat"), required: false, type: .double), 
            AWSShapeMember(label: "lon", location: .body(locationName: "lon"), required: false, type: .double)
        ]

        public let lat: Double?
        public let lon: Double?

        public init(lat: Double? = nil, lon: Double? = nil) {
            self.lat = lat
            self.lon = lon
        }

        private enum CodingKeys: String, CodingKey {
            case lat = "lat"
            case lon = "lon"
        }
    }

    public struct IpOwner: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "asn", location: .body(locationName: "asn"), required: false, type: .string), 
            AWSShapeMember(label: "asnOrg", location: .body(locationName: "asnOrg"), required: false, type: .string), 
            AWSShapeMember(label: "isp", location: .body(locationName: "isp"), required: false, type: .string), 
            AWSShapeMember(label: "org", location: .body(locationName: "org"), required: false, type: .string)
        ]

        public let asn: String?
        public let asnOrg: String?
        public let isp: String?
        public let org: String?

        public init(asn: String? = nil, asnOrg: String? = nil, isp: String? = nil, org: String? = nil) {
            self.asn = asn
            self.asnOrg = asnOrg
            self.isp = isp
            self.org = org
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "asn"
            case asnOrg = "asnOrg"
            case isp = "isp"
            case org = "org"
        }
    }

    public struct JobScheduleFrequency: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dailySchedule", location: .body(locationName: "dailySchedule"), required: false, type: .structure), 
            AWSShapeMember(label: "monthlySchedule", location: .body(locationName: "monthlySchedule"), required: false, type: .structure), 
            AWSShapeMember(label: "weeklySchedule", location: .body(locationName: "weeklySchedule"), required: false, type: .structure)
        ]

        public let dailySchedule: DailySchedule?
        public let monthlySchedule: MonthlySchedule?
        public let weeklySchedule: WeeklySchedule?

        public init(dailySchedule: DailySchedule? = nil, monthlySchedule: MonthlySchedule? = nil, weeklySchedule: WeeklySchedule? = nil) {
            self.dailySchedule = dailySchedule
            self.monthlySchedule = monthlySchedule
            self.weeklySchedule = weeklySchedule
        }

        private enum CodingKeys: String, CodingKey {
            case dailySchedule = "dailySchedule"
            case monthlySchedule = "monthlySchedule"
            case weeklySchedule = "weeklySchedule"
        }
    }

    public struct JobScopeTerm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "simpleScopeTerm", location: .body(locationName: "simpleScopeTerm"), required: false, type: .structure), 
            AWSShapeMember(label: "tagScopeTerm", location: .body(locationName: "tagScopeTerm"), required: false, type: .structure)
        ]

        public let simpleScopeTerm: SimpleScopeTerm?
        public let tagScopeTerm: TagScopeTerm?

        public init(simpleScopeTerm: SimpleScopeTerm? = nil, tagScopeTerm: TagScopeTerm? = nil) {
            self.simpleScopeTerm = simpleScopeTerm
            self.tagScopeTerm = tagScopeTerm
        }

        private enum CodingKeys: String, CodingKey {
            case simpleScopeTerm = "simpleScopeTerm"
            case tagScopeTerm = "tagScopeTerm"
        }
    }

    public struct JobScopingBlock: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "and", location: .body(locationName: "and"), required: false, type: .list)
        ]

        public let and: [JobScopeTerm]?

        public init(and: [JobScopeTerm]? = nil) {
            self.and = and
        }

        private enum CodingKeys: String, CodingKey {
            case and = "and"
        }
    }

    public struct JobSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "bucketDefinitions", location: .body(locationName: "bucketDefinitions"), required: false, type: .list), 
            AWSShapeMember(label: "createdAt", location: .body(locationName: "createdAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "jobId", location: .body(locationName: "jobId"), required: false, type: .string), 
            AWSShapeMember(label: "jobStatus", location: .body(locationName: "jobStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "jobType", location: .body(locationName: "jobType"), required: false, type: .enum), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        public let bucketDefinitions: [S3BucketDefinitionForJob]?
        public let createdAt: TimeStamp?
        public let jobId: String?
        public let jobStatus: JobStatus?
        public let jobType: JobType?
        public let name: String?

        public init(bucketDefinitions: [S3BucketDefinitionForJob]? = nil, createdAt: TimeStamp? = nil, jobId: String? = nil, jobStatus: JobStatus? = nil, jobType: JobType? = nil, name: String? = nil) {
            self.bucketDefinitions = bucketDefinitions
            self.createdAt = createdAt
            self.jobId = jobId
            self.jobStatus = jobStatus
            self.jobType = jobType
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case bucketDefinitions = "bucketDefinitions"
            case createdAt = "createdAt"
            case jobId = "jobId"
            case jobStatus = "jobStatus"
            case jobType = "jobType"
            case name = "name"
        }
    }

    public struct KeyValuePair: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        public let key: String?
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct ListClassificationJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "filterCriteria", location: .body(locationName: "filterCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "maxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "sortCriteria", location: .body(locationName: "sortCriteria"), required: false, type: .structure)
        ]

        public let filterCriteria: ListJobsFilterCriteria?
        public let maxResults: Int?
        public let nextToken: String?
        public let sortCriteria: ListJobsSortCriteria?

        public init(filterCriteria: ListJobsFilterCriteria? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortCriteria: ListJobsSortCriteria? = nil) {
            self.filterCriteria = filterCriteria
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortCriteria = sortCriteria
        }

        private enum CodingKeys: String, CodingKey {
            case filterCriteria = "filterCriteria"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case sortCriteria = "sortCriteria"
        }
    }

    public struct ListClassificationJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [JobSummary]?
        public let nextToken: String?

        public init(items: [JobSummary]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct ListCustomDataIdentifiersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListCustomDataIdentifiersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [CustomDataIdentifierSummary]?
        public let nextToken: String?

        public init(items: [CustomDataIdentifierSummary]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct ListFindingsFiltersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 25)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListFindingsFiltersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findingsFilterListItems", location: .body(locationName: "findingsFilterListItems"), required: false, type: .list), 
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let findingsFilterListItems: [FindingsFilterListItem]?
        public let nextToken: String?

        public init(findingsFilterListItems: [FindingsFilterListItem]? = nil, nextToken: String? = nil) {
            self.findingsFilterListItems = findingsFilterListItems
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case findingsFilterListItems = "findingsFilterListItems"
            case nextToken = "nextToken"
        }
    }

    public struct ListFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "maxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "sortCriteria", location: .body(locationName: "sortCriteria"), required: false, type: .structure)
        ]

        public let findingCriteria: FindingCriteria?
        public let maxResults: Int?
        public let nextToken: String?
        public let sortCriteria: SortCriteria?

        public init(findingCriteria: FindingCriteria? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortCriteria: SortCriteria? = nil) {
            self.findingCriteria = findingCriteria
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortCriteria = sortCriteria
        }

        private enum CodingKeys: String, CodingKey {
            case findingCriteria = "findingCriteria"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case sortCriteria = "sortCriteria"
        }
    }

    public struct ListFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findingIds", location: .body(locationName: "findingIds"), required: false, type: .list), 
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let findingIds: [String]?
        public let nextToken: String?

        public init(findingIds: [String]? = nil, nextToken: String? = nil) {
            self.findingIds = findingIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case findingIds = "findingIds"
            case nextToken = "nextToken"
        }
    }

    public struct ListInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 25)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "invitations", location: .body(locationName: "invitations"), required: false, type: .list), 
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let invitations: [Invitation]?
        public let nextToken: String?

        public init(invitations: [Invitation]? = nil, nextToken: String? = nil) {
            self.invitations = invitations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case invitations = "invitations"
            case nextToken = "nextToken"
        }
    }

    public struct ListJobsFilterCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "excludes", location: .body(locationName: "excludes"), required: false, type: .list), 
            AWSShapeMember(label: "includes", location: .body(locationName: "includes"), required: false, type: .list)
        ]

        public let excludes: [ListJobsFilterTerm]?
        public let includes: [ListJobsFilterTerm]?

        public init(excludes: [ListJobsFilterTerm]? = nil, includes: [ListJobsFilterTerm]? = nil) {
            self.excludes = excludes
            self.includes = includes
        }

        private enum CodingKeys: String, CodingKey {
            case excludes = "excludes"
            case includes = "includes"
        }
    }

    public struct ListJobsFilterTerm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "comparator", location: .body(locationName: "comparator"), required: false, type: .enum), 
            AWSShapeMember(label: "key", location: .body(locationName: "key"), required: false, type: .enum), 
            AWSShapeMember(label: "values", location: .body(locationName: "values"), required: false, type: .list)
        ]

        public let comparator: JobComparator?
        public let key: ListJobsFilterKey?
        public let values: [String]?

        public init(comparator: JobComparator? = nil, key: ListJobsFilterKey? = nil, values: [String]? = nil) {
            self.comparator = comparator
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case comparator = "comparator"
            case key = "key"
            case values = "values"
        }
    }

    public struct ListJobsSortCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributeName", location: .body(locationName: "attributeName"), required: false, type: .enum), 
            AWSShapeMember(label: "orderBy", location: .body(locationName: "orderBy"), required: false, type: .enum)
        ]

        public let attributeName: ListJobsSortAttributeName?
        public let orderBy: OrderBy?

        public init(attributeName: ListJobsSortAttributeName? = nil, orderBy: OrderBy? = nil) {
            self.attributeName = attributeName
            self.orderBy = orderBy
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
            case orderBy = "orderBy"
        }
    }

    public struct ListMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "onlyAssociated", location: .querystring(locationName: "onlyAssociated"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?
        public let onlyAssociated: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, onlyAssociated: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.onlyAssociated = onlyAssociated
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 25)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case onlyAssociated = "onlyAssociated"
        }
    }

    public struct ListMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "members", location: .body(locationName: "members"), required: false, type: .list), 
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let members: [Member]?
        public let nextToken: String?

        public init(members: [Member]? = nil, nextToken: String? = nil) {
            self.members = members
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case members = "members"
            case nextToken = "nextToken"
        }
    }

    public struct ListOrganizationAdminAccountsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 25)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListOrganizationAdminAccountsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "adminAccounts", location: .body(locationName: "adminAccounts"), required: false, type: .list), 
            AWSShapeMember(label: "nextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let adminAccounts: [AdminAccount]?
        public let nextToken: String?

        public init(adminAccounts: [AdminAccount]? = nil, nextToken: String? = nil) {
            self.adminAccounts = adminAccounts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case adminAccounts = "adminAccounts"
            case nextToken = "nextToken"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resourceArn"), required: true, type: .string)
        ]

        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct Member: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "email", location: .body(locationName: "email"), required: false, type: .string), 
            AWSShapeMember(label: "invitedAt", location: .body(locationName: "invitedAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "masterAccountId", location: .body(locationName: "masterAccountId"), required: false, type: .string), 
            AWSShapeMember(label: "relationshipStatus", location: .body(locationName: "relationshipStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "updatedAt", location: .body(locationName: "updatedAt"), required: false, type: .timestamp)
        ]

        public let accountId: String?
        public let arn: String?
        public let email: String?
        public let invitedAt: TimeStamp?
        public let masterAccountId: String?
        public let relationshipStatus: RelationshipStatus?
        public let tags: [String: String]?
        public let updatedAt: TimeStamp?

        public init(accountId: String? = nil, arn: String? = nil, email: String? = nil, invitedAt: TimeStamp? = nil, masterAccountId: String? = nil, relationshipStatus: RelationshipStatus? = nil, tags: [String: String]? = nil, updatedAt: TimeStamp? = nil) {
            self.accountId = accountId
            self.arn = arn
            self.email = email
            self.invitedAt = invitedAt
            self.masterAccountId = masterAccountId
            self.relationshipStatus = relationshipStatus
            self.tags = tags
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case arn = "arn"
            case email = "email"
            case invitedAt = "invitedAt"
            case masterAccountId = "masterAccountId"
            case relationshipStatus = "relationshipStatus"
            case tags = "tags"
            case updatedAt = "updatedAt"
        }
    }

    public struct MonthlySchedule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dayOfMonth", location: .body(locationName: "dayOfMonth"), required: false, type: .integer)
        ]

        public let dayOfMonth: Int?

        public init(dayOfMonth: Int? = nil) {
            self.dayOfMonth = dayOfMonth
        }

        private enum CodingKeys: String, CodingKey {
            case dayOfMonth = "dayOfMonth"
        }
    }

    public struct ObjectCountByEncryptionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "customerManaged", location: .body(locationName: "customerManaged"), required: false, type: .long), 
            AWSShapeMember(label: "kmsManaged", location: .body(locationName: "kmsManaged"), required: false, type: .long), 
            AWSShapeMember(label: "s3Managed", location: .body(locationName: "s3Managed"), required: false, type: .long), 
            AWSShapeMember(label: "unencrypted", location: .body(locationName: "unencrypted"), required: false, type: .long)
        ]

        public let customerManaged: Int64?
        public let kmsManaged: Int64?
        public let s3Managed: Int64?
        public let unencrypted: Int64?

        public init(customerManaged: Int64? = nil, kmsManaged: Int64? = nil, s3Managed: Int64? = nil, unencrypted: Int64? = nil) {
            self.customerManaged = customerManaged
            self.kmsManaged = kmsManaged
            self.s3Managed = s3Managed
            self.unencrypted = unencrypted
        }

        private enum CodingKeys: String, CodingKey {
            case customerManaged = "customerManaged"
            case kmsManaged = "kmsManaged"
            case s3Managed = "s3Managed"
            case unencrypted = "unencrypted"
        }
    }

    public struct ObjectLevelStatistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fileType", location: .body(locationName: "fileType"), required: false, type: .long), 
            AWSShapeMember(label: "storageClass", location: .body(locationName: "storageClass"), required: false, type: .long), 
            AWSShapeMember(label: "total", location: .body(locationName: "total"), required: false, type: .long)
        ]

        public let fileType: Int64?
        public let storageClass: Int64?
        public let total: Int64?

        public init(fileType: Int64? = nil, storageClass: Int64? = nil, total: Int64? = nil) {
            self.fileType = fileType
            self.storageClass = storageClass
            self.total = total
        }

        private enum CodingKeys: String, CodingKey {
            case fileType = "fileType"
            case storageClass = "storageClass"
            case total = "total"
        }
    }

    public struct PolicyDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "action", location: .body(locationName: "action"), required: false, type: .structure), 
            AWSShapeMember(label: "actor", location: .body(locationName: "actor"), required: false, type: .structure)
        ]

        public let action: FindingAction?
        public let actor: FindingActor?

        public init(action: FindingAction? = nil, actor: FindingActor? = nil) {
            self.action = action
            self.actor = actor
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
            case actor = "actor"
        }
    }

    public struct PutClassificationExportConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configuration", location: .body(locationName: "configuration"), required: true, type: .structure)
        ]

        public let configuration: ClassificationExportConfiguration

        public init(configuration: ClassificationExportConfiguration) {
            self.configuration = configuration
        }

        private enum CodingKeys: String, CodingKey {
            case configuration = "configuration"
        }
    }

    public struct PutClassificationExportConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configuration", location: .body(locationName: "configuration"), required: false, type: .structure)
        ]

        public let configuration: ClassificationExportConfiguration?

        public init(configuration: ClassificationExportConfiguration? = nil) {
            self.configuration = configuration
        }

        private enum CodingKeys: String, CodingKey {
            case configuration = "configuration"
        }
    }

    public struct ReplicationDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "replicated", location: .body(locationName: "replicated"), required: false, type: .boolean), 
            AWSShapeMember(label: "replicatedExternally", location: .body(locationName: "replicatedExternally"), required: false, type: .boolean), 
            AWSShapeMember(label: "replicationAccounts", location: .body(locationName: "replicationAccounts"), required: false, type: .list)
        ]

        public let replicated: Bool?
        public let replicatedExternally: Bool?
        public let replicationAccounts: [String]?

        public init(replicated: Bool? = nil, replicatedExternally: Bool? = nil, replicationAccounts: [String]? = nil) {
            self.replicated = replicated
            self.replicatedExternally = replicatedExternally
            self.replicationAccounts = replicationAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case replicated = "replicated"
            case replicatedExternally = "replicatedExternally"
            case replicationAccounts = "replicationAccounts"
        }
    }

    public struct ResourcesAffected: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "s3Bucket", location: .body(locationName: "s3Bucket"), required: false, type: .structure), 
            AWSShapeMember(label: "s3Object", location: .body(locationName: "s3Object"), required: false, type: .structure)
        ]

        public let s3Bucket: S3Bucket?
        public let s3Object: S3Object?

        public init(s3Bucket: S3Bucket? = nil, s3Object: S3Object? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Object = s3Object
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "s3Bucket"
            case s3Object = "s3Object"
        }
    }

    public struct S3Bucket: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "createdAt", location: .body(locationName: "createdAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "defaultServerSideEncryption", location: .body(locationName: "defaultServerSideEncryption"), required: false, type: .structure), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "owner", location: .body(locationName: "owner"), required: false, type: .structure), 
            AWSShapeMember(label: "publicAccess", location: .body(locationName: "publicAccess"), required: false, type: .structure), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .list)
        ]

        public let arn: String?
        public let createdAt: TimeStamp?
        public let defaultServerSideEncryption: ServerSideEncryption?
        public let name: String?
        public let owner: S3BucketOwner?
        public let publicAccess: BucketPublicAccess?
        public let tags: [KeyValuePair]?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, defaultServerSideEncryption: ServerSideEncryption? = nil, name: String? = nil, owner: S3BucketOwner? = nil, publicAccess: BucketPublicAccess? = nil, tags: [KeyValuePair]? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.defaultServerSideEncryption = defaultServerSideEncryption
            self.name = name
            self.owner = owner
            self.publicAccess = publicAccess
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case defaultServerSideEncryption = "defaultServerSideEncryption"
            case name = "name"
            case owner = "owner"
            case publicAccess = "publicAccess"
            case tags = "tags"
        }
    }

    public struct S3BucketDefinitionForJob: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "buckets", location: .body(locationName: "buckets"), required: false, type: .list)
        ]

        public let accountId: String?
        public let buckets: [String]?

        public init(accountId: String? = nil, buckets: [String]? = nil) {
            self.accountId = accountId
            self.buckets = buckets
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case buckets = "buckets"
        }
    }

    public struct S3BucketOwner: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "displayName", location: .body(locationName: "displayName"), required: false, type: .string), 
            AWSShapeMember(label: "id", location: .body(locationName: "id"), required: false, type: .string)
        ]

        public let displayName: String?
        public let id: String?

        public init(displayName: String? = nil, id: String? = nil) {
            self.displayName = displayName
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "displayName"
            case id = "id"
        }
    }

    public struct S3Destination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "bucketName", location: .body(locationName: "bucketName"), required: true, type: .string), 
            AWSShapeMember(label: "keyPrefix", location: .body(locationName: "keyPrefix"), required: false, type: .string), 
            AWSShapeMember(label: "kmsKeyArn", location: .body(locationName: "kmsKeyArn"), required: true, type: .string)
        ]

        public let bucketName: String
        public let keyPrefix: String?
        public let kmsKeyArn: String

        public init(bucketName: String, keyPrefix: String? = nil, kmsKeyArn: String) {
            self.bucketName = bucketName
            self.keyPrefix = keyPrefix
            self.kmsKeyArn = kmsKeyArn
        }

        private enum CodingKeys: String, CodingKey {
            case bucketName = "bucketName"
            case keyPrefix = "keyPrefix"
            case kmsKeyArn = "kmsKeyArn"
        }
    }

    public struct S3JobDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "bucketDefinitions", location: .body(locationName: "bucketDefinitions"), required: false, type: .list), 
            AWSShapeMember(label: "scoping", location: .body(locationName: "scoping"), required: false, type: .structure)
        ]

        public let bucketDefinitions: [S3BucketDefinitionForJob]?
        public let scoping: Scoping?

        public init(bucketDefinitions: [S3BucketDefinitionForJob]? = nil, scoping: Scoping? = nil) {
            self.bucketDefinitions = bucketDefinitions
            self.scoping = scoping
        }

        private enum CodingKeys: String, CodingKey {
            case bucketDefinitions = "bucketDefinitions"
            case scoping = "scoping"
        }
    }

    public struct S3Object: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "bucketArn", location: .body(locationName: "bucketArn"), required: false, type: .string), 
            AWSShapeMember(label: "eTag", location: .body(locationName: "eTag"), required: false, type: .string), 
            AWSShapeMember(label: "extension", location: .body(locationName: "extension"), required: false, type: .string), 
            AWSShapeMember(label: "key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "lastModified", location: .body(locationName: "lastModified"), required: false, type: .timestamp), 
            AWSShapeMember(label: "path", location: .body(locationName: "path"), required: false, type: .string), 
            AWSShapeMember(label: "publicAccess", location: .body(locationName: "publicAccess"), required: false, type: .boolean), 
            AWSShapeMember(label: "serverSideEncryption", location: .body(locationName: "serverSideEncryption"), required: false, type: .structure), 
            AWSShapeMember(label: "size", location: .body(locationName: "size"), required: false, type: .long), 
            AWSShapeMember(label: "storageClass", location: .body(locationName: "storageClass"), required: false, type: .enum), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: false, type: .list), 
            AWSShapeMember(label: "versionId", location: .body(locationName: "versionId"), required: false, type: .string)
        ]

        public let bucketArn: String?
        public let eTag: String?
        public let `extension`: String?
        public let key: String?
        public let lastModified: TimeStamp?
        public let path: String?
        public let publicAccess: Bool?
        public let serverSideEncryption: ServerSideEncryption?
        public let size: Int64?
        public let storageClass: StorageClass?
        public let tags: [KeyValuePair]?
        public let versionId: String?

        public init(bucketArn: String? = nil, eTag: String? = nil, extension: String? = nil, key: String? = nil, lastModified: TimeStamp? = nil, path: String? = nil, publicAccess: Bool? = nil, serverSideEncryption: ServerSideEncryption? = nil, size: Int64? = nil, storageClass: StorageClass? = nil, tags: [KeyValuePair]? = nil, versionId: String? = nil) {
            self.bucketArn = bucketArn
            self.eTag = eTag
            self.`extension` = `extension`
            self.key = key
            self.lastModified = lastModified
            self.path = path
            self.publicAccess = publicAccess
            self.serverSideEncryption = serverSideEncryption
            self.size = size
            self.storageClass = storageClass
            self.tags = tags
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case bucketArn = "bucketArn"
            case eTag = "eTag"
            case `extension` = "extension"
            case key = "key"
            case lastModified = "lastModified"
            case path = "path"
            case publicAccess = "publicAccess"
            case serverSideEncryption = "serverSideEncryption"
            case size = "size"
            case storageClass = "storageClass"
            case tags = "tags"
            case versionId = "versionId"
        }
    }

    public struct Scoping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "excludes", location: .body(locationName: "excludes"), required: false, type: .structure), 
            AWSShapeMember(label: "includes", location: .body(locationName: "includes"), required: false, type: .structure)
        ]

        public let excludes: JobScopingBlock?
        public let includes: JobScopingBlock?

        public init(excludes: JobScopingBlock? = nil, includes: JobScopingBlock? = nil) {
            self.excludes = excludes
            self.includes = includes
        }

        private enum CodingKeys: String, CodingKey {
            case excludes = "excludes"
            case includes = "includes"
        }
    }

    public struct SensitiveDataItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "category", location: .body(locationName: "category"), required: false, type: .enum), 
            AWSShapeMember(label: "detections", location: .body(locationName: "detections"), required: false, type: .list), 
            AWSShapeMember(label: "totalCount", location: .body(locationName: "totalCount"), required: false, type: .long)
        ]

        public let category: SensitiveDataItemCategory?
        public let detections: [DefaultDetection]?
        public let totalCount: Int64?

        public init(category: SensitiveDataItemCategory? = nil, detections: [DefaultDetection]? = nil, totalCount: Int64? = nil) {
            self.category = category
            self.detections = detections
            self.totalCount = totalCount
        }

        private enum CodingKeys: String, CodingKey {
            case category = "category"
            case detections = "detections"
            case totalCount = "totalCount"
        }
    }

    public struct ServerSideEncryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "encryptionType", location: .body(locationName: "encryptionType"), required: false, type: .enum), 
            AWSShapeMember(label: "kmsMasterKeyId", location: .body(locationName: "kmsMasterKeyId"), required: false, type: .string)
        ]

        public let encryptionType: EncryptionType?
        public let kmsMasterKeyId: String?

        public init(encryptionType: EncryptionType? = nil, kmsMasterKeyId: String? = nil) {
            self.encryptionType = encryptionType
            self.kmsMasterKeyId = kmsMasterKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case encryptionType = "encryptionType"
            case kmsMasterKeyId = "kmsMasterKeyId"
        }
    }

    public struct ServiceLimit: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "isServiceLimited", location: .body(locationName: "isServiceLimited"), required: false, type: .boolean), 
            AWSShapeMember(label: "unit", location: .body(locationName: "unit"), required: false, type: .enum), 
            AWSShapeMember(label: "value", location: .body(locationName: "value"), required: false, type: .long)
        ]

        public let isServiceLimited: Bool?
        public let unit: Unit?
        public let value: Int64?

        public init(isServiceLimited: Bool? = nil, unit: Unit? = nil, value: Int64? = nil) {
            self.isServiceLimited = isServiceLimited
            self.unit = unit
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case isServiceLimited = "isServiceLimited"
            case unit = "unit"
            case value = "value"
        }
    }

    public struct SessionContext: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", location: .body(locationName: "attributes"), required: false, type: .structure), 
            AWSShapeMember(label: "sessionIssuer", location: .body(locationName: "sessionIssuer"), required: false, type: .structure)
        ]

        public let attributes: SessionContextAttributes?
        public let sessionIssuer: SessionIssuer?

        public init(attributes: SessionContextAttributes? = nil, sessionIssuer: SessionIssuer? = nil) {
            self.attributes = attributes
            self.sessionIssuer = sessionIssuer
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
            case sessionIssuer = "sessionIssuer"
        }
    }

    public struct SessionContextAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationDate", location: .body(locationName: "creationDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "mfaAuthenticated", location: .body(locationName: "mfaAuthenticated"), required: false, type: .boolean)
        ]

        public let creationDate: TimeStamp?
        public let mfaAuthenticated: Bool?

        public init(creationDate: TimeStamp? = nil, mfaAuthenticated: Bool? = nil) {
            self.creationDate = creationDate
            self.mfaAuthenticated = mfaAuthenticated
        }

        private enum CodingKeys: String, CodingKey {
            case creationDate = "creationDate"
            case mfaAuthenticated = "mfaAuthenticated"
        }
    }

    public struct SessionIssuer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "principalId", location: .body(locationName: "principalId"), required: false, type: .string), 
            AWSShapeMember(label: "type", location: .body(locationName: "type"), required: false, type: .string), 
            AWSShapeMember(label: "userName", location: .body(locationName: "userName"), required: false, type: .string)
        ]

        public let accountId: String?
        public let arn: String?
        public let principalId: String?
        public let `type`: String?
        public let userName: String?

        public init(accountId: String? = nil, arn: String? = nil, principalId: String? = nil, type: String? = nil, userName: String? = nil) {
            self.accountId = accountId
            self.arn = arn
            self.principalId = principalId
            self.`type` = `type`
            self.userName = userName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case arn = "arn"
            case principalId = "principalId"
            case `type` = "type"
            case userName = "userName"
        }
    }

    public struct Severity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", location: .body(locationName: "description"), required: false, type: .enum), 
            AWSShapeMember(label: "score", location: .body(locationName: "score"), required: false, type: .long)
        ]

        public let description: SeverityDescription?
        public let score: Int64?

        public init(description: SeverityDescription? = nil, score: Int64? = nil) {
            self.description = description
            self.score = score
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case score = "score"
        }
    }

    public struct SimpleScopeTerm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "comparator", location: .body(locationName: "comparator"), required: false, type: .enum), 
            AWSShapeMember(label: "key", location: .body(locationName: "key"), required: false, type: .enum), 
            AWSShapeMember(label: "values", location: .body(locationName: "values"), required: false, type: .list)
        ]

        public let comparator: JobComparator?
        public let key: ScopeFilterKey?
        public let values: [String]?

        public init(comparator: JobComparator? = nil, key: ScopeFilterKey? = nil, values: [String]? = nil) {
            self.comparator = comparator
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case comparator = "comparator"
            case key = "key"
            case values = "values"
        }
    }

    public struct SortCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributeName", location: .body(locationName: "attributeName"), required: false, type: .string), 
            AWSShapeMember(label: "orderBy", location: .body(locationName: "orderBy"), required: false, type: .enum)
        ]

        public let attributeName: String?
        public let orderBy: OrderBy?

        public init(attributeName: String? = nil, orderBy: OrderBy? = nil) {
            self.attributeName = attributeName
            self.orderBy = orderBy
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
            case orderBy = "orderBy"
        }
    }

    public struct Statistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "approximateNumberOfObjectsToProcess", location: .body(locationName: "approximateNumberOfObjectsToProcess"), required: false, type: .double), 
            AWSShapeMember(label: "numberOfRuns", location: .body(locationName: "numberOfRuns"), required: false, type: .double)
        ]

        public let approximateNumberOfObjectsToProcess: Double?
        public let numberOfRuns: Double?

        public init(approximateNumberOfObjectsToProcess: Double? = nil, numberOfRuns: Double? = nil) {
            self.approximateNumberOfObjectsToProcess = approximateNumberOfObjectsToProcess
            self.numberOfRuns = numberOfRuns
        }

        private enum CodingKeys: String, CodingKey {
            case approximateNumberOfObjectsToProcess = "approximateNumberOfObjectsToProcess"
            case numberOfRuns = "numberOfRuns"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "tags", location: .body(locationName: "tags"), required: true, type: .map)
        ]

        public let resourceArn: String
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct TagScopeTerm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "comparator", location: .body(locationName: "comparator"), required: false, type: .enum), 
            AWSShapeMember(label: "key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "tagValues", location: .body(locationName: "tagValues"), required: false, type: .list), 
            AWSShapeMember(label: "target", location: .body(locationName: "target"), required: false, type: .enum)
        ]

        public let comparator: JobComparator?
        public let key: String?
        public let tagValues: [TagValuePair]?
        public let target: TagTarget?

        public init(comparator: JobComparator? = nil, key: String? = nil, tagValues: [TagValuePair]? = nil, target: TagTarget? = nil) {
            self.comparator = comparator
            self.key = key
            self.tagValues = tagValues
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case comparator = "comparator"
            case key = "key"
            case tagValues = "tagValues"
            case target = "target"
        }
    }

    public struct TagValuePair: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        public let key: String?
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct TestCustomDataIdentifierRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ignoreWords", location: .body(locationName: "ignoreWords"), required: false, type: .list), 
            AWSShapeMember(label: "keywords", location: .body(locationName: "keywords"), required: false, type: .list), 
            AWSShapeMember(label: "maximumMatchDistance", location: .body(locationName: "maximumMatchDistance"), required: false, type: .integer), 
            AWSShapeMember(label: "regex", location: .body(locationName: "regex"), required: true, type: .string), 
            AWSShapeMember(label: "sampleText", location: .body(locationName: "sampleText"), required: true, type: .string)
        ]

        public let ignoreWords: [String]?
        public let keywords: [String]?
        public let maximumMatchDistance: Int?
        public let regex: String
        public let sampleText: String

        public init(ignoreWords: [String]? = nil, keywords: [String]? = nil, maximumMatchDistance: Int? = nil, regex: String, sampleText: String) {
            self.ignoreWords = ignoreWords
            self.keywords = keywords
            self.maximumMatchDistance = maximumMatchDistance
            self.regex = regex
            self.sampleText = sampleText
        }

        private enum CodingKeys: String, CodingKey {
            case ignoreWords = "ignoreWords"
            case keywords = "keywords"
            case maximumMatchDistance = "maximumMatchDistance"
            case regex = "regex"
            case sampleText = "sampleText"
        }
    }

    public struct TestCustomDataIdentifierResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "matchCount", location: .body(locationName: "matchCount"), required: false, type: .integer)
        ]

        public let matchCount: Int?

        public init(matchCount: Int? = nil) {
            self.matchCount = matchCount
        }

        private enum CodingKeys: String, CodingKey {
            case matchCount = "matchCount"
        }
    }

    public struct UnprocessedAccount: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "errorCode", location: .body(locationName: "errorCode"), required: false, type: .enum), 
            AWSShapeMember(label: "errorMessage", location: .body(locationName: "errorMessage"), required: false, type: .string)
        ]

        public let accountId: String?
        public let errorCode: ErrorCode?
        public let errorMessage: String?

        public init(accountId: String? = nil, errorCode: ErrorCode? = nil, errorMessage: String? = nil) {
            self.accountId = accountId
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case errorCode = "errorCode"
            case errorMessage = "errorMessage"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "tagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list)
        ]

        public let resourceArn: String
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UntagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateClassificationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "jobStatus", location: .body(locationName: "jobStatus"), required: true, type: .enum)
        ]

        public let jobId: String
        public let jobStatus: JobStatus

        public init(jobId: String, jobStatus: JobStatus) {
            self.jobId = jobId
            self.jobStatus = jobStatus
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case jobStatus = "jobStatus"
        }
    }

    public struct UpdateClassificationJobResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateFindingsFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "action", location: .body(locationName: "action"), required: false, type: .enum), 
            AWSShapeMember(label: "description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "findingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "id", location: .uri(locationName: "id"), required: true, type: .string), 
            AWSShapeMember(label: "name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "position", location: .body(locationName: "position"), required: false, type: .integer)
        ]

        public let action: FindingsFilterAction?
        public let description: String?
        public let findingCriteria: FindingCriteria?
        public let id: String
        public let name: String?
        public let position: Int?

        public init(action: FindingsFilterAction? = nil, description: String? = nil, findingCriteria: FindingCriteria? = nil, id: String, name: String? = nil, position: Int? = nil) {
            self.action = action
            self.description = description
            self.findingCriteria = findingCriteria
            self.id = id
            self.name = name
            self.position = position
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
            case description = "description"
            case findingCriteria = "findingCriteria"
            case id = "id"
            case name = "name"
            case position = "position"
        }
    }

    public struct UpdateFindingsFilterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "id", location: .body(locationName: "id"), required: false, type: .string)
        ]

        public let arn: String?
        public let id: String?

        public init(arn: String? = nil, id: String? = nil) {
            self.arn = arn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case id = "id"
        }
    }

    public struct UpdateMacieSessionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findingPublishingFrequency", location: .body(locationName: "findingPublishingFrequency"), required: false, type: .enum), 
            AWSShapeMember(label: "status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        public let findingPublishingFrequency: FindingPublishingFrequency?
        public let status: MacieStatus?

        public init(findingPublishingFrequency: FindingPublishingFrequency? = nil, status: MacieStatus? = nil) {
            self.findingPublishingFrequency = findingPublishingFrequency
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case findingPublishingFrequency = "findingPublishingFrequency"
            case status = "status"
        }
    }

    public struct UpdateMacieSessionResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateMemberSessionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", location: .uri(locationName: "id"), required: true, type: .string), 
            AWSShapeMember(label: "status", location: .body(locationName: "status"), required: true, type: .enum)
        ]

        public let id: String
        public let status: MacieStatus

        public init(id: String, status: MacieStatus) {
            self.id = id
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case status = "status"
        }
    }

    public struct UpdateMemberSessionResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateOrganizationConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "autoEnable", location: .body(locationName: "autoEnable"), required: true, type: .boolean)
        ]

        public let autoEnable: Bool

        public init(autoEnable: Bool) {
            self.autoEnable = autoEnable
        }

        private enum CodingKeys: String, CodingKey {
            case autoEnable = "autoEnable"
        }
    }

    public struct UpdateOrganizationConfigurationResponse: AWSShape {


        public init() {
        }

    }

    public struct UsageByAccount: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "currency", location: .body(locationName: "currency"), required: false, type: .enum), 
            AWSShapeMember(label: "estimatedCost", location: .body(locationName: "estimatedCost"), required: false, type: .string), 
            AWSShapeMember(label: "serviceLimit", location: .body(locationName: "serviceLimit"), required: false, type: .structure), 
            AWSShapeMember(label: "type", location: .body(locationName: "type"), required: false, type: .enum)
        ]

        public let currency: Currency?
        public let estimatedCost: String?
        public let serviceLimit: ServiceLimit?
        public let `type`: UsageType?

        public init(currency: Currency? = nil, estimatedCost: String? = nil, serviceLimit: ServiceLimit? = nil, type: UsageType? = nil) {
            self.currency = currency
            self.estimatedCost = estimatedCost
            self.serviceLimit = serviceLimit
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case currency = "currency"
            case estimatedCost = "estimatedCost"
            case serviceLimit = "serviceLimit"
            case `type` = "type"
        }
    }

    public struct UsageRecord: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "freeTrialStartDate", location: .body(locationName: "freeTrialStartDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "usage", location: .body(locationName: "usage"), required: false, type: .list)
        ]

        public let accountId: String?
        public let freeTrialStartDate: TimeStamp?
        public let usage: [UsageByAccount]?

        public init(accountId: String? = nil, freeTrialStartDate: TimeStamp? = nil, usage: [UsageByAccount]? = nil) {
            self.accountId = accountId
            self.freeTrialStartDate = freeTrialStartDate
            self.usage = usage
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case freeTrialStartDate = "freeTrialStartDate"
            case usage = "usage"
        }
    }

    public struct UsageStatisticsFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "comparator", location: .body(locationName: "comparator"), required: false, type: .enum), 
            AWSShapeMember(label: "key", location: .body(locationName: "key"), required: false, type: .enum), 
            AWSShapeMember(label: "values", location: .body(locationName: "values"), required: false, type: .list)
        ]

        public let comparator: UsageStatisticsFilterComparator?
        public let key: UsageStatisticsFilterKey?
        public let values: [String]?

        public init(comparator: UsageStatisticsFilterComparator? = nil, key: UsageStatisticsFilterKey? = nil, values: [String]? = nil) {
            self.comparator = comparator
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case comparator = "comparator"
            case key = "key"
            case values = "values"
        }
    }

    public struct UsageStatisticsSortBy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", location: .body(locationName: "key"), required: false, type: .enum), 
            AWSShapeMember(label: "orderBy", location: .body(locationName: "orderBy"), required: false, type: .enum)
        ]

        public let key: UsageStatisticsSortKey?
        public let orderBy: OrderBy?

        public init(key: UsageStatisticsSortKey? = nil, orderBy: OrderBy? = nil) {
            self.key = key
            self.orderBy = orderBy
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case orderBy = "orderBy"
        }
    }

    public struct UsageTotal: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "currency", location: .body(locationName: "currency"), required: false, type: .enum), 
            AWSShapeMember(label: "estimatedCost", location: .body(locationName: "estimatedCost"), required: false, type: .string), 
            AWSShapeMember(label: "type", location: .body(locationName: "type"), required: false, type: .enum)
        ]

        public let currency: Currency?
        public let estimatedCost: String?
        public let `type`: UsageType?

        public init(currency: Currency? = nil, estimatedCost: String? = nil, type: UsageType? = nil) {
            self.currency = currency
            self.estimatedCost = estimatedCost
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case currency = "currency"
            case estimatedCost = "estimatedCost"
            case `type` = "type"
        }
    }

    public struct UserIdentity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assumedRole", location: .body(locationName: "assumedRole"), required: false, type: .structure), 
            AWSShapeMember(label: "awsAccount", location: .body(locationName: "awsAccount"), required: false, type: .structure), 
            AWSShapeMember(label: "awsService", location: .body(locationName: "awsService"), required: false, type: .structure), 
            AWSShapeMember(label: "federatedUser", location: .body(locationName: "federatedUser"), required: false, type: .structure), 
            AWSShapeMember(label: "iamUser", location: .body(locationName: "iamUser"), required: false, type: .structure), 
            AWSShapeMember(label: "root", location: .body(locationName: "root"), required: false, type: .structure), 
            AWSShapeMember(label: "type", location: .body(locationName: "type"), required: false, type: .enum)
        ]

        public let assumedRole: AssumedRole?
        public let awsAccount: AwsAccount?
        public let awsService: AwsService?
        public let federatedUser: FederatedUser?
        public let iamUser: IamUser?
        public let root: UserIdentityRoot?
        public let `type`: UserIdentityType?

        public init(assumedRole: AssumedRole? = nil, awsAccount: AwsAccount? = nil, awsService: AwsService? = nil, federatedUser: FederatedUser? = nil, iamUser: IamUser? = nil, root: UserIdentityRoot? = nil, type: UserIdentityType? = nil) {
            self.assumedRole = assumedRole
            self.awsAccount = awsAccount
            self.awsService = awsService
            self.federatedUser = federatedUser
            self.iamUser = iamUser
            self.root = root
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case assumedRole = "assumedRole"
            case awsAccount = "awsAccount"
            case awsService = "awsService"
            case federatedUser = "federatedUser"
            case iamUser = "iamUser"
            case root = "root"
            case `type` = "type"
        }
    }

    public struct UserIdentityRoot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "principalId", location: .body(locationName: "principalId"), required: false, type: .string)
        ]

        public let accountId: String?
        public let arn: String?
        public let principalId: String?

        public init(accountId: String? = nil, arn: String? = nil, principalId: String? = nil) {
            self.accountId = accountId
            self.arn = arn
            self.principalId = principalId
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case arn = "arn"
            case principalId = "principalId"
        }
    }

    public struct WeeklySchedule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dayOfWeek", location: .body(locationName: "dayOfWeek"), required: false, type: .enum)
        ]

        public let dayOfWeek: DayOfWeek?

        public init(dayOfWeek: DayOfWeek? = nil) {
            self.dayOfWeek = dayOfWeek
        }

        private enum CodingKeys: String, CodingKey {
            case dayOfWeek = "dayOfWeek"
        }
    }
}
