// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension S3 {

    public struct DeleteBucketWebsiteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketEncryptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The name of the bucket from which the server-side encryption configuration is retrieved.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct MetricsAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// The list of tags used when evaluating an AND predicate.
        public let tags: TagSet?
        /// The prefix used when evaluating an AND predicate.
        public let prefix: String?

        public init(tags: TagSet? = nil, prefix: String? = nil) {
            self.tags = tags
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tag"
            case prefix = "Prefix"
        }
    }

    public struct LifecycleExpiration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExpiredObjectDeleteMarker", required: false, type: .boolean), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp), 
            AWSShapeMember(label: "Days", required: false, type: .integer)
        ]
        /// Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no action. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        public let expiredObjectDeleteMarker: Bool?
        /// Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
        public let date: TimeStamp?
        /// Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
        public let days: Int32?

        public init(expiredObjectDeleteMarker: Bool? = nil, date: TimeStamp? = nil, days: Int32? = nil) {
            self.expiredObjectDeleteMarker = expiredObjectDeleteMarker
            self.date = date
            self.days = days
        }

        private enum CodingKeys: String, CodingKey {
            case expiredObjectDeleteMarker = "ExpiredObjectDeleteMarker"
            case date = "Date"
            case days = "Days"
        }
    }

    public struct PutBucketCorsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CORSConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "CORSConfiguration", location: .body(locationName: "CORSConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string)
        ]
        public let bucket: String
        public let cORSConfiguration: CORSConfiguration
        public let contentMD5: String?

        public init(bucket: String, cORSConfiguration: CORSConfiguration, contentMD5: String? = nil) {
            self.bucket = bucket
            self.cORSConfiguration = cORSConfiguration
            self.contentMD5 = contentMD5
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case cORSConfiguration = "CORSConfiguration"
            case contentMD5 = "Content-MD5"
        }
    }

    public struct TagSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .list)
        ]
        public let tag: [Tag]?

        public init(tag: [Tag]? = nil) {
            self.tag = tag
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
        }
    }

    public struct DeleteBucketCorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct Rule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: true, type: .enum), 
            AWSShapeMember(label: "AbortIncompleteMultipartUpload", required: false, type: .structure), 
            AWSShapeMember(label: "NoncurrentVersionExpiration", required: false, type: .structure), 
            AWSShapeMember(label: "Transition", required: false, type: .structure), 
            AWSShapeMember(label: "NoncurrentVersionTransition", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: true, type: .string), 
            AWSShapeMember(label: "Expiration", required: false, type: .structure)
        ]
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public let id: String?
        /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
        public let status: ExpirationStatus
        public let abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload?
        public let noncurrentVersionExpiration: NoncurrentVersionExpiration?
        public let transition: Transition?
        public let noncurrentVersionTransition: NoncurrentVersionTransition?
        /// Prefix identifying one or more objects to which the rule applies.
        public let prefix: String
        public let expiration: LifecycleExpiration?

        public init(id: String? = nil, status: ExpirationStatus, abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = nil, noncurrentVersionExpiration: NoncurrentVersionExpiration? = nil, transition: Transition? = nil, noncurrentVersionTransition: NoncurrentVersionTransition? = nil, prefix: String, expiration: LifecycleExpiration? = nil) {
            self.id = id
            self.status = status
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.transition = transition
            self.noncurrentVersionTransition = noncurrentVersionTransition
            self.prefix = prefix
            self.expiration = expiration
        }

        private enum CodingKeys: String, CodingKey {
            case id = "ID"
            case status = "Status"
            case abortIncompleteMultipartUpload = "AbortIncompleteMultipartUpload"
            case noncurrentVersionExpiration = "NoncurrentVersionExpiration"
            case transition = "Transition"
            case noncurrentVersionTransition = "NoncurrentVersionTransition"
            case prefix = "Prefix"
            case expiration = "Expiration"
        }
    }

    public struct GetBucketReplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketLifecycleConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct LifecycleRuleAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// All of these tags must exist in the object's tag set in order for the rule to apply.
        public let tags: TagSet?
        public let prefix: String?

        public init(tags: TagSet? = nil, prefix: String? = nil) {
            self.tags = tags
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tag"
            case prefix = "Prefix"
        }
    }

    public struct SelectParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputSerialization", required: true, type: .structure), 
            AWSShapeMember(label: "ExpressionType", required: true, type: .enum), 
            AWSShapeMember(label: "Expression", required: true, type: .string), 
            AWSShapeMember(label: "InputSerialization", required: true, type: .structure)
        ]
        /// Describes how the results of the Select job are serialized.
        public let outputSerialization: OutputSerialization
        /// The type of the provided expression (e.g., SQL).
        public let expressionType: ExpressionType
        /// The expression that is used to query the object.
        public let expression: String
        /// Describes the serialization format of the object.
        public let inputSerialization: InputSerialization

        public init(outputSerialization: OutputSerialization, expressionType: ExpressionType, expression: String, inputSerialization: InputSerialization) {
            self.outputSerialization = outputSerialization
            self.expressionType = expressionType
            self.expression = expression
            self.inputSerialization = inputSerialization
        }

        private enum CodingKeys: String, CodingKey {
            case outputSerialization = "OutputSerialization"
            case expressionType = "ExpressionType"
            case expression = "Expression"
            case inputSerialization = "InputSerialization"
        }
    }

    public struct JSONOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDelimiter", required: false, type: .string)
        ]
        /// The value used to separate individual records in the output.
        public let recordDelimiter: String?

        public init(recordDelimiter: String? = nil) {
            self.recordDelimiter = recordDelimiter
        }

        private enum CodingKeys: String, CodingKey {
            case recordDelimiter = "RecordDelimiter"
        }
    }

    public struct CopyObjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp)
        ]
        public let eTag: String?
        public let lastModified: TimeStamp?

        public init(eTag: String? = nil, lastModified: TimeStamp? = nil) {
            self.eTag = eTag
            self.lastModified = lastModified
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case lastModified = "LastModified"
        }
    }

    public struct GetBucketPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct PutBucketAccelerateConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AccelerateConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "AccelerateConfiguration", location: .body(locationName: "AccelerateConfiguration"), required: true, type: .structure)
        ]
        /// Name of the bucket for which the accelerate configuration is set.
        public let bucket: String
        /// Specifies the Accelerate Configuration you want to set for the bucket.
        public let accelerateConfiguration: AccelerateConfiguration

        public init(bucket: String, accelerateConfiguration: AccelerateConfiguration) {
            self.bucket = bucket
            self.accelerateConfiguration = accelerateConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case accelerateConfiguration = "AccelerateConfiguration"
        }
    }

    public struct GetBucketLocationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocationConstraint", required: false, type: .enum)
        ]
        public let locationConstraint: BucketLocationConstraint?

        public init(locationConstraint: BucketLocationConstraint? = nil) {
            self.locationConstraint = locationConstraint
        }

        private enum CodingKeys: String, CodingKey {
            case locationConstraint = "LocationConstraint"
        }
    }

    public struct RedirectAllRequestsTo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostName", required: true, type: .string), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum)
        ]
        /// Name of the host where requests will be redirected.
        public let hostName: String
        /// Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
        public let `protocol`: Protocol?

        public init(hostName: String, protocol: Protocol? = nil) {
            self.hostName = hostName
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case hostName = "HostName"
            case `protocol` = "Protocol"
        }
    }

    public enum ServerSideEncryption: String, CustomStringConvertible, Codable {
        case aes256 = "AES256"
        case awsKms = "aws:kms"
        public var description: String { return self.rawValue }
    }

    public struct UploadPartCopyOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CopyPartResult"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CopyPartResult", required: false, type: .structure), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceVersionId", location: .header(locationName: "x-amz-copy-source-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let copyPartResult: CopyPartResult?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// The version of the source object that was copied, if you have enabled versioning on the source bucket.
        public let copySourceVersionId: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        public let requestCharged: RequestCharged?

        public init(copyPartResult: CopyPartResult? = nil, sSECustomerKeyMD5: String? = nil, copySourceVersionId: String? = nil, sSEKMSKeyId: String? = nil, sSECustomerAlgorithm: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, requestCharged: RequestCharged? = nil) {
            self.copyPartResult = copyPartResult
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.copySourceVersionId = copySourceVersionId
            self.sSEKMSKeyId = sSEKMSKeyId
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case copyPartResult = "CopyPartResult"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case copySourceVersionId = "x-amz-copy-source-version-id"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct Tagging: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSet", required: true, type: .structure)
        ]
        public let tagSet: TagSet

        public init(tagSet: TagSet) {
            self.tagSet = tagSet
        }

        private enum CodingKeys: String, CodingKey {
            case tagSet = "TagSet"
        }
    }

    public struct GetBucketAnalyticsConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AnalyticsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AnalyticsConfiguration", required: false, type: .structure)
        ]
        /// The configuration and any analyses for the analytics filter.
        public let analyticsConfiguration: AnalyticsConfiguration?

        public init(analyticsConfiguration: AnalyticsConfiguration? = nil) {
            self.analyticsConfiguration = analyticsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case analyticsConfiguration = "AnalyticsConfiguration"
        }
    }

    public struct Owner: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string)
        ]
        public let id: String?
        public let displayName: String?

        public init(id: String? = nil, displayName: String? = nil) {
            self.id = id
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case id = "ID"
            case displayName = "DisplayName"
        }
    }

    public struct CreateMultipartUploadOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .body(locationName: "Bucket"), required: false, type: .string), 
            AWSShapeMember(label: "AbortDate", location: .header(locationName: "x-amz-abort-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "AbortRuleId", location: .header(locationName: "x-amz-abort-rule-id"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "UploadId", required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum)
        ]
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String?
        /// Date when multipart upload will become eligible for abort operation by lifecycle.
        public let abortDate: TimeStamp?
        /// Id of the lifecycle rule that makes a multipart upload eligible for abort operation.
        public let abortRuleId: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// Object key for which the multipart upload was initiated.
        public let key: String?
        /// ID for the initiated multipart upload.
        public let uploadId: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        public let requestCharged: RequestCharged?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?

        public init(bucket: String? = nil, abortDate: TimeStamp? = nil, abortRuleId: String? = nil, sSECustomerKeyMD5: String? = nil, key: String? = nil, uploadId: String? = nil, sSEKMSKeyId: String? = nil, sSECustomerAlgorithm: String? = nil, requestCharged: RequestCharged? = nil, serverSideEncryption: ServerSideEncryption? = nil) {
            self.bucket = bucket
            self.abortDate = abortDate
            self.abortRuleId = abortRuleId
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.key = key
            self.uploadId = uploadId
            self.sSEKMSKeyId = sSEKMSKeyId
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.requestCharged = requestCharged
            self.serverSideEncryption = serverSideEncryption
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case abortDate = "x-amz-abort-date"
            case abortRuleId = "x-amz-abort-rule-id"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case key = "Key"
            case uploadId = "UploadId"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case requestCharged = "x-amz-request-charged"
            case serverSideEncryption = "x-amz-server-side-encryption"
        }
    }

    public struct Object: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Size", required: false, type: .integer)
        ]
        public let lastModified: TimeStamp?
        /// The class of storage used to store the object.
        public let storageClass: ObjectStorageClass?
        public let key: String?
        public let eTag: String?
        public let owner: Owner?
        public let size: Int32?

        public init(lastModified: TimeStamp? = nil, storageClass: ObjectStorageClass? = nil, key: String? = nil, eTag: String? = nil, owner: Owner? = nil, size: Int32? = nil) {
            self.lastModified = lastModified
            self.storageClass = storageClass
            self.key = key
            self.eTag = eTag
            self.owner = owner
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case lastModified = "LastModified"
            case storageClass = "StorageClass"
            case key = "Key"
            case eTag = "ETag"
            case owner = "Owner"
            case size = "Size"
        }
    }

    public struct Stats: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BytesProcessed", required: false, type: .long), 
            AWSShapeMember(label: "BytesScanned", required: false, type: .long), 
            AWSShapeMember(label: "BytesReturned", required: false, type: .long)
        ]
        /// Total number of uncompressed object bytes processed.
        public let bytesProcessed: Int64?
        /// Total number of object bytes scanned.
        public let bytesScanned: Int64?
        /// Total number of bytes of records payload data returned.
        public let bytesReturned: Int64?

        public init(bytesProcessed: Int64? = nil, bytesScanned: Int64? = nil, bytesReturned: Int64? = nil) {
            self.bytesProcessed = bytesProcessed
            self.bytesScanned = bytesScanned
            self.bytesReturned = bytesReturned
        }

        private enum CodingKeys: String, CodingKey {
            case bytesProcessed = "BytesProcessed"
            case bytesScanned = "BytesScanned"
            case bytesReturned = "BytesReturned"
        }
    }

    public struct OutputLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3", required: false, type: .structure)
        ]
        /// Describes an S3 location that will receive the results of the restore request.
        public let s3: S3Location?

        public init(s3: S3Location? = nil) {
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case s3 = "S3"
        }
    }

    public struct CopyObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Tagging", location: .header(locationName: "x-amz-tagging"), required: false, type: .string), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfModifiedSince", location: .header(locationName: "x-amz-copy-source-if-modified-since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "CopySourceIfNoneMatch", location: .header(locationName: "x-amz-copy-source-if-none-match"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfMatch", location: .header(locationName: "x-amz-copy-source-if-match"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceSSECustomerKey", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceSSECustomerKeyMD5", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfUnmodifiedSince", location: .header(locationName: "x-amz-copy-source-if-unmodified-since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "TaggingDirective", location: .header(locationName: "x-amz-tagging-directive"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "MetadataDirective", location: .header(locationName: "x-amz-metadata-directive"), required: false, type: .enum), 
            AWSShapeMember(label: "CopySource", location: .header(locationName: "x-amz-copy-source"), required: true, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "CopySourceSSECustomerAlgorithm", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum)
        ]
        public let bucket: String
        /// The tag-set for the object destination object this value must be used in conjunction with the TaggingDirective. The tag-set must be encoded as URL Query parameters
        public let tagging: String?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// Copies the object if it has been modified since the specified time.
        public let copySourceIfModifiedSince: TimeStamp?
        /// Copies the object if its entity tag (ETag) is different than the specified ETag.
        public let copySourceIfNoneMatch: String?
        /// Copies the object if its entity tag (ETag) matches the specified tag.
        public let copySourceIfMatch: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
        public let copySourceSSECustomerKey: String?
        /// The language the content is in.
        public let contentLanguage: String?
        /// Allows grantee to read the object ACL.
        public let grantReadACP: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public let sSEKMSKeyId: String?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// Allows grantee to write the ACL for the applicable object.
        public let grantWriteACP: String?
        public let key: String
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let copySourceSSECustomerKeyMD5: String?
        /// Copies the object if it hasn't been modified since the specified time.
        public let copySourceIfUnmodifiedSince: TimeStamp?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// Specifies whether the object tag-set are copied from the source object or replaced with tag-set provided in the request.
        public let taggingDirective: TaggingDirective?
        public let requestPayer: RequestPayer?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public let grantFullControl: String?
        /// Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request.
        public let metadataDirective: MetadataDirective?
        /// The name of the source bucket and key name of the source object, separated by a slash (/). Must be URL-encoded.
        public let copySource: String
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public let storageClass: StorageClass?
        /// Specifies the algorithm to use when decrypting the source object (e.g., AES256).
        public let copySourceSSECustomerAlgorithm: String?
        /// Allows grantee to read the object data and its metadata.
        public let grantRead: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?

        public init(bucket: String, tagging: String? = nil, contentDisposition: String? = nil, copySourceIfModifiedSince: TimeStamp? = nil, copySourceIfNoneMatch: String? = nil, copySourceIfMatch: String? = nil, copySourceSSECustomerKey: String? = nil, contentLanguage: String? = nil, grantReadACP: String? = nil, sSECustomerAlgorithm: String? = nil, sSEKMSKeyId: String? = nil, contentEncoding: String? = nil, grantWriteACP: String? = nil, key: String, websiteRedirectLocation: String? = nil, copySourceSSECustomerKeyMD5: String? = nil, copySourceIfUnmodifiedSince: TimeStamp? = nil, sSECustomerKey: String? = nil, cacheControl: String? = nil, taggingDirective: TaggingDirective? = nil, requestPayer: RequestPayer? = nil, sSECustomerKeyMD5: String? = nil, grantFullControl: String? = nil, metadataDirective: MetadataDirective? = nil, copySource: String, acl: ObjectCannedACL? = nil, metadata: [String: String]? = nil, expires: TimeStamp? = nil, contentType: String? = nil, storageClass: StorageClass? = nil, copySourceSSECustomerAlgorithm: String? = nil, grantRead: String? = nil, serverSideEncryption: ServerSideEncryption? = nil) {
            self.bucket = bucket
            self.tagging = tagging
            self.contentDisposition = contentDisposition
            self.copySourceIfModifiedSince = copySourceIfModifiedSince
            self.copySourceIfNoneMatch = copySourceIfNoneMatch
            self.copySourceIfMatch = copySourceIfMatch
            self.copySourceSSECustomerKey = copySourceSSECustomerKey
            self.contentLanguage = contentLanguage
            self.grantReadACP = grantReadACP
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.sSEKMSKeyId = sSEKMSKeyId
            self.contentEncoding = contentEncoding
            self.grantWriteACP = grantWriteACP
            self.key = key
            self.websiteRedirectLocation = websiteRedirectLocation
            self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
            self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
            self.sSECustomerKey = sSECustomerKey
            self.cacheControl = cacheControl
            self.taggingDirective = taggingDirective
            self.requestPayer = requestPayer
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.grantFullControl = grantFullControl
            self.metadataDirective = metadataDirective
            self.copySource = copySource
            self.acl = acl
            self.metadata = metadata
            self.expires = expires
            self.contentType = contentType
            self.storageClass = storageClass
            self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
            self.grantRead = grantRead
            self.serverSideEncryption = serverSideEncryption
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case tagging = "x-amz-tagging"
            case contentDisposition = "Content-Disposition"
            case copySourceIfModifiedSince = "x-amz-copy-source-if-modified-since"
            case copySourceIfNoneMatch = "x-amz-copy-source-if-none-match"
            case copySourceIfMatch = "x-amz-copy-source-if-match"
            case copySourceSSECustomerKey = "x-amz-copy-source-server-side-encryption-customer-key"
            case contentLanguage = "Content-Language"
            case grantReadACP = "x-amz-grant-read-acp"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case contentEncoding = "Content-Encoding"
            case grantWriteACP = "x-amz-grant-write-acp"
            case key = "Key"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case copySourceSSECustomerKeyMD5 = "x-amz-copy-source-server-side-encryption-customer-key-MD5"
            case copySourceIfUnmodifiedSince = "x-amz-copy-source-if-unmodified-since"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case cacheControl = "Cache-Control"
            case taggingDirective = "x-amz-tagging-directive"
            case requestPayer = "x-amz-request-payer"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case grantFullControl = "x-amz-grant-full-control"
            case metadataDirective = "x-amz-metadata-directive"
            case copySource = "x-amz-copy-source"
            case acl = "x-amz-acl"
            case metadata = "Metadata"
            case expires = "Expires"
            case contentType = "Content-Type"
            case storageClass = "x-amz-storage-class"
            case copySourceSSECustomerAlgorithm = "x-amz-copy-source-server-side-encryption-customer-algorithm"
            case grantRead = "x-amz-grant-read"
            case serverSideEncryption = "x-amz-server-side-encryption"
        }
    }

    public enum TaggingDirective: String, CustomStringConvertible, Codable {
        case copy = "COPY"
        case replace = "REPLACE"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketLocationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct InventoryEncryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSEKMS", location: .body(locationName: "SSE-KMS"), required: false, type: .structure), 
            AWSShapeMember(label: "SSES3", location: .body(locationName: "SSE-S3"), required: false, type: .structure)
        ]
        /// Specifies the use of SSE-KMS to encrypt delievered Inventory reports.
        public let ssekms: SSEKMS?
        /// Specifies the use of SSE-S3 to encrypt delievered Inventory reports.
        public let sses3: SSES3?

        public init(ssekms: SSEKMS? = nil, sses3: SSES3? = nil) {
            self.ssekms = ssekms
            self.sses3 = sses3
        }

        private enum CodingKeys: String, CodingKey {
            case ssekms = "SSE-KMS"
            case sses3 = "SSE-S3"
        }
    }

    public enum OwnerOverride: String, CustomStringConvertible, Codable {
        case destination = "Destination"
        public var description: String { return self.rawValue }
    }

    public struct Grant: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Permission", required: false, type: .enum), 
            AWSShapeMember(label: "Grantee", required: false, type: .structure)
        ]
        /// Specifies the permission given to the grantee.
        public let permission: Permission?
        public let grantee: Grantee?

        public init(permission: Permission? = nil, grantee: Grantee? = nil) {
            self.permission = permission
            self.grantee = grantee
        }

        private enum CodingKeys: String, CodingKey {
            case permission = "Permission"
            case grantee = "Grantee"
        }
    }

    public struct CSVInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QuoteEscapeCharacter", required: false, type: .string), 
            AWSShapeMember(label: "FileHeaderInfo", required: false, type: .enum), 
            AWSShapeMember(label: "FieldDelimiter", required: false, type: .string), 
            AWSShapeMember(label: "AllowQuotedRecordDelimiter", required: false, type: .boolean), 
            AWSShapeMember(label: "RecordDelimiter", required: false, type: .string), 
            AWSShapeMember(label: "QuoteCharacter", required: false, type: .string), 
            AWSShapeMember(label: "Comments", required: false, type: .string)
        ]
        /// Single character used for escaping the quote character inside an already escaped value.
        public let quoteEscapeCharacter: String?
        /// Describes the first line of input. Valid values: None, Ignore, Use.
        public let fileHeaderInfo: FileHeaderInfo?
        /// Value used to separate individual fields in a record.
        public let fieldDelimiter: String?
        /// Specifies that CSV field values may contain quoted record delimiters and such records should be allowed. Default value is FALSE. Setting this value to TRUE may lower performance.
        public let allowQuotedRecordDelimiter: Bool?
        /// Value used to separate individual records.
        public let recordDelimiter: String?
        /// Value used for escaping where the field delimiter is part of the value.
        public let quoteCharacter: String?
        /// Single character used to indicate a row should be ignored when present at the start of a row.
        public let comments: String?

        public init(quoteEscapeCharacter: String? = nil, fileHeaderInfo: FileHeaderInfo? = nil, fieldDelimiter: String? = nil, allowQuotedRecordDelimiter: Bool? = nil, recordDelimiter: String? = nil, quoteCharacter: String? = nil, comments: String? = nil) {
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.fileHeaderInfo = fileHeaderInfo
            self.fieldDelimiter = fieldDelimiter
            self.allowQuotedRecordDelimiter = allowQuotedRecordDelimiter
            self.recordDelimiter = recordDelimiter
            self.quoteCharacter = quoteCharacter
            self.comments = comments
        }

        private enum CodingKeys: String, CodingKey {
            case quoteEscapeCharacter = "QuoteEscapeCharacter"
            case fileHeaderInfo = "FileHeaderInfo"
            case fieldDelimiter = "FieldDelimiter"
            case allowQuotedRecordDelimiter = "AllowQuotedRecordDelimiter"
            case recordDelimiter = "RecordDelimiter"
            case quoteCharacter = "QuoteCharacter"
            case comments = "Comments"
        }
    }

    public struct InventoryDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BucketDestination", required: true, type: .structure)
        ]
        /// Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.
        public let s3BucketDestination: InventoryS3BucketDestination

        public init(s3BucketDestination: InventoryS3BucketDestination) {
            self.s3BucketDestination = s3BucketDestination
        }

        private enum CodingKeys: String, CodingKey {
            case s3BucketDestination = "S3BucketDestination"
        }
    }

    public enum BucketCannedACL: String, CustomStringConvertible, Codable {
        case `private` = "private"
        case publicRead = "public-read"
        case publicReadWrite = "public-read-write"
        case authenticatedRead = "authenticated-read"
        public var description: String { return self.rawValue }
    }

    public struct ListObjectsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "MaxKeys", location: .querystring(locationName: "max-keys"), required: false, type: .integer), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string), 
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum)
        ]
        public let bucket: String
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// Specifies the key to start with when listing objects in a bucket.
        public let marker: String?
        /// Confirms that the requester knows that she or he will be charged for the list objects request. Bucket owners need not specify this parameter in their requests.
        public let requestPayer: RequestPayer?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        public let encodingType: EncodingType?

        public init(bucket: String, maxKeys: Int32? = nil, marker: String? = nil, requestPayer: RequestPayer? = nil, prefix: String? = nil, delimiter: String? = nil, encodingType: EncodingType? = nil) {
            self.bucket = bucket
            self.maxKeys = maxKeys
            self.marker = marker
            self.requestPayer = requestPayer
            self.prefix = prefix
            self.delimiter = delimiter
            self.encodingType = encodingType
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case maxKeys = "max-keys"
            case marker = "marker"
            case requestPayer = "x-amz-request-payer"
            case prefix = "prefix"
            case delimiter = "delimiter"
            case encodingType = "encoding-type"
        }
    }

    public struct PutBucketAnalyticsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AnalyticsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "AnalyticsConfiguration", location: .body(locationName: "AnalyticsConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket to which an analytics configuration is stored.
        public let bucket: String
        /// The configuration and any analyses for the analytics filter.
        public let analyticsConfiguration: AnalyticsConfiguration
        /// The identifier used to represent an analytics configuration.
        public let id: String

        public init(bucket: String, analyticsConfiguration: AnalyticsConfiguration, id: String) {
            self.bucket = bucket
            self.analyticsConfiguration = analyticsConfiguration
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case analyticsConfiguration = "AnalyticsConfiguration"
            case id = "id"
        }
    }

    public struct CloudFunctionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFunction", required: false, type: .string), 
            AWSShapeMember(label: "InvocationRole", required: false, type: .string), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: false, type: .list), 
            AWSShapeMember(label: "Event", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let cloudFunction: String?
        public let invocationRole: String?
        public let events: [Event]?
        public let event: Event?
        public let id: String?

        public init(cloudFunction: String? = nil, invocationRole: String? = nil, events: [Event]? = nil, event: Event? = nil, id: String? = nil) {
            self.cloudFunction = cloudFunction
            self.invocationRole = invocationRole
            self.events = events
            self.event = event
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFunction = "CloudFunction"
            case invocationRole = "InvocationRole"
            case events = "Event"
            // TODO this is temporary measure for avoiding CondingKey duplication.
            // Should decode duplidated paths with same type for JSON
            case event = "_Event"
            case id = "Id"
        }
    }

    public struct HeadObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "IfUnmodifiedSince", location: .header(locationName: "If-Unmodified-Since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: false, type: .integer), 
            AWSShapeMember(label: "Range", location: .header(locationName: "Range"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "IfNoneMatch", location: .header(locationName: "If-None-Match"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "IfModifiedSince", location: .header(locationName: "If-Modified-Since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        public let bucket: String
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).
        public let ifUnmodifiedSince: TimeStamp?
        /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.
        public let partNumber: Int32?
        /// Downloads the specified range bytes of an object. For more information about the HTTP Range header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
        public let range: String?
        public let requestPayer: RequestPayer?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).
        public let ifNoneMatch: String?
        public let key: String
        /// Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).
        public let ifModifiedSince: TimeStamp?
        /// Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).
        public let ifMatch: String?

        public init(bucket: String, sSECustomerKey: String? = nil, ifUnmodifiedSince: TimeStamp? = nil, partNumber: Int32? = nil, range: String? = nil, requestPayer: RequestPayer? = nil, sSECustomerKeyMD5: String? = nil, versionId: String? = nil, sSECustomerAlgorithm: String? = nil, ifNoneMatch: String? = nil, key: String, ifModifiedSince: TimeStamp? = nil, ifMatch: String? = nil) {
            self.bucket = bucket
            self.sSECustomerKey = sSECustomerKey
            self.ifUnmodifiedSince = ifUnmodifiedSince
            self.partNumber = partNumber
            self.range = range
            self.requestPayer = requestPayer
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.versionId = versionId
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.ifNoneMatch = ifNoneMatch
            self.key = key
            self.ifModifiedSince = ifModifiedSince
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case ifUnmodifiedSince = "If-Unmodified-Since"
            case partNumber = "partNumber"
            case range = "Range"
            case requestPayer = "x-amz-request-payer"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case versionId = "versionId"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case ifNoneMatch = "If-None-Match"
            case key = "Key"
            case ifModifiedSince = "If-Modified-Since"
            case ifMatch = "If-Match"
        }
    }

    public struct GetBucketRequestPaymentOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Payer", required: false, type: .enum)
        ]
        /// Specifies who pays for the download and request fees.
        public let payer: Payer?

        public init(payer: Payer? = nil) {
            self.payer = payer
        }

        private enum CodingKeys: String, CodingKey {
            case payer = "Payer"
        }
    }

    public struct AbortMultipartUploadOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct PutObjectTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Tagging"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Tagging", location: .body(locationName: "Tagging"), required: true, type: .structure), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string)
        ]
        public let bucket: String
        public let contentMD5: String?
        public let tagging: Tagging
        public let key: String
        public let versionId: String?

        public init(bucket: String, contentMD5: String? = nil, tagging: Tagging, key: String, versionId: String? = nil) {
            self.bucket = bucket
            self.contentMD5 = contentMD5
            self.tagging = tagging
            self.key = key
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
            case tagging = "Tagging"
            case key = "Key"
            case versionId = "versionId"
        }
    }

    public struct Progress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BytesProcessed", required: false, type: .long), 
            AWSShapeMember(label: "BytesScanned", required: false, type: .long), 
            AWSShapeMember(label: "BytesReturned", required: false, type: .long)
        ]
        /// Current number of uncompressed object bytes processed.
        public let bytesProcessed: Int64?
        /// Current number of object bytes scanned.
        public let bytesScanned: Int64?
        /// Current number of bytes of records payload data returned.
        public let bytesReturned: Int64?

        public init(bytesProcessed: Int64? = nil, bytesScanned: Int64? = nil, bytesReturned: Int64? = nil) {
            self.bytesProcessed = bytesProcessed
            self.bytesScanned = bytesScanned
            self.bytesReturned = bytesReturned
        }

        private enum CodingKeys: String, CodingKey {
            case bytesProcessed = "BytesProcessed"
            case bytesScanned = "BytesScanned"
            case bytesReturned = "BytesReturned"
        }
    }

    public struct CompletedMultipartUpload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parts", location: .body(locationName: "Part"), required: false, type: .list)
        ]
        public let parts: [CompletedPart]?

        public init(parts: [CompletedPart]? = nil) {
            self.parts = parts
        }

        private enum CodingKeys: String, CodingKey {
            case parts = "Part"
        }
    }

    public enum ObjectCannedACL: String, CustomStringConvertible, Codable {
        case `private` = "private"
        case publicRead = "public-read"
        case publicReadWrite = "public-read-write"
        case authenticatedRead = "authenticated-read"
        case awsExecRead = "aws-exec-read"
        case bucketOwnerRead = "bucket-owner-read"
        case bucketOwnerFullControl = "bucket-owner-full-control"
        public var description: String { return self.rawValue }
    }

    public enum MFADeleteStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct GetObjectOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartsCount", location: .header(locationName: "x-amz-mp-parts-count"), required: false, type: .integer), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "ReplicationStatus", location: .header(locationName: "x-amz-replication-status"), required: false, type: .enum), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "TagCount", location: .header(locationName: "x-amz-tagging-count"), required: false, type: .integer), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "Restore", location: .header(locationName: "x-amz-restore"), required: false, type: .string), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long), 
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Body", required: false, type: .blob), 
            AWSShapeMember(label: "MissingMeta", location: .header(locationName: "x-amz-missing-meta"), required: false, type: .integer), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "AcceptRanges", location: .header(locationName: "accept-ranges"), required: false, type: .string), 
            AWSShapeMember(label: "LastModified", location: .header(locationName: "Last-Modified"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentRange", location: .header(locationName: "Content-Range"), required: false, type: .string), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "DeleteMarker", location: .header(locationName: "x-amz-delete-marker"), required: false, type: .boolean)
        ]
        /// The count of parts this object has.
        public let partsCount: Int32?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// Version of the object.
        public let versionId: String?
        public let replicationStatus: ReplicationStatus?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// The language the content is in.
        public let contentLanguage: String?
        /// The number of tags, if any, on the object.
        public let tagCount: Int32?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// Provides information about object restoration operation and expiration time of the restored object copy.
        public let restore: String?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// Size of the body in bytes.
        public let contentLength: Int64?
        /// If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.
        public let expiration: String?
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL
        public let eTag: String?
        /// Object data.
        public let body: Data?
        /// This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
        public let missingMeta: Int32?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        public let acceptRanges: String?
        /// Last modified date of the object
        public let lastModified: TimeStamp?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// The portion of the object returned in the response.
        public let contentRange: String?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        public let storageClass: StorageClass?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        public let requestCharged: RequestCharged?
        /// Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
        public let deleteMarker: Bool?

        public init(partsCount: Int32? = nil, contentDisposition: String? = nil, versionId: String? = nil, replicationStatus: ReplicationStatus? = nil, sSEKMSKeyId: String? = nil, contentLanguage: String? = nil, tagCount: Int32? = nil, sSECustomerAlgorithm: String? = nil, restore: String? = nil, contentEncoding: String? = nil, contentLength: Int64? = nil, expiration: String? = nil, websiteRedirectLocation: String? = nil, eTag: String? = nil, body: Data? = nil, missingMeta: Int32? = nil, cacheControl: String? = nil, sSECustomerKeyMD5: String? = nil, acceptRanges: String? = nil, lastModified: TimeStamp? = nil, metadata: [String: String]? = nil, expires: TimeStamp? = nil, contentRange: String? = nil, contentType: String? = nil, storageClass: StorageClass? = nil, serverSideEncryption: ServerSideEncryption? = nil, requestCharged: RequestCharged? = nil, deleteMarker: Bool? = nil) {
            self.partsCount = partsCount
            self.contentDisposition = contentDisposition
            self.versionId = versionId
            self.replicationStatus = replicationStatus
            self.sSEKMSKeyId = sSEKMSKeyId
            self.contentLanguage = contentLanguage
            self.tagCount = tagCount
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.restore = restore
            self.contentEncoding = contentEncoding
            self.contentLength = contentLength
            self.expiration = expiration
            self.websiteRedirectLocation = websiteRedirectLocation
            self.eTag = eTag
            self.body = body
            self.missingMeta = missingMeta
            self.cacheControl = cacheControl
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.acceptRanges = acceptRanges
            self.lastModified = lastModified
            self.metadata = metadata
            self.expires = expires
            self.contentRange = contentRange
            self.contentType = contentType
            self.storageClass = storageClass
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
            self.deleteMarker = deleteMarker
        }

        private enum CodingKeys: String, CodingKey {
            case partsCount = "x-amz-mp-parts-count"
            case contentDisposition = "Content-Disposition"
            case versionId = "x-amz-version-id"
            case replicationStatus = "x-amz-replication-status"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case contentLanguage = "Content-Language"
            case tagCount = "x-amz-tagging-count"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case restore = "x-amz-restore"
            case contentEncoding = "Content-Encoding"
            case contentLength = "Content-Length"
            case expiration = "x-amz-expiration"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case eTag = "ETag"
            case body = "Body"
            case missingMeta = "x-amz-missing-meta"
            case cacheControl = "Cache-Control"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case acceptRanges = "accept-ranges"
            case lastModified = "Last-Modified"
            case metadata = "Metadata"
            case expires = "Expires"
            case contentRange = "Content-Range"
            case contentType = "Content-Type"
            case storageClass = "x-amz-storage-class"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case requestCharged = "x-amz-request-charged"
            case deleteMarker = "x-amz-delete-marker"
        }
    }

    public enum Event: String, CustomStringConvertible, Codable {
        case s3Reducedredundancylostobject = "s3:ReducedRedundancyLostObject"
        case s3ObjectcreatedAll = "s3:ObjectCreated:*"
        case s3ObjectcreatedPut = "s3:ObjectCreated:Put"
        case s3ObjectcreatedPost = "s3:ObjectCreated:Post"
        case s3ObjectcreatedCopy = "s3:ObjectCreated:Copy"
        case s3ObjectcreatedCompletemultipartupload = "s3:ObjectCreated:CompleteMultipartUpload"
        case s3ObjectremovedAll = "s3:ObjectRemoved:*"
        case s3ObjectremovedDelete = "s3:ObjectRemoved:Delete"
        case s3ObjectremovedDeletemarkercreated = "s3:ObjectRemoved:DeleteMarkerCreated"
        public var description: String { return self.rawValue }
    }

    public struct NotificationConfigurationDeprecated: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueueConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "TopicConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CloudFunctionConfiguration", required: false, type: .structure)
        ]
        public let queueConfiguration: QueueConfigurationDeprecated?
        public let topicConfiguration: TopicConfigurationDeprecated?
        public let cloudFunctionConfiguration: CloudFunctionConfiguration?

        public init(queueConfiguration: QueueConfigurationDeprecated? = nil, topicConfiguration: TopicConfigurationDeprecated? = nil, cloudFunctionConfiguration: CloudFunctionConfiguration? = nil) {
            self.queueConfiguration = queueConfiguration
            self.topicConfiguration = topicConfiguration
            self.cloudFunctionConfiguration = cloudFunctionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case queueConfiguration = "QueueConfiguration"
            case topicConfiguration = "TopicConfiguration"
            case cloudFunctionConfiguration = "CloudFunctionConfiguration"
        }
    }

    public struct Transition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp), 
            AWSShapeMember(label: "Days", required: false, type: .integer)
        ]
        /// The class of storage used to store the object.
        public let storageClass: TransitionStorageClass?
        /// Indicates at what date the object is to be moved or deleted. Should be in GMT ISO 8601 Format.
        public let date: TimeStamp?
        /// Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
        public let days: Int32?

        public init(storageClass: TransitionStorageClass? = nil, date: TimeStamp? = nil, days: Int32? = nil) {
            self.storageClass = storageClass
            self.date = date
            self.days = days
        }

        private enum CodingKeys: String, CodingKey {
            case storageClass = "StorageClass"
            case date = "Date"
            case days = "Days"
        }
    }

    public struct MetricsConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure)
        ]
        /// The ID used to identify the metrics configuration.
        public let id: String
        /// Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction (MetricsAndOperator).
        public let filter: MetricsFilter?

        public init(id: String, filter: MetricsFilter? = nil) {
            self.id = id
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case filter = "Filter"
        }
    }

    public struct Condition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HttpErrorCodeReturnedEquals", required: false, type: .string), 
            AWSShapeMember(label: "KeyPrefixEquals", required: false, type: .string)
        ]
        /// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied.
        public let httpErrorCodeReturnedEquals: String?
        /// The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix docs/, the key prefix will be /docs, which identifies all objects in the docs/ folder. Required when the parent element Condition is specified and sibling HttpErrorCodeReturnedEquals is not specified. If both conditions are specified, both must be true for the redirect to be applied.
        public let keyPrefixEquals: String?

        public init(httpErrorCodeReturnedEquals: String? = nil, keyPrefixEquals: String? = nil) {
            self.httpErrorCodeReturnedEquals = httpErrorCodeReturnedEquals
            self.keyPrefixEquals = keyPrefixEquals
        }

        private enum CodingKeys: String, CodingKey {
            case httpErrorCodeReturnedEquals = "HttpErrorCodeReturnedEquals"
            case keyPrefixEquals = "KeyPrefixEquals"
        }
    }

    public struct VersioningConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MFADelete", location: .body(locationName: "MfaDelete"), required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
        public let mFADelete: MFADelete?
        /// The versioning state of the bucket.
        public let status: BucketVersioningStatus?

        public init(mFADelete: MFADelete? = nil, status: BucketVersioningStatus? = nil) {
            self.mFADelete = mFADelete
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case mFADelete = "MfaDelete"
            case status = "Status"
        }
    }

    public struct AccelerateConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The accelerate configuration of the bucket.
        public let status: BucketAccelerateStatus?

        public init(status: BucketAccelerateStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public enum RestoreRequestType: String, CustomStringConvertible, Codable {
        case select = "SELECT"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketLoggingRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "BucketLoggingStatus"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "BucketLoggingStatus", location: .body(locationName: "BucketLoggingStatus"), required: true, type: .structure)
        ]
        public let contentMD5: String?
        public let bucket: String
        public let bucketLoggingStatus: BucketLoggingStatus

        public init(contentMD5: String? = nil, bucket: String, bucketLoggingStatus: BucketLoggingStatus) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.bucketLoggingStatus = bucketLoggingStatus
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case bucketLoggingStatus = "BucketLoggingStatus"
        }
    }

    public struct GetBucketPolicyOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Policy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: false, type: .string)
        ]
        /// The bucket policy as a JSON document.
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct JSONInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// The type of JSON. Valid values: Document, Lines.
        public let `type`: JSONType?

        public init(type: JSONType? = nil) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
        }
    }

    public struct ReplicationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Role", required: true, type: .string), 
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        /// Amazon Resource Name (ARN) of an IAM role for Amazon S3 to assume when replicating the objects.
        public let role: String
        /// Container for information about a particular replication rule. Replication configuration must have at least one rule and can contain up to 1,000 rules.
        public let rules: [ReplicationRule]

        public init(role: String, rules: [ReplicationRule]) {
            self.role = role
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case role = "Role"
            case rules = "Rule"
        }
    }

    public enum ReplicationStatus: String, CustomStringConvertible, Codable {
        case complete = "COMPLETED"
        case pending = "PENDING"
        case failed = "FAILED"
        case replica = "REPLICA"
        public var description: String { return self.rawValue }
    }

    public struct ObjectVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "Size", required: false, type: .integer), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "IsLatest", required: false, type: .boolean), 
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .structure)
        ]
        /// Date and time the object was last modified.
        public let lastModified: TimeStamp?
        /// Size in bytes of the object.
        public let size: Int32?
        /// Version ID of an object.
        public let versionId: String?
        /// The class of storage used to store the object.
        public let storageClass: ObjectVersionStorageClass?
        /// The object key.
        public let key: String?
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public let isLatest: Bool?
        public let eTag: String?
        public let owner: Owner?

        public init(lastModified: TimeStamp? = nil, size: Int32? = nil, versionId: String? = nil, storageClass: ObjectVersionStorageClass? = nil, key: String? = nil, isLatest: Bool? = nil, eTag: String? = nil, owner: Owner? = nil) {
            self.lastModified = lastModified
            self.size = size
            self.versionId = versionId
            self.storageClass = storageClass
            self.key = key
            self.isLatest = isLatest
            self.eTag = eTag
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case lastModified = "LastModified"
            case size = "Size"
            case versionId = "VersionId"
            case storageClass = "StorageClass"
            case key = "Key"
            case isLatest = "IsLatest"
            case eTag = "ETag"
            case owner = "Owner"
        }
    }

    public struct GetBucketReplicationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ReplicationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationConfiguration", required: false, type: .structure)
        ]
        public let replicationConfiguration: ReplicationConfiguration?

        public init(replicationConfiguration: ReplicationConfiguration? = nil) {
            self.replicationConfiguration = replicationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case replicationConfiguration = "ReplicationConfiguration"
        }
    }

    public struct PutBucketInventoryConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "InventoryConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "InventoryConfiguration", location: .body(locationName: "InventoryConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket where the inventory configuration will be stored.
        public let bucket: String
        /// Specifies the inventory configuration.
        public let inventoryConfiguration: InventoryConfiguration
        /// The ID used to identify the inventory configuration.
        public let id: String

        public init(bucket: String, inventoryConfiguration: InventoryConfiguration, id: String) {
            self.bucket = bucket
            self.inventoryConfiguration = inventoryConfiguration
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case inventoryConfiguration = "InventoryConfiguration"
            case id = "id"
        }
    }

    public enum ReplicationRuleStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct ListObjectsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxKeys", required: false, type: .integer), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list), 
            AWSShapeMember(label: "Contents", required: false, type: .list), 
            AWSShapeMember(label: "Delimiter", required: false, type: .string), 
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        public let maxKeys: Int32?
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
        public let isTruncated: Bool?
        public let marker: String?
        public let name: String?
        public let prefix: String?
        public let commonPrefixes: [CommonPrefix]?
        public let contents: [Object]?
        public let delimiter: String?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        /// When response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as marker in the subsequent request to get next set of objects. Amazon S3 lists objects in alphabetical order Note: This element is returned only if you have delimiter request parameter specified. If response does not include the NextMaker and it is truncated, you can use the value of the last Key in the response as the marker in the subsequent request to get the next set of object keys.
        public let nextMarker: String?

        public init(maxKeys: Int32? = nil, isTruncated: Bool? = nil, marker: String? = nil, name: String? = nil, prefix: String? = nil, commonPrefixes: [CommonPrefix]? = nil, contents: [Object]? = nil, delimiter: String? = nil, encodingType: EncodingType? = nil, nextMarker: String? = nil) {
            self.maxKeys = maxKeys
            self.isTruncated = isTruncated
            self.marker = marker
            self.name = name
            self.prefix = prefix
            self.commonPrefixes = commonPrefixes
            self.contents = contents
            self.delimiter = delimiter
            self.encodingType = encodingType
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case maxKeys = "MaxKeys"
            case isTruncated = "IsTruncated"
            case marker = "Marker"
            case name = "Name"
            case prefix = "Prefix"
            case commonPrefixes = "CommonPrefixes"
            case contents = "Contents"
            case delimiter = "Delimiter"
            case encodingType = "EncodingType"
            case nextMarker = "NextMarker"
        }
    }

    public struct CompleteMultipartUploadOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: false, type: .string), 
            AWSShapeMember(label: "Location", required: false, type: .string), 
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let bucket: String?
        public let location: String?
        /// If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.
        public let expiration: String?
        /// Version of the object.
        public let versionId: String?
        public let key: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// Entity tag of the object.
        public let eTag: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        public let requestCharged: RequestCharged?

        public init(bucket: String? = nil, location: String? = nil, expiration: String? = nil, versionId: String? = nil, key: String? = nil, sSEKMSKeyId: String? = nil, eTag: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, requestCharged: RequestCharged? = nil) {
            self.bucket = bucket
            self.location = location
            self.expiration = expiration
            self.versionId = versionId
            self.key = key
            self.sSEKMSKeyId = sSEKMSKeyId
            self.eTag = eTag
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case location = "Location"
            case expiration = "x-amz-expiration"
            case versionId = "x-amz-version-id"
            case key = "Key"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case eTag = "ETag"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct NotificationConfigurationFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "S3Key"), required: false, type: .structure)
        ]
        public let key: S3KeyFilter?

        public init(key: S3KeyFilter? = nil) {
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case key = "S3Key"
        }
    }

    public struct PutObjectAclRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AccessControlPolicy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "AccessControlPolicy", location: .body(locationName: "AccessControlPolicy"), required: false, type: .structure), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWrite", location: .header(locationName: "x-amz-grant-write"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum)
        ]
        public let bucket: String
        public let contentMD5: String?
        public let accessControlPolicy: AccessControlPolicy?
        /// Allows grantee to write the ACL for the applicable bucket.
        public let grantWriteACP: String?
        public let requestPayer: RequestPayer?
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public let grantFullControl: String?
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public let grantWrite: String?
        public let key: String
        /// Allows grantee to read the bucket ACL.
        public let grantReadACP: String?
        /// Allows grantee to list the objects in the bucket.
        public let grantRead: String?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?

        public init(bucket: String, contentMD5: String? = nil, accessControlPolicy: AccessControlPolicy? = nil, grantWriteACP: String? = nil, requestPayer: RequestPayer? = nil, grantFullControl: String? = nil, versionId: String? = nil, grantWrite: String? = nil, key: String, grantReadACP: String? = nil, grantRead: String? = nil, acl: ObjectCannedACL? = nil) {
            self.bucket = bucket
            self.contentMD5 = contentMD5
            self.accessControlPolicy = accessControlPolicy
            self.grantWriteACP = grantWriteACP
            self.requestPayer = requestPayer
            self.grantFullControl = grantFullControl
            self.versionId = versionId
            self.grantWrite = grantWrite
            self.key = key
            self.grantReadACP = grantReadACP
            self.grantRead = grantRead
            self.acl = acl
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
            case accessControlPolicy = "AccessControlPolicy"
            case grantWriteACP = "x-amz-grant-write-acp"
            case requestPayer = "x-amz-request-payer"
            case grantFullControl = "x-amz-grant-full-control"
            case versionId = "versionId"
            case grantWrite = "x-amz-grant-write"
            case key = "Key"
            case grantReadACP = "x-amz-grant-read-acp"
            case grantRead = "x-amz-grant-read"
            case acl = "x-amz-acl"
        }
    }

    public enum AnalyticsS3ExportFileFormat: String, CustomStringConvertible, Codable {
        case csv = "CSV"
        public var description: String { return self.rawValue }
    }

    public struct TopicConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicArn", location: .body(locationName: "Topic"), required: true, type: .string), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: true, type: .list), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Amazon SNS topic ARN to which Amazon S3 will publish a message when it detects events of specified type.
        public let topicArn: String
        public let events: [Event]
        public let filter: NotificationConfigurationFilter?
        public let id: String?

        public init(topicArn: String, events: [Event], filter: NotificationConfigurationFilter? = nil, id: String? = nil) {
            self.topicArn = topicArn
            self.events = events
            self.filter = filter
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "Topic"
            case events = "Event"
            case filter = "Filter"
            case id = "Id"
        }
    }

    public struct RoutingRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Redirect", required: true, type: .structure), 
            AWSShapeMember(label: "Condition", required: false, type: .structure)
        ]
        /// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
        public let redirect: Redirect
        /// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
        public let condition: Condition?

        public init(redirect: Redirect, condition: Condition? = nil) {
            self.redirect = redirect
            self.condition = condition
        }

        private enum CodingKeys: String, CodingKey {
            case redirect = "Redirect"
            case condition = "Condition"
        }
    }

    public enum EncodingType: String, CustomStringConvertible, Codable {
        case url = "url"
        public var description: String { return self.rawValue }
    }

    public struct LifecycleRuleFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .structure), 
            AWSShapeMember(label: "And", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// This tag must exist in the object's tag set in order for the rule to apply.
        public let tag: Tag?
        public let and: LifecycleRuleAndOperator?
        /// Prefix identifying one or more objects to which the rule applies.
        public let prefix: String?

        public init(tag: Tag? = nil, and: LifecycleRuleAndOperator? = nil, prefix: String? = nil) {
            self.tag = tag
            self.and = and
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
            case and = "And"
            case prefix = "Prefix"
        }
    }

    public struct IndexDocument: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Suffix", required: true, type: .string)
        ]
        /// A suffix that is appended to a request that is for a directory on the website endpoint (e.g. if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character.
        public let suffix: String

        public init(suffix: String) {
            self.suffix = suffix
        }

        private enum CodingKeys: String, CodingKey {
            case suffix = "Suffix"
        }
    }

    public struct HeadObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartsCount", location: .header(locationName: "x-amz-mp-parts-count"), required: false, type: .integer), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "ReplicationStatus", location: .header(locationName: "x-amz-replication-status"), required: false, type: .enum), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "Restore", location: .header(locationName: "x-amz-restore"), required: false, type: .string), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long), 
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "MissingMeta", location: .header(locationName: "x-amz-missing-meta"), required: false, type: .integer), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "AcceptRanges", location: .header(locationName: "accept-ranges"), required: false, type: .string), 
            AWSShapeMember(label: "LastModified", location: .header(locationName: "Last-Modified"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "DeleteMarker", location: .header(locationName: "x-amz-delete-marker"), required: false, type: .boolean)
        ]
        /// The count of parts this object has.
        public let partsCount: Int32?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// Version of the object.
        public let versionId: String?
        public let replicationStatus: ReplicationStatus?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// The language the content is in.
        public let contentLanguage: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// Provides information about object restoration operation and expiration time of the restored object copy.
        public let restore: String?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// Size of the body in bytes.
        public let contentLength: Int64?
        /// If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.
        public let expiration: String?
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL
        public let eTag: String?
        /// This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
        public let missingMeta: Int32?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        public let acceptRanges: String?
        /// Last modified date of the object
        public let lastModified: TimeStamp?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        public let storageClass: StorageClass?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        public let requestCharged: RequestCharged?
        /// Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
        public let deleteMarker: Bool?

        public init(partsCount: Int32? = nil, contentDisposition: String? = nil, versionId: String? = nil, replicationStatus: ReplicationStatus? = nil, sSEKMSKeyId: String? = nil, contentLanguage: String? = nil, sSECustomerAlgorithm: String? = nil, restore: String? = nil, contentEncoding: String? = nil, contentLength: Int64? = nil, expiration: String? = nil, websiteRedirectLocation: String? = nil, eTag: String? = nil, missingMeta: Int32? = nil, cacheControl: String? = nil, sSECustomerKeyMD5: String? = nil, acceptRanges: String? = nil, lastModified: TimeStamp? = nil, metadata: [String: String]? = nil, expires: TimeStamp? = nil, contentType: String? = nil, storageClass: StorageClass? = nil, serverSideEncryption: ServerSideEncryption? = nil, requestCharged: RequestCharged? = nil, deleteMarker: Bool? = nil) {
            self.partsCount = partsCount
            self.contentDisposition = contentDisposition
            self.versionId = versionId
            self.replicationStatus = replicationStatus
            self.sSEKMSKeyId = sSEKMSKeyId
            self.contentLanguage = contentLanguage
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.restore = restore
            self.contentEncoding = contentEncoding
            self.contentLength = contentLength
            self.expiration = expiration
            self.websiteRedirectLocation = websiteRedirectLocation
            self.eTag = eTag
            self.missingMeta = missingMeta
            self.cacheControl = cacheControl
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.acceptRanges = acceptRanges
            self.lastModified = lastModified
            self.metadata = metadata
            self.expires = expires
            self.contentType = contentType
            self.storageClass = storageClass
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
            self.deleteMarker = deleteMarker
        }

        private enum CodingKeys: String, CodingKey {
            case partsCount = "x-amz-mp-parts-count"
            case contentDisposition = "Content-Disposition"
            case versionId = "x-amz-version-id"
            case replicationStatus = "x-amz-replication-status"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case contentLanguage = "Content-Language"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case restore = "x-amz-restore"
            case contentEncoding = "Content-Encoding"
            case contentLength = "Content-Length"
            case expiration = "x-amz-expiration"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case eTag = "ETag"
            case missingMeta = "x-amz-missing-meta"
            case cacheControl = "Cache-Control"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case acceptRanges = "accept-ranges"
            case lastModified = "Last-Modified"
            case metadata = "Metadata"
            case expires = "Expires"
            case contentType = "Content-Type"
            case storageClass = "x-amz-storage-class"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case requestCharged = "x-amz-request-charged"
            case deleteMarker = "x-amz-delete-marker"
        }
    }

    public struct EncryptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicaKmsKeyID", required: false, type: .string)
        ]
        /// The id of the KMS key used to encrypt the replica object.
        public let replicaKmsKeyID: String?

        public init(replicaKmsKeyID: String? = nil) {
            self.replicaKmsKeyID = replicaKmsKeyID
        }

        private enum CodingKeys: String, CodingKey {
            case replicaKmsKeyID = "ReplicaKmsKeyID"
        }
    }

    public struct Encryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KMSKeyId", required: false, type: .string), 
            AWSShapeMember(label: "KMSContext", required: false, type: .string), 
            AWSShapeMember(label: "EncryptionType", required: true, type: .enum)
        ]
        /// If the encryption type is aws:kms, this optional value specifies the AWS KMS key ID to use for encryption of job results.
        public let kMSKeyId: String?
        /// If the encryption type is aws:kms, this optional value can be used to specify the encryption context for the restore results.
        public let kMSContext: String?
        /// The server-side encryption algorithm used when storing job results in Amazon S3 (e.g., AES256, aws:kms).
        public let encryptionType: ServerSideEncryption

        public init(kMSKeyId: String? = nil, kMSContext: String? = nil, encryptionType: ServerSideEncryption) {
            self.kMSKeyId = kMSKeyId
            self.kMSContext = kMSContext
            self.encryptionType = encryptionType
        }

        private enum CodingKeys: String, CodingKey {
            case kMSKeyId = "KMSKeyId"
            case kMSContext = "KMSContext"
            case encryptionType = "EncryptionType"
        }
    }

    public struct CompletedPart: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "PartNumber", required: false, type: .integer)
        ]
        /// Entity tag returned when the part was uploaded.
        public let eTag: String?
        /// Part number that identifies the part. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32?

        public init(eTag: String? = nil, partNumber: Int32? = nil) {
            self.eTag = eTag
            self.partNumber = partNumber
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case partNumber = "PartNumber"
        }
    }

    public struct GetBucketTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct ListObjectsV2Output: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxKeys", required: false, type: .integer), 
            AWSShapeMember(label: "StartAfter", required: false, type: .string), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list), 
            AWSShapeMember(label: "Contents", required: false, type: .list), 
            AWSShapeMember(label: "Delimiter", required: false, type: .string), 
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "KeyCount", required: false, type: .integer)
        ]
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket
        public let startAfter: String?
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria.
        public let isTruncated: Bool?
        /// ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key
        public let continuationToken: String?
        /// Name of the bucket to list.
        public let name: String?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// NextContinuationToken is sent when isTruncated is true which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this NextContinuationToken. NextContinuationToken is obfuscated and is not a real key
        public let nextContinuationToken: String?
        /// CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by delimiter
        public let commonPrefixes: [CommonPrefix]?
        /// Metadata about each object returned.
        public let contents: [Object]?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        /// KeyCount is the number of keys returned with this request. KeyCount will always be less than equals to MaxKeys field. Say you ask for 50 keys, your result will include less than equals 50 keys 
        public let keyCount: Int32?

        public init(maxKeys: Int32? = nil, startAfter: String? = nil, isTruncated: Bool? = nil, continuationToken: String? = nil, name: String? = nil, prefix: String? = nil, nextContinuationToken: String? = nil, commonPrefixes: [CommonPrefix]? = nil, contents: [Object]? = nil, delimiter: String? = nil, encodingType: EncodingType? = nil, keyCount: Int32? = nil) {
            self.maxKeys = maxKeys
            self.startAfter = startAfter
            self.isTruncated = isTruncated
            self.continuationToken = continuationToken
            self.name = name
            self.prefix = prefix
            self.nextContinuationToken = nextContinuationToken
            self.commonPrefixes = commonPrefixes
            self.contents = contents
            self.delimiter = delimiter
            self.encodingType = encodingType
            self.keyCount = keyCount
        }

        private enum CodingKeys: String, CodingKey {
            case maxKeys = "MaxKeys"
            case startAfter = "StartAfter"
            case isTruncated = "IsTruncated"
            case continuationToken = "ContinuationToken"
            case name = "Name"
            case prefix = "Prefix"
            case nextContinuationToken = "NextContinuationToken"
            case commonPrefixes = "CommonPrefixes"
            case contents = "Contents"
            case delimiter = "Delimiter"
            case encodingType = "EncodingType"
            case keyCount = "KeyCount"
        }
    }

    public struct TargetGrant: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Permission", required: false, type: .enum), 
            AWSShapeMember(label: "Grantee", required: false, type: .structure)
        ]
        /// Logging permissions assigned to the Grantee for the bucket.
        public let permission: BucketLogsPermission?
        public let grantee: Grantee?

        public init(permission: BucketLogsPermission? = nil, grantee: Grantee? = nil) {
            self.permission = permission
            self.grantee = grantee
        }

        private enum CodingKeys: String, CodingKey {
            case permission = "Permission"
            case grantee = "Grantee"
        }
    }

    public struct BucketLoggingStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggingEnabled", required: false, type: .structure)
        ]
        public let loggingEnabled: LoggingEnabled?

        public init(loggingEnabled: LoggingEnabled? = nil) {
            self.loggingEnabled = loggingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case loggingEnabled = "LoggingEnabled"
        }
    }

    public struct AnalyticsS3BucketDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "Format", required: true, type: .enum), 
            AWSShapeMember(label: "BucketAccountId", required: false, type: .string), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// The Amazon resource name (ARN) of the bucket to which data is exported.
        public let bucket: String
        /// The file format used when exporting data to Amazon S3.
        public let format: AnalyticsS3ExportFileFormat
        /// The account ID that owns the destination bucket. If no account ID is provided, the owner will not be validated prior to exporting data.
        public let bucketAccountId: String?
        /// The prefix to use when exporting data. The exported data begins with this prefix.
        public let prefix: String?

        public init(bucket: String, format: AnalyticsS3ExportFileFormat, bucketAccountId: String? = nil, prefix: String? = nil) {
            self.bucket = bucket
            self.format = format
            self.bucketAccountId = bucketAccountId
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case format = "Format"
            case bucketAccountId = "BucketAccountId"
            case prefix = "Prefix"
        }
    }

    public enum InventoryFrequency: String, CustomStringConvertible, Codable {
        case daily = "Daily"
        case weekly = "Weekly"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketLifecycleRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "LifecycleConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "LifecycleConfiguration", location: .body(locationName: "LifecycleConfiguration"), required: false, type: .structure)
        ]
        public let contentMD5: String?
        public let bucket: String
        public let lifecycleConfiguration: LifecycleConfiguration?

        public init(contentMD5: String? = nil, bucket: String, lifecycleConfiguration: LifecycleConfiguration? = nil) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.lifecycleConfiguration = lifecycleConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case lifecycleConfiguration = "LifecycleConfiguration"
        }
    }

    public struct WebsiteConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoutingRules", required: false, type: .structure), 
            AWSShapeMember(label: "IndexDocument", required: false, type: .structure), 
            AWSShapeMember(label: "ErrorDocument", required: false, type: .structure), 
            AWSShapeMember(label: "RedirectAllRequestsTo", required: false, type: .structure)
        ]
        public let routingRules: RoutingRules?
        public let indexDocument: IndexDocument?
        public let errorDocument: ErrorDocument?
        public let redirectAllRequestsTo: RedirectAllRequestsTo?

        public init(routingRules: RoutingRules? = nil, indexDocument: IndexDocument? = nil, errorDocument: ErrorDocument? = nil, redirectAllRequestsTo: RedirectAllRequestsTo? = nil) {
            self.routingRules = routingRules
            self.indexDocument = indexDocument
            self.errorDocument = errorDocument
            self.redirectAllRequestsTo = redirectAllRequestsTo
        }

        private enum CodingKeys: String, CodingKey {
            case routingRules = "RoutingRules"
            case indexDocument = "IndexDocument"
            case errorDocument = "ErrorDocument"
            case redirectAllRequestsTo = "RedirectAllRequestsTo"
        }
    }

    public struct NotificationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicConfigurations", location: .body(locationName: "TopicConfiguration"), required: false, type: .list), 
            AWSShapeMember(label: "QueueConfigurations", location: .body(locationName: "QueueConfiguration"), required: false, type: .list), 
            AWSShapeMember(label: "LambdaFunctionConfigurations", location: .body(locationName: "CloudFunctionConfiguration"), required: false, type: .list)
        ]
        public let topicConfigurations: [TopicConfiguration]?
        public let queueConfigurations: [QueueConfiguration]?
        public let lambdaFunctionConfigurations: [LambdaFunctionConfiguration]?

        public init(topicConfigurations: [TopicConfiguration]? = nil, queueConfigurations: [QueueConfiguration]? = nil, lambdaFunctionConfigurations: [LambdaFunctionConfiguration]? = nil) {
            self.topicConfigurations = topicConfigurations
            self.queueConfigurations = queueConfigurations
            self.lambdaFunctionConfigurations = lambdaFunctionConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case topicConfigurations = "TopicConfiguration"
            case queueConfigurations = "QueueConfiguration"
            case lambdaFunctionConfigurations = "CloudFunctionConfiguration"
        }
    }

    public struct AnalyticsFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .structure), 
            AWSShapeMember(label: "And", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// The tag to use when evaluating an analytics filter.
        public let tag: Tag?
        /// A conjunction (logical AND) of predicates, which is used in evaluating an analytics filter. The operator must have at least two predicates.
        public let and: AnalyticsAndOperator?
        /// The prefix to use when evaluating an analytics filter.
        public let prefix: String?

        public init(tag: Tag? = nil, and: AnalyticsAndOperator? = nil, prefix: String? = nil) {
            self.tag = tag
            self.and = and
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
            case and = "And"
            case prefix = "Prefix"
        }
    }

    public struct GetBucketAclRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetObjectTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string)
        ]
        public let bucket: String
        public let versionId: String?
        public let key: String

        public init(bucket: String, versionId: String? = nil, key: String) {
            self.bucket = bucket
            self.versionId = versionId
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case versionId = "versionId"
            case key = "Key"
        }
    }

    public struct PutBucketLifecycleConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "LifecycleConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "LifecycleConfiguration", location: .body(locationName: "LifecycleConfiguration"), required: false, type: .structure)
        ]
        public let bucket: String
        public let lifecycleConfiguration: BucketLifecycleConfiguration?

        public init(bucket: String, lifecycleConfiguration: BucketLifecycleConfiguration? = nil) {
            self.bucket = bucket
            self.lifecycleConfiguration = lifecycleConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case lifecycleConfiguration = "LifecycleConfiguration"
        }
    }

    public struct ListObjectVersionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxKeys", required: false, type: .integer), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "Versions", location: .body(locationName: "Version"), required: false, type: .list), 
            AWSShapeMember(label: "NextVersionIdMarker", required: false, type: .string), 
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list), 
            AWSShapeMember(label: "Delimiter", required: false, type: .string), 
            AWSShapeMember(label: "KeyMarker", required: false, type: .string), 
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "DeleteMarkers", location: .body(locationName: "DeleteMarker"), required: false, type: .list), 
            AWSShapeMember(label: "NextKeyMarker", required: false, type: .string), 
            AWSShapeMember(label: "VersionIdMarker", required: false, type: .string)
        ]
        public let maxKeys: Int32?
        /// A flag that indicates whether or not Amazon S3 returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.
        public let isTruncated: Bool?
        public let versions: [ObjectVersion]?
        /// Use this value for the next version id marker parameter in a subsequent request.
        public let nextVersionIdMarker: String?
        public let commonPrefixes: [CommonPrefix]?
        public let delimiter: String?
        /// Marks the last Key returned in a truncated response.
        public let keyMarker: String?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        public let name: String?
        public let prefix: String?
        public let deleteMarkers: [DeleteMarkerEntry]?
        /// Use this value for the key marker request parameter in a subsequent request.
        public let nextKeyMarker: String?
        public let versionIdMarker: String?

        public init(maxKeys: Int32? = nil, isTruncated: Bool? = nil, versions: [ObjectVersion]? = nil, nextVersionIdMarker: String? = nil, commonPrefixes: [CommonPrefix]? = nil, delimiter: String? = nil, keyMarker: String? = nil, encodingType: EncodingType? = nil, name: String? = nil, prefix: String? = nil, deleteMarkers: [DeleteMarkerEntry]? = nil, nextKeyMarker: String? = nil, versionIdMarker: String? = nil) {
            self.maxKeys = maxKeys
            self.isTruncated = isTruncated
            self.versions = versions
            self.nextVersionIdMarker = nextVersionIdMarker
            self.commonPrefixes = commonPrefixes
            self.delimiter = delimiter
            self.keyMarker = keyMarker
            self.encodingType = encodingType
            self.name = name
            self.prefix = prefix
            self.deleteMarkers = deleteMarkers
            self.nextKeyMarker = nextKeyMarker
            self.versionIdMarker = versionIdMarker
        }

        private enum CodingKeys: String, CodingKey {
            case maxKeys = "MaxKeys"
            case isTruncated = "IsTruncated"
            case versions = "Version"
            case nextVersionIdMarker = "NextVersionIdMarker"
            case commonPrefixes = "CommonPrefixes"
            case delimiter = "Delimiter"
            case keyMarker = "KeyMarker"
            case encodingType = "EncodingType"
            case name = "Name"
            case prefix = "Prefix"
            case deleteMarkers = "DeleteMarker"
            case nextKeyMarker = "NextKeyMarker"
            case versionIdMarker = "VersionIdMarker"
        }
    }

    public struct AnalyticsConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "StorageClassAnalysis", required: true, type: .structure), 
            AWSShapeMember(label: "Filter", required: false, type: .structure)
        ]
        /// The identifier used to represent an analytics configuration.
        public let id: String
        /// If present, it indicates that data related to access patterns will be collected and made available to analyze the tradeoffs between different storage classes.
        public let storageClassAnalysis: StorageClassAnalysis
        /// The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.
        public let filter: AnalyticsFilter?

        public init(id: String, storageClassAnalysis: StorageClassAnalysis, filter: AnalyticsFilter? = nil) {
            self.id = id
            self.storageClassAnalysis = storageClassAnalysis
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case storageClassAnalysis = "StorageClassAnalysis"
            case filter = "Filter"
        }
    }

    public struct GetBucketVersioningOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MFADelete", location: .body(locationName: "MfaDelete"), required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
        public let mFADelete: MFADeleteStatus?
        /// The versioning state of the bucket.
        public let status: BucketVersioningStatus?

        public init(mFADelete: MFADeleteStatus? = nil, status: BucketVersioningStatus? = nil) {
            self.mFADelete = mFADelete
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case mFADelete = "MfaDelete"
            case status = "Status"
        }
    }

    public struct InputSerialization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CSV", required: false, type: .structure), 
            AWSShapeMember(label: "CompressionType", required: false, type: .enum), 
            AWSShapeMember(label: "JSON", required: false, type: .structure)
        ]
        /// Describes the serialization of a CSV-encoded object.
        public let csv: CSVInput?
        /// Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value: NONE.
        public let compressionType: CompressionType?
        /// Specifies JSON as object's input serialization format.
        public let json: JSONInput?

        public init(csv: CSVInput? = nil, compressionType: CompressionType? = nil, json: JSONInput? = nil) {
            self.csv = csv
            self.compressionType = compressionType
            self.json = json
        }

        private enum CodingKeys: String, CodingKey {
            case csv = "CSV"
            case compressionType = "CompressionType"
            case json = "JSON"
        }
    }

    public struct InventoryFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: true, type: .string)
        ]
        /// The prefix that an object must have to be included in the inventory results.
        public let prefix: String

        public init(prefix: String) {
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
        }
    }

    public struct PutBucketVersioningRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "VersioningConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "MFA", location: .header(locationName: "x-amz-mfa"), required: false, type: .string), 
            AWSShapeMember(label: "VersioningConfiguration", location: .body(locationName: "VersioningConfiguration"), required: true, type: .structure)
        ]
        public let bucket: String
        public let contentMD5: String?
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public let mfa: String?
        public let versioningConfiguration: VersioningConfiguration

        public init(bucket: String, contentMD5: String? = nil, mfa: String? = nil, versioningConfiguration: VersioningConfiguration) {
            self.bucket = bucket
            self.contentMD5 = contentMD5
            self.mfa = mfa
            self.versioningConfiguration = versioningConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
            case mfa = "x-amz-mfa"
            case versioningConfiguration = "VersioningConfiguration"
        }
    }

    public struct DeleteObjectsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Delete"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "MFA", location: .header(locationName: "x-amz-mfa"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "Delete", location: .body(locationName: "Delete"), required: true, type: .structure)
        ]
        public let bucket: String
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public let mfa: String?
        public let requestPayer: RequestPayer?
        public let delete: Delete

        public init(bucket: String, mfa: String? = nil, requestPayer: RequestPayer? = nil, delete: Delete) {
            self.bucket = bucket
            self.mfa = mfa
            self.requestPayer = requestPayer
            self.delete = delete
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case mfa = "x-amz-mfa"
            case requestPayer = "x-amz-request-payer"
            case delete = "Delete"
        }
    }

    public struct GetObjectAclOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Grants", location: .body(locationName: "AccessControlList"), required: false, type: .structure), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let owner: Owner?
        /// A list of grants.
        public let grants: Grants?
        public let requestCharged: RequestCharged?

        public init(owner: Owner? = nil, grants: Grants? = nil, requestCharged: RequestCharged? = nil) {
            self.owner = owner
            self.grants = grants
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
            case grants = "AccessControlList"
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct Delete: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Objects", location: .body(locationName: "Object"), required: true, type: .list), 
            AWSShapeMember(label: "Quiet", required: false, type: .boolean)
        ]
        public let objects: [ObjectIdentifier]
        /// Element to enable quiet mode for the request. When you add this element, you must set its value to true.
        public let quiet: Bool?

        public init(objects: [ObjectIdentifier], quiet: Bool? = nil) {
            self.objects = objects
            self.quiet = quiet
        }

        private enum CodingKeys: String, CodingKey {
            case objects = "Object"
            case quiet = "Quiet"
        }
    }

    public enum BucketLogsPermission: String, CustomStringConvertible, Codable {
        case fullControl = "FULL_CONTROL"
        case read = "READ"
        case write = "WRITE"
        public var description: String { return self.rawValue }
    }

    public struct ListMultipartUploadsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "UploadIdMarker", location: .querystring(locationName: "upload-id-marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxUploads", location: .querystring(locationName: "max-uploads"), required: false, type: .integer), 
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string), 
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum), 
            AWSShapeMember(label: "KeyMarker", location: .querystring(locationName: "key-marker"), required: false, type: .string)
        ]
        public let bucket: String
        /// Lists in-progress uploads only for those keys that begin with the specified prefix.
        public let prefix: String?
        /// Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored.
        public let uploadIdMarker: String?
        /// Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.
        public let maxUploads: Int32?
        /// Character you use to group keys.
        public let delimiter: String?
        public let encodingType: EncodingType?
        /// Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.
        public let keyMarker: String?

        public init(bucket: String, prefix: String? = nil, uploadIdMarker: String? = nil, maxUploads: Int32? = nil, delimiter: String? = nil, encodingType: EncodingType? = nil, keyMarker: String? = nil) {
            self.bucket = bucket
            self.prefix = prefix
            self.uploadIdMarker = uploadIdMarker
            self.maxUploads = maxUploads
            self.delimiter = delimiter
            self.encodingType = encodingType
            self.keyMarker = keyMarker
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case prefix = "prefix"
            case uploadIdMarker = "upload-id-marker"
            case maxUploads = "max-uploads"
            case delimiter = "delimiter"
            case encodingType = "encoding-type"
            case keyMarker = "key-marker"
        }
    }

    public struct DeleteObjectsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "Errors", location: .body(locationName: "Error"), required: false, type: .list), 
            AWSShapeMember(label: "Deleted", required: false, type: .list)
        ]
        public let requestCharged: RequestCharged?
        public let errors: [Error]?
        public let deleted: [DeletedObject]?

        public init(requestCharged: RequestCharged? = nil, errors: [Error]? = nil, deleted: [DeletedObject]? = nil) {
            self.requestCharged = requestCharged
            self.errors = errors
            self.deleted = deleted
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
            case errors = "Error"
            case deleted = "Deleted"
        }
    }

    public struct DeleteBucketAnalyticsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket from which an analytics configuration is deleted.
        public let bucket: String
        /// The identifier used to represent an analytics configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public struct DeleteBucketReplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum StorageClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        case reducedRedundancy = "REDUCED_REDUNDANCY"
        case standardIa = "STANDARD_IA"
        case onezoneIa = "ONEZONE_IA"
        public var description: String { return self.rawValue }
    }

    public struct ListBucketAnalyticsConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "AnalyticsConfigurationList", location: .body(locationName: "AnalyticsConfiguration"), required: false, type: .list)
        ]
        /// The ContinuationToken that represents where this request began.
        public let continuationToken: String?
        /// Indicates whether the returned list of analytics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
        public let isTruncated: Bool?
        /// NextContinuationToken is sent when isTruncated is true, which indicates that there are more analytics configurations to list. The next request must include this NextContinuationToken. The token is obfuscated and is not a usable value.
        public let nextContinuationToken: String?
        /// The list of analytics configurations for a bucket.
        public let analyticsConfigurationList: [AnalyticsConfiguration]?

        public init(continuationToken: String? = nil, isTruncated: Bool? = nil, nextContinuationToken: String? = nil, analyticsConfigurationList: [AnalyticsConfiguration]? = nil) {
            self.continuationToken = continuationToken
            self.isTruncated = isTruncated
            self.nextContinuationToken = nextContinuationToken
            self.analyticsConfigurationList = analyticsConfigurationList
        }

        private enum CodingKeys: String, CodingKey {
            case continuationToken = "ContinuationToken"
            case isTruncated = "IsTruncated"
            case nextContinuationToken = "NextContinuationToken"
            case analyticsConfigurationList = "AnalyticsConfiguration"
        }
    }

    public struct InventorySchedule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Frequency", required: true, type: .enum)
        ]
        /// Specifies how frequently inventory results are produced.
        public let frequency: InventoryFrequency

        public init(frequency: InventoryFrequency) {
            self.frequency = frequency
        }

        private enum CodingKeys: String, CodingKey {
            case frequency = "Frequency"
        }
    }

    public struct ListMultipartUploadsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: false, type: .string), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "KeyMarker", required: false, type: .string), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "UploadIdMarker", required: false, type: .string), 
            AWSShapeMember(label: "CommonPrefixes", required: false, type: .list), 
            AWSShapeMember(label: "MaxUploads", required: false, type: .integer), 
            AWSShapeMember(label: "Uploads", location: .body(locationName: "Upload"), required: false, type: .list), 
            AWSShapeMember(label: "Delimiter", required: false, type: .string), 
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "NextKeyMarker", required: false, type: .string), 
            AWSShapeMember(label: "NextUploadIdMarker", required: false, type: .string)
        ]
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String?
        /// Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads.
        public let isTruncated: Bool?
        /// The key at or after which the listing began.
        public let keyMarker: String?
        /// When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix.
        public let prefix: String?
        /// Upload ID after which listing began.
        public let uploadIdMarker: String?
        public let commonPrefixes: [CommonPrefix]?
        /// Maximum number of multipart uploads that could have been included in the response.
        public let maxUploads: Int32?
        public let uploads: [MultipartUpload]?
        public let delimiter: String?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?
        /// When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request.
        public let nextKeyMarker: String?
        /// When a list is truncated, this element specifies the value that should be used for the upload-id-marker request parameter in a subsequent request.
        public let nextUploadIdMarker: String?

        public init(bucket: String? = nil, isTruncated: Bool? = nil, keyMarker: String? = nil, prefix: String? = nil, uploadIdMarker: String? = nil, commonPrefixes: [CommonPrefix]? = nil, maxUploads: Int32? = nil, uploads: [MultipartUpload]? = nil, delimiter: String? = nil, encodingType: EncodingType? = nil, nextKeyMarker: String? = nil, nextUploadIdMarker: String? = nil) {
            self.bucket = bucket
            self.isTruncated = isTruncated
            self.keyMarker = keyMarker
            self.prefix = prefix
            self.uploadIdMarker = uploadIdMarker
            self.commonPrefixes = commonPrefixes
            self.maxUploads = maxUploads
            self.uploads = uploads
            self.delimiter = delimiter
            self.encodingType = encodingType
            self.nextKeyMarker = nextKeyMarker
            self.nextUploadIdMarker = nextUploadIdMarker
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case isTruncated = "IsTruncated"
            case keyMarker = "KeyMarker"
            case prefix = "Prefix"
            case uploadIdMarker = "UploadIdMarker"
            case commonPrefixes = "CommonPrefixes"
            case maxUploads = "MaxUploads"
            case uploads = "Upload"
            case delimiter = "Delimiter"
            case encodingType = "EncodingType"
            case nextKeyMarker = "NextKeyMarker"
            case nextUploadIdMarker = "NextUploadIdMarker"
        }
    }

    public struct GetBucketMetricsConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MetricsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricsConfiguration", required: false, type: .structure)
        ]
        /// Specifies the metrics configuration.
        public let metricsConfiguration: MetricsConfiguration?

        public init(metricsConfiguration: MetricsConfiguration? = nil) {
            self.metricsConfiguration = metricsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case metricsConfiguration = "MetricsConfiguration"
        }
    }

    public struct ListBucketMetricsConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "MetricsConfigurationList", location: .body(locationName: "MetricsConfiguration"), required: false, type: .list), 
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string)
        ]
        /// The marker that is used as a starting point for this metrics configuration list response. This value is present if it was sent in the request.
        public let continuationToken: String?
        /// Indicates whether the returned list of metrics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
        public let isTruncated: Bool?
        /// The list of metrics configurations for a bucket.
        public let metricsConfigurationList: [MetricsConfiguration]?
        /// The marker used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public let nextContinuationToken: String?

        public init(continuationToken: String? = nil, isTruncated: Bool? = nil, metricsConfigurationList: [MetricsConfiguration]? = nil, nextContinuationToken: String? = nil) {
            self.continuationToken = continuationToken
            self.isTruncated = isTruncated
            self.metricsConfigurationList = metricsConfigurationList
            self.nextContinuationToken = nextContinuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case continuationToken = "ContinuationToken"
            case isTruncated = "IsTruncated"
            case metricsConfigurationList = "MetricsConfiguration"
            case nextContinuationToken = "NextContinuationToken"
        }
    }

    public struct GetBucketAclOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Grants", location: .body(locationName: "AccessControlList"), required: false, type: .structure)
        ]
        public let owner: Owner?
        /// A list of grants.
        public let grants: Grants?

        public init(owner: Owner? = nil, grants: Grants? = nil) {
            self.owner = owner
            self.grants = grants
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
            case grants = "AccessControlList"
        }
    }

    public struct ListObjectsV2Request: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "MaxKeys", location: .querystring(locationName: "max-keys"), required: false, type: .integer), 
            AWSShapeMember(label: "StartAfter", location: .querystring(locationName: "start-after"), required: false, type: .string), 
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "FetchOwner", location: .querystring(locationName: "fetch-owner"), required: false, type: .boolean), 
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string), 
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum)
        ]
        /// Name of the bucket to list.
        public let bucket: String
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket
        public let startAfter: String?
        /// ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key
        public let continuationToken: String?
        /// Confirms that the requester knows that she or he will be charged for the list objects request in V2 style. Bucket owners need not specify this parameter in their requests.
        public let requestPayer: RequestPayer?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true
        public let fetchOwner: Bool?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        /// Encoding type used by Amazon S3 to encode object keys in the response.
        public let encodingType: EncodingType?

        public init(bucket: String, maxKeys: Int32? = nil, startAfter: String? = nil, continuationToken: String? = nil, requestPayer: RequestPayer? = nil, prefix: String? = nil, fetchOwner: Bool? = nil, delimiter: String? = nil, encodingType: EncodingType? = nil) {
            self.bucket = bucket
            self.maxKeys = maxKeys
            self.startAfter = startAfter
            self.continuationToken = continuationToken
            self.requestPayer = requestPayer
            self.prefix = prefix
            self.fetchOwner = fetchOwner
            self.delimiter = delimiter
            self.encodingType = encodingType
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case maxKeys = "max-keys"
            case startAfter = "start-after"
            case continuationToken = "continuation-token"
            case requestPayer = "x-amz-request-payer"
            case prefix = "prefix"
            case fetchOwner = "fetch-owner"
            case delimiter = "delimiter"
            case encodingType = "encoding-type"
        }
    }

    public struct HeadBucketRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct CreateBucketRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CreateBucketConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "CreateBucketConfiguration", location: .body(locationName: "CreateBucketConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWrite", location: .header(locationName: "x-amz-grant-write"), required: false, type: .string), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string)
        ]
        public let bucket: String
        public let createBucketConfiguration: CreateBucketConfiguration?
        /// Allows grantee to write the ACL for the applicable bucket.
        public let grantWriteACP: String?
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public let grantFullControl: String?
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public let grantWrite: String?
        /// Allows grantee to list the objects in the bucket.
        public let grantRead: String?
        /// The canned ACL to apply to the bucket.
        public let acl: BucketCannedACL?
        /// Allows grantee to read the bucket ACL.
        public let grantReadACP: String?

        public init(bucket: String, createBucketConfiguration: CreateBucketConfiguration? = nil, grantWriteACP: String? = nil, grantFullControl: String? = nil, grantWrite: String? = nil, grantRead: String? = nil, acl: BucketCannedACL? = nil, grantReadACP: String? = nil) {
            self.bucket = bucket
            self.createBucketConfiguration = createBucketConfiguration
            self.grantWriteACP = grantWriteACP
            self.grantFullControl = grantFullControl
            self.grantWrite = grantWrite
            self.grantRead = grantRead
            self.acl = acl
            self.grantReadACP = grantReadACP
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case createBucketConfiguration = "CreateBucketConfiguration"
            case grantWriteACP = "x-amz-grant-write-acp"
            case grantFullControl = "x-amz-grant-full-control"
            case grantWrite = "x-amz-grant-write"
            case grantRead = "x-amz-grant-read"
            case acl = "x-amz-acl"
            case grantReadACP = "x-amz-grant-read-acp"
        }
    }

    public struct ServerSideEncryptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        /// Container for information about a particular server-side encryption configuration rule.
        public let rules: [ServerSideEncryptionRule]

        public init(rules: [ServerSideEncryptionRule]) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct Initiator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string)
        ]
        /// If the principal is an AWS account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value.
        public let id: String?
        /// Name of the Principal.
        public let displayName: String?

        public init(id: String? = nil, displayName: String? = nil) {
            self.id = id
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case id = "ID"
            case displayName = "DisplayName"
        }
    }

    public struct DeleteObjectTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        /// The versionId of the object the tag-set was removed from.
        public let versionId: String?

        public init(versionId: String? = nil) {
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "x-amz-version-id"
        }
    }

    public enum BucketLocationConstraint: String, CustomStringConvertible, Codable {
        case eu = "EU"
        case euWest1 = "eu-west-1"
        case usWest1 = "us-west-1"
        case usWest2 = "us-west-2"
        case apSouth1 = "ap-south-1"
        case apSoutheast1 = "ap-southeast-1"
        case apSoutheast2 = "ap-southeast-2"
        case apNortheast1 = "ap-northeast-1"
        case saEast1 = "sa-east-1"
        case cnNorth1 = "cn-north-1"
        case euCentral1 = "eu-central-1"
        public var description: String { return self.rawValue }
    }

    public struct ServerSideEncryptionRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplyServerSideEncryptionByDefault", required: false, type: .structure)
        ]
        /// Describes the default server-side encryption to apply to new objects in the bucket. If Put Object request does not specify any server-side encryption, this default encryption will be applied.
        public let applyServerSideEncryptionByDefault: ServerSideEncryptionByDefault?

        public init(applyServerSideEncryptionByDefault: ServerSideEncryptionByDefault? = nil) {
            self.applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefault
        }

        private enum CodingKeys: String, CodingKey {
            case applyServerSideEncryptionByDefault = "ApplyServerSideEncryptionByDefault"
        }
    }

    public struct PutBucketReplicationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ReplicationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ReplicationConfiguration", location: .body(locationName: "ReplicationConfiguration"), required: true, type: .structure)
        ]
        public let contentMD5: String?
        public let bucket: String
        public let replicationConfiguration: ReplicationConfiguration

        public init(contentMD5: String? = nil, bucket: String, replicationConfiguration: ReplicationConfiguration) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.replicationConfiguration = replicationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case replicationConfiguration = "ReplicationConfiguration"
        }
    }

    public enum InventoryOptionalField: String, CustomStringConvertible, Codable {
        case size = "Size"
        case lastmodifieddate = "LastModifiedDate"
        case storageclass = "StorageClass"
        case etag = "ETag"
        case ismultipartuploaded = "IsMultipartUploaded"
        case replicationstatus = "ReplicationStatus"
        case encryptionstatus = "EncryptionStatus"
        public var description: String { return self.rawValue }
    }

    public struct SourceSelectionCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SseKmsEncryptedObjects", required: false, type: .structure)
        ]
        /// Container for filter information of selection of KMS Encrypted S3 objects.
        public let sseKmsEncryptedObjects: SseKmsEncryptedObjects?

        public init(sseKmsEncryptedObjects: SseKmsEncryptedObjects? = nil) {
            self.sseKmsEncryptedObjects = sseKmsEncryptedObjects
        }

        private enum CodingKeys: String, CodingKey {
            case sseKmsEncryptedObjects = "SseKmsEncryptedObjects"
        }
    }

    public struct CORSRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExposeHeaders", location: .body(locationName: "ExposeHeader"), required: false, type: .list), 
            AWSShapeMember(label: "AllowedMethods", location: .body(locationName: "AllowedMethod"), required: true, type: .list), 
            AWSShapeMember(label: "MaxAgeSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "AllowedHeaders", location: .body(locationName: "AllowedHeader"), required: false, type: .list), 
            AWSShapeMember(label: "AllowedOrigins", location: .body(locationName: "AllowedOrigin"), required: true, type: .list)
        ]
        /// One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
        public let exposeHeaders: [String]?
        /// Identifies HTTP methods that the domain/origin specified in the rule is allowed to execute.
        public let allowedMethods: [String]
        /// The time in seconds that your browser is to cache the preflight response for the specified resource.
        public let maxAgeSeconds: Int32?
        /// Specifies which headers are allowed in a pre-flight OPTIONS request.
        public let allowedHeaders: [String]?
        /// One or more origins you want customers to be able to access the bucket from.
        public let allowedOrigins: [String]

        public init(exposeHeaders: [String]? = nil, allowedMethods: [String], maxAgeSeconds: Int32? = nil, allowedHeaders: [String]? = nil, allowedOrigins: [String]) {
            self.exposeHeaders = exposeHeaders
            self.allowedMethods = allowedMethods
            self.maxAgeSeconds = maxAgeSeconds
            self.allowedHeaders = allowedHeaders
            self.allowedOrigins = allowedOrigins
        }

        private enum CodingKeys: String, CodingKey {
            case exposeHeaders = "ExposeHeader"
            case allowedMethods = "AllowedMethod"
            case maxAgeSeconds = "MaxAgeSeconds"
            case allowedHeaders = "AllowedHeader"
            case allowedOrigins = "AllowedOrigin"
        }
    }

    public struct CreateMultipartUploadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "Tagging", location: .header(locationName: "x-amz-tagging"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum)
        ]
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        /// The tag-set for the object. The tag-set must be encoded as URL Query parameters
        public let tagging: String?
        public let bucket: String
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        public let requestPayer: RequestPayer?
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public let grantFullControl: String?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public let sSEKMSKeyId: String?
        /// Allows grantee to read the object ACL.
        public let grantReadACP: String?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// The language the content is in.
        public let contentLanguage: String?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// Allows grantee to write the ACL for the applicable object.
        public let grantWriteACP: String?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public let storageClass: StorageClass?
        public let key: String
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// Allows grantee to read the object data and its metadata.
        public let grantRead: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?

        public init(sSECustomerKey: String? = nil, cacheControl: String? = nil, tagging: String? = nil, bucket: String, contentDisposition: String? = nil, requestPayer: RequestPayer? = nil, grantFullControl: String? = nil, sSECustomerKeyMD5: String? = nil, sSEKMSKeyId: String? = nil, grantReadACP: String? = nil, acl: ObjectCannedACL? = nil, sSECustomerAlgorithm: String? = nil, contentLanguage: String? = nil, metadata: [String: String]? = nil, contentEncoding: String? = nil, expires: TimeStamp? = nil, grantWriteACP: String? = nil, contentType: String? = nil, storageClass: StorageClass? = nil, key: String, websiteRedirectLocation: String? = nil, grantRead: String? = nil, serverSideEncryption: ServerSideEncryption? = nil) {
            self.sSECustomerKey = sSECustomerKey
            self.cacheControl = cacheControl
            self.tagging = tagging
            self.bucket = bucket
            self.contentDisposition = contentDisposition
            self.requestPayer = requestPayer
            self.grantFullControl = grantFullControl
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.sSEKMSKeyId = sSEKMSKeyId
            self.grantReadACP = grantReadACP
            self.acl = acl
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.contentLanguage = contentLanguage
            self.metadata = metadata
            self.contentEncoding = contentEncoding
            self.expires = expires
            self.grantWriteACP = grantWriteACP
            self.contentType = contentType
            self.storageClass = storageClass
            self.key = key
            self.websiteRedirectLocation = websiteRedirectLocation
            self.grantRead = grantRead
            self.serverSideEncryption = serverSideEncryption
        }

        private enum CodingKeys: String, CodingKey {
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case cacheControl = "Cache-Control"
            case tagging = "x-amz-tagging"
            case bucket = "Bucket"
            case contentDisposition = "Content-Disposition"
            case requestPayer = "x-amz-request-payer"
            case grantFullControl = "x-amz-grant-full-control"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case grantReadACP = "x-amz-grant-read-acp"
            case acl = "x-amz-acl"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case contentLanguage = "Content-Language"
            case metadata = "Metadata"
            case contentEncoding = "Content-Encoding"
            case expires = "Expires"
            case grantWriteACP = "x-amz-grant-write-acp"
            case contentType = "Content-Type"
            case storageClass = "x-amz-storage-class"
            case key = "Key"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case grantRead = "x-amz-grant-read"
            case serverSideEncryption = "x-amz-server-side-encryption"
        }
    }

    public struct Grants: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grant", required: false, type: .list)
        ]
        public let grant: [Grant]?

        public init(grant: [Grant]? = nil) {
            self.grant = grant
        }

        private enum CodingKeys: String, CodingKey {
            case grant = "Grant"
        }
    }

    public struct DeleteObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "MFA", location: .header(locationName: "x-amz-mfa"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        public let bucket: String
        public let key: String
        /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
        public let mfa: String?
        public let requestPayer: RequestPayer?

        public init(versionId: String? = nil, bucket: String, key: String, mfa: String? = nil, requestPayer: RequestPayer? = nil) {
            self.versionId = versionId
            self.bucket = bucket
            self.key = key
            self.mfa = mfa
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "versionId"
            case bucket = "Bucket"
            case key = "Key"
            case mfa = "x-amz-mfa"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct GetBucketEncryptionOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ServerSideEncryptionConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerSideEncryptionConfiguration", required: false, type: .structure)
        ]
        public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration?

        public init(serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration? = nil) {
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
        }
    }

    public struct PutObjectAclOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let requestCharged: RequestCharged?

        public init(requestCharged: RequestCharged? = nil) {
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
        }
    }

    public struct ListPartsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PartNumberMarker", required: false, type: .integer), 
            AWSShapeMember(label: "Bucket", required: false, type: .string), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "AbortDate", location: .header(locationName: "x-amz-abort-date"), required: false, type: .timestamp), 
            AWSShapeMember(label: "UploadId", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Parts", location: .body(locationName: "Part"), required: false, type: .list), 
            AWSShapeMember(label: "Initiator", required: false, type: .structure), 
            AWSShapeMember(label: "AbortRuleId", location: .header(locationName: "x-amz-abort-rule-id"), required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "MaxParts", required: false, type: .integer), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "NextPartNumberMarker", required: false, type: .integer)
        ]
        /// Part number after which listing begins.
        public let partNumberMarker: Int32?
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String?
        /// Indicates whether the returned list of parts is truncated.
        public let isTruncated: Bool?
        /// Date when multipart upload will become eligible for abort operation by lifecycle.
        public let abortDate: TimeStamp?
        /// Upload ID identifying the multipart upload whose parts are being listed.
        public let uploadId: String?
        public let owner: Owner?
        public let parts: [Part]?
        /// Identifies who initiated the multipart upload.
        public let initiator: Initiator?
        /// Id of the lifecycle rule that makes a multipart upload eligible for abort operation.
        public let abortRuleId: String?
        /// The class of storage used to store the object.
        public let storageClass: StorageClass?
        /// Object key for which the multipart upload was initiated.
        public let key: String?
        /// Maximum number of parts that were allowed in the response.
        public let maxParts: Int32?
        public let requestCharged: RequestCharged?
        /// When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.
        public let nextPartNumberMarker: Int32?

        public init(partNumberMarker: Int32? = nil, bucket: String? = nil, isTruncated: Bool? = nil, abortDate: TimeStamp? = nil, uploadId: String? = nil, owner: Owner? = nil, parts: [Part]? = nil, initiator: Initiator? = nil, abortRuleId: String? = nil, storageClass: StorageClass? = nil, key: String? = nil, maxParts: Int32? = nil, requestCharged: RequestCharged? = nil, nextPartNumberMarker: Int32? = nil) {
            self.partNumberMarker = partNumberMarker
            self.bucket = bucket
            self.isTruncated = isTruncated
            self.abortDate = abortDate
            self.uploadId = uploadId
            self.owner = owner
            self.parts = parts
            self.initiator = initiator
            self.abortRuleId = abortRuleId
            self.storageClass = storageClass
            self.key = key
            self.maxParts = maxParts
            self.requestCharged = requestCharged
            self.nextPartNumberMarker = nextPartNumberMarker
        }

        private enum CodingKeys: String, CodingKey {
            case partNumberMarker = "PartNumberMarker"
            case bucket = "Bucket"
            case isTruncated = "IsTruncated"
            case abortDate = "x-amz-abort-date"
            case uploadId = "UploadId"
            case owner = "Owner"
            case parts = "Part"
            case initiator = "Initiator"
            case abortRuleId = "x-amz-abort-rule-id"
            case storageClass = "StorageClass"
            case key = "Key"
            case maxParts = "MaxParts"
            case requestCharged = "x-amz-request-charged"
            case nextPartNumberMarker = "NextPartNumberMarker"
        }
    }

    public struct ListBucketInventoryConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "IsTruncated", required: false, type: .boolean), 
            AWSShapeMember(label: "NextContinuationToken", required: false, type: .string), 
            AWSShapeMember(label: "InventoryConfigurationList", location: .body(locationName: "InventoryConfiguration"), required: false, type: .list)
        ]
        /// If sent in the request, the marker that is used as a starting point for this inventory configuration list response.
        public let continuationToken: String?
        /// Indicates whether the returned list of inventory configurations is truncated in this response. A value of true indicates that the list is truncated.
        public let isTruncated: Bool?
        /// The marker used to continue this inventory configuration listing. Use the NextContinuationToken from this response to continue the listing in a subsequent request. The continuation token is an opaque value that Amazon S3 understands.
        public let nextContinuationToken: String?
        /// The list of inventory configurations for a bucket.
        public let inventoryConfigurationList: [InventoryConfiguration]?

        public init(continuationToken: String? = nil, isTruncated: Bool? = nil, nextContinuationToken: String? = nil, inventoryConfigurationList: [InventoryConfiguration]? = nil) {
            self.continuationToken = continuationToken
            self.isTruncated = isTruncated
            self.nextContinuationToken = nextContinuationToken
            self.inventoryConfigurationList = inventoryConfigurationList
        }

        private enum CodingKeys: String, CodingKey {
            case continuationToken = "ContinuationToken"
            case isTruncated = "IsTruncated"
            case nextContinuationToken = "NextContinuationToken"
            case inventoryConfigurationList = "InventoryConfiguration"
        }
    }

    public struct ListBucketMetricsConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string)
        ]
        /// The name of the bucket containing the metrics configurations to retrieve.
        public let bucket: String
        /// The marker that is used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public let continuationToken: String?

        public init(bucket: String, continuationToken: String? = nil) {
            self.bucket = bucket
            self.continuationToken = continuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case continuationToken = "continuation-token"
        }
    }

    public struct TopicConfigurationDeprecated: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Topic", required: false, type: .string), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: false, type: .list), 
            AWSShapeMember(label: "Event", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Amazon SNS topic to which Amazon S3 will publish a message to report the specified events for the bucket.
        public let topic: String?
        public let events: [Event]?
        /// Bucket event for which to send notifications.
        public let event: Event?
        public let id: String?

        public init(topic: String? = nil, events: [Event]? = nil, event: Event? = nil, id: String? = nil) {
            self.topic = topic
            self.events = events
            self.event = event
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case topic = "Topic"
            case events = "Event"
            // TODO this is temporary measure for avoiding CondingKey duplication.
            // Should decode duplidated paths with same type for JSON
            case event = "_Event"
            case id = "Id"
        }
    }

    public enum ObjectVersionStorageClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        public var description: String { return self.rawValue }
    }

    public struct DeleteBucketRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum FilterRuleName: String, CustomStringConvertible, Codable {
        case prefix = "prefix"
        case suffix = "suffix"
        public var description: String { return self.rawValue }
    }

    public enum RequestPayer: String, CustomStringConvertible, Codable {
        case requester = "requester"
        public var description: String { return self.rawValue }
    }

    public struct StorageClassAnalysis: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataExport", required: false, type: .structure)
        ]
        /// A container used to describe how data related to the storage class analysis should be exported.
        public let dataExport: StorageClassAnalysisDataExport?

        public init(dataExport: StorageClassAnalysisDataExport? = nil) {
            self.dataExport = dataExport
        }

        private enum CodingKeys: String, CodingKey {
            case dataExport = "DataExport"
        }
    }

    public struct GetBucketNotificationConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// Name of the bucket to get the notification configuration for.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct CommonPrefix: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        public let prefix: String?

        public init(prefix: String? = nil) {
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "Prefix"
        }
    }

    public enum SseKmsEncryptedObjectsStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public enum ExpirationStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct GetObjectTorrentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let bucket: String
        public let key: String
        public let requestPayer: RequestPayer?

        public init(bucket: String, key: String, requestPayer: RequestPayer? = nil) {
            self.bucket = bucket
            self.key = key
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct InventoryS3BucketDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "Format", required: true, type: .enum), 
            AWSShapeMember(label: "AccountId", required: false, type: .string), 
            AWSShapeMember(label: "Encryption", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// The Amazon resource name (ARN) of the bucket where inventory results will be published.
        public let bucket: String
        /// Specifies the output format of the inventory results.
        public let format: InventoryFormat
        /// The ID of the account that owns the destination bucket.
        public let accountId: String?
        /// Contains the type of server-side encryption used to encrypt the inventory results.
        public let encryption: InventoryEncryption?
        /// The prefix that is prepended to all inventory results.
        public let prefix: String?

        public init(bucket: String, format: InventoryFormat, accountId: String? = nil, encryption: InventoryEncryption? = nil, prefix: String? = nil) {
            self.bucket = bucket
            self.format = format
            self.accountId = accountId
            self.encryption = encryption
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case format = "Format"
            case accountId = "AccountId"
            case encryption = "Encryption"
            case prefix = "Prefix"
        }
    }

    public struct DeleteBucketEncryptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// The name of the bucket containing the server-side encryption configuration to delete.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetObjectAclRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let bucket: String
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        public let key: String
        public let requestPayer: RequestPayer?

        public init(bucket: String, versionId: String? = nil, key: String, requestPayer: RequestPayer? = nil) {
            self.bucket = bucket
            self.versionId = versionId
            self.key = key
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case versionId = "versionId"
            case key = "Key"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct AccessControlPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Grants", location: .body(locationName: "AccessControlList"), required: false, type: .structure)
        ]
        public let owner: Owner?
        /// A list of grants.
        public let grants: Grants?

        public init(owner: Owner? = nil, grants: Grants? = nil) {
            self.owner = owner
            self.grants = grants
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
            case grants = "AccessControlList"
        }
    }

    public struct AccessControlTranslation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: true, type: .enum)
        ]
        /// The override value for the owner of the replica object.
        public let owner: OwnerOverride

        public init(owner: OwnerOverride) {
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
        }
    }

    public struct ServerSideEncryptionByDefault: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KMSMasterKeyID", required: false, type: .string), 
            AWSShapeMember(label: "SSEAlgorithm", required: true, type: .enum)
        ]
        /// KMS master key ID to use for the default encryption. This parameter is allowed if SSEAlgorithm is aws:kms.
        public let kMSMasterKeyID: String?
        /// Server-side encryption algorithm to use for the default encryption.
        public let sSEAlgorithm: ServerSideEncryption

        public init(kMSMasterKeyID: String? = nil, sSEAlgorithm: ServerSideEncryption) {
            self.kMSMasterKeyID = kMSMasterKeyID
            self.sSEAlgorithm = sSEAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case kMSMasterKeyID = "KMSMasterKeyID"
            case sSEAlgorithm = "SSEAlgorithm"
        }
    }

    public struct DeleteBucketLifecycleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct CreateBucketOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string)
        ]
        public let location: String?

        public init(location: String? = nil) {
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case location = "Location"
        }
    }

    public enum ExpressionType: String, CustomStringConvertible, Codable {
        case sql = "SQL"
        public var description: String { return self.rawValue }
    }

    public enum Payer: String, CustomStringConvertible, Codable {
        case requester = "Requester"
        case bucketowner = "BucketOwner"
        public var description: String { return self.rawValue }
    }

    public struct DeleteBucketInventoryConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket containing the inventory configuration to delete.
        public let bucket: String
        /// The ID used to identify the inventory configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public struct GetBucketWebsiteOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoutingRules", required: false, type: .structure), 
            AWSShapeMember(label: "IndexDocument", required: false, type: .structure), 
            AWSShapeMember(label: "ErrorDocument", required: false, type: .structure), 
            AWSShapeMember(label: "RedirectAllRequestsTo", required: false, type: .structure)
        ]
        public let routingRules: RoutingRules?
        public let indexDocument: IndexDocument?
        public let errorDocument: ErrorDocument?
        public let redirectAllRequestsTo: RedirectAllRequestsTo?

        public init(routingRules: RoutingRules? = nil, indexDocument: IndexDocument? = nil, errorDocument: ErrorDocument? = nil, redirectAllRequestsTo: RedirectAllRequestsTo? = nil) {
            self.routingRules = routingRules
            self.indexDocument = indexDocument
            self.errorDocument = errorDocument
            self.redirectAllRequestsTo = redirectAllRequestsTo
        }

        private enum CodingKeys: String, CodingKey {
            case routingRules = "RoutingRules"
            case indexDocument = "IndexDocument"
            case errorDocument = "ErrorDocument"
            case redirectAllRequestsTo = "RedirectAllRequestsTo"
        }
    }

    public struct LoggingEnabled: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGrants", required: false, type: .structure), 
            AWSShapeMember(label: "TargetPrefix", required: true, type: .string), 
            AWSShapeMember(label: "TargetBucket", required: true, type: .string)
        ]
        public let targetGrants: TargetGrants?
        /// This element lets you specify a prefix for the keys that the log files will be stored under.
        public let targetPrefix: String
        /// Specifies the bucket where you want Amazon S3 to store server access logs. You can have your logs delivered to any bucket that you own, including the same bucket that is being logged. You can also configure multiple buckets to deliver their logs to the same target bucket. In this case you should choose a different TargetPrefix for each source bucket so that the delivered log files can be distinguished by key.
        public let targetBucket: String

        public init(targetGrants: TargetGrants? = nil, targetPrefix: String, targetBucket: String) {
            self.targetGrants = targetGrants
            self.targetPrefix = targetPrefix
            self.targetBucket = targetBucket
        }

        private enum CodingKeys: String, CodingKey {
            case targetGrants = "TargetGrants"
            case targetPrefix = "TargetPrefix"
            case targetBucket = "TargetBucket"
        }
    }

    public struct CORSConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CORSRules", location: .body(locationName: "CORSRule"), required: true, type: .list)
        ]
        public let cORSRules: [CORSRule]

        public init(cORSRules: [CORSRule]) {
            self.cORSRules = cORSRules
        }

        private enum CodingKeys: String, CodingKey {
            case cORSRules = "CORSRule"
        }
    }

    public struct ObjectIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// VersionId for the specific version of the object to delete.
        public let versionId: String?
        /// Key name of the object to delete.
        public let key: String

        public init(versionId: String? = nil, key: String) {
            self.versionId = versionId
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case key = "Key"
        }
    }

    public struct StorageClassAnalysisDataExport: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destination", required: true, type: .structure), 
            AWSShapeMember(label: "OutputSchemaVersion", required: true, type: .enum)
        ]
        /// The place to store the data for an analysis.
        public let destination: AnalyticsExportDestination
        /// The version of the output schema to use when exporting data. Must be V_1.
        public let outputSchemaVersion: StorageClassAnalysisSchemaVersion

        public init(destination: AnalyticsExportDestination, outputSchemaVersion: StorageClassAnalysisSchemaVersion) {
            self.destination = destination
            self.outputSchemaVersion = outputSchemaVersion
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "Destination"
            case outputSchemaVersion = "OutputSchemaVersion"
        }
    }

    public struct EndEvent: AWSShape {

    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// Value of the tag.
        public let value: String
        /// Name of the tag.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct TargetGrants: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Grant", required: false, type: .list)
        ]
        public let grant: [TargetGrant]?

        public init(grant: [TargetGrant]? = nil) {
            self.grant = grant
        }

        private enum CodingKeys: String, CodingKey {
            case grant = "Grant"
        }
    }

    public struct RecordsEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Payload", required: false, type: .blob)
        ]
        /// The byte array of partial, one or more result records.
        public let payload: Data?

        public init(payload: Data? = nil) {
            self.payload = payload
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "Payload"
        }
    }

    public struct RestoreObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "RestoreOutputPath", location: .header(locationName: "x-amz-restore-output-path"), required: false, type: .string)
        ]
        public let requestCharged: RequestCharged?
        /// Indicates the path in the provided S3 output location where Select results will be restored to.
        public let restoreOutputPath: String?

        public init(requestCharged: RequestCharged? = nil, restoreOutputPath: String? = nil) {
            self.requestCharged = requestCharged
            self.restoreOutputPath = restoreOutputPath
        }

        private enum CodingKeys: String, CodingKey {
            case requestCharged = "x-amz-request-charged"
            case restoreOutputPath = "x-amz-restore-output-path"
        }
    }

    public enum MetadataDirective: String, CustomStringConvertible, Codable {
        case copy = "COPY"
        case replace = "REPLACE"
        public var description: String { return self.rawValue }
    }

    public struct BucketLifecycleConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        public let rules: [LifecycleRule]

        public init(rules: [LifecycleRule]) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct GetBucketMetricsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket containing the metrics configuration to retrieve.
        public let bucket: String
        /// The ID used to identify the metrics configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public struct LifecycleRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: true, type: .enum), 
            AWSShapeMember(label: "NoncurrentVersionExpiration", required: false, type: .structure), 
            AWSShapeMember(label: "AbortIncompleteMultipartUpload", required: false, type: .structure), 
            AWSShapeMember(label: "Expiration", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "Transitions", location: .body(locationName: "Transition"), required: false, type: .list), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "NoncurrentVersionTransitions", location: .body(locationName: "NoncurrentVersionTransition"), required: false, type: .list)
        ]
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public let id: String?
        /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
        public let status: ExpirationStatus
        public let noncurrentVersionExpiration: NoncurrentVersionExpiration?
        public let abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload?
        public let expiration: LifecycleExpiration?
        /// Prefix identifying one or more objects to which the rule applies. This is deprecated; use Filter instead.
        public let prefix: String?
        public let transitions: [Transition]?
        public let filter: LifecycleRuleFilter?
        public let noncurrentVersionTransitions: [NoncurrentVersionTransition]?

        public init(id: String? = nil, status: ExpirationStatus, noncurrentVersionExpiration: NoncurrentVersionExpiration? = nil, abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = nil, expiration: LifecycleExpiration? = nil, prefix: String? = nil, transitions: [Transition]? = nil, filter: LifecycleRuleFilter? = nil, noncurrentVersionTransitions: [NoncurrentVersionTransition]? = nil) {
            self.id = id
            self.status = status
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.expiration = expiration
            self.prefix = prefix
            self.transitions = transitions
            self.filter = filter
            self.noncurrentVersionTransitions = noncurrentVersionTransitions
        }

        private enum CodingKeys: String, CodingKey {
            case id = "ID"
            case status = "Status"
            case noncurrentVersionExpiration = "NoncurrentVersionExpiration"
            case abortIncompleteMultipartUpload = "AbortIncompleteMultipartUpload"
            case expiration = "Expiration"
            case prefix = "Prefix"
            case transitions = "Transition"
            case filter = "Filter"
            case noncurrentVersionTransitions = "NoncurrentVersionTransition"
        }
    }

    public struct InventoryOptionalFields: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Field", required: false, type: .list)
        ]
        public let field: [InventoryOptionalField]?

        public init(field: [InventoryOptionalField]? = nil) {
            self.field = field
        }

        private enum CodingKeys: String, CodingKey {
            case field = "Field"
        }
    }

    public struct GetBucketCorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct Bucket: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .timestamp)
        ]
        /// The name of the bucket.
        public let name: String?
        /// Date the bucket was created.
        public let creationDate: TimeStamp?

        public init(name: String? = nil, creationDate: TimeStamp? = nil) {
            self.name = name
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case creationDate = "CreationDate"
        }
    }

    public struct Destination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "Account", required: false, type: .string), 
            AWSShapeMember(label: "EncryptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "AccessControlTranslation", required: false, type: .structure)
        ]
        /// Amazon resource name (ARN) of the bucket where you want Amazon S3 to store replicas of the object identified by the rule.
        public let bucket: String
        /// The class of storage used to store the object.
        public let storageClass: StorageClass?
        /// Account ID of the destination bucket. Currently this is only being verified if Access Control Translation is enabled
        public let account: String?
        /// Container for information regarding encryption based configuration for replicas.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// Container for information regarding the access control for replicas.
        public let accessControlTranslation: AccessControlTranslation?

        public init(bucket: String, storageClass: StorageClass? = nil, account: String? = nil, encryptionConfiguration: EncryptionConfiguration? = nil, accessControlTranslation: AccessControlTranslation? = nil) {
            self.bucket = bucket
            self.storageClass = storageClass
            self.account = account
            self.encryptionConfiguration = encryptionConfiguration
            self.accessControlTranslation = accessControlTranslation
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case storageClass = "StorageClass"
            case account = "Account"
            case encryptionConfiguration = "EncryptionConfiguration"
            case accessControlTranslation = "AccessControlTranslation"
        }
    }

    public struct GlacierJobParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tier", required: true, type: .enum)
        ]
        /// Glacier retrieval tier at which the restore will be processed.
        public let tier: Tier

        public init(tier: Tier) {
            self.tier = tier
        }

        private enum CodingKeys: String, CodingKey {
            case tier = "Tier"
        }
    }

    public struct ContinuationEvent: AWSShape {

    }

    public struct PutBucketNotificationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "NotificationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "NotificationConfiguration", location: .body(locationName: "NotificationConfiguration"), required: true, type: .structure)
        ]
        public let contentMD5: String?
        public let bucket: String
        public let notificationConfiguration: NotificationConfigurationDeprecated

        public init(contentMD5: String? = nil, bucket: String, notificationConfiguration: NotificationConfigurationDeprecated) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.notificationConfiguration = notificationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case notificationConfiguration = "NotificationConfiguration"
        }
    }

    public struct CompleteMultipartUploadRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MultipartUpload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "MultipartUpload", location: .body(locationName: "CompleteMultipartUpload"), required: false, type: .structure), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let bucket: String
        public let multipartUpload: CompletedMultipartUpload?
        public let key: String
        public let uploadId: String
        public let requestPayer: RequestPayer?

        public init(bucket: String, multipartUpload: CompletedMultipartUpload? = nil, key: String, uploadId: String, requestPayer: RequestPayer? = nil) {
            self.bucket = bucket
            self.multipartUpload = multipartUpload
            self.key = key
            self.uploadId = uploadId
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case multipartUpload = "CompleteMultipartUpload"
            case key = "Key"
            case uploadId = "uploadId"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct PutBucketMetricsConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MetricsConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "MetricsConfiguration", location: .body(locationName: "MetricsConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket for which the metrics configuration is set.
        public let bucket: String
        /// Specifies the metrics configuration.
        public let metricsConfiguration: MetricsConfiguration
        /// The ID used to identify the metrics configuration.
        public let id: String

        public init(bucket: String, metricsConfiguration: MetricsConfiguration, id: String) {
            self.bucket = bucket
            self.metricsConfiguration = metricsConfiguration
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case metricsConfiguration = "MetricsConfiguration"
            case id = "id"
        }
    }

    public struct SSEKMS: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyId", required: true, type: .string)
        ]
        /// Specifies the ID of the AWS Key Management Service (KMS) master encryption key to use for encrypting Inventory reports.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct Part: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "PartNumber", required: false, type: .integer), 
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .integer)
        ]
        /// Date and time at which the part was uploaded.
        public let lastModified: TimeStamp?
        /// Part number identifying the part. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32?
        /// Entity tag returned when the part was uploaded.
        public let eTag: String?
        /// Size of the uploaded part data.
        public let size: Int32?

        public init(lastModified: TimeStamp? = nil, partNumber: Int32? = nil, eTag: String? = nil, size: Int32? = nil) {
            self.lastModified = lastModified
            self.partNumber = partNumber
            self.eTag = eTag
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case lastModified = "LastModified"
            case partNumber = "PartNumber"
            case eTag = "ETag"
            case size = "Size"
        }
    }

    public struct ListBucketsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Buckets", required: false, type: .structure), 
            AWSShapeMember(label: "Owner", required: false, type: .structure)
        ]
        public let buckets: Buckets?
        public let owner: Owner?

        public init(buckets: Buckets? = nil, owner: Owner? = nil) {
            self.buckets = buckets
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case buckets = "Buckets"
            case owner = "Owner"
        }
    }

    public struct GetBucketAccelerateConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The accelerate configuration of the bucket.
        public let status: BucketAccelerateStatus?

        public init(status: BucketAccelerateStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct CopyPartResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp)
        ]
        /// Entity tag of the object.
        public let eTag: String?
        /// Date and time at which the object was uploaded.
        public let lastModified: TimeStamp?

        public init(eTag: String? = nil, lastModified: TimeStamp? = nil) {
            self.eTag = eTag
            self.lastModified = lastModified
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case lastModified = "LastModified"
        }
    }

    public struct NoncurrentVersionExpiration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NoncurrentDays", required: false, type: .integer)
        ]
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see How Amazon S3 Calculates When an Object Became Noncurrent in the Amazon Simple Storage Service Developer Guide.
        public let noncurrentDays: Int32?

        public init(noncurrentDays: Int32? = nil) {
            self.noncurrentDays = noncurrentDays
        }

        private enum CodingKeys: String, CodingKey {
            case noncurrentDays = "NoncurrentDays"
        }
    }

    public struct AnalyticsExportDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BucketDestination", required: true, type: .structure)
        ]
        /// A destination signifying output to an S3 bucket.
        public let s3BucketDestination: AnalyticsS3BucketDestination

        public init(s3BucketDestination: AnalyticsS3BucketDestination) {
            self.s3BucketDestination = s3BucketDestination
        }

        private enum CodingKeys: String, CodingKey {
            case s3BucketDestination = "S3BucketDestination"
        }
    }

    public enum InventoryFormat: String, CustomStringConvertible, Codable {
        case csv = "CSV"
        case orc = "ORC"
        public var description: String { return self.rawValue }
    }

    public struct FilterRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .enum)
        ]
        public let value: String?
        /// Object key name prefix or suffix identifying one or more objects to which the filtering rule applies. Maximum prefix length can be up to 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, go to Configuring Event Notifications in the Amazon Simple Storage Service Developer Guide.
        public let name: FilterRuleName?

        public init(value: String? = nil, name: FilterRuleName? = nil) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public enum `Type`: String, CustomStringConvertible, Codable {
        case canonicaluser = "CanonicalUser"
        case amazoncustomerbyemail = "AmazonCustomerByEmail"
        case group = "Group"
        public var description: String { return self.rawValue }
    }

    public struct ListBucketInventoryConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string)
        ]
        /// The name of the bucket containing the inventory configurations to retrieve.
        public let bucket: String
        /// The marker used to continue an inventory configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
        public let continuationToken: String?

        public init(bucket: String, continuationToken: String? = nil) {
            self.bucket = bucket
            self.continuationToken = continuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case continuationToken = "continuation-token"
        }
    }

    public struct PutBucketPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Policy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ConfirmRemoveSelfBucketAccess", location: .header(locationName: "x-amz-confirm-remove-self-bucket-access"), required: false, type: .boolean), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Policy", required: true, type: .string)
        ]
        public let bucket: String
        /// Set this parameter to true to confirm that you want to remove your permissions to change this bucket policy in the future.
        public let confirmRemoveSelfBucketAccess: Bool?
        public let contentMD5: String?
        /// The bucket policy as a JSON document.
        public let policy: String

        public init(bucket: String, confirmRemoveSelfBucketAccess: Bool? = nil, contentMD5: String? = nil, policy: String) {
            self.bucket = bucket
            self.confirmRemoveSelfBucketAccess = confirmRemoveSelfBucketAccess
            self.contentMD5 = contentMD5
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case confirmRemoveSelfBucketAccess = "x-amz-confirm-remove-self-bucket-access"
            case contentMD5 = "Content-MD5"
            case policy = "Policy"
        }
    }

    public struct GetObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "IfUnmodifiedSince", location: .header(locationName: "If-Unmodified-Since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: false, type: .integer), 
            AWSShapeMember(label: "Range", location: .header(locationName: "Range"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseContentEncoding", location: .querystring(locationName: "response-content-encoding"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseContentLanguage", location: .querystring(locationName: "response-content-language"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseExpires", location: .querystring(locationName: "response-expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "IfNoneMatch", location: .header(locationName: "If-None-Match"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseContentDisposition", location: .querystring(locationName: "response-content-disposition"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "ResponseCacheControl", location: .querystring(locationName: "response-cache-control"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseContentType", location: .querystring(locationName: "response-content-type"), required: false, type: .string), 
            AWSShapeMember(label: "IfModifiedSince", location: .header(locationName: "If-Modified-Since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        public let bucket: String
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed).
        public let ifUnmodifiedSince: TimeStamp?
        /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.
        public let partNumber: Int32?
        /// Downloads the specified range bytes of an object. For more information about the HTTP Range header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.
        public let range: String?
        /// Sets the Content-Encoding header of the response.
        public let responseContentEncoding: String?
        public let requestPayer: RequestPayer?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Sets the Content-Language header of the response.
        public let responseContentLanguage: String?
        /// Sets the Expires header of the response.
        public let responseExpires: TimeStamp?
        /// VersionId used to reference a specific version of the object.
        public let versionId: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified).
        public let ifNoneMatch: String?
        /// Sets the Content-Disposition header of the response
        public let responseContentDisposition: String?
        public let key: String
        /// Sets the Cache-Control header of the response.
        public let responseCacheControl: String?
        /// Sets the Content-Type header of the response.
        public let responseContentType: String?
        /// Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified).
        public let ifModifiedSince: TimeStamp?
        /// Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed).
        public let ifMatch: String?

        public init(bucket: String, sSECustomerKey: String? = nil, ifUnmodifiedSince: TimeStamp? = nil, partNumber: Int32? = nil, range: String? = nil, responseContentEncoding: String? = nil, requestPayer: RequestPayer? = nil, sSECustomerKeyMD5: String? = nil, responseContentLanguage: String? = nil, responseExpires: TimeStamp? = nil, versionId: String? = nil, sSECustomerAlgorithm: String? = nil, ifNoneMatch: String? = nil, responseContentDisposition: String? = nil, key: String, responseCacheControl: String? = nil, responseContentType: String? = nil, ifModifiedSince: TimeStamp? = nil, ifMatch: String? = nil) {
            self.bucket = bucket
            self.sSECustomerKey = sSECustomerKey
            self.ifUnmodifiedSince = ifUnmodifiedSince
            self.partNumber = partNumber
            self.range = range
            self.responseContentEncoding = responseContentEncoding
            self.requestPayer = requestPayer
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.responseContentLanguage = responseContentLanguage
            self.responseExpires = responseExpires
            self.versionId = versionId
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.ifNoneMatch = ifNoneMatch
            self.responseContentDisposition = responseContentDisposition
            self.key = key
            self.responseCacheControl = responseCacheControl
            self.responseContentType = responseContentType
            self.ifModifiedSince = ifModifiedSince
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case ifUnmodifiedSince = "If-Unmodified-Since"
            case partNumber = "partNumber"
            case range = "Range"
            case responseContentEncoding = "response-content-encoding"
            case requestPayer = "x-amz-request-payer"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case responseContentLanguage = "response-content-language"
            case responseExpires = "response-expires"
            case versionId = "versionId"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case ifNoneMatch = "If-None-Match"
            case responseContentDisposition = "response-content-disposition"
            case key = "Key"
            case responseCacheControl = "response-cache-control"
            case responseContentType = "response-content-type"
            case ifModifiedSince = "If-Modified-Since"
            case ifMatch = "If-Match"
        }
    }

    public struct AbortMultipartUploadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let bucket: String
        public let key: String
        public let uploadId: String
        public let requestPayer: RequestPayer?

        public init(bucket: String, key: String, uploadId: String, requestPayer: RequestPayer? = nil) {
            self.bucket = bucket
            self.key = key
            self.uploadId = uploadId
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
            case uploadId = "uploadId"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct ProgressEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", required: false, type: .structure)
        ]
        /// The Progress event details.
        public let details: Progress?

        public init(details: Progress? = nil) {
            self.details = details
        }

        private enum CodingKeys: String, CodingKey {
            case details = "Details"
        }
    }

    public struct GetObjectTorrentOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Body", required: false, type: .blob), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let body: Data?
        public let requestCharged: RequestCharged?

        public init(body: Data? = nil, requestCharged: RequestCharged? = nil) {
            self.body = body
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case body = "Body"
            case requestCharged = "x-amz-request-charged"
        }
    }

    public enum MFADelete: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketEncryptionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ServerSideEncryptionConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ServerSideEncryptionConfiguration", location: .body(locationName: "ServerSideEncryptionConfiguration"), required: true, type: .structure)
        ]
        /// The base64-encoded 128-bit MD5 digest of the server-side encryption configuration.
        public let contentMD5: String?
        /// The name of the bucket for which the server-side encryption configuration is set.
        public let bucket: String
        public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration

        public init(contentMD5: String? = nil, bucket: String, serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
        }
    }

    public struct NoncurrentVersionTransition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NoncurrentDays", required: false, type: .integer), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum)
        ]
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see How Amazon S3 Calculates When an Object Became Noncurrent in the Amazon Simple Storage Service Developer Guide.
        public let noncurrentDays: Int32?
        /// The class of storage used to store the object.
        public let storageClass: TransitionStorageClass?

        public init(noncurrentDays: Int32? = nil, storageClass: TransitionStorageClass? = nil) {
            self.noncurrentDays = noncurrentDays
            self.storageClass = storageClass
        }

        private enum CodingKeys: String, CodingKey {
            case noncurrentDays = "NoncurrentDays"
            case storageClass = "StorageClass"
        }
    }

    public struct UploadPartCopyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: true, type: .integer), 
            AWSShapeMember(label: "CopySourceIfModifiedSince", location: .header(locationName: "x-amz-copy-source-if-modified-since"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceSSECustomerKey", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "CopySource", location: .header(locationName: "x-amz-copy-source"), required: true, type: .string), 
            AWSShapeMember(label: "CopySourceIfNoneMatch", location: .header(locationName: "x-amz-copy-source-if-none-match"), required: false, type: .string), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfMatch", location: .header(locationName: "x-amz-copy-source-if-match"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceRange", location: .header(locationName: "x-amz-copy-source-range"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "CopySourceSSECustomerKeyMD5", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceSSECustomerAlgorithm", location: .header(locationName: "x-amz-copy-source-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceIfUnmodifiedSince", location: .header(locationName: "x-amz-copy-source-if-unmodified-since"), required: false, type: .timestamp)
        ]
        public let bucket: String
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request.
        public let sSECustomerKey: String?
        /// Part number of part being copied. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32
        /// Copies the object if it has been modified since the specified time.
        public let copySourceIfModifiedSince: TimeStamp?
        public let requestPayer: RequestPayer?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created.
        public let copySourceSSECustomerKey: String?
        /// The name of the source bucket and key name of the source object, separated by a slash (/). Must be URL-encoded.
        public let copySource: String
        /// Copies the object if its entity tag (ETag) is different than the specified ETag.
        public let copySourceIfNoneMatch: String?
        /// Upload ID identifying the multipart upload whose part is being copied.
        public let uploadId: String
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// Copies the object if its entity tag (ETag) matches the specified tag.
        public let copySourceIfMatch: String?
        /// The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first ten bytes of the source. You can copy a range only if the source object is greater than 5 GB.
        public let copySourceRange: String?
        public let key: String
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let copySourceSSECustomerKeyMD5: String?
        /// Specifies the algorithm to use when decrypting the source object (e.g., AES256).
        public let copySourceSSECustomerAlgorithm: String?
        /// Copies the object if it hasn't been modified since the specified time.
        public let copySourceIfUnmodifiedSince: TimeStamp?

        public init(bucket: String, sSECustomerKey: String? = nil, partNumber: Int32, copySourceIfModifiedSince: TimeStamp? = nil, requestPayer: RequestPayer? = nil, sSECustomerKeyMD5: String? = nil, copySourceSSECustomerKey: String? = nil, copySource: String, copySourceIfNoneMatch: String? = nil, uploadId: String, sSECustomerAlgorithm: String? = nil, copySourceIfMatch: String? = nil, copySourceRange: String? = nil, key: String, copySourceSSECustomerKeyMD5: String? = nil, copySourceSSECustomerAlgorithm: String? = nil, copySourceIfUnmodifiedSince: TimeStamp? = nil) {
            self.bucket = bucket
            self.sSECustomerKey = sSECustomerKey
            self.partNumber = partNumber
            self.copySourceIfModifiedSince = copySourceIfModifiedSince
            self.requestPayer = requestPayer
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.copySourceSSECustomerKey = copySourceSSECustomerKey
            self.copySource = copySource
            self.copySourceIfNoneMatch = copySourceIfNoneMatch
            self.uploadId = uploadId
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.copySourceIfMatch = copySourceIfMatch
            self.copySourceRange = copySourceRange
            self.key = key
            self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
            self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
            self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case partNumber = "partNumber"
            case copySourceIfModifiedSince = "x-amz-copy-source-if-modified-since"
            case requestPayer = "x-amz-request-payer"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case copySourceSSECustomerKey = "x-amz-copy-source-server-side-encryption-customer-key"
            case copySource = "x-amz-copy-source"
            case copySourceIfNoneMatch = "x-amz-copy-source-if-none-match"
            case uploadId = "uploadId"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case copySourceIfMatch = "x-amz-copy-source-if-match"
            case copySourceRange = "x-amz-copy-source-range"
            case key = "Key"
            case copySourceSSECustomerKeyMD5 = "x-amz-copy-source-server-side-encryption-customer-key-MD5"
            case copySourceSSECustomerAlgorithm = "x-amz-copy-source-server-side-encryption-customer-algorithm"
            case copySourceIfUnmodifiedSince = "x-amz-copy-source-if-unmodified-since"
        }
    }

    public struct PutBucketAclRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AccessControlPolicy"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "AccessControlPolicy", location: .body(locationName: "AccessControlPolicy"), required: false, type: .structure), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "GrantWrite", location: .header(locationName: "x-amz-grant-write"), required: false, type: .string), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string)
        ]
        public let bucket: String
        public let contentMD5: String?
        public let accessControlPolicy: AccessControlPolicy?
        /// Allows grantee to write the ACL for the applicable bucket.
        public let grantWriteACP: String?
        /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
        public let grantFullControl: String?
        /// Allows grantee to create, overwrite, and delete any object in the bucket.
        public let grantWrite: String?
        /// Allows grantee to list the objects in the bucket.
        public let grantRead: String?
        /// The canned ACL to apply to the bucket.
        public let acl: BucketCannedACL?
        /// Allows grantee to read the bucket ACL.
        public let grantReadACP: String?

        public init(bucket: String, contentMD5: String? = nil, accessControlPolicy: AccessControlPolicy? = nil, grantWriteACP: String? = nil, grantFullControl: String? = nil, grantWrite: String? = nil, grantRead: String? = nil, acl: BucketCannedACL? = nil, grantReadACP: String? = nil) {
            self.bucket = bucket
            self.contentMD5 = contentMD5
            self.accessControlPolicy = accessControlPolicy
            self.grantWriteACP = grantWriteACP
            self.grantFullControl = grantFullControl
            self.grantWrite = grantWrite
            self.grantRead = grantRead
            self.acl = acl
            self.grantReadACP = grantReadACP
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case contentMD5 = "Content-MD5"
            case accessControlPolicy = "AccessControlPolicy"
            case grantWriteACP = "x-amz-grant-write-acp"
            case grantFullControl = "x-amz-grant-full-control"
            case grantWrite = "x-amz-grant-write"
            case grantRead = "x-amz-grant-read"
            case acl = "x-amz-acl"
            case grantReadACP = "x-amz-grant-read-acp"
        }
    }

    public struct Redirect: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplaceKeyPrefixWith", required: false, type: .string), 
            AWSShapeMember(label: "HttpRedirectCode", required: false, type: .string), 
            AWSShapeMember(label: "HostName", required: false, type: .string), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "ReplaceKeyWith", required: false, type: .string)
        ]
        /// The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with KeyPrefixEquals set to docs/ and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required if one of the siblings is present. Can be present only if ReplaceKeyWith is not provided.
        public let replaceKeyPrefixWith: String?
        /// The HTTP redirect code to use on the response. Not required if one of the siblings is present.
        public let httpRedirectCode: String?
        /// The host name to use in the redirect request.
        public let hostName: String?
        /// Protocol to use (http, https) when redirecting requests. The default is the protocol that is used in the original request.
        public let `protocol`: Protocol?
        /// The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the sibling is present. Can be present only if ReplaceKeyPrefixWith is not provided.
        public let replaceKeyWith: String?

        public init(replaceKeyPrefixWith: String? = nil, httpRedirectCode: String? = nil, hostName: String? = nil, protocol: Protocol? = nil, replaceKeyWith: String? = nil) {
            self.replaceKeyPrefixWith = replaceKeyPrefixWith
            self.httpRedirectCode = httpRedirectCode
            self.hostName = hostName
            self.`protocol` = `protocol`
            self.replaceKeyWith = replaceKeyWith
        }

        private enum CodingKeys: String, CodingKey {
            case replaceKeyPrefixWith = "ReplaceKeyPrefixWith"
            case httpRedirectCode = "HttpRedirectCode"
            case hostName = "HostName"
            case `protocol` = "Protocol"
            case replaceKeyWith = "ReplaceKeyWith"
        }
    }

    public enum BucketVersioningStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case suspended = "Suspended"
        public var description: String { return self.rawValue }
    }

    public struct MultipartUpload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "UploadId", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .structure), 
            AWSShapeMember(label: "Initiated", required: false, type: .timestamp), 
            AWSShapeMember(label: "Initiator", required: false, type: .structure)
        ]
        /// The class of storage used to store the object.
        public let storageClass: StorageClass?
        /// Key of the object for which the multipart upload was initiated.
        public let key: String?
        /// Upload ID that identifies the multipart upload.
        public let uploadId: String?
        public let owner: Owner?
        /// Date and time at which the multipart upload was initiated.
        public let initiated: TimeStamp?
        /// Identifies who initiated the multipart upload.
        public let initiator: Initiator?

        public init(storageClass: StorageClass? = nil, key: String? = nil, uploadId: String? = nil, owner: Owner? = nil, initiated: TimeStamp? = nil, initiator: Initiator? = nil) {
            self.storageClass = storageClass
            self.key = key
            self.uploadId = uploadId
            self.owner = owner
            self.initiated = initiated
            self.initiator = initiator
        }

        private enum CodingKeys: String, CodingKey {
            case storageClass = "StorageClass"
            case key = "Key"
            case uploadId = "UploadId"
            case owner = "Owner"
            case initiated = "Initiated"
            case initiator = "Initiator"
        }
    }

    public struct ListBucketAnalyticsConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "ContinuationToken", location: .querystring(locationName: "continuation-token"), required: false, type: .string)
        ]
        /// The name of the bucket from which analytics configurations are retrieved.
        public let bucket: String
        /// The ContinuationToken that represents a placeholder from where this request should begin.
        public let continuationToken: String?

        public init(bucket: String, continuationToken: String? = nil) {
            self.bucket = bucket
            self.continuationToken = continuationToken
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case continuationToken = "continuation-token"
        }
    }

    public enum ObjectStorageClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        case reducedRedundancy = "REDUCED_REDUNDANCY"
        case glacier = "GLACIER"
        case standardIa = "STANDARD_IA"
        case onezoneIa = "ONEZONE_IA"
        public var description: String { return self.rawValue }
    }

    public struct GetBucketLifecycleConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: false, type: .list)
        ]
        public let rules: [LifecycleRule]?

        public init(rules: [LifecycleRule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct GetBucketLifecycleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct RequestPaymentConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Payer", required: true, type: .enum)
        ]
        /// Specifies who pays for the download and request fees.
        public let payer: Payer

        public init(payer: Payer) {
            self.payer = payer
        }

        private enum CodingKeys: String, CodingKey {
            case payer = "Payer"
        }
    }

    public struct DeleteObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "DeleteMarker", location: .header(locationName: "x-amz-delete-marker"), required: false, type: .boolean)
        ]
        /// Returns the version ID of the delete marker created as a result of the DELETE operation.
        public let versionId: String?
        public let requestCharged: RequestCharged?
        /// Specifies whether the versioned object that was permanently deleted was (true) or was not (false) a delete marker.
        public let deleteMarker: Bool?

        public init(versionId: String? = nil, requestCharged: RequestCharged? = nil, deleteMarker: Bool? = nil) {
            self.versionId = versionId
            self.requestCharged = requestCharged
            self.deleteMarker = deleteMarker
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "x-amz-version-id"
            case requestCharged = "x-amz-request-charged"
            case deleteMarker = "x-amz-delete-marker"
        }
    }

    public enum StorageClassAnalysisSchemaVersion: String, CustomStringConvertible, Codable {
        case v1 = "V_1"
        public var description: String { return self.rawValue }
    }

    public struct RoutingRules: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoutingRule", required: false, type: .list)
        ]
        public let routingRule: [RoutingRule]?

        public init(routingRule: [RoutingRule]? = nil) {
            self.routingRule = routingRule
        }

        private enum CodingKeys: String, CodingKey {
            case routingRule = "RoutingRule"
        }
    }

    public struct UserMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetadataEntry", required: false, type: .list)
        ]
        public let metadataEntry: [MetadataEntry]?

        public init(metadataEntry: [MetadataEntry]? = nil) {
            self.metadataEntry = metadataEntry
        }

        private enum CodingKeys: String, CodingKey {
            case metadataEntry = "MetadataEntry"
        }
    }

    public struct QueueConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: true, type: .list), 
            AWSShapeMember(label: "QueueArn", location: .body(locationName: "Queue"), required: true, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let events: [Event]
        /// Amazon SQS queue ARN to which Amazon S3 will publish a message when it detects events of specified type.
        public let queueArn: String
        public let filter: NotificationConfigurationFilter?
        public let id: String?

        public init(events: [Event], queueArn: String, filter: NotificationConfigurationFilter? = nil, id: String? = nil) {
            self.events = events
            self.queueArn = queueArn
            self.filter = filter
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Event"
            case queueArn = "Queue"
            case filter = "Filter"
            case id = "Id"
        }
    }

    public struct GetBucketTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSet", required: true, type: .structure)
        ]
        public let tagSet: TagSet

        public init(tagSet: TagSet) {
            self.tagSet = tagSet
        }

        private enum CodingKeys: String, CodingKey {
            case tagSet = "TagSet"
        }
    }

    public struct RequestProgress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// Specifies whether periodic QueryProgress frames should be sent. Valid values: TRUE, FALSE. Default value: FALSE.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct ErrorDocument: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The object key name to use when a 4XX class error occurs.
        public let key: String

        public init(key: String) {
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
        }
    }

    public struct InventoryConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionalFields", required: false, type: .structure), 
            AWSShapeMember(label: "Destination", required: true, type: .structure), 
            AWSShapeMember(label: "IsEnabled", required: true, type: .boolean), 
            AWSShapeMember(label: "Schedule", required: true, type: .structure), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "IncludedObjectVersions", required: true, type: .enum), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// Contains the optional fields that are included in the inventory results.
        public let optionalFields: InventoryOptionalFields?
        /// Contains information about where to publish the inventory results.
        public let destination: InventoryDestination
        /// Specifies whether the inventory is enabled or disabled.
        public let isEnabled: Bool
        /// Specifies the schedule for generating inventory results.
        public let schedule: InventorySchedule
        /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.
        public let filter: InventoryFilter?
        /// Specifies which object version(s) to included in the inventory results.
        public let includedObjectVersions: InventoryIncludedObjectVersions
        /// The ID used to identify the inventory configuration.
        public let id: String

        public init(optionalFields: InventoryOptionalFields? = nil, destination: InventoryDestination, isEnabled: Bool, schedule: InventorySchedule, filter: InventoryFilter? = nil, includedObjectVersions: InventoryIncludedObjectVersions, id: String) {
            self.optionalFields = optionalFields
            self.destination = destination
            self.isEnabled = isEnabled
            self.schedule = schedule
            self.filter = filter
            self.includedObjectVersions = includedObjectVersions
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case optionalFields = "OptionalFields"
            case destination = "Destination"
            case isEnabled = "IsEnabled"
            case schedule = "Schedule"
            case filter = "Filter"
            case includedObjectVersions = "IncludedObjectVersions"
            case id = "Id"
        }
    }

    public struct MetricsFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .structure), 
            AWSShapeMember(label: "And", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// The tag used when evaluating a metrics filter.
        public let tag: Tag?
        /// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
        public let and: MetricsAndOperator?
        /// The prefix used when evaluating a metrics filter.
        public let prefix: String?

        public init(tag: Tag? = nil, and: MetricsAndOperator? = nil, prefix: String? = nil) {
            self.tag = tag
            self.and = and
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
            case and = "And"
            case prefix = "Prefix"
        }
    }

    public struct PutBucketTaggingRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Tagging"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Tagging", location: .body(locationName: "Tagging"), required: true, type: .structure)
        ]
        public let contentMD5: String?
        public let bucket: String
        public let tagging: Tagging

        public init(contentMD5: String? = nil, bucket: String, tagging: Tagging) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.tagging = tagging
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case tagging = "Tagging"
        }
    }

    public struct AnalyticsAndOperator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string)
        ]
        /// The list of tags to use when evaluating an AND predicate.
        public let tags: TagSet?
        /// The prefix to use when evaluating an AND predicate.
        public let prefix: String?

        public init(tags: TagSet? = nil, prefix: String? = nil) {
            self.tags = tags
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tag"
            case prefix = "Prefix"
        }
    }

    public struct ListObjectVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "MaxKeys", location: .querystring(locationName: "max-keys"), required: false, type: .integer), 
            AWSShapeMember(label: "Prefix", location: .querystring(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "Delimiter", location: .querystring(locationName: "delimiter"), required: false, type: .string), 
            AWSShapeMember(label: "EncodingType", location: .querystring(locationName: "encoding-type"), required: false, type: .enum), 
            AWSShapeMember(label: "KeyMarker", location: .querystring(locationName: "key-marker"), required: false, type: .string), 
            AWSShapeMember(label: "VersionIdMarker", location: .querystring(locationName: "version-id-marker"), required: false, type: .string)
        ]
        public let bucket: String
        /// Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more.
        public let maxKeys: Int32?
        /// Limits the response to keys that begin with the specified prefix.
        public let prefix: String?
        /// A delimiter is a character you use to group keys.
        public let delimiter: String?
        public let encodingType: EncodingType?
        /// Specifies the key to start with when listing objects in a bucket.
        public let keyMarker: String?
        /// Specifies the object version you want to start listing from.
        public let versionIdMarker: String?

        public init(bucket: String, maxKeys: Int32? = nil, prefix: String? = nil, delimiter: String? = nil, encodingType: EncodingType? = nil, keyMarker: String? = nil, versionIdMarker: String? = nil) {
            self.bucket = bucket
            self.maxKeys = maxKeys
            self.prefix = prefix
            self.delimiter = delimiter
            self.encodingType = encodingType
            self.keyMarker = keyMarker
            self.versionIdMarker = versionIdMarker
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case maxKeys = "max-keys"
            case prefix = "prefix"
            case delimiter = "delimiter"
            case encodingType = "encoding-type"
            case keyMarker = "key-marker"
            case versionIdMarker = "version-id-marker"
        }
    }

    public struct MetadataEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let value: String?
        public let name: String?

        public init(value: String? = nil, name: String? = nil) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public struct GetBucketLifecycleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: false, type: .list)
        ]
        public let rules: [Rule]?

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public enum Tier: String, CustomStringConvertible, Codable {
        case standard = "Standard"
        case bulk = "Bulk"
        case expedited = "Expedited"
        public var description: String { return self.rawValue }
    }

    public enum RequestCharged: String, CustomStringConvertible, Codable {
        case requester = "requester"
        public var description: String { return self.rawValue }
    }

    public struct DeleteMarkerEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsLatest", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .structure)
        ]
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public let isLatest: Bool?
        /// Date and time the object was last modified.
        public let lastModified: TimeStamp?
        /// The object key.
        public let key: String?
        /// Version ID of an object.
        public let versionId: String?
        public let owner: Owner?

        public init(isLatest: Bool? = nil, lastModified: TimeStamp? = nil, key: String? = nil, versionId: String? = nil, owner: Owner? = nil) {
            self.isLatest = isLatest
            self.lastModified = lastModified
            self.key = key
            self.versionId = versionId
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case isLatest = "IsLatest"
            case lastModified = "LastModified"
            case key = "Key"
            case versionId = "VersionId"
            case owner = "Owner"
        }
    }

    public struct CSVOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FieldDelimiter", required: false, type: .string), 
            AWSShapeMember(label: "QuoteFields", required: false, type: .enum), 
            AWSShapeMember(label: "RecordDelimiter", required: false, type: .string), 
            AWSShapeMember(label: "QuoteCharacter", required: false, type: .string), 
            AWSShapeMember(label: "QuoteEscapeCharacter", required: false, type: .string)
        ]
        /// Value used to separate individual fields in a record.
        public let fieldDelimiter: String?
        /// Indicates whether or not all output fields should be quoted.
        public let quoteFields: QuoteFields?
        /// Value used to separate individual records.
        public let recordDelimiter: String?
        /// Value used for escaping where the field delimiter is part of the value.
        public let quoteCharacter: String?
        /// Single character used for escaping the quote character inside an already escaped value.
        public let quoteEscapeCharacter: String?

        public init(fieldDelimiter: String? = nil, quoteFields: QuoteFields? = nil, recordDelimiter: String? = nil, quoteCharacter: String? = nil, quoteEscapeCharacter: String? = nil) {
            self.fieldDelimiter = fieldDelimiter
            self.quoteFields = quoteFields
            self.recordDelimiter = recordDelimiter
            self.quoteCharacter = quoteCharacter
            self.quoteEscapeCharacter = quoteEscapeCharacter
        }

        private enum CodingKeys: String, CodingKey {
            case fieldDelimiter = "FieldDelimiter"
            case quoteFields = "QuoteFields"
            case recordDelimiter = "RecordDelimiter"
            case quoteCharacter = "QuoteCharacter"
            case quoteEscapeCharacter = "QuoteEscapeCharacter"
        }
    }

    public enum InventoryIncludedObjectVersions: String, CustomStringConvertible, Codable {
        case all = "All"
        case current = "Current"
        public var description: String { return self.rawValue }
    }

    public struct DeleteBucketTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct ReplicationRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: true, type: .enum), 
            AWSShapeMember(label: "SourceSelectionCriteria", required: false, type: .structure), 
            AWSShapeMember(label: "Destination", required: true, type: .structure), 
            AWSShapeMember(label: "Prefix", required: true, type: .string)
        ]
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public let id: String?
        /// The rule is ignored if status is not Enabled.
        public let status: ReplicationRuleStatus
        /// Container for filters that define which source objects should be replicated.
        public let sourceSelectionCriteria: SourceSelectionCriteria?
        /// Container for replication destination information.
        public let destination: Destination
        /// Object keyname prefix identifying one or more objects to which the rule applies. Maximum prefix length can be up to 1,024 characters. Overlapping prefixes are not supported.
        public let prefix: String

        public init(id: String? = nil, status: ReplicationRuleStatus, sourceSelectionCriteria: SourceSelectionCriteria? = nil, destination: Destination, prefix: String) {
            self.id = id
            self.status = status
            self.sourceSelectionCriteria = sourceSelectionCriteria
            self.destination = destination
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case id = "ID"
            case status = "Status"
            case sourceSelectionCriteria = "SourceSelectionCriteria"
            case destination = "Destination"
            case prefix = "Prefix"
        }
    }

    public struct DeleteObjectTaggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string)
        ]
        public let bucket: String
        /// The versionId of the object that the tag-set will be removed from.
        public let versionId: String?
        public let key: String

        public init(bucket: String, versionId: String? = nil, key: String) {
            self.bucket = bucket
            self.versionId = versionId
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case versionId = "versionId"
            case key = "Key"
        }
    }

    public struct LambdaFunctionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LambdaFunctionArn", location: .body(locationName: "CloudFunction"), required: true, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: true, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Lambda cloud function ARN that Amazon S3 can invoke when it detects events of the specified type.
        public let lambdaFunctionArn: String
        public let filter: NotificationConfigurationFilter?
        public let events: [Event]
        public let id: String?

        public init(lambdaFunctionArn: String, filter: NotificationConfigurationFilter? = nil, events: [Event], id: String? = nil) {
            self.lambdaFunctionArn = lambdaFunctionArn
            self.filter = filter
            self.events = events
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case lambdaFunctionArn = "CloudFunction"
            case filter = "Filter"
            case events = "Event"
            case id = "Id"
        }
    }

    public struct GetBucketLoggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggingEnabled", required: false, type: .structure)
        ]
        public let loggingEnabled: LoggingEnabled?

        public init(loggingEnabled: LoggingEnabled? = nil) {
            self.loggingEnabled = loggingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case loggingEnabled = "LoggingEnabled"
        }
    }

    public struct UploadPartOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum)
        ]
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// Entity tag for the uploaded object.
        public let eTag: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        public let requestCharged: RequestCharged?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?

        public init(sSECustomerKeyMD5: String? = nil, sSEKMSKeyId: String? = nil, eTag: String? = nil, sSECustomerAlgorithm: String? = nil, requestCharged: RequestCharged? = nil, serverSideEncryption: ServerSideEncryption? = nil) {
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.sSEKMSKeyId = sSEKMSKeyId
            self.eTag = eTag
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.requestCharged = requestCharged
            self.serverSideEncryption = serverSideEncryption
        }

        private enum CodingKeys: String, CodingKey {
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case eTag = "ETag"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case requestCharged = "x-amz-request-charged"
            case serverSideEncryption = "x-amz-server-side-encryption"
        }
    }

    public struct OutputSerialization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CSV", required: false, type: .structure), 
            AWSShapeMember(label: "JSON", required: false, type: .structure)
        ]
        /// Describes the serialization of CSV-encoded Select results.
        public let csv: CSVOutput?
        /// Specifies JSON as request's output serialization format.
        public let json: JSONOutput?

        public init(csv: CSVOutput? = nil, json: JSONOutput? = nil) {
            self.csv = csv
            self.json = json
        }

        private enum CodingKeys: String, CodingKey {
            case csv = "CSV"
            case json = "JSON"
        }
    }

    public struct GetObjectTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "TagSet", required: true, type: .structure)
        ]
        public let versionId: String?
        public let tagSet: TagSet

        public init(versionId: String? = nil, tagSet: TagSet) {
            self.versionId = versionId
            self.tagSet = tagSet
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "x-amz-version-id"
            case tagSet = "TagSet"
        }
    }

    public struct GetBucketCorsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CORSRules", location: .body(locationName: "CORSRule"), required: false, type: .list)
        ]
        public let cORSRules: [CORSRule]?

        public init(cORSRules: [CORSRule]? = nil) {
            self.cORSRules = cORSRules
        }

        private enum CodingKeys: String, CodingKey {
            case cORSRules = "CORSRule"
        }
    }

    public struct Error: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "Code", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        public let versionId: String?
        public let code: String?
        public let message: String?
        public let key: String?

        public init(versionId: String? = nil, code: String? = nil, message: String? = nil, key: String? = nil) {
            self.versionId = versionId
            self.code = code
            self.message = message
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case code = "Code"
            case message = "Message"
            case key = "Key"
        }
    }

    public struct PutObjectRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Tagging", location: .header(locationName: "x-amz-tagging"), required: false, type: .string), 
            AWSShapeMember(label: "ContentDisposition", location: .header(locationName: "Content-Disposition"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "GrantReadACP", location: .header(locationName: "x-amz-grant-read-acp"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLanguage", location: .header(locationName: "Content-Language"), required: false, type: .string), 
            AWSShapeMember(label: "ContentEncoding", location: .header(locationName: "Content-Encoding"), required: false, type: .string), 
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long), 
            AWSShapeMember(label: "GrantWriteACP", location: .header(locationName: "x-amz-grant-write-acp"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "WebsiteRedirectLocation", location: .header(locationName: "x-amz-website-redirect-location"), required: false, type: .string), 
            AWSShapeMember(label: "Body", required: false, type: .blob), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "CacheControl", location: .header(locationName: "Cache-Control"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantFullControl", location: .header(locationName: "x-amz-grant-full-control"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "ACL", location: .header(locationName: "x-amz-acl"), required: false, type: .enum), 
            AWSShapeMember(label: "Metadata", required: false, type: .map), 
            AWSShapeMember(label: "Expires", location: .header(locationName: "Expires"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ContentType", location: .header(locationName: "Content-Type"), required: false, type: .string), 
            AWSShapeMember(label: "StorageClass", location: .header(locationName: "x-amz-storage-class"), required: false, type: .enum), 
            AWSShapeMember(label: "GrantRead", location: .header(locationName: "x-amz-grant-read"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum)
        ]
        /// Name of the bucket to which the PUT operation was initiated.
        public let bucket: String
        /// The tag-set for the object. The tag-set must be encoded as URL Query parameters
        public let tagging: String?
        /// Specifies presentational information for the object.
        public let contentDisposition: String?
        /// Specifies the AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4. Documentation on configuring any of the officially supported AWS SDKs and CLI can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version
        public let sSEKMSKeyId: String?
        /// Allows grantee to read the object ACL.
        public let grantReadACP: String?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?
        /// The language the content is in.
        public let contentLanguage: String?
        /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
        public let contentEncoding: String?
        /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
        public let contentLength: Int64?
        /// Allows grantee to write the ACL for the applicable object.
        public let grantWriteACP: String?
        /// Object key for which the PUT operation was initiated.
        public let key: String
        /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
        public let websiteRedirectLocation: String?
        /// Object data.
        public let body: Data?
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header.
        public let sSECustomerKey: String?
        /// The base64-encoded 128-bit MD5 digest of the part data.
        public let contentMD5: String?
        /// Specifies caching behavior along the request/reply chain.
        public let cacheControl: String?
        public let requestPayer: RequestPayer?
        /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
        public let grantFullControl: String?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// The canned ACL to apply to the object.
        public let acl: ObjectCannedACL?
        /// A map of metadata to store with the object in S3.
        public let metadata: [String: String]?
        /// The date and time at which the object is no longer cacheable.
        public let expires: TimeStamp?
        /// A standard MIME type describing the format of the object data.
        public let contentType: String?
        /// The type of storage to use for the object. Defaults to 'STANDARD'.
        public let storageClass: StorageClass?
        /// Allows grantee to read the object data and its metadata.
        public let grantRead: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?

        public init(bucket: String, tagging: String? = nil, contentDisposition: String? = nil, sSEKMSKeyId: String? = nil, grantReadACP: String? = nil, sSECustomerAlgorithm: String? = nil, contentLanguage: String? = nil, contentEncoding: String? = nil, contentLength: Int64? = nil, grantWriteACP: String? = nil, key: String, websiteRedirectLocation: String? = nil, body: Data? = nil, sSECustomerKey: String? = nil, contentMD5: String? = nil, cacheControl: String? = nil, requestPayer: RequestPayer? = nil, grantFullControl: String? = nil, sSECustomerKeyMD5: String? = nil, acl: ObjectCannedACL? = nil, metadata: [String: String]? = nil, expires: TimeStamp? = nil, contentType: String? = nil, storageClass: StorageClass? = nil, grantRead: String? = nil, serverSideEncryption: ServerSideEncryption? = nil) {
            self.bucket = bucket
            self.tagging = tagging
            self.contentDisposition = contentDisposition
            self.sSEKMSKeyId = sSEKMSKeyId
            self.grantReadACP = grantReadACP
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.contentLanguage = contentLanguage
            self.contentEncoding = contentEncoding
            self.contentLength = contentLength
            self.grantWriteACP = grantWriteACP
            self.key = key
            self.websiteRedirectLocation = websiteRedirectLocation
            self.body = body
            self.sSECustomerKey = sSECustomerKey
            self.contentMD5 = contentMD5
            self.cacheControl = cacheControl
            self.requestPayer = requestPayer
            self.grantFullControl = grantFullControl
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.acl = acl
            self.metadata = metadata
            self.expires = expires
            self.contentType = contentType
            self.storageClass = storageClass
            self.grantRead = grantRead
            self.serverSideEncryption = serverSideEncryption
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case tagging = "x-amz-tagging"
            case contentDisposition = "Content-Disposition"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case grantReadACP = "x-amz-grant-read-acp"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case contentLanguage = "Content-Language"
            case contentEncoding = "Content-Encoding"
            case contentLength = "Content-Length"
            case grantWriteACP = "x-amz-grant-write-acp"
            case key = "Key"
            case websiteRedirectLocation = "x-amz-website-redirect-location"
            case body = "Body"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case contentMD5 = "Content-MD5"
            case cacheControl = "Cache-Control"
            case requestPayer = "x-amz-request-payer"
            case grantFullControl = "x-amz-grant-full-control"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case acl = "x-amz-acl"
            case metadata = "Metadata"
            case expires = "Expires"
            case contentType = "Content-Type"
            case storageClass = "x-amz-storage-class"
            case grantRead = "x-amz-grant-read"
            case serverSideEncryption = "x-amz-server-side-encryption"
        }
    }

    public struct CreateBucketConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocationConstraint", required: false, type: .enum)
        ]
        /// Specifies the region where the bucket will be created. If you don't specify a region, the bucket will be created in US Standard.
        public let locationConstraint: BucketLocationConstraint?

        public init(locationConstraint: BucketLocationConstraint? = nil) {
            self.locationConstraint = locationConstraint
        }

        private enum CodingKeys: String, CodingKey {
            case locationConstraint = "LocationConstraint"
        }
    }

    public struct GetBucketWebsiteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct S3Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tagging", required: false, type: .structure), 
            AWSShapeMember(label: "Encryption", required: false, type: .structure), 
            AWSShapeMember(label: "AccessControlList", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: true, type: .string), 
            AWSShapeMember(label: "StorageClass", required: false, type: .enum), 
            AWSShapeMember(label: "BucketName", required: true, type: .string), 
            AWSShapeMember(label: "CannedACL", required: false, type: .enum), 
            AWSShapeMember(label: "UserMetadata", required: false, type: .structure)
        ]
        /// The tag-set that is applied to the restore results.
        public let tagging: Tagging?
        public let encryption: Encryption?
        /// A list of grants that control access to the staged results.
        public let accessControlList: Grants?
        /// The prefix that is prepended to the restore results for this request.
        public let prefix: String
        /// The class of storage used to store the restore results.
        public let storageClass: StorageClass?
        /// The name of the bucket where the restore results will be placed.
        public let bucketName: String
        /// The canned ACL to apply to the restore results.
        public let cannedACL: ObjectCannedACL?
        /// A list of metadata to store with the restore results in S3.
        public let userMetadata: UserMetadata?

        public init(tagging: Tagging? = nil, encryption: Encryption? = nil, accessControlList: Grants? = nil, prefix: String, storageClass: StorageClass? = nil, bucketName: String, cannedACL: ObjectCannedACL? = nil, userMetadata: UserMetadata? = nil) {
            self.tagging = tagging
            self.encryption = encryption
            self.accessControlList = accessControlList
            self.prefix = prefix
            self.storageClass = storageClass
            self.bucketName = bucketName
            self.cannedACL = cannedACL
            self.userMetadata = userMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case tagging = "Tagging"
            case encryption = "Encryption"
            case accessControlList = "AccessControlList"
            case prefix = "Prefix"
            case storageClass = "StorageClass"
            case bucketName = "BucketName"
            case cannedACL = "CannedACL"
            case userMetadata = "UserMetadata"
        }
    }

    public struct UploadPartRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "PartNumber", location: .querystring(locationName: "partNumber"), required: true, type: .integer), 
            AWSShapeMember(label: "ContentLength", location: .header(locationName: "Content-Length"), required: false, type: .long), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string), 
            AWSShapeMember(label: "Body", required: false, type: .blob), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string)
        ]
        /// Name of the bucket to which the multipart upload was initiated.
        public let bucket: String
        /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side​-encryption​-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request.
        public let sSECustomerKey: String?
        /// The base64-encoded 128-bit MD5 digest of the part data.
        public let contentMD5: String?
        /// Part number of part being uploaded. This is a positive integer between 1 and 10,000.
        public let partNumber: Int32
        /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
        public let contentLength: Int64?
        public let requestPayer: RequestPayer?
        /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure the encryption key was transmitted without error.
        public let sSECustomerKeyMD5: String?
        /// Object key for which the multipart upload was initiated.
        public let key: String
        /// Upload ID identifying the multipart upload whose part is being uploaded.
        public let uploadId: String
        /// Object data.
        public let body: Data?
        /// Specifies the algorithm to use to when encrypting the object (e.g., AES256).
        public let sSECustomerAlgorithm: String?

        public init(bucket: String, sSECustomerKey: String? = nil, contentMD5: String? = nil, partNumber: Int32, contentLength: Int64? = nil, requestPayer: RequestPayer? = nil, sSECustomerKeyMD5: String? = nil, key: String, uploadId: String, body: Data? = nil, sSECustomerAlgorithm: String? = nil) {
            self.bucket = bucket
            self.sSECustomerKey = sSECustomerKey
            self.contentMD5 = contentMD5
            self.partNumber = partNumber
            self.contentLength = contentLength
            self.requestPayer = requestPayer
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.key = key
            self.uploadId = uploadId
            self.body = body
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case contentMD5 = "Content-MD5"
            case partNumber = "partNumber"
            case contentLength = "Content-Length"
            case requestPayer = "x-amz-request-payer"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case key = "Key"
            case uploadId = "uploadId"
            case body = "Body"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
        }
    }

    public struct DeletedObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteMarkerVersionId", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "DeleteMarker", required: false, type: .boolean)
        ]
        public let deleteMarkerVersionId: String?
        public let versionId: String?
        public let key: String?
        public let deleteMarker: Bool?

        public init(deleteMarkerVersionId: String? = nil, versionId: String? = nil, key: String? = nil, deleteMarker: Bool? = nil) {
            self.deleteMarkerVersionId = deleteMarkerVersionId
            self.versionId = versionId
            self.key = key
            self.deleteMarker = deleteMarker
        }

        private enum CodingKeys: String, CodingKey {
            case deleteMarkerVersionId = "DeleteMarkerVersionId"
            case versionId = "VersionId"
            case key = "Key"
            case deleteMarker = "DeleteMarker"
        }
    }

    public struct PutObjectTaggingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string)
        ]
        public let versionId: String?

        public init(versionId: String? = nil) {
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "x-amz-version-id"
        }
    }

    public struct SSES3: AWSShape {

    }

    public struct GetBucketRequestPaymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct DeleteBucketPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct S3KeyFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterRules", location: .body(locationName: "FilterRule"), required: false, type: .list)
        ]
        public let filterRules: [FilterRule]?

        public init(filterRules: [FilterRule]? = nil) {
            self.filterRules = filterRules
        }

        private enum CodingKeys: String, CodingKey {
            case filterRules = "FilterRule"
        }
    }

    public enum TransitionStorageClass: String, CustomStringConvertible, Codable {
        case glacier = "GLACIER"
        case standardIa = "STANDARD_IA"
        case onezoneIa = "ONEZONE_IA"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketWebsiteRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WebsiteConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "WebsiteConfiguration", location: .body(locationName: "WebsiteConfiguration"), required: true, type: .structure)
        ]
        public let contentMD5: String?
        public let bucket: String
        public let websiteConfiguration: WebsiteConfiguration

        public init(contentMD5: String? = nil, bucket: String, websiteConfiguration: WebsiteConfiguration) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.websiteConfiguration = websiteConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case websiteConfiguration = "WebsiteConfiguration"
        }
    }

    public struct PutBucketNotificationConfigurationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "NotificationConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "NotificationConfiguration", location: .body(locationName: "NotificationConfiguration"), required: true, type: .structure)
        ]
        public let bucket: String
        public let notificationConfiguration: NotificationConfiguration

        public init(bucket: String, notificationConfiguration: NotificationConfiguration) {
            self.bucket = bucket
            self.notificationConfiguration = notificationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case notificationConfiguration = "NotificationConfiguration"
        }
    }

    public struct DeleteBucketMetricsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket containing the metrics configuration to delete.
        public let bucket: String
        /// The ID used to identify the metrics configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public struct AbortIncompleteMultipartUpload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DaysAfterInitiation", required: false, type: .integer)
        ]
        /// Indicates the number of days that must pass since initiation for Lifecycle to abort an Incomplete Multipart Upload.
        public let daysAfterInitiation: Int32?

        public init(daysAfterInitiation: Int32? = nil) {
            self.daysAfterInitiation = daysAfterInitiation
        }

        private enum CodingKeys: String, CodingKey {
            case daysAfterInitiation = "DaysAfterInitiation"
        }
    }

    public struct RestoreRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GlacierJobParameters", required: false, type: .structure), 
            AWSShapeMember(label: "SelectParameters", required: false, type: .structure), 
            AWSShapeMember(label: "Days", required: false, type: .integer), 
            AWSShapeMember(label: "OutputLocation", required: false, type: .structure), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Tier", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Glacier related parameters pertaining to this job. Do not use with restores that specify OutputLocation.
        public let glacierJobParameters: GlacierJobParameters?
        /// Describes the parameters for Select job types.
        public let selectParameters: SelectParameters?
        /// Lifetime of the active copy in days. Do not use with restores that specify OutputLocation.
        public let days: Int32?
        /// Describes the location where the restore job's output is stored.
        public let outputLocation: OutputLocation?
        /// Type of restore request.
        public let `type`: RestoreRequestType?
        /// Glacier retrieval tier at which the restore will be processed.
        public let tier: Tier?
        /// The optional description for the job.
        public let description: String?

        public init(glacierJobParameters: GlacierJobParameters? = nil, selectParameters: SelectParameters? = nil, days: Int32? = nil, outputLocation: OutputLocation? = nil, type: RestoreRequestType? = nil, tier: Tier? = nil, description: String? = nil) {
            self.glacierJobParameters = glacierJobParameters
            self.selectParameters = selectParameters
            self.days = days
            self.outputLocation = outputLocation
            self.`type` = `type`
            self.tier = tier
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case glacierJobParameters = "GlacierJobParameters"
            case selectParameters = "SelectParameters"
            case days = "Days"
            case outputLocation = "OutputLocation"
            case `type` = "Type"
            case tier = "Tier"
            case description = "Description"
        }
    }

    public struct SelectObjectContentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "OutputSerialization", required: true, type: .structure), 
            AWSShapeMember(label: "SSECustomerKey", location: .header(locationName: "x-amz-server-side-encryption-customer-key"), required: false, type: .string), 
            AWSShapeMember(label: "Expression", required: true, type: .string), 
            AWSShapeMember(label: "ExpressionType", required: true, type: .enum), 
            AWSShapeMember(label: "RequestProgress", required: false, type: .structure), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "InputSerialization", required: true, type: .structure)
        ]
        /// The S3 Bucket.
        public let bucket: String
        /// Describes the format of the data that you want Amazon S3 to return in response.
        public let outputSerialization: OutputSerialization
        /// The SSE Customer Key. For more information, go to  Server-Side Encryption (Using Customer-Provided Encryption Keys. 
        public let sSECustomerKey: String?
        /// The expression that is used to query the object.
        public let expression: String
        /// The type of the provided expression (e.g., SQL).
        public let expressionType: ExpressionType
        /// Specifies if periodic request progress information should be enabled.
        public let requestProgress: RequestProgress?
        /// The SSE Customer Key MD5. For more information, go to  Server-Side Encryption (Using Customer-Provided Encryption Keys. 
        public let sSECustomerKeyMD5: String?
        /// The Object Key.
        public let key: String
        /// The SSE Algorithm used to encrypt the object. For more information, go to  Server-Side Encryption (Using Customer-Provided Encryption Keys. 
        public let sSECustomerAlgorithm: String?
        /// Describes the format of the data in the object that is being queried.
        public let inputSerialization: InputSerialization

        public init(bucket: String, outputSerialization: OutputSerialization, sSECustomerKey: String? = nil, expression: String, expressionType: ExpressionType, requestProgress: RequestProgress? = nil, sSECustomerKeyMD5: String? = nil, key: String, sSECustomerAlgorithm: String? = nil, inputSerialization: InputSerialization) {
            self.bucket = bucket
            self.outputSerialization = outputSerialization
            self.sSECustomerKey = sSECustomerKey
            self.expression = expression
            self.expressionType = expressionType
            self.requestProgress = requestProgress
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.key = key
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.inputSerialization = inputSerialization
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case outputSerialization = "OutputSerialization"
            case sSECustomerKey = "x-amz-server-side-encryption-customer-key"
            case expression = "Expression"
            case expressionType = "ExpressionType"
            case requestProgress = "RequestProgress"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case key = "Key"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case inputSerialization = "InputSerialization"
        }
    }

    public struct SseKmsEncryptedObjects: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .enum)
        ]
        /// The replication for KMS encrypted S3 objects is disabled if status is not Enabled.
        public let status: SseKmsEncryptedObjectsStatus

        public init(status: SseKmsEncryptedObjectsStatus) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct GetBucketInventoryConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket containing the inventory configuration to retrieve.
        public let bucket: String
        /// The ID used to identify the inventory configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public enum JSONType: String, CustomStringConvertible, Codable {
        case document = "DOCUMENT"
        case lines = "LINES"
        public var description: String { return self.rawValue }
    }

    public struct LifecycleConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", location: .body(locationName: "Rule"), required: true, type: .list)
        ]
        public let rules: [Rule]

        public init(rules: [Rule]) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rule"
        }
    }

    public struct GetBucketAnalyticsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .querystring(locationName: "id"), required: true, type: .string)
        ]
        /// The name of the bucket from which an analytics configuration is retrieved.
        public let bucket: String
        /// The identifier used to represent an analytics configuration.
        public let id: String

        public init(bucket: String, id: String) {
            self.bucket = bucket
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case id = "id"
        }
    }

    public enum FileHeaderInfo: String, CustomStringConvertible, Codable {
        case use = "USE"
        case ignore = "IGNORE"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public struct Buckets: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: false, type: .list)
        ]
        public let bucket: [Bucket]?

        public init(bucket: [Bucket]? = nil) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketAccelerateConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        /// Name of the bucket for which the accelerate configuration is retrieved.
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketInventoryConfigurationOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "InventoryConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InventoryConfiguration", required: false, type: .structure)
        ]
        /// Specifies the inventory configuration.
        public let inventoryConfiguration: InventoryConfiguration?

        public init(inventoryConfiguration: InventoryConfiguration? = nil) {
            self.inventoryConfiguration = inventoryConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case inventoryConfiguration = "InventoryConfiguration"
        }
    }

    public struct ListPartsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "PartNumberMarker", location: .querystring(locationName: "part-number-marker"), required: false, type: .integer), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "UploadId", location: .querystring(locationName: "uploadId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxParts", location: .querystring(locationName: "max-parts"), required: false, type: .integer), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let bucket: String
        /// Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.
        public let partNumberMarker: Int32?
        public let key: String
        /// Upload ID identifying the multipart upload whose parts are being listed.
        public let uploadId: String
        /// Sets the maximum number of parts to return.
        public let maxParts: Int32?
        public let requestPayer: RequestPayer?

        public init(bucket: String, partNumberMarker: Int32? = nil, key: String, uploadId: String, maxParts: Int32? = nil, requestPayer: RequestPayer? = nil) {
            self.bucket = bucket
            self.partNumberMarker = partNumberMarker
            self.key = key
            self.uploadId = uploadId
            self.maxParts = maxParts
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case partNumberMarker = "part-number-marker"
            case key = "Key"
            case uploadId = "uploadId"
            case maxParts = "max-parts"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public enum BucketAccelerateStatus: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case suspended = "Suspended"
        public var description: String { return self.rawValue }
    }

    public struct RestoreObjectRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "RestoreRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "RestoreRequest", location: .body(locationName: "RestoreRequest"), required: false, type: .structure), 
            AWSShapeMember(label: "Key", location: .uri(locationName: "Key"), required: true, type: .string), 
            AWSShapeMember(label: "VersionId", location: .querystring(locationName: "versionId"), required: false, type: .string), 
            AWSShapeMember(label: "RequestPayer", location: .header(locationName: "x-amz-request-payer"), required: false, type: .enum)
        ]
        public let bucket: String
        public let restoreRequest: RestoreRequest?
        public let key: String
        public let versionId: String?
        public let requestPayer: RequestPayer?

        public init(bucket: String, restoreRequest: RestoreRequest? = nil, key: String, versionId: String? = nil, requestPayer: RequestPayer? = nil) {
            self.bucket = bucket
            self.restoreRequest = restoreRequest
            self.key = key
            self.versionId = versionId
            self.requestPayer = requestPayer
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case restoreRequest = "RestoreRequest"
            case key = "Key"
            case versionId = "versionId"
            case requestPayer = "x-amz-request-payer"
        }
    }

    public struct StatsEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", required: false, type: .structure)
        ]
        /// The Stats event details.
        public let details: Stats?

        public init(details: Stats? = nil) {
            self.details = details
        }

        private enum CodingKeys: String, CodingKey {
            case details = "Details"
        }
    }

    public struct Grantee: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ID", required: false, type: .string), 
            AWSShapeMember(label: "EmailAddress", required: false, type: .string), 
            AWSShapeMember(label: "Type", location: .body(locationName: "xsi:type"), required: true, type: .enum), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "URI", required: false, type: .string)
        ]
        /// The canonical user ID of the grantee.
        public let id: String?
        /// Email address of the grantee.
        public let emailAddress: String?
        /// Type of grantee
        public let `type`: `Type`
        /// Screen name of the grantee.
        public let displayName: String?
        /// URI of the grantee group.
        public let uri: String?

        public init(id: String? = nil, emailAddress: String? = nil, type: `Type`, displayName: String? = nil, uri: String? = nil) {
            self.id = id
            self.emailAddress = emailAddress
            self.`type` = `type`
            self.displayName = displayName
            self.uri = uri
        }

        private enum CodingKeys: String, CodingKey {
            case id = "ID"
            case emailAddress = "EmailAddress"
            case `type` = "xsi:type"
            case displayName = "DisplayName"
            case uri = "URI"
        }
    }

    public enum CompressionType: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case gzip = "GZIP"
        case bzip2 = "BZIP2"
        public var description: String { return self.rawValue }
    }

    public struct QueueConfigurationDeprecated: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Queue", required: false, type: .string), 
            AWSShapeMember(label: "Events", location: .body(locationName: "Event"), required: false, type: .list), 
            AWSShapeMember(label: "Event", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        public let queue: String?
        public let events: [Event]?
        public let event: Event?
        public let id: String?

        public init(queue: String? = nil, events: [Event]? = nil, event: Event? = nil, id: String? = nil) {
            self.queue = queue
            self.events = events
            self.event = event
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case queue = "Queue"
            case events = "Event"
            // TODO this is temporary measure for avoiding CondingKey duplication.
            // Should decode duplidated paths with same type for JSON
            case event = "_Event"
            case id = "Id"
        }
    }

    public struct GetBucketVersioningRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public struct GetBucketLoggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string)
        ]
        public let bucket: String

        public init(bucket: String) {
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
        }
    }

    public enum `Protocol`: String, CustomStringConvertible, Codable {
        case http = "http"
        case https = "https"
        public var description: String { return self.rawValue }
    }

    public enum Permission: String, CustomStringConvertible, Codable {
        case fullControl = "FULL_CONTROL"
        case write = "WRITE"
        case writeAcp = "WRITE_ACP"
        case read = "READ"
        case readAcp = "READ_ACP"
        public var description: String { return self.rawValue }
    }

    public struct PutBucketRequestPaymentRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "RequestPaymentConfiguration"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentMD5", location: .header(locationName: "Content-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .uri(locationName: "Bucket"), required: true, type: .string), 
            AWSShapeMember(label: "RequestPaymentConfiguration", location: .body(locationName: "RequestPaymentConfiguration"), required: true, type: .structure)
        ]
        public let contentMD5: String?
        public let bucket: String
        public let requestPaymentConfiguration: RequestPaymentConfiguration

        public init(contentMD5: String? = nil, bucket: String, requestPaymentConfiguration: RequestPaymentConfiguration) {
            self.contentMD5 = contentMD5
            self.bucket = bucket
            self.requestPaymentConfiguration = requestPaymentConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case contentMD5 = "Content-MD5"
            case bucket = "Bucket"
            case requestPaymentConfiguration = "RequestPaymentConfiguration"
        }
    }

    public enum QuoteFields: String, CustomStringConvertible, Codable {
        case always = "ALWAYS"
        case asneeded = "ASNEEDED"
        public var description: String { return self.rawValue }
    }

    public struct PutObjectOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum)
        ]
        /// If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded.
        public let expiration: String?
        /// Version of the object.
        public let versionId: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// Entity tag for the uploaded object.
        public let eTag: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        public let requestCharged: RequestCharged?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?

        public init(expiration: String? = nil, versionId: String? = nil, sSECustomerKeyMD5: String? = nil, sSEKMSKeyId: String? = nil, eTag: String? = nil, sSECustomerAlgorithm: String? = nil, requestCharged: RequestCharged? = nil, serverSideEncryption: ServerSideEncryption? = nil) {
            self.expiration = expiration
            self.versionId = versionId
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.sSEKMSKeyId = sSEKMSKeyId
            self.eTag = eTag
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.requestCharged = requestCharged
            self.serverSideEncryption = serverSideEncryption
        }

        private enum CodingKeys: String, CodingKey {
            case expiration = "x-amz-expiration"
            case versionId = "x-amz-version-id"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case eTag = "ETag"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case requestCharged = "x-amz-request-charged"
            case serverSideEncryption = "x-amz-server-side-encryption"
        }
    }

    public struct CopyObjectOutput: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CopyObjectResult"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CopyObjectResult", required: false, type: .structure), 
            AWSShapeMember(label: "SSECustomerKeyMD5", location: .header(locationName: "x-amz-server-side-encryption-customer-key-MD5"), required: false, type: .string), 
            AWSShapeMember(label: "VersionId", location: .header(locationName: "x-amz-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "CopySourceVersionId", location: .header(locationName: "x-amz-copy-source-version-id"), required: false, type: .string), 
            AWSShapeMember(label: "SSEKMSKeyId", location: .header(locationName: "x-amz-server-side-encryption-aws-kms-key-id"), required: false, type: .string), 
            AWSShapeMember(label: "Expiration", location: .header(locationName: "x-amz-expiration"), required: false, type: .string), 
            AWSShapeMember(label: "SSECustomerAlgorithm", location: .header(locationName: "x-amz-server-side-encryption-customer-algorithm"), required: false, type: .string), 
            AWSShapeMember(label: "ServerSideEncryption", location: .header(locationName: "x-amz-server-side-encryption"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestCharged", location: .header(locationName: "x-amz-request-charged"), required: false, type: .enum)
        ]
        public let copyObjectResult: CopyObjectResult?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide round trip message integrity verification of the customer-provided encryption key.
        public let sSECustomerKeyMD5: String?
        /// Version ID of the newly created copy.
        public let versionId: String?
        public let copySourceVersionId: String?
        /// If present, specifies the ID of the AWS Key Management Service (KMS) master encryption key that was used for the object.
        public let sSEKMSKeyId: String?
        /// If the object expiration is configured, the response includes this header.
        public let expiration: String?
        /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header confirming the encryption algorithm used.
        public let sSECustomerAlgorithm: String?
        /// The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms).
        public let serverSideEncryption: ServerSideEncryption?
        public let requestCharged: RequestCharged?

        public init(copyObjectResult: CopyObjectResult? = nil, sSECustomerKeyMD5: String? = nil, versionId: String? = nil, copySourceVersionId: String? = nil, sSEKMSKeyId: String? = nil, expiration: String? = nil, sSECustomerAlgorithm: String? = nil, serverSideEncryption: ServerSideEncryption? = nil, requestCharged: RequestCharged? = nil) {
            self.copyObjectResult = copyObjectResult
            self.sSECustomerKeyMD5 = sSECustomerKeyMD5
            self.versionId = versionId
            self.copySourceVersionId = copySourceVersionId
            self.sSEKMSKeyId = sSEKMSKeyId
            self.expiration = expiration
            self.sSECustomerAlgorithm = sSECustomerAlgorithm
            self.serverSideEncryption = serverSideEncryption
            self.requestCharged = requestCharged
        }

        private enum CodingKeys: String, CodingKey {
            case copyObjectResult = "CopyObjectResult"
            case sSECustomerKeyMD5 = "x-amz-server-side-encryption-customer-key-MD5"
            case versionId = "x-amz-version-id"
            case copySourceVersionId = "x-amz-copy-source-version-id"
            case sSEKMSKeyId = "x-amz-server-side-encryption-aws-kms-key-id"
            case expiration = "x-amz-expiration"
            case sSECustomerAlgorithm = "x-amz-server-side-encryption-customer-algorithm"
            case serverSideEncryption = "x-amz-server-side-encryption"
            case requestCharged = "x-amz-request-charged"
        }
    }

}
