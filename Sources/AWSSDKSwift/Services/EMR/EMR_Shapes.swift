// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension EMR {
    //MARK: Enums

    public enum ActionOnFailure: String, CustomStringConvertible, Codable {
        case terminateJobFlow = "TERMINATE_JOB_FLOW"
        case terminateCluster = "TERMINATE_CLUSTER"
        case cancelAndWait = "CANCEL_AND_WAIT"
        case `continue` = "CONTINUE"
        public var description: String { return self.rawValue }
    }

    public enum AdjustmentType: String, CustomStringConvertible, Codable {
        case changeInCapacity = "CHANGE_IN_CAPACITY"
        case percentChangeInCapacity = "PERCENT_CHANGE_IN_CAPACITY"
        case exactCapacity = "EXACT_CAPACITY"
        public var description: String { return self.rawValue }
    }

    public enum AutoScalingPolicyState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case attaching = "ATTACHING"
        case attached = "ATTACHED"
        case detaching = "DETACHING"
        case detached = "DETACHED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum AutoScalingPolicyStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case userRequest = "USER_REQUEST"
        case provisionFailure = "PROVISION_FAILURE"
        case cleanupFailure = "CLEANUP_FAILURE"
        public var description: String { return self.rawValue }
    }

    public enum CancelStepsRequestStatus: String, CustomStringConvertible, Codable {
        case submitted = "SUBMITTED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum ClusterState: String, CustomStringConvertible, Codable {
        case starting = "STARTING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case waiting = "WAITING"
        case terminating = "TERMINATING"
        case terminated = "TERMINATED"
        case terminatedWithErrors = "TERMINATED_WITH_ERRORS"
        public var description: String { return self.rawValue }
    }

    public enum ClusterStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case internalError = "INTERNAL_ERROR"
        case validationError = "VALIDATION_ERROR"
        case instanceFailure = "INSTANCE_FAILURE"
        case instanceFleetTimeout = "INSTANCE_FLEET_TIMEOUT"
        case bootstrapFailure = "BOOTSTRAP_FAILURE"
        case userRequest = "USER_REQUEST"
        case stepFailure = "STEP_FAILURE"
        case allStepsCompleted = "ALL_STEPS_COMPLETED"
        public var description: String { return self.rawValue }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case greaterThanOrEqual = "GREATER_THAN_OR_EQUAL"
        case greaterThan = "GREATER_THAN"
        case lessThan = "LESS_THAN"
        case lessThanOrEqual = "LESS_THAN_OR_EQUAL"
        public var description: String { return self.rawValue }
    }

    public enum ComputeLimitsUnitType: String, CustomStringConvertible, Codable {
        case instancefleetunits = "InstanceFleetUnits"
        case instances = "Instances"
        case vcpu = "VCPU"
        public var description: String { return self.rawValue }
    }

    public enum ExecutionEngineType: String, CustomStringConvertible, Codable {
        case emr = "EMR"
        public var description: String { return self.rawValue }
    }

    public enum InstanceCollectionType: String, CustomStringConvertible, Codable {
        case instanceFleet = "INSTANCE_FLEET"
        case instanceGroup = "INSTANCE_GROUP"
        public var description: String { return self.rawValue }
    }

    public enum InstanceFleetState: String, CustomStringConvertible, Codable {
        case provisioning = "PROVISIONING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case resizing = "RESIZING"
        case suspended = "SUSPENDED"
        case terminating = "TERMINATING"
        case terminated = "TERMINATED"
        public var description: String { return self.rawValue }
    }

    public enum InstanceFleetStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case internalError = "INTERNAL_ERROR"
        case validationError = "VALIDATION_ERROR"
        case instanceFailure = "INSTANCE_FAILURE"
        case clusterTerminated = "CLUSTER_TERMINATED"
        public var description: String { return self.rawValue }
    }

    public enum InstanceFleetType: String, CustomStringConvertible, Codable {
        case master = "MASTER"
        case core = "CORE"
        case task = "TASK"
        public var description: String { return self.rawValue }
    }

    public enum InstanceGroupState: String, CustomStringConvertible, Codable {
        case provisioning = "PROVISIONING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case reconfiguring = "RECONFIGURING"
        case resizing = "RESIZING"
        case suspended = "SUSPENDED"
        case terminating = "TERMINATING"
        case terminated = "TERMINATED"
        case arrested = "ARRESTED"
        case shuttingDown = "SHUTTING_DOWN"
        case ended = "ENDED"
        public var description: String { return self.rawValue }
    }

    public enum InstanceGroupStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case internalError = "INTERNAL_ERROR"
        case validationError = "VALIDATION_ERROR"
        case instanceFailure = "INSTANCE_FAILURE"
        case clusterTerminated = "CLUSTER_TERMINATED"
        public var description: String { return self.rawValue }
    }

    public enum InstanceGroupType: String, CustomStringConvertible, Codable {
        case master = "MASTER"
        case core = "CORE"
        case task = "TASK"
        public var description: String { return self.rawValue }
    }

    public enum InstanceRoleType: String, CustomStringConvertible, Codable {
        case master = "MASTER"
        case core = "CORE"
        case task = "TASK"
        public var description: String { return self.rawValue }
    }

    public enum InstanceState: String, CustomStringConvertible, Codable {
        case awaitingFulfillment = "AWAITING_FULFILLMENT"
        case provisioning = "PROVISIONING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case terminated = "TERMINATED"
        public var description: String { return self.rawValue }
    }

    public enum InstanceStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case internalError = "INTERNAL_ERROR"
        case validationError = "VALIDATION_ERROR"
        case instanceFailure = "INSTANCE_FAILURE"
        case bootstrapFailure = "BOOTSTRAP_FAILURE"
        case clusterTerminated = "CLUSTER_TERMINATED"
        public var description: String { return self.rawValue }
    }

    public enum JobFlowExecutionState: String, CustomStringConvertible, Codable {
        case starting = "STARTING"
        case bootstrapping = "BOOTSTRAPPING"
        case running = "RUNNING"
        case waiting = "WAITING"
        case shuttingDown = "SHUTTING_DOWN"
        case terminated = "TERMINATED"
        case completed = "COMPLETED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum MarketType: String, CustomStringConvertible, Codable {
        case onDemand = "ON_DEMAND"
        case spot = "SPOT"
        public var description: String { return self.rawValue }
    }

    public enum NotebookExecutionStatus: String, CustomStringConvertible, Codable {
        case startPending = "START_PENDING"
        case starting = "STARTING"
        case running = "RUNNING"
        case finishing = "FINISHING"
        case finished = "FINISHED"
        case failing = "FAILING"
        case failed = "FAILED"
        case stopPending = "STOP_PENDING"
        case stopping = "STOPPING"
        case stopped = "STOPPED"
        public var description: String { return self.rawValue }
    }

    public enum OnDemandProvisioningAllocationStrategy: String, CustomStringConvertible, Codable {
        case lowestPrice = "lowest-price"
        public var description: String { return self.rawValue }
    }

    public enum RepoUpgradeOnBoot: String, CustomStringConvertible, Codable {
        case security = "SECURITY"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum ScaleDownBehavior: String, CustomStringConvertible, Codable {
        case terminateAtInstanceHour = "TERMINATE_AT_INSTANCE_HOUR"
        case terminateAtTaskCompletion = "TERMINATE_AT_TASK_COMPLETION"
        public var description: String { return self.rawValue }
    }

    public enum SpotProvisioningAllocationStrategy: String, CustomStringConvertible, Codable {
        case capacityOptimized = "capacity-optimized"
        public var description: String { return self.rawValue }
    }

    public enum SpotProvisioningTimeoutAction: String, CustomStringConvertible, Codable {
        case switchToOnDemand = "SWITCH_TO_ON_DEMAND"
        case terminateCluster = "TERMINATE_CLUSTER"
        public var description: String { return self.rawValue }
    }

    public enum Statistic: String, CustomStringConvertible, Codable {
        case sampleCount = "SAMPLE_COUNT"
        case average = "AVERAGE"
        case sum = "SUM"
        case minimum = "MINIMUM"
        case maximum = "MAXIMUM"
        public var description: String { return self.rawValue }
    }

    public enum StepCancellationOption: String, CustomStringConvertible, Codable {
        case sendInterrupt = "SEND_INTERRUPT"
        case terminateProcess = "TERMINATE_PROCESS"
        public var description: String { return self.rawValue }
    }

    public enum StepExecutionState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case running = "RUNNING"
        case `continue` = "CONTINUE"
        case completed = "COMPLETED"
        case cancelled = "CANCELLED"
        case failed = "FAILED"
        case interrupted = "INTERRUPTED"
        public var description: String { return self.rawValue }
    }

    public enum StepState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case cancelPending = "CANCEL_PENDING"
        case running = "RUNNING"
        case completed = "COMPLETED"
        case cancelled = "CANCELLED"
        case failed = "FAILED"
        case interrupted = "INTERRUPTED"
        public var description: String { return self.rawValue }
    }

    public enum StepStateChangeReasonCode: String, CustomStringConvertible, Codable {
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum Unit: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case seconds = "SECONDS"
        case microSeconds = "MICRO_SECONDS"
        case milliSeconds = "MILLI_SECONDS"
        case bytes = "BYTES"
        case kiloBytes = "KILO_BYTES"
        case megaBytes = "MEGA_BYTES"
        case gigaBytes = "GIGA_BYTES"
        case teraBytes = "TERA_BYTES"
        case bits = "BITS"
        case kiloBits = "KILO_BITS"
        case megaBits = "MEGA_BITS"
        case gigaBits = "GIGA_BITS"
        case teraBits = "TERA_BITS"
        case percent = "PERCENT"
        case count = "COUNT"
        case bytesPerSecond = "BYTES_PER_SECOND"
        case kiloBytesPerSecond = "KILO_BYTES_PER_SECOND"
        case megaBytesPerSecond = "MEGA_BYTES_PER_SECOND"
        case gigaBytesPerSecond = "GIGA_BYTES_PER_SECOND"
        case teraBytesPerSecond = "TERA_BYTES_PER_SECOND"
        case bitsPerSecond = "BITS_PER_SECOND"
        case kiloBitsPerSecond = "KILO_BITS_PER_SECOND"
        case megaBitsPerSecond = "MEGA_BITS_PER_SECOND"
        case gigaBitsPerSecond = "GIGA_BITS_PER_SECOND"
        case teraBitsPerSecond = "TERA_BITS_PER_SECOND"
        case countPerSecond = "COUNT_PER_SECOND"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AddInstanceFleetInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceFleet", required: true, type: .structure)
        ]

        /// The unique identifier of the cluster.
        public let clusterId: String
        /// Specifies the configuration of the instance fleet.
        public let instanceFleet: InstanceFleetConfig

        public init(clusterId: String, instanceFleet: InstanceFleetConfig) {
            self.clusterId = clusterId
            self.instanceFleet = instanceFleet
        }

        public func validate(name: String) throws {
            try validate(self.clusterId, name:"clusterId", parent: name, max: 256)
            try validate(self.clusterId, name:"clusterId", parent: name, min: 0)
            try validate(self.clusterId, name:"clusterId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.instanceFleet.validate(name: "\(name).instanceFleet")
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceFleet = "InstanceFleet"
        }
    }

    public struct AddInstanceFleetOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterArn", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceFleetId", required: false, type: .string)
        ]

        /// The Amazon Resource Name of the cluster.
        public let clusterArn: String?
        /// The unique identifier of the cluster.
        public let clusterId: String?
        /// The unique identifier of the instance fleet.
        public let instanceFleetId: String?

        public init(clusterArn: String? = nil, clusterId: String? = nil, instanceFleetId: String? = nil) {
            self.clusterArn = clusterArn
            self.clusterId = clusterId
            self.instanceFleetId = instanceFleetId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterArn = "ClusterArn"
            case clusterId = "ClusterId"
            case instanceFleetId = "InstanceFleetId"
        }
    }

    public struct AddInstanceGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceGroups", required: true, type: .list), 
            AWSShapeMember(label: "JobFlowId", required: true, type: .string)
        ]

        /// Instance groups to add.
        public let instanceGroups: [InstanceGroupConfig]
        /// Job flow in which to add the instance groups.
        public let jobFlowId: String

        public init(instanceGroups: [InstanceGroupConfig], jobFlowId: String) {
            self.instanceGroups = instanceGroups
            self.jobFlowId = jobFlowId
        }

        public func validate(name: String) throws {
            try self.instanceGroups.forEach {
                try $0.validate(name: "\(name).instanceGroups[]")
            }
            try validate(self.jobFlowId, name:"jobFlowId", parent: name, max: 256)
            try validate(self.jobFlowId, name:"jobFlowId", parent: name, min: 0)
            try validate(self.jobFlowId, name:"jobFlowId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceGroups = "InstanceGroups"
            case jobFlowId = "JobFlowId"
        }
    }

    public struct AddInstanceGroupsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterArn", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "JobFlowId", required: false, type: .string)
        ]

        /// The Amazon Resource Name of the cluster.
        public let clusterArn: String?
        /// Instance group IDs of the newly created instance groups.
        public let instanceGroupIds: [String]?
        /// The job flow ID in which the instance groups are added.
        public let jobFlowId: String?

        public init(clusterArn: String? = nil, instanceGroupIds: [String]? = nil, jobFlowId: String? = nil) {
            self.clusterArn = clusterArn
            self.instanceGroupIds = instanceGroupIds
            self.jobFlowId = jobFlowId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterArn = "ClusterArn"
            case instanceGroupIds = "InstanceGroupIds"
            case jobFlowId = "JobFlowId"
        }
    }

    public struct AddJobFlowStepsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowId", required: true, type: .string), 
            AWSShapeMember(label: "Steps", required: true, type: .list)
        ]

        /// A string that uniquely identifies the job flow. This identifier is returned by RunJobFlow and can also be obtained from ListClusters. 
        public let jobFlowId: String
        ///  A list of StepConfig to be executed by the job flow. 
        public let steps: [StepConfig]

        public init(jobFlowId: String, steps: [StepConfig]) {
            self.jobFlowId = jobFlowId
            self.steps = steps
        }

        public func validate(name: String) throws {
            try validate(self.jobFlowId, name:"jobFlowId", parent: name, max: 256)
            try validate(self.jobFlowId, name:"jobFlowId", parent: name, min: 0)
            try validate(self.jobFlowId, name:"jobFlowId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.steps.forEach {
                try $0.validate(name: "\(name).steps[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowId = "JobFlowId"
            case steps = "Steps"
        }
    }

    public struct AddJobFlowStepsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StepIds", required: false, type: .list)
        ]

        /// The identifiers of the list of steps added to the job flow.
        public let stepIds: [String]?

        public init(stepIds: [String]? = nil) {
            self.stepIds = stepIds
        }

        private enum CodingKeys: String, CodingKey {
            case stepIds = "StepIds"
        }
    }

    public struct AddTagsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]

        /// The Amazon EMR resource identifier to which tags will be added. This value must be a cluster identifier.
        public let resourceId: String
        /// A list of tags to associate with a cluster and propagate to EC2 instances. Tags are user-defined key/value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
        public let tags: [Tag]

        public init(resourceId: String, tags: [Tag]) {
            self.resourceId = resourceId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tags = "Tags"
        }
    }

    public struct AddTagsOutput: AWSShape {


        public init() {
        }

    }

    public struct Application: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalInfo", required: false, type: .map), 
            AWSShapeMember(label: "Args", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]

        /// This option is for advanced users only. This is meta information about third-party applications that third-party vendors use for testing purposes.
        public let additionalInfo: [String: String]?
        /// Arguments for Amazon EMR to pass to the application.
        public let args: [String]?
        /// The name of the application.
        public let name: String?
        /// The version of the application.
        public let version: String?

        public init(additionalInfo: [String: String]? = nil, args: [String]? = nil, name: String? = nil, version: String? = nil) {
            self.additionalInfo = additionalInfo
            self.args = args
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case additionalInfo = "AdditionalInfo"
            case args = "Args"
            case name = "Name"
            case version = "Version"
        }
    }

    public struct AutoScalingPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Constraints", required: true, type: .structure), 
            AWSShapeMember(label: "Rules", required: true, type: .list)
        ]

        /// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
        public let constraints: ScalingConstraints
        /// The scale-in and scale-out rules that comprise the automatic scaling policy.
        public let rules: [ScalingRule]

        public init(constraints: ScalingConstraints, rules: [ScalingRule]) {
            self.constraints = constraints
            self.rules = rules
        }

        public func validate(name: String) throws {
            try self.rules.forEach {
                try $0.validate(name: "\(name).rules[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case constraints = "Constraints"
            case rules = "Rules"
        }
    }

    public struct AutoScalingPolicyDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Constraints", required: false, type: .structure), 
            AWSShapeMember(label: "Rules", required: false, type: .list), 
            AWSShapeMember(label: "Status", required: false, type: .structure)
        ]

        /// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits.
        public let constraints: ScalingConstraints?
        /// The scale-in and scale-out rules that comprise the automatic scaling policy.
        public let rules: [ScalingRule]?
        /// The status of an automatic scaling policy. 
        public let status: AutoScalingPolicyStatus?

        public init(constraints: ScalingConstraints? = nil, rules: [ScalingRule]? = nil, status: AutoScalingPolicyStatus? = nil) {
            self.constraints = constraints
            self.rules = rules
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case constraints = "Constraints"
            case rules = "Rules"
            case status = "Status"
        }
    }

    public struct AutoScalingPolicyStateChangeReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]

        /// The code indicating the reason for the change in status.USER_REQUEST indicates that the scaling policy status was changed by a user. PROVISION_FAILURE indicates that the status change was because the policy failed to provision. CLEANUP_FAILURE indicates an error.
        public let code: AutoScalingPolicyStateChangeReasonCode?
        /// A friendly, more verbose message that accompanies an automatic scaling policy state change.
        public let message: String?

        public init(code: AutoScalingPolicyStateChangeReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public struct AutoScalingPolicyStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure)
        ]

        /// Indicates the status of the automatic scaling policy.
        public let state: AutoScalingPolicyState?
        /// The reason for a change in status.
        public let stateChangeReason: AutoScalingPolicyStateChangeReason?

        public init(state: AutoScalingPolicyState? = nil, stateChangeReason: AutoScalingPolicyStateChangeReason? = nil) {
            self.state = state
            self.stateChangeReason = stateChangeReason
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case stateChangeReason = "StateChangeReason"
        }
    }

    public struct BlockPublicAccessConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockPublicSecurityGroupRules", required: true, type: .boolean), 
            AWSShapeMember(label: "PermittedPublicSecurityGroupRuleRanges", required: false, type: .list)
        ]

        /// Indicates whether EMR block public access is enabled (true) or disabled (false). By default, the value is false for accounts that have created EMR clusters before July 2019. For accounts created after this, the default is true.
        public let blockPublicSecurityGroupRules: Bool
        /// Specifies ports and port ranges that are permitted to have security group rules that allow inbound traffic from all public sources. For example, if Port 23 (Telnet) is specified for PermittedPublicSecurityGroupRuleRanges, Amazon EMR allows cluster creation if a security group associated with the cluster has a rule that allows inbound traffic on Port 23 from IPv4 0.0.0.0/0 or IPv6 port ::/0 as the source. By default, Port 22, which is used for SSH access to the cluster EC2 instances, is in the list of PermittedPublicSecurityGroupRuleRanges.
        public let permittedPublicSecurityGroupRuleRanges: [PortRange]?

        public init(blockPublicSecurityGroupRules: Bool, permittedPublicSecurityGroupRuleRanges: [PortRange]? = nil) {
            self.blockPublicSecurityGroupRules = blockPublicSecurityGroupRules
            self.permittedPublicSecurityGroupRuleRanges = permittedPublicSecurityGroupRuleRanges
        }

        public func validate(name: String) throws {
            try self.permittedPublicSecurityGroupRuleRanges?.forEach {
                try $0.validate(name: "\(name).permittedPublicSecurityGroupRuleRanges[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case blockPublicSecurityGroupRules = "BlockPublicSecurityGroupRules"
            case permittedPublicSecurityGroupRuleRanges = "PermittedPublicSecurityGroupRuleRanges"
        }
    }

    public struct BlockPublicAccessConfigurationMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedByArn", required: true, type: .string), 
            AWSShapeMember(label: "CreationDateTime", required: true, type: .timestamp)
        ]

        /// The Amazon Resource Name that created or last modified the configuration.
        public let createdByArn: String
        /// The date and time that the configuration was created.
        public let creationDateTime: TimeStamp

        public init(createdByArn: String, creationDateTime: TimeStamp) {
            self.createdByArn = createdByArn
            self.creationDateTime = creationDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case createdByArn = "CreatedByArn"
            case creationDateTime = "CreationDateTime"
        }
    }

    public struct BootstrapActionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ScriptBootstrapAction", required: true, type: .structure)
        ]

        /// The name of the bootstrap action.
        public let name: String
        /// The script run by the bootstrap action.
        public let scriptBootstrapAction: ScriptBootstrapActionConfig

        public init(name: String, scriptBootstrapAction: ScriptBootstrapActionConfig) {
            self.name = name
            self.scriptBootstrapAction = scriptBootstrapAction
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 0)
            try validate(self.name, name:"name", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.scriptBootstrapAction.validate(name: "\(name).scriptBootstrapAction")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case scriptBootstrapAction = "ScriptBootstrapAction"
        }
    }

    public struct BootstrapActionDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BootstrapActionConfig", required: false, type: .structure)
        ]

        /// A description of the bootstrap action.
        public let bootstrapActionConfig: BootstrapActionConfig?

        public init(bootstrapActionConfig: BootstrapActionConfig? = nil) {
            self.bootstrapActionConfig = bootstrapActionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case bootstrapActionConfig = "BootstrapActionConfig"
        }
    }

    public struct CancelStepsInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "StepId", required: false, type: .string)
        ]

        /// The reason for the failure if the CancelSteps request fails.
        public let reason: String?
        /// The status of a CancelSteps Request. The value may be SUBMITTED or FAILED.
        public let status: CancelStepsRequestStatus?
        /// The encrypted StepId of a step.
        public let stepId: String?

        public init(reason: String? = nil, status: CancelStepsRequestStatus? = nil, stepId: String? = nil) {
            self.reason = reason
            self.status = status
            self.stepId = stepId
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case status = "Status"
            case stepId = "StepId"
        }
    }

    public struct CancelStepsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "StepCancellationOption", required: false, type: .enum), 
            AWSShapeMember(label: "StepIds", required: true, type: .list)
        ]

        /// The ClusterID for which specified steps will be canceled. Use RunJobFlow and ListClusters to get ClusterIDs. 
        public let clusterId: String
        /// The option to choose for cancelling RUNNING steps. By default, the value is SEND_INTERRUPT.
        public let stepCancellationOption: StepCancellationOption?
        /// The list of StepIDs to cancel. Use ListSteps to get steps and their states for the specified cluster.
        public let stepIds: [String]

        public init(clusterId: String, stepCancellationOption: StepCancellationOption? = nil, stepIds: [String]) {
            self.clusterId = clusterId
            self.stepCancellationOption = stepCancellationOption
            self.stepIds = stepIds
        }

        public func validate(name: String) throws {
            try validate(self.clusterId, name:"clusterId", parent: name, max: 256)
            try validate(self.clusterId, name:"clusterId", parent: name, min: 0)
            try validate(self.clusterId, name:"clusterId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.stepIds.forEach {
                try validate($0, name: "stepIds[]", parent: name, max: 256)
                try validate($0, name: "stepIds[]", parent: name, min: 0)
                try validate($0, name: "stepIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case stepCancellationOption = "StepCancellationOption"
            case stepIds = "StepIds"
        }
    }

    public struct CancelStepsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CancelStepsInfoList", required: false, type: .list)
        ]

        /// A list of CancelStepsInfo, which shows the status of specified cancel requests for each StepID specified.
        public let cancelStepsInfoList: [CancelStepsInfo]?

        public init(cancelStepsInfoList: [CancelStepsInfo]? = nil) {
            self.cancelStepsInfoList = cancelStepsInfoList
        }

        private enum CodingKeys: String, CodingKey {
            case cancelStepsInfoList = "CancelStepsInfoList"
        }
    }

    public struct CloudWatchAlarmDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComparisonOperator", required: true, type: .enum), 
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "EvaluationPeriods", required: false, type: .integer), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "Period", required: true, type: .integer), 
            AWSShapeMember(label: "Statistic", required: false, type: .enum), 
            AWSShapeMember(label: "Threshold", required: true, type: .double), 
            AWSShapeMember(label: "Unit", required: false, type: .enum)
        ]

        /// Determines how the metric specified by MetricName is compared to the value specified by Threshold.
        public let comparisonOperator: ComparisonOperator
        /// A CloudWatch metric dimension.
        public let dimensions: [MetricDimension]?
        /// The number of periods, in five-minute increments, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is 1.
        public let evaluationPeriods: Int?
        /// The name of the CloudWatch metric that is watched to determine an alarm condition.
        public let metricName: String
        /// The namespace for the CloudWatch metric. The default is AWS/ElasticMapReduce.
        public let namespace: String?
        /// The period, in seconds, over which the statistic is applied. EMR CloudWatch metrics are emitted every five minutes (300 seconds), so if an EMR CloudWatch metric is specified, specify 300.
        public let period: Int
        /// The statistic to apply to the metric associated with the alarm. The default is AVERAGE.
        public let statistic: Statistic?
        /// The value against which the specified statistic is compared.
        public let threshold: Double
        /// The unit of measure associated with the CloudWatch metric being watched. The value specified for Unit must correspond to the units specified in the CloudWatch metric.
        public let unit: Unit?

        public init(comparisonOperator: ComparisonOperator, dimensions: [MetricDimension]? = nil, evaluationPeriods: Int? = nil, metricName: String, namespace: String? = nil, period: Int, statistic: Statistic? = nil, threshold: Double, unit: Unit? = nil) {
            self.comparisonOperator = comparisonOperator
            self.dimensions = dimensions
            self.evaluationPeriods = evaluationPeriods
            self.metricName = metricName
            self.namespace = namespace
            self.period = period
            self.statistic = statistic
            self.threshold = threshold
            self.unit = unit
        }

        public func validate(name: String) throws {
            try validate(self.threshold, name:"threshold", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case comparisonOperator = "ComparisonOperator"
            case dimensions = "Dimensions"
            case evaluationPeriods = "EvaluationPeriods"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case period = "Period"
            case statistic = "Statistic"
            case threshold = "Threshold"
            case unit = "Unit"
        }
    }

    public struct Cluster: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Applications", required: false, type: .list), 
            AWSShapeMember(label: "AutoScalingRole", required: false, type: .string), 
            AWSShapeMember(label: "AutoTerminate", required: false, type: .boolean), 
            AWSShapeMember(label: "ClusterArn", required: false, type: .string), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "CustomAmiId", required: false, type: .string), 
            AWSShapeMember(label: "EbsRootVolumeSize", required: false, type: .integer), 
            AWSShapeMember(label: "Ec2InstanceAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "InstanceCollectionType", required: false, type: .enum), 
            AWSShapeMember(label: "KerberosAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "LogEncryptionKmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "LogUri", required: false, type: .string), 
            AWSShapeMember(label: "MasterPublicDnsName", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "NormalizedInstanceHours", required: false, type: .integer), 
            AWSShapeMember(label: "OutpostArn", required: false, type: .string), 
            AWSShapeMember(label: "ReleaseLabel", required: false, type: .string), 
            AWSShapeMember(label: "RepoUpgradeOnBoot", required: false, type: .enum), 
            AWSShapeMember(label: "RequestedAmiVersion", required: false, type: .string), 
            AWSShapeMember(label: "RunningAmiVersion", required: false, type: .string), 
            AWSShapeMember(label: "ScaleDownBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "SecurityConfiguration", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "StepConcurrencyLevel", required: false, type: .integer), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "TerminationProtected", required: false, type: .boolean), 
            AWSShapeMember(label: "VisibleToAllUsers", required: false, type: .boolean)
        ]

        /// The applications installed on this cluster.
        public let applications: [Application]?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        public let autoScalingRole: String?
        /// Specifies whether the cluster should terminate after completing all steps.
        public let autoTerminate: Bool?
        /// The Amazon Resource Name of the cluster.
        public let clusterArn: String?
        /// Applies only to Amazon EMR releases 4.x and later. The list of Configurations supplied to the EMR cluster.
        public let configurations: [Configuration]?
        /// Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
        public let customAmiId: String?
        /// The size, in GiB, of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
        public let ebsRootVolumeSize: Int?
        /// Provides information about the EC2 instances in a cluster grouped by category. For example, key name, subnet ID, IAM instance profile, and so on.
        public let ec2InstanceAttributes: Ec2InstanceAttributes?
        /// The unique identifier for the cluster.
        public let id: String?
        ///  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.  The instance group configuration of the cluster. A value of INSTANCE_GROUP indicates a uniform instance group configuration. A value of INSTANCE_FLEET indicates an instance fleets configuration.
        public let instanceCollectionType: InstanceCollectionType?
        /// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see Use Kerberos Authentication in the EMR Management Guide.
        public let kerberosAttributes: KerberosAttributes?
        ///  The AWS KMS customer master key (CMK) used for encrypting log files. This attribute is only available with EMR version 5.30.0 and later, excluding EMR 6.0.0. 
        public let logEncryptionKmsKeyId: String?
        /// The path to the Amazon S3 location where logs for this cluster are stored.
        public let logUri: String?
        /// The DNS name of the master node. If the cluster is on a private subnet, this is the private DNS name. On a public subnet, this is the public DNS name.
        public let masterPublicDnsName: String?
        /// The name of the cluster.
        public let name: String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public let normalizedInstanceHours: Int?
        ///  The Amazon Resource Name (ARN) of the Outpost where the cluster is launched. 
        public let outpostArn: String?
        /// The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form emr-x.x.x, where x.x.x is an Amazon EMR release version such as emr-5.14.0. For more information about Amazon EMR release versions and included application versions and features, see https://docs.aws.amazon.com/emr/latest/ReleaseGuide/. The release label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use AmiVersion.
        public let releaseLabel: String?
        /// Applies only when CustomAmiID is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI.
        public let repoUpgradeOnBoot: RepoUpgradeOnBoot?
        /// The AMI version requested for this cluster.
        public let requestedAmiVersion: String?
        /// The AMI version running on this cluster.
        public let runningAmiVersion: String?
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION is available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public let scaleDownBehavior: ScaleDownBehavior?
        /// The name of the security configuration applied to the cluster.
        public let securityConfiguration: String?
        /// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
        public let serviceRole: String?
        /// The current status details about the cluster.
        public let status: ClusterStatus?
        /// Specifies the number of steps that can be executed concurrently.
        public let stepConcurrencyLevel: Int?
        /// A list of tags associated with a cluster.
        public let tags: [Tag]?
        /// Indicates whether Amazon EMR will lock the cluster to prevent the EC2 instances from being terminated by an API call or user intervention, or in the event of a cluster error.
        public let terminationProtected: Bool?
        /// Indicates whether the cluster is visible to all IAM users of the AWS account associated with the cluster. The default value, true, indicates that all IAM users in the AWS account can perform cluster actions if they have the proper IAM policy permissions. If this value is false, only the IAM user that created the cluster can perform actions. This value can be changed on a running cluster by using the SetVisibleToAllUsers action. You can override the default value of true when you create a cluster by using the VisibleToAllUsers parameter of the RunJobFlow action.
        public let visibleToAllUsers: Bool?

        public init(applications: [Application]? = nil, autoScalingRole: String? = nil, autoTerminate: Bool? = nil, clusterArn: String? = nil, configurations: [Configuration]? = nil, customAmiId: String? = nil, ebsRootVolumeSize: Int? = nil, ec2InstanceAttributes: Ec2InstanceAttributes? = nil, id: String? = nil, instanceCollectionType: InstanceCollectionType? = nil, kerberosAttributes: KerberosAttributes? = nil, logEncryptionKmsKeyId: String? = nil, logUri: String? = nil, masterPublicDnsName: String? = nil, name: String? = nil, normalizedInstanceHours: Int? = nil, outpostArn: String? = nil, releaseLabel: String? = nil, repoUpgradeOnBoot: RepoUpgradeOnBoot? = nil, requestedAmiVersion: String? = nil, runningAmiVersion: String? = nil, scaleDownBehavior: ScaleDownBehavior? = nil, securityConfiguration: String? = nil, serviceRole: String? = nil, status: ClusterStatus? = nil, stepConcurrencyLevel: Int? = nil, tags: [Tag]? = nil, terminationProtected: Bool? = nil, visibleToAllUsers: Bool? = nil) {
            self.applications = applications
            self.autoScalingRole = autoScalingRole
            self.autoTerminate = autoTerminate
            self.clusterArn = clusterArn
            self.configurations = configurations
            self.customAmiId = customAmiId
            self.ebsRootVolumeSize = ebsRootVolumeSize
            self.ec2InstanceAttributes = ec2InstanceAttributes
            self.id = id
            self.instanceCollectionType = instanceCollectionType
            self.kerberosAttributes = kerberosAttributes
            self.logEncryptionKmsKeyId = logEncryptionKmsKeyId
            self.logUri = logUri
            self.masterPublicDnsName = masterPublicDnsName
            self.name = name
            self.normalizedInstanceHours = normalizedInstanceHours
            self.outpostArn = outpostArn
            self.releaseLabel = releaseLabel
            self.repoUpgradeOnBoot = repoUpgradeOnBoot
            self.requestedAmiVersion = requestedAmiVersion
            self.runningAmiVersion = runningAmiVersion
            self.scaleDownBehavior = scaleDownBehavior
            self.securityConfiguration = securityConfiguration
            self.serviceRole = serviceRole
            self.status = status
            self.stepConcurrencyLevel = stepConcurrencyLevel
            self.tags = tags
            self.terminationProtected = terminationProtected
            self.visibleToAllUsers = visibleToAllUsers
        }

        private enum CodingKeys: String, CodingKey {
            case applications = "Applications"
            case autoScalingRole = "AutoScalingRole"
            case autoTerminate = "AutoTerminate"
            case clusterArn = "ClusterArn"
            case configurations = "Configurations"
            case customAmiId = "CustomAmiId"
            case ebsRootVolumeSize = "EbsRootVolumeSize"
            case ec2InstanceAttributes = "Ec2InstanceAttributes"
            case id = "Id"
            case instanceCollectionType = "InstanceCollectionType"
            case kerberosAttributes = "KerberosAttributes"
            case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
            case logUri = "LogUri"
            case masterPublicDnsName = "MasterPublicDnsName"
            case name = "Name"
            case normalizedInstanceHours = "NormalizedInstanceHours"
            case outpostArn = "OutpostArn"
            case releaseLabel = "ReleaseLabel"
            case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
            case requestedAmiVersion = "RequestedAmiVersion"
            case runningAmiVersion = "RunningAmiVersion"
            case scaleDownBehavior = "ScaleDownBehavior"
            case securityConfiguration = "SecurityConfiguration"
            case serviceRole = "ServiceRole"
            case status = "Status"
            case stepConcurrencyLevel = "StepConcurrencyLevel"
            case tags = "Tags"
            case terminationProtected = "TerminationProtected"
            case visibleToAllUsers = "VisibleToAllUsers"
        }
    }

    public struct ClusterStateChangeReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]

        /// The programmatic code for the state change reason.
        public let code: ClusterStateChangeReasonCode?
        /// The descriptive message for the state change reason.
        public let message: String?

        public init(code: ClusterStateChangeReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public struct ClusterStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure)
        ]

        /// The current state of the cluster.
        public let state: ClusterState?
        /// The reason for the cluster status change.
        public let stateChangeReason: ClusterStateChangeReason?
        /// A timeline that represents the status of a cluster over the lifetime of the cluster.
        public let timeline: ClusterTimeline?

        public init(state: ClusterState? = nil, stateChangeReason: ClusterStateChangeReason? = nil, timeline: ClusterTimeline? = nil) {
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case stateChangeReason = "StateChangeReason"
            case timeline = "Timeline"
        }
    }

    public struct ClusterSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterArn", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "NormalizedInstanceHours", required: false, type: .integer), 
            AWSShapeMember(label: "OutpostArn", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure)
        ]

        /// The Amazon Resource Name of the cluster.
        public let clusterArn: String?
        /// The unique identifier for the cluster.
        public let id: String?
        /// The name of the cluster.
        public let name: String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public let normalizedInstanceHours: Int?
        ///  The Amazon Resource Name (ARN) of the Outpost where the cluster is launched. 
        public let outpostArn: String?
        /// The details about the current status of the cluster.
        public let status: ClusterStatus?

        public init(clusterArn: String? = nil, id: String? = nil, name: String? = nil, normalizedInstanceHours: Int? = nil, outpostArn: String? = nil, status: ClusterStatus? = nil) {
            self.clusterArn = clusterArn
            self.id = id
            self.name = name
            self.normalizedInstanceHours = normalizedInstanceHours
            self.outpostArn = outpostArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case clusterArn = "ClusterArn"
            case id = "Id"
            case name = "Name"
            case normalizedInstanceHours = "NormalizedInstanceHours"
            case outpostArn = "OutpostArn"
            case status = "Status"
        }
    }

    public struct ClusterTimeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp)
        ]

        /// The creation date and time of the cluster.
        public let creationDateTime: TimeStamp?
        /// The date and time when the cluster was terminated.
        public let endDateTime: TimeStamp?
        /// The date and time when the cluster was ready to execute steps.
        public let readyDateTime: TimeStamp?

        public init(creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil, readyDateTime: TimeStamp? = nil) {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
            case readyDateTime = "ReadyDateTime"
        }
    }

    public struct Command: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Args", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ScriptPath", required: false, type: .string)
        ]

        /// Arguments for Amazon EMR to pass to the command for execution.
        public let args: [String]?
        /// The name of the command.
        public let name: String?
        /// The Amazon S3 location of the command script.
        public let scriptPath: String?

        public init(args: [String]? = nil, name: String? = nil, scriptPath: String? = nil) {
            self.args = args
            self.name = name
            self.scriptPath = scriptPath
        }

        private enum CodingKeys: String, CodingKey {
            case args = "Args"
            case name = "Name"
            case scriptPath = "ScriptPath"
        }
    }

    public struct ComputeLimits: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaximumCapacityUnits", required: true, type: .integer), 
            AWSShapeMember(label: "MaximumCoreCapacityUnits", required: false, type: .integer), 
            AWSShapeMember(label: "MaximumOnDemandCapacityUnits", required: false, type: .integer), 
            AWSShapeMember(label: "MinimumCapacityUnits", required: true, type: .integer), 
            AWSShapeMember(label: "UnitType", required: true, type: .enum)
        ]

        ///  The upper boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration. 
        public let maximumCapacityUnits: Int
        ///  The upper boundary of EC2 units for core node type in a cluster. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The core units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between core and task nodes. 
        public let maximumCoreCapacityUnits: Int?
        ///  The upper boundary of On-Demand EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The On-Demand units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between On-Demand and Spot instances. 
        public let maximumOnDemandCapacityUnits: Int?
        ///  The lower boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration. 
        public let minimumCapacityUnits: Int
        ///  The unit type used for specifying a managed scaling policy. 
        public let unitType: ComputeLimitsUnitType

        public init(maximumCapacityUnits: Int, maximumCoreCapacityUnits: Int? = nil, maximumOnDemandCapacityUnits: Int? = nil, minimumCapacityUnits: Int, unitType: ComputeLimitsUnitType) {
            self.maximumCapacityUnits = maximumCapacityUnits
            self.maximumCoreCapacityUnits = maximumCoreCapacityUnits
            self.maximumOnDemandCapacityUnits = maximumOnDemandCapacityUnits
            self.minimumCapacityUnits = minimumCapacityUnits
            self.unitType = unitType
        }

        private enum CodingKeys: String, CodingKey {
            case maximumCapacityUnits = "MaximumCapacityUnits"
            case maximumCoreCapacityUnits = "MaximumCoreCapacityUnits"
            case maximumOnDemandCapacityUnits = "MaximumOnDemandCapacityUnits"
            case minimumCapacityUnits = "MinimumCapacityUnits"
            case unitType = "UnitType"
        }
    }

    public class Configuration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Classification", required: false, type: .string), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "Properties", required: false, type: .map)
        ]

        /// The classification within a configuration.
        public let classification: String?
        /// A list of additional configurations to apply within a configuration object.
        public let configurations: [Configuration]?
        /// A set of properties specified within a configuration classification.
        public let properties: [String: String]?

        public init(classification: String? = nil, configurations: [Configuration]? = nil, properties: [String: String]? = nil) {
            self.classification = classification
            self.configurations = configurations
            self.properties = properties
        }

        private enum CodingKeys: String, CodingKey {
            case classification = "Classification"
            case configurations = "Configurations"
            case properties = "Properties"
        }
    }

    public struct CreateSecurityConfigurationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SecurityConfiguration", required: true, type: .string)
        ]

        /// The name of the security configuration.
        public let name: String
        /// The security configuration details in JSON format. For JSON parameters and examples, see Use Security Configurations to Set Up Cluster Security in the Amazon EMR Management Guide.
        public let securityConfiguration: String

        public init(name: String, securityConfiguration: String) {
            self.name = name
            self.securityConfiguration = securityConfiguration
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 10280)
            try validate(self.name, name:"name", parent: name, min: 0)
            try validate(self.name, name:"name", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case securityConfiguration = "SecurityConfiguration"
        }
    }

    public struct CreateSecurityConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]

        /// The date and time the security configuration was created.
        public let creationDateTime: TimeStamp
        /// The name of the security configuration.
        public let name: String

        public init(creationDateTime: TimeStamp, name: String) {
            self.creationDateTime = creationDateTime
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case name = "Name"
        }
    }

    public struct DeleteSecurityConfigurationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]

        /// The name of the security configuration.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 10280)
            try validate(self.name, name:"name", parent: name, min: 0)
            try validate(self.name, name:"name", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DeleteSecurityConfigurationOutput: AWSShape {


        public init() {
        }

    }

    public struct DescribeClusterInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]

        /// The identifier of the cluster to describe.
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    public struct DescribeClusterOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]

        /// This output contains the details for the requested cluster.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct DescribeJobFlowsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobFlowIds", required: false, type: .list), 
            AWSShapeMember(label: "JobFlowStates", required: false, type: .list)
        ]

        /// Return only job flows created after this date and time.
        public let createdAfter: TimeStamp?
        /// Return only job flows created before this date and time.
        public let createdBefore: TimeStamp?
        /// Return only job flows whose job flow ID is contained in this list.
        public let jobFlowIds: [String]?
        /// Return only job flows whose state is contained in this list.
        public let jobFlowStates: [JobFlowExecutionState]?

        public init(createdAfter: TimeStamp? = nil, createdBefore: TimeStamp? = nil, jobFlowIds: [String]? = nil, jobFlowStates: [JobFlowExecutionState]? = nil) {
            self.createdAfter = createdAfter
            self.createdBefore = createdBefore
            self.jobFlowIds = jobFlowIds
            self.jobFlowStates = jobFlowStates
        }

        public func validate(name: String) throws {
            try self.jobFlowIds?.forEach {
                try validate($0, name: "jobFlowIds[]", parent: name, max: 10280)
                try validate($0, name: "jobFlowIds[]", parent: name, min: 0)
                try validate($0, name: "jobFlowIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case createdAfter = "CreatedAfter"
            case createdBefore = "CreatedBefore"
            case jobFlowIds = "JobFlowIds"
            case jobFlowStates = "JobFlowStates"
        }
    }

    public struct DescribeJobFlowsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlows", required: false, type: .list)
        ]

        /// A list of job flows matching the parameters supplied.
        public let jobFlows: [JobFlowDetail]?

        public init(jobFlows: [JobFlowDetail]? = nil) {
            self.jobFlows = jobFlows
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlows = "JobFlows"
        }
    }

    public struct DescribeNotebookExecutionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotebookExecutionId", required: true, type: .string)
        ]

        /// The unique identifier of the notebook execution.
        public let notebookExecutionId: String

        public init(notebookExecutionId: String) {
            self.notebookExecutionId = notebookExecutionId
        }

        public func validate(name: String) throws {
            try validate(self.notebookExecutionId, name:"notebookExecutionId", parent: name, max: 256)
            try validate(self.notebookExecutionId, name:"notebookExecutionId", parent: name, min: 0)
            try validate(self.notebookExecutionId, name:"notebookExecutionId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case notebookExecutionId = "NotebookExecutionId"
        }
    }

    public struct DescribeNotebookExecutionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotebookExecution", required: false, type: .structure)
        ]

        /// Properties of the notebook execution.
        public let notebookExecution: NotebookExecution?

        public init(notebookExecution: NotebookExecution? = nil) {
            self.notebookExecution = notebookExecution
        }

        private enum CodingKeys: String, CodingKey {
            case notebookExecution = "NotebookExecution"
        }
    }

    public struct DescribeSecurityConfigurationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]

        /// The name of the security configuration.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 10280)
            try validate(self.name, name:"name", parent: name, min: 0)
            try validate(self.name, name:"name", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DescribeSecurityConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "SecurityConfiguration", required: false, type: .string)
        ]

        /// The date and time the security configuration was created
        public let creationDateTime: TimeStamp?
        /// The name of the security configuration.
        public let name: String?
        /// The security configuration details in JSON format.
        public let securityConfiguration: String?

        public init(creationDateTime: TimeStamp? = nil, name: String? = nil, securityConfiguration: String? = nil) {
            self.creationDateTime = creationDateTime
            self.name = name
            self.securityConfiguration = securityConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case name = "Name"
            case securityConfiguration = "SecurityConfiguration"
        }
    }

    public struct DescribeStepInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "StepId", required: true, type: .string)
        ]

        /// The identifier of the cluster with steps to describe.
        public let clusterId: String
        /// The identifier of the step to describe.
        public let stepId: String

        public init(clusterId: String, stepId: String) {
            self.clusterId = clusterId
            self.stepId = stepId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case stepId = "StepId"
        }
    }

    public struct DescribeStepOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Step", required: false, type: .structure)
        ]

        /// The step details for the requested step identifier.
        public let step: Step?

        public init(step: Step? = nil) {
            self.step = step
        }

        private enum CodingKeys: String, CodingKey {
            case step = "Step"
        }
    }

    public struct EbsBlockDevice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Device", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSpecification", required: false, type: .structure)
        ]

        /// The device name that is exposed to the instance, such as /dev/sdh.
        public let device: String?
        /// EBS volume specifications such as volume type, IOPS, and size (GiB) that will be requested for the EBS volume attached to an EC2 instance in the cluster.
        public let volumeSpecification: VolumeSpecification?

        public init(device: String? = nil, volumeSpecification: VolumeSpecification? = nil) {
            self.device = device
            self.volumeSpecification = volumeSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
            case volumeSpecification = "VolumeSpecification"
        }
    }

    public struct EbsBlockDeviceConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeSpecification", required: true, type: .structure), 
            AWSShapeMember(label: "VolumesPerInstance", required: false, type: .integer)
        ]

        /// EBS volume specifications such as volume type, IOPS, and size (GiB) that will be requested for the EBS volume attached to an EC2 instance in the cluster.
        public let volumeSpecification: VolumeSpecification
        /// Number of EBS volumes with a specific volume configuration that will be associated with every instance in the instance group
        public let volumesPerInstance: Int?

        public init(volumeSpecification: VolumeSpecification, volumesPerInstance: Int? = nil) {
            self.volumeSpecification = volumeSpecification
            self.volumesPerInstance = volumesPerInstance
        }

        private enum CodingKeys: String, CodingKey {
            case volumeSpecification = "VolumeSpecification"
            case volumesPerInstance = "VolumesPerInstance"
        }
    }

    public struct EbsConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EbsBlockDeviceConfigs", required: false, type: .list), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean)
        ]

        /// An array of Amazon EBS volume specifications attached to a cluster instance.
        public let ebsBlockDeviceConfigs: [EbsBlockDeviceConfig]?
        /// Indicates whether an Amazon EBS volume is EBS-optimized.
        public let ebsOptimized: Bool?

        public init(ebsBlockDeviceConfigs: [EbsBlockDeviceConfig]? = nil, ebsOptimized: Bool? = nil) {
            self.ebsBlockDeviceConfigs = ebsBlockDeviceConfigs
            self.ebsOptimized = ebsOptimized
        }

        private enum CodingKeys: String, CodingKey {
            case ebsBlockDeviceConfigs = "EbsBlockDeviceConfigs"
            case ebsOptimized = "EbsOptimized"
        }
    }

    public struct EbsVolume: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Device", required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", required: false, type: .string)
        ]

        /// The device name that is exposed to the instance, such as /dev/sdh.
        public let device: String?
        /// The volume identifier of the EBS volume.
        public let volumeId: String?

        public init(device: String? = nil, volumeId: String? = nil) {
            self.device = device
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
            case volumeId = "VolumeId"
        }
    }

    public struct Ec2InstanceAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalMasterSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "AdditionalSlaveSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "Ec2AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "Ec2KeyName", required: false, type: .string), 
            AWSShapeMember(label: "Ec2SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "EmrManagedMasterSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "EmrManagedSlaveSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", required: false, type: .string), 
            AWSShapeMember(label: "RequestedEc2AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "RequestedEc2SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "ServiceAccessSecurityGroup", required: false, type: .string)
        ]

        /// A list of additional Amazon EC2 security group IDs for the master node.
        public let additionalMasterSecurityGroups: [String]?
        /// A list of additional Amazon EC2 security group IDs for the core and task nodes.
        public let additionalSlaveSecurityGroups: [String]?
        /// The Availability Zone in which the cluster will run. 
        public let ec2AvailabilityZone: String?
        /// The name of the Amazon EC2 key pair to use when connecting with SSH into the master node as a user named "hadoop".
        public let ec2KeyName: String?
        /// Set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value, and your account supports EC2-Classic, the cluster launches in EC2-Classic.
        public let ec2SubnetId: String?
        /// The identifier of the Amazon EC2 security group for the master node.
        public let emrManagedMasterSecurityGroup: String?
        /// The identifier of the Amazon EC2 security group for the core and task nodes.
        public let emrManagedSlaveSecurityGroup: String?
        /// The IAM role that was specified when the cluster was launched. The EC2 instances of the cluster assume this role.
        public let iamInstanceProfile: String?
        /// Applies to clusters configured with the instance fleets option. Specifies one or more Availability Zones in which to launch EC2 cluster instances when the EC2-Classic network configuration is supported. Amazon EMR chooses the Availability Zone with the best fit from among the list of RequestedEc2AvailabilityZones, and then launches all cluster instances within that Availability Zone. If you do not specify this value, Amazon EMR chooses the Availability Zone for you. RequestedEc2SubnetIDs and RequestedEc2AvailabilityZones cannot be specified together.
        public let requestedEc2AvailabilityZones: [String]?
        /// Applies to clusters configured with the instance fleets option. Specifies the unique identifier of one or more Amazon EC2 subnets in which to launch EC2 cluster instances. Subnets must exist within the same VPC. Amazon EMR chooses the EC2 subnet with the best fit from among the list of RequestedEc2SubnetIds, and then launches all cluster instances within that Subnet. If this value is not specified, and the account and Region support EC2-Classic networks, the cluster launches instances in the EC2-Classic network and uses RequestedEc2AvailabilityZones instead of this setting. If EC2-Classic is not supported, and no Subnet is specified, Amazon EMR chooses the subnet for you. RequestedEc2SubnetIDs and RequestedEc2AvailabilityZones cannot be specified together.
        public let requestedEc2SubnetIds: [String]?
        /// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
        public let serviceAccessSecurityGroup: String?

        public init(additionalMasterSecurityGroups: [String]? = nil, additionalSlaveSecurityGroups: [String]? = nil, ec2AvailabilityZone: String? = nil, ec2KeyName: String? = nil, ec2SubnetId: String? = nil, emrManagedMasterSecurityGroup: String? = nil, emrManagedSlaveSecurityGroup: String? = nil, iamInstanceProfile: String? = nil, requestedEc2AvailabilityZones: [String]? = nil, requestedEc2SubnetIds: [String]? = nil, serviceAccessSecurityGroup: String? = nil) {
            self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
            self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
            self.ec2AvailabilityZone = ec2AvailabilityZone
            self.ec2KeyName = ec2KeyName
            self.ec2SubnetId = ec2SubnetId
            self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
            self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
            self.iamInstanceProfile = iamInstanceProfile
            self.requestedEc2AvailabilityZones = requestedEc2AvailabilityZones
            self.requestedEc2SubnetIds = requestedEc2SubnetIds
            self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case additionalMasterSecurityGroups = "AdditionalMasterSecurityGroups"
            case additionalSlaveSecurityGroups = "AdditionalSlaveSecurityGroups"
            case ec2AvailabilityZone = "Ec2AvailabilityZone"
            case ec2KeyName = "Ec2KeyName"
            case ec2SubnetId = "Ec2SubnetId"
            case emrManagedMasterSecurityGroup = "EmrManagedMasterSecurityGroup"
            case emrManagedSlaveSecurityGroup = "EmrManagedSlaveSecurityGroup"
            case iamInstanceProfile = "IamInstanceProfile"
            case requestedEc2AvailabilityZones = "RequestedEc2AvailabilityZones"
            case requestedEc2SubnetIds = "RequestedEc2SubnetIds"
            case serviceAccessSecurityGroup = "ServiceAccessSecurityGroup"
        }
    }

    public struct ExecutionEngineConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "MasterInstanceSecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]

        /// The unique identifier of the execution engine. For an EMR cluster, this is the cluster ID.
        public let id: String
        /// An optional unique ID of an EC2 security group to associate with the master instance of the EMR cluster for this notebook execution. For more information see Specifying EC2 Security Groups for EMR Notebooks in the EMR Management Guide.
        public let masterInstanceSecurityGroupId: String?
        /// The type of execution engine. A value of EMR specifies an EMR cluster.
        public let `type`: ExecutionEngineType?

        public init(id: String, masterInstanceSecurityGroupId: String? = nil, type: ExecutionEngineType? = nil) {
            self.id = id
            self.masterInstanceSecurityGroupId = masterInstanceSecurityGroupId
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try validate(self.id, name:"id", parent: name, max: 256)
            try validate(self.id, name:"id", parent: name, min: 0)
            try validate(self.id, name:"id", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.masterInstanceSecurityGroupId, name:"masterInstanceSecurityGroupId", parent: name, max: 256)
            try validate(self.masterInstanceSecurityGroupId, name:"masterInstanceSecurityGroupId", parent: name, min: 0)
            try validate(self.masterInstanceSecurityGroupId, name:"masterInstanceSecurityGroupId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case masterInstanceSecurityGroupId = "MasterInstanceSecurityGroupId"
            case `type` = "Type"
        }
    }

    public struct FailureDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogFile", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Reason", required: false, type: .string)
        ]

        /// The path to the log file where the step failure root cause was originally recorded.
        public let logFile: String?
        /// The descriptive message including the error the EMR service has identified as the cause of step failure. This is text from an error log that describes the root cause of the failure.
        public let message: String?
        /// The reason for the step failure. In the case where the service cannot successfully determine the root cause of the failure, it returns "Unknown Error" as a reason.
        public let reason: String?

        public init(logFile: String? = nil, message: String? = nil, reason: String? = nil) {
            self.logFile = logFile
            self.message = message
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case logFile = "LogFile"
            case message = "Message"
            case reason = "Reason"
        }
    }

    public struct GetBlockPublicAccessConfigurationInput: AWSShape {


        public init() {
        }

    }

    public struct GetBlockPublicAccessConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockPublicAccessConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "BlockPublicAccessConfigurationMetadata", required: true, type: .structure)
        ]

        /// A configuration for Amazon EMR block public access. The configuration applies to all clusters created in your account for the current Region. The configuration specifies whether block public access is enabled. If block public access is enabled, security groups associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or ::/0 on a port, unless the port is specified as an exception using PermittedPublicSecurityGroupRuleRanges in the BlockPublicAccessConfiguration. By default, Port 22 (SSH) is an exception, and public access is allowed on this port. You can change this by updating the block public access configuration to remove the exception.  For accounts that created clusters in a Region before November 25, 2019, block public access is disabled by default in that Region. To use this feature, you must manually enable and configure it. For accounts that did not create an EMR cluster in a Region before this date, block public access is enabled by default in that Region. 
        public let blockPublicAccessConfiguration: BlockPublicAccessConfiguration
        /// Properties that describe the AWS principal that created the BlockPublicAccessConfiguration using the PutBlockPublicAccessConfiguration action as well as the date and time that the configuration was created. Each time a configuration for block public access is updated, Amazon EMR updates this metadata.
        public let blockPublicAccessConfigurationMetadata: BlockPublicAccessConfigurationMetadata

        public init(blockPublicAccessConfiguration: BlockPublicAccessConfiguration, blockPublicAccessConfigurationMetadata: BlockPublicAccessConfigurationMetadata) {
            self.blockPublicAccessConfiguration = blockPublicAccessConfiguration
            self.blockPublicAccessConfigurationMetadata = blockPublicAccessConfigurationMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case blockPublicAccessConfiguration = "BlockPublicAccessConfiguration"
            case blockPublicAccessConfigurationMetadata = "BlockPublicAccessConfigurationMetadata"
        }
    }

    public struct GetManagedScalingPolicyInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]

        ///  Specifies the ID of the cluster for which the managed scaling policy will be fetched. 
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    public struct GetManagedScalingPolicyOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ManagedScalingPolicy", required: false, type: .structure)
        ]

        ///  Specifies the managed scaling policy that is attached to an Amazon EMR cluster. 
        public let managedScalingPolicy: ManagedScalingPolicy?

        public init(managedScalingPolicy: ManagedScalingPolicy? = nil) {
            self.managedScalingPolicy = managedScalingPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case managedScalingPolicy = "ManagedScalingPolicy"
        }
    }

    public struct HadoopJarStepConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Args", required: false, type: .list), 
            AWSShapeMember(label: "Jar", required: true, type: .string), 
            AWSShapeMember(label: "MainClass", required: false, type: .string), 
            AWSShapeMember(label: "Properties", required: false, type: .list)
        ]

        /// A list of command line arguments passed to the JAR file's main function when executed.
        public let args: [String]?
        /// A path to a JAR file run during the step.
        public let jar: String
        /// The name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
        public let mainClass: String?
        /// A list of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
        public let properties: [KeyValue]?

        public init(args: [String]? = nil, jar: String, mainClass: String? = nil, properties: [KeyValue]? = nil) {
            self.args = args
            self.jar = jar
            self.mainClass = mainClass
            self.properties = properties
        }

        public func validate(name: String) throws {
            try self.args?.forEach {
                try validate($0, name: "args[]", parent: name, max: 10280)
                try validate($0, name: "args[]", parent: name, min: 0)
                try validate($0, name: "args[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.jar, name:"jar", parent: name, max: 10280)
            try validate(self.jar, name:"jar", parent: name, min: 0)
            try validate(self.jar, name:"jar", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.mainClass, name:"mainClass", parent: name, max: 10280)
            try validate(self.mainClass, name:"mainClass", parent: name, min: 0)
            try validate(self.mainClass, name:"mainClass", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.properties?.forEach {
                try $0.validate(name: "\(name).properties[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case args = "Args"
            case jar = "Jar"
            case mainClass = "MainClass"
            case properties = "Properties"
        }
    }

    public struct HadoopStepConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Args", required: false, type: .list), 
            AWSShapeMember(label: "Jar", required: false, type: .string), 
            AWSShapeMember(label: "MainClass", required: false, type: .string), 
            AWSShapeMember(label: "Properties", required: false, type: .map)
        ]

        /// The list of command line arguments to pass to the JAR file's main function for execution.
        public let args: [String]?
        /// The path to the JAR file that runs during the step.
        public let jar: String?
        /// The name of the main class in the specified Java file. If not specified, the JAR file should specify a main class in its manifest file.
        public let mainClass: String?
        /// The list of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
        public let properties: [String: String]?

        public init(args: [String]? = nil, jar: String? = nil, mainClass: String? = nil, properties: [String: String]? = nil) {
            self.args = args
            self.jar = jar
            self.mainClass = mainClass
            self.properties = properties
        }

        private enum CodingKeys: String, CodingKey {
            case args = "Args"
            case jar = "Jar"
            case mainClass = "MainClass"
            case properties = "Properties"
        }
    }

    public struct Instance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EbsVolumes", required: false, type: .list), 
            AWSShapeMember(label: "Ec2InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "InstanceFleetId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroupId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "Market", required: false, type: .enum), 
            AWSShapeMember(label: "PrivateDnsName", required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "PublicDnsName", required: false, type: .string), 
            AWSShapeMember(label: "PublicIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure)
        ]

        /// The list of EBS volumes that are attached to this instance.
        public let ebsVolumes: [EbsVolume]?
        /// The unique identifier of the instance in Amazon EC2.
        public let ec2InstanceId: String?
        /// The unique identifier for the instance in Amazon EMR.
        public let id: String?
        /// The unique identifier of the instance fleet to which an EC2 instance belongs.
        public let instanceFleetId: String?
        /// The identifier of the instance group to which this instance belongs.
        public let instanceGroupId: String?
        /// The EC2 instance type, for example m3.xlarge.
        public let instanceType: String?
        /// The instance purchasing option. Valid values are ON_DEMAND or SPOT. 
        public let market: MarketType?
        /// The private DNS name of the instance.
        public let privateDnsName: String?
        /// The private IP address of the instance.
        public let privateIpAddress: String?
        /// The public DNS name of the instance.
        public let publicDnsName: String?
        /// The public IP address of the instance.
        public let publicIpAddress: String?
        /// The current status of the instance.
        public let status: InstanceStatus?

        public init(ebsVolumes: [EbsVolume]? = nil, ec2InstanceId: String? = nil, id: String? = nil, instanceFleetId: String? = nil, instanceGroupId: String? = nil, instanceType: String? = nil, market: MarketType? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil, publicDnsName: String? = nil, publicIpAddress: String? = nil, status: InstanceStatus? = nil) {
            self.ebsVolumes = ebsVolumes
            self.ec2InstanceId = ec2InstanceId
            self.id = id
            self.instanceFleetId = instanceFleetId
            self.instanceGroupId = instanceGroupId
            self.instanceType = instanceType
            self.market = market
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.publicDnsName = publicDnsName
            self.publicIpAddress = publicIpAddress
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case ebsVolumes = "EbsVolumes"
            case ec2InstanceId = "Ec2InstanceId"
            case id = "Id"
            case instanceFleetId = "InstanceFleetId"
            case instanceGroupId = "InstanceGroupId"
            case instanceType = "InstanceType"
            case market = "Market"
            case privateDnsName = "PrivateDnsName"
            case privateIpAddress = "PrivateIpAddress"
            case publicDnsName = "PublicDnsName"
            case publicIpAddress = "PublicIpAddress"
            case status = "Status"
        }
    }

    public struct InstanceFleet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "InstanceFleetType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceTypeSpecifications", required: false, type: .list), 
            AWSShapeMember(label: "LaunchSpecifications", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedOnDemandCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "ProvisionedSpotCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "TargetOnDemandCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "TargetSpotCapacity", required: false, type: .integer)
        ]

        /// The unique identifier of the instance fleet.
        public let id: String?
        /// The node type that the instance fleet hosts. Valid values are MASTER, CORE, or TASK. 
        public let instanceFleetType: InstanceFleetType?
        /// The specification for the instance types that comprise an instance fleet. Up to five unique instance specifications may be defined for each instance fleet. 
        public let instanceTypeSpecifications: [InstanceTypeSpecification]?
        /// Describes the launch specification for an instance fleet. 
        public let launchSpecifications: InstanceFleetProvisioningSpecifications?
        /// A friendly name for the instance fleet.
        public let name: String?
        /// The number of On-Demand units that have been provisioned for the instance fleet to fulfill TargetOnDemandCapacity. This provisioned capacity might be less than or greater than TargetOnDemandCapacity.
        public let provisionedOnDemandCapacity: Int?
        /// The number of Spot units that have been provisioned for this instance fleet to fulfill TargetSpotCapacity. This provisioned capacity might be less than or greater than TargetSpotCapacity.
        public let provisionedSpotCapacity: Int?
        /// The current status of the instance fleet. 
        public let status: InstanceFleetStatus?
        /// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When an On-Demand instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use InstanceFleet$ProvisionedOnDemandCapacity to determine the Spot capacity units that have been provisioned for the instance fleet.  If not specified or set to 0, only Spot instances are provisioned for the instance fleet using TargetSpotCapacity. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public let targetOnDemandCapacity: Int?
        /// The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When a Spot instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units. You can use InstanceFleet$ProvisionedSpotCapacity to determine the Spot capacity units that have been provisioned for the instance fleet.  If not specified or set to 0, only On-Demand instances are provisioned for the instance fleet. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public let targetSpotCapacity: Int?

        public init(id: String? = nil, instanceFleetType: InstanceFleetType? = nil, instanceTypeSpecifications: [InstanceTypeSpecification]? = nil, launchSpecifications: InstanceFleetProvisioningSpecifications? = nil, name: String? = nil, provisionedOnDemandCapacity: Int? = nil, provisionedSpotCapacity: Int? = nil, status: InstanceFleetStatus? = nil, targetOnDemandCapacity: Int? = nil, targetSpotCapacity: Int? = nil) {
            self.id = id
            self.instanceFleetType = instanceFleetType
            self.instanceTypeSpecifications = instanceTypeSpecifications
            self.launchSpecifications = launchSpecifications
            self.name = name
            self.provisionedOnDemandCapacity = provisionedOnDemandCapacity
            self.provisionedSpotCapacity = provisionedSpotCapacity
            self.status = status
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.targetSpotCapacity = targetSpotCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case instanceFleetType = "InstanceFleetType"
            case instanceTypeSpecifications = "InstanceTypeSpecifications"
            case launchSpecifications = "LaunchSpecifications"
            case name = "Name"
            case provisionedOnDemandCapacity = "ProvisionedOnDemandCapacity"
            case provisionedSpotCapacity = "ProvisionedSpotCapacity"
            case status = "Status"
            case targetOnDemandCapacity = "TargetOnDemandCapacity"
            case targetSpotCapacity = "TargetSpotCapacity"
        }
    }

    public struct InstanceFleetConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceFleetType", required: true, type: .enum), 
            AWSShapeMember(label: "InstanceTypeConfigs", required: false, type: .list), 
            AWSShapeMember(label: "LaunchSpecifications", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "TargetOnDemandCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "TargetSpotCapacity", required: false, type: .integer)
        ]

        /// The node type that the instance fleet hosts. Valid values are MASTER,CORE,and TASK.
        public let instanceFleetType: InstanceFleetType
        /// The instance type configurations that define the EC2 instances in the instance fleet.
        public let instanceTypeConfigs: [InstanceTypeConfig]?
        /// The launch specification for the instance fleet.
        public let launchSpecifications: InstanceFleetProvisioningSpecifications?
        /// The friendly name of the instance fleet.
        public let name: String?
        /// The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When an On-Demand instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units.  If not specified or set to 0, only Spot instances are provisioned for the instance fleet using TargetSpotCapacity. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public let targetOnDemandCapacity: Int?
        /// The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot instances as specified by InstanceTypeConfig. Each instance configuration has a specified WeightedCapacity. When a Spot instance is provisioned, the WeightedCapacity units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a WeightedCapacity of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units.  If not specified or set to 0, only On-Demand instances are provisioned for the instance fleet. At least one of TargetSpotCapacity and TargetOnDemandCapacity should be greater than 0. For a master instance fleet, only one of TargetSpotCapacity and TargetOnDemandCapacity can be specified, and its value must be 1. 
        public let targetSpotCapacity: Int?

        public init(instanceFleetType: InstanceFleetType, instanceTypeConfigs: [InstanceTypeConfig]? = nil, launchSpecifications: InstanceFleetProvisioningSpecifications? = nil, name: String? = nil, targetOnDemandCapacity: Int? = nil, targetSpotCapacity: Int? = nil) {
            self.instanceFleetType = instanceFleetType
            self.instanceTypeConfigs = instanceTypeConfigs
            self.launchSpecifications = launchSpecifications
            self.name = name
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.targetSpotCapacity = targetSpotCapacity
        }

        public func validate(name: String) throws {
            try self.instanceTypeConfigs?.forEach {
                try $0.validate(name: "\(name).instanceTypeConfigs[]")
            }
            try self.launchSpecifications?.validate(name: "\(name).launchSpecifications")
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 0)
            try validate(self.name, name:"name", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.targetOnDemandCapacity, name:"targetOnDemandCapacity", parent: name, min: 0)
            try validate(self.targetSpotCapacity, name:"targetSpotCapacity", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case instanceFleetType = "InstanceFleetType"
            case instanceTypeConfigs = "InstanceTypeConfigs"
            case launchSpecifications = "LaunchSpecifications"
            case name = "Name"
            case targetOnDemandCapacity = "TargetOnDemandCapacity"
            case targetSpotCapacity = "TargetSpotCapacity"
        }
    }

    public struct InstanceFleetModifyConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceFleetId", required: true, type: .string), 
            AWSShapeMember(label: "TargetOnDemandCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "TargetSpotCapacity", required: false, type: .integer)
        ]

        /// A unique identifier for the instance fleet.
        public let instanceFleetId: String
        /// The target capacity of On-Demand units for the instance fleet. For more information see InstanceFleetConfig$TargetOnDemandCapacity.
        public let targetOnDemandCapacity: Int?
        /// The target capacity of Spot units for the instance fleet. For more information, see InstanceFleetConfig$TargetSpotCapacity.
        public let targetSpotCapacity: Int?

        public init(instanceFleetId: String, targetOnDemandCapacity: Int? = nil, targetSpotCapacity: Int? = nil) {
            self.instanceFleetId = instanceFleetId
            self.targetOnDemandCapacity = targetOnDemandCapacity
            self.targetSpotCapacity = targetSpotCapacity
        }

        public func validate(name: String) throws {
            try validate(self.targetOnDemandCapacity, name:"targetOnDemandCapacity", parent: name, min: 0)
            try validate(self.targetSpotCapacity, name:"targetSpotCapacity", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case instanceFleetId = "InstanceFleetId"
            case targetOnDemandCapacity = "TargetOnDemandCapacity"
            case targetSpotCapacity = "TargetSpotCapacity"
        }
    }

    public struct InstanceFleetProvisioningSpecifications: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OnDemandSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "SpotSpecification", required: false, type: .structure)
        ]

        ///  The launch specification for On-Demand instances in the instance fleet, which determines the allocation strategy.   The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. On-Demand instances allocation strategy is available in Amazon EMR version 5.12.1 and later. 
        public let onDemandSpecification: OnDemandProvisioningSpecification?
        /// The launch specification for Spot instances in the fleet, which determines the defined duration, provisioning timeout behavior, and allocation strategy.
        public let spotSpecification: SpotProvisioningSpecification?

        public init(onDemandSpecification: OnDemandProvisioningSpecification? = nil, spotSpecification: SpotProvisioningSpecification? = nil) {
            self.onDemandSpecification = onDemandSpecification
            self.spotSpecification = spotSpecification
        }

        public func validate(name: String) throws {
            try self.spotSpecification?.validate(name: "\(name).spotSpecification")
        }

        private enum CodingKeys: String, CodingKey {
            case onDemandSpecification = "OnDemandSpecification"
            case spotSpecification = "SpotSpecification"
        }
    }

    public struct InstanceFleetStateChangeReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]

        /// A code corresponding to the reason the state change occurred.
        public let code: InstanceFleetStateChangeReasonCode?
        /// An explanatory message.
        public let message: String?

        public init(code: InstanceFleetStateChangeReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public struct InstanceFleetStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure)
        ]

        /// A code representing the instance fleet status.    PROVISIONING—The instance fleet is provisioning EC2 resources and is not yet ready to run jobs.    BOOTSTRAPPING—EC2 instances and other resources have been provisioned and the bootstrap actions specified for the instances are underway.    RUNNING—EC2 instances and other resources are running. They are either executing jobs or waiting to execute jobs.    RESIZING—A resize operation is underway. EC2 instances are either being added or removed.    SUSPENDED—A resize operation could not complete. Existing EC2 instances are running, but instances can't be added or removed.    TERMINATING—The instance fleet is terminating EC2 instances.    TERMINATED—The instance fleet is no longer active, and all EC2 instances have been terminated.  
        public let state: InstanceFleetState?
        /// Provides status change reason details for the instance fleet.
        public let stateChangeReason: InstanceFleetStateChangeReason?
        /// Provides historical timestamps for the instance fleet, including the time of creation, the time it became ready to run jobs, and the time of termination.
        public let timeline: InstanceFleetTimeline?

        public init(state: InstanceFleetState? = nil, stateChangeReason: InstanceFleetStateChangeReason? = nil, timeline: InstanceFleetTimeline? = nil) {
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case stateChangeReason = "StateChangeReason"
            case timeline = "Timeline"
        }
    }

    public struct InstanceFleetTimeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp)
        ]

        /// The time and date the instance fleet was created.
        public let creationDateTime: TimeStamp?
        /// The time and date the instance fleet terminated.
        public let endDateTime: TimeStamp?
        /// The time and date the instance fleet was ready to run jobs.
        public let readyDateTime: TimeStamp?

        public init(creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil, readyDateTime: TimeStamp? = nil) {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
            case readyDateTime = "ReadyDateTime"
        }
    }

    public struct InstanceGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "ConfigurationsVersion", required: false, type: .long), 
            AWSShapeMember(label: "EbsBlockDevices", required: false, type: .list), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroupType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "LastSuccessfullyAppliedConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "LastSuccessfullyAppliedConfigurationsVersion", required: false, type: .long), 
            AWSShapeMember(label: "Market", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "RequestedInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "RunningInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "ShrinkPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .structure)
        ]

        /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See PutAutoScalingPolicy.
        public let autoScalingPolicy: AutoScalingPolicyDescription?
        /// The bid price for each EC2 Spot instance type as defined by InstanceType. Expressed in USD. If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%.
        public let bidPrice: String?
        ///  Amazon EMR releases 4.x or later.  The list of configurations supplied for an EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).
        public let configurations: [Configuration]?
        /// The version number of the requested configuration specification for this instance group.
        public let configurationsVersion: Int64?
        /// The EBS block devices that are mapped to this instance group.
        public let ebsBlockDevices: [EbsBlockDevice]?
        /// If the instance group is EBS-optimized. An Amazon EBS-optimized instance uses an optimized configuration stack and provides additional, dedicated capacity for Amazon EBS I/O.
        public let ebsOptimized: Bool?
        /// The identifier of the instance group.
        public let id: String?
        /// The type of the instance group. Valid values are MASTER, CORE or TASK.
        public let instanceGroupType: InstanceGroupType?
        /// The EC2 instance type for all instances in the instance group.
        public let instanceType: String?
        /// A list of configurations that were successfully applied for an instance group last time.
        public let lastSuccessfullyAppliedConfigurations: [Configuration]?
        /// The version number of a configuration specification that was successfully applied for an instance group last time. 
        public let lastSuccessfullyAppliedConfigurationsVersion: Int64?
        /// The marketplace to provision instances for this group. Valid values are ON_DEMAND or SPOT.
        public let market: MarketType?
        /// The name of the instance group.
        public let name: String?
        /// The target number of instances for the instance group.
        public let requestedInstanceCount: Int?
        /// The number of instances currently running in this instance group.
        public let runningInstanceCount: Int?
        /// Policy for customizing shrink operations.
        public let shrinkPolicy: ShrinkPolicy?
        /// The current status of the instance group.
        public let status: InstanceGroupStatus?

        public init(autoScalingPolicy: AutoScalingPolicyDescription? = nil, bidPrice: String? = nil, configurations: [Configuration]? = nil, configurationsVersion: Int64? = nil, ebsBlockDevices: [EbsBlockDevice]? = nil, ebsOptimized: Bool? = nil, id: String? = nil, instanceGroupType: InstanceGroupType? = nil, instanceType: String? = nil, lastSuccessfullyAppliedConfigurations: [Configuration]? = nil, lastSuccessfullyAppliedConfigurationsVersion: Int64? = nil, market: MarketType? = nil, name: String? = nil, requestedInstanceCount: Int? = nil, runningInstanceCount: Int? = nil, shrinkPolicy: ShrinkPolicy? = nil, status: InstanceGroupStatus? = nil) {
            self.autoScalingPolicy = autoScalingPolicy
            self.bidPrice = bidPrice
            self.configurations = configurations
            self.configurationsVersion = configurationsVersion
            self.ebsBlockDevices = ebsBlockDevices
            self.ebsOptimized = ebsOptimized
            self.id = id
            self.instanceGroupType = instanceGroupType
            self.instanceType = instanceType
            self.lastSuccessfullyAppliedConfigurations = lastSuccessfullyAppliedConfigurations
            self.lastSuccessfullyAppliedConfigurationsVersion = lastSuccessfullyAppliedConfigurationsVersion
            self.market = market
            self.name = name
            self.requestedInstanceCount = requestedInstanceCount
            self.runningInstanceCount = runningInstanceCount
            self.shrinkPolicy = shrinkPolicy
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingPolicy = "AutoScalingPolicy"
            case bidPrice = "BidPrice"
            case configurations = "Configurations"
            case configurationsVersion = "ConfigurationsVersion"
            case ebsBlockDevices = "EbsBlockDevices"
            case ebsOptimized = "EbsOptimized"
            case id = "Id"
            case instanceGroupType = "InstanceGroupType"
            case instanceType = "InstanceType"
            case lastSuccessfullyAppliedConfigurations = "LastSuccessfullyAppliedConfigurations"
            case lastSuccessfullyAppliedConfigurationsVersion = "LastSuccessfullyAppliedConfigurationsVersion"
            case market = "Market"
            case name = "Name"
            case requestedInstanceCount = "RequestedInstanceCount"
            case runningInstanceCount = "RunningInstanceCount"
            case shrinkPolicy = "ShrinkPolicy"
            case status = "Status"
        }
    }

    public struct InstanceGroupConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "EbsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer), 
            AWSShapeMember(label: "InstanceRole", required: true, type: .enum), 
            AWSShapeMember(label: "InstanceType", required: true, type: .string), 
            AWSShapeMember(label: "Market", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]

        /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See PutAutoScalingPolicy.
        public let autoScalingPolicy: AutoScalingPolicy?
        /// The bid price for each EC2 Spot instance type as defined by InstanceType. Expressed in USD. If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%.
        public let bidPrice: String?
        ///  Amazon EMR releases 4.x or later.  The list of configurations supplied for an EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).
        public let configurations: [Configuration]?
        /// EBS configurations that will be attached to each EC2 instance in the instance group.
        public let ebsConfiguration: EbsConfiguration?
        /// Target number of instances for the instance group.
        public let instanceCount: Int
        /// The role of the instance group in the cluster.
        public let instanceRole: InstanceRoleType
        /// The EC2 instance type for all instances in the instance group.
        public let instanceType: String
        /// Market type of the EC2 instances used to create a cluster node.
        public let market: MarketType?
        /// Friendly name given to the instance group.
        public let name: String?

        public init(autoScalingPolicy: AutoScalingPolicy? = nil, bidPrice: String? = nil, configurations: [Configuration]? = nil, ebsConfiguration: EbsConfiguration? = nil, instanceCount: Int, instanceRole: InstanceRoleType, instanceType: String, market: MarketType? = nil, name: String? = nil) {
            self.autoScalingPolicy = autoScalingPolicy
            self.bidPrice = bidPrice
            self.configurations = configurations
            self.ebsConfiguration = ebsConfiguration
            self.instanceCount = instanceCount
            self.instanceRole = instanceRole
            self.instanceType = instanceType
            self.market = market
            self.name = name
        }

        public func validate(name: String) throws {
            try self.autoScalingPolicy?.validate(name: "\(name).autoScalingPolicy")
            try validate(self.bidPrice, name:"bidPrice", parent: name, max: 256)
            try validate(self.bidPrice, name:"bidPrice", parent: name, min: 0)
            try validate(self.bidPrice, name:"bidPrice", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.instanceType, name:"instanceType", parent: name, max: 256)
            try validate(self.instanceType, name:"instanceType", parent: name, min: 1)
            try validate(self.instanceType, name:"instanceType", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 0)
            try validate(self.name, name:"name", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingPolicy = "AutoScalingPolicy"
            case bidPrice = "BidPrice"
            case configurations = "Configurations"
            case ebsConfiguration = "EbsConfiguration"
            case instanceCount = "InstanceCount"
            case instanceRole = "InstanceRole"
            case instanceType = "InstanceType"
            case market = "Market"
            case name = "Name"
        }
    }

    public struct InstanceGroupDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "CreationDateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceGroupId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceRequestCount", required: true, type: .integer), 
            AWSShapeMember(label: "InstanceRole", required: true, type: .enum), 
            AWSShapeMember(label: "InstanceRunningCount", required: true, type: .integer), 
            AWSShapeMember(label: "InstanceType", required: true, type: .string), 
            AWSShapeMember(label: "LastStateChangeReason", required: false, type: .string), 
            AWSShapeMember(label: "Market", required: true, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: true, type: .enum)
        ]

        /// The bid price for each EC2 Spot instance type as defined by InstanceType. Expressed in USD. If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%.
        public let bidPrice: String?
        /// The date/time the instance group was created.
        public let creationDateTime: TimeStamp
        /// The date/time the instance group was terminated.
        public let endDateTime: TimeStamp?
        /// Unique identifier for the instance group.
        public let instanceGroupId: String?
        /// Target number of instances to run in the instance group.
        public let instanceRequestCount: Int
        /// Instance group role in the cluster
        public let instanceRole: InstanceRoleType
        /// Actual count of running instances.
        public let instanceRunningCount: Int
        /// EC2 instance type.
        public let instanceType: String
        /// Details regarding the state of the instance group.
        public let lastStateChangeReason: String?
        /// Market type of the EC2 instances used to create a cluster node.
        public let market: MarketType
        /// Friendly name for the instance group.
        public let name: String?
        /// The date/time the instance group was available to the cluster.
        public let readyDateTime: TimeStamp?
        /// The date/time the instance group was started.
        public let startDateTime: TimeStamp?
        /// State of instance group. The following values are deprecated: STARTING, TERMINATED, and FAILED.
        public let state: InstanceGroupState

        public init(bidPrice: String? = nil, creationDateTime: TimeStamp, endDateTime: TimeStamp? = nil, instanceGroupId: String? = nil, instanceRequestCount: Int, instanceRole: InstanceRoleType, instanceRunningCount: Int, instanceType: String, lastStateChangeReason: String? = nil, market: MarketType, name: String? = nil, readyDateTime: TimeStamp? = nil, startDateTime: TimeStamp? = nil, state: InstanceGroupState) {
            self.bidPrice = bidPrice
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.instanceGroupId = instanceGroupId
            self.instanceRequestCount = instanceRequestCount
            self.instanceRole = instanceRole
            self.instanceRunningCount = instanceRunningCount
            self.instanceType = instanceType
            self.lastStateChangeReason = lastStateChangeReason
            self.market = market
            self.name = name
            self.readyDateTime = readyDateTime
            self.startDateTime = startDateTime
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case bidPrice = "BidPrice"
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
            case instanceGroupId = "InstanceGroupId"
            case instanceRequestCount = "InstanceRequestCount"
            case instanceRole = "InstanceRole"
            case instanceRunningCount = "InstanceRunningCount"
            case instanceType = "InstanceType"
            case lastStateChangeReason = "LastStateChangeReason"
            case market = "Market"
            case name = "Name"
            case readyDateTime = "ReadyDateTime"
            case startDateTime = "StartDateTime"
            case state = "State"
        }
    }

    public struct InstanceGroupModifyConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "EC2InstanceIdsToTerminate", required: false, type: .list), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceGroupId", required: true, type: .string), 
            AWSShapeMember(label: "ShrinkPolicy", required: false, type: .structure)
        ]

        /// A list of new or modified configurations to apply for an instance group.
        public let configurations: [Configuration]?
        /// The EC2 InstanceIds to terminate. After you terminate the instances, the instance group will not return to its original requested size.
        public let eC2InstanceIdsToTerminate: [String]?
        /// Target size for the instance group.
        public let instanceCount: Int?
        /// Unique ID of the instance group to expand or shrink.
        public let instanceGroupId: String
        /// Policy for customizing shrink operations.
        public let shrinkPolicy: ShrinkPolicy?

        public init(configurations: [Configuration]? = nil, eC2InstanceIdsToTerminate: [String]? = nil, instanceCount: Int? = nil, instanceGroupId: String, shrinkPolicy: ShrinkPolicy? = nil) {
            self.configurations = configurations
            self.eC2InstanceIdsToTerminate = eC2InstanceIdsToTerminate
            self.instanceCount = instanceCount
            self.instanceGroupId = instanceGroupId
            self.shrinkPolicy = shrinkPolicy
        }

        public func validate(name: String) throws {
            try validate(self.instanceGroupId, name:"instanceGroupId", parent: name, max: 256)
            try validate(self.instanceGroupId, name:"instanceGroupId", parent: name, min: 0)
            try validate(self.instanceGroupId, name:"instanceGroupId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case configurations = "Configurations"
            case eC2InstanceIdsToTerminate = "EC2InstanceIdsToTerminate"
            case instanceCount = "InstanceCount"
            case instanceGroupId = "InstanceGroupId"
            case shrinkPolicy = "ShrinkPolicy"
        }
    }

    public struct InstanceGroupStateChangeReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]

        /// The programmable code for the state change reason.
        public let code: InstanceGroupStateChangeReasonCode?
        /// The status change reason description.
        public let message: String?

        public init(code: InstanceGroupStateChangeReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public struct InstanceGroupStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure)
        ]

        /// The current state of the instance group.
        public let state: InstanceGroupState?
        /// The status change reason details for the instance group.
        public let stateChangeReason: InstanceGroupStateChangeReason?
        /// The timeline of the instance group status over time.
        public let timeline: InstanceGroupTimeline?

        public init(state: InstanceGroupState? = nil, stateChangeReason: InstanceGroupStateChangeReason? = nil, timeline: InstanceGroupTimeline? = nil) {
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case stateChangeReason = "StateChangeReason"
            case timeline = "Timeline"
        }
    }

    public struct InstanceGroupTimeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp)
        ]

        /// The creation date and time of the instance group.
        public let creationDateTime: TimeStamp?
        /// The date and time when the instance group terminated.
        public let endDateTime: TimeStamp?
        /// The date and time when the instance group became ready to perform tasks.
        public let readyDateTime: TimeStamp?

        public init(creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil, readyDateTime: TimeStamp? = nil) {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
            case readyDateTime = "ReadyDateTime"
        }
    }

    public struct InstanceResizePolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstancesToProtect", required: false, type: .list), 
            AWSShapeMember(label: "InstancesToTerminate", required: false, type: .list), 
            AWSShapeMember(label: "InstanceTerminationTimeout", required: false, type: .integer)
        ]

        /// Specific list of instances to be protected when shrinking an instance group.
        public let instancesToProtect: [String]?
        /// Specific list of instances to be terminated when shrinking an instance group.
        public let instancesToTerminate: [String]?
        /// Decommissioning timeout override for the specific list of instances to be terminated.
        public let instanceTerminationTimeout: Int?

        public init(instancesToProtect: [String]? = nil, instancesToTerminate: [String]? = nil, instanceTerminationTimeout: Int? = nil) {
            self.instancesToProtect = instancesToProtect
            self.instancesToTerminate = instancesToTerminate
            self.instanceTerminationTimeout = instanceTerminationTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case instancesToProtect = "InstancesToProtect"
            case instancesToTerminate = "InstancesToTerminate"
            case instanceTerminationTimeout = "InstanceTerminationTimeout"
        }
    }

    public struct InstanceStateChangeReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]

        /// The programmable code for the state change reason.
        public let code: InstanceStateChangeReasonCode?
        /// The status change reason description.
        public let message: String?

        public init(code: InstanceStateChangeReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public struct InstanceStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure)
        ]

        /// The current state of the instance.
        public let state: InstanceState?
        /// The details of the status change reason for the instance.
        public let stateChangeReason: InstanceStateChangeReason?
        /// The timeline of the instance status over time.
        public let timeline: InstanceTimeline?

        public init(state: InstanceState? = nil, stateChangeReason: InstanceStateChangeReason? = nil, timeline: InstanceTimeline? = nil) {
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case stateChangeReason = "StateChangeReason"
            case timeline = "Timeline"
        }
    }

    public struct InstanceTimeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp)
        ]

        /// The creation date and time of the instance.
        public let creationDateTime: TimeStamp?
        /// The date and time when the instance was terminated.
        public let endDateTime: TimeStamp?
        /// The date and time when the instance was ready to perform tasks.
        public let readyDateTime: TimeStamp?

        public init(creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil, readyDateTime: TimeStamp? = nil) {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.readyDateTime = readyDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
            case readyDateTime = "ReadyDateTime"
        }
    }

    public struct InstanceTypeConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "BidPriceAsPercentageOfOnDemandPrice", required: false, type: .double), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "EbsConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", required: true, type: .string), 
            AWSShapeMember(label: "WeightedCapacity", required: false, type: .integer)
        ]

        /// The bid price for each EC2 Spot instance type as defined by InstanceType. Expressed in USD. If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%. 
        public let bidPrice: String?
        /// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by InstanceType. Expressed as a number (for example, 20 specifies 20%). If neither BidPrice nor BidPriceAsPercentageOfOnDemandPrice is provided, BidPriceAsPercentageOfOnDemandPrice defaults to 100%.
        public let bidPriceAsPercentageOfOnDemandPrice: Double?
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster.
        public let configurations: [Configuration]?
        /// The configuration of Amazon Elastic Block Storage (EBS) attached to each instance as defined by InstanceType. 
        public let ebsConfiguration: EbsConfiguration?
        /// An EC2 instance type, such as m3.xlarge. 
        public let instanceType: String
        /// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in InstanceFleetConfig. This value is 1 for a master instance fleet, and must be 1 or greater for core and task instance fleets. Defaults to 1 if not specified. 
        public let weightedCapacity: Int?

        public init(bidPrice: String? = nil, bidPriceAsPercentageOfOnDemandPrice: Double? = nil, configurations: [Configuration]? = nil, ebsConfiguration: EbsConfiguration? = nil, instanceType: String, weightedCapacity: Int? = nil) {
            self.bidPrice = bidPrice
            self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
            self.configurations = configurations
            self.ebsConfiguration = ebsConfiguration
            self.instanceType = instanceType
            self.weightedCapacity = weightedCapacity
        }

        public func validate(name: String) throws {
            try validate(self.bidPrice, name:"bidPrice", parent: name, max: 256)
            try validate(self.bidPrice, name:"bidPrice", parent: name, min: 0)
            try validate(self.bidPrice, name:"bidPrice", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.bidPriceAsPercentageOfOnDemandPrice, name:"bidPriceAsPercentageOfOnDemandPrice", parent: name, min: 0)
            try validate(self.instanceType, name:"instanceType", parent: name, max: 256)
            try validate(self.instanceType, name:"instanceType", parent: name, min: 1)
            try validate(self.instanceType, name:"instanceType", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.weightedCapacity, name:"weightedCapacity", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case bidPrice = "BidPrice"
            case bidPriceAsPercentageOfOnDemandPrice = "BidPriceAsPercentageOfOnDemandPrice"
            case configurations = "Configurations"
            case ebsConfiguration = "EbsConfiguration"
            case instanceType = "InstanceType"
            case weightedCapacity = "WeightedCapacity"
        }
    }

    public struct InstanceTypeSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BidPrice", required: false, type: .string), 
            AWSShapeMember(label: "BidPriceAsPercentageOfOnDemandPrice", required: false, type: .double), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "EbsBlockDevices", required: false, type: .list), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "WeightedCapacity", required: false, type: .integer)
        ]

        /// The bid price for each EC2 Spot instance type as defined by InstanceType. Expressed in USD.
        public let bidPrice: String?
        /// The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by InstanceType. Expressed as a number (for example, 20 specifies 20%).
        public let bidPriceAsPercentageOfOnDemandPrice: Double?
        /// A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software bundled with Amazon EMR.
        public let configurations: [Configuration]?
        /// The configuration of Amazon Elastic Block Storage (EBS) attached to each instance as defined by InstanceType.
        public let ebsBlockDevices: [EbsBlockDevice]?
        /// Evaluates to TRUE when the specified InstanceType is EBS-optimized.
        public let ebsOptimized: Bool?
        /// The EC2 instance type, for example m3.xlarge.
        public let instanceType: String?
        /// The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in InstanceFleetConfig. Capacity values represent performance characteristics such as vCPUs, memory, or I/O. If not specified, the default value is 1.
        public let weightedCapacity: Int?

        public init(bidPrice: String? = nil, bidPriceAsPercentageOfOnDemandPrice: Double? = nil, configurations: [Configuration]? = nil, ebsBlockDevices: [EbsBlockDevice]? = nil, ebsOptimized: Bool? = nil, instanceType: String? = nil, weightedCapacity: Int? = nil) {
            self.bidPrice = bidPrice
            self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
            self.configurations = configurations
            self.ebsBlockDevices = ebsBlockDevices
            self.ebsOptimized = ebsOptimized
            self.instanceType = instanceType
            self.weightedCapacity = weightedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case bidPrice = "BidPrice"
            case bidPriceAsPercentageOfOnDemandPrice = "BidPriceAsPercentageOfOnDemandPrice"
            case configurations = "Configurations"
            case ebsBlockDevices = "EbsBlockDevices"
            case ebsOptimized = "EbsOptimized"
            case instanceType = "InstanceType"
            case weightedCapacity = "WeightedCapacity"
        }
    }

    public struct JobFlowDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmiVersion", required: false, type: .string), 
            AWSShapeMember(label: "AutoScalingRole", required: false, type: .string), 
            AWSShapeMember(label: "BootstrapActions", required: false, type: .list), 
            AWSShapeMember(label: "ExecutionStatusDetail", required: true, type: .structure), 
            AWSShapeMember(label: "Instances", required: true, type: .structure), 
            AWSShapeMember(label: "JobFlowId", required: true, type: .string), 
            AWSShapeMember(label: "JobFlowRole", required: false, type: .string), 
            AWSShapeMember(label: "LogEncryptionKmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "LogUri", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ScaleDownBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "Steps", required: false, type: .list), 
            AWSShapeMember(label: "SupportedProducts", required: false, type: .list), 
            AWSShapeMember(label: "VisibleToAllUsers", required: false, type: .boolean)
        ]

        /// Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and later, ReleaseLabel is used. To specify a custom AMI, use CustomAmiID.
        public let amiVersion: String?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides a way for the automatic scaling feature to get the required permissions it needs to launch and terminate EC2 instances in an instance group.
        public let autoScalingRole: String?
        /// A list of the bootstrap actions run by the job flow.
        public let bootstrapActions: [BootstrapActionDetail]?
        /// Describes the execution status of the job flow.
        public let executionStatusDetail: JobFlowExecutionStatusDetail
        /// Describes the Amazon EC2 instances of the job flow.
        public let instances: JobFlowInstancesDetail
        /// The job flow identifier.
        public let jobFlowId: String
        /// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
        public let jobFlowRole: String?
        /// The AWS KMS customer master key (CMK) used for encrypting log files. This attribute is only available with EMR version 5.30.0 and later, excluding EMR 6.0.0.
        public let logEncryptionKmsKeyId: String?
        /// The location in Amazon S3 where log files for the job are stored.
        public let logUri: String?
        /// The name of the job flow.
        public let name: String
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public let scaleDownBehavior: ScaleDownBehavior?
        /// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
        public let serviceRole: String?
        /// A list of steps run by the job flow.
        public let steps: [StepDetail]?
        /// A list of strings set by third party software when the job flow is launched. If you are not using third party software to manage the job flow this value is empty.
        public let supportedProducts: [String]?
        /// Indicates whether the cluster is visible to all IAM users of the AWS account associated with the cluster. The default value, true, indicates that all IAM users in the AWS account can perform cluster actions if they have the proper IAM policy permissions. If this value is false, only the IAM user that created the cluster can perform actions. This value can be changed on a running cluster by using the SetVisibleToAllUsers action. You can override the default value of true when you create a cluster by using the VisibleToAllUsers parameter of the RunJobFlow action.
        public let visibleToAllUsers: Bool?

        public init(amiVersion: String? = nil, autoScalingRole: String? = nil, bootstrapActions: [BootstrapActionDetail]? = nil, executionStatusDetail: JobFlowExecutionStatusDetail, instances: JobFlowInstancesDetail, jobFlowId: String, jobFlowRole: String? = nil, logEncryptionKmsKeyId: String? = nil, logUri: String? = nil, name: String, scaleDownBehavior: ScaleDownBehavior? = nil, serviceRole: String? = nil, steps: [StepDetail]? = nil, supportedProducts: [String]? = nil, visibleToAllUsers: Bool? = nil) {
            self.amiVersion = amiVersion
            self.autoScalingRole = autoScalingRole
            self.bootstrapActions = bootstrapActions
            self.executionStatusDetail = executionStatusDetail
            self.instances = instances
            self.jobFlowId = jobFlowId
            self.jobFlowRole = jobFlowRole
            self.logEncryptionKmsKeyId = logEncryptionKmsKeyId
            self.logUri = logUri
            self.name = name
            self.scaleDownBehavior = scaleDownBehavior
            self.serviceRole = serviceRole
            self.steps = steps
            self.supportedProducts = supportedProducts
            self.visibleToAllUsers = visibleToAllUsers
        }

        private enum CodingKeys: String, CodingKey {
            case amiVersion = "AmiVersion"
            case autoScalingRole = "AutoScalingRole"
            case bootstrapActions = "BootstrapActions"
            case executionStatusDetail = "ExecutionStatusDetail"
            case instances = "Instances"
            case jobFlowId = "JobFlowId"
            case jobFlowRole = "JobFlowRole"
            case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
            case logUri = "LogUri"
            case name = "Name"
            case scaleDownBehavior = "ScaleDownBehavior"
            case serviceRole = "ServiceRole"
            case steps = "Steps"
            case supportedProducts = "SupportedProducts"
            case visibleToAllUsers = "VisibleToAllUsers"
        }
    }

    public struct JobFlowExecutionStatusDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastStateChangeReason", required: false, type: .string), 
            AWSShapeMember(label: "ReadyDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: true, type: .enum)
        ]

        /// The creation date and time of the job flow.
        public let creationDateTime: TimeStamp
        /// The completion date and time of the job flow.
        public let endDateTime: TimeStamp?
        /// Description of the job flow last changed state.
        public let lastStateChangeReason: String?
        /// The date and time when the job flow was ready to start running bootstrap actions.
        public let readyDateTime: TimeStamp?
        /// The start date and time of the job flow.
        public let startDateTime: TimeStamp?
        /// The state of the job flow.
        public let state: JobFlowExecutionState

        public init(creationDateTime: TimeStamp, endDateTime: TimeStamp? = nil, lastStateChangeReason: String? = nil, readyDateTime: TimeStamp? = nil, startDateTime: TimeStamp? = nil, state: JobFlowExecutionState) {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.lastStateChangeReason = lastStateChangeReason
            self.readyDateTime = readyDateTime
            self.startDateTime = startDateTime
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
            case lastStateChangeReason = "LastStateChangeReason"
            case readyDateTime = "ReadyDateTime"
            case startDateTime = "StartDateTime"
            case state = "State"
        }
    }

    public struct JobFlowInstancesConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalMasterSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "AdditionalSlaveSecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "Ec2KeyName", required: false, type: .string), 
            AWSShapeMember(label: "Ec2SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "Ec2SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "EmrManagedMasterSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "EmrManagedSlaveSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "HadoopVersion", required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceFleets", required: false, type: .list), 
            AWSShapeMember(label: "InstanceGroups", required: false, type: .list), 
            AWSShapeMember(label: "KeepJobFlowAliveWhenNoSteps", required: false, type: .boolean), 
            AWSShapeMember(label: "MasterInstanceType", required: false, type: .string), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "ServiceAccessSecurityGroup", required: false, type: .string), 
            AWSShapeMember(label: "SlaveInstanceType", required: false, type: .string), 
            AWSShapeMember(label: "TerminationProtected", required: false, type: .boolean)
        ]

        /// A list of additional Amazon EC2 security group IDs for the master node.
        public let additionalMasterSecurityGroups: [String]?
        /// A list of additional Amazon EC2 security group IDs for the core and task nodes.
        public let additionalSlaveSecurityGroups: [String]?
        /// The name of the EC2 key pair that can be used to ssh to the master node as the user called "hadoop."
        public let ec2KeyName: String?
        /// Applies to clusters that use the uniform instance group configuration. To launch the cluster in Amazon Virtual Private Cloud (Amazon VPC), set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value and your account supports EC2-Classic, the cluster launches in EC2-Classic.
        public let ec2SubnetId: String?
        /// Applies to clusters that use the instance fleet configuration. When multiple EC2 subnet IDs are specified, Amazon EMR evaluates them and launches instances in the optimal subnet.  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. 
        public let ec2SubnetIds: [String]?
        /// The identifier of the Amazon EC2 security group for the master node.
        public let emrManagedMasterSecurityGroup: String?
        /// The identifier of the Amazon EC2 security group for the core and task nodes.
        public let emrManagedSlaveSecurityGroup: String?
        /// Applies only to Amazon EMR release versions earlier than 4.0. The Hadoop version for the cluster. Valid inputs are "0.18" (deprecated), "0.20" (deprecated), "0.20.205" (deprecated), "1.0.3", "2.2.0", or "2.4.0". If you do not set this value, the default of 0.18 is used, unless the AmiVersion parameter is set in the RunJobFlow call, in which case the default version of Hadoop for that AMI version is used.
        public let hadoopVersion: String?
        /// The number of EC2 instances in the cluster.
        public let instanceCount: Int?
        ///  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.  Describes the EC2 instances and instance configurations for clusters that use the instance fleet configuration.
        public let instanceFleets: [InstanceFleetConfig]?
        /// Configuration for the instance groups in a cluster.
        public let instanceGroups: [InstanceGroupConfig]?
        /// Specifies whether the cluster should remain available after completing all steps.
        public let keepJobFlowAliveWhenNoSteps: Bool?
        /// The EC2 instance type of the master node.
        public let masterInstanceType: String?
        /// The Availability Zone in which the cluster runs.
        public let placement: PlacementType?
        /// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
        public let serviceAccessSecurityGroup: String?
        /// The EC2 instance type of the core and task nodes.
        public let slaveInstanceType: String?
        /// Specifies whether to lock the cluster to prevent the Amazon EC2 instances from being terminated by API call, user intervention, or in the event of a job-flow error.
        public let terminationProtected: Bool?

        public init(additionalMasterSecurityGroups: [String]? = nil, additionalSlaveSecurityGroups: [String]? = nil, ec2KeyName: String? = nil, ec2SubnetId: String? = nil, ec2SubnetIds: [String]? = nil, emrManagedMasterSecurityGroup: String? = nil, emrManagedSlaveSecurityGroup: String? = nil, hadoopVersion: String? = nil, instanceCount: Int? = nil, instanceFleets: [InstanceFleetConfig]? = nil, instanceGroups: [InstanceGroupConfig]? = nil, keepJobFlowAliveWhenNoSteps: Bool? = nil, masterInstanceType: String? = nil, placement: PlacementType? = nil, serviceAccessSecurityGroup: String? = nil, slaveInstanceType: String? = nil, terminationProtected: Bool? = nil) {
            self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
            self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
            self.ec2KeyName = ec2KeyName
            self.ec2SubnetId = ec2SubnetId
            self.ec2SubnetIds = ec2SubnetIds
            self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
            self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
            self.hadoopVersion = hadoopVersion
            self.instanceCount = instanceCount
            self.instanceFleets = instanceFleets
            self.instanceGroups = instanceGroups
            self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
            self.masterInstanceType = masterInstanceType
            self.placement = placement
            self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
            self.slaveInstanceType = slaveInstanceType
            self.terminationProtected = terminationProtected
        }

        public func validate(name: String) throws {
            try self.additionalMasterSecurityGroups?.forEach {
                try validate($0, name: "additionalMasterSecurityGroups[]", parent: name, max: 256)
                try validate($0, name: "additionalMasterSecurityGroups[]", parent: name, min: 0)
                try validate($0, name: "additionalMasterSecurityGroups[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try self.additionalSlaveSecurityGroups?.forEach {
                try validate($0, name: "additionalSlaveSecurityGroups[]", parent: name, max: 256)
                try validate($0, name: "additionalSlaveSecurityGroups[]", parent: name, min: 0)
                try validate($0, name: "additionalSlaveSecurityGroups[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.ec2KeyName, name:"ec2KeyName", parent: name, max: 256)
            try validate(self.ec2KeyName, name:"ec2KeyName", parent: name, min: 0)
            try validate(self.ec2KeyName, name:"ec2KeyName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.ec2SubnetId, name:"ec2SubnetId", parent: name, max: 256)
            try validate(self.ec2SubnetId, name:"ec2SubnetId", parent: name, min: 0)
            try validate(self.ec2SubnetId, name:"ec2SubnetId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.ec2SubnetIds?.forEach {
                try validate($0, name: "ec2SubnetIds[]", parent: name, max: 256)
                try validate($0, name: "ec2SubnetIds[]", parent: name, min: 0)
                try validate($0, name: "ec2SubnetIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.emrManagedMasterSecurityGroup, name:"emrManagedMasterSecurityGroup", parent: name, max: 256)
            try validate(self.emrManagedMasterSecurityGroup, name:"emrManagedMasterSecurityGroup", parent: name, min: 0)
            try validate(self.emrManagedMasterSecurityGroup, name:"emrManagedMasterSecurityGroup", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.emrManagedSlaveSecurityGroup, name:"emrManagedSlaveSecurityGroup", parent: name, max: 256)
            try validate(self.emrManagedSlaveSecurityGroup, name:"emrManagedSlaveSecurityGroup", parent: name, min: 0)
            try validate(self.emrManagedSlaveSecurityGroup, name:"emrManagedSlaveSecurityGroup", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.hadoopVersion, name:"hadoopVersion", parent: name, max: 256)
            try validate(self.hadoopVersion, name:"hadoopVersion", parent: name, min: 0)
            try validate(self.hadoopVersion, name:"hadoopVersion", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.instanceFleets?.forEach {
                try $0.validate(name: "\(name).instanceFleets[]")
            }
            try self.instanceGroups?.forEach {
                try $0.validate(name: "\(name).instanceGroups[]")
            }
            try validate(self.masterInstanceType, name:"masterInstanceType", parent: name, max: 256)
            try validate(self.masterInstanceType, name:"masterInstanceType", parent: name, min: 1)
            try validate(self.masterInstanceType, name:"masterInstanceType", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.placement?.validate(name: "\(name).placement")
            try validate(self.serviceAccessSecurityGroup, name:"serviceAccessSecurityGroup", parent: name, max: 256)
            try validate(self.serviceAccessSecurityGroup, name:"serviceAccessSecurityGroup", parent: name, min: 0)
            try validate(self.serviceAccessSecurityGroup, name:"serviceAccessSecurityGroup", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.slaveInstanceType, name:"slaveInstanceType", parent: name, max: 256)
            try validate(self.slaveInstanceType, name:"slaveInstanceType", parent: name, min: 1)
            try validate(self.slaveInstanceType, name:"slaveInstanceType", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case additionalMasterSecurityGroups = "AdditionalMasterSecurityGroups"
            case additionalSlaveSecurityGroups = "AdditionalSlaveSecurityGroups"
            case ec2KeyName = "Ec2KeyName"
            case ec2SubnetId = "Ec2SubnetId"
            case ec2SubnetIds = "Ec2SubnetIds"
            case emrManagedMasterSecurityGroup = "EmrManagedMasterSecurityGroup"
            case emrManagedSlaveSecurityGroup = "EmrManagedSlaveSecurityGroup"
            case hadoopVersion = "HadoopVersion"
            case instanceCount = "InstanceCount"
            case instanceFleets = "InstanceFleets"
            case instanceGroups = "InstanceGroups"
            case keepJobFlowAliveWhenNoSteps = "KeepJobFlowAliveWhenNoSteps"
            case masterInstanceType = "MasterInstanceType"
            case placement = "Placement"
            case serviceAccessSecurityGroup = "ServiceAccessSecurityGroup"
            case slaveInstanceType = "SlaveInstanceType"
            case terminationProtected = "TerminationProtected"
        }
    }

    public struct JobFlowInstancesDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ec2KeyName", required: false, type: .string), 
            AWSShapeMember(label: "Ec2SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "HadoopVersion", required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer), 
            AWSShapeMember(label: "InstanceGroups", required: false, type: .list), 
            AWSShapeMember(label: "KeepJobFlowAliveWhenNoSteps", required: false, type: .boolean), 
            AWSShapeMember(label: "MasterInstanceId", required: false, type: .string), 
            AWSShapeMember(label: "MasterInstanceType", required: true, type: .string), 
            AWSShapeMember(label: "MasterPublicDnsName", required: false, type: .string), 
            AWSShapeMember(label: "NormalizedInstanceHours", required: false, type: .integer), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "SlaveInstanceType", required: true, type: .string), 
            AWSShapeMember(label: "TerminationProtected", required: false, type: .boolean)
        ]

        /// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
        public let ec2KeyName: String?
        /// For clusters launched within Amazon Virtual Private Cloud, this is the identifier of the subnet where the cluster was launched.
        public let ec2SubnetId: String?
        /// The Hadoop version for the cluster.
        public let hadoopVersion: String?
        /// The number of Amazon EC2 instances in the cluster. If the value is 1, the same instance serves as both the master and core and task node. If the value is greater than 1, one instance is the master node and all others are core and task nodes.
        public let instanceCount: Int
        /// Details about the instance groups in a cluster.
        public let instanceGroups: [InstanceGroupDetail]?
        /// Specifies whether the cluster should remain available after completing all steps.
        public let keepJobFlowAliveWhenNoSteps: Bool?
        /// The Amazon EC2 instance identifier of the master node.
        public let masterInstanceId: String?
        /// The Amazon EC2 master node instance type.
        public let masterInstanceType: String
        /// The DNS name of the master node. If the cluster is on a private subnet, this is the private DNS name. On a public subnet, this is the public DNS name.
        public let masterPublicDnsName: String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour that an m1.small runs. Larger instances are weighted more, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public let normalizedInstanceHours: Int?
        /// The Amazon EC2 Availability Zone for the cluster.
        public let placement: PlacementType?
        /// The Amazon EC2 core and task node instance type.
        public let slaveInstanceType: String
        /// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
        public let terminationProtected: Bool?

        public init(ec2KeyName: String? = nil, ec2SubnetId: String? = nil, hadoopVersion: String? = nil, instanceCount: Int, instanceGroups: [InstanceGroupDetail]? = nil, keepJobFlowAliveWhenNoSteps: Bool? = nil, masterInstanceId: String? = nil, masterInstanceType: String, masterPublicDnsName: String? = nil, normalizedInstanceHours: Int? = nil, placement: PlacementType? = nil, slaveInstanceType: String, terminationProtected: Bool? = nil) {
            self.ec2KeyName = ec2KeyName
            self.ec2SubnetId = ec2SubnetId
            self.hadoopVersion = hadoopVersion
            self.instanceCount = instanceCount
            self.instanceGroups = instanceGroups
            self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
            self.masterInstanceId = masterInstanceId
            self.masterInstanceType = masterInstanceType
            self.masterPublicDnsName = masterPublicDnsName
            self.normalizedInstanceHours = normalizedInstanceHours
            self.placement = placement
            self.slaveInstanceType = slaveInstanceType
            self.terminationProtected = terminationProtected
        }

        private enum CodingKeys: String, CodingKey {
            case ec2KeyName = "Ec2KeyName"
            case ec2SubnetId = "Ec2SubnetId"
            case hadoopVersion = "HadoopVersion"
            case instanceCount = "InstanceCount"
            case instanceGroups = "InstanceGroups"
            case keepJobFlowAliveWhenNoSteps = "KeepJobFlowAliveWhenNoSteps"
            case masterInstanceId = "MasterInstanceId"
            case masterInstanceType = "MasterInstanceType"
            case masterPublicDnsName = "MasterPublicDnsName"
            case normalizedInstanceHours = "NormalizedInstanceHours"
            case placement = "Placement"
            case slaveInstanceType = "SlaveInstanceType"
            case terminationProtected = "TerminationProtected"
        }
    }

    public struct KerberosAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ADDomainJoinPassword", required: false, type: .string), 
            AWSShapeMember(label: "ADDomainJoinUser", required: false, type: .string), 
            AWSShapeMember(label: "CrossRealmTrustPrincipalPassword", required: false, type: .string), 
            AWSShapeMember(label: "KdcAdminPassword", required: true, type: .string), 
            AWSShapeMember(label: "Realm", required: true, type: .string)
        ]

        /// The Active Directory password for ADDomainJoinUser.
        public let aDDomainJoinPassword: String?
        /// Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain.
        public let aDDomainJoinUser: String?
        /// Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms.
        public let crossRealmTrustPrincipalPassword: String?
        /// The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster.
        public let kdcAdminPassword: String
        /// The name of the Kerberos realm to which all nodes in a cluster belong. For example, EC2.INTERNAL. 
        public let realm: String

        public init(aDDomainJoinPassword: String? = nil, aDDomainJoinUser: String? = nil, crossRealmTrustPrincipalPassword: String? = nil, kdcAdminPassword: String, realm: String) {
            self.aDDomainJoinPassword = aDDomainJoinPassword
            self.aDDomainJoinUser = aDDomainJoinUser
            self.crossRealmTrustPrincipalPassword = crossRealmTrustPrincipalPassword
            self.kdcAdminPassword = kdcAdminPassword
            self.realm = realm
        }

        public func validate(name: String) throws {
            try validate(self.aDDomainJoinPassword, name:"aDDomainJoinPassword", parent: name, max: 256)
            try validate(self.aDDomainJoinPassword, name:"aDDomainJoinPassword", parent: name, min: 0)
            try validate(self.aDDomainJoinPassword, name:"aDDomainJoinPassword", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.aDDomainJoinUser, name:"aDDomainJoinUser", parent: name, max: 256)
            try validate(self.aDDomainJoinUser, name:"aDDomainJoinUser", parent: name, min: 0)
            try validate(self.aDDomainJoinUser, name:"aDDomainJoinUser", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.crossRealmTrustPrincipalPassword, name:"crossRealmTrustPrincipalPassword", parent: name, max: 256)
            try validate(self.crossRealmTrustPrincipalPassword, name:"crossRealmTrustPrincipalPassword", parent: name, min: 0)
            try validate(self.crossRealmTrustPrincipalPassword, name:"crossRealmTrustPrincipalPassword", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.kdcAdminPassword, name:"kdcAdminPassword", parent: name, max: 256)
            try validate(self.kdcAdminPassword, name:"kdcAdminPassword", parent: name, min: 0)
            try validate(self.kdcAdminPassword, name:"kdcAdminPassword", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.realm, name:"realm", parent: name, max: 256)
            try validate(self.realm, name:"realm", parent: name, min: 0)
            try validate(self.realm, name:"realm", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case aDDomainJoinPassword = "ADDomainJoinPassword"
            case aDDomainJoinUser = "ADDomainJoinUser"
            case crossRealmTrustPrincipalPassword = "CrossRealmTrustPrincipalPassword"
            case kdcAdminPassword = "KdcAdminPassword"
            case realm = "Realm"
        }
    }

    public struct KeyValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]

        /// The unique identifier of a key value pair.
        public let key: String?
        /// The value part of the identified key.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.key, name:"key", parent: name, max: 10280)
            try validate(self.key, name:"key", parent: name, min: 0)
            try validate(self.key, name:"key", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.value, name:"value", parent: name, max: 10280)
            try validate(self.value, name:"value", parent: name, min: 0)
            try validate(self.value, name:"value", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct ListBootstrapActionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// The cluster identifier for the bootstrap actions to list.
        public let clusterId: String
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(clusterId: String, marker: String? = nil) {
            self.clusterId = clusterId
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case marker = "Marker"
        }
    }

    public struct ListBootstrapActionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BootstrapActions", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// The bootstrap actions associated with the cluster.
        public let bootstrapActions: [Command]?
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(bootstrapActions: [Command]? = nil, marker: String? = nil) {
            self.bootstrapActions = bootstrapActions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case bootstrapActions = "BootstrapActions"
            case marker = "Marker"
        }
    }

    public struct ListClustersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterStates", required: false, type: .list), 
            AWSShapeMember(label: "CreatedAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// The cluster state filters to apply when listing clusters.
        public let clusterStates: [ClusterState]?
        /// The creation date and time beginning value filter for listing clusters.
        public let createdAfter: TimeStamp?
        /// The creation date and time end value filter for listing clusters.
        public let createdBefore: TimeStamp?
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(clusterStates: [ClusterState]? = nil, createdAfter: TimeStamp? = nil, createdBefore: TimeStamp? = nil, marker: String? = nil) {
            self.clusterStates = clusterStates
            self.createdAfter = createdAfter
            self.createdBefore = createdBefore
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case clusterStates = "ClusterStates"
            case createdAfter = "CreatedAfter"
            case createdBefore = "CreatedBefore"
            case marker = "Marker"
        }
    }

    public struct ListClustersOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Clusters", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// The list of clusters for the account based on the given filters.
        public let clusters: [ClusterSummary]?
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(clusters: [ClusterSummary]? = nil, marker: String? = nil) {
            self.clusters = clusters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case clusters = "Clusters"
            case marker = "Marker"
        }
    }

    public struct ListInstanceFleetsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// The unique identifier of the cluster.
        public let clusterId: String
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(clusterId: String, marker: String? = nil) {
            self.clusterId = clusterId
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case marker = "Marker"
        }
    }

    public struct ListInstanceFleetsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceFleets", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// The list of instance fleets for the cluster and given filters.
        public let instanceFleets: [InstanceFleet]?
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(instanceFleets: [InstanceFleet]? = nil, marker: String? = nil) {
            self.instanceFleets = instanceFleets
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case instanceFleets = "InstanceFleets"
            case marker = "Marker"
        }
    }

    public struct ListInstanceGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// The identifier of the cluster for which to list the instance groups.
        public let clusterId: String
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(clusterId: String, marker: String? = nil) {
            self.clusterId = clusterId
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case marker = "Marker"
        }
    }

    public struct ListInstanceGroupsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceGroups", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// The list of instance groups for the cluster and given filters.
        public let instanceGroups: [InstanceGroup]?
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(instanceGroups: [InstanceGroup]? = nil, marker: String? = nil) {
            self.instanceGroups = instanceGroups
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case instanceGroups = "InstanceGroups"
            case marker = "Marker"
        }
    }

    public struct ListInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceFleetId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceFleetType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceGroupId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroupTypes", required: false, type: .list), 
            AWSShapeMember(label: "InstanceStates", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// The identifier of the cluster for which to list the instances.
        public let clusterId: String
        /// The unique identifier of the instance fleet.
        public let instanceFleetId: String?
        /// The node type of the instance fleet. For example MASTER, CORE, or TASK.
        public let instanceFleetType: InstanceFleetType?
        /// The identifier of the instance group for which to list the instances.
        public let instanceGroupId: String?
        /// The type of instance group for which to list the instances.
        public let instanceGroupTypes: [InstanceGroupType]?
        /// A list of instance states that will filter the instances returned with this request.
        public let instanceStates: [InstanceState]?
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(clusterId: String, instanceFleetId: String? = nil, instanceFleetType: InstanceFleetType? = nil, instanceGroupId: String? = nil, instanceGroupTypes: [InstanceGroupType]? = nil, instanceStates: [InstanceState]? = nil, marker: String? = nil) {
            self.clusterId = clusterId
            self.instanceFleetId = instanceFleetId
            self.instanceFleetType = instanceFleetType
            self.instanceGroupId = instanceGroupId
            self.instanceGroupTypes = instanceGroupTypes
            self.instanceStates = instanceStates
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceFleetId = "InstanceFleetId"
            case instanceFleetType = "InstanceFleetType"
            case instanceGroupId = "InstanceGroupId"
            case instanceGroupTypes = "InstanceGroupTypes"
            case instanceStates = "InstanceStates"
            case marker = "Marker"
        }
    }

    public struct ListInstancesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Instances", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// The list of instances for the cluster and given filters.
        public let instances: [Instance]?
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?

        public init(instances: [Instance]? = nil, marker: String? = nil) {
            self.instances = instances
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "Instances"
            case marker = "Marker"
        }
    }

    public struct ListNotebookExecutionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EditorId", required: false, type: .string), 
            AWSShapeMember(label: "From", required: false, type: .timestamp), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "To", required: false, type: .timestamp)
        ]

        /// The unique ID of the editor associated with the notebook execution.
        public let editorId: String?
        /// The beginning of time range filter for listing notebook executions. The default is the timestamp of 30 days ago.
        public let from: TimeStamp?
        /// The pagination token, returned by a previous ListNotebookExecutions call, that indicates the start of the list for this ListNotebookExecutions call.
        public let marker: String?
        /// The status filter for listing notebook executions.    START_PENDING indicates that the cluster has received the execution request but execution has not begun.    STARTING indicates that the execution is starting on the cluster.    RUNNING indicates that the execution is being processed by the cluster.    FINISHING indicates that execution processing is in the final stages.    FINISHED indicates that the execution has completed without error.    FAILING indicates that the execution is failing and will not finish successfully.    FAILED indicates that the execution failed.    STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.    STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.    STOPPED indicates that the execution stopped because of a StopNotebookExecution request.  
        public let status: NotebookExecutionStatus?
        /// The end of time range filter for listing notebook executions. The default is the current timestamp.
        public let to: TimeStamp?

        public init(editorId: String? = nil, from: TimeStamp? = nil, marker: String? = nil, status: NotebookExecutionStatus? = nil, to: TimeStamp? = nil) {
            self.editorId = editorId
            self.from = from
            self.marker = marker
            self.status = status
            self.to = to
        }

        public func validate(name: String) throws {
            try validate(self.editorId, name:"editorId", parent: name, max: 256)
            try validate(self.editorId, name:"editorId", parent: name, min: 0)
            try validate(self.editorId, name:"editorId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case editorId = "EditorId"
            case from = "From"
            case marker = "Marker"
            case status = "Status"
            case to = "To"
        }
    }

    public struct ListNotebookExecutionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "NotebookExecutions", required: false, type: .list)
        ]

        /// A pagination token that a subsequent ListNotebookExecutions can use to determine the next set of results to retrieve.
        public let marker: String?
        /// A list of notebook executions.
        public let notebookExecutions: [NotebookExecutionSummary]?

        public init(marker: String? = nil, notebookExecutions: [NotebookExecutionSummary]? = nil) {
            self.marker = marker
            self.notebookExecutions = notebookExecutions
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case notebookExecutions = "NotebookExecutions"
        }
    }

    public struct ListSecurityConfigurationsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]

        /// The pagination token that indicates the set of results to retrieve.
        public let marker: String?

        public init(marker: String? = nil) {
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
        }
    }

    public struct ListSecurityConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "SecurityConfigurations", required: false, type: .list)
        ]

        /// A pagination token that indicates the next set of results to retrieve. Include the marker in the next ListSecurityConfiguration call to retrieve the next page of results, if required.
        public let marker: String?
        /// The creation date and time, and name, of each security configuration.
        public let securityConfigurations: [SecurityConfigurationSummary]?

        public init(marker: String? = nil, securityConfigurations: [SecurityConfigurationSummary]? = nil) {
            self.marker = marker
            self.securityConfigurations = securityConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case securityConfigurations = "SecurityConfigurations"
        }
    }

    public struct ListStepsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "StepIds", required: false, type: .list), 
            AWSShapeMember(label: "StepStates", required: false, type: .list)
        ]

        /// The identifier of the cluster for which to list the steps.
        public let clusterId: String
        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The filter to limit the step list based on the identifier of the steps. You can specify a maximum of ten Step IDs. The character constraint applies to the overall length of the array.
        public let stepIds: [String]?
        /// The filter to limit the step list based on certain states.
        public let stepStates: [StepState]?

        public init(clusterId: String, marker: String? = nil, stepIds: [String]? = nil, stepStates: [StepState]? = nil) {
            self.clusterId = clusterId
            self.marker = marker
            self.stepIds = stepIds
            self.stepStates = stepStates
        }

        public func validate(name: String) throws {
            try self.stepIds?.forEach {
                try validate($0, name: "stepIds[]", parent: name, max: 10280)
                try validate($0, name: "stepIds[]", parent: name, min: 0)
                try validate($0, name: "stepIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case marker = "Marker"
            case stepIds = "StepIds"
            case stepStates = "StepStates"
        }
    }

    public struct ListStepsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Steps", required: false, type: .list)
        ]

        /// The pagination token that indicates the next set of results to retrieve.
        public let marker: String?
        /// The filtered list of steps for the cluster.
        public let steps: [StepSummary]?

        public init(marker: String? = nil, steps: [StepSummary]? = nil) {
            self.marker = marker
            self.steps = steps
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case steps = "Steps"
        }
    }

    public struct ManagedScalingPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComputeLimits", required: false, type: .structure)
        ]

        /// The EC2 unit limits for a managed scaling policy. The managed scaling activity of a cluster is not allowed to go above or below these limits. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
        public let computeLimits: ComputeLimits?

        public init(computeLimits: ComputeLimits? = nil) {
            self.computeLimits = computeLimits
        }

        private enum CodingKeys: String, CodingKey {
            case computeLimits = "ComputeLimits"
        }
    }

    public struct MetricDimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]

        /// The dimension name.
        public let key: String?
        /// The dimension value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct ModifyClusterInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "StepConcurrencyLevel", required: false, type: .integer)
        ]

        /// The unique identifier of the cluster.
        public let clusterId: String
        /// The number of steps that can be executed concurrently. You can specify a maximum of 256 steps. 
        public let stepConcurrencyLevel: Int?

        public init(clusterId: String, stepConcurrencyLevel: Int? = nil) {
            self.clusterId = clusterId
            self.stepConcurrencyLevel = stepConcurrencyLevel
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case stepConcurrencyLevel = "StepConcurrencyLevel"
        }
    }

    public struct ModifyClusterOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StepConcurrencyLevel", required: false, type: .integer)
        ]

        /// The number of steps that can be executed concurrently.
        public let stepConcurrencyLevel: Int?

        public init(stepConcurrencyLevel: Int? = nil) {
            self.stepConcurrencyLevel = stepConcurrencyLevel
        }

        private enum CodingKeys: String, CodingKey {
            case stepConcurrencyLevel = "StepConcurrencyLevel"
        }
    }

    public struct ModifyInstanceFleetInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceFleet", required: true, type: .structure)
        ]

        /// The unique identifier of the cluster.
        public let clusterId: String
        /// The unique identifier of the instance fleet.
        public let instanceFleet: InstanceFleetModifyConfig

        public init(clusterId: String, instanceFleet: InstanceFleetModifyConfig) {
            self.clusterId = clusterId
            self.instanceFleet = instanceFleet
        }

        public func validate(name: String) throws {
            try self.instanceFleet.validate(name: "\(name).instanceFleet")
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceFleet = "InstanceFleet"
        }
    }

    public struct ModifyInstanceGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroups", required: false, type: .list)
        ]

        /// The ID of the cluster to which the instance group belongs.
        public let clusterId: String?
        /// Instance groups to change.
        public let instanceGroups: [InstanceGroupModifyConfig]?

        public init(clusterId: String? = nil, instanceGroups: [InstanceGroupModifyConfig]? = nil) {
            self.clusterId = clusterId
            self.instanceGroups = instanceGroups
        }

        public func validate(name: String) throws {
            try self.instanceGroups?.forEach {
                try $0.validate(name: "\(name).instanceGroups[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceGroups = "InstanceGroups"
        }
    }

    public struct NotebookExecution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "EditorId", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ExecutionEngine", required: false, type: .structure), 
            AWSShapeMember(label: "LastStateChangeReason", required: false, type: .string), 
            AWSShapeMember(label: "NotebookExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "NotebookExecutionName", required: false, type: .string), 
            AWSShapeMember(label: "NotebookInstanceSecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "NotebookParams", required: false, type: .string), 
            AWSShapeMember(label: "OutputNotebookURI", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]

        /// The Amazon Resource Name (ARN) of the notebook execution.
        public let arn: String?
        /// The unique identifier of the EMR Notebook that is used for the notebook execution.
        public let editorId: String?
        /// The timestamp when notebook execution ended.
        public let endTime: TimeStamp?
        /// The execution engine, such as an EMR cluster, used to run the EMR notebook and perform the notebook execution.
        public let executionEngine: ExecutionEngineConfig?
        /// The reason for the latest status change of the notebook execution.
        public let lastStateChangeReason: String?
        /// The unique identifier of a notebook execution.
        public let notebookExecutionId: String?
        /// A name for the notebook execution.
        public let notebookExecutionName: String?
        /// The unique identifier of the EC2 security group associated with the EMR Notebook instance. For more information see Specifying EC2 Security Groups for EMR Notebooks in the EMR Management Guide.
        public let notebookInstanceSecurityGroupId: String?
        /// Input parameters in JSON format passed to the EMR Notebook at runtime for execution.
        public let notebookParams: String?
        /// The location of the notebook execution's output file in Amazon S3.
        public let outputNotebookURI: String?
        /// The timestamp when notebook execution started.
        public let startTime: TimeStamp?
        /// The status of the notebook execution.    START_PENDING indicates that the cluster has received the execution request but execution has not begun.    STARTING indicates that the execution is starting on the cluster.    RUNNING indicates that the execution is being processed by the cluster.    FINISHING indicates that execution processing is in the final stages.    FINISHED indicates that the execution has completed without error.    FAILING indicates that the execution is failing and will not finish successfully.    FAILED indicates that the execution failed.    STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.    STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.    STOPPED indicates that the execution stopped because of a StopNotebookExecution request.  
        public let status: NotebookExecutionStatus?
        /// A list of tags associated with a notebook execution. Tags are user-defined key value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.
        public let tags: [Tag]?

        public init(arn: String? = nil, editorId: String? = nil, endTime: TimeStamp? = nil, executionEngine: ExecutionEngineConfig? = nil, lastStateChangeReason: String? = nil, notebookExecutionId: String? = nil, notebookExecutionName: String? = nil, notebookInstanceSecurityGroupId: String? = nil, notebookParams: String? = nil, outputNotebookURI: String? = nil, startTime: TimeStamp? = nil, status: NotebookExecutionStatus? = nil, tags: [Tag]? = nil) {
            self.arn = arn
            self.editorId = editorId
            self.endTime = endTime
            self.executionEngine = executionEngine
            self.lastStateChangeReason = lastStateChangeReason
            self.notebookExecutionId = notebookExecutionId
            self.notebookExecutionName = notebookExecutionName
            self.notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId
            self.notebookParams = notebookParams
            self.outputNotebookURI = outputNotebookURI
            self.startTime = startTime
            self.status = status
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case editorId = "EditorId"
            case endTime = "EndTime"
            case executionEngine = "ExecutionEngine"
            case lastStateChangeReason = "LastStateChangeReason"
            case notebookExecutionId = "NotebookExecutionId"
            case notebookExecutionName = "NotebookExecutionName"
            case notebookInstanceSecurityGroupId = "NotebookInstanceSecurityGroupId"
            case notebookParams = "NotebookParams"
            case outputNotebookURI = "OutputNotebookURI"
            case startTime = "StartTime"
            case status = "Status"
            case tags = "Tags"
        }
    }

    public struct NotebookExecutionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EditorId", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "NotebookExecutionId", required: false, type: .string), 
            AWSShapeMember(label: "NotebookExecutionName", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]

        /// The unique identifier of the editor associated with the notebook execution.
        public let editorId: String?
        /// The timestamp when notebook execution started.
        public let endTime: TimeStamp?
        /// The unique identifier of the notebook execution.
        public let notebookExecutionId: String?
        /// The name of the notebook execution.
        public let notebookExecutionName: String?
        /// The timestamp when notebook execution started.
        public let startTime: TimeStamp?
        /// The status of the notebook execution.    START_PENDING indicates that the cluster has received the execution request but execution has not begun.    STARTING indicates that the execution is starting on the cluster.    RUNNING indicates that the execution is being processed by the cluster.    FINISHING indicates that execution processing is in the final stages.    FINISHED indicates that the execution has completed without error.    FAILING indicates that the execution is failing and will not finish successfully.    FAILED indicates that the execution failed.    STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.    STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.    STOPPED indicates that the execution stopped because of a StopNotebookExecution request.  
        public let status: NotebookExecutionStatus?

        public init(editorId: String? = nil, endTime: TimeStamp? = nil, notebookExecutionId: String? = nil, notebookExecutionName: String? = nil, startTime: TimeStamp? = nil, status: NotebookExecutionStatus? = nil) {
            self.editorId = editorId
            self.endTime = endTime
            self.notebookExecutionId = notebookExecutionId
            self.notebookExecutionName = notebookExecutionName
            self.startTime = startTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case editorId = "EditorId"
            case endTime = "EndTime"
            case notebookExecutionId = "NotebookExecutionId"
            case notebookExecutionName = "NotebookExecutionName"
            case startTime = "StartTime"
            case status = "Status"
        }
    }

    public struct OnDemandProvisioningSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationStrategy", required: true, type: .enum)
        ]

        ///  Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is lowest-price (the default), which launches the lowest price first. 
        public let allocationStrategy: OnDemandProvisioningAllocationStrategy

        public init(allocationStrategy: OnDemandProvisioningAllocationStrategy) {
            self.allocationStrategy = allocationStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "AllocationStrategy"
        }
    }

    public struct PlacementType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list)
        ]

        /// The Amazon EC2 Availability Zone for the cluster. AvailabilityZone is used for uniform instance groups, while AvailabilityZones (plural) is used for instance fleets.
        public let availabilityZone: String?
        /// When multiple Availability Zones are specified, Amazon EMR evaluates them and launches instances in the optimal Availability Zone. AvailabilityZones is used for instance fleets, while AvailabilityZone (singular) is used for uniform instance groups.  The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. 
        public let availabilityZones: [String]?

        public init(availabilityZone: String? = nil, availabilityZones: [String]? = nil) {
            self.availabilityZone = availabilityZone
            self.availabilityZones = availabilityZones
        }

        public func validate(name: String) throws {
            try validate(self.availabilityZone, name:"availabilityZone", parent: name, max: 10280)
            try validate(self.availabilityZone, name:"availabilityZone", parent: name, min: 0)
            try validate(self.availabilityZone, name:"availabilityZone", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.availabilityZones?.forEach {
                try validate($0, name: "availabilityZones[]", parent: name, max: 256)
                try validate($0, name: "availabilityZones[]", parent: name, min: 0)
                try validate($0, name: "availabilityZones[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case availabilityZones = "AvailabilityZones"
        }
    }

    public struct PortRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRange", required: false, type: .integer), 
            AWSShapeMember(label: "MinRange", required: true, type: .integer)
        ]

        /// The smallest port number in a specified range of port numbers.
        public let maxRange: Int?
        /// The smallest port number in a specified range of port numbers.
        public let minRange: Int

        public init(maxRange: Int? = nil, minRange: Int) {
            self.maxRange = maxRange
            self.minRange = minRange
        }

        public func validate(name: String) throws {
            try validate(self.maxRange, name:"maxRange", parent: name, max: 65535)
            try validate(self.maxRange, name:"maxRange", parent: name, min: -1)
            try validate(self.minRange, name:"minRange", parent: name, max: 65535)
            try validate(self.minRange, name:"minRange", parent: name, min: -1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxRange = "MaxRange"
            case minRange = "MinRange"
        }
    }

    public struct PutAutoScalingPolicyInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingPolicy", required: true, type: .structure), 
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceGroupId", required: true, type: .string)
        ]

        /// Specifies the definition of the automatic scaling policy.
        public let autoScalingPolicy: AutoScalingPolicy
        /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
        public let clusterId: String
        /// Specifies the ID of the instance group to which the automatic scaling policy is applied.
        public let instanceGroupId: String

        public init(autoScalingPolicy: AutoScalingPolicy, clusterId: String, instanceGroupId: String) {
            self.autoScalingPolicy = autoScalingPolicy
            self.clusterId = clusterId
            self.instanceGroupId = instanceGroupId
        }

        public func validate(name: String) throws {
            try self.autoScalingPolicy.validate(name: "\(name).autoScalingPolicy")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingPolicy = "AutoScalingPolicy"
            case clusterId = "ClusterId"
            case instanceGroupId = "InstanceGroupId"
        }
    }

    public struct PutAutoScalingPolicyOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterArn", required: false, type: .string), 
            AWSShapeMember(label: "ClusterId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceGroupId", required: false, type: .string)
        ]

        /// The automatic scaling policy definition.
        public let autoScalingPolicy: AutoScalingPolicyDescription?
        /// The Amazon Resource Name of the cluster.
        public let clusterArn: String?
        /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
        public let clusterId: String?
        /// Specifies the ID of the instance group to which the scaling policy is applied.
        public let instanceGroupId: String?

        public init(autoScalingPolicy: AutoScalingPolicyDescription? = nil, clusterArn: String? = nil, clusterId: String? = nil, instanceGroupId: String? = nil) {
            self.autoScalingPolicy = autoScalingPolicy
            self.clusterArn = clusterArn
            self.clusterId = clusterId
            self.instanceGroupId = instanceGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingPolicy = "AutoScalingPolicy"
            case clusterArn = "ClusterArn"
            case clusterId = "ClusterId"
            case instanceGroupId = "InstanceGroupId"
        }
    }

    public struct PutBlockPublicAccessConfigurationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockPublicAccessConfiguration", required: true, type: .structure)
        ]

        /// A configuration for Amazon EMR block public access. The configuration applies to all clusters created in your account for the current Region. The configuration specifies whether block public access is enabled. If block public access is enabled, security groups associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or ::/0 on a port, unless the port is specified as an exception using PermittedPublicSecurityGroupRuleRanges in the BlockPublicAccessConfiguration. By default, Port 22 (SSH) is an exception, and public access is allowed on this port. You can change this by updating BlockPublicSecurityGroupRules to remove the exception.  For accounts that created clusters in a Region before November 25, 2019, block public access is disabled by default in that Region. To use this feature, you must manually enable and configure it. For accounts that did not create an EMR cluster in a Region before this date, block public access is enabled by default in that Region. 
        public let blockPublicAccessConfiguration: BlockPublicAccessConfiguration

        public init(blockPublicAccessConfiguration: BlockPublicAccessConfiguration) {
            self.blockPublicAccessConfiguration = blockPublicAccessConfiguration
        }

        public func validate(name: String) throws {
            try self.blockPublicAccessConfiguration.validate(name: "\(name).blockPublicAccessConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case blockPublicAccessConfiguration = "BlockPublicAccessConfiguration"
        }
    }

    public struct PutBlockPublicAccessConfigurationOutput: AWSShape {


        public init() {
        }

    }

    public struct PutManagedScalingPolicyInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "ManagedScalingPolicy", required: true, type: .structure)
        ]

        ///  Specifies the ID of an EMR cluster where the managed scaling policy is attached. 
        public let clusterId: String
        ///  Specifies the constraints for the managed scaling policy. 
        public let managedScalingPolicy: ManagedScalingPolicy

        public init(clusterId: String, managedScalingPolicy: ManagedScalingPolicy) {
            self.clusterId = clusterId
            self.managedScalingPolicy = managedScalingPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case managedScalingPolicy = "ManagedScalingPolicy"
        }
    }

    public struct PutManagedScalingPolicyOutput: AWSShape {


        public init() {
        }

    }

    public struct RemoveAutoScalingPolicyInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceGroupId", required: true, type: .string)
        ]

        /// Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
        public let clusterId: String
        /// Specifies the ID of the instance group to which the scaling policy is applied.
        public let instanceGroupId: String

        public init(clusterId: String, instanceGroupId: String) {
            self.clusterId = clusterId
            self.instanceGroupId = instanceGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
            case instanceGroupId = "InstanceGroupId"
        }
    }

    public struct RemoveAutoScalingPolicyOutput: AWSShape {


        public init() {
        }

    }

    public struct RemoveManagedScalingPolicyInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: true, type: .string)
        ]

        ///  Specifies the ID of the cluster from which the managed scaling policy will be removed. 
        public let clusterId: String

        public init(clusterId: String) {
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    public struct RemoveManagedScalingPolicyOutput: AWSShape {


        public init() {
        }

    }

    public struct RemoveTagsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]

        /// The Amazon EMR resource identifier from which tags will be removed. This value must be a cluster identifier.
        public let resourceId: String
        /// A list of tag keys to remove from a resource.
        public let tagKeys: [String]

        public init(resourceId: String, tagKeys: [String]) {
            self.resourceId = resourceId
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagKeys = "TagKeys"
        }
    }

    public struct RemoveTagsOutput: AWSShape {


        public init() {
        }

    }

    public struct RunJobFlowInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalInfo", required: false, type: .string), 
            AWSShapeMember(label: "AmiVersion", required: false, type: .string), 
            AWSShapeMember(label: "Applications", required: false, type: .list), 
            AWSShapeMember(label: "AutoScalingRole", required: false, type: .string), 
            AWSShapeMember(label: "BootstrapActions", required: false, type: .list), 
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "CustomAmiId", required: false, type: .string), 
            AWSShapeMember(label: "EbsRootVolumeSize", required: false, type: .integer), 
            AWSShapeMember(label: "Instances", required: true, type: .structure), 
            AWSShapeMember(label: "JobFlowRole", required: false, type: .string), 
            AWSShapeMember(label: "KerberosAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "LogEncryptionKmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "LogUri", required: false, type: .string), 
            AWSShapeMember(label: "ManagedScalingPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "NewSupportedProducts", required: false, type: .list), 
            AWSShapeMember(label: "ReleaseLabel", required: false, type: .string), 
            AWSShapeMember(label: "RepoUpgradeOnBoot", required: false, type: .enum), 
            AWSShapeMember(label: "ScaleDownBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "SecurityConfiguration", required: false, type: .string), 
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "StepConcurrencyLevel", required: false, type: .integer), 
            AWSShapeMember(label: "Steps", required: false, type: .list), 
            AWSShapeMember(label: "SupportedProducts", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "VisibleToAllUsers", required: false, type: .boolean)
        ]

        /// A JSON string for selecting additional features.
        public let additionalInfo: String?
        /// Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and later, ReleaseLabel is used. To specify a custom AMI, use CustomAmiID.
        public let amiVersion: String?
        /// Applies to Amazon EMR releases 4.0 and later. A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster. For a list of applications available for each Amazon EMR release version, see the Amazon EMR Release Guide.
        public let applications: [Application]?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        public let autoScalingRole: String?
        /// A list of bootstrap actions to run before Hadoop starts on the cluster nodes.
        public let bootstrapActions: [BootstrapActionConfig]?
        /// For Amazon EMR releases 4.0 and later. The list of configurations supplied for the EMR cluster you are creating.
        public let configurations: [Configuration]?
        /// Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI. If specified, Amazon EMR uses this AMI when it launches cluster EC2 instances. For more information about custom AMIs in Amazon EMR, see Using a Custom AMI in the Amazon EMR Management Guide. If omitted, the cluster uses the base Linux AMI for the ReleaseLabel specified. For Amazon EMR versions 2.x and 3.x, use AmiVersion instead. For information about creating a custom AMI, see Creating an Amazon EBS-Backed Linux AMI in the Amazon Elastic Compute Cloud User Guide for Linux Instances. For information about finding an AMI ID, see Finding a Linux AMI. 
        public let customAmiId: String?
        /// The size, in GiB, of the EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
        public let ebsRootVolumeSize: Int?
        /// A specification of the number and type of Amazon EC2 instances.
        public let instances: JobFlowInstancesConfig
        /// Also called instance profile and EC2 role. An IAM role for an EMR cluster. The EC2 instances of the cluster assume this role. The default role is EMR_EC2_DefaultRole. In order to use the default role, you must have already created it using the CLI or console.
        public let jobFlowRole: String?
        /// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see Use Kerberos Authentication in the EMR Management Guide.
        public let kerberosAttributes: KerberosAttributes?
        /// The AWS KMS customer master key (CMK) used for encrypting log files. If a value is not provided, the logs will remain encrypted by AES-256. This attribute is only available with EMR version 5.30.0 and later, excluding EMR 6.0.0.
        public let logEncryptionKmsKeyId: String?
        /// The location in Amazon S3 to write the log files of the job flow. If a value is not provided, logs are not created.
        public let logUri: String?
        ///  The specified managed scaling policy for an Amazon EMR cluster. 
        public let managedScalingPolicy: ManagedScalingPolicy?
        /// The name of the job flow.
        public let name: String
        ///  For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications.  A list of strings that indicates third-party software to use with the job flow that accepts a user argument list. EMR accepts and forwards the argument list to the corresponding installation script as bootstrap action arguments. For more information, see "Launch a Job Flow on the MapR Distribution for Hadoop" in the Amazon EMR Developer Guide. Supported values are:   "mapr-m3" - launch the cluster using MapR M3 Edition.   "mapr-m5" - launch the cluster using MapR M5 Edition.   "mapr" with the user arguments specifying "--edition,m3" or "--edition,m5" - launch the job flow using MapR M3 or M5 Edition respectively.   "mapr-m7" - launch the cluster using MapR M7 Edition.   "hunk" - launch the cluster with the Hunk Big Data Analtics Platform.   "hue"- launch the cluster with Hue installed.   "spark" - launch the cluster with Apache Spark installed.   "ganglia" - launch the cluster with the Ganglia Monitoring System installed.  
        public let newSupportedProducts: [SupportedProductConfig]?
        /// The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form emr-x.x.x, where x.x.x is an Amazon EMR release version such as emr-5.14.0. For more information about Amazon EMR release versions and included application versions and features, see https://docs.aws.amazon.com/emr/latest/ReleaseGuide/. The release label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use AmiVersion.
        public let releaseLabel: String?
        /// Applies only when CustomAmiID is used. Specifies which updates from the Amazon Linux AMI package repositories to apply automatically when the instance boots using the AMI. If omitted, the default is SECURITY, which indicates that only security updates are applied. If NONE is specified, no updates are applied, and all updates must be applied manually.
        public let repoUpgradeOnBoot: RepoUpgradeOnBoot?
        /// Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR blacklists and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public let scaleDownBehavior: ScaleDownBehavior?
        /// The name of a security configuration to apply to the cluster.
        public let securityConfiguration: String?
        /// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
        public let serviceRole: String?
        /// Specifies the number of steps that can be executed concurrently. The default value is 1. The maximum value is 256.
        public let stepConcurrencyLevel: Int?
        /// A list of steps to run.
        public let steps: [StepConfig]?
        ///  For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications.  A list of strings that indicates third-party software to use. For more information, see the Amazon EMR Developer Guide. Currently supported values are:   "mapr-m3" - launch the job flow using MapR M3 Edition.   "mapr-m5" - launch the job flow using MapR M5 Edition.  
        public let supportedProducts: [String]?
        /// A list of tags to associate with a cluster and propagate to Amazon EC2 instances.
        public let tags: [Tag]?
        /// A value of true indicates that all IAM users in the AWS account can perform cluster actions if they have the proper IAM policy permissions. This is the default. A value of false indicates that only the IAM user who created the cluster can perform actions.
        public let visibleToAllUsers: Bool?

        public init(additionalInfo: String? = nil, amiVersion: String? = nil, applications: [Application]? = nil, autoScalingRole: String? = nil, bootstrapActions: [BootstrapActionConfig]? = nil, configurations: [Configuration]? = nil, customAmiId: String? = nil, ebsRootVolumeSize: Int? = nil, instances: JobFlowInstancesConfig, jobFlowRole: String? = nil, kerberosAttributes: KerberosAttributes? = nil, logEncryptionKmsKeyId: String? = nil, logUri: String? = nil, managedScalingPolicy: ManagedScalingPolicy? = nil, name: String, newSupportedProducts: [SupportedProductConfig]? = nil, releaseLabel: String? = nil, repoUpgradeOnBoot: RepoUpgradeOnBoot? = nil, scaleDownBehavior: ScaleDownBehavior? = nil, securityConfiguration: String? = nil, serviceRole: String? = nil, stepConcurrencyLevel: Int? = nil, steps: [StepConfig]? = nil, supportedProducts: [String]? = nil, tags: [Tag]? = nil, visibleToAllUsers: Bool? = nil) {
            self.additionalInfo = additionalInfo
            self.amiVersion = amiVersion
            self.applications = applications
            self.autoScalingRole = autoScalingRole
            self.bootstrapActions = bootstrapActions
            self.configurations = configurations
            self.customAmiId = customAmiId
            self.ebsRootVolumeSize = ebsRootVolumeSize
            self.instances = instances
            self.jobFlowRole = jobFlowRole
            self.kerberosAttributes = kerberosAttributes
            self.logEncryptionKmsKeyId = logEncryptionKmsKeyId
            self.logUri = logUri
            self.managedScalingPolicy = managedScalingPolicy
            self.name = name
            self.newSupportedProducts = newSupportedProducts
            self.releaseLabel = releaseLabel
            self.repoUpgradeOnBoot = repoUpgradeOnBoot
            self.scaleDownBehavior = scaleDownBehavior
            self.securityConfiguration = securityConfiguration
            self.serviceRole = serviceRole
            self.stepConcurrencyLevel = stepConcurrencyLevel
            self.steps = steps
            self.supportedProducts = supportedProducts
            self.tags = tags
            self.visibleToAllUsers = visibleToAllUsers
        }

        public func validate(name: String) throws {
            try validate(self.additionalInfo, name:"additionalInfo", parent: name, max: 10280)
            try validate(self.additionalInfo, name:"additionalInfo", parent: name, min: 0)
            try validate(self.additionalInfo, name:"additionalInfo", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.amiVersion, name:"amiVersion", parent: name, max: 256)
            try validate(self.amiVersion, name:"amiVersion", parent: name, min: 0)
            try validate(self.amiVersion, name:"amiVersion", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.autoScalingRole, name:"autoScalingRole", parent: name, max: 10280)
            try validate(self.autoScalingRole, name:"autoScalingRole", parent: name, min: 0)
            try validate(self.autoScalingRole, name:"autoScalingRole", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.bootstrapActions?.forEach {
                try $0.validate(name: "\(name).bootstrapActions[]")
            }
            try validate(self.customAmiId, name:"customAmiId", parent: name, max: 256)
            try validate(self.customAmiId, name:"customAmiId", parent: name, min: 0)
            try validate(self.customAmiId, name:"customAmiId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.instances.validate(name: "\(name).instances")
            try validate(self.jobFlowRole, name:"jobFlowRole", parent: name, max: 10280)
            try validate(self.jobFlowRole, name:"jobFlowRole", parent: name, min: 0)
            try validate(self.jobFlowRole, name:"jobFlowRole", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.kerberosAttributes?.validate(name: "\(name).kerberosAttributes")
            try validate(self.logEncryptionKmsKeyId, name:"logEncryptionKmsKeyId", parent: name, max: 10280)
            try validate(self.logEncryptionKmsKeyId, name:"logEncryptionKmsKeyId", parent: name, min: 0)
            try validate(self.logEncryptionKmsKeyId, name:"logEncryptionKmsKeyId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.logUri, name:"logUri", parent: name, max: 10280)
            try validate(self.logUri, name:"logUri", parent: name, min: 0)
            try validate(self.logUri, name:"logUri", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 0)
            try validate(self.name, name:"name", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.newSupportedProducts?.forEach {
                try $0.validate(name: "\(name).newSupportedProducts[]")
            }
            try validate(self.releaseLabel, name:"releaseLabel", parent: name, max: 256)
            try validate(self.releaseLabel, name:"releaseLabel", parent: name, min: 0)
            try validate(self.releaseLabel, name:"releaseLabel", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.securityConfiguration, name:"securityConfiguration", parent: name, max: 10280)
            try validate(self.securityConfiguration, name:"securityConfiguration", parent: name, min: 0)
            try validate(self.securityConfiguration, name:"securityConfiguration", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.serviceRole, name:"serviceRole", parent: name, max: 10280)
            try validate(self.serviceRole, name:"serviceRole", parent: name, min: 0)
            try validate(self.serviceRole, name:"serviceRole", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.steps?.forEach {
                try $0.validate(name: "\(name).steps[]")
            }
            try self.supportedProducts?.forEach {
                try validate($0, name: "supportedProducts[]", parent: name, max: 256)
                try validate($0, name: "supportedProducts[]", parent: name, min: 0)
                try validate($0, name: "supportedProducts[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case additionalInfo = "AdditionalInfo"
            case amiVersion = "AmiVersion"
            case applications = "Applications"
            case autoScalingRole = "AutoScalingRole"
            case bootstrapActions = "BootstrapActions"
            case configurations = "Configurations"
            case customAmiId = "CustomAmiId"
            case ebsRootVolumeSize = "EbsRootVolumeSize"
            case instances = "Instances"
            case jobFlowRole = "JobFlowRole"
            case kerberosAttributes = "KerberosAttributes"
            case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
            case logUri = "LogUri"
            case managedScalingPolicy = "ManagedScalingPolicy"
            case name = "Name"
            case newSupportedProducts = "NewSupportedProducts"
            case releaseLabel = "ReleaseLabel"
            case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
            case scaleDownBehavior = "ScaleDownBehavior"
            case securityConfiguration = "SecurityConfiguration"
            case serviceRole = "ServiceRole"
            case stepConcurrencyLevel = "StepConcurrencyLevel"
            case steps = "Steps"
            case supportedProducts = "SupportedProducts"
            case tags = "Tags"
            case visibleToAllUsers = "VisibleToAllUsers"
        }
    }

    public struct RunJobFlowOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterArn", required: false, type: .string), 
            AWSShapeMember(label: "JobFlowId", required: false, type: .string)
        ]

        /// The Amazon Resource Name of the cluster.
        public let clusterArn: String?
        /// An unique identifier for the job flow.
        public let jobFlowId: String?

        public init(clusterArn: String? = nil, jobFlowId: String? = nil) {
            self.clusterArn = clusterArn
            self.jobFlowId = jobFlowId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterArn = "ClusterArn"
            case jobFlowId = "JobFlowId"
        }
    }

    public struct ScalingAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Market", required: false, type: .enum), 
            AWSShapeMember(label: "SimpleScalingPolicyConfiguration", required: true, type: .structure)
        ]

        /// Not available for instance groups. Instance groups use the market type specified for the group.
        public let market: MarketType?
        /// The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.
        public let simpleScalingPolicyConfiguration: SimpleScalingPolicyConfiguration

        public init(market: MarketType? = nil, simpleScalingPolicyConfiguration: SimpleScalingPolicyConfiguration) {
            self.market = market
            self.simpleScalingPolicyConfiguration = simpleScalingPolicyConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case market = "Market"
            case simpleScalingPolicyConfiguration = "SimpleScalingPolicyConfiguration"
        }
    }

    public struct ScalingConstraints: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxCapacity", required: true, type: .integer), 
            AWSShapeMember(label: "MinCapacity", required: true, type: .integer)
        ]

        /// The upper boundary of EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary.
        public let maxCapacity: Int
        /// The lower boundary of EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary.
        public let minCapacity: Int

        public init(maxCapacity: Int, minCapacity: Int) {
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case maxCapacity = "MaxCapacity"
            case minCapacity = "MinCapacity"
        }
    }

    public struct ScalingRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Action", required: true, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Trigger", required: true, type: .structure)
        ]

        /// The conditions that trigger an automatic scaling activity.
        public let action: ScalingAction
        /// A friendly, more verbose description of the automatic scaling rule.
        public let description: String?
        /// The name used to identify an automatic scaling rule. Rule names must be unique within a scaling policy.
        public let name: String
        /// The CloudWatch alarm definition that determines when automatic scaling activity is triggered.
        public let trigger: ScalingTrigger

        public init(action: ScalingAction, description: String? = nil, name: String, trigger: ScalingTrigger) {
            self.action = action
            self.description = description
            self.name = name
            self.trigger = trigger
        }

        public func validate(name: String) throws {
            try self.trigger.validate(name: "\(name).trigger")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case description = "Description"
            case name = "Name"
            case trigger = "Trigger"
        }
    }

    public struct ScalingTrigger: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchAlarmDefinition", required: true, type: .structure)
        ]

        /// The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins.
        public let cloudWatchAlarmDefinition: CloudWatchAlarmDefinition

        public init(cloudWatchAlarmDefinition: CloudWatchAlarmDefinition) {
            self.cloudWatchAlarmDefinition = cloudWatchAlarmDefinition
        }

        public func validate(name: String) throws {
            try self.cloudWatchAlarmDefinition.validate(name: "\(name).cloudWatchAlarmDefinition")
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchAlarmDefinition = "CloudWatchAlarmDefinition"
        }
    }

    public struct ScriptBootstrapActionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Args", required: false, type: .list), 
            AWSShapeMember(label: "Path", required: true, type: .string)
        ]

        /// A list of command line arguments to pass to the bootstrap action script.
        public let args: [String]?
        /// Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system.
        public let path: String

        public init(args: [String]? = nil, path: String) {
            self.args = args
            self.path = path
        }

        public func validate(name: String) throws {
            try self.args?.forEach {
                try validate($0, name: "args[]", parent: name, max: 10280)
                try validate($0, name: "args[]", parent: name, min: 0)
                try validate($0, name: "args[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.path, name:"path", parent: name, max: 10280)
            try validate(self.path, name:"path", parent: name, min: 0)
            try validate(self.path, name:"path", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case args = "Args"
            case path = "Path"
        }
    }

    public struct SecurityConfigurationSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]

        /// The date and time the security configuration was created.
        public let creationDateTime: TimeStamp?
        /// The name of the security configuration.
        public let name: String?

        public init(creationDateTime: TimeStamp? = nil, name: String? = nil) {
            self.creationDateTime = creationDateTime
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case name = "Name"
        }
    }

    public struct SetTerminationProtectionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowIds", required: true, type: .list), 
            AWSShapeMember(label: "TerminationProtected", required: true, type: .boolean)
        ]

        ///  A list of strings that uniquely identify the clusters to protect. This identifier is returned by RunJobFlow and can also be obtained from DescribeJobFlows . 
        public let jobFlowIds: [String]
        /// A Boolean that indicates whether to protect the cluster and prevent the Amazon EC2 instances in the cluster from shutting down due to API calls, user intervention, or job-flow error.
        public let terminationProtected: Bool

        public init(jobFlowIds: [String], terminationProtected: Bool) {
            self.jobFlowIds = jobFlowIds
            self.terminationProtected = terminationProtected
        }

        public func validate(name: String) throws {
            try self.jobFlowIds.forEach {
                try validate($0, name: "jobFlowIds[]", parent: name, max: 10280)
                try validate($0, name: "jobFlowIds[]", parent: name, min: 0)
                try validate($0, name: "jobFlowIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowIds = "JobFlowIds"
            case terminationProtected = "TerminationProtected"
        }
    }

    public struct SetVisibleToAllUsersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowIds", required: true, type: .list), 
            AWSShapeMember(label: "VisibleToAllUsers", required: true, type: .boolean)
        ]

        /// The unique identifier of the job flow (cluster).
        public let jobFlowIds: [String]
        /// A value of true indicates that all IAM users in the AWS account can perform cluster actions if they have the proper IAM policy permissions. This is the default. A value of false indicates that only the IAM user who created the cluster can perform actions.
        public let visibleToAllUsers: Bool

        public init(jobFlowIds: [String], visibleToAllUsers: Bool) {
            self.jobFlowIds = jobFlowIds
            self.visibleToAllUsers = visibleToAllUsers
        }

        public func validate(name: String) throws {
            try self.jobFlowIds.forEach {
                try validate($0, name: "jobFlowIds[]", parent: name, max: 10280)
                try validate($0, name: "jobFlowIds[]", parent: name, min: 0)
                try validate($0, name: "jobFlowIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowIds = "JobFlowIds"
            case visibleToAllUsers = "VisibleToAllUsers"
        }
    }

    public struct ShrinkPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DecommissionTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceResizePolicy", required: false, type: .structure)
        ]

        /// The desired timeout for decommissioning an instance. Overrides the default YARN decommissioning timeout.
        public let decommissionTimeout: Int?
        /// Custom policy for requesting termination protection or termination of specific instances when shrinking an instance group.
        public let instanceResizePolicy: InstanceResizePolicy?

        public init(decommissionTimeout: Int? = nil, instanceResizePolicy: InstanceResizePolicy? = nil) {
            self.decommissionTimeout = decommissionTimeout
            self.instanceResizePolicy = instanceResizePolicy
        }

        private enum CodingKeys: String, CodingKey {
            case decommissionTimeout = "DecommissionTimeout"
            case instanceResizePolicy = "InstanceResizePolicy"
        }
    }

    public struct SimpleScalingPolicyConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdjustmentType", required: false, type: .enum), 
            AWSShapeMember(label: "CoolDown", required: false, type: .integer), 
            AWSShapeMember(label: "ScalingAdjustment", required: true, type: .integer)
        ]

        /// The way in which EC2 instances are added (if ScalingAdjustment is a positive number) or terminated (if ScalingAdjustment is a negative number) each time the scaling activity is triggered. CHANGE_IN_CAPACITY is the default. CHANGE_IN_CAPACITY indicates that the EC2 instance count increments or decrements by ScalingAdjustment, which should be expressed as an integer. PERCENT_CHANGE_IN_CAPACITY indicates the instance count increments or decrements by the percentage specified by ScalingAdjustment, which should be expressed as an integer. For example, 20 indicates an increase in 20% increments of cluster capacity. EXACT_CAPACITY indicates the scaling activity results in an instance group with the number of EC2 instances specified by ScalingAdjustment, which should be expressed as a positive integer.
        public let adjustmentType: AdjustmentType?
        /// The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start. The default value is 0.
        public let coolDown: Int?
        /// The amount by which to scale in or scale out, based on the specified AdjustmentType. A positive value adds to the instance group's EC2 instance count while a negative number removes instances. If AdjustmentType is set to EXACT_CAPACITY, the number should only be a positive integer. If AdjustmentType is set to PERCENT_CHANGE_IN_CAPACITY, the value should express the percentage as an integer. For example, -20 indicates a decrease in 20% increments of cluster capacity.
        public let scalingAdjustment: Int

        public init(adjustmentType: AdjustmentType? = nil, coolDown: Int? = nil, scalingAdjustment: Int) {
            self.adjustmentType = adjustmentType
            self.coolDown = coolDown
            self.scalingAdjustment = scalingAdjustment
        }

        private enum CodingKeys: String, CodingKey {
            case adjustmentType = "AdjustmentType"
            case coolDown = "CoolDown"
            case scalingAdjustment = "ScalingAdjustment"
        }
    }

    public struct SpotProvisioningSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "BlockDurationMinutes", required: false, type: .integer), 
            AWSShapeMember(label: "TimeoutAction", required: true, type: .enum), 
            AWSShapeMember(label: "TimeoutDurationMinutes", required: true, type: .integer)
        ]

        ///  Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is capacity-optimized (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching. 
        public let allocationStrategy: SpotProvisioningAllocationStrategy?
        /// The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates. 
        public let blockDurationMinutes: Int?
        /// The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are TERMINATE_CLUSTER and SWITCH_TO_ON_DEMAND. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
        public let timeoutAction: SpotProvisioningTimeoutAction
        /// The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
        public let timeoutDurationMinutes: Int

        public init(allocationStrategy: SpotProvisioningAllocationStrategy? = nil, blockDurationMinutes: Int? = nil, timeoutAction: SpotProvisioningTimeoutAction, timeoutDurationMinutes: Int) {
            self.allocationStrategy = allocationStrategy
            self.blockDurationMinutes = blockDurationMinutes
            self.timeoutAction = timeoutAction
            self.timeoutDurationMinutes = timeoutDurationMinutes
        }

        public func validate(name: String) throws {
            try validate(self.blockDurationMinutes, name:"blockDurationMinutes", parent: name, min: 0)
            try validate(self.timeoutDurationMinutes, name:"timeoutDurationMinutes", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "AllocationStrategy"
            case blockDurationMinutes = "BlockDurationMinutes"
            case timeoutAction = "TimeoutAction"
            case timeoutDurationMinutes = "TimeoutDurationMinutes"
        }
    }

    public struct StartNotebookExecutionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EditorId", required: true, type: .string), 
            AWSShapeMember(label: "ExecutionEngine", required: true, type: .structure), 
            AWSShapeMember(label: "NotebookExecutionName", required: false, type: .string), 
            AWSShapeMember(label: "NotebookInstanceSecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "NotebookParams", required: false, type: .string), 
            AWSShapeMember(label: "RelativePath", required: true, type: .string), 
            AWSShapeMember(label: "ServiceRole", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]

        /// The unique identifier of the EMR Notebook to use for notebook execution.
        public let editorId: String
        /// Specifies the execution engine (cluster) that runs the notebook execution.
        public let executionEngine: ExecutionEngineConfig
        /// An optional name for the notebook execution.
        public let notebookExecutionName: String?
        /// The unique identifier of the Amazon EC2 security group to associate with the EMR Notebook for this notebook execution.
        public let notebookInstanceSecurityGroupId: String?
        /// Input parameters in JSON format passed to the EMR Notebook at runtime for execution.
        public let notebookParams: String?
        /// The path and file name of the notebook file for this execution, relative to the path specified for the EMR Notebook. For example, if you specify a path of s3://MyBucket/MyNotebooks when you create an EMR Notebook for a notebook with an ID of e-ABCDEFGHIJK1234567890ABCD (the EditorID of this request), and you specify a RelativePath of my_notebook_executions/notebook_execution.ipynb, the location of the file for the notebook execution is s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb.
        public let relativePath: String
        /// The name or ARN of the IAM role that is used as the service role for Amazon EMR (the EMR role) for the notebook execution.
        public let serviceRole: String
        /// A list of tags associated with a notebook execution. Tags are user-defined key value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.
        public let tags: [Tag]?

        public init(editorId: String, executionEngine: ExecutionEngineConfig, notebookExecutionName: String? = nil, notebookInstanceSecurityGroupId: String? = nil, notebookParams: String? = nil, relativePath: String, serviceRole: String, tags: [Tag]? = nil) {
            self.editorId = editorId
            self.executionEngine = executionEngine
            self.notebookExecutionName = notebookExecutionName
            self.notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId
            self.notebookParams = notebookParams
            self.relativePath = relativePath
            self.serviceRole = serviceRole
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.editorId, name:"editorId", parent: name, max: 256)
            try validate(self.editorId, name:"editorId", parent: name, min: 0)
            try validate(self.editorId, name:"editorId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.executionEngine.validate(name: "\(name).executionEngine")
            try validate(self.notebookExecutionName, name:"notebookExecutionName", parent: name, max: 256)
            try validate(self.notebookExecutionName, name:"notebookExecutionName", parent: name, min: 0)
            try validate(self.notebookExecutionName, name:"notebookExecutionName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.notebookInstanceSecurityGroupId, name:"notebookInstanceSecurityGroupId", parent: name, max: 256)
            try validate(self.notebookInstanceSecurityGroupId, name:"notebookInstanceSecurityGroupId", parent: name, min: 0)
            try validate(self.notebookInstanceSecurityGroupId, name:"notebookInstanceSecurityGroupId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.notebookParams, name:"notebookParams", parent: name, max: 10280)
            try validate(self.notebookParams, name:"notebookParams", parent: name, min: 0)
            try validate(self.notebookParams, name:"notebookParams", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.relativePath, name:"relativePath", parent: name, max: 10280)
            try validate(self.relativePath, name:"relativePath", parent: name, min: 0)
            try validate(self.relativePath, name:"relativePath", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.serviceRole, name:"serviceRole", parent: name, max: 10280)
            try validate(self.serviceRole, name:"serviceRole", parent: name, min: 0)
            try validate(self.serviceRole, name:"serviceRole", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case editorId = "EditorId"
            case executionEngine = "ExecutionEngine"
            case notebookExecutionName = "NotebookExecutionName"
            case notebookInstanceSecurityGroupId = "NotebookInstanceSecurityGroupId"
            case notebookParams = "NotebookParams"
            case relativePath = "RelativePath"
            case serviceRole = "ServiceRole"
            case tags = "Tags"
        }
    }

    public struct StartNotebookExecutionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotebookExecutionId", required: false, type: .string)
        ]

        /// The unique identifier of the notebook execution.
        public let notebookExecutionId: String?

        public init(notebookExecutionId: String? = nil) {
            self.notebookExecutionId = notebookExecutionId
        }

        private enum CodingKeys: String, CodingKey {
            case notebookExecutionId = "NotebookExecutionId"
        }
    }

    public struct Step: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionOnFailure", required: false, type: .enum), 
            AWSShapeMember(label: "Config", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure)
        ]

        /// The action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE. TERMINATE_JOB_FLOW is provided for backward compatibility. We recommend using TERMINATE_CLUSTER instead.
        public let actionOnFailure: ActionOnFailure?
        /// The Hadoop job configuration of the cluster step.
        public let config: HadoopStepConfig?
        /// The identifier of the cluster step.
        public let id: String?
        /// The name of the cluster step.
        public let name: String?
        /// The current execution status details of the cluster step.
        public let status: StepStatus?

        public init(actionOnFailure: ActionOnFailure? = nil, config: HadoopStepConfig? = nil, id: String? = nil, name: String? = nil, status: StepStatus? = nil) {
            self.actionOnFailure = actionOnFailure
            self.config = config
            self.id = id
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case actionOnFailure = "ActionOnFailure"
            case config = "Config"
            case id = "Id"
            case name = "Name"
            case status = "Status"
        }
    }

    public struct StepConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionOnFailure", required: false, type: .enum), 
            AWSShapeMember(label: "HadoopJarStep", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]

        /// The action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE. TERMINATE_JOB_FLOW is provided for backward compatibility. We recommend using TERMINATE_CLUSTER instead.
        public let actionOnFailure: ActionOnFailure?
        /// The JAR file used for the step.
        public let hadoopJarStep: HadoopJarStepConfig
        /// The name of the step.
        public let name: String

        public init(actionOnFailure: ActionOnFailure? = nil, hadoopJarStep: HadoopJarStepConfig, name: String) {
            self.actionOnFailure = actionOnFailure
            self.hadoopJarStep = hadoopJarStep
            self.name = name
        }

        public func validate(name: String) throws {
            try self.hadoopJarStep.validate(name: "\(name).hadoopJarStep")
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 0)
            try validate(self.name, name:"name", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case actionOnFailure = "ActionOnFailure"
            case hadoopJarStep = "HadoopJarStep"
            case name = "Name"
        }
    }

    public struct StepDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutionStatusDetail", required: true, type: .structure), 
            AWSShapeMember(label: "StepConfig", required: true, type: .structure)
        ]

        /// The description of the step status.
        public let executionStatusDetail: StepExecutionStatusDetail
        /// The step configuration.
        public let stepConfig: StepConfig

        public init(executionStatusDetail: StepExecutionStatusDetail, stepConfig: StepConfig) {
            self.executionStatusDetail = executionStatusDetail
            self.stepConfig = stepConfig
        }

        private enum CodingKeys: String, CodingKey {
            case executionStatusDetail = "ExecutionStatusDetail"
            case stepConfig = "StepConfig"
        }
    }

    public struct StepExecutionStatusDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastStateChangeReason", required: false, type: .string), 
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: true, type: .enum)
        ]

        /// The creation date and time of the step.
        public let creationDateTime: TimeStamp
        /// The completion date and time of the step.
        public let endDateTime: TimeStamp?
        /// A description of the step's current state.
        public let lastStateChangeReason: String?
        /// The start date and time of the step.
        public let startDateTime: TimeStamp?
        /// The state of the step.
        public let state: StepExecutionState

        public init(creationDateTime: TimeStamp, endDateTime: TimeStamp? = nil, lastStateChangeReason: String? = nil, startDateTime: TimeStamp? = nil, state: StepExecutionState) {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.lastStateChangeReason = lastStateChangeReason
            self.startDateTime = startDateTime
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
            case lastStateChangeReason = "LastStateChangeReason"
            case startDateTime = "StartDateTime"
            case state = "State"
        }
    }

    public struct StepStateChangeReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]

        /// The programmable code for the state change reason. Note: Currently, the service provides no code for the state change.
        public let code: StepStateChangeReasonCode?
        /// The descriptive message for the state change reason.
        public let message: String?

        public init(code: StepStateChangeReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public struct StepStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailureDetails", required: false, type: .structure), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "StateChangeReason", required: false, type: .structure), 
            AWSShapeMember(label: "Timeline", required: false, type: .structure)
        ]

        /// The details for the step failure including reason, message, and log file path where the root cause was identified.
        public let failureDetails: FailureDetails?
        /// The execution state of the cluster step.
        public let state: StepState?
        /// The reason for the step execution status change.
        public let stateChangeReason: StepStateChangeReason?
        /// The timeline of the cluster step status over time.
        public let timeline: StepTimeline?

        public init(failureDetails: FailureDetails? = nil, state: StepState? = nil, stateChangeReason: StepStateChangeReason? = nil, timeline: StepTimeline? = nil) {
            self.failureDetails = failureDetails
            self.state = state
            self.stateChangeReason = stateChangeReason
            self.timeline = timeline
        }

        private enum CodingKeys: String, CodingKey {
            case failureDetails = "FailureDetails"
            case state = "State"
            case stateChangeReason = "StateChangeReason"
            case timeline = "Timeline"
        }
    }

    public struct StepSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionOnFailure", required: false, type: .enum), 
            AWSShapeMember(label: "Config", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure)
        ]

        /// The action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER, CANCEL_AND_WAIT, and CONTINUE. TERMINATE_JOB_FLOW is available for backward compatibility. We recommend using TERMINATE_CLUSTER instead.
        public let actionOnFailure: ActionOnFailure?
        /// The Hadoop job configuration of the cluster step.
        public let config: HadoopStepConfig?
        /// The identifier of the cluster step.
        public let id: String?
        /// The name of the cluster step.
        public let name: String?
        /// The current execution status details of the cluster step.
        public let status: StepStatus?

        public init(actionOnFailure: ActionOnFailure? = nil, config: HadoopStepConfig? = nil, id: String? = nil, name: String? = nil, status: StepStatus? = nil) {
            self.actionOnFailure = actionOnFailure
            self.config = config
            self.id = id
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case actionOnFailure = "ActionOnFailure"
            case config = "Config"
            case id = "Id"
            case name = "Name"
            case status = "Status"
        }
    }

    public struct StepTimeline: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp)
        ]

        /// The date and time when the cluster step was created.
        public let creationDateTime: TimeStamp?
        /// The date and time when the cluster step execution completed or failed.
        public let endDateTime: TimeStamp?
        /// The date and time when the cluster step execution started.
        public let startDateTime: TimeStamp?

        public init(creationDateTime: TimeStamp? = nil, endDateTime: TimeStamp? = nil, startDateTime: TimeStamp? = nil) {
            self.creationDateTime = creationDateTime
            self.endDateTime = endDateTime
            self.startDateTime = startDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case endDateTime = "EndDateTime"
            case startDateTime = "StartDateTime"
        }
    }

    public struct StopNotebookExecutionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotebookExecutionId", required: true, type: .string)
        ]

        /// The unique identifier of the notebook execution.
        public let notebookExecutionId: String

        public init(notebookExecutionId: String) {
            self.notebookExecutionId = notebookExecutionId
        }

        public func validate(name: String) throws {
            try validate(self.notebookExecutionId, name:"notebookExecutionId", parent: name, max: 256)
            try validate(self.notebookExecutionId, name:"notebookExecutionId", parent: name, min: 0)
            try validate(self.notebookExecutionId, name:"notebookExecutionId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case notebookExecutionId = "NotebookExecutionId"
        }
    }

    public struct SupportedProductConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Args", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]

        /// The list of user-supplied arguments.
        public let args: [String]?
        /// The name of the product configuration.
        public let name: String?

        public init(args: [String]? = nil, name: String? = nil) {
            self.args = args
            self.name = name
        }

        public func validate(name: String) throws {
            try self.args?.forEach {
                try validate($0, name: "args[]", parent: name, max: 10280)
                try validate($0, name: "args[]", parent: name, min: 0)
                try validate($0, name: "args[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 0)
            try validate(self.name, name:"name", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case args = "Args"
            case name = "Name"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]

        /// A user-defined key, which is the minimum required information for a valid tag. For more information, see Tag . 
        public let key: String?
        /// A user-defined value, which is optional in a tag. For more information, see Tag Clusters. 
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TerminateJobFlowsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobFlowIds", required: true, type: .list)
        ]

        /// A list of job flows to be shutdown.
        public let jobFlowIds: [String]

        public init(jobFlowIds: [String]) {
            self.jobFlowIds = jobFlowIds
        }

        public func validate(name: String) throws {
            try self.jobFlowIds.forEach {
                try validate($0, name: "jobFlowIds[]", parent: name, max: 10280)
                try validate($0, name: "jobFlowIds[]", parent: name, min: 0)
                try validate($0, name: "jobFlowIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case jobFlowIds = "JobFlowIds"
        }
    }

    public struct VolumeSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "SizeInGB", required: true, type: .integer), 
            AWSShapeMember(label: "VolumeType", required: true, type: .string)
        ]

        /// The number of I/O operations per second (IOPS) that the volume supports.
        public let iops: Int?
        /// The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
        public let sizeInGB: Int
        /// The volume type. Volume types supported are gp2, io1, standard.
        public let volumeType: String

        public init(iops: Int? = nil, sizeInGB: Int, volumeType: String) {
            self.iops = iops
            self.sizeInGB = sizeInGB
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case iops = "Iops"
            case sizeInGB = "SizeInGB"
            case volumeType = "VolumeType"
        }
    }
}
