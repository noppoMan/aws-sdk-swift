// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension ApplicationInsights {

    public struct ApplicationComponent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComponentName", required: false, type: .string), 
            AWSShapeMember(label: "Monitor", required: false, type: .boolean), 
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "Tier", required: false, type: .string)
        ]

        /// The name of the component.
        public let componentName: String?
        /// Indicates whether the application component is monitored. 
        public let monitor: Bool?
        /// The resource type. Supported resource types include EC2 instances, Auto Scaling group, Classic ELB, Application ELB, and SQS Queue.
        public let resourceType: String?
        /// The stack tier of the application component.
        public let tier: String?

        public init(componentName: String? = nil, monitor: Bool? = nil, resourceType: String? = nil, tier: String? = nil) {
            self.componentName = componentName
            self.monitor = monitor
            self.resourceType = resourceType
            self.tier = tier
        }

        private enum CodingKeys: String, CodingKey {
            case componentName = "ComponentName"
            case monitor = "Monitor"
            case resourceType = "ResourceType"
            case tier = "Tier"
        }
    }

    public struct ApplicationInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifeCycle", required: false, type: .string), 
            AWSShapeMember(label: "OpsCenterEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "OpsItemSNSTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "Remarks", required: false, type: .string), 
            AWSShapeMember(label: "ResourceGroupName", required: false, type: .string)
        ]

        /// The lifecycle of the application. 
        public let lifeCycle: String?
        ///  Indicates whether Application Insights will create opsItems for any problem detected by Application Insights for an application. 
        public let opsCenterEnabled: Bool?
        ///  The SNS topic provided to Application Insights that is associated to the created opsItems to receive SNS notifications for opsItem updates. 
        public let opsItemSNSTopicArn: String?
        /// The issues on the user side that block Application Insights from successfully monitoring an application.
        public let remarks: String?
        /// The name of the resource group used for the application.
        public let resourceGroupName: String?

        public init(lifeCycle: String? = nil, opsCenterEnabled: Bool? = nil, opsItemSNSTopicArn: String? = nil, remarks: String? = nil, resourceGroupName: String? = nil) {
            self.lifeCycle = lifeCycle
            self.opsCenterEnabled = opsCenterEnabled
            self.opsItemSNSTopicArn = opsItemSNSTopicArn
            self.remarks = remarks
            self.resourceGroupName = resourceGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case lifeCycle = "LifeCycle"
            case opsCenterEnabled = "OpsCenterEnabled"
            case opsItemSNSTopicArn = "OpsItemSNSTopicArn"
            case remarks = "Remarks"
            case resourceGroupName = "ResourceGroupName"
        }
    }

    public struct CreateApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OpsCenterEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "OpsItemSNSTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "ResourceGroupName", required: true, type: .string)
        ]

        ///  When set to true, creates opsItems for any problems detected on an application. 
        public let opsCenterEnabled: Bool?
        ///  The SNS topic provided to Application Insights that is associated to the created opsItem. Allows you to receive notifications for updates to the opsItem. 
        public let opsItemSNSTopicArn: String?
        /// The name of the resource group.
        public let resourceGroupName: String

        public init(opsCenterEnabled: Bool? = nil, opsItemSNSTopicArn: String? = nil, resourceGroupName: String) {
            self.opsCenterEnabled = opsCenterEnabled
            self.opsItemSNSTopicArn = opsItemSNSTopicArn
            self.resourceGroupName = resourceGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case opsCenterEnabled = "OpsCenterEnabled"
            case opsItemSNSTopicArn = "OpsItemSNSTopicArn"
            case resourceGroupName = "ResourceGroupName"
        }
    }

    public struct CreateApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationInfo", required: false, type: .structure)
        ]

        /// Information about the application.
        public let applicationInfo: ApplicationInfo?

        public init(applicationInfo: ApplicationInfo? = nil) {
            self.applicationInfo = applicationInfo
        }

        private enum CodingKeys: String, CodingKey {
            case applicationInfo = "ApplicationInfo"
        }
    }

    public struct CreateComponentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComponentName", required: true, type: .string), 
            AWSShapeMember(label: "ResourceGroupName", required: true, type: .string), 
            AWSShapeMember(label: "ResourceList", required: true, type: .list)
        ]

        /// The name of the component.
        public let componentName: String
        /// The name of the resource group.
        public let resourceGroupName: String
        /// The list of resource ARNs that belong to the component.
        public let resourceList: [String]

        public init(componentName: String, resourceGroupName: String, resourceList: [String]) {
            self.componentName = componentName
            self.resourceGroupName = resourceGroupName
            self.resourceList = resourceList
        }

        private enum CodingKeys: String, CodingKey {
            case componentName = "ComponentName"
            case resourceGroupName = "ResourceGroupName"
            case resourceList = "ResourceList"
        }
    }

    public struct CreateComponentResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceGroupName", required: true, type: .string)
        ]

        /// The name of the resource group.
        public let resourceGroupName: String

        public init(resourceGroupName: String) {
            self.resourceGroupName = resourceGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceGroupName = "ResourceGroupName"
        }
    }

    public struct DeleteApplicationResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteComponentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComponentName", required: true, type: .string), 
            AWSShapeMember(label: "ResourceGroupName", required: true, type: .string)
        ]

        /// The name of the component.
        public let componentName: String
        /// The name of the resource group.
        public let resourceGroupName: String

        public init(componentName: String, resourceGroupName: String) {
            self.componentName = componentName
            self.resourceGroupName = resourceGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case componentName = "ComponentName"
            case resourceGroupName = "ResourceGroupName"
        }
    }

    public struct DeleteComponentResponse: AWSShape {


        public init() {
        }

    }

    public struct DescribeApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceGroupName", required: true, type: .string)
        ]

        /// The name of the resource group.
        public let resourceGroupName: String

        public init(resourceGroupName: String) {
            self.resourceGroupName = resourceGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceGroupName = "ResourceGroupName"
        }
    }

    public struct DescribeApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationInfo", required: false, type: .structure)
        ]

        /// Information about the application.
        public let applicationInfo: ApplicationInfo?

        public init(applicationInfo: ApplicationInfo? = nil) {
            self.applicationInfo = applicationInfo
        }

        private enum CodingKeys: String, CodingKey {
            case applicationInfo = "ApplicationInfo"
        }
    }

    public struct DescribeComponentConfigurationRecommendationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComponentName", required: true, type: .string), 
            AWSShapeMember(label: "ResourceGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Tier", required: true, type: .string)
        ]

        /// The name of the component.
        public let componentName: String
        /// The name of the resource group.
        public let resourceGroupName: String
        /// The tier of the application component. Supported tiers include DOT_NET_WORKER, DOT_NET_WEB, SQL_SERVER, and DEFAULT.
        public let tier: String

        public init(componentName: String, resourceGroupName: String, tier: String) {
            self.componentName = componentName
            self.resourceGroupName = resourceGroupName
            self.tier = tier
        }

        private enum CodingKeys: String, CodingKey {
            case componentName = "ComponentName"
            case resourceGroupName = "ResourceGroupName"
            case tier = "Tier"
        }
    }

    public struct DescribeComponentConfigurationRecommendationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComponentConfiguration", required: false, type: .string)
        ]

        /// The recommended configuration settings of the component. The value is the escaped JSON of the configuration.
        public let componentConfiguration: String?

        public init(componentConfiguration: String? = nil) {
            self.componentConfiguration = componentConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case componentConfiguration = "ComponentConfiguration"
        }
    }

    public struct DescribeComponentConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComponentName", required: true, type: .string), 
            AWSShapeMember(label: "ResourceGroupName", required: true, type: .string)
        ]

        /// The name of the component.
        public let componentName: String
        /// The name of the resource group.
        public let resourceGroupName: String

        public init(componentName: String, resourceGroupName: String) {
            self.componentName = componentName
            self.resourceGroupName = resourceGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case componentName = "ComponentName"
            case resourceGroupName = "ResourceGroupName"
        }
    }

    public struct DescribeComponentConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComponentConfiguration", required: false, type: .string), 
            AWSShapeMember(label: "Monitor", required: false, type: .boolean), 
            AWSShapeMember(label: "Tier", required: false, type: .string)
        ]

        /// The configuration settings of the component. The value is the escaped JSON of the configuration.
        public let componentConfiguration: String?
        /// Indicates whether the application component is monitored.
        public let monitor: Bool?
        /// The tier of the application component. Supported tiers include DOT_NET_WORKER, DOT_NET_WEB, SQL_SERVER, and DEFAULT 
        public let tier: String?

        public init(componentConfiguration: String? = nil, monitor: Bool? = nil, tier: String? = nil) {
            self.componentConfiguration = componentConfiguration
            self.monitor = monitor
            self.tier = tier
        }

        private enum CodingKeys: String, CodingKey {
            case componentConfiguration = "ComponentConfiguration"
            case monitor = "Monitor"
            case tier = "Tier"
        }
    }

    public struct DescribeComponentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComponentName", required: true, type: .string), 
            AWSShapeMember(label: "ResourceGroupName", required: true, type: .string)
        ]

        /// The name of the component.
        public let componentName: String
        /// The name of the resource group.
        public let resourceGroupName: String

        public init(componentName: String, resourceGroupName: String) {
            self.componentName = componentName
            self.resourceGroupName = resourceGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case componentName = "ComponentName"
            case resourceGroupName = "ResourceGroupName"
        }
    }

    public struct DescribeComponentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationComponent", required: false, type: .structure), 
            AWSShapeMember(label: "ResourceList", required: false, type: .list)
        ]

        public let applicationComponent: ApplicationComponent?
        /// The list of resource ARNs that belong to the component.
        public let resourceList: [String]?

        public init(applicationComponent: ApplicationComponent? = nil, resourceList: [String]? = nil) {
            self.applicationComponent = applicationComponent
            self.resourceList = resourceList
        }

        private enum CodingKeys: String, CodingKey {
            case applicationComponent = "ApplicationComponent"
            case resourceList = "ResourceList"
        }
    }

    public struct DescribeObservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObservationId", required: true, type: .string)
        ]

        /// The ID of the observation.
        public let observationId: String

        public init(observationId: String) {
            self.observationId = observationId
        }

        private enum CodingKeys: String, CodingKey {
            case observationId = "ObservationId"
        }
    }

    public struct DescribeObservationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Observation", required: false, type: .structure)
        ]

        /// Information about the observation.
        public let observation: Observation?

        public init(observation: Observation? = nil) {
            self.observation = observation
        }

        private enum CodingKeys: String, CodingKey {
            case observation = "Observation"
        }
    }

    public struct DescribeProblemObservationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProblemId", required: true, type: .string)
        ]

        /// The ID of the problem.
        public let problemId: String

        public init(problemId: String) {
            self.problemId = problemId
        }

        private enum CodingKeys: String, CodingKey {
            case problemId = "ProblemId"
        }
    }

    public struct DescribeProblemObservationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RelatedObservations", required: false, type: .structure)
        ]

        /// Observations related to the problem.
        public let relatedObservations: RelatedObservations?

        public init(relatedObservations: RelatedObservations? = nil) {
            self.relatedObservations = relatedObservations
        }

        private enum CodingKeys: String, CodingKey {
            case relatedObservations = "RelatedObservations"
        }
    }

    public struct DescribeProblemRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProblemId", required: true, type: .string)
        ]

        /// The ID of the problem.
        public let problemId: String

        public init(problemId: String) {
            self.problemId = problemId
        }

        private enum CodingKeys: String, CodingKey {
            case problemId = "ProblemId"
        }
    }

    public struct DescribeProblemResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Problem", required: false, type: .structure)
        ]

        /// Information about the problem. 
        public let problem: Problem?

        public init(problem: Problem? = nil) {
            self.problem = problem
        }

        private enum CodingKeys: String, CodingKey {
            case problem = "Problem"
        }
    }

    public enum FeedbackKey: String, CustomStringConvertible, Codable {
        case insightsFeedback = "INSIGHTS_FEEDBACK"
        public var description: String { return self.rawValue }
    }

    public enum FeedbackValue: String, CustomStringConvertible, Codable {
        case notSpecified = "NOT_SPECIFIED"
        case useful = "USEFUL"
        case notUseful = "NOT_USEFUL"
        public var description: String { return self.rawValue }
    }

    public struct ListApplicationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 40)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListApplicationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationInfoList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The list of applications.
        public let applicationInfoList: [ApplicationInfo]?
        /// The token used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?

        public init(applicationInfoList: [ApplicationInfo]? = nil, nextToken: String? = nil) {
            self.applicationInfoList = applicationInfoList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case applicationInfoList = "ApplicationInfoList"
            case nextToken = "NextToken"
        }
    }

    public struct ListComponentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceGroupName", required: true, type: .string)
        ]

        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// The name of the resource group.
        public let resourceGroupName: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, resourceGroupName: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceGroupName = resourceGroupName
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 40)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case resourceGroupName = "ResourceGroupName"
        }
    }

    public struct ListComponentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationComponentList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The list of application components.
        public let applicationComponentList: [ApplicationComponent]?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(applicationComponentList: [ApplicationComponent]? = nil, nextToken: String? = nil) {
            self.applicationComponentList = applicationComponentList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case applicationComponentList = "ApplicationComponentList"
            case nextToken = "NextToken"
        }
    }

    public struct ListProblemsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceGroupName", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp)
        ]

        /// The time when the problem ended, in epoch seconds. If not specified, problems within the past seven days are returned.
        public let endTime: TimeStamp?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// The name of the resource group.
        public let resourceGroupName: String?
        /// The time when the problem was detected, in epoch seconds. If you don't specify a time frame for the request, problems within the past seven days are returned.
        public let startTime: TimeStamp?

        public init(endTime: TimeStamp? = nil, maxResults: Int? = nil, nextToken: String? = nil, resourceGroupName: String? = nil, startTime: TimeStamp? = nil) {
            self.endTime = endTime
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceGroupName = resourceGroupName
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 40)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case resourceGroupName = "ResourceGroupName"
            case startTime = "StartTime"
        }
    }

    public struct ListProblemsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ProblemList", required: false, type: .list)
        ]

        /// The token used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?
        /// The list of problems. 
        public let problemList: [Problem]?

        public init(nextToken: String? = nil, problemList: [Problem]? = nil) {
            self.nextToken = nextToken
            self.problemList = problemList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case problemList = "ProblemList"
        }
    }

    public enum LogFilter: String, CustomStringConvertible, Codable {
        case error = "ERROR"
        case warn = "WARN"
        case info = "INFO"
        public var description: String { return self.rawValue }
    }

    public struct Observation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LineTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LogFilter", required: false, type: .enum), 
            AWSShapeMember(label: "LogGroup", required: false, type: .string), 
            AWSShapeMember(label: "LogText", required: false, type: .string), 
            AWSShapeMember(label: "MetricName", required: false, type: .string), 
            AWSShapeMember(label: "MetricNamespace", required: false, type: .string), 
            AWSShapeMember(label: "SourceARN", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Unit", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .double)
        ]

        /// The time when the observation ended, in epoch seconds.
        public let endTime: TimeStamp?
        /// The ID of the observation type.
        public let id: String?
        /// The timestamp in the CloudWatch Logs that specifies when the matched line occurred.
        public let lineTime: TimeStamp?
        /// The log filter of the observation.
        public let logFilter: LogFilter?
        /// The log group name.
        public let logGroup: String?
        /// The log text of the observation.
        public let logText: String?
        /// The name of the observation metric.
        public let metricName: String?
        /// The namespace of the observation metric.
        public let metricNamespace: String?
        /// The source resource ARN of the observation.
        public let sourceARN: String?
        /// The source type of the observation.
        public let sourceType: String?
        /// The time when the observation was first detected, in epoch seconds.
        public let startTime: TimeStamp?
        /// The unit of the source observation metric.
        public let unit: String?
        /// The value of the source observation metric.
        public let value: Double?

        public init(endTime: TimeStamp? = nil, id: String? = nil, lineTime: TimeStamp? = nil, logFilter: LogFilter? = nil, logGroup: String? = nil, logText: String? = nil, metricName: String? = nil, metricNamespace: String? = nil, sourceARN: String? = nil, sourceType: String? = nil, startTime: TimeStamp? = nil, unit: String? = nil, value: Double? = nil) {
            self.endTime = endTime
            self.id = id
            self.lineTime = lineTime
            self.logFilter = logFilter
            self.logGroup = logGroup
            self.logText = logText
            self.metricName = metricName
            self.metricNamespace = metricNamespace
            self.sourceARN = sourceARN
            self.sourceType = sourceType
            self.startTime = startTime
            self.unit = unit
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case id = "Id"
            case lineTime = "LineTime"
            case logFilter = "LogFilter"
            case logGroup = "LogGroup"
            case logText = "LogText"
            case metricName = "MetricName"
            case metricNamespace = "MetricNamespace"
            case sourceARN = "SourceARN"
            case sourceType = "SourceType"
            case startTime = "StartTime"
            case unit = "Unit"
            case value = "Value"
        }
    }

    public struct Problem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AffectedResource", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Feedback", required: false, type: .map), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Insights", required: false, type: .string), 
            AWSShapeMember(label: "ResourceGroupName", required: false, type: .string), 
            AWSShapeMember(label: "SeverityLevel", required: false, type: .enum), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Title", required: false, type: .string)
        ]

        /// The resource affected by the problem.
        public let affectedResource: String?
        /// The time when the problem ended, in epoch seconds.
        public let endTime: TimeStamp?
        /// Feedback provided by the user about the problem.
        public let feedback: [FeedbackKey: FeedbackValue]?
        /// The ID of the problem.
        public let id: String?
        /// A detailed analysis of the problem using machine learning.
        public let insights: String?
        /// The name of the resource group affected by the problem.
        public let resourceGroupName: String?
        /// A measure of the level of impact of the problem.
        public let severityLevel: SeverityLevel?
        /// The time when the problem started, in epoch seconds.
        public let startTime: TimeStamp?
        /// The status of the problem.
        public let status: Status?
        /// The name of the problem.
        public let title: String?

        public init(affectedResource: String? = nil, endTime: TimeStamp? = nil, feedback: [FeedbackKey: FeedbackValue]? = nil, id: String? = nil, insights: String? = nil, resourceGroupName: String? = nil, severityLevel: SeverityLevel? = nil, startTime: TimeStamp? = nil, status: Status? = nil, title: String? = nil) {
            self.affectedResource = affectedResource
            self.endTime = endTime
            self.feedback = feedback
            self.id = id
            self.insights = insights
            self.resourceGroupName = resourceGroupName
            self.severityLevel = severityLevel
            self.startTime = startTime
            self.status = status
            self.title = title
        }

        private enum CodingKeys: String, CodingKey {
            case affectedResource = "AffectedResource"
            case endTime = "EndTime"
            case feedback = "Feedback"
            case id = "Id"
            case insights = "Insights"
            case resourceGroupName = "ResourceGroupName"
            case severityLevel = "SeverityLevel"
            case startTime = "StartTime"
            case status = "Status"
            case title = "Title"
        }
    }

    public struct RelatedObservations: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObservationList", required: false, type: .list)
        ]

        /// The list of observations related to the problem.
        public let observationList: [Observation]?

        public init(observationList: [Observation]? = nil) {
            self.observationList = observationList
        }

        private enum CodingKeys: String, CodingKey {
            case observationList = "ObservationList"
        }
    }

    public enum SeverityLevel: String, CustomStringConvertible, Codable {
        case low = "LOW"
        case medium = "MEDIUM"
        case high = "HIGH"
        public var description: String { return self.rawValue }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case ignore = "IGNORE"
        case resolved = "RESOLVED"
        case pending = "PENDING"
        public var description: String { return self.rawValue }
    }

    public struct UpdateApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OpsCenterEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "OpsItemSNSTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "RemoveSNSTopic", required: false, type: .boolean), 
            AWSShapeMember(label: "ResourceGroupName", required: true, type: .string)
        ]

        ///  When set to true, creates opsItems for any problems detected on an application. 
        public let opsCenterEnabled: Bool?
        ///  The SNS topic provided to Application Insights that is associated to the created opsItem. Allows you to receive notifications for updates to the opsItem.
        public let opsItemSNSTopicArn: String?
        ///  Disassociates the SNS topic from the opsItem created for detected problems.
        public let removeSNSTopic: Bool?
        /// The name of the resource group.
        public let resourceGroupName: String

        public init(opsCenterEnabled: Bool? = nil, opsItemSNSTopicArn: String? = nil, removeSNSTopic: Bool? = nil, resourceGroupName: String) {
            self.opsCenterEnabled = opsCenterEnabled
            self.opsItemSNSTopicArn = opsItemSNSTopicArn
            self.removeSNSTopic = removeSNSTopic
            self.resourceGroupName = resourceGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case opsCenterEnabled = "OpsCenterEnabled"
            case opsItemSNSTopicArn = "OpsItemSNSTopicArn"
            case removeSNSTopic = "RemoveSNSTopic"
            case resourceGroupName = "ResourceGroupName"
        }
    }

    public struct UpdateApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationInfo", required: false, type: .structure)
        ]

        /// Information about the application. 
        public let applicationInfo: ApplicationInfo?

        public init(applicationInfo: ApplicationInfo? = nil) {
            self.applicationInfo = applicationInfo
        }

        private enum CodingKeys: String, CodingKey {
            case applicationInfo = "ApplicationInfo"
        }
    }

    public struct UpdateComponentConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComponentConfiguration", required: false, type: .string), 
            AWSShapeMember(label: "ComponentName", required: true, type: .string), 
            AWSShapeMember(label: "Monitor", required: false, type: .boolean), 
            AWSShapeMember(label: "ResourceGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Tier", required: false, type: .string)
        ]

        /// The configuration settings of the component. The value is the escaped JSON of the configuration. For more information about the JSON format, see Working with JSON. You can send a request to DescribeComponentConfigurationRecommendation to see the recommended configuration for a component.
        public let componentConfiguration: String?
        /// The name of the component.
        public let componentName: String
        /// Indicates whether the application component is monitored.
        public let monitor: Bool?
        /// The name of the resource group.
        public let resourceGroupName: String
        /// The tier of the application component. Supported tiers include DOT_NET_WORKER, DOT_NET_WEB, SQL_SERVER, and DEFAULT.
        public let tier: String?

        public init(componentConfiguration: String? = nil, componentName: String, monitor: Bool? = nil, resourceGroupName: String, tier: String? = nil) {
            self.componentConfiguration = componentConfiguration
            self.componentName = componentName
            self.monitor = monitor
            self.resourceGroupName = resourceGroupName
            self.tier = tier
        }

        private enum CodingKeys: String, CodingKey {
            case componentConfiguration = "ComponentConfiguration"
            case componentName = "ComponentName"
            case monitor = "Monitor"
            case resourceGroupName = "ResourceGroupName"
            case tier = "Tier"
        }
    }

    public struct UpdateComponentConfigurationResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateComponentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComponentName", required: true, type: .string), 
            AWSShapeMember(label: "NewComponentName", required: false, type: .string), 
            AWSShapeMember(label: "ResourceGroupName", required: true, type: .string), 
            AWSShapeMember(label: "ResourceList", required: false, type: .list)
        ]

        /// The name of the component.
        public let componentName: String
        /// The new name of the component.
        public let newComponentName: String?
        /// The name of the resource group.
        public let resourceGroupName: String
        /// The list of resource ARNs that belong to the component.
        public let resourceList: [String]?

        public init(componentName: String, newComponentName: String? = nil, resourceGroupName: String, resourceList: [String]? = nil) {
            self.componentName = componentName
            self.newComponentName = newComponentName
            self.resourceGroupName = resourceGroupName
            self.resourceList = resourceList
        }

        private enum CodingKeys: String, CodingKey {
            case componentName = "ComponentName"
            case newComponentName = "NewComponentName"
            case resourceGroupName = "ResourceGroupName"
            case resourceList = "ResourceList"
        }
    }

    public struct UpdateComponentResponse: AWSShape {


        public init() {
        }

    }
}
