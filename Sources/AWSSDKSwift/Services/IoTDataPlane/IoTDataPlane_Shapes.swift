// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension IoTDataPlane {
    //MARK: Enums

    //MARK: Shapes

    public struct DeleteThingShadowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "shadowName", location: .querystring(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]

        /// The name of the shadow.
        public let shadowName: String?
        /// The name of the thing.
        public let thingName: String

        public init(shadowName: String? = nil, thingName: String) {
            self.shadowName = shadowName
            self.thingName = thingName
        }

        public func validate(name: String) throws {
            try validate(self.shadowName, name:"shadowName", parent: name, max: 64)
            try validate(self.shadowName, name:"shadowName", parent: name, min: 1)
            try validate(self.shadowName, name:"shadowName", parent: name, pattern: "[a-zA-Z0-9:_-]+")
            try validate(self.thingName, name:"thingName", parent: name, max: 128)
            try validate(self.thingName, name:"thingName", parent: name, min: 1)
            try validate(self.thingName, name:"thingName", parent: name, pattern: "[a-zA-Z0-9:_-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case shadowName = "name"
            case thingName = "thingName"
        }
    }

    public struct DeleteThingShadowResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "payload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payload", required: true, type: .blob)
        ]

        /// The state information, in JSON format.
        public let payload: Data

        public init(payload: Data) {
            self.payload = payload
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "payload"
        }
    }

    public struct GetThingShadowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "shadowName", location: .querystring(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]

        /// The name of the shadow.
        public let shadowName: String?
        /// The name of the thing.
        public let thingName: String

        public init(shadowName: String? = nil, thingName: String) {
            self.shadowName = shadowName
            self.thingName = thingName
        }

        public func validate(name: String) throws {
            try validate(self.shadowName, name:"shadowName", parent: name, max: 64)
            try validate(self.shadowName, name:"shadowName", parent: name, min: 1)
            try validate(self.shadowName, name:"shadowName", parent: name, pattern: "[a-zA-Z0-9:_-]+")
            try validate(self.thingName, name:"thingName", parent: name, max: 128)
            try validate(self.thingName, name:"thingName", parent: name, min: 1)
            try validate(self.thingName, name:"thingName", parent: name, pattern: "[a-zA-Z0-9:_-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case shadowName = "name"
            case thingName = "thingName"
        }
    }

    public struct GetThingShadowResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "payload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payload", required: false, type: .blob)
        ]

        /// The state information, in JSON format.
        public let payload: Data?

        public init(payload: Data? = nil) {
            self.payload = payload
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "payload"
        }
    }

    public struct ListNamedShadowsForThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]

        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The result page size.
        public let pageSize: Int?
        /// The name of the thing.
        public let thingName: String

        public init(nextToken: String? = nil, pageSize: Int? = nil, thingName: String) {
            self.nextToken = nextToken
            self.pageSize = pageSize
            self.thingName = thingName
        }

        public func validate(name: String) throws {
            try validate(self.pageSize, name:"pageSize", parent: name, max: 100)
            try validate(self.pageSize, name:"pageSize", parent: name, min: 1)
            try validate(self.thingName, name:"thingName", parent: name, max: 128)
            try validate(self.thingName, name:"thingName", parent: name, min: 1)
            try validate(self.thingName, name:"thingName", parent: name, pattern: "[a-zA-Z0-9:_-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case pageSize = "pageSize"
            case thingName = "thingName"
        }
    }

    public struct ListNamedShadowsForThingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "results", required: false, type: .list), 
            AWSShapeMember(label: "timestamp", required: false, type: .long)
        ]

        /// The token for the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The list of shadows for the specified thing.
        public let results: [String]?
        /// The Epoch date and time the response was generated by AWS IoT.
        public let timestamp: Int64?

        public init(nextToken: String? = nil, results: [String]? = nil, timestamp: Int64? = nil) {
            self.nextToken = nextToken
            self.results = results
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case results = "results"
            case timestamp = "timestamp"
        }
    }

    public struct PublishRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "payload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payload", required: false, type: .blob), 
            AWSShapeMember(label: "qos", location: .querystring(locationName: "qos"), required: false, type: .integer), 
            AWSShapeMember(label: "topic", location: .uri(locationName: "topic"), required: true, type: .string)
        ]

        /// The state information, in JSON format.
        public let payload: Data?
        /// The Quality of Service (QoS) level.
        public let qos: Int?
        /// The name of the MQTT topic.
        public let topic: String

        public init(payload: Data? = nil, qos: Int? = nil, topic: String) {
            self.payload = payload
            self.qos = qos
            self.topic = topic
        }

        public func validate(name: String) throws {
            try validate(self.qos, name:"qos", parent: name, max: 1)
            try validate(self.qos, name:"qos", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "payload"
            case qos = "qos"
            case topic = "topic"
        }
    }

    public struct UpdateThingShadowRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "payload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payload", required: true, type: .blob), 
            AWSShapeMember(label: "shadowName", location: .querystring(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]

        /// The state information, in JSON format.
        public let payload: Data
        /// The name of the shadow.
        public let shadowName: String?
        /// The name of the thing.
        public let thingName: String

        public init(payload: Data, shadowName: String? = nil, thingName: String) {
            self.payload = payload
            self.shadowName = shadowName
            self.thingName = thingName
        }

        public func validate(name: String) throws {
            try validate(self.shadowName, name:"shadowName", parent: name, max: 64)
            try validate(self.shadowName, name:"shadowName", parent: name, min: 1)
            try validate(self.shadowName, name:"shadowName", parent: name, pattern: "[a-zA-Z0-9:_-]+")
            try validate(self.thingName, name:"thingName", parent: name, max: 128)
            try validate(self.thingName, name:"thingName", parent: name, min: 1)
            try validate(self.thingName, name:"thingName", parent: name, pattern: "[a-zA-Z0-9:_-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "payload"
            case shadowName = "name"
            case thingName = "thingName"
        }
    }

    public struct UpdateThingShadowResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "payload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payload", required: false, type: .blob)
        ]

        /// The state information, in JSON format.
        public let payload: Data?

        public init(payload: Data? = nil) {
            self.payload = payload
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "payload"
        }
    }
}
