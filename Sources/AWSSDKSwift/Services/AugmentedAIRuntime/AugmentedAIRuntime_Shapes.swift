// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension AugmentedAIRuntime {
    //MARK: Enums

    public enum ContentClassifier: String, CustomStringConvertible, Codable {
        case freeofpersonallyidentifiableinformation = "FreeOfPersonallyIdentifiableInformation"
        case freeofadultcontent = "FreeOfAdultContent"
        public var description: String { return self.rawValue }
    }

    public enum HumanLoopStatus: String, CustomStringConvertible, Codable {
        case inprogress = "InProgress"
        case failed = "Failed"
        case completed = "Completed"
        case stopped = "Stopped"
        case stopping = "Stopping"
        public var description: String { return self.rawValue }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable {
        case ascending = "Ascending"
        case descending = "Descending"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct DeleteHumanLoopRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HumanLoopName", location: .uri(locationName: "HumanLoopName"))
        ]

        /// The name of the human loop you want to delete.
        public let humanLoopName: String

        public init(humanLoopName: String) {
            self.humanLoopName = humanLoopName
        }

        public func validate(name: String) throws {
            try validate(self.humanLoopName, name:"humanLoopName", parent: name, max: 63)
            try validate(self.humanLoopName, name:"humanLoopName", parent: name, min: 1)
            try validate(self.humanLoopName, name:"humanLoopName", parent: name, pattern: "^[a-z0-9](-*[a-z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case humanLoopName = "HumanLoopName"
        }
    }

    public struct DeleteHumanLoopResponse: AWSShape {


        public init() {
        }

    }

    public struct DescribeHumanLoopRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HumanLoopName", location: .uri(locationName: "HumanLoopName"))
        ]

        /// The name of the human loop.
        public let humanLoopName: String

        public init(humanLoopName: String) {
            self.humanLoopName = humanLoopName
        }

        public func validate(name: String) throws {
            try validate(self.humanLoopName, name:"humanLoopName", parent: name, max: 63)
            try validate(self.humanLoopName, name:"humanLoopName", parent: name, min: 1)
            try validate(self.humanLoopName, name:"humanLoopName", parent: name, pattern: "^[a-z0-9](-*[a-z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case humanLoopName = "HumanLoopName"
        }
    }

    public struct DescribeHumanLoopResponse: AWSShape {

        /// The timestamp when Amazon Augmented AI created the human loop.
        public let creationTimestamp: TimeStamp
        /// A failure code denoting a specific type of failure.
        public let failureCode: String?
        /// The reason why a human loop has failed. The failure reason is returned when the human loop status is Failed.
        public let failureReason: String?
        /// The Amazon Resource Name (ARN) of the flow definition.
        public let flowDefinitionArn: String
        /// The Amazon Resource Name (ARN) of the human loop.
        public let humanLoopArn: String
        /// An object containing information about the human loop input.
        public let humanLoopInput: HumanLoopInputContent
        /// The name of the human loop.
        public let humanLoopName: String
        /// An object containing information about the output of the human loop.
        public let humanLoopOutput: HumanLoopOutputContent?
        /// The status of the human loop. Valid values:
        public let humanLoopStatus: HumanLoopStatus

        public init(creationTimestamp: TimeStamp, failureCode: String? = nil, failureReason: String? = nil, flowDefinitionArn: String, humanLoopArn: String, humanLoopInput: HumanLoopInputContent, humanLoopName: String, humanLoopOutput: HumanLoopOutputContent? = nil, humanLoopStatus: HumanLoopStatus) {
            self.creationTimestamp = creationTimestamp
            self.failureCode = failureCode
            self.failureReason = failureReason
            self.flowDefinitionArn = flowDefinitionArn
            self.humanLoopArn = humanLoopArn
            self.humanLoopInput = humanLoopInput
            self.humanLoopName = humanLoopName
            self.humanLoopOutput = humanLoopOutput
            self.humanLoopStatus = humanLoopStatus
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case failureCode = "FailureCode"
            case failureReason = "FailureReason"
            case flowDefinitionArn = "FlowDefinitionArn"
            case humanLoopArn = "HumanLoopArn"
            case humanLoopInput = "HumanLoopInput"
            case humanLoopName = "HumanLoopName"
            case humanLoopOutput = "HumanLoopOutput"
            case humanLoopStatus = "HumanLoopStatus"
        }
    }

    public struct HumanLoopActivationReason: AWSShape {

        /// True if the specified conditions were matched to trigger the human loop.
        public let conditionsMatched: Bool?

        public init(conditionsMatched: Bool? = nil) {
            self.conditionsMatched = conditionsMatched
        }

        private enum CodingKeys: String, CodingKey {
            case conditionsMatched = "ConditionsMatched"
        }
    }

    public struct HumanLoopActivationResults: AWSShape {

        /// A copy of the human loop activation conditions of the flow definition, augmented with the results of evaluating those conditions on the input provided to the StartHumanLoop operation.
        public let humanLoopActivationConditionsEvaluationResults: String?
        /// An object containing information about why a human loop was triggered.
        public let humanLoopActivationReason: HumanLoopActivationReason?

        public init(humanLoopActivationConditionsEvaluationResults: String? = nil, humanLoopActivationReason: HumanLoopActivationReason? = nil) {
            self.humanLoopActivationConditionsEvaluationResults = humanLoopActivationConditionsEvaluationResults
            self.humanLoopActivationReason = humanLoopActivationReason
        }

        private enum CodingKeys: String, CodingKey {
            case humanLoopActivationConditionsEvaluationResults = "HumanLoopActivationConditionsEvaluationResults"
            case humanLoopActivationReason = "HumanLoopActivationReason"
        }
    }

    public struct HumanLoopInputContent: AWSShape {

        /// Serialized input from the human loop.
        public let inputContent: String

        public init(inputContent: String) {
            self.inputContent = inputContent
        }

        public func validate(name: String) throws {
            try validate(self.inputContent, name:"inputContent", parent: name, max: 4194304)
        }

        private enum CodingKeys: String, CodingKey {
            case inputContent = "InputContent"
        }
    }

    public struct HumanLoopOutputContent: AWSShape {

        /// The location of the Amazon S3 object where Amazon Augmented AI stores your human loop output. The output is stored at the following location: s3://S3OutputPath/HumanLoopName/CreationTime/output.json.
        public let outputS3Uri: String

        public init(outputS3Uri: String) {
            self.outputS3Uri = outputS3Uri
        }

        private enum CodingKeys: String, CodingKey {
            case outputS3Uri = "OutputS3Uri"
        }
    }

    public struct HumanLoopSummary: AWSShape {

        /// When Amazon Augmented AI created the human loop.
        public let creationTime: TimeStamp?
        /// The reason why the human loop failed. A failure reason is returned only when the status of the human loop is Failed.
        public let failureReason: String?
        /// The Amazon Resource Name (ARN) of the flow definition.
        public let flowDefinitionArn: String?
        /// The name of the human loop.
        public let humanLoopName: String?
        /// The status of the human loop. Valid values:
        public let humanLoopStatus: HumanLoopStatus?

        public init(creationTime: TimeStamp? = nil, failureReason: String? = nil, flowDefinitionArn: String? = nil, humanLoopName: String? = nil, humanLoopStatus: HumanLoopStatus? = nil) {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.flowDefinitionArn = flowDefinitionArn
            self.humanLoopName = humanLoopName
            self.humanLoopStatus = humanLoopStatus
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case flowDefinitionArn = "FlowDefinitionArn"
            case humanLoopName = "HumanLoopName"
            case humanLoopStatus = "HumanLoopStatus"
        }
    }

    public struct HumanReviewDataAttributes: AWSShape {

        /// Declares that your content is free of personally identifiable information or adult content. Amazon SageMaker may restrict the Amazon Mechanical Turk workers that can view your task based on this information.
        public let contentClassifiers: [ContentClassifier]

        public init(contentClassifiers: [ContentClassifier]) {
            self.contentClassifiers = contentClassifiers
        }

        public func validate(name: String) throws {
            try validate(self.contentClassifiers, name:"contentClassifiers", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case contentClassifiers = "ContentClassifiers"
        }
    }

    public struct ListHumanLoopsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimeAfter", location: .querystring(locationName: "CreationTimeAfter")), 
            AWSShapeMember(label: "CreationTimeBefore", location: .querystring(locationName: "CreationTimeBefore")), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults")), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken")), 
            AWSShapeMember(label: "SortOrder", location: .querystring(locationName: "SortOrder"))
        ]

        /// (Optional) The timestamp of the date when you want the human loops to begin. For example, 1551000000.
        public let creationTimeAfter: TimeStamp?
        /// (Optional) The timestamp of the date before which you want the human loops to begin. For example, 1550000000.
        public let creationTimeBefore: TimeStamp?
        /// The total number of items to return. If the total number of available items is more than the value specified in MaxResults, then a NextToken will be provided in the output that you can use to resume pagination.
        public let maxResults: Int?
        /// A token to resume pagination.
        public let nextToken: String?
        /// An optional value that specifies whether you want the results sorted in Ascending or Descending order.
        public let sortOrder: SortOrder?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortOrder: SortOrder? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 8192)
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListHumanLoopsResponse: AWSShape {

        /// An array of objects containing information about the human loops.
        public let humanLoopSummaries: [HumanLoopSummary]
        /// A token to resume pagination.
        public let nextToken: String?

        public init(humanLoopSummaries: [HumanLoopSummary], nextToken: String? = nil) {
            self.humanLoopSummaries = humanLoopSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case humanLoopSummaries = "HumanLoopSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct StartHumanLoopRequest: AWSShape {

        /// Attributes of the data specified by the customer.
        public let dataAttributes: HumanReviewDataAttributes?
        /// The Amazon Resource Name (ARN) of the flow definition.
        public let flowDefinitionArn: String
        /// An object containing information about the human loop.
        public let humanLoopInput: HumanLoopInputContent
        /// The name of the human loop.
        public let humanLoopName: String

        public init(dataAttributes: HumanReviewDataAttributes? = nil, flowDefinitionArn: String, humanLoopInput: HumanLoopInputContent, humanLoopName: String) {
            self.dataAttributes = dataAttributes
            self.flowDefinitionArn = flowDefinitionArn
            self.humanLoopInput = humanLoopInput
            self.humanLoopName = humanLoopName
        }

        public func validate(name: String) throws {
            try self.dataAttributes?.validate(name: "\(name).dataAttributes")
            try validate(self.flowDefinitionArn, name:"flowDefinitionArn", parent: name, max: 1024)
            try validate(self.flowDefinitionArn, name:"flowDefinitionArn", parent: name, pattern: "arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:flow-definition/.*")
            try self.humanLoopInput.validate(name: "\(name).humanLoopInput")
            try validate(self.humanLoopName, name:"humanLoopName", parent: name, max: 63)
            try validate(self.humanLoopName, name:"humanLoopName", parent: name, min: 1)
            try validate(self.humanLoopName, name:"humanLoopName", parent: name, pattern: "^[a-z0-9](-*[a-z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case dataAttributes = "DataAttributes"
            case flowDefinitionArn = "FlowDefinitionArn"
            case humanLoopInput = "HumanLoopInput"
            case humanLoopName = "HumanLoopName"
        }
    }

    public struct StartHumanLoopResponse: AWSShape {

        /// An object containing information about the human loop activation.
        public let humanLoopActivationResults: HumanLoopActivationResults?
        /// The Amazon Resource Name (ARN) of the human loop.
        public let humanLoopArn: String?

        public init(humanLoopActivationResults: HumanLoopActivationResults? = nil, humanLoopArn: String? = nil) {
            self.humanLoopActivationResults = humanLoopActivationResults
            self.humanLoopArn = humanLoopArn
        }

        private enum CodingKeys: String, CodingKey {
            case humanLoopActivationResults = "HumanLoopActivationResults"
            case humanLoopArn = "HumanLoopArn"
        }
    }

    public struct StopHumanLoopRequest: AWSShape {

        /// The name of the human loop you want to stop.
        public let humanLoopName: String

        public init(humanLoopName: String) {
            self.humanLoopName = humanLoopName
        }

        public func validate(name: String) throws {
            try validate(self.humanLoopName, name:"humanLoopName", parent: name, max: 63)
            try validate(self.humanLoopName, name:"humanLoopName", parent: name, min: 1)
            try validate(self.humanLoopName, name:"humanLoopName", parent: name, pattern: "^[a-z0-9](-*[a-z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case humanLoopName = "HumanLoopName"
        }
    }

    public struct StopHumanLoopResponse: AWSShape {


        public init() {
        }

    }
}
