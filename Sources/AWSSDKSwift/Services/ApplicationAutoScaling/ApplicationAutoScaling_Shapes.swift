// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension ApplicationAutoScaling {
    //MARK: Enums

    public enum AdjustmentType: String, CustomStringConvertible, Codable {
        case changeincapacity = "ChangeInCapacity"
        case percentchangeincapacity = "PercentChangeInCapacity"
        case exactcapacity = "ExactCapacity"
        public var description: String { return self.rawValue }
    }

    public enum MetricAggregationType: String, CustomStringConvertible, Codable {
        case average = "Average"
        case minimum = "Minimum"
        case maximum = "Maximum"
        public var description: String { return self.rawValue }
    }

    public enum MetricStatistic: String, CustomStringConvertible, Codable {
        case average = "Average"
        case minimum = "Minimum"
        case maximum = "Maximum"
        case samplecount = "SampleCount"
        case sum = "Sum"
        public var description: String { return self.rawValue }
    }

    public enum MetricType: String, CustomStringConvertible, Codable {
        case dynamodbreadcapacityutilization = "DynamoDBReadCapacityUtilization"
        case dynamodbwritecapacityutilization = "DynamoDBWriteCapacityUtilization"
        case albrequestcountpertarget = "ALBRequestCountPerTarget"
        case rdsreaderaveragecpuutilization = "RDSReaderAverageCPUUtilization"
        case rdsreaderaveragedatabaseconnections = "RDSReaderAverageDatabaseConnections"
        case ec2spotfleetrequestaveragecpuutilization = "EC2SpotFleetRequestAverageCPUUtilization"
        case ec2spotfleetrequestaveragenetworkin = "EC2SpotFleetRequestAverageNetworkIn"
        case ec2spotfleetrequestaveragenetworkout = "EC2SpotFleetRequestAverageNetworkOut"
        case sagemakervariantinvocationsperinstance = "SageMakerVariantInvocationsPerInstance"
        case ecsserviceaveragecpuutilization = "ECSServiceAverageCPUUtilization"
        case ecsserviceaveragememoryutilization = "ECSServiceAverageMemoryUtilization"
        case appstreamaveragecapacityutilization = "AppStreamAverageCapacityUtilization"
        case comprehendinferenceutilization = "ComprehendInferenceUtilization"
        case lambdaprovisionedconcurrencyutilization = "LambdaProvisionedConcurrencyUtilization"
        case cassandrareadcapacityutilization = "CassandraReadCapacityUtilization"
        case cassandrawritecapacityutilization = "CassandraWriteCapacityUtilization"
        public var description: String { return self.rawValue }
    }

    public enum PolicyType: String, CustomStringConvertible, Codable {
        case stepscaling = "StepScaling"
        case targettrackingscaling = "TargetTrackingScaling"
        public var description: String { return self.rawValue }
    }

    public enum ScalableDimension: String, CustomStringConvertible, Codable {
        case ecsServiceDesiredcount = "ecs:service:DesiredCount"
        case ec2SpotFleetRequestTargetcapacity = "ec2:spot-fleet-request:TargetCapacity"
        case elasticmapreduceInstancegroupInstancecount = "elasticmapreduce:instancegroup:InstanceCount"
        case appstreamFleetDesiredcapacity = "appstream:fleet:DesiredCapacity"
        case dynamodbTableReadcapacityunits = "dynamodb:table:ReadCapacityUnits"
        case dynamodbTableWritecapacityunits = "dynamodb:table:WriteCapacityUnits"
        case dynamodbIndexReadcapacityunits = "dynamodb:index:ReadCapacityUnits"
        case dynamodbIndexWritecapacityunits = "dynamodb:index:WriteCapacityUnits"
        case rdsClusterReadreplicacount = "rds:cluster:ReadReplicaCount"
        case sagemakerVariantDesiredinstancecount = "sagemaker:variant:DesiredInstanceCount"
        case customResourceResourcetypeProperty = "custom-resource:ResourceType:Property"
        case comprehendDocumentClassifierEndpointDesiredinferenceunits = "comprehend:document-classifier-endpoint:DesiredInferenceUnits"
        case lambdaFunctionProvisionedconcurrency = "lambda:function:ProvisionedConcurrency"
        case cassandraTableReadcapacityunits = "cassandra:table:ReadCapacityUnits"
        case cassandraTableWritecapacityunits = "cassandra:table:WriteCapacityUnits"
        public var description: String { return self.rawValue }
    }

    public enum ScalingActivityStatusCode: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case successful = "Successful"
        case overridden = "Overridden"
        case unfulfilled = "Unfulfilled"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum ServiceNamespace: String, CustomStringConvertible, Codable {
        case ecs = "ecs"
        case elasticmapreduce = "elasticmapreduce"
        case ec2 = "ec2"
        case appstream = "appstream"
        case dynamodb = "dynamodb"
        case rds = "rds"
        case sagemaker = "sagemaker"
        case customResource = "custom-resource"
        case comprehend = "comprehend"
        case lambda = "lambda"
        case cassandra = "cassandra"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct Alarm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmARN", required: true, type: .string), 
            AWSShapeMember(label: "AlarmName", required: true, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the alarm.
        public let alarmARN: String
        /// The name of the alarm.
        public let alarmName: String

        public init(alarmARN: String, alarmName: String) {
            self.alarmARN = alarmARN
            self.alarmName = alarmName
        }

        private enum CodingKeys: String, CodingKey {
            case alarmARN = "AlarmARN"
            case alarmName = "AlarmName"
        }
    }

    public struct CustomizedMetricSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "Namespace", required: true, type: .string), 
            AWSShapeMember(label: "Statistic", required: true, type: .enum), 
            AWSShapeMember(label: "Unit", required: false, type: .string)
        ]

        /// The dimensions of the metric.  Conditional: If you published your metric with dimensions, you must specify the same dimensions in your scaling policy.
        public let dimensions: [MetricDimension]?
        /// The name of the metric. 
        public let metricName: String
        /// The namespace of the metric.
        public let namespace: String
        /// The statistic of the metric.
        public let statistic: MetricStatistic
        /// The unit of the metric.
        public let unit: String?

        public init(dimensions: [MetricDimension]? = nil, metricName: String, namespace: String, statistic: MetricStatistic, unit: String? = nil) {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.statistic = statistic
            self.unit = unit
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case statistic = "Statistic"
            case unit = "Unit"
        }
    }

    public struct DeleteScalingPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyName", required: true, type: .string), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum)
        ]

        /// The name of the scaling policy.
        public let policyName: String
        /// The identifier of the resource associated with the scalable target. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceId: String
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension
        /// The namespace of the AWS service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.
        public let serviceNamespace: ServiceNamespace

        public init(policyName: String, resourceId: String, scalableDimension: ScalableDimension, serviceNamespace: ServiceNamespace) {
            self.policyName = policyName
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
        }

        public func validate(name: String) throws {
            try validate(self.policyName, name:"policyName", parent: name, max: 1600)
            try validate(self.policyName, name:"policyName", parent: name, min: 1)
            try validate(self.policyName, name:"policyName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.resourceId, name:"resourceId", parent: name, max: 1600)
            try validate(self.resourceId, name:"resourceId", parent: name, min: 1)
            try validate(self.resourceId, name:"resourceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "PolicyName"
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case serviceNamespace = "ServiceNamespace"
        }
    }

    public struct DeleteScalingPolicyResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteScheduledActionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeMember(label: "ScheduledActionName", required: true, type: .string), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum)
        ]

        /// The identifier of the resource associated with the scheduled action. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceId: String
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension
        /// The name of the scheduled action.
        public let scheduledActionName: String
        /// The namespace of the AWS service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.
        public let serviceNamespace: ServiceNamespace

        public init(resourceId: String, scalableDimension: ScalableDimension, scheduledActionName: String, serviceNamespace: ServiceNamespace) {
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.scheduledActionName = scheduledActionName
            self.serviceNamespace = serviceNamespace
        }

        public func validate(name: String) throws {
            try validate(self.resourceId, name:"resourceId", parent: name, max: 1600)
            try validate(self.resourceId, name:"resourceId", parent: name, min: 1)
            try validate(self.resourceId, name:"resourceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, max: 1600)
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, min: 1)
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case scheduledActionName = "ScheduledActionName"
            case serviceNamespace = "ServiceNamespace"
        }
    }

    public struct DeleteScheduledActionResponse: AWSShape {


        public init() {
        }

    }

    public struct DeregisterScalableTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum)
        ]

        /// The identifier of the resource associated with the scalable target. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceId: String
        /// The scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension
        /// The namespace of the AWS service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.
        public let serviceNamespace: ServiceNamespace

        public init(resourceId: String, scalableDimension: ScalableDimension, serviceNamespace: ServiceNamespace) {
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
        }

        public func validate(name: String) throws {
            try validate(self.resourceId, name:"resourceId", parent: name, max: 1600)
            try validate(self.resourceId, name:"resourceId", parent: name, min: 1)
            try validate(self.resourceId, name:"resourceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case serviceNamespace = "ServiceNamespace"
        }
    }

    public struct DeregisterScalableTargetResponse: AWSShape {


        public init() {
        }

    }

    public struct DescribeScalableTargetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceIds", required: false, type: .list), 
            AWSShapeMember(label: "ScalableDimension", required: false, type: .enum), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum)
        ]

        /// The maximum number of scalable targets. This value can be between 1 and 50. The default value is 50. If this parameter is used, the operation returns up to MaxResults results at a time, along with a NextToken value. To get the next set of results, include the NextToken value in a subsequent call. If this parameter is not used, the operation returns up to 50 results and a NextToken value, if applicable.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The identifier of the resource associated with the scalable target. This string consists of the resource type and unique identifier. If you specify a scalable dimension, you must also specify a resource ID.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceIds: [String]?
        /// The scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension?
        /// The namespace of the AWS service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.
        public let serviceNamespace: ServiceNamespace

        public init(maxResults: Int? = nil, nextToken: String? = nil, resourceIds: [String]? = nil, scalableDimension: ScalableDimension? = nil, serviceNamespace: ServiceNamespace) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceIds = resourceIds
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
        }

        public func validate(name: String) throws {
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.resourceIds?.forEach {
                try validate($0, name: "resourceIds[]", parent: name, max: 1600)
                try validate($0, name: "resourceIds[]", parent: name, min: 1)
                try validate($0, name: "resourceIds[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case resourceIds = "ResourceIds"
            case scalableDimension = "ScalableDimension"
            case serviceNamespace = "ServiceNamespace"
        }
    }

    public struct DescribeScalableTargetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScalableTargets", required: false, type: .list)
        ]

        /// The token required to get the next set of results. This value is null if there are no more results to return.
        public let nextToken: String?
        /// The scalable targets that match the request parameters.
        public let scalableTargets: [ScalableTarget]?

        public init(nextToken: String? = nil, scalableTargets: [ScalableTarget]? = nil) {
            self.nextToken = nextToken
            self.scalableTargets = scalableTargets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalableTargets = "ScalableTargets"
        }
    }

    public struct DescribeScalingActivitiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: false, type: .enum), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum)
        ]

        /// The maximum number of scalable targets. This value can be between 1 and 50. The default value is 50. If this parameter is used, the operation returns up to MaxResults results at a time, along with a NextToken value. To get the next set of results, include the NextToken value in a subsequent call. If this parameter is not used, the operation returns up to 50 results and a NextToken value, if applicable.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The identifier of the resource associated with the scaling activity. This string consists of the resource type and unique identifier. If you specify a scalable dimension, you must also specify a resource ID.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceId: String?
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension?
        /// The namespace of the AWS service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.
        public let serviceNamespace: ServiceNamespace

        public init(maxResults: Int? = nil, nextToken: String? = nil, resourceId: String? = nil, scalableDimension: ScalableDimension? = nil, serviceNamespace: ServiceNamespace) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
        }

        public func validate(name: String) throws {
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.resourceId, name:"resourceId", parent: name, max: 1600)
            try validate(self.resourceId, name:"resourceId", parent: name, min: 1)
            try validate(self.resourceId, name:"resourceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case serviceNamespace = "ServiceNamespace"
        }
    }

    public struct DescribeScalingActivitiesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScalingActivities", required: false, type: .list)
        ]

        /// The token required to get the next set of results. This value is null if there are no more results to return.
        public let nextToken: String?
        /// A list of scaling activity objects.
        public let scalingActivities: [ScalingActivity]?

        public init(nextToken: String? = nil, scalingActivities: [ScalingActivity]? = nil) {
            self.nextToken = nextToken
            self.scalingActivities = scalingActivities
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingActivities = "ScalingActivities"
        }
    }

    public struct DescribeScalingPoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PolicyNames", required: false, type: .list), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: false, type: .enum), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum)
        ]

        /// The maximum number of scalable targets. This value can be between 1 and 50. The default value is 50. If this parameter is used, the operation returns up to MaxResults results at a time, along with a NextToken value. To get the next set of results, include the NextToken value in a subsequent call. If this parameter is not used, the operation returns up to 50 results and a NextToken value, if applicable.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The names of the scaling policies to describe.
        public let policyNames: [String]?
        /// The identifier of the resource associated with the scaling policy. This string consists of the resource type and unique identifier. If you specify a scalable dimension, you must also specify a resource ID.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceId: String?
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension?
        /// The namespace of the AWS service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.
        public let serviceNamespace: ServiceNamespace

        public init(maxResults: Int? = nil, nextToken: String? = nil, policyNames: [String]? = nil, resourceId: String? = nil, scalableDimension: ScalableDimension? = nil, serviceNamespace: ServiceNamespace) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.policyNames = policyNames
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
        }

        public func validate(name: String) throws {
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.policyNames?.forEach {
                try validate($0, name: "policyNames[]", parent: name, max: 1600)
                try validate($0, name: "policyNames[]", parent: name, min: 1)
                try validate($0, name: "policyNames[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
            try validate(self.resourceId, name:"resourceId", parent: name, max: 1600)
            try validate(self.resourceId, name:"resourceId", parent: name, min: 1)
            try validate(self.resourceId, name:"resourceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case policyNames = "PolicyNames"
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case serviceNamespace = "ServiceNamespace"
        }
    }

    public struct DescribeScalingPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScalingPolicies", required: false, type: .list)
        ]

        /// The token required to get the next set of results. This value is null if there are no more results to return.
        public let nextToken: String?
        /// Information about the scaling policies.
        public let scalingPolicies: [ScalingPolicy]?

        public init(nextToken: String? = nil, scalingPolicies: [ScalingPolicy]? = nil) {
            self.nextToken = nextToken
            self.scalingPolicies = scalingPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPolicies = "ScalingPolicies"
        }
    }

    public struct DescribeScheduledActionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: false, type: .enum), 
            AWSShapeMember(label: "ScheduledActionNames", required: false, type: .list), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum)
        ]

        /// The maximum number of scheduled action results. This value can be between 1 and 50. The default value is 50. If this parameter is used, the operation returns up to MaxResults results at a time, along with a NextToken value. To get the next set of results, include the NextToken value in a subsequent call. If this parameter is not used, the operation returns up to 50 results and a NextToken value, if applicable.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The identifier of the resource associated with the scheduled action. This string consists of the resource type and unique identifier. If you specify a scalable dimension, you must also specify a resource ID.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceId: String?
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension?
        /// The names of the scheduled actions to describe.
        public let scheduledActionNames: [String]?
        /// The namespace of the AWS service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.
        public let serviceNamespace: ServiceNamespace

        public init(maxResults: Int? = nil, nextToken: String? = nil, resourceId: String? = nil, scalableDimension: ScalableDimension? = nil, scheduledActionNames: [String]? = nil, serviceNamespace: ServiceNamespace) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.scheduledActionNames = scheduledActionNames
            self.serviceNamespace = serviceNamespace
        }

        public func validate(name: String) throws {
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.resourceId, name:"resourceId", parent: name, max: 1600)
            try validate(self.resourceId, name:"resourceId", parent: name, min: 1)
            try validate(self.resourceId, name:"resourceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.scheduledActionNames?.forEach {
                try validate($0, name: "scheduledActionNames[]", parent: name, max: 1600)
                try validate($0, name: "scheduledActionNames[]", parent: name, min: 1)
                try validate($0, name: "scheduledActionNames[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case scheduledActionNames = "ScheduledActionNames"
            case serviceNamespace = "ServiceNamespace"
        }
    }

    public struct DescribeScheduledActionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScheduledActions", required: false, type: .list)
        ]

        /// The token required to get the next set of results. This value is null if there are no more results to return.
        public let nextToken: String?
        /// Information about the scheduled actions.
        public let scheduledActions: [ScheduledAction]?

        public init(nextToken: String? = nil, scheduledActions: [ScheduledAction]? = nil) {
            self.nextToken = nextToken
            self.scheduledActions = scheduledActions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scheduledActions = "ScheduledActions"
        }
    }

    public struct MetricDimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]

        /// The name of the dimension.
        public let name: String
        /// The value of the dimension.
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct PredefinedMetricSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PredefinedMetricType", required: true, type: .enum), 
            AWSShapeMember(label: "ResourceLabel", required: false, type: .string)
        ]

        /// The metric type. The ALBRequestCountPerTarget metric type applies only to Spot Fleet requests and ECS services.
        public let predefinedMetricType: MetricType
        /// Identifies the resource associated with the metric type. You can't specify a resource label unless the metric type is ALBRequestCountPerTarget and there is a target group attached to the Spot Fleet request or ECS service. Elastic Load Balancing sends data about your load balancers to Amazon CloudWatch. CloudWatch collects the data and specifies the format to use to access the data. The format is app/&lt;load-balancer-name&gt;/&lt;load-balancer-id&gt;/targetgroup/&lt;target-group-name&gt;/&lt;target-group-id&gt;, where:   app/&lt;load-balancer-name&gt;/&lt;load-balancer-id&gt; is the final portion of the load balancer ARN   targetgroup/&lt;target-group-name&gt;/&lt;target-group-id&gt; is the final portion of the target group ARN.   To find the ARN for an Application Load Balancer, use the DescribeLoadBalancers API operation. To find the ARN for the target group, use the DescribeTargetGroups API operation.
        public let resourceLabel: String?

        public init(predefinedMetricType: MetricType, resourceLabel: String? = nil) {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }

        public func validate(name: String) throws {
            try validate(self.resourceLabel, name:"resourceLabel", parent: name, max: 1023)
            try validate(self.resourceLabel, name:"resourceLabel", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case predefinedMetricType = "PredefinedMetricType"
            case resourceLabel = "ResourceLabel"
        }
    }

    public struct PutScalingPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyName", required: true, type: .string), 
            AWSShapeMember(label: "PolicyType", required: false, type: .enum), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeMember(label: "StepScalingPolicyConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "TargetTrackingScalingPolicyConfiguration", required: false, type: .structure)
        ]

        /// The name of the scaling policy.
        public let policyName: String
        /// The policy type. This parameter is required if you are creating a scaling policy. The following policy types are supported:   TargetTrackingScaling—Not supported for Amazon EMR  StepScaling—Not supported for DynamoDB, Amazon Comprehend, Lambda, or Amazon Keyspaces (for Apache Cassandra). For more information, see Target Tracking Scaling Policies and Step Scaling Policies in the Application Auto Scaling User Guide.
        public let policyType: PolicyType?
        /// The identifier of the resource associated with the scaling policy. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceId: String
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension
        /// The namespace of the AWS service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.
        public let serviceNamespace: ServiceNamespace
        /// A step scaling policy. This parameter is required if you are creating a policy and the policy type is StepScaling.
        public let stepScalingPolicyConfiguration: StepScalingPolicyConfiguration?
        /// A target tracking scaling policy. Includes support for predefined or customized metrics. This parameter is required if you are creating a policy and the policy type is TargetTrackingScaling.
        public let targetTrackingScalingPolicyConfiguration: TargetTrackingScalingPolicyConfiguration?

        public init(policyName: String, policyType: PolicyType? = nil, resourceId: String, scalableDimension: ScalableDimension, serviceNamespace: ServiceNamespace, stepScalingPolicyConfiguration: StepScalingPolicyConfiguration? = nil, targetTrackingScalingPolicyConfiguration: TargetTrackingScalingPolicyConfiguration? = nil) {
            self.policyName = policyName
            self.policyType = policyType
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
            self.stepScalingPolicyConfiguration = stepScalingPolicyConfiguration
            self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
        }

        public func validate(name: String) throws {
            try validate(self.policyName, name:"policyName", parent: name, max: 256)
            try validate(self.policyName, name:"policyName", parent: name, min: 1)
            try validate(self.policyName, name:"policyName", parent: name, pattern: "\\p{Print}+")
            try validate(self.resourceId, name:"resourceId", parent: name, max: 1600)
            try validate(self.resourceId, name:"resourceId", parent: name, min: 1)
            try validate(self.resourceId, name:"resourceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.targetTrackingScalingPolicyConfiguration?.validate(name: "\(name).targetTrackingScalingPolicyConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "PolicyName"
            case policyType = "PolicyType"
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case serviceNamespace = "ServiceNamespace"
            case stepScalingPolicyConfiguration = "StepScalingPolicyConfiguration"
            case targetTrackingScalingPolicyConfiguration = "TargetTrackingScalingPolicyConfiguration"
        }
    }

    public struct PutScalingPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alarms", required: false, type: .list), 
            AWSShapeMember(label: "PolicyARN", required: true, type: .string)
        ]

        /// The CloudWatch alarms created for the target tracking scaling policy.
        public let alarms: [Alarm]?
        /// The Amazon Resource Name (ARN) of the resulting scaling policy.
        public let policyARN: String

        public init(alarms: [Alarm]? = nil, policyARN: String) {
            self.alarms = alarms
            self.policyARN = policyARN
        }

        private enum CodingKeys: String, CodingKey {
            case alarms = "Alarms"
            case policyARN = "PolicyARN"
        }
    }

    public struct PutScheduledActionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeMember(label: "ScalableTargetAction", required: false, type: .structure), 
            AWSShapeMember(label: "Schedule", required: false, type: .string), 
            AWSShapeMember(label: "ScheduledActionName", required: true, type: .string), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp)
        ]

        /// The date and time for the recurring schedule to end.
        public let endTime: TimeStamp?
        /// The identifier of the resource associated with the scheduled action. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceId: String
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension
        /// The new minimum and maximum capacity. You can set both values or just one. At the scheduled time, if the current capacity is below the minimum capacity, Application Auto Scaling scales out to the minimum capacity. If the current capacity is above the maximum capacity, Application Auto Scaling scales in to the maximum capacity.
        public let scalableTargetAction: ScalableTargetAction?
        /// The schedule for this action. The following formats are supported:   At expressions - "at(yyyy-mm-ddThh:mm:ss)"   Rate expressions - "rate(value unit)"   Cron expressions - "cron(fields)"   At expressions are useful for one-time schedules. Specify the time in UTC. For rate expressions, value is a positive integer and unit is minute | minutes | hour | hours | day | days. For more information about cron expressions, see Cron Expressions in the Amazon CloudWatch Events User Guide. For examples of using these expressions, see Scheduled Scaling in the Application Auto Scaling User Guide.
        public let schedule: String?
        /// The name of the scheduled action. This name must be unique among all other scheduled actions on the specified scalable target. 
        public let scheduledActionName: String
        /// The namespace of the AWS service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.
        public let serviceNamespace: ServiceNamespace
        /// The date and time for this scheduled action to start.
        public let startTime: TimeStamp?

        public init(endTime: TimeStamp? = nil, resourceId: String, scalableDimension: ScalableDimension, scalableTargetAction: ScalableTargetAction? = nil, schedule: String? = nil, scheduledActionName: String, serviceNamespace: ServiceNamespace, startTime: TimeStamp? = nil) {
            self.endTime = endTime
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.scalableTargetAction = scalableTargetAction
            self.schedule = schedule
            self.scheduledActionName = scheduledActionName
            self.serviceNamespace = serviceNamespace
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try validate(self.resourceId, name:"resourceId", parent: name, max: 1600)
            try validate(self.resourceId, name:"resourceId", parent: name, min: 1)
            try validate(self.resourceId, name:"resourceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.schedule, name:"schedule", parent: name, max: 1600)
            try validate(self.schedule, name:"schedule", parent: name, min: 1)
            try validate(self.schedule, name:"schedule", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, max: 256)
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, min: 1)
            try validate(self.scheduledActionName, name:"scheduledActionName", parent: name, pattern: "(?!((^[ ]+.*)|(.*([\\u0000-\\u001f]|[\\u007f-\\u009f]|[:/|])+.*)|(.*[ ]+$))).+")
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case scalableTargetAction = "ScalableTargetAction"
            case schedule = "Schedule"
            case scheduledActionName = "ScheduledActionName"
            case serviceNamespace = "ServiceNamespace"
            case startTime = "StartTime"
        }
    }

    public struct PutScheduledActionResponse: AWSShape {


        public init() {
        }

    }

    public struct RegisterScalableTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "MinCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeMember(label: "SuspendedState", required: false, type: .structure)
        ]

        /// The maximum value that you plan to scale out to. When a scaling policy is in effect, Application Auto Scaling can scale out (expand) as needed to the maximum capacity limit in response to changing demand.  This parameter is required if you are registering a scalable target.
        public let maxCapacity: Int?
        /// The minimum value that you plan to scale in to. When a scaling policy is in effect, Application Auto Scaling can scale in (contract) as needed to the minimum capacity limit in response to changing demand.  This parameter is required if you are registering a scalable target. For certain resources, the minimum value allowed is 0. This includes Lambda provisioned concurrency, Spot Fleet, ECS services, Aurora DB clusters, EMR clusters, and custom resources. For all other resources, the minimum value allowed is 1.
        public let minCapacity: Int?
        /// The identifier of the resource that is associated with the scalable target. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceId: String
        /// This parameter is required for services that do not support service-linked roles (such as Amazon EMR), and it must specify the ARN of an IAM role that allows Application Auto Scaling to modify the scalable target on your behalf.  If the service supports service-linked roles, Application Auto Scaling uses a service-linked role, which it creates if it does not yet exist. For more information, see Application Auto Scaling IAM Roles.
        public let roleARN: String?
        /// The scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension
        /// The namespace of the AWS service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.
        public let serviceNamespace: ServiceNamespace
        /// An embedded object that contains attributes and attribute values that are used to suspend and resume automatic scaling. Setting the value of an attribute to true suspends the specified scaling activities. Setting it to false (default) resumes the specified scaling activities.   Suspension Outcomes    For DynamicScalingInSuspended, while a suspension is in effect, all scale-in activities that are triggered by a scaling policy are suspended.   For DynamicScalingOutSuspended, while a suspension is in effect, all scale-out activities that are triggered by a scaling policy are suspended.   For ScheduledScalingSuspended, while a suspension is in effect, all scaling activities that involve scheduled actions are suspended.    For more information, see Suspending and Resuming Scaling in the Application Auto Scaling User Guide.
        public let suspendedState: SuspendedState?

        public init(maxCapacity: Int? = nil, minCapacity: Int? = nil, resourceId: String, roleARN: String? = nil, scalableDimension: ScalableDimension, serviceNamespace: ServiceNamespace, suspendedState: SuspendedState? = nil) {
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
            self.resourceId = resourceId
            self.roleARN = roleARN
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
            self.suspendedState = suspendedState
        }

        public func validate(name: String) throws {
            try validate(self.resourceId, name:"resourceId", parent: name, max: 1600)
            try validate(self.resourceId, name:"resourceId", parent: name, min: 1)
            try validate(self.resourceId, name:"resourceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try validate(self.roleARN, name:"roleARN", parent: name, max: 1600)
            try validate(self.roleARN, name:"roleARN", parent: name, min: 1)
            try validate(self.roleARN, name:"roleARN", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxCapacity = "MaxCapacity"
            case minCapacity = "MinCapacity"
            case resourceId = "ResourceId"
            case roleARN = "RoleARN"
            case scalableDimension = "ScalableDimension"
            case serviceNamespace = "ServiceNamespace"
            case suspendedState = "SuspendedState"
        }
    }

    public struct RegisterScalableTargetResponse: AWSShape {


        public init() {
        }

    }

    public struct ScalableTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "MaxCapacity", required: true, type: .integer), 
            AWSShapeMember(label: "MinCapacity", required: true, type: .integer), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeMember(label: "SuspendedState", required: false, type: .structure)
        ]

        /// The Unix timestamp for when the scalable target was created.
        public let creationTime: TimeStamp
        /// The maximum value to scale to in response to a scale-out activity.
        public let maxCapacity: Int
        /// The minimum value to scale to in response to a scale-in activity.
        public let minCapacity: Int
        /// The identifier of the resource associated with the scalable target. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceId: String
        /// The ARN of an IAM role that allows Application Auto Scaling to modify the scalable target on your behalf.
        public let roleARN: String
        /// The scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension
        /// The namespace of the AWS service that provides the resource, or a custom-resource.
        public let serviceNamespace: ServiceNamespace
        public let suspendedState: SuspendedState?

        public init(creationTime: TimeStamp, maxCapacity: Int, minCapacity: Int, resourceId: String, roleARN: String, scalableDimension: ScalableDimension, serviceNamespace: ServiceNamespace, suspendedState: SuspendedState? = nil) {
            self.creationTime = creationTime
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
            self.resourceId = resourceId
            self.roleARN = roleARN
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
            self.suspendedState = suspendedState
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case maxCapacity = "MaxCapacity"
            case minCapacity = "MinCapacity"
            case resourceId = "ResourceId"
            case roleARN = "RoleARN"
            case scalableDimension = "ScalableDimension"
            case serviceNamespace = "ServiceNamespace"
            case suspendedState = "SuspendedState"
        }
    }

    public struct ScalableTargetAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "MinCapacity", required: false, type: .integer)
        ]

        /// The maximum capacity.
        public let maxCapacity: Int?
        /// The minimum capacity. For Lambda provisioned concurrency, the minimum value allowed is 0. For all other resources, the minimum value allowed is 1.
        public let minCapacity: Int?

        public init(maxCapacity: Int? = nil, minCapacity: Int? = nil) {
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case maxCapacity = "MaxCapacity"
            case minCapacity = "MinCapacity"
        }
    }

    public struct ScalingActivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivityId", required: true, type: .string), 
            AWSShapeMember(label: "Cause", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "Details", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeMember(label: "StartTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "StatusCode", required: true, type: .enum), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string)
        ]

        /// The unique identifier of the scaling activity.
        public let activityId: String
        /// A simple description of what caused the scaling activity to happen.
        public let cause: String
        /// A simple description of what action the scaling activity intends to accomplish.
        public let description: String
        /// The details about the scaling activity.
        public let details: String?
        /// The Unix timestamp for when the scaling activity ended.
        public let endTime: TimeStamp?
        /// The identifier of the resource associated with the scaling activity. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceId: String
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension
        /// The namespace of the AWS service that provides the resource, or a custom-resource.
        public let serviceNamespace: ServiceNamespace
        /// The Unix timestamp for when the scaling activity began.
        public let startTime: TimeStamp
        /// Indicates the status of the scaling activity.
        public let statusCode: ScalingActivityStatusCode
        /// A simple message about the current status of the scaling activity.
        public let statusMessage: String?

        public init(activityId: String, cause: String, description: String, details: String? = nil, endTime: TimeStamp? = nil, resourceId: String, scalableDimension: ScalableDimension, serviceNamespace: ServiceNamespace, startTime: TimeStamp, statusCode: ScalingActivityStatusCode, statusMessage: String? = nil) {
            self.activityId = activityId
            self.cause = cause
            self.description = description
            self.details = details
            self.endTime = endTime
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
            self.startTime = startTime
            self.statusCode = statusCode
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case activityId = "ActivityId"
            case cause = "Cause"
            case description = "Description"
            case details = "Details"
            case endTime = "EndTime"
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case serviceNamespace = "ServiceNamespace"
            case startTime = "StartTime"
            case statusCode = "StatusCode"
            case statusMessage = "StatusMessage"
        }
    }

    public struct ScalingPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alarms", required: false, type: .list), 
            AWSShapeMember(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "PolicyARN", required: true, type: .string), 
            AWSShapeMember(label: "PolicyName", required: true, type: .string), 
            AWSShapeMember(label: "PolicyType", required: true, type: .enum), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeMember(label: "StepScalingPolicyConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "TargetTrackingScalingPolicyConfiguration", required: false, type: .structure)
        ]

        /// The CloudWatch alarms associated with the scaling policy.
        public let alarms: [Alarm]?
        /// The Unix timestamp for when the scaling policy was created.
        public let creationTime: TimeStamp
        /// The Amazon Resource Name (ARN) of the scaling policy.
        public let policyARN: String
        /// The name of the scaling policy.
        public let policyName: String
        /// The scaling policy type.
        public let policyType: PolicyType
        /// The identifier of the resource associated with the scaling policy. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceId: String
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension
        /// The namespace of the AWS service that provides the resource, or a custom-resource.
        public let serviceNamespace: ServiceNamespace
        /// A step scaling policy.
        public let stepScalingPolicyConfiguration: StepScalingPolicyConfiguration?
        /// A target tracking scaling policy.
        public let targetTrackingScalingPolicyConfiguration: TargetTrackingScalingPolicyConfiguration?

        public init(alarms: [Alarm]? = nil, creationTime: TimeStamp, policyARN: String, policyName: String, policyType: PolicyType, resourceId: String, scalableDimension: ScalableDimension, serviceNamespace: ServiceNamespace, stepScalingPolicyConfiguration: StepScalingPolicyConfiguration? = nil, targetTrackingScalingPolicyConfiguration: TargetTrackingScalingPolicyConfiguration? = nil) {
            self.alarms = alarms
            self.creationTime = creationTime
            self.policyARN = policyARN
            self.policyName = policyName
            self.policyType = policyType
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
            self.stepScalingPolicyConfiguration = stepScalingPolicyConfiguration
            self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case alarms = "Alarms"
            case creationTime = "CreationTime"
            case policyARN = "PolicyARN"
            case policyName = "PolicyName"
            case policyType = "PolicyType"
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case serviceNamespace = "ServiceNamespace"
            case stepScalingPolicyConfiguration = "StepScalingPolicyConfiguration"
            case targetTrackingScalingPolicyConfiguration = "TargetTrackingScalingPolicyConfiguration"
        }
    }

    public struct ScheduledAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: false, type: .enum), 
            AWSShapeMember(label: "ScalableTargetAction", required: false, type: .structure), 
            AWSShapeMember(label: "Schedule", required: true, type: .string), 
            AWSShapeMember(label: "ScheduledActionARN", required: true, type: .string), 
            AWSShapeMember(label: "ScheduledActionName", required: true, type: .string), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp)
        ]

        /// The date and time that the scheduled action was created.
        public let creationTime: TimeStamp
        /// The date and time that the action is scheduled to end.
        public let endTime: TimeStamp?
        /// The identifier of the resource associated with the scaling policy. This string consists of the resource type and unique identifier.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   EMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0.   AppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet.   DynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.   Amazon SageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering.   Custom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository.   Amazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE.   Lambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST. Example: function:my-function:prod or function:my-function:1.   Amazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable.  
        public let resourceId: String
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    elasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.    appstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.    sagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an Amazon SageMaker model endpoint variant.    custom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.    comprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.    lambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.    cassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.    cassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.  
        public let scalableDimension: ScalableDimension?
        /// The new minimum and maximum capacity. You can set both values or just one. At the scheduled time, if the current capacity is below the minimum capacity, Application Auto Scaling scales out to the minimum capacity. If the current capacity is above the maximum capacity, Application Auto Scaling scales in to the maximum capacity.
        public let scalableTargetAction: ScalableTargetAction?
        /// The schedule for this action. The following formats are supported:   At expressions - "at(yyyy-mm-ddThh:mm:ss)"   Rate expressions - "rate(value unit)"   Cron expressions - "cron(fields)"   At expressions are useful for one-time schedules. Specify the time in UTC. For rate expressions, value is a positive integer and unit is minute | minutes | hour | hours | day | days. For more information about cron expressions, see Cron Expressions in the Amazon CloudWatch Events User Guide. For examples of using these expressions, see Scheduled Scaling in the Application Auto Scaling User Guide.
        public let schedule: String
        /// The Amazon Resource Name (ARN) of the scheduled action.
        public let scheduledActionARN: String
        /// The name of the scheduled action.
        public let scheduledActionName: String
        /// The namespace of the AWS service that provides the resource, or a custom-resource.
        public let serviceNamespace: ServiceNamespace
        /// The date and time that the action is scheduled to begin.
        public let startTime: TimeStamp?

        public init(creationTime: TimeStamp, endTime: TimeStamp? = nil, resourceId: String, scalableDimension: ScalableDimension? = nil, scalableTargetAction: ScalableTargetAction? = nil, schedule: String, scheduledActionARN: String, scheduledActionName: String, serviceNamespace: ServiceNamespace, startTime: TimeStamp? = nil) {
            self.creationTime = creationTime
            self.endTime = endTime
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.scalableTargetAction = scalableTargetAction
            self.schedule = schedule
            self.scheduledActionARN = scheduledActionARN
            self.scheduledActionName = scheduledActionName
            self.serviceNamespace = serviceNamespace
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case endTime = "EndTime"
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case scalableTargetAction = "ScalableTargetAction"
            case schedule = "Schedule"
            case scheduledActionARN = "ScheduledActionARN"
            case scheduledActionName = "ScheduledActionName"
            case serviceNamespace = "ServiceNamespace"
            case startTime = "StartTime"
        }
    }

    public struct StepAdjustment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricIntervalLowerBound", required: false, type: .double), 
            AWSShapeMember(label: "MetricIntervalUpperBound", required: false, type: .double), 
            AWSShapeMember(label: "ScalingAdjustment", required: true, type: .integer)
        ]

        /// The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.
        public let metricIntervalLowerBound: Double?
        /// The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity. The upper bound must be greater than the lower bound.
        public let metricIntervalUpperBound: Double?
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. 
        public let scalingAdjustment: Int

        public init(metricIntervalLowerBound: Double? = nil, metricIntervalUpperBound: Double? = nil, scalingAdjustment: Int) {
            self.metricIntervalLowerBound = metricIntervalLowerBound
            self.metricIntervalUpperBound = metricIntervalUpperBound
            self.scalingAdjustment = scalingAdjustment
        }

        private enum CodingKeys: String, CodingKey {
            case metricIntervalLowerBound = "MetricIntervalLowerBound"
            case metricIntervalUpperBound = "MetricIntervalUpperBound"
            case scalingAdjustment = "ScalingAdjustment"
        }
    }

    public struct StepScalingPolicyConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdjustmentType", required: false, type: .enum), 
            AWSShapeMember(label: "Cooldown", required: false, type: .integer), 
            AWSShapeMember(label: "MetricAggregationType", required: false, type: .enum), 
            AWSShapeMember(label: "MinAdjustmentMagnitude", required: false, type: .integer), 
            AWSShapeMember(label: "StepAdjustments", required: false, type: .list)
        ]

        /// Specifies whether the ScalingAdjustment value in a StepAdjustment is an absolute number or a percentage of the current capacity.   AdjustmentType is required if you are adding a new step scaling policy configuration.
        public let adjustmentType: AdjustmentType?
        /// The amount of time, in seconds, to wait for a previous scaling activity to take effect. With scale-out policies, the intention is to continuously (but not excessively) scale out. After Application Auto Scaling successfully scales out using a step scaling policy, it starts to calculate the cooldown time. While the cooldown period is in effect, capacity added by the initiating scale-out activity is calculated as part of the desired capacity for the next scale-out activity. For example, when an alarm triggers a step scaling policy to increase the capacity by 2, the scaling activity completes successfully, and a cooldown period starts. If the alarm triggers again during the cooldown period but at a more aggressive step adjustment of 3, the previous increase of 2 is considered part of the current capacity. Therefore, only 1 is added to the capacity. With scale-in policies, the intention is to scale in conservatively to protect your application’s availability, so scale-in activities are blocked until the cooldown period has expired. However, if another alarm triggers a scale-out activity during the cooldown period after a scale-in activity, Application Auto Scaling scales out the target immediately. In this case, the cooldown period for the scale-in activity stops and doesn't complete. Application Auto Scaling provides a default value of 300 for the following scalable targets:   ECS services   Spot Fleet requests   EMR clusters   AppStream 2.0 fleets   Aurora DB clusters   Amazon SageMaker endpoint variants   Custom resources   For all other scalable targets, the default value is 0:   DynamoDB tables   DynamoDB global secondary indexes   Amazon Comprehend document classification endpoints   Lambda provisioned concurrency   Amazon Keyspaces tables  
        public let cooldown: Int?
        /// The aggregation type for the CloudWatch metrics. Valid values are Minimum, Maximum, and Average. If the aggregation type is null, the value is treated as Average.
        public let metricAggregationType: MetricAggregationType?
        /// The minimum value to scale by when scaling by percentages. For example, suppose that you create a step scaling policy to scale out an Amazon ECS service by 25 percent and you specify a MinAdjustmentMagnitude of 2. If the service has 4 tasks and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a MinAdjustmentMagnitude of 2, Application Auto Scaling scales out the service by 2 tasks. Valid only if the adjustment type is PercentChangeInCapacity. 
        public let minAdjustmentMagnitude: Int?
        /// A set of adjustments that enable you to scale based on the size of the alarm breach. At least one step adjustment is required if you are adding a new step scaling policy configuration.
        public let stepAdjustments: [StepAdjustment]?

        public init(adjustmentType: AdjustmentType? = nil, cooldown: Int? = nil, metricAggregationType: MetricAggregationType? = nil, minAdjustmentMagnitude: Int? = nil, stepAdjustments: [StepAdjustment]? = nil) {
            self.adjustmentType = adjustmentType
            self.cooldown = cooldown
            self.metricAggregationType = metricAggregationType
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.stepAdjustments = stepAdjustments
        }

        private enum CodingKeys: String, CodingKey {
            case adjustmentType = "AdjustmentType"
            case cooldown = "Cooldown"
            case metricAggregationType = "MetricAggregationType"
            case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
            case stepAdjustments = "StepAdjustments"
        }
    }

    public struct SuspendedState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DynamicScalingInSuspended", required: false, type: .boolean), 
            AWSShapeMember(label: "DynamicScalingOutSuspended", required: false, type: .boolean), 
            AWSShapeMember(label: "ScheduledScalingSuspended", required: false, type: .boolean)
        ]

        /// Whether scale in by a target tracking scaling policy or a step scaling policy is suspended. Set the value to true if you don't want Application Auto Scaling to remove capacity when a scaling policy is triggered. The default is false. 
        public let dynamicScalingInSuspended: Bool?
        /// Whether scale out by a target tracking scaling policy or a step scaling policy is suspended. Set the value to true if you don't want Application Auto Scaling to add capacity when a scaling policy is triggered. The default is false. 
        public let dynamicScalingOutSuspended: Bool?
        /// Whether scheduled scaling is suspended. Set the value to true if you don't want Application Auto Scaling to add or remove capacity by initiating scheduled actions. The default is false. 
        public let scheduledScalingSuspended: Bool?

        public init(dynamicScalingInSuspended: Bool? = nil, dynamicScalingOutSuspended: Bool? = nil, scheduledScalingSuspended: Bool? = nil) {
            self.dynamicScalingInSuspended = dynamicScalingInSuspended
            self.dynamicScalingOutSuspended = dynamicScalingOutSuspended
            self.scheduledScalingSuspended = scheduledScalingSuspended
        }

        private enum CodingKeys: String, CodingKey {
            case dynamicScalingInSuspended = "DynamicScalingInSuspended"
            case dynamicScalingOutSuspended = "DynamicScalingOutSuspended"
            case scheduledScalingSuspended = "ScheduledScalingSuspended"
        }
    }

    public struct TargetTrackingScalingPolicyConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomizedMetricSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "DisableScaleIn", required: false, type: .boolean), 
            AWSShapeMember(label: "PredefinedMetricSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "ScaleInCooldown", required: false, type: .integer), 
            AWSShapeMember(label: "ScaleOutCooldown", required: false, type: .integer), 
            AWSShapeMember(label: "TargetValue", required: true, type: .double)
        ]

        /// A customized metric. You can specify either a predefined metric or a customized metric.
        public let customizedMetricSpecification: CustomizedMetricSpecification?
        /// Indicates whether scale in by the target tracking scaling policy is disabled. If the value is true, scale in is disabled and the target tracking scaling policy won't remove capacity from the scalable target. Otherwise, scale in is enabled and the target tracking scaling policy can remove capacity from the scalable target. The default value is false.
        public let disableScaleIn: Bool?
        /// A predefined metric. You can specify either a predefined metric or a customized metric.
        public let predefinedMetricSpecification: PredefinedMetricSpecification?
        /// The amount of time, in seconds, after a scale-in activity completes before another scale-in activity can start. With the scale-in cooldown period, the intention is to scale in conservatively to protect your application’s availability, so scale-in activities are blocked until the cooldown period has expired. However, if another alarm triggers a scale-out activity during the scale-in cooldown period, Application Auto Scaling scales out the target immediately. In this case, the scale-in cooldown period stops and doesn't complete. Application Auto Scaling provides a default value of 300 for the following scalable targets:   ECS services   Spot Fleet requests   EMR clusters   AppStream 2.0 fleets   Aurora DB clusters   Amazon SageMaker endpoint variants   Custom resources   For all other scalable targets, the default value is 0:   DynamoDB tables   DynamoDB global secondary indexes   Amazon Comprehend document classification endpoints   Lambda provisioned concurrency   Amazon Keyspaces tables  
        public let scaleInCooldown: Int?
        /// The amount of time, in seconds, to wait for a previous scale-out activity to take effect. With the scale-out cooldown period, the intention is to continuously (but not excessively) scale out. After Application Auto Scaling successfully scales out using a target tracking scaling policy, it starts to calculate the cooldown time. While the scale-out cooldown period is in effect, the capacity added by the initiating scale-out activity is calculated as part of the desired capacity for the next scale-out activity. Application Auto Scaling provides a default value of 300 for the following scalable targets:   ECS services   Spot Fleet requests   EMR clusters   AppStream 2.0 fleets   Aurora DB clusters   Amazon SageMaker endpoint variants   Custom resources   For all other scalable targets, the default value is 0:   DynamoDB tables   DynamoDB global secondary indexes   Amazon Comprehend document classification endpoints   Lambda provisioned concurrency   Amazon Keyspaces tables  
        public let scaleOutCooldown: Int?
        /// The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
        public let targetValue: Double

        public init(customizedMetricSpecification: CustomizedMetricSpecification? = nil, disableScaleIn: Bool? = nil, predefinedMetricSpecification: PredefinedMetricSpecification? = nil, scaleInCooldown: Int? = nil, scaleOutCooldown: Int? = nil, targetValue: Double) {
            self.customizedMetricSpecification = customizedMetricSpecification
            self.disableScaleIn = disableScaleIn
            self.predefinedMetricSpecification = predefinedMetricSpecification
            self.scaleInCooldown = scaleInCooldown
            self.scaleOutCooldown = scaleOutCooldown
            self.targetValue = targetValue
        }

        public func validate(name: String) throws {
            try self.predefinedMetricSpecification?.validate(name: "\(name).predefinedMetricSpecification")
        }

        private enum CodingKeys: String, CodingKey {
            case customizedMetricSpecification = "CustomizedMetricSpecification"
            case disableScaleIn = "DisableScaleIn"
            case predefinedMetricSpecification = "PredefinedMetricSpecification"
            case scaleInCooldown = "ScaleInCooldown"
            case scaleOutCooldown = "ScaleOutCooldown"
            case targetValue = "TargetValue"
        }
    }
}
