// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

//MARK: Paginators

extension WorkLink {

    ///  Retrieves a list of devices registered with the specified fleet.
    public func listDevicesPaginator(_ input: ListDevicesRequest, onPage: @escaping (ListDevicesResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listDevices, tokenKey: \ListDevicesResponse.nextToken, onPage: onPage)
    }

    ///  Retrieves a list of domains associated to a specified fleet.
    public func listDomainsPaginator(_ input: ListDomainsRequest, onPage: @escaping (ListDomainsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listDomains, tokenKey: \ListDomainsResponse.nextToken, onPage: onPage)
    }

    ///  Retrieves a list of fleets for the current account and Region.
    public func listFleetsPaginator(_ input: ListFleetsRequest, onPage: @escaping (ListFleetsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listFleets, tokenKey: \ListFleetsResponse.nextToken, onPage: onPage)
    }

    ///  Retrieves a list of website authorization providers associated with a specified fleet.
    public func listWebsiteAuthorizationProvidersPaginator(_ input: ListWebsiteAuthorizationProvidersRequest, onPage: @escaping (ListWebsiteAuthorizationProvidersResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listWebsiteAuthorizationProviders, tokenKey: \ListWebsiteAuthorizationProvidersResponse.nextToken, onPage: onPage)
    }

    ///  Retrieves a list of certificate authorities added for the current account and Region.
    public func listWebsiteCertificateAuthoritiesPaginator(_ input: ListWebsiteCertificateAuthoritiesRequest, onPage: @escaping (ListWebsiteCertificateAuthoritiesResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listWebsiteCertificateAuthorities, tokenKey: \ListWebsiteCertificateAuthoritiesResponse.nextToken, onPage: onPage)
    }

}

extension WorkLink.ListDevicesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkLink.ListDevicesRequest {
        return .init(
            fleetArn: self.fleetArn, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension WorkLink.ListDomainsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkLink.ListDomainsRequest {
        return .init(
            fleetArn: self.fleetArn, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension WorkLink.ListFleetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkLink.ListFleetsRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension WorkLink.ListWebsiteAuthorizationProvidersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkLink.ListWebsiteAuthorizationProvidersRequest {
        return .init(
            fleetArn: self.fleetArn, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension WorkLink.ListWebsiteCertificateAuthoritiesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkLink.ListWebsiteCertificateAuthoritiesRequest {
        return .init(
            fleetArn: self.fleetArn, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}


