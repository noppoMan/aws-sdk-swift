//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import AWSSDKSwiftCore
import Logging

//MARK: Paginators

extension MachineLearning {

    ///  Returns a list of BatchPrediction operations that match the search criteria in the request.
    public func describeBatchPredictionsPaginator(
        _ input: DescribeBatchPredictionsInput,
        on eventLoop: EventLoop? = nil,
        logger: Logging.Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DescribeBatchPredictionsOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeBatchPredictions, tokenKey: \DescribeBatchPredictionsOutput.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Returns a list of DataSource that match the search criteria in the request.
    public func describeDataSourcesPaginator(
        _ input: DescribeDataSourcesInput,
        on eventLoop: EventLoop? = nil,
        logger: Logging.Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DescribeDataSourcesOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDataSources, tokenKey: \DescribeDataSourcesOutput.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Returns a list of DescribeEvaluations that match the search criteria in the request.
    public func describeEvaluationsPaginator(
        _ input: DescribeEvaluationsInput,
        on eventLoop: EventLoop? = nil,
        logger: Logging.Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DescribeEvaluationsOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeEvaluations, tokenKey: \DescribeEvaluationsOutput.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Returns a list of MLModel that match the search criteria in the request.
    public func describeMLModelsPaginator(
        _ input: DescribeMLModelsInput,
        on eventLoop: EventLoop? = nil,
        logger: Logging.Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DescribeMLModelsOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeMLModels, tokenKey: \DescribeMLModelsOutput.nextToken, on: eventLoop, onPage: onPage)
    }

}

extension MachineLearning.DescribeBatchPredictionsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MachineLearning.DescribeBatchPredictionsInput {
        return .init(
            eq: self.eq,
            filterVariable: self.filterVariable,
            ge: self.ge,
            gt: self.gt,
            le: self.le,
            limit: self.limit,
            lt: self.lt,
            ne: self.ne,
            nextToken: token,
            prefix: self.prefix,
            sortOrder: self.sortOrder
        )

    }
}

extension MachineLearning.DescribeDataSourcesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MachineLearning.DescribeDataSourcesInput {
        return .init(
            eq: self.eq,
            filterVariable: self.filterVariable,
            ge: self.ge,
            gt: self.gt,
            le: self.le,
            limit: self.limit,
            lt: self.lt,
            ne: self.ne,
            nextToken: token,
            prefix: self.prefix,
            sortOrder: self.sortOrder
        )

    }
}

extension MachineLearning.DescribeEvaluationsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MachineLearning.DescribeEvaluationsInput {
        return .init(
            eq: self.eq,
            filterVariable: self.filterVariable,
            ge: self.ge,
            gt: self.gt,
            le: self.le,
            limit: self.limit,
            lt: self.lt,
            ne: self.ne,
            nextToken: token,
            prefix: self.prefix,
            sortOrder: self.sortOrder
        )

    }
}

extension MachineLearning.DescribeMLModelsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MachineLearning.DescribeMLModelsInput {
        return .init(
            eq: self.eq,
            filterVariable: self.filterVariable,
            ge: self.ge,
            gt: self.gt,
            le: self.le,
            limit: self.limit,
            lt: self.lt,
            ne: self.ne,
            nextToken: token,
            prefix: self.prefix,
            sortOrder: self.sortOrder
        )

    }
}


