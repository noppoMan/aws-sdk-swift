// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension GameLift {

    public struct AcceptMatchInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptanceType", required: true, type: .enum), 
            AWSShapeMember(label: "PlayerIds", required: true, type: .list), 
            AWSShapeMember(label: "TicketId", required: true, type: .string)
        ]

        /// Player response to the proposed match.
        public let acceptanceType: AcceptanceType
        /// Unique identifier for a player delivering the response. This parameter can include one or multiple player IDs.
        public let playerIds: [String]
        /// Unique identifier for a matchmaking ticket. The ticket must be in status REQUIRES_ACCEPTANCE; otherwise this request will fail.
        public let ticketId: String

        public init(acceptanceType: AcceptanceType, playerIds: [String], ticketId: String) {
            self.acceptanceType = acceptanceType
            self.playerIds = playerIds
            self.ticketId = ticketId
        }

        public func validate(name: String) throws {
            try self.playerIds.forEach {
                try validate($0, name: "playerIds[]", parent: name, max: 1024)
                try validate($0, name: "playerIds[]", parent: name, min: 1)
            }
            try validate(self.ticketId, name:"ticketId", parent: name, max: 128)
            try validate(self.ticketId, name:"ticketId", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceType = "AcceptanceType"
            case playerIds = "PlayerIds"
            case ticketId = "TicketId"
        }
    }

    public struct AcceptMatchOutput: AWSShape {


        public init() {
        }

    }

    public enum AcceptanceType: String, CustomStringConvertible, Codable {
        case accept = "ACCEPT"
        case reject = "REJECT"
        public var description: String { return self.rawValue }
    }

    public struct Alias: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasArn", required: false, type: .string), 
            AWSShapeMember(label: "AliasId", required: false, type: .string), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "RoutingStrategy", required: false, type: .structure)
        ]

        /// Unique identifier for an alias; alias ARNs are unique across all regions.
        public let aliasArn: String?
        /// Unique identifier for an alias; alias IDs are unique within a region.
        public let aliasId: String?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// Human-readable description of an alias.
        public let description: String?
        /// Time stamp indicating when this data object was last modified. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let lastUpdatedTime: TimeStamp?
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String?
        /// Alias configuration for the alias, including routing type and settings.
        public let routingStrategy: RoutingStrategy?

        public init(aliasArn: String? = nil, aliasId: String? = nil, creationTime: TimeStamp? = nil, description: String? = nil, lastUpdatedTime: TimeStamp? = nil, name: String? = nil, routingStrategy: RoutingStrategy? = nil) {
            self.aliasArn = aliasArn
            self.aliasId = aliasId
            self.creationTime = creationTime
            self.description = description
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.routingStrategy = routingStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case aliasArn = "AliasArn"
            case aliasId = "AliasId"
            case creationTime = "CreationTime"
            case description = "Description"
            case lastUpdatedTime = "LastUpdatedTime"
            case name = "Name"
            case routingStrategy = "RoutingStrategy"
        }
    }

    public struct AttributeValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "N", required: false, type: .double), 
            AWSShapeMember(label: "S", required: false, type: .string), 
            AWSShapeMember(label: "SDM", required: false, type: .map), 
            AWSShapeMember(label: "SL", required: false, type: .list)
        ]

        /// For number values, expressed as double.
        public let n: Double?
        /// For single string values. Maximum string length is 100 characters.
        public let s: String?
        /// For a map of up to 10 data type:value pairs. Maximum length for each string value is 100 characters. 
        public let sdm: [String: Double]?
        /// For a list of up to 10 strings. Maximum length for each string is 100 characters. Duplicate values are not recognized; all occurrences of the repeated value after the first of a repeated value are ignored.
        public let sl: [String]?

        public init(n: Double? = nil, s: String? = nil, sdm: [String: Double]? = nil, sl: [String]? = nil) {
            self.n = n
            self.s = s
            self.sdm = sdm
            self.sl = sl
        }

        public func validate(name: String) throws {
            try validate(self.s, name:"s", parent: name, max: 1024)
            try validate(self.s, name:"s", parent: name, min: 1)
            try self.sdm?.forEach {
                try validate($0.key, name:"sdm.key", parent: name, max: 1024)
                try validate($0.key, name:"sdm.key", parent: name, min: 1)
            }
            try self.sl?.forEach {
                try validate($0, name: "sl[]", parent: name, max: 1024)
                try validate($0, name: "sl[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case n = "N"
            case s = "S"
            case sdm = "SDM"
            case sl = "SL"
        }
    }

    public struct AwsCredentials: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessKeyId", required: false, type: .string), 
            AWSShapeMember(label: "SecretAccessKey", required: false, type: .string), 
            AWSShapeMember(label: "SessionToken", required: false, type: .string)
        ]

        /// Temporary key allowing access to the Amazon GameLift S3 account.
        public let accessKeyId: String?
        /// Temporary secret key allowing access to the Amazon GameLift S3 account.
        public let secretAccessKey: String?
        /// Token used to associate a specific build ID with the files uploaded using these credentials.
        public let sessionToken: String?

        public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil) {
            self.accessKeyId = accessKeyId
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }

        private enum CodingKeys: String, CodingKey {
            case accessKeyId = "AccessKeyId"
            case secretAccessKey = "SecretAccessKey"
            case sessionToken = "SessionToken"
        }
    }

    public enum BackfillMode: String, CustomStringConvertible, Codable {
        case automatic = "AUTOMATIC"
        case manual = "MANUAL"
        public var description: String { return self.rawValue }
    }

    public struct Build: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BuildId", required: false, type: .string), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "SizeOnDisk", required: false, type: .long), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]

        /// Unique identifier for a build.
        public let buildId: String?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// Descriptive label that is associated with a build. Build names do not need to be unique. It can be set using CreateBuild or UpdateBuild.
        public let name: String?
        /// Operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build.
        public let operatingSystem: OperatingSystem?
        /// File size of the uploaded game build, expressed in bytes. When the build status is INITIALIZED, this value is 0.
        public let sizeOnDisk: Int64?
        /// Current status of the build. Possible build statuses include the following:    INITIALIZED -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.     READY -- The game build has been successfully uploaded. You can now create new fleets for this build.    FAILED -- The game build upload failed. You cannot create new fleets for this build.   
        public let status: BuildStatus?
        /// Version that is associated with a build or script. Version strings do not need to be unique. This value can be set using CreateBuild or UpdateBuild.
        public let version: String?

        public init(buildId: String? = nil, creationTime: TimeStamp? = nil, name: String? = nil, operatingSystem: OperatingSystem? = nil, sizeOnDisk: Int64? = nil, status: BuildStatus? = nil, version: String? = nil) {
            self.buildId = buildId
            self.creationTime = creationTime
            self.name = name
            self.operatingSystem = operatingSystem
            self.sizeOnDisk = sizeOnDisk
            self.status = status
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
            case creationTime = "CreationTime"
            case name = "Name"
            case operatingSystem = "OperatingSystem"
            case sizeOnDisk = "SizeOnDisk"
            case status = "Status"
            case version = "Version"
        }
    }

    public enum BuildStatus: String, CustomStringConvertible, Codable {
        case initialized = "INITIALIZED"
        case ready = "READY"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct CertificateConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateType", required: true, type: .enum)
        ]

        public let certificateType: CertificateType

        public init(certificateType: CertificateType) {
            self.certificateType = certificateType
        }

        private enum CodingKeys: String, CodingKey {
            case certificateType = "CertificateType"
        }
    }

    public enum CertificateType: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case generated = "GENERATED"
        public var description: String { return self.rawValue }
    }

    public enum ComparisonOperatorType: String, CustomStringConvertible, Codable {
        case greaterthanorequaltothreshold = "GreaterThanOrEqualToThreshold"
        case greaterthanthreshold = "GreaterThanThreshold"
        case lessthanthreshold = "LessThanThreshold"
        case lessthanorequaltothreshold = "LessThanOrEqualToThreshold"
        public var description: String { return self.rawValue }
    }

    public struct CreateAliasInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "RoutingStrategy", required: true, type: .structure)
        ]

        /// Human-readable description of an alias.
        public let description: String?
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String
        /// Object that specifies the fleet and routing type to use for the alias.
        public let routingStrategy: RoutingStrategy

        public init(description: String? = nil, name: String, routingStrategy: RoutingStrategy) {
            self.description = description
            self.name = name
            self.routingStrategy = routingStrategy
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 1024)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, max: 1024)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: ".*\\S.*")
            try self.routingStrategy.validate(name: "\(name).routingStrategy")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case name = "Name"
            case routingStrategy = "RoutingStrategy"
        }
    }

    public struct CreateAliasOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alias", required: false, type: .structure)
        ]

        /// Object that describes the newly created alias record.
        public let alias: Alias?

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

        private enum CodingKeys: String, CodingKey {
            case alias = "Alias"
        }
    }

    public struct CreateBuildInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "StorageLocation", required: false, type: .structure), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]

        /// Descriptive label that is associated with a build. Build names do not need to be unique. You can use UpdateBuild to change this value later. 
        public let name: String?
        /// Operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system. If an operating system is not specified when creating a build, Amazon GameLift uses the default value (WINDOWS_2012). This value cannot be changed later.
        public let operatingSystem: OperatingSystem?
        /// Information indicating where your game build files are stored. Use this parameter only when creating a build with files stored in an Amazon S3 bucket that you own. The storage location must specify an Amazon S3 bucket name and key, as well as a the ARN for a role that you set up to allow Amazon GameLift to access your Amazon S3 bucket. The S3 bucket must be in the same region that you want to create a new build in.
        public let storageLocation: S3Location?
        /// Version that is associated with a build or script. Version strings do not need to be unique. You can use UpdateBuild to change this value later. 
        public let version: String?

        public init(name: String? = nil, operatingSystem: OperatingSystem? = nil, storageLocation: S3Location? = nil, version: String? = nil) {
            self.name = name
            self.operatingSystem = operatingSystem
            self.storageLocation = storageLocation
            self.version = version
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 1024)
            try validate(self.name, name:"name", parent: name, min: 1)
            try self.storageLocation?.validate(name: "\(name).storageLocation")
            try validate(self.version, name:"version", parent: name, max: 1024)
            try validate(self.version, name:"version", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case operatingSystem = "OperatingSystem"
            case storageLocation = "StorageLocation"
            case version = "Version"
        }
    }

    public struct CreateBuildOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Build", required: false, type: .structure), 
            AWSShapeMember(label: "StorageLocation", required: false, type: .structure), 
            AWSShapeMember(label: "UploadCredentials", required: false, type: .structure)
        ]

        /// The newly created build record, including a unique build ID and status. 
        public let build: Build?
        /// Amazon S3 location for your game build file, including bucket name and key.
        public let storageLocation: S3Location?
        /// This element is returned only when the operation is called without a storage location. It contains credentials to use when you are uploading a build file to an Amazon S3 bucket that is owned by Amazon GameLift. Credentials have a limited life span. To refresh these credentials, call RequestUploadCredentials. 
        public let uploadCredentials: AwsCredentials?

        public init(build: Build? = nil, storageLocation: S3Location? = nil, uploadCredentials: AwsCredentials? = nil) {
            self.build = build
            self.storageLocation = storageLocation
            self.uploadCredentials = uploadCredentials
        }

        private enum CodingKeys: String, CodingKey {
            case build = "Build"
            case storageLocation = "StorageLocation"
            case uploadCredentials = "UploadCredentials"
        }
    }

    public struct CreateFleetInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BuildId", required: false, type: .string), 
            AWSShapeMember(label: "CertificateConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "EC2InboundPermissions", required: false, type: .list), 
            AWSShapeMember(label: "EC2InstanceType", required: true, type: .enum), 
            AWSShapeMember(label: "FleetType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "LogPaths", required: false, type: .list), 
            AWSShapeMember(label: "MetricGroups", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "NewGameSessionProtectionPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "PeerVpcAwsAccountId", required: false, type: .string), 
            AWSShapeMember(label: "PeerVpcId", required: false, type: .string), 
            AWSShapeMember(label: "ResourceCreationLimitPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "RuntimeConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ScriptId", required: false, type: .string), 
            AWSShapeMember(label: "ServerLaunchParameters", required: false, type: .string), 
            AWSShapeMember(label: "ServerLaunchPath", required: false, type: .string)
        ]

        /// Unique identifier for a build to be deployed on the new fleet. The custom game server build must have been successfully uploaded to Amazon GameLift and be in a READY status. This fleet setting cannot be changed once the fleet is created.
        public let buildId: String?
        public let certificateConfiguration: CertificateConfiguration?
        /// Human-readable description of a fleet.
        public let description: String?
        /// Range of IP addresses and port settings that permit inbound traffic to access game sessions that running on the fleet. For fleets using a custom game build, this parameter is required before game sessions running on the fleet can accept connections. For Realtime Servers fleets, Amazon GameLift automatically sets TCP and UDP ranges for use by the Realtime servers. You can specify multiple permission settings or add more by updating the fleet.
        public let eC2InboundPermissions: [IpPermission]?
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        public let eC2InstanceType: EC2InstanceType
        /// Indicates whether to use on-demand instances or spot instances for this fleet. If empty, the default is ON_DEMAND. Both categories of instances use identical hardware and configurations based on the instance type selected for this fleet. Learn more about  On-Demand versus Spot Instances. 
        public let fleetType: FleetType?
        /// Unique identifier for an AWS IAM role that manages access to your AWS services. With an instance role ARN set, any application that runs on an instance in this fleet can assume the role, including install scripts, server processes, daemons (background processes). Create a role or look up a role's ARN using the IAM dashboard in the AWS Management Console. Learn more about using on-box credentials for your game servers at  Access external resources from a game server.
        public let instanceRoleArn: String?
        /// This parameter is no longer used. Instead, to specify where Amazon GameLift should store log files once a server process shuts down, use the Amazon GameLift server API ProcessReady() and specify one or more directory paths in logParameters. See more information in the Server API Reference. 
        public let logPaths: [String]?
        /// Name of an Amazon CloudWatch metric group to add this fleet to. A metric group aggregates the metrics for all fleets in the group. Specify an existing metric group name, or provide a new name to create a new metric group. A fleet can only be included in one metric group at a time. 
        public let metricGroups: [String]?
        /// Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public let name: String
        /// Game session protection policy to apply to all instances in this fleet. If this parameter is not set, instances in this fleet default to no protection. You can change a fleet's protection policy using UpdateFleetAttributes, but this change will only affect sessions created after the policy change. You can also set protection for individual instances using UpdateGameSession.    NoProtection -- The game session can be terminated during a scale-down event.    FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let newGameSessionProtectionPolicy: ProtectionPolicy?
        /// Unique identifier for the AWS account with the VPC that you want to peer your Amazon GameLift fleet with. You can find your Account ID in the AWS Management Console under account settings. 
        public let peerVpcAwsAccountId: String?
        /// Unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same region where your fleet is deployed. Look up a VPC ID using the VPC Dashboard in the AWS Management Console. Learn more about VPC peering in VPC Peering with Amazon GameLift Fleets. 
        public let peerVpcId: String?
        /// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet.
        public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
        /// Instructions for launching server processes on each instance in the fleet. Server processes run either a custom game build executable or a Realtime Servers script. The run-time configuration lists the types of server processes to run on an instance and includes the following configuration settings: the server executable or launch script file, launch parameters, and the number of processes to run concurrently on each instance. A CreateFleet request must include a run-time configuration with at least one server process configuration.
        public let runtimeConfiguration: RuntimeConfiguration?
        /// Unique identifier for a Realtime script to be deployed on the new fleet. The Realtime script must have been successfully uploaded to Amazon GameLift. This fleet setting cannot be changed once the fleet is created.
        public let scriptId: String?
        /// This parameter is no longer used. Instead, specify server launch parameters in the RuntimeConfiguration parameter. (Requests that specify a server launch path and launch parameters instead of a run-time configuration will continue to work.)
        public let serverLaunchParameters: String?
        /// This parameter is no longer used. Instead, specify a server launch path using the RuntimeConfiguration parameter. (Requests that specify a server launch path and launch parameters instead of a run-time configuration will continue to work.)
        public let serverLaunchPath: String?

        public init(buildId: String? = nil, certificateConfiguration: CertificateConfiguration? = nil, description: String? = nil, eC2InboundPermissions: [IpPermission]? = nil, eC2InstanceType: EC2InstanceType, fleetType: FleetType? = nil, instanceRoleArn: String? = nil, logPaths: [String]? = nil, metricGroups: [String]? = nil, name: String, newGameSessionProtectionPolicy: ProtectionPolicy? = nil, peerVpcAwsAccountId: String? = nil, peerVpcId: String? = nil, resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil, runtimeConfiguration: RuntimeConfiguration? = nil, scriptId: String? = nil, serverLaunchParameters: String? = nil, serverLaunchPath: String? = nil) {
            self.buildId = buildId
            self.certificateConfiguration = certificateConfiguration
            self.description = description
            self.eC2InboundPermissions = eC2InboundPermissions
            self.eC2InstanceType = eC2InstanceType
            self.fleetType = fleetType
            self.instanceRoleArn = instanceRoleArn
            self.logPaths = logPaths
            self.metricGroups = metricGroups
            self.name = name
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.peerVpcAwsAccountId = peerVpcAwsAccountId
            self.peerVpcId = peerVpcId
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.runtimeConfiguration = runtimeConfiguration
            self.scriptId = scriptId
            self.serverLaunchParameters = serverLaunchParameters
            self.serverLaunchPath = serverLaunchPath
        }

        public func validate(name: String) throws {
            try validate(self.buildId, name:"buildId", parent: name, pattern: "^build-\\S+")
            try validate(self.description, name:"description", parent: name, max: 1024)
            try validate(self.description, name:"description", parent: name, min: 1)
            try self.eC2InboundPermissions?.forEach {
                try $0.validate(name: "\(name).eC2InboundPermissions[]")
            }
            try validate(self.eC2InboundPermissions, name:"eC2InboundPermissions", parent: name, max: 50)
            try validate(self.instanceRoleArn, name:"instanceRoleArn", parent: name, min: 1)
            try self.logPaths?.forEach {
                try validate($0, name: "logPaths[]", parent: name, max: 1024)
                try validate($0, name: "logPaths[]", parent: name, min: 1)
            }
            try self.metricGroups?.forEach {
                try validate($0, name: "metricGroups[]", parent: name, max: 255)
                try validate($0, name: "metricGroups[]", parent: name, min: 1)
            }
            try validate(self.metricGroups, name:"metricGroups", parent: name, max: 1)
            try validate(self.name, name:"name", parent: name, max: 1024)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.peerVpcAwsAccountId, name:"peerVpcAwsAccountId", parent: name, max: 1024)
            try validate(self.peerVpcAwsAccountId, name:"peerVpcAwsAccountId", parent: name, min: 1)
            try validate(self.peerVpcId, name:"peerVpcId", parent: name, max: 1024)
            try validate(self.peerVpcId, name:"peerVpcId", parent: name, min: 1)
            try self.resourceCreationLimitPolicy?.validate(name: "\(name).resourceCreationLimitPolicy")
            try self.runtimeConfiguration?.validate(name: "\(name).runtimeConfiguration")
            try validate(self.scriptId, name:"scriptId", parent: name, pattern: "^script-\\S+|^arn:.*script-\\S+")
            try validate(self.serverLaunchParameters, name:"serverLaunchParameters", parent: name, max: 1024)
            try validate(self.serverLaunchParameters, name:"serverLaunchParameters", parent: name, min: 1)
            try validate(self.serverLaunchPath, name:"serverLaunchPath", parent: name, max: 1024)
            try validate(self.serverLaunchPath, name:"serverLaunchPath", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
            case certificateConfiguration = "CertificateConfiguration"
            case description = "Description"
            case eC2InboundPermissions = "EC2InboundPermissions"
            case eC2InstanceType = "EC2InstanceType"
            case fleetType = "FleetType"
            case instanceRoleArn = "InstanceRoleArn"
            case logPaths = "LogPaths"
            case metricGroups = "MetricGroups"
            case name = "Name"
            case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
            case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
            case peerVpcId = "PeerVpcId"
            case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
            case runtimeConfiguration = "RuntimeConfiguration"
            case scriptId = "ScriptId"
            case serverLaunchParameters = "ServerLaunchParameters"
            case serverLaunchPath = "ServerLaunchPath"
        }
    }

    public struct CreateFleetOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetAttributes", required: false, type: .structure)
        ]

        /// Properties for the newly created fleet.
        public let fleetAttributes: FleetAttributes?

        public init(fleetAttributes: FleetAttributes? = nil) {
            self.fleetAttributes = fleetAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case fleetAttributes = "FleetAttributes"
        }
    }

    public struct CreateGameSessionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasId", required: false, type: .string), 
            AWSShapeMember(label: "CreatorId", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "GameProperties", required: false, type: .list), 
            AWSShapeMember(label: "GameSessionData", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: false, type: .string), 
            AWSShapeMember(label: "MaximumPlayerSessionCount", required: true, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]

        /// Unique identifier for an alias associated with the fleet to create a game session in. Each request must reference either a fleet ID or alias ID, but not both.
        public let aliasId: String?
        /// Unique identifier for a player or entity creating the game session. This ID is used to enforce a resource protection policy (if one exists) that limits the number of concurrent active game sessions one player can have.
        public let creatorId: String?
        /// Unique identifier for a fleet to create a game session in. Each request must reference either a fleet ID or alias ID, but not both.
        public let fleetId: String?
        /// Set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session).
        public let gameProperties: [GameProperty]?
        /// Set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session).
        public let gameSessionData: String?
        ///  This parameter is no longer preferred. Please use IdempotencyToken instead. Custom string that uniquely identifies a request for a new game session. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID. (A game session ARN has the following format: arn:aws:gamelift:&lt;region&gt;::gamesession/&lt;fleet ID&gt;/&lt;custom ID string or idempotency token&gt;.) 
        public let gameSessionId: String?
        /// Custom string that uniquely identifies a request for a new game session. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID. (A game session ARN has the following format: arn:aws:gamelift:&lt;region&gt;::gamesession/&lt;fleet ID&gt;/&lt;custom ID string or idempotency token&gt;.) Idempotency tokens remain in use for 30 days after a game session has ended; game session objects are retained for this time period and then deleted.
        public let idempotencyToken: String?
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let name: String?

        public init(aliasId: String? = nil, creatorId: String? = nil, fleetId: String? = nil, gameProperties: [GameProperty]? = nil, gameSessionData: String? = nil, gameSessionId: String? = nil, idempotencyToken: String? = nil, maximumPlayerSessionCount: Int, name: String? = nil) {
            self.aliasId = aliasId
            self.creatorId = creatorId
            self.fleetId = fleetId
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionId = gameSessionId
            self.idempotencyToken = idempotencyToken
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.aliasId, name:"aliasId", parent: name, pattern: "^alias-\\S+")
            try validate(self.creatorId, name:"creatorId", parent: name, max: 1024)
            try validate(self.creatorId, name:"creatorId", parent: name, min: 1)
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try self.gameProperties?.forEach {
                try $0.validate(name: "\(name).gameProperties[]")
            }
            try validate(self.gameProperties, name:"gameProperties", parent: name, max: 16)
            try validate(self.gameSessionData, name:"gameSessionData", parent: name, max: 4096)
            try validate(self.gameSessionData, name:"gameSessionData", parent: name, min: 1)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, max: 48)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, min: 1)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, pattern: "[a-zA-Z0-9-]+")
            try validate(self.idempotencyToken, name:"idempotencyToken", parent: name, max: 48)
            try validate(self.idempotencyToken, name:"idempotencyToken", parent: name, min: 1)
            try validate(self.idempotencyToken, name:"idempotencyToken", parent: name, pattern: "[a-zA-Z0-9-]+")
            try validate(self.maximumPlayerSessionCount, name:"maximumPlayerSessionCount", parent: name, min: 0)
            try validate(self.name, name:"name", parent: name, max: 1024)
            try validate(self.name, name:"name", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
            case creatorId = "CreatorId"
            case fleetId = "FleetId"
            case gameProperties = "GameProperties"
            case gameSessionData = "GameSessionData"
            case gameSessionId = "GameSessionId"
            case idempotencyToken = "IdempotencyToken"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
            case name = "Name"
        }
    }

    public struct CreateGameSessionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSession", required: false, type: .structure)
        ]

        /// Object that describes the newly created game session record.
        public let gameSession: GameSession?

        public init(gameSession: GameSession? = nil) {
            self.gameSession = gameSession
        }

        private enum CodingKeys: String, CodingKey {
            case gameSession = "GameSession"
        }
    }

    public struct CreateGameSessionQueueInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destinations", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "PlayerLatencyPolicies", required: false, type: .list), 
            AWSShapeMember(label: "TimeoutInSeconds", required: false, type: .integer)
        ]

        /// List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order.
        public let destinations: [GameSessionQueueDestination]?
        /// Descriptive label that is associated with game session queue. Queue names must be unique within each region.
        public let name: String
        /// Collection of latency policies to apply when processing game sessions placement requests with player latency information. Multiple policies are evaluated in order of the maximum latency value, starting with the lowest latency values. With just one policy, it is enforced at the start of the game session placement for the duration period. With multiple policies, each policy is enforced consecutively for its duration period. For example, a queue might enforce a 60-second policy followed by a 120-second policy, and then no policy for the remainder of the placement. A player latency policy must set a value for MaximumIndividualPlayerLatencyMilliseconds; if none is set, this API requests will fail.
        public let playerLatencyPolicies: [PlayerLatencyPolicy]?
        /// Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public let timeoutInSeconds: Int?

        public init(destinations: [GameSessionQueueDestination]? = nil, name: String, playerLatencyPolicies: [PlayerLatencyPolicy]? = nil, timeoutInSeconds: Int? = nil) {
            self.destinations = destinations
            self.name = name
            self.playerLatencyPolicies = playerLatencyPolicies
            self.timeoutInSeconds = timeoutInSeconds
        }

        public func validate(name: String) throws {
            try self.destinations?.forEach {
                try $0.validate(name: "\(name).destinations[]")
            }
            try validate(self.name, name:"name", parent: name, max: 128)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.playerLatencyPolicies?.forEach {
                try $0.validate(name: "\(name).playerLatencyPolicies[]")
            }
            try validate(self.timeoutInSeconds, name:"timeoutInSeconds", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case destinations = "Destinations"
            case name = "Name"
            case playerLatencyPolicies = "PlayerLatencyPolicies"
            case timeoutInSeconds = "TimeoutInSeconds"
        }
    }

    public struct CreateGameSessionQueueOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionQueue", required: false, type: .structure)
        ]

        /// Object that describes the newly created game session queue.
        public let gameSessionQueue: GameSessionQueue?

        public init(gameSessionQueue: GameSessionQueue? = nil) {
            self.gameSessionQueue = gameSessionQueue
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionQueue = "GameSessionQueue"
        }
    }

    public struct CreateMatchmakingConfigurationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptanceRequired", required: true, type: .boolean), 
            AWSShapeMember(label: "AcceptanceTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "AdditionalPlayerCount", required: false, type: .integer), 
            AWSShapeMember(label: "BackfillMode", required: false, type: .enum), 
            AWSShapeMember(label: "CustomEventData", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "GameProperties", required: false, type: .list), 
            AWSShapeMember(label: "GameSessionData", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionQueueArns", required: true, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "NotificationTarget", required: false, type: .string), 
            AWSShapeMember(label: "RequestTimeoutSeconds", required: true, type: .integer), 
            AWSShapeMember(label: "RuleSetName", required: true, type: .string)
        ]

        /// Flag that determines whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE.
        public let acceptanceRequired: Bool
        /// Length of time (in seconds) to wait for players to accept a proposed match. If any player rejects the match or fails to accept before the timeout, the ticket continues to look for an acceptable match.
        public let acceptanceTimeoutSeconds: Int?
        /// Number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match.
        public let additionalPlayerCount: Int?
        /// Method used to backfill game sessions created with this matchmaking configuration. Specify MANUAL when your game manages backfill requests manually or does not use the match backfill feature. Specify AUTOMATIC to have GameLift create a StartMatchBackfill request whenever a game session has one or more open slots. Learn more about manual and automatic backfill in  Backfill Existing Games with FlexMatch. 
        public let backfillMode: BackfillMode?
        /// Information to be added to all events related to this matchmaking configuration. 
        public let customEventData: String?
        /// Meaningful description of the matchmaking configuration. 
        public let description: String?
        /// Set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session). This information is added to the new GameSession object that is created for a successful match. 
        public let gameProperties: [GameProperty]?
        /// Set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session). This information is added to the new GameSession object that is created for a successful match.
        public let gameSessionData: String?
        /// Amazon Resource Name (ARN) that is assigned to a game session queue and uniquely identifies it. Format is arn:aws:gamelift:&lt;region&gt;:&lt;aws account&gt;:gamesessionqueue/&lt;queue name&gt;. These queues are used when placing game sessions for matches that are created with this matchmaking configuration. Queues can be located in any region.
        public let gameSessionQueueArns: [String]
        /// Unique identifier for a matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.
        public let name: String
        /// SNS topic ARN that is set up to receive matchmaking notifications.
        public let notificationTarget: String?
        /// Maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
        public let requestTimeoutSeconds: Int
        /// Unique identifier for a matchmaking rule set to use with this configuration. A matchmaking configuration can only use rule sets that are defined in the same region.
        public let ruleSetName: String

        public init(acceptanceRequired: Bool, acceptanceTimeoutSeconds: Int? = nil, additionalPlayerCount: Int? = nil, backfillMode: BackfillMode? = nil, customEventData: String? = nil, description: String? = nil, gameProperties: [GameProperty]? = nil, gameSessionData: String? = nil, gameSessionQueueArns: [String], name: String, notificationTarget: String? = nil, requestTimeoutSeconds: Int, ruleSetName: String) {
            self.acceptanceRequired = acceptanceRequired
            self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
            self.additionalPlayerCount = additionalPlayerCount
            self.backfillMode = backfillMode
            self.customEventData = customEventData
            self.description = description
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionQueueArns = gameSessionQueueArns
            self.name = name
            self.notificationTarget = notificationTarget
            self.requestTimeoutSeconds = requestTimeoutSeconds
            self.ruleSetName = ruleSetName
        }

        public func validate(name: String) throws {
            try validate(self.acceptanceTimeoutSeconds, name:"acceptanceTimeoutSeconds", parent: name, max: 600)
            try validate(self.acceptanceTimeoutSeconds, name:"acceptanceTimeoutSeconds", parent: name, min: 1)
            try validate(self.additionalPlayerCount, name:"additionalPlayerCount", parent: name, min: 0)
            try validate(self.customEventData, name:"customEventData", parent: name, max: 256)
            try validate(self.customEventData, name:"customEventData", parent: name, min: 0)
            try validate(self.description, name:"description", parent: name, max: 1024)
            try validate(self.description, name:"description", parent: name, min: 1)
            try self.gameProperties?.forEach {
                try $0.validate(name: "\(name).gameProperties[]")
            }
            try validate(self.gameProperties, name:"gameProperties", parent: name, max: 16)
            try validate(self.gameSessionData, name:"gameSessionData", parent: name, max: 4096)
            try validate(self.gameSessionData, name:"gameSessionData", parent: name, min: 1)
            try self.gameSessionQueueArns.forEach {
                try validate($0, name: "gameSessionQueueArns[]", parent: name, max: 256)
                try validate($0, name: "gameSessionQueueArns[]", parent: name, min: 1)
                try validate($0, name: "gameSessionQueueArns[]", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            }
            try validate(self.name, name:"name", parent: name, max: 128)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
            try validate(self.notificationTarget, name:"notificationTarget", parent: name, max: 300)
            try validate(self.notificationTarget, name:"notificationTarget", parent: name, min: 0)
            try validate(self.notificationTarget, name:"notificationTarget", parent: name, pattern: "[a-zA-Z0-9:_/-]*")
            try validate(self.requestTimeoutSeconds, name:"requestTimeoutSeconds", parent: name, max: 43200)
            try validate(self.requestTimeoutSeconds, name:"requestTimeoutSeconds", parent: name, min: 1)
            try validate(self.ruleSetName, name:"ruleSetName", parent: name, max: 128)
            try validate(self.ruleSetName, name:"ruleSetName", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "AcceptanceRequired"
            case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
            case additionalPlayerCount = "AdditionalPlayerCount"
            case backfillMode = "BackfillMode"
            case customEventData = "CustomEventData"
            case description = "Description"
            case gameProperties = "GameProperties"
            case gameSessionData = "GameSessionData"
            case gameSessionQueueArns = "GameSessionQueueArns"
            case name = "Name"
            case notificationTarget = "NotificationTarget"
            case requestTimeoutSeconds = "RequestTimeoutSeconds"
            case ruleSetName = "RuleSetName"
        }
    }

    public struct CreateMatchmakingConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configuration", required: false, type: .structure)
        ]

        /// Object that describes the newly created matchmaking configuration.
        public let configuration: MatchmakingConfiguration?

        public init(configuration: MatchmakingConfiguration? = nil) {
            self.configuration = configuration
        }

        private enum CodingKeys: String, CodingKey {
            case configuration = "Configuration"
        }
    }

    public struct CreateMatchmakingRuleSetInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "RuleSetBody", required: true, type: .string)
        ]

        /// Unique identifier for a matchmaking rule set. A matchmaking configuration identifies the rule set it uses by this name value. (Note: The rule set name is different from the optional "name" field in the rule set body.) 
        public let name: String
        /// Collection of matchmaking rules, formatted as a JSON string. Comments are not allowed in JSON, but most elements support a description field.
        public let ruleSetBody: String

        public init(name: String, ruleSetBody: String) {
            self.name = name
            self.ruleSetBody = ruleSetBody
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 128)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
            try validate(self.ruleSetBody, name:"ruleSetBody", parent: name, max: 65535)
            try validate(self.ruleSetBody, name:"ruleSetBody", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case ruleSetBody = "RuleSetBody"
        }
    }

    public struct CreateMatchmakingRuleSetOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuleSet", required: true, type: .structure)
        ]

        /// Object that describes the newly created matchmaking rule set.
        public let ruleSet: MatchmakingRuleSet

        public init(ruleSet: MatchmakingRuleSet) {
            self.ruleSet = ruleSet
        }

        private enum CodingKeys: String, CodingKey {
            case ruleSet = "RuleSet"
        }
    }

    public struct CreatePlayerSessionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionId", required: true, type: .string), 
            AWSShapeMember(label: "PlayerData", required: false, type: .string), 
            AWSShapeMember(label: "PlayerId", required: true, type: .string)
        ]

        /// Unique identifier for the game session to add a player to.
        public let gameSessionId: String
        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
        public let playerData: String?
        /// Unique identifier for a player. Player IDs are developer-defined.
        public let playerId: String

        public init(gameSessionId: String, playerData: String? = nil, playerId: String) {
            self.gameSessionId = gameSessionId
            self.playerData = playerData
            self.playerId = playerId
        }

        public func validate(name: String) throws {
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, max: 256)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, min: 1)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try validate(self.playerData, name:"playerData", parent: name, max: 2048)
            try validate(self.playerData, name:"playerData", parent: name, min: 1)
            try validate(self.playerId, name:"playerId", parent: name, max: 1024)
            try validate(self.playerId, name:"playerId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionId = "GameSessionId"
            case playerData = "PlayerData"
            case playerId = "PlayerId"
        }
    }

    public struct CreatePlayerSessionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlayerSession", required: false, type: .structure)
        ]

        /// Object that describes the newly created player session record.
        public let playerSession: PlayerSession?

        public init(playerSession: PlayerSession? = nil) {
            self.playerSession = playerSession
        }

        private enum CodingKeys: String, CodingKey {
            case playerSession = "PlayerSession"
        }
    }

    public struct CreatePlayerSessionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionId", required: true, type: .string), 
            AWSShapeMember(label: "PlayerDataMap", required: false, type: .map), 
            AWSShapeMember(label: "PlayerIds", required: true, type: .list)
        ]

        /// Unique identifier for the game session to add players to.
        public let gameSessionId: String
        /// Map of string pairs, each specifying a player ID and a set of developer-defined information related to the player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game. Player data strings for player IDs not included in the PlayerIds parameter are ignored. 
        public let playerDataMap: [String: String]?
        /// List of unique identifiers for the players to be added.
        public let playerIds: [String]

        public init(gameSessionId: String, playerDataMap: [String: String]? = nil, playerIds: [String]) {
            self.gameSessionId = gameSessionId
            self.playerDataMap = playerDataMap
            self.playerIds = playerIds
        }

        public func validate(name: String) throws {
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, max: 256)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, min: 1)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try self.playerDataMap?.forEach {
                try validate($0.key, name:"playerDataMap.key", parent: name, max: 1024)
                try validate($0.key, name:"playerDataMap.key", parent: name, min: 1)
                try validate($0.value, name:"playerDataMap[\"\($0.key)\"]", parent: name, max: 2048)
                try validate($0.value, name:"playerDataMap[\"\($0.key)\"]", parent: name, min: 1)
            }
            try self.playerIds.forEach {
                try validate($0, name: "playerIds[]", parent: name, max: 1024)
                try validate($0, name: "playerIds[]", parent: name, min: 1)
            }
            try validate(self.playerIds, name:"playerIds", parent: name, max: 25)
            try validate(self.playerIds, name:"playerIds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionId = "GameSessionId"
            case playerDataMap = "PlayerDataMap"
            case playerIds = "PlayerIds"
        }
    }

    public struct CreatePlayerSessionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlayerSessions", required: false, type: .list)
        ]

        /// Collection of player session objects created for the added players.
        public let playerSessions: [PlayerSession]?

        public init(playerSessions: [PlayerSession]? = nil) {
            self.playerSessions = playerSessions
        }

        private enum CodingKeys: String, CodingKey {
            case playerSessions = "PlayerSessions"
        }
    }

    public struct CreateScriptInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "StorageLocation", required: false, type: .structure), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "ZipFile", required: false, type: .blob)
        ]

        /// Descriptive label that is associated with a script. Script names do not need to be unique. You can use UpdateScript to change this value later. 
        public let name: String?
        /// Location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version. 
        public let storageLocation: S3Location?
        /// Version that is associated with a build or script. Version strings do not need to be unique. You can use UpdateScript to change this value later. 
        public let version: String?
        /// Data object containing your Realtime scripts and dependencies as a zip file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB. When using the AWS CLI tool to create a script, this parameter is set to the zip file name. It must be prepended with the string "fileb://" to indicate that the file data is a binary object. For example: --zip-file fileb://myRealtimeScript.zip.
        public let zipFile: Data?

        public init(name: String? = nil, storageLocation: S3Location? = nil, version: String? = nil, zipFile: Data? = nil) {
            self.name = name
            self.storageLocation = storageLocation
            self.version = version
            self.zipFile = zipFile
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 1024)
            try validate(self.name, name:"name", parent: name, min: 1)
            try self.storageLocation?.validate(name: "\(name).storageLocation")
            try validate(self.version, name:"version", parent: name, max: 1024)
            try validate(self.version, name:"version", parent: name, min: 1)
            try validate(self.zipFile, name:"zipFile", parent: name, max: 5000000)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case storageLocation = "StorageLocation"
            case version = "Version"
            case zipFile = "ZipFile"
        }
    }

    public struct CreateScriptOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Script", required: false, type: .structure)
        ]

        /// The newly created script record with a unique script ID. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the CreateScript request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.
        public let script: Script?

        public init(script: Script? = nil) {
            self.script = script
        }

        private enum CodingKeys: String, CodingKey {
            case script = "Script"
        }
    }

    public struct CreateVpcPeeringAuthorizationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameLiftAwsAccountId", required: true, type: .string), 
            AWSShapeMember(label: "PeerVpcId", required: true, type: .string)
        ]

        /// Unique identifier for the AWS account that you use to manage your Amazon GameLift fleet. You can find your Account ID in the AWS Management Console under account settings.
        public let gameLiftAwsAccountId: String
        /// Unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same region where your fleet is deployed. Look up a VPC ID using the VPC Dashboard in the AWS Management Console. Learn more about VPC peering in VPC Peering with Amazon GameLift Fleets.
        public let peerVpcId: String

        public init(gameLiftAwsAccountId: String, peerVpcId: String) {
            self.gameLiftAwsAccountId = gameLiftAwsAccountId
            self.peerVpcId = peerVpcId
        }

        public func validate(name: String) throws {
            try validate(self.gameLiftAwsAccountId, name:"gameLiftAwsAccountId", parent: name, max: 1024)
            try validate(self.gameLiftAwsAccountId, name:"gameLiftAwsAccountId", parent: name, min: 1)
            try validate(self.peerVpcId, name:"peerVpcId", parent: name, max: 1024)
            try validate(self.peerVpcId, name:"peerVpcId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameLiftAwsAccountId = "GameLiftAwsAccountId"
            case peerVpcId = "PeerVpcId"
        }
    }

    public struct CreateVpcPeeringAuthorizationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringAuthorization", required: false, type: .structure)
        ]

        /// Details on the requested VPC peering authorization, including expiration.
        public let vpcPeeringAuthorization: VpcPeeringAuthorization?

        public init(vpcPeeringAuthorization: VpcPeeringAuthorization? = nil) {
            self.vpcPeeringAuthorization = vpcPeeringAuthorization
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringAuthorization = "VpcPeeringAuthorization"
        }
    }

    public struct CreateVpcPeeringConnectionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "PeerVpcAwsAccountId", required: true, type: .string), 
            AWSShapeMember(label: "PeerVpcId", required: true, type: .string)
        ]

        /// Unique identifier for a fleet. This tells Amazon GameLift which GameLift VPC to peer with. 
        public let fleetId: String
        /// Unique identifier for the AWS account with the VPC that you want to peer your Amazon GameLift fleet with. You can find your Account ID in the AWS Management Console under account settings.
        public let peerVpcAwsAccountId: String
        /// Unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same region where your fleet is deployed. Look up a VPC ID using the VPC Dashboard in the AWS Management Console. Learn more about VPC peering in VPC Peering with Amazon GameLift Fleets.
        public let peerVpcId: String

        public init(fleetId: String, peerVpcAwsAccountId: String, peerVpcId: String) {
            self.fleetId = fleetId
            self.peerVpcAwsAccountId = peerVpcAwsAccountId
            self.peerVpcId = peerVpcId
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try validate(self.peerVpcAwsAccountId, name:"peerVpcAwsAccountId", parent: name, max: 1024)
            try validate(self.peerVpcAwsAccountId, name:"peerVpcAwsAccountId", parent: name, min: 1)
            try validate(self.peerVpcId, name:"peerVpcId", parent: name, max: 1024)
            try validate(self.peerVpcId, name:"peerVpcId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
            case peerVpcId = "PeerVpcId"
        }
    }

    public struct CreateVpcPeeringConnectionOutput: AWSShape {


        public init() {
        }

    }

    public struct DeleteAliasInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasId", required: true, type: .string)
        ]

        /// Unique identifier for a fleet alias. Specify the alias you want to delete.
        public let aliasId: String

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

        public func validate(name: String) throws {
            try validate(self.aliasId, name:"aliasId", parent: name, pattern: "^alias-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
        }
    }

    public struct DeleteBuildInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BuildId", required: true, type: .string)
        ]

        /// Unique identifier for a build to delete.
        public let buildId: String

        public init(buildId: String) {
            self.buildId = buildId
        }

        public func validate(name: String) throws {
            try validate(self.buildId, name:"buildId", parent: name, pattern: "^build-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
        }
    }

    public struct DeleteFleetInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string)
        ]

        /// Unique identifier for a fleet to be deleted.
        public let fleetId: String

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct DeleteGameSessionQueueInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]

        /// Descriptive label that is associated with game session queue. Queue names must be unique within each region.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 128)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DeleteGameSessionQueueOutput: AWSShape {


        public init() {
        }

    }

    public struct DeleteMatchmakingConfigurationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]

        /// Unique identifier for a matchmaking configuration
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 128)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DeleteMatchmakingConfigurationOutput: AWSShape {


        public init() {
        }

    }

    public struct DeleteMatchmakingRuleSetInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]

        /// Unique identifier for a matchmaking rule set to be deleted. (Note: The rule set name is different from the optional "name" field in the rule set body.) 
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 128)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DeleteMatchmakingRuleSetOutput: AWSShape {


        public init() {
        }

    }

    public struct DeleteScalingPolicyInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]

        /// Unique identifier for a fleet to be deleted.
        public let fleetId: String
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
        public let name: String

        public init(fleetId: String, name: String) {
            self.fleetId = fleetId
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try validate(self.name, name:"name", parent: name, max: 1024)
            try validate(self.name, name:"name", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case name = "Name"
        }
    }

    public struct DeleteScriptInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScriptId", required: true, type: .string)
        ]

        /// Unique identifier for a Realtime script to delete.
        public let scriptId: String

        public init(scriptId: String) {
            self.scriptId = scriptId
        }

        public func validate(name: String) throws {
            try validate(self.scriptId, name:"scriptId", parent: name, pattern: "^script-\\S+|^arn:.*script-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case scriptId = "ScriptId"
        }
    }

    public struct DeleteVpcPeeringAuthorizationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameLiftAwsAccountId", required: true, type: .string), 
            AWSShapeMember(label: "PeerVpcId", required: true, type: .string)
        ]

        /// Unique identifier for the AWS account that you use to manage your Amazon GameLift fleet. You can find your Account ID in the AWS Management Console under account settings.
        public let gameLiftAwsAccountId: String
        /// Unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same region where your fleet is deployed. Look up a VPC ID using the VPC Dashboard in the AWS Management Console. Learn more about VPC peering in VPC Peering with Amazon GameLift Fleets.
        public let peerVpcId: String

        public init(gameLiftAwsAccountId: String, peerVpcId: String) {
            self.gameLiftAwsAccountId = gameLiftAwsAccountId
            self.peerVpcId = peerVpcId
        }

        public func validate(name: String) throws {
            try validate(self.gameLiftAwsAccountId, name:"gameLiftAwsAccountId", parent: name, max: 1024)
            try validate(self.gameLiftAwsAccountId, name:"gameLiftAwsAccountId", parent: name, min: 1)
            try validate(self.peerVpcId, name:"peerVpcId", parent: name, max: 1024)
            try validate(self.peerVpcId, name:"peerVpcId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameLiftAwsAccountId = "GameLiftAwsAccountId"
            case peerVpcId = "PeerVpcId"
        }
    }

    public struct DeleteVpcPeeringAuthorizationOutput: AWSShape {


        public init() {
        }

    }

    public struct DeleteVpcPeeringConnectionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", required: true, type: .string)
        ]

        /// Unique identifier for a fleet. This value must match the fleet ID referenced in the VPC peering connection record.
        public let fleetId: String
        /// Unique identifier for a VPC peering connection. This value is included in the VpcPeeringConnection object, which can be retrieved by calling DescribeVpcPeeringConnections.
        public let vpcPeeringConnectionId: String

        public init(fleetId: String, vpcPeeringConnectionId: String) {
            self.fleetId = fleetId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try validate(self.vpcPeeringConnectionId, name:"vpcPeeringConnectionId", parent: name, max: 1024)
            try validate(self.vpcPeeringConnectionId, name:"vpcPeeringConnectionId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case vpcPeeringConnectionId = "VpcPeeringConnectionId"
        }
    }

    public struct DeleteVpcPeeringConnectionOutput: AWSShape {


        public init() {
        }

    }

    public struct DescribeAliasInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasId", required: true, type: .string)
        ]

        /// Unique identifier for a fleet alias. Specify the alias you want to retrieve.
        public let aliasId: String

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

        public func validate(name: String) throws {
            try validate(self.aliasId, name:"aliasId", parent: name, pattern: "^alias-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
        }
    }

    public struct DescribeAliasOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alias", required: false, type: .structure)
        ]

        /// Object that contains the requested alias.
        public let alias: Alias?

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

        private enum CodingKeys: String, CodingKey {
            case alias = "Alias"
        }
    }

    public struct DescribeBuildInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BuildId", required: true, type: .string)
        ]

        /// Unique identifier for a build to retrieve properties for.
        public let buildId: String

        public init(buildId: String) {
            self.buildId = buildId
        }

        public func validate(name: String) throws {
            try validate(self.buildId, name:"buildId", parent: name, pattern: "^build-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
        }
    }

    public struct DescribeBuildOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Build", required: false, type: .structure)
        ]

        /// Set of properties describing the requested build.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case build = "Build"
        }
    }

    public struct DescribeEC2InstanceLimitsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2InstanceType", required: false, type: .enum)
        ]

        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions. Leave this parameter blank to retrieve limits for all types.
        public let eC2InstanceType: EC2InstanceType?

        public init(eC2InstanceType: EC2InstanceType? = nil) {
            self.eC2InstanceType = eC2InstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case eC2InstanceType = "EC2InstanceType"
        }
    }

    public struct DescribeEC2InstanceLimitsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2InstanceLimits", required: false, type: .list)
        ]

        /// Object that contains the maximum number of instances for the specified instance type.
        public let eC2InstanceLimits: [EC2InstanceLimit]?

        public init(eC2InstanceLimits: [EC2InstanceLimit]? = nil) {
            self.eC2InstanceLimits = eC2InstanceLimits
        }

        private enum CodingKeys: String, CodingKey {
            case eC2InstanceLimits = "EC2InstanceLimits"
        }
    }

    public struct DescribeFleetAttributesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetIds", required: false, type: .list), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Unique identifier for a fleet(s) to retrieve attributes for. To request attributes for all fleets, leave this parameter empty.
        public let fleetIds: [String]?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let limit: Int?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let nextToken: String?

        public init(fleetIds: [String]? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.fleetIds = fleetIds
            self.limit = limit
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.fleetIds?.forEach {
                try validate($0, name: "fleetIds[]", parent: name, pattern: "^fleet-\\S+")
            }
            try validate(self.fleetIds, name:"fleetIds", parent: name, min: 1)
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetIds = "FleetIds"
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetAttributesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetAttributes", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Collection of objects containing attribute metadata for each requested fleet ID.
        public let fleetAttributes: [FleetAttributes]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(fleetAttributes: [FleetAttributes]? = nil, nextToken: String? = nil) {
            self.fleetAttributes = fleetAttributes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleetAttributes = "FleetAttributes"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetCapacityInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetIds", required: false, type: .list), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Unique identifier for a fleet(s) to retrieve capacity information for. To request capacity information for all fleets, leave this parameter empty.
        public let fleetIds: [String]?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let limit: Int?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let nextToken: String?

        public init(fleetIds: [String]? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.fleetIds = fleetIds
            self.limit = limit
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.fleetIds?.forEach {
                try validate($0, name: "fleetIds[]", parent: name, pattern: "^fleet-\\S+")
            }
            try validate(self.fleetIds, name:"fleetIds", parent: name, min: 1)
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetIds = "FleetIds"
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetCapacityOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetCapacity", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Collection of objects containing capacity information for each requested fleet ID. Leave this parameter empty to retrieve capacity information for all fleets.
        public let fleetCapacity: [FleetCapacity]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(fleetCapacity: [FleetCapacity]? = nil, nextToken: String? = nil) {
            self.fleetCapacity = fleetCapacity
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleetCapacity = "FleetCapacity"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetEventsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp)
        ]

        /// Most recent date to retrieve event logs for. If no end time is specified, this call returns entries from the specified start time up to the present. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
        public let endTime: TimeStamp?
        /// Unique identifier for a fleet to get event logs for.
        public let fleetId: String
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Earliest date to retrieve event logs for. If no start time is specified, this call returns entries starting from when the fleet was created to the specified end time. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
        public let startTime: TimeStamp?

        public init(endTime: TimeStamp? = nil, fleetId: String, limit: Int? = nil, nextToken: String? = nil, startTime: TimeStamp? = nil) {
            self.endTime = endTime
            self.fleetId = fleetId
            self.limit = limit
            self.nextToken = nextToken
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case fleetId = "FleetId"
            case limit = "Limit"
            case nextToken = "NextToken"
            case startTime = "StartTime"
        }
    }

    public struct DescribeFleetEventsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Collection of objects containing event log entries for the specified fleet.
        public let events: [Event]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(events: [Event]? = nil, nextToken: String? = nil) {
            self.events = events
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetPortSettingsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string)
        ]

        /// Unique identifier for a fleet to retrieve port settings for.
        public let fleetId: String

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct DescribeFleetPortSettingsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InboundPermissions", required: false, type: .list)
        ]

        /// Object that contains port settings for the requested fleet ID.
        public let inboundPermissions: [IpPermission]?

        public init(inboundPermissions: [IpPermission]? = nil) {
            self.inboundPermissions = inboundPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case inboundPermissions = "InboundPermissions"
        }
    }

    public struct DescribeFleetUtilizationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetIds", required: false, type: .list), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Unique identifier for a fleet(s) to retrieve utilization data for. To request utilization data for all fleets, leave this parameter empty.
        public let fleetIds: [String]?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let limit: Int?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let nextToken: String?

        public init(fleetIds: [String]? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.fleetIds = fleetIds
            self.limit = limit
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.fleetIds?.forEach {
                try validate($0, name: "fleetIds[]", parent: name, pattern: "^fleet-\\S+")
            }
            try validate(self.fleetIds, name:"fleetIds", parent: name, min: 1)
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetIds = "FleetIds"
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetUtilizationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetUtilization", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Collection of objects containing utilization information for each requested fleet ID.
        public let fleetUtilization: [FleetUtilization]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(fleetUtilization: [FleetUtilization]? = nil, nextToken: String? = nil) {
            self.fleetUtilization = fleetUtilization
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleetUtilization = "FleetUtilization"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeGameSessionDetailsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasId", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "StatusFilter", required: false, type: .string)
        ]

        /// Unique identifier for an alias associated with the fleet to retrieve all game sessions for.
        public let aliasId: String?
        /// Unique identifier for a fleet to retrieve all game sessions active on the fleet.
        public let fleetId: String?
        /// Unique identifier for the game session to retrieve.
        public let gameSessionId: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Game session status to filter results on. Possible game session statuses include ACTIVE, TERMINATED, ACTIVATING and TERMINATING (the last two are transitory). 
        public let statusFilter: String?

        public init(aliasId: String? = nil, fleetId: String? = nil, gameSessionId: String? = nil, limit: Int? = nil, nextToken: String? = nil, statusFilter: String? = nil) {
            self.aliasId = aliasId
            self.fleetId = fleetId
            self.gameSessionId = gameSessionId
            self.limit = limit
            self.nextToken = nextToken
            self.statusFilter = statusFilter
        }

        public func validate(name: String) throws {
            try validate(self.aliasId, name:"aliasId", parent: name, pattern: "^alias-\\S+")
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, max: 256)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, min: 1)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
            try validate(self.statusFilter, name:"statusFilter", parent: name, max: 1024)
            try validate(self.statusFilter, name:"statusFilter", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
            case fleetId = "FleetId"
            case gameSessionId = "GameSessionId"
            case limit = "Limit"
            case nextToken = "NextToken"
            case statusFilter = "StatusFilter"
        }
    }

    public struct DescribeGameSessionDetailsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Collection of objects containing game session properties and the protection policy currently in force for each session matching the request.
        public let gameSessionDetails: [GameSessionDetail]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessionDetails: [GameSessionDetail]? = nil, nextToken: String? = nil) {
            self.gameSessionDetails = gameSessionDetails
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionDetails = "GameSessionDetails"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeGameSessionPlacementInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlacementId", required: true, type: .string)
        ]

        /// Unique identifier for a game session placement to retrieve.
        public let placementId: String

        public init(placementId: String) {
            self.placementId = placementId
        }

        public func validate(name: String) throws {
            try validate(self.placementId, name:"placementId", parent: name, max: 48)
            try validate(self.placementId, name:"placementId", parent: name, min: 1)
            try validate(self.placementId, name:"placementId", parent: name, pattern: "[a-zA-Z0-9-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case placementId = "PlacementId"
        }
    }

    public struct DescribeGameSessionPlacementOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionPlacement", required: false, type: .structure)
        ]

        /// Object that describes the requested game session placement.
        public let gameSessionPlacement: GameSessionPlacement?

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionPlacement = "GameSessionPlacement"
        }
    }

    public struct DescribeGameSessionQueuesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Names", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// List of queue names to retrieve information for. To request settings for all queues, leave this parameter empty.
        public let names: [String]?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?

        public init(limit: Int? = nil, names: [String]? = nil, nextToken: String? = nil) {
            self.limit = limit
            self.names = names
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try self.names?.forEach {
                try validate($0, name: "names[]", parent: name, max: 128)
                try validate($0, name: "names[]", parent: name, min: 1)
                try validate($0, name: "names[]", parent: name, pattern: "[a-zA-Z0-9-]+")
            }
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case names = "Names"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeGameSessionQueuesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionQueues", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Collection of objects that describes the requested game session queues.
        public let gameSessionQueues: [GameSessionQueue]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessionQueues: [GameSessionQueue]? = nil, nextToken: String? = nil) {
            self.gameSessionQueues = gameSessionQueues
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionQueues = "GameSessionQueues"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeGameSessionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasId", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "StatusFilter", required: false, type: .string)
        ]

        /// Unique identifier for an alias associated with the fleet to retrieve all game sessions for. 
        public let aliasId: String?
        /// Unique identifier for a fleet to retrieve all game sessions for.
        public let fleetId: String?
        /// Unique identifier for the game session to retrieve. You can use either a GameSessionId or GameSessionArn value. 
        public let gameSessionId: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Game session status to filter results on. Possible game session statuses include ACTIVE, TERMINATED, ACTIVATING, and TERMINATING (the last two are transitory). 
        public let statusFilter: String?

        public init(aliasId: String? = nil, fleetId: String? = nil, gameSessionId: String? = nil, limit: Int? = nil, nextToken: String? = nil, statusFilter: String? = nil) {
            self.aliasId = aliasId
            self.fleetId = fleetId
            self.gameSessionId = gameSessionId
            self.limit = limit
            self.nextToken = nextToken
            self.statusFilter = statusFilter
        }

        public func validate(name: String) throws {
            try validate(self.aliasId, name:"aliasId", parent: name, pattern: "^alias-\\S+")
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, max: 256)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, min: 1)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
            try validate(self.statusFilter, name:"statusFilter", parent: name, max: 1024)
            try validate(self.statusFilter, name:"statusFilter", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
            case fleetId = "FleetId"
            case gameSessionId = "GameSessionId"
            case limit = "Limit"
            case nextToken = "NextToken"
            case statusFilter = "StatusFilter"
        }
    }

    public struct DescribeGameSessionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Collection of objects containing game session properties for each session matching the request.
        public let gameSessions: [GameSession]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessions: [GameSession]? = nil, nextToken: String? = nil) {
            self.gameSessions = gameSessions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessions = "GameSessions"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Unique identifier for a fleet to retrieve instance information for.
        public let fleetId: String
        /// Unique identifier for an instance to retrieve. Specify an instance ID or leave blank to retrieve all instances in the fleet.
        public let instanceId: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?

        public init(fleetId: String, instanceId: String? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.fleetId = fleetId
            self.instanceId = instanceId
            self.limit = limit
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try validate(self.instanceId, name:"instanceId", parent: name, pattern: "[a-zA-Z0-9\\.-]+")
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case instanceId = "InstanceId"
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstancesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Instances", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Collection of objects containing properties for each instance returned.
        public let instances: [Instance]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(instances: [Instance]? = nil, nextToken: String? = nil) {
            self.instances = instances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "Instances"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeMatchmakingConfigurationsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Names", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "RuleSetName", required: false, type: .string)
        ]

        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is limited to 10.
        public let limit: Int?
        /// Unique identifier for a matchmaking configuration(s) to retrieve. To request all existing configurations, leave this parameter empty.
        public let names: [String]?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Unique identifier for a matchmaking rule set. Use this parameter to retrieve all matchmaking configurations that use this rule set.
        public let ruleSetName: String?

        public init(limit: Int? = nil, names: [String]? = nil, nextToken: String? = nil, ruleSetName: String? = nil) {
            self.limit = limit
            self.names = names
            self.nextToken = nextToken
            self.ruleSetName = ruleSetName
        }

        public func validate(name: String) throws {
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try self.names?.forEach {
                try validate($0, name: "names[]", parent: name, max: 128)
                try validate($0, name: "names[]", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
            }
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
            try validate(self.ruleSetName, name:"ruleSetName", parent: name, max: 128)
            try validate(self.ruleSetName, name:"ruleSetName", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case names = "Names"
            case nextToken = "NextToken"
            case ruleSetName = "RuleSetName"
        }
    }

    public struct DescribeMatchmakingConfigurationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configurations", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Collection of requested matchmaking configuration objects.
        public let configurations: [MatchmakingConfiguration]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(configurations: [MatchmakingConfiguration]? = nil, nextToken: String? = nil) {
            self.configurations = configurations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case configurations = "Configurations"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeMatchmakingInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TicketIds", required: true, type: .list)
        ]

        /// Unique identifier for a matchmaking ticket. You can include up to 10 ID values. 
        public let ticketIds: [String]

        public init(ticketIds: [String]) {
            self.ticketIds = ticketIds
        }

        public func validate(name: String) throws {
            try self.ticketIds.forEach {
                try validate($0, name: "ticketIds[]", parent: name, max: 128)
                try validate($0, name: "ticketIds[]", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case ticketIds = "TicketIds"
        }
    }

    public struct DescribeMatchmakingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TicketList", required: false, type: .list)
        ]

        /// Collection of existing matchmaking ticket objects matching the request.
        public let ticketList: [MatchmakingTicket]?

        public init(ticketList: [MatchmakingTicket]? = nil) {
            self.ticketList = ticketList
        }

        private enum CodingKeys: String, CodingKey {
            case ticketList = "TicketList"
        }
    }

    public struct DescribeMatchmakingRuleSetsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Names", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// List of one or more matchmaking rule set names to retrieve details for. (Note: The rule set name is different from the optional "name" field in the rule set body.) 
        public let names: [String]?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?

        public init(limit: Int? = nil, names: [String]? = nil, nextToken: String? = nil) {
            self.limit = limit
            self.names = names
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.limit, name:"limit", parent: name, max: 10)
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try self.names?.forEach {
                try validate($0, name: "names[]", parent: name, max: 128)
                try validate($0, name: "names[]", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
            }
            try validate(self.names, name:"names", parent: name, max: 10)
            try validate(self.names, name:"names", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case names = "Names"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeMatchmakingRuleSetsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "RuleSets", required: true, type: .list)
        ]

        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of requested matchmaking rule set objects. 
        public let ruleSets: [MatchmakingRuleSet]

        public init(nextToken: String? = nil, ruleSets: [MatchmakingRuleSet]) {
            self.nextToken = nextToken
            self.ruleSets = ruleSets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case ruleSets = "RuleSets"
        }
    }

    public struct DescribePlayerSessionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PlayerId", required: false, type: .string), 
            AWSShapeMember(label: "PlayerSessionId", required: false, type: .string), 
            AWSShapeMember(label: "PlayerSessionStatusFilter", required: false, type: .string)
        ]

        /// Unique identifier for the game session to retrieve player sessions for.
        public let gameSessionId: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. If a player session ID is specified, this parameter is ignored.
        public let limit: Int?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value. If a player session ID is specified, this parameter is ignored.
        public let nextToken: String?
        /// Unique identifier for a player to retrieve player sessions for.
        public let playerId: String?
        /// Unique identifier for a player session to retrieve.
        public let playerSessionId: String?
        /// Player session status to filter results on. Possible player session statuses include the following:    RESERVED -- The player session request has been received, but the player has not yet connected to the server process and/or been validated.     ACTIVE -- The player has been validated by the server process and is currently connected.    COMPLETED -- The player connection has been dropped.    TIMEDOUT -- A player session request was received, but the player did not connect and/or was not validated within the timeout limit (60 seconds).  
        public let playerSessionStatusFilter: String?

        public init(gameSessionId: String? = nil, limit: Int? = nil, nextToken: String? = nil, playerId: String? = nil, playerSessionId: String? = nil, playerSessionStatusFilter: String? = nil) {
            self.gameSessionId = gameSessionId
            self.limit = limit
            self.nextToken = nextToken
            self.playerId = playerId
            self.playerSessionId = playerSessionId
            self.playerSessionStatusFilter = playerSessionStatusFilter
        }

        public func validate(name: String) throws {
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, max: 256)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, min: 1)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
            try validate(self.playerId, name:"playerId", parent: name, max: 1024)
            try validate(self.playerId, name:"playerId", parent: name, min: 1)
            try validate(self.playerSessionId, name:"playerSessionId", parent: name, pattern: "^psess-\\S+")
            try validate(self.playerSessionStatusFilter, name:"playerSessionStatusFilter", parent: name, max: 1024)
            try validate(self.playerSessionStatusFilter, name:"playerSessionStatusFilter", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionId = "GameSessionId"
            case limit = "Limit"
            case nextToken = "NextToken"
            case playerId = "PlayerId"
            case playerSessionId = "PlayerSessionId"
            case playerSessionStatusFilter = "PlayerSessionStatusFilter"
        }
    }

    public struct DescribePlayerSessionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PlayerSessions", required: false, type: .list)
        ]

        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing properties for each player session that matches the request.
        public let playerSessions: [PlayerSession]?

        public init(nextToken: String? = nil, playerSessions: [PlayerSession]? = nil) {
            self.nextToken = nextToken
            self.playerSessions = playerSessions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case playerSessions = "PlayerSessions"
        }
    }

    public struct DescribeRuntimeConfigurationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string)
        ]

        /// Unique identifier for a fleet to get the run-time configuration for.
        public let fleetId: String

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct DescribeRuntimeConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuntimeConfiguration", required: false, type: .structure)
        ]

        /// Instructions describing how server processes should be launched and maintained on each instance in the fleet.
        public let runtimeConfiguration: RuntimeConfiguration?

        public init(runtimeConfiguration: RuntimeConfiguration? = nil) {
            self.runtimeConfiguration = runtimeConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case runtimeConfiguration = "RuntimeConfiguration"
        }
    }

    public struct DescribeScalingPoliciesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "StatusFilter", required: false, type: .enum)
        ]

        /// Unique identifier for a fleet to retrieve scaling policies for.
        public let fleetId: String
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Scaling policy status to filter results on. A scaling policy is only in force when in an ACTIVE status.    ACTIVE -- The scaling policy is currently in force.    UPDATEREQUESTED -- A request to update the scaling policy has been received.    UPDATING -- A change is being made to the scaling policy.    DELETEREQUESTED -- A request to delete the scaling policy has been received.    DELETING -- The scaling policy is being deleted.    DELETED -- The scaling policy has been deleted.    ERROR -- An error occurred in creating the policy. It should be removed and recreated.  
        public let statusFilter: ScalingStatusType?

        public init(fleetId: String, limit: Int? = nil, nextToken: String? = nil, statusFilter: ScalingStatusType? = nil) {
            self.fleetId = fleetId
            self.limit = limit
            self.nextToken = nextToken
            self.statusFilter = statusFilter
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case limit = "Limit"
            case nextToken = "NextToken"
            case statusFilter = "StatusFilter"
        }
    }

    public struct DescribeScalingPoliciesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScalingPolicies", required: false, type: .list)
        ]

        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing the scaling policies matching the request.
        public let scalingPolicies: [ScalingPolicy]?

        public init(nextToken: String? = nil, scalingPolicies: [ScalingPolicy]? = nil) {
            self.nextToken = nextToken
            self.scalingPolicies = scalingPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPolicies = "ScalingPolicies"
        }
    }

    public struct DescribeScriptInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScriptId", required: true, type: .string)
        ]

        /// Unique identifier for a Realtime script to retrieve properties for.
        public let scriptId: String

        public init(scriptId: String) {
            self.scriptId = scriptId
        }

        public func validate(name: String) throws {
            try validate(self.scriptId, name:"scriptId", parent: name, pattern: "^script-\\S+|^arn:.*script-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case scriptId = "ScriptId"
        }
    }

    public struct DescribeScriptOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Script", required: false, type: .structure)
        ]

        /// Set of properties describing the requested script.
        public let script: Script?

        public init(script: Script? = nil) {
            self.script = script
        }

        private enum CodingKeys: String, CodingKey {
            case script = "Script"
        }
    }

    public struct DescribeVpcPeeringAuthorizationsInput: AWSShape {


        public init() {
        }

    }

    public struct DescribeVpcPeeringAuthorizationsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringAuthorizations", required: false, type: .list)
        ]

        /// Collection of objects that describe all valid VPC peering operations for the current AWS account.
        public let vpcPeeringAuthorizations: [VpcPeeringAuthorization]?

        public init(vpcPeeringAuthorizations: [VpcPeeringAuthorization]? = nil) {
            self.vpcPeeringAuthorizations = vpcPeeringAuthorizations
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringAuthorizations = "VpcPeeringAuthorizations"
        }
    }

    public struct DescribeVpcPeeringConnectionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: false, type: .string)
        ]

        /// Unique identifier for a fleet.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct DescribeVpcPeeringConnectionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnections", required: false, type: .list)
        ]

        /// Collection of VPC peering connection records that match the request.
        public let vpcPeeringConnections: [VpcPeeringConnection]?

        public init(vpcPeeringConnections: [VpcPeeringConnection]? = nil) {
            self.vpcPeeringConnections = vpcPeeringConnections
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnections = "VpcPeeringConnections"
        }
    }

    public struct DesiredPlayerSession: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlayerData", required: false, type: .string), 
            AWSShapeMember(label: "PlayerId", required: false, type: .string)
        ]

        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
        public let playerData: String?
        /// Unique identifier for a player to associate with the player session.
        public let playerId: String?

        public init(playerData: String? = nil, playerId: String? = nil) {
            self.playerData = playerData
            self.playerId = playerId
        }

        public func validate(name: String) throws {
            try validate(self.playerData, name:"playerData", parent: name, max: 2048)
            try validate(self.playerData, name:"playerData", parent: name, min: 1)
            try validate(self.playerId, name:"playerId", parent: name, max: 1024)
            try validate(self.playerId, name:"playerId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case playerData = "PlayerData"
            case playerId = "PlayerId"
        }
    }

    public struct EC2InstanceCounts: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ACTIVE", required: false, type: .integer), 
            AWSShapeMember(label: "DESIRED", required: false, type: .integer), 
            AWSShapeMember(label: "IDLE", required: false, type: .integer), 
            AWSShapeMember(label: "MAXIMUM", required: false, type: .integer), 
            AWSShapeMember(label: "MINIMUM", required: false, type: .integer), 
            AWSShapeMember(label: "PENDING", required: false, type: .integer), 
            AWSShapeMember(label: "TERMINATING", required: false, type: .integer)
        ]

        /// Actual number of active instances in the fleet.
        public let active: Int?
        /// Ideal number of active instances in the fleet.
        public let desired: Int?
        /// Number of active instances in the fleet that are not currently hosting a game session.
        public let idle: Int?
        /// Maximum value allowed for the fleet's instance count.
        public let maximum: Int?
        /// Minimum value allowed for the fleet's instance count.
        public let minimum: Int?
        /// Number of instances in the fleet that are starting but not yet active.
        public let pending: Int?
        /// Number of instances in the fleet that are no longer active but haven't yet been terminated.
        public let terminating: Int?

        public init(active: Int? = nil, desired: Int? = nil, idle: Int? = nil, maximum: Int? = nil, minimum: Int? = nil, pending: Int? = nil, terminating: Int? = nil) {
            self.active = active
            self.desired = desired
            self.idle = idle
            self.maximum = maximum
            self.minimum = minimum
            self.pending = pending
            self.terminating = terminating
        }

        private enum CodingKeys: String, CodingKey {
            case active = "ACTIVE"
            case desired = "DESIRED"
            case idle = "IDLE"
            case maximum = "MAXIMUM"
            case minimum = "MINIMUM"
            case pending = "PENDING"
            case terminating = "TERMINATING"
        }
    }

    public struct EC2InstanceLimit: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentInstances", required: false, type: .integer), 
            AWSShapeMember(label: "EC2InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceLimit", required: false, type: .integer)
        ]

        /// Number of instances of the specified type that are currently in use by this AWS account.
        public let currentInstances: Int?
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        public let eC2InstanceType: EC2InstanceType?
        /// Number of instances allowed.
        public let instanceLimit: Int?

        public init(currentInstances: Int? = nil, eC2InstanceType: EC2InstanceType? = nil, instanceLimit: Int? = nil) {
            self.currentInstances = currentInstances
            self.eC2InstanceType = eC2InstanceType
            self.instanceLimit = instanceLimit
        }

        private enum CodingKeys: String, CodingKey {
            case currentInstances = "CurrentInstances"
            case eC2InstanceType = "EC2InstanceType"
            case instanceLimit = "InstanceLimit"
        }
    }

    public enum EC2InstanceType: String, CustomStringConvertible, Codable {
        case t2Micro = "t2.micro"
        case t2Small = "t2.small"
        case t2Medium = "t2.medium"
        case t2Large = "t2.large"
        case c3Large = "c3.large"
        case c3Xlarge = "c3.xlarge"
        case c32Xlarge = "c3.2xlarge"
        case c34Xlarge = "c3.4xlarge"
        case c38Xlarge = "c3.8xlarge"
        case c4Large = "c4.large"
        case c4Xlarge = "c4.xlarge"
        case c42Xlarge = "c4.2xlarge"
        case c44Xlarge = "c4.4xlarge"
        case c48Xlarge = "c4.8xlarge"
        case r3Large = "r3.large"
        case r3Xlarge = "r3.xlarge"
        case r32Xlarge = "r3.2xlarge"
        case r34Xlarge = "r3.4xlarge"
        case r38Xlarge = "r3.8xlarge"
        case r4Large = "r4.large"
        case r4Xlarge = "r4.xlarge"
        case r42Xlarge = "r4.2xlarge"
        case r44Xlarge = "r4.4xlarge"
        case r48Xlarge = "r4.8xlarge"
        case r416Xlarge = "r4.16xlarge"
        case m3Medium = "m3.medium"
        case m3Large = "m3.large"
        case m3Xlarge = "m3.xlarge"
        case m32Xlarge = "m3.2xlarge"
        case m4Large = "m4.large"
        case m4Xlarge = "m4.xlarge"
        case m42Xlarge = "m4.2xlarge"
        case m44Xlarge = "m4.4xlarge"
        case m410Xlarge = "m4.10xlarge"
        public var description: String { return self.rawValue }
    }

    public struct Event: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCode", required: false, type: .enum), 
            AWSShapeMember(label: "EventId", required: false, type: .string), 
            AWSShapeMember(label: "EventTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "PreSignedLogUrl", required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string)
        ]

        /// Type of event being logged. The following events are currently in use:  Fleet creation events:    FLEET_CREATED -- A fleet record was successfully created with a status of NEW. Event messaging includes the fleet ID.   FLEET_STATE_DOWNLOADING -- Fleet status changed from NEW to DOWNLOADING. The compressed build has started downloading to a fleet instance for installation.    FLEET_BINARY_DOWNLOAD_FAILED -- The build failed to download to the fleet instance.   FLEET_CREATION_EXTRACTING_BUILD – The game server build was successfully downloaded to an instance, and the build files are now being extracted from the uploaded build and saved to an instance. Failure at this stage prevents a fleet from moving to ACTIVE status. Logs for this stage display a list of the files that are extracted and saved on the instance. Access the logs by using the URL in PreSignedLogUrl.   FLEET_CREATION_RUNNING_INSTALLER – The game server build files were successfully extracted, and the Amazon GameLift is now running the build's install script (if one is included). Failure in this stage prevents a fleet from moving to ACTIVE status. Logs for this stage list the installation steps and whether or not the install completed successfully. Access the logs by using the URL in PreSignedLogUrl.    FLEET_CREATION_VALIDATING_RUNTIME_CONFIG -- The build process was successful, and the Amazon GameLift is now verifying that the game server launch paths, which are specified in the fleet's run-time configuration, exist. If any listed launch path exists, Amazon GameLift tries to launch a game server process and waits for the process to report ready. Failures in this stage prevent a fleet from moving to ACTIVE status. Logs for this stage list the launch paths in the run-time configuration and indicate whether each is found. Access the logs by using the URL in PreSignedLogUrl.    FLEET_STATE_VALIDATING -- Fleet status changed from DOWNLOADING to VALIDATING.    FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND -- Validation of the run-time configuration failed because the executable specified in a launch path does not exist on the instance.   FLEET_STATE_BUILDING -- Fleet status changed from VALIDATING to BUILDING.   FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE -- Validation of the run-time configuration failed because the executable specified in a launch path failed to run on the fleet instance.   FLEET_STATE_ACTIVATING -- Fleet status changed from BUILDING to ACTIVATING.     FLEET_ACTIVATION_FAILED - The fleet failed to successfully complete one of the steps in the fleet activation process. This event code indicates that the game build was successfully downloaded to a fleet instance, built, and validated, but was not able to start a server process. A possible reason for failure is that the game server is not reporting "process ready" to the Amazon GameLift service.   FLEET_STATE_ACTIVE -- The fleet's status changed from ACTIVATING to ACTIVE. The fleet is now ready to host game sessions.    VPC peering events:    FLEET_VPC_PEERING_SUCCEEDED -- A VPC peering connection has been established between the VPC for an Amazon GameLift fleet and a VPC in your AWS account.   FLEET_VPC_PEERING_FAILED -- A requested VPC peering connection has failed. Event details and status information (see DescribeVpcPeeringConnections) provide additional detail. A common reason for peering failure is that the two VPCs have overlapping CIDR blocks of IPv4 addresses. To resolve this, change the CIDR block for the VPC in your AWS account. For more information on VPC peering failures, see https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/invalid-peering-configurations.html    FLEET_VPC_PEERING_DELETED -- A VPC peering connection has been successfully deleted.    Spot instance events:     INSTANCE_INTERRUPTED -- A spot instance was interrupted by EC2 with a two-minute notification.    Other fleet events:    FLEET_SCALING_EVENT -- A change was made to the fleet's capacity settings (desired instances, minimum/maximum scaling limits). Event messaging includes the new capacity settings.   FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED -- A change was made to the fleet's game session protection policy setting. Event messaging includes both the old and new policy setting.    FLEET_DELETED -- A request to delete a fleet was initiated.    GENERIC_EVENT -- An unspecified event has occurred.  
        public let eventCode: EventCode?
        /// Unique identifier for a fleet event.
        public let eventId: String?
        /// Time stamp indicating when this event occurred. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let eventTime: TimeStamp?
        /// Additional information related to the event.
        public let message: String?
        /// Location of stored logs with additional detail that is related to the event. This is useful for debugging issues. The URL is valid for 15 minutes. You can also access fleet creation logs through the Amazon GameLift console.
        public let preSignedLogUrl: String?
        /// Unique identifier for an event resource, such as a fleet ID.
        public let resourceId: String?

        public init(eventCode: EventCode? = nil, eventId: String? = nil, eventTime: TimeStamp? = nil, message: String? = nil, preSignedLogUrl: String? = nil, resourceId: String? = nil) {
            self.eventCode = eventCode
            self.eventId = eventId
            self.eventTime = eventTime
            self.message = message
            self.preSignedLogUrl = preSignedLogUrl
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case eventCode = "EventCode"
            case eventId = "EventId"
            case eventTime = "EventTime"
            case message = "Message"
            case preSignedLogUrl = "PreSignedLogUrl"
            case resourceId = "ResourceId"
        }
    }

    public enum EventCode: String, CustomStringConvertible, Codable {
        case genericEvent = "GENERIC_EVENT"
        case fleetCreated = "FLEET_CREATED"
        case fleetDeleted = "FLEET_DELETED"
        case fleetScalingEvent = "FLEET_SCALING_EVENT"
        case fleetStateDownloading = "FLEET_STATE_DOWNLOADING"
        case fleetStateValidating = "FLEET_STATE_VALIDATING"
        case fleetStateBuilding = "FLEET_STATE_BUILDING"
        case fleetStateActivating = "FLEET_STATE_ACTIVATING"
        case fleetStateActive = "FLEET_STATE_ACTIVE"
        case fleetStateError = "FLEET_STATE_ERROR"
        case fleetInitializationFailed = "FLEET_INITIALIZATION_FAILED"
        case fleetBinaryDownloadFailed = "FLEET_BINARY_DOWNLOAD_FAILED"
        case fleetValidationLaunchPathNotFound = "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND"
        case fleetValidationExecutableRuntimeFailure = "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE"
        case fleetValidationTimedOut = "FLEET_VALIDATION_TIMED_OUT"
        case fleetActivationFailed = "FLEET_ACTIVATION_FAILED"
        case fleetActivationFailedNoInstances = "FLEET_ACTIVATION_FAILED_NO_INSTANCES"
        case fleetNewGameSessionProtectionPolicyUpdated = "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED"
        case serverProcessInvalidPath = "SERVER_PROCESS_INVALID_PATH"
        case serverProcessSdkInitializationTimeout = "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT"
        case serverProcessProcessReadyTimeout = "SERVER_PROCESS_PROCESS_READY_TIMEOUT"
        case serverProcessCrashed = "SERVER_PROCESS_CRASHED"
        case serverProcessTerminatedUnhealthy = "SERVER_PROCESS_TERMINATED_UNHEALTHY"
        case serverProcessForceTerminated = "SERVER_PROCESS_FORCE_TERMINATED"
        case serverProcessProcessExitTimeout = "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT"
        case gameSessionActivationTimeout = "GAME_SESSION_ACTIVATION_TIMEOUT"
        case fleetCreationExtractingBuild = "FLEET_CREATION_EXTRACTING_BUILD"
        case fleetCreationRunningInstaller = "FLEET_CREATION_RUNNING_INSTALLER"
        case fleetCreationValidatingRuntimeConfig = "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG"
        case fleetVpcPeeringSucceeded = "FLEET_VPC_PEERING_SUCCEEDED"
        case fleetVpcPeeringFailed = "FLEET_VPC_PEERING_FAILED"
        case fleetVpcPeeringDeleted = "FLEET_VPC_PEERING_DELETED"
        case instanceInterrupted = "INSTANCE_INTERRUPTED"
        public var description: String { return self.rawValue }
    }

    public enum FleetAction: String, CustomStringConvertible, Codable {
        case autoScaling = "AUTO_SCALING"
        public var description: String { return self.rawValue }
    }

    public struct FleetAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BuildId", required: false, type: .string), 
            AWSShapeMember(label: "CertificateConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "FleetArn", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "FleetType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "LogPaths", required: false, type: .list), 
            AWSShapeMember(label: "MetricGroups", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "NewGameSessionProtectionPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "ResourceCreationLimitPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "ScriptId", required: false, type: .string), 
            AWSShapeMember(label: "ServerLaunchParameters", required: false, type: .string), 
            AWSShapeMember(label: "ServerLaunchPath", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "StoppedActions", required: false, type: .list), 
            AWSShapeMember(label: "TerminationTime", required: false, type: .timestamp)
        ]

        /// Unique identifier for a build.
        public let buildId: String?
        public let certificateConfiguration: CertificateConfiguration?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// Human-readable description of the fleet.
        public let description: String?
        /// Identifier for a fleet that is unique across all regions.
        public let fleetArn: String?
        /// Unique identifier for a fleet.
        public let fleetId: String?
        /// Indicates whether the fleet uses on-demand or spot instances. A spot instance in use may be interrupted with a two-minute notification.
        public let fleetType: FleetType?
        /// Unique identifier for an AWS IAM role that manages access to your AWS services. With an instance role ARN set, any application that runs on an instance in this fleet can assume the role, including install scripts, server processes, daemons (background processes). Create a role or look up a role's ARN using the IAM dashboard in the AWS Management Console. Learn more about using on-box credentials for your game servers at  Access external resources from a game server.
        public let instanceRoleArn: String?
        /// EC2 instance type indicating the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. See Amazon EC2 Instance Types for detailed descriptions.
        public let instanceType: EC2InstanceType?
        /// Location of default log files. When a server process is shut down, Amazon GameLift captures and stores any log files in this location. These logs are in addition to game session logs; see more on game session logs in the Amazon GameLift Developer Guide. If no default log path for a fleet is specified, Amazon GameLift automatically uploads logs that are stored on each instance at C:\game\logs (for Windows) or /local/game/logs (for Linux). Use the Amazon GameLift console to access stored logs. 
        public let logPaths: [String]?
        /// Names of metric groups that this fleet is included in. In Amazon CloudWatch, you can view metrics for an individual fleet or aggregated metrics for fleets that are in a fleet metric group. A fleet can be included in only one metric group at a time.
        public let metricGroups: [String]?
        /// Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public let name: String?
        /// Type of game session protection to set for all new instances started in the fleet.    NoProtection -- The game session can be terminated during a scale-down event.    FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let newGameSessionProtectionPolicy: ProtectionPolicy?
        /// Operating system of the fleet's computing resources. A fleet's operating system depends on the OS specified for the build that is deployed on this fleet.
        public let operatingSystem: OperatingSystem?
        /// Fleet policy to limit the number of game sessions an individual player can create over a span of time.
        public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
        /// Unique identifier for a Realtime script.
        public let scriptId: String?
        /// Game server launch parameters specified for fleets created before 2016-08-04 (or AWS SDK v. 0.12.16). Server launch parameters for fleets created after this date are specified in the fleet's RuntimeConfiguration.
        public let serverLaunchParameters: String?
        /// Path to a game server executable in the fleet's build, specified for fleets created before 2016-08-04 (or AWS SDK v. 0.12.16). Server launch paths for fleets created after this date are specified in the fleet's RuntimeConfiguration.
        public let serverLaunchPath: String?
        /// Current status of the fleet. Possible fleet statuses include the following:    NEW -- A new fleet has been defined and desired instances is set to 1.     DOWNLOADING/VALIDATING/BUILDING/ACTIVATING -- Amazon GameLift is setting up the new fleet, creating new instances with the game build or Realtime script and starting server processes.    ACTIVE -- Hosts can now accept game sessions.    ERROR -- An error occurred when downloading, validating, building, or activating the fleet.    DELETING -- Hosts are responding to a delete fleet request.    TERMINATED -- The fleet no longer exists.  
        public let status: FleetStatus?
        /// List of fleet actions that have been suspended using StopFleetActions. This includes auto-scaling.
        public let stoppedActions: [FleetAction]?
        /// Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let terminationTime: TimeStamp?

        public init(buildId: String? = nil, certificateConfiguration: CertificateConfiguration? = nil, creationTime: TimeStamp? = nil, description: String? = nil, fleetArn: String? = nil, fleetId: String? = nil, fleetType: FleetType? = nil, instanceRoleArn: String? = nil, instanceType: EC2InstanceType? = nil, logPaths: [String]? = nil, metricGroups: [String]? = nil, name: String? = nil, newGameSessionProtectionPolicy: ProtectionPolicy? = nil, operatingSystem: OperatingSystem? = nil, resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil, scriptId: String? = nil, serverLaunchParameters: String? = nil, serverLaunchPath: String? = nil, status: FleetStatus? = nil, stoppedActions: [FleetAction]? = nil, terminationTime: TimeStamp? = nil) {
            self.buildId = buildId
            self.certificateConfiguration = certificateConfiguration
            self.creationTime = creationTime
            self.description = description
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.fleetType = fleetType
            self.instanceRoleArn = instanceRoleArn
            self.instanceType = instanceType
            self.logPaths = logPaths
            self.metricGroups = metricGroups
            self.name = name
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.operatingSystem = operatingSystem
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.scriptId = scriptId
            self.serverLaunchParameters = serverLaunchParameters
            self.serverLaunchPath = serverLaunchPath
            self.status = status
            self.stoppedActions = stoppedActions
            self.terminationTime = terminationTime
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
            case certificateConfiguration = "CertificateConfiguration"
            case creationTime = "CreationTime"
            case description = "Description"
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case fleetType = "FleetType"
            case instanceRoleArn = "InstanceRoleArn"
            case instanceType = "InstanceType"
            case logPaths = "LogPaths"
            case metricGroups = "MetricGroups"
            case name = "Name"
            case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
            case operatingSystem = "OperatingSystem"
            case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
            case scriptId = "ScriptId"
            case serverLaunchParameters = "ServerLaunchParameters"
            case serverLaunchPath = "ServerLaunchPath"
            case status = "Status"
            case stoppedActions = "StoppedActions"
            case terminationTime = "TerminationTime"
        }
    }

    public struct FleetCapacity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceCounts", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum)
        ]

        /// Unique identifier for a fleet.
        public let fleetId: String?
        /// Current status of fleet capacity.
        public let instanceCounts: EC2InstanceCounts?
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        public let instanceType: EC2InstanceType?

        public init(fleetId: String? = nil, instanceCounts: EC2InstanceCounts? = nil, instanceType: EC2InstanceType? = nil) {
            self.fleetId = fleetId
            self.instanceCounts = instanceCounts
            self.instanceType = instanceType
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case instanceCounts = "InstanceCounts"
            case instanceType = "InstanceType"
        }
    }

    public enum FleetStatus: String, CustomStringConvertible, Codable {
        case new = "NEW"
        case downloading = "DOWNLOADING"
        case validating = "VALIDATING"
        case building = "BUILDING"
        case activating = "ACTIVATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        case error = "ERROR"
        case terminated = "TERMINATED"
        public var description: String { return self.rawValue }
    }

    public enum FleetType: String, CustomStringConvertible, Codable {
        case onDemand = "ON_DEMAND"
        case spot = "SPOT"
        public var description: String { return self.rawValue }
    }

    public struct FleetUtilization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActiveGameSessionCount", required: false, type: .integer), 
            AWSShapeMember(label: "ActiveServerProcessCount", required: false, type: .integer), 
            AWSShapeMember(label: "CurrentPlayerSessionCount", required: false, type: .integer), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "MaximumPlayerSessionCount", required: false, type: .integer)
        ]

        /// Number of active game sessions currently being hosted on all instances in the fleet.
        public let activeGameSessionCount: Int?
        /// Number of server processes in an ACTIVE status currently running across all instances in the fleet
        public let activeServerProcessCount: Int?
        /// Number of active player sessions currently being hosted on all instances in the fleet.
        public let currentPlayerSessionCount: Int?
        /// Unique identifier for a fleet.
        public let fleetId: String?
        /// Maximum players allowed across all game sessions currently being hosted on all instances in the fleet.
        public let maximumPlayerSessionCount: Int?

        public init(activeGameSessionCount: Int? = nil, activeServerProcessCount: Int? = nil, currentPlayerSessionCount: Int? = nil, fleetId: String? = nil, maximumPlayerSessionCount: Int? = nil) {
            self.activeGameSessionCount = activeGameSessionCount
            self.activeServerProcessCount = activeServerProcessCount
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.fleetId = fleetId
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
        }

        private enum CodingKeys: String, CodingKey {
            case activeGameSessionCount = "ActiveGameSessionCount"
            case activeServerProcessCount = "ActiveServerProcessCount"
            case currentPlayerSessionCount = "CurrentPlayerSessionCount"
            case fleetId = "FleetId"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        }
    }

    public struct GameProperty: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]

        /// Game property identifier.
        public let key: String
        /// Game property value.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.key, name:"key", parent: name, max: 32)
            try validate(self.value, name:"value", parent: name, max: 96)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct GameSession: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatorId", required: false, type: .string), 
            AWSShapeMember(label: "CurrentPlayerSessionCount", required: false, type: .integer), 
            AWSShapeMember(label: "DnsName", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "GameProperties", required: false, type: .list), 
            AWSShapeMember(label: "GameSessionData", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "MatchmakerData", required: false, type: .string), 
            AWSShapeMember(label: "MaximumPlayerSessionCount", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "PlayerSessionCreationPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "StatusReason", required: false, type: .enum), 
            AWSShapeMember(label: "TerminationTime", required: false, type: .timestamp)
        ]

        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// Unique identifier for a player. This ID is used to enforce a resource protection policy (if one exists), that limits the number of game sessions a player can create.
        public let creatorId: String?
        /// Number of players currently in the game session.
        public let currentPlayerSessionCount: Int?
        public let dnsName: String?
        /// Unique identifier for a fleet that the game session is running on.
        public let fleetId: String?
        /// Set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session). You can search for active game sessions based on this custom data with SearchGameSessions.
        public let gameProperties: [GameProperty]?
        /// Set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session).
        public let gameSessionData: String?
        /// Unique identifier for the game session. A game session ARN has the following format: arn:aws:gamelift:&lt;region&gt;::gamesession/&lt;fleet ID&gt;/&lt;custom ID string or idempotency token&gt;.
        public let gameSessionId: String?
        /// IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
        public let ipAddress: String?
        /// Information about the matchmaking process that was used to create the game session. It is in JSON syntax, formatted as a string. In addition the matchmaking configuration used, it contains data on all players assigned to the match, including player attributes and team assignments. For more details on matchmaker data, see Match Data. Matchmaker data is useful when requesting match backfills, and is updated whenever new players are added during a successful backfill (see StartMatchBackfill). 
        public let matchmakerData: String?
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int?
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let name: String?
        /// Indicates whether or not the game session is accepting new players.
        public let playerSessionCreationPolicy: PlayerSessionCreationPolicy?
        /// Port number for the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
        public let port: Int?
        /// Current status of the game session. A game session must have an ACTIVE status to have player sessions.
        public let status: GameSessionStatus?
        /// Provides additional information about game session status. INTERRUPTED indicates that the game session was hosted on a spot instance that was reclaimed, causing the active game session to be terminated.
        public let statusReason: GameSessionStatusReason?
        /// Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let terminationTime: TimeStamp?

        public init(creationTime: TimeStamp? = nil, creatorId: String? = nil, currentPlayerSessionCount: Int? = nil, dnsName: String? = nil, fleetId: String? = nil, gameProperties: [GameProperty]? = nil, gameSessionData: String? = nil, gameSessionId: String? = nil, ipAddress: String? = nil, matchmakerData: String? = nil, maximumPlayerSessionCount: Int? = nil, name: String? = nil, playerSessionCreationPolicy: PlayerSessionCreationPolicy? = nil, port: Int? = nil, status: GameSessionStatus? = nil, statusReason: GameSessionStatusReason? = nil, terminationTime: TimeStamp? = nil) {
            self.creationTime = creationTime
            self.creatorId = creatorId
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.dnsName = dnsName
            self.fleetId = fleetId
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionId = gameSessionId
            self.ipAddress = ipAddress
            self.matchmakerData = matchmakerData
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.name = name
            self.playerSessionCreationPolicy = playerSessionCreationPolicy
            self.port = port
            self.status = status
            self.statusReason = statusReason
            self.terminationTime = terminationTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case creatorId = "CreatorId"
            case currentPlayerSessionCount = "CurrentPlayerSessionCount"
            case dnsName = "DnsName"
            case fleetId = "FleetId"
            case gameProperties = "GameProperties"
            case gameSessionData = "GameSessionData"
            case gameSessionId = "GameSessionId"
            case ipAddress = "IpAddress"
            case matchmakerData = "MatchmakerData"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
            case name = "Name"
            case playerSessionCreationPolicy = "PlayerSessionCreationPolicy"
            case port = "Port"
            case status = "Status"
            case statusReason = "StatusReason"
            case terminationTime = "TerminationTime"
        }
    }

    public struct GameSessionConnectionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DnsName", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionArn", required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "MatchedPlayerSessions", required: false, type: .list), 
            AWSShapeMember(label: "Port", required: false, type: .integer)
        ]

        public let dnsName: String?
        /// Amazon Resource Name (ARN) that is assigned to a game session and uniquely identifies it.
        public let gameSessionArn: String?
        /// IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
        public let ipAddress: String?
        /// Collection of player session IDs, one for each player ID that was included in the original matchmaking request. 
        public let matchedPlayerSessions: [MatchedPlayerSession]?
        /// Port number for the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
        public let port: Int?

        public init(dnsName: String? = nil, gameSessionArn: String? = nil, ipAddress: String? = nil, matchedPlayerSessions: [MatchedPlayerSession]? = nil, port: Int? = nil) {
            self.dnsName = dnsName
            self.gameSessionArn = gameSessionArn
            self.ipAddress = ipAddress
            self.matchedPlayerSessions = matchedPlayerSessions
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case dnsName = "DnsName"
            case gameSessionArn = "GameSessionArn"
            case ipAddress = "IpAddress"
            case matchedPlayerSessions = "MatchedPlayerSessions"
            case port = "Port"
        }
    }

    public struct GameSessionDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSession", required: false, type: .structure), 
            AWSShapeMember(label: "ProtectionPolicy", required: false, type: .enum)
        ]

        /// Object that describes a game session.
        public let gameSession: GameSession?
        /// Current status of protection for the game session.    NoProtection -- The game session can be terminated during a scale-down event.    FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let protectionPolicy: ProtectionPolicy?

        public init(gameSession: GameSession? = nil, protectionPolicy: ProtectionPolicy? = nil) {
            self.gameSession = gameSession
            self.protectionPolicy = protectionPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case gameSession = "GameSession"
            case protectionPolicy = "ProtectionPolicy"
        }
    }

    public struct GameSessionPlacement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DnsName", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "GameProperties", required: false, type: .list), 
            AWSShapeMember(label: "GameSessionArn", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionData", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionName", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionQueueName", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionRegion", required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "MatchmakerData", required: false, type: .string), 
            AWSShapeMember(label: "MaximumPlayerSessionCount", required: false, type: .integer), 
            AWSShapeMember(label: "PlacedPlayerSessions", required: false, type: .list), 
            AWSShapeMember(label: "PlacementId", required: false, type: .string), 
            AWSShapeMember(label: "PlayerLatencies", required: false, type: .list), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]

        public let dnsName: String?
        /// Time stamp indicating when this request was completed, canceled, or timed out.
        public let endTime: TimeStamp?
        /// Set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session).
        public let gameProperties: [GameProperty]?
        /// Identifier for the game session created by this placement request. This value is set once the new game session is placed (placement status is FULFILLED). This identifier is unique across all regions. You can use this value as a GameSessionId value as needed.
        public let gameSessionArn: String?
        /// Set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session).
        public let gameSessionData: String?
        /// Unique identifier for the game session. This value is set once the new game session is placed (placement status is FULFILLED).
        public let gameSessionId: String?
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let gameSessionName: String?
        /// Descriptive label that is associated with game session queue. Queue names must be unique within each region.
        public let gameSessionQueueName: String?
        /// Name of the region where the game session created by this placement request is running. This value is set once the new game session is placed (placement status is FULFILLED).
        public let gameSessionRegion: String?
        /// IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is FULFILLED). 
        public let ipAddress: String?
        /// Information on the matchmaking process for this game. Data is in JSON syntax, formatted as a string. It identifies the matchmaking configuration used to create the match, and contains data on all players assigned to the match, including player attributes and team assignments. For more details on matchmaker data, see Match Data.
        public let matchmakerData: String?
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int?
        /// Collection of information on player sessions created in response to the game session placement request. These player sessions are created only once a new game session is successfully placed (placement status is FULFILLED). This information includes the player ID (as provided in the placement request) and the corresponding player session ID. Retrieve full player sessions by calling DescribePlayerSessions with the player session ID.
        public let placedPlayerSessions: [PlacedPlayerSession]?
        /// Unique identifier for a game session placement.
        public let placementId: String?
        /// Set of values, expressed in milliseconds, indicating the amount of latency that a player experiences when connected to AWS regions.
        public let playerLatencies: [PlayerLatency]?
        /// Port number for the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is FULFILLED).
        public let port: Int?
        /// Time stamp indicating when this request was placed in the queue. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let startTime: TimeStamp?
        /// Current status of the game session placement request.    PENDING -- The placement request is currently in the queue waiting to be processed.    FULFILLED -- A new game session and player sessions (if requested) have been successfully created. Values for GameSessionArn and GameSessionRegion are available.     CANCELLED -- The placement request was canceled with a call to StopGameSessionPlacement.    TIMED_OUT -- A new game session was not successfully created before the time limit expired. You can resubmit the placement request as needed.  
        public let status: GameSessionPlacementState?

        public init(dnsName: String? = nil, endTime: TimeStamp? = nil, gameProperties: [GameProperty]? = nil, gameSessionArn: String? = nil, gameSessionData: String? = nil, gameSessionId: String? = nil, gameSessionName: String? = nil, gameSessionQueueName: String? = nil, gameSessionRegion: String? = nil, ipAddress: String? = nil, matchmakerData: String? = nil, maximumPlayerSessionCount: Int? = nil, placedPlayerSessions: [PlacedPlayerSession]? = nil, placementId: String? = nil, playerLatencies: [PlayerLatency]? = nil, port: Int? = nil, startTime: TimeStamp? = nil, status: GameSessionPlacementState? = nil) {
            self.dnsName = dnsName
            self.endTime = endTime
            self.gameProperties = gameProperties
            self.gameSessionArn = gameSessionArn
            self.gameSessionData = gameSessionData
            self.gameSessionId = gameSessionId
            self.gameSessionName = gameSessionName
            self.gameSessionQueueName = gameSessionQueueName
            self.gameSessionRegion = gameSessionRegion
            self.ipAddress = ipAddress
            self.matchmakerData = matchmakerData
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.placedPlayerSessions = placedPlayerSessions
            self.placementId = placementId
            self.playerLatencies = playerLatencies
            self.port = port
            self.startTime = startTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case dnsName = "DnsName"
            case endTime = "EndTime"
            case gameProperties = "GameProperties"
            case gameSessionArn = "GameSessionArn"
            case gameSessionData = "GameSessionData"
            case gameSessionId = "GameSessionId"
            case gameSessionName = "GameSessionName"
            case gameSessionQueueName = "GameSessionQueueName"
            case gameSessionRegion = "GameSessionRegion"
            case ipAddress = "IpAddress"
            case matchmakerData = "MatchmakerData"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
            case placedPlayerSessions = "PlacedPlayerSessions"
            case placementId = "PlacementId"
            case playerLatencies = "PlayerLatencies"
            case port = "Port"
            case startTime = "StartTime"
            case status = "Status"
        }
    }

    public enum GameSessionPlacementState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case fulfilled = "FULFILLED"
        case cancelled = "CANCELLED"
        case timedOut = "TIMED_OUT"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct GameSessionQueue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destinations", required: false, type: .list), 
            AWSShapeMember(label: "GameSessionQueueArn", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "PlayerLatencyPolicies", required: false, type: .list), 
            AWSShapeMember(label: "TimeoutInSeconds", required: false, type: .integer)
        ]

        /// List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order.
        public let destinations: [GameSessionQueueDestination]?
        /// Amazon Resource Name (ARN) that is assigned to a game session queue and uniquely identifies it. Format is arn:aws:gamelift:&lt;region&gt;:&lt;aws account&gt;:gamesessionqueue/&lt;queue name&gt;.
        public let gameSessionQueueArn: String?
        /// Descriptive label that is associated with game session queue. Queue names must be unique within each region.
        public let name: String?
        /// Collection of latency policies to apply when processing game sessions placement requests with player latency information. Multiple policies are evaluated in order of the maximum latency value, starting with the lowest latency values. With just one policy, it is enforced at the start of the game session placement for the duration period. With multiple policies, each policy is enforced consecutively for its duration period. For example, a queue might enforce a 60-second policy followed by a 120-second policy, and then no policy for the remainder of the placement. 
        public let playerLatencyPolicies: [PlayerLatencyPolicy]?
        /// Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public let timeoutInSeconds: Int?

        public init(destinations: [GameSessionQueueDestination]? = nil, gameSessionQueueArn: String? = nil, name: String? = nil, playerLatencyPolicies: [PlayerLatencyPolicy]? = nil, timeoutInSeconds: Int? = nil) {
            self.destinations = destinations
            self.gameSessionQueueArn = gameSessionQueueArn
            self.name = name
            self.playerLatencyPolicies = playerLatencyPolicies
            self.timeoutInSeconds = timeoutInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case destinations = "Destinations"
            case gameSessionQueueArn = "GameSessionQueueArn"
            case name = "Name"
            case playerLatencyPolicies = "PlayerLatencyPolicies"
            case timeoutInSeconds = "TimeoutInSeconds"
        }
    }

    public struct GameSessionQueueDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationArn", required: false, type: .string)
        ]

        /// Amazon Resource Name (ARN) assigned to fleet or fleet alias. ARNs, which include a fleet ID or alias ID and a region name, provide a unique identifier across all regions. 
        public let destinationArn: String?

        public init(destinationArn: String? = nil) {
            self.destinationArn = destinationArn
        }

        public func validate(name: String) throws {
            try validate(self.destinationArn, name:"destinationArn", parent: name, max: 256)
            try validate(self.destinationArn, name:"destinationArn", parent: name, min: 1)
            try validate(self.destinationArn, name:"destinationArn", parent: name, pattern: "[a-zA-Z0-9:/-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case destinationArn = "DestinationArn"
        }
    }

    public enum GameSessionStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case activating = "ACTIVATING"
        case terminated = "TERMINATED"
        case terminating = "TERMINATING"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public enum GameSessionStatusReason: String, CustomStringConvertible, Codable {
        case interrupted = "INTERRUPTED"
        public var description: String { return self.rawValue }
    }

    public struct GetGameSessionLogUrlInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionId", required: true, type: .string)
        ]

        /// Unique identifier for the game session to get logs for.
        public let gameSessionId: String

        public init(gameSessionId: String) {
            self.gameSessionId = gameSessionId
        }

        public func validate(name: String) throws {
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, max: 256)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, min: 1)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionId = "GameSessionId"
        }
    }

    public struct GetGameSessionLogUrlOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PreSignedUrl", required: false, type: .string)
        ]

        /// Location of the requested game session logs, available for download. This URL is valid for 15 minutes, after which S3 will reject any download request using this URL. You can request a new URL any time within the 14-day period that the logs are retained.
        public let preSignedUrl: String?

        public init(preSignedUrl: String? = nil) {
            self.preSignedUrl = preSignedUrl
        }

        private enum CodingKeys: String, CodingKey {
            case preSignedUrl = "PreSignedUrl"
        }
    }

    public struct GetInstanceAccessInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]

        /// Unique identifier for a fleet that contains the instance you want access to. The fleet can be in any of the following statuses: ACTIVATING, ACTIVE, or ERROR. Fleets with an ERROR status may be accessible for a short time before they are deleted.
        public let fleetId: String
        /// Unique identifier for an instance you want to get access to. You can access an instance in any status.
        public let instanceId: String

        public init(fleetId: String, instanceId: String) {
            self.fleetId = fleetId
            self.instanceId = instanceId
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try validate(self.instanceId, name:"instanceId", parent: name, pattern: "[a-zA-Z0-9\\.-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case instanceId = "InstanceId"
        }
    }

    public struct GetInstanceAccessOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceAccess", required: false, type: .structure)
        ]

        /// Object that contains connection information for a fleet instance, including IP address and access credentials.
        public let instanceAccess: InstanceAccess?

        public init(instanceAccess: InstanceAccess? = nil) {
            self.instanceAccess = instanceAccess
        }

        private enum CodingKeys: String, CodingKey {
            case instanceAccess = "InstanceAccess"
        }
    }

    public struct Instance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DnsName", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]

        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        public let dnsName: String?
        /// Unique identifier for a fleet that the instance is in.
        public let fleetId: String?
        /// Unique identifier for an instance.
        public let instanceId: String?
        /// IP address assigned to the instance.
        public let ipAddress: String?
        /// Operating system that is running on this instance. 
        public let operatingSystem: OperatingSystem?
        /// Current status of the instance. Possible statuses include the following:    PENDING -- The instance is in the process of being created and launching server processes as defined in the fleet's run-time configuration.     ACTIVE -- The instance has been successfully created and at least one server process has successfully launched and reported back to Amazon GameLift that it is ready to host a game session. The instance is now considered ready to host game sessions.     TERMINATING -- The instance is in the process of shutting down. This may happen to reduce capacity during a scaling down event or to recycle resources in the event of a problem.  
        public let status: InstanceStatus?
        /// EC2 instance type that defines the computing resources of this instance. 
        public let `type`: EC2InstanceType?

        public init(creationTime: TimeStamp? = nil, dnsName: String? = nil, fleetId: String? = nil, instanceId: String? = nil, ipAddress: String? = nil, operatingSystem: OperatingSystem? = nil, status: InstanceStatus? = nil, type: EC2InstanceType? = nil) {
            self.creationTime = creationTime
            self.dnsName = dnsName
            self.fleetId = fleetId
            self.instanceId = instanceId
            self.ipAddress = ipAddress
            self.operatingSystem = operatingSystem
            self.status = status
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case dnsName = "DnsName"
            case fleetId = "FleetId"
            case instanceId = "InstanceId"
            case ipAddress = "IpAddress"
            case operatingSystem = "OperatingSystem"
            case status = "Status"
            case `type` = "Type"
        }
    }

    public struct InstanceAccess: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Credentials", required: false, type: .structure), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum)
        ]

        /// Credentials required to access the instance.
        public let credentials: InstanceCredentials?
        /// Unique identifier for a fleet containing the instance being accessed.
        public let fleetId: String?
        /// Unique identifier for an instance being accessed.
        public let instanceId: String?
        /// IP address assigned to the instance.
        public let ipAddress: String?
        /// Operating system that is running on the instance.
        public let operatingSystem: OperatingSystem?

        public init(credentials: InstanceCredentials? = nil, fleetId: String? = nil, instanceId: String? = nil, ipAddress: String? = nil, operatingSystem: OperatingSystem? = nil) {
            self.credentials = credentials
            self.fleetId = fleetId
            self.instanceId = instanceId
            self.ipAddress = ipAddress
            self.operatingSystem = operatingSystem
        }

        private enum CodingKeys: String, CodingKey {
            case credentials = "Credentials"
            case fleetId = "FleetId"
            case instanceId = "InstanceId"
            case ipAddress = "IpAddress"
            case operatingSystem = "OperatingSystem"
        }
    }

    public struct InstanceCredentials: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Secret", required: false, type: .string), 
            AWSShapeMember(label: "UserName", required: false, type: .string)
        ]

        /// Secret string. For Windows instances, the secret is a password for use with Windows Remote Desktop. For Linux instances, it is a private key (which must be saved as a .pem file) for use with SSH.
        public let secret: String?
        /// User login string.
        public let userName: String?

        public init(secret: String? = nil, userName: String? = nil) {
            self.secret = secret
            self.userName = userName
        }

        private enum CodingKeys: String, CodingKey {
            case secret = "Secret"
            case userName = "UserName"
        }
    }

    public enum InstanceStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case active = "ACTIVE"
        case terminating = "TERMINATING"
        public var description: String { return self.rawValue }
    }

    public struct IpPermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FromPort", required: true, type: .integer), 
            AWSShapeMember(label: "IpRange", required: true, type: .string), 
            AWSShapeMember(label: "Protocol", required: true, type: .enum), 
            AWSShapeMember(label: "ToPort", required: true, type: .integer)
        ]

        /// Starting value for a range of allowed port numbers.
        public let fromPort: Int
        /// Range of allowed IP addresses. This value must be expressed in CIDR notation. Example: "000.000.000.000/[subnet mask]" or optionally the shortened version "0.0.0.0/[subnet mask]".
        public let ipRange: String
        /// Network communication protocol used by the fleet.
        public let `protocol`: IpProtocol
        /// Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort.
        public let toPort: Int

        public init(fromPort: Int, ipRange: String, protocol: IpProtocol, toPort: Int) {
            self.fromPort = fromPort
            self.ipRange = ipRange
            self.`protocol` = `protocol`
            self.toPort = toPort
        }

        public func validate(name: String) throws {
            try validate(self.fromPort, name:"fromPort", parent: name, max: 60000)
            try validate(self.fromPort, name:"fromPort", parent: name, min: 1)
            try validate(self.ipRange, name:"ipRange", parent: name, pattern: "[^\\s]+")
            try validate(self.toPort, name:"toPort", parent: name, max: 60000)
            try validate(self.toPort, name:"toPort", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "FromPort"
            case ipRange = "IpRange"
            case `protocol` = "Protocol"
            case toPort = "ToPort"
        }
    }

    public enum IpProtocol: String, CustomStringConvertible, Codable {
        case tcp = "TCP"
        case udp = "UDP"
        public var description: String { return self.rawValue }
    }

    public struct ListAliasesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "RoutingStrategyType", required: false, type: .enum)
        ]

        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Type of routing to filter results on. Use this parameter to retrieve only aliases of a certain type. To retrieve all aliases, leave this parameter empty. Possible routing types include the following:    SIMPLE -- The alias resolves to one specific fleet. Use this type when routing to active fleets.    TERMINAL -- The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the RoutingStrategy message embedded.  
        public let routingStrategyType: RoutingStrategyType?

        public init(limit: Int? = nil, name: String? = nil, nextToken: String? = nil, routingStrategyType: RoutingStrategyType? = nil) {
            self.limit = limit
            self.name = name
            self.nextToken = nextToken
            self.routingStrategyType = routingStrategyType
        }

        public func validate(name: String) throws {
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case name = "Name"
            case nextToken = "NextToken"
            case routingStrategyType = "RoutingStrategyType"
        }
    }

    public struct ListAliasesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Aliases", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Collection of alias records that match the list request.
        public let aliases: [Alias]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(aliases: [Alias]? = nil, nextToken: String? = nil) {
            self.aliases = aliases
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case aliases = "Aliases"
            case nextToken = "NextToken"
        }
    }

    public struct ListBuildsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]

        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Build status to filter results by. To retrieve all builds, leave this parameter empty. Possible build statuses include the following:    INITIALIZED -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.     READY -- The game build has been successfully uploaded. You can now create new fleets for this build.    FAILED -- The game build upload failed. You cannot create new fleets for this build.   
        public let status: BuildStatus?

        public init(limit: Int? = nil, nextToken: String? = nil, status: BuildStatus? = nil) {
            self.limit = limit
            self.nextToken = nextToken
            self.status = status
        }

        public func validate(name: String) throws {
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextToken = "NextToken"
            case status = "Status"
        }
    }

    public struct ListBuildsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Builds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Collection of build records that match the request.
        public let builds: [Build]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(builds: [Build]? = nil, nextToken: String? = nil) {
            self.builds = builds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case builds = "Builds"
            case nextToken = "NextToken"
        }
    }

    public struct ListFleetsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BuildId", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScriptId", required: false, type: .string)
        ]

        /// Unique identifier for a build to return fleets for. Use this parameter to return only fleets using the specified build. To retrieve all fleets, leave this parameter empty.
        public let buildId: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Unique identifier for a Realtime script to return fleets for. Use this parameter to return only fleets using the specified script. To retrieve all fleets, leave this parameter empty.
        public let scriptId: String?

        public init(buildId: String? = nil, limit: Int? = nil, nextToken: String? = nil, scriptId: String? = nil) {
            self.buildId = buildId
            self.limit = limit
            self.nextToken = nextToken
            self.scriptId = scriptId
        }

        public func validate(name: String) throws {
            try validate(self.buildId, name:"buildId", parent: name, pattern: "^build-\\S+")
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
            try validate(self.scriptId, name:"scriptId", parent: name, pattern: "^script-\\S+|^arn:.*script-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
            case limit = "Limit"
            case nextToken = "NextToken"
            case scriptId = "ScriptId"
        }
    }

    public struct ListFleetsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetIds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Set of fleet IDs matching the list request. You can retrieve additional information about all returned fleets by passing this result set to a call to DescribeFleetAttributes, DescribeFleetCapacity, or DescribeFleetUtilization.
        public let fleetIds: [String]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(fleetIds: [String]? = nil, nextToken: String? = nil) {
            self.fleetIds = fleetIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleetIds = "FleetIds"
            case nextToken = "NextToken"
        }
    }

    public struct ListScriptsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?

        public init(limit: Int? = nil, nextToken: String? = nil) {
            self.limit = limit
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct ListScriptsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Scripts", required: false, type: .list)
        ]

        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Set of properties describing the requested script.
        public let scripts: [Script]?

        public init(nextToken: String? = nil, scripts: [Script]? = nil) {
            self.nextToken = nextToken
            self.scripts = scripts
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scripts = "Scripts"
        }
    }

    public struct MatchedPlayerSession: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlayerId", required: false, type: .string), 
            AWSShapeMember(label: "PlayerSessionId", required: false, type: .string)
        ]

        /// Unique identifier for a player 
        public let playerId: String?
        /// Unique identifier for a player session
        public let playerSessionId: String?

        public init(playerId: String? = nil, playerSessionId: String? = nil) {
            self.playerId = playerId
            self.playerSessionId = playerSessionId
        }

        private enum CodingKeys: String, CodingKey {
            case playerId = "PlayerId"
            case playerSessionId = "PlayerSessionId"
        }
    }

    public struct MatchmakingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptanceRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "AcceptanceTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "AdditionalPlayerCount", required: false, type: .integer), 
            AWSShapeMember(label: "BackfillMode", required: false, type: .enum), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CustomEventData", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "GameProperties", required: false, type: .list), 
            AWSShapeMember(label: "GameSessionData", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionQueueArns", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "NotificationTarget", required: false, type: .string), 
            AWSShapeMember(label: "RequestTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "RuleSetName", required: false, type: .string)
        ]

        /// Flag that determines whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE.
        public let acceptanceRequired: Bool?
        /// Length of time (in seconds) to wait for players to accept a proposed match. If any player rejects the match or fails to accept before the timeout, the ticket continues to look for an acceptable match.
        public let acceptanceTimeoutSeconds: Int?
        /// Number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match.
        public let additionalPlayerCount: Int?
        /// Method used to backfill game sessions created with this matchmaking configuration. MANUAL indicates that the game makes backfill requests or does not use the match backfill feature. AUTOMATIC indicates that GameLift creates StartMatchBackfill requests whenever a game session has one or more open slots. Learn more about manual and automatic backfill in Backfill Existing Games with FlexMatch.
        public let backfillMode: BackfillMode?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// Information to attach to all events related to the matchmaking configuration. 
        public let customEventData: String?
        /// Descriptive label that is associated with matchmaking configuration.
        public let description: String?
        /// Set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session). This information is added to the new GameSession object that is created for a successful match. 
        public let gameProperties: [GameProperty]?
        /// Set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session). This information is added to the new GameSession object that is created for a successful match. 
        public let gameSessionData: String?
        /// Amazon Resource Name (ARN) that is assigned to a game session queue and uniquely identifies it. Format is arn:aws:gamelift:&lt;region&gt;:&lt;aws account&gt;:gamesessionqueue/&lt;queue name&gt;. These queues are used when placing game sessions for matches that are created with this matchmaking configuration. Queues can be located in any region.
        public let gameSessionQueueArns: [String]?
        /// Unique identifier for a matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.
        public let name: String?
        /// SNS topic ARN that is set up to receive matchmaking notifications.
        public let notificationTarget: String?
        /// Maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
        public let requestTimeoutSeconds: Int?
        /// Unique identifier for a matchmaking rule set to use with this configuration. A matchmaking configuration can only use rule sets that are defined in the same region.
        public let ruleSetName: String?

        public init(acceptanceRequired: Bool? = nil, acceptanceTimeoutSeconds: Int? = nil, additionalPlayerCount: Int? = nil, backfillMode: BackfillMode? = nil, creationTime: TimeStamp? = nil, customEventData: String? = nil, description: String? = nil, gameProperties: [GameProperty]? = nil, gameSessionData: String? = nil, gameSessionQueueArns: [String]? = nil, name: String? = nil, notificationTarget: String? = nil, requestTimeoutSeconds: Int? = nil, ruleSetName: String? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
            self.additionalPlayerCount = additionalPlayerCount
            self.backfillMode = backfillMode
            self.creationTime = creationTime
            self.customEventData = customEventData
            self.description = description
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionQueueArns = gameSessionQueueArns
            self.name = name
            self.notificationTarget = notificationTarget
            self.requestTimeoutSeconds = requestTimeoutSeconds
            self.ruleSetName = ruleSetName
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "AcceptanceRequired"
            case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
            case additionalPlayerCount = "AdditionalPlayerCount"
            case backfillMode = "BackfillMode"
            case creationTime = "CreationTime"
            case customEventData = "CustomEventData"
            case description = "Description"
            case gameProperties = "GameProperties"
            case gameSessionData = "GameSessionData"
            case gameSessionQueueArns = "GameSessionQueueArns"
            case name = "Name"
            case notificationTarget = "NotificationTarget"
            case requestTimeoutSeconds = "RequestTimeoutSeconds"
            case ruleSetName = "RuleSetName"
        }
    }

    public enum MatchmakingConfigurationStatus: String, CustomStringConvertible, Codable {
        case cancelled = "CANCELLED"
        case completed = "COMPLETED"
        case failed = "FAILED"
        case placing = "PLACING"
        case queued = "QUEUED"
        case requiresAcceptance = "REQUIRES_ACCEPTANCE"
        case searching = "SEARCHING"
        case timedOut = "TIMED_OUT"
        public var description: String { return self.rawValue }
    }

    public struct MatchmakingRuleSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "RuleSetBody", required: true, type: .string), 
            AWSShapeMember(label: "RuleSetName", required: false, type: .string)
        ]

        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// Collection of matchmaking rules, formatted as a JSON string. Comments are not allowed in JSON, but most elements support a description field.
        public let ruleSetBody: String
        /// Unique identifier for a matchmaking rule set
        public let ruleSetName: String?

        public init(creationTime: TimeStamp? = nil, ruleSetBody: String, ruleSetName: String? = nil) {
            self.creationTime = creationTime
            self.ruleSetBody = ruleSetBody
            self.ruleSetName = ruleSetName
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case ruleSetBody = "RuleSetBody"
            case ruleSetName = "RuleSetName"
        }
    }

    public struct MatchmakingTicket: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfigurationName", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EstimatedWaitTime", required: false, type: .integer), 
            AWSShapeMember(label: "GameSessionConnectionInfo", required: false, type: .structure), 
            AWSShapeMember(label: "Players", required: false, type: .list), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "StatusReason", required: false, type: .string), 
            AWSShapeMember(label: "TicketId", required: false, type: .string)
        ]

        /// Name of the MatchmakingConfiguration that is used with this ticket. Matchmaking configurations determine how players are grouped into a match and how a new game session is created for the match.
        public let configurationName: String?
        /// Time stamp indicating when this matchmaking request stopped being processed due to success, failure, or cancellation. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let endTime: TimeStamp?
        /// Average amount of time (in seconds) that players are currently waiting for a match. If there is not enough recent data, this property may be empty.
        public let estimatedWaitTime: Int?
        /// Identifier and connection information of the game session created for the match. This information is added to the ticket only after the matchmaking request has been successfully completed.
        public let gameSessionConnectionInfo: GameSessionConnectionInfo?
        /// A set of Player objects, each representing a player to find matches for. Players are identified by a unique player ID and may include latency data for use during matchmaking. If the ticket is in status COMPLETED, the Player objects include the team the players were assigned to in the resulting match.
        public let players: [Player]?
        /// Time stamp indicating when this matchmaking request was received. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let startTime: TimeStamp?
        /// Current status of the matchmaking request.    QUEUED -- The matchmaking request has been received and is currently waiting to be processed.    SEARCHING -- The matchmaking request is currently being processed.     REQUIRES_ACCEPTANCE -- A match has been proposed and the players must accept the match (see AcceptMatch). This status is used only with requests that use a matchmaking configuration with a player acceptance requirement.    PLACING -- The FlexMatch engine has matched players and is in the process of placing a new game session for the match.    COMPLETED -- Players have been matched and a game session is ready to host the players. A ticket in this state contains the necessary connection information for players.    FAILED -- The matchmaking request was not completed.    CANCELLED -- The matchmaking request was canceled. This may be the result of a call to StopMatchmaking or a proposed match that one or more players failed to accept.    TIMED_OUT -- The matchmaking request was not successful within the duration specified in the matchmaking configuration.     Matchmaking requests that fail to successfully complete (statuses FAILED, CANCELLED, TIMED_OUT) can be resubmitted as new requests with new ticket IDs. 
        public let status: MatchmakingConfigurationStatus?
        /// Additional information about the current status.
        public let statusMessage: String?
        /// Code to explain the current status. For example, a status reason may indicate when a ticket has returned to SEARCHING status after a proposed match fails to receive player acceptances.
        public let statusReason: String?
        /// Unique identifier for a matchmaking ticket.
        public let ticketId: String?

        public init(configurationName: String? = nil, endTime: TimeStamp? = nil, estimatedWaitTime: Int? = nil, gameSessionConnectionInfo: GameSessionConnectionInfo? = nil, players: [Player]? = nil, startTime: TimeStamp? = nil, status: MatchmakingConfigurationStatus? = nil, statusMessage: String? = nil, statusReason: String? = nil, ticketId: String? = nil) {
            self.configurationName = configurationName
            self.endTime = endTime
            self.estimatedWaitTime = estimatedWaitTime
            self.gameSessionConnectionInfo = gameSessionConnectionInfo
            self.players = players
            self.startTime = startTime
            self.status = status
            self.statusMessage = statusMessage
            self.statusReason = statusReason
            self.ticketId = ticketId
        }

        private enum CodingKeys: String, CodingKey {
            case configurationName = "ConfigurationName"
            case endTime = "EndTime"
            case estimatedWaitTime = "EstimatedWaitTime"
            case gameSessionConnectionInfo = "GameSessionConnectionInfo"
            case players = "Players"
            case startTime = "StartTime"
            case status = "Status"
            case statusMessage = "StatusMessage"
            case statusReason = "StatusReason"
            case ticketId = "TicketId"
        }
    }

    public enum MetricName: String, CustomStringConvertible, Codable {
        case activatinggamesessions = "ActivatingGameSessions"
        case activegamesessions = "ActiveGameSessions"
        case activeinstances = "ActiveInstances"
        case availablegamesessions = "AvailableGameSessions"
        case availableplayersessions = "AvailablePlayerSessions"
        case currentplayersessions = "CurrentPlayerSessions"
        case idleinstances = "IdleInstances"
        case percentavailablegamesessions = "PercentAvailableGameSessions"
        case percentidleinstances = "PercentIdleInstances"
        case queuedepth = "QueueDepth"
        case waittime = "WaitTime"
        public var description: String { return self.rawValue }
    }

    public enum OperatingSystem: String, CustomStringConvertible, Codable {
        case windows2012 = "WINDOWS_2012"
        case amazonLinux = "AMAZON_LINUX"
        public var description: String { return self.rawValue }
    }

    public struct PlacedPlayerSession: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlayerId", required: false, type: .string), 
            AWSShapeMember(label: "PlayerSessionId", required: false, type: .string)
        ]

        /// Unique identifier for a player that is associated with this player session.
        public let playerId: String?
        /// Unique identifier for a player session.
        public let playerSessionId: String?

        public init(playerId: String? = nil, playerSessionId: String? = nil) {
            self.playerId = playerId
            self.playerSessionId = playerSessionId
        }

        private enum CodingKeys: String, CodingKey {
            case playerId = "PlayerId"
            case playerSessionId = "PlayerSessionId"
        }
    }

    public struct Player: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LatencyInMs", required: false, type: .map), 
            AWSShapeMember(label: "PlayerAttributes", required: false, type: .map), 
            AWSShapeMember(label: "PlayerId", required: false, type: .string), 
            AWSShapeMember(label: "Team", required: false, type: .string)
        ]

        /// Set of values, expressed in milliseconds, indicating the amount of latency that a player experiences when connected to AWS regions. If this property is present, FlexMatch considers placing the match only in regions for which latency is reported.  If a matchmaker has a rule that evaluates player latency, players must report latency in order to be matched. If no latency is reported in this scenario, FlexMatch assumes that no regions are available to the player and the ticket is not matchable. 
        public let latencyInMs: [String: Int]?
        /// Collection of key:value pairs containing player information for use in matchmaking. Player attribute keys must match the playerAttributes used in a matchmaking rule set. Example: "PlayerAttributes": {"skill": {"N": "23"}, "gameMode": {"S": "deathmatch"}}.
        public let playerAttributes: [String: AttributeValue]?
        /// Unique identifier for a player
        public let playerId: String?
        /// Name of the team that the player is assigned to in a match. Team names are defined in a matchmaking rule set.
        public let team: String?

        public init(latencyInMs: [String: Int]? = nil, playerAttributes: [String: AttributeValue]? = nil, playerId: String? = nil, team: String? = nil) {
            self.latencyInMs = latencyInMs
            self.playerAttributes = playerAttributes
            self.playerId = playerId
            self.team = team
        }

        public func validate(name: String) throws {
            try self.latencyInMs?.forEach {
                try validate($0.key, name:"latencyInMs.key", parent: name, min: 1)
                try validate($0.value, name:"latencyInMs[\"\($0.key)\"]", parent: name, min: 1)
            }
            try self.playerAttributes?.forEach {
                try validate($0.key, name:"playerAttributes.key", parent: name, max: 1024)
                try validate($0.key, name:"playerAttributes.key", parent: name, min: 1)
                try $0.value.validate(name: "\(name).playerAttributes[\"\($0.key)\"]")
            }
            try validate(self.playerId, name:"playerId", parent: name, max: 1024)
            try validate(self.playerId, name:"playerId", parent: name, min: 1)
            try validate(self.team, name:"team", parent: name, max: 1024)
            try validate(self.team, name:"team", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case latencyInMs = "LatencyInMs"
            case playerAttributes = "PlayerAttributes"
            case playerId = "PlayerId"
            case team = "Team"
        }
    }

    public struct PlayerLatency: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LatencyInMilliseconds", required: false, type: .float), 
            AWSShapeMember(label: "PlayerId", required: false, type: .string), 
            AWSShapeMember(label: "RegionIdentifier", required: false, type: .string)
        ]

        /// Amount of time that represents the time lag experienced by the player when connected to the specified region.
        public let latencyInMilliseconds: Float?
        /// Unique identifier for a player associated with the latency data.
        public let playerId: String?
        /// Name of the region that is associated with the latency value.
        public let regionIdentifier: String?

        public init(latencyInMilliseconds: Float? = nil, playerId: String? = nil, regionIdentifier: String? = nil) {
            self.latencyInMilliseconds = latencyInMilliseconds
            self.playerId = playerId
            self.regionIdentifier = regionIdentifier
        }

        public func validate(name: String) throws {
            try validate(self.playerId, name:"playerId", parent: name, max: 1024)
            try validate(self.playerId, name:"playerId", parent: name, min: 1)
            try validate(self.regionIdentifier, name:"regionIdentifier", parent: name, max: 1024)
            try validate(self.regionIdentifier, name:"regionIdentifier", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case latencyInMilliseconds = "LatencyInMilliseconds"
            case playerId = "PlayerId"
            case regionIdentifier = "RegionIdentifier"
        }
    }

    public struct PlayerLatencyPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaximumIndividualPlayerLatencyMilliseconds", required: false, type: .integer), 
            AWSShapeMember(label: "PolicyDurationSeconds", required: false, type: .integer)
        ]

        /// The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.
        public let maximumIndividualPlayerLatencyMilliseconds: Int?
        /// The length of time, in seconds, that the policy is enforced while placing a new game session. A null value for this property means that the policy is enforced until the queue times out.
        public let policyDurationSeconds: Int?

        public init(maximumIndividualPlayerLatencyMilliseconds: Int? = nil, policyDurationSeconds: Int? = nil) {
            self.maximumIndividualPlayerLatencyMilliseconds = maximumIndividualPlayerLatencyMilliseconds
            self.policyDurationSeconds = policyDurationSeconds
        }

        public func validate(name: String) throws {
            try validate(self.maximumIndividualPlayerLatencyMilliseconds, name:"maximumIndividualPlayerLatencyMilliseconds", parent: name, min: 0)
            try validate(self.policyDurationSeconds, name:"policyDurationSeconds", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case maximumIndividualPlayerLatencyMilliseconds = "MaximumIndividualPlayerLatencyMilliseconds"
            case policyDurationSeconds = "PolicyDurationSeconds"
        }
    }

    public struct PlayerSession: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DnsName", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "PlayerData", required: false, type: .string), 
            AWSShapeMember(label: "PlayerId", required: false, type: .string), 
            AWSShapeMember(label: "PlayerSessionId", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "TerminationTime", required: false, type: .timestamp)
        ]

        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        public let dnsName: String?
        /// Unique identifier for a fleet that the player's game session is running on.
        public let fleetId: String?
        /// Unique identifier for the game session that the player session is connected to.
        public let gameSessionId: String?
        /// IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
        public let ipAddress: String?
        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game. 
        public let playerData: String?
        /// Unique identifier for a player that is associated with this player session.
        public let playerId: String?
        /// Unique identifier for a player session.
        public let playerSessionId: String?
        /// Port number for the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.
        public let port: Int?
        /// Current status of the player session. Possible player session statuses include the following:    RESERVED -- The player session request has been received, but the player has not yet connected to the server process and/or been validated.     ACTIVE -- The player has been validated by the server process and is currently connected.    COMPLETED -- The player connection has been dropped.    TIMEDOUT -- A player session request was received, but the player did not connect and/or was not validated within the timeout limit (60 seconds).  
        public let status: PlayerSessionStatus?
        /// Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let terminationTime: TimeStamp?

        public init(creationTime: TimeStamp? = nil, dnsName: String? = nil, fleetId: String? = nil, gameSessionId: String? = nil, ipAddress: String? = nil, playerData: String? = nil, playerId: String? = nil, playerSessionId: String? = nil, port: Int? = nil, status: PlayerSessionStatus? = nil, terminationTime: TimeStamp? = nil) {
            self.creationTime = creationTime
            self.dnsName = dnsName
            self.fleetId = fleetId
            self.gameSessionId = gameSessionId
            self.ipAddress = ipAddress
            self.playerData = playerData
            self.playerId = playerId
            self.playerSessionId = playerSessionId
            self.port = port
            self.status = status
            self.terminationTime = terminationTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case dnsName = "DnsName"
            case fleetId = "FleetId"
            case gameSessionId = "GameSessionId"
            case ipAddress = "IpAddress"
            case playerData = "PlayerData"
            case playerId = "PlayerId"
            case playerSessionId = "PlayerSessionId"
            case port = "Port"
            case status = "Status"
            case terminationTime = "TerminationTime"
        }
    }

    public enum PlayerSessionCreationPolicy: String, CustomStringConvertible, Codable {
        case acceptAll = "ACCEPT_ALL"
        case denyAll = "DENY_ALL"
        public var description: String { return self.rawValue }
    }

    public enum PlayerSessionStatus: String, CustomStringConvertible, Codable {
        case reserved = "RESERVED"
        case active = "ACTIVE"
        case completed = "COMPLETED"
        case timedout = "TIMEDOUT"
        public var description: String { return self.rawValue }
    }

    public enum PolicyType: String, CustomStringConvertible, Codable {
        case rulebased = "RuleBased"
        case targetbased = "TargetBased"
        public var description: String { return self.rawValue }
    }

    public enum ProtectionPolicy: String, CustomStringConvertible, Codable {
        case noprotection = "NoProtection"
        case fullprotection = "FullProtection"
        public var description: String { return self.rawValue }
    }

    public struct PutScalingPolicyInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComparisonOperator", required: false, type: .enum), 
            AWSShapeMember(label: "EvaluationPeriods", required: false, type: .integer), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "MetricName", required: true, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "PolicyType", required: false, type: .enum), 
            AWSShapeMember(label: "ScalingAdjustment", required: false, type: .integer), 
            AWSShapeMember(label: "ScalingAdjustmentType", required: false, type: .enum), 
            AWSShapeMember(label: "TargetConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Threshold", required: false, type: .double)
        ]

        /// Comparison operator to use when measuring the metric against the threshold value.
        public let comparisonOperator: ComparisonOperatorType?
        /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
        public let evaluationPeriods: Int?
        /// Unique identifier for a fleet to apply this policy to. The fleet cannot be in any of the following statuses: ERROR or DELETING.
        public let fleetId: String
        /// Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For detailed descriptions of fleet metrics, see Monitor Amazon GameLift with Amazon CloudWatch.     ActivatingGameSessions -- Game sessions in the process of being created.    ActiveGameSessions -- Game sessions that are currently running.    ActiveInstances -- Fleet instances that are currently running at least one game session.    AvailableGameSessions -- Additional game sessions that fleet could host simultaneously, given current capacity.    AvailablePlayerSessions -- Empty player slots in currently active game sessions. This includes game sessions that are not currently accepting players. Reserved player slots are not included.    CurrentPlayerSessions -- Player slots in active game sessions that are being used by a player or are reserved for a player.     IdleInstances -- Active instances that are currently hosting zero game sessions.     PercentAvailableGameSessions -- Unused percentage of the total number of game sessions that a fleet could host simultaneously, given current capacity. Use this metric for a target-based scaling policy.    PercentIdleInstances -- Percentage of the total number of active instances that are hosting zero game sessions.    QueueDepth -- Pending game session placement requests, in any queue, where the current fleet is the top-priority destination.    WaitTime -- Current wait time for pending game session placement requests, in any queue, where the current fleet is the top-priority destination.   
        public let metricName: MetricName
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique. A fleet can have only one scaling policy with the same name.
        public let name: String
        /// Type of scaling policy to create. For a target-based policy, set the parameter MetricName to 'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods, ScalingAdjustmentType, and ScalingAdjustment.
        public let policyType: PolicyType?
        /// Amount of adjustment to make, based on the scaling adjustment type.
        public let scalingAdjustment: Int?
        /// Type of adjustment to make to a fleet's instance count (see FleetCapacity):    ChangeInCapacity -- add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.    ExactCapacity -- set the instance count to the scaling adjustment value.    PercentChangeInCapacity -- increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down; for example, a value of "-10" scales the fleet down by 10%.  
        public let scalingAdjustmentType: ScalingAdjustmentType?
        /// Object that contains settings for a target-based scaling policy.
        public let targetConfiguration: TargetConfiguration?
        /// Metric value used to trigger a scaling event.
        public let threshold: Double?

        public init(comparisonOperator: ComparisonOperatorType? = nil, evaluationPeriods: Int? = nil, fleetId: String, metricName: MetricName, name: String, policyType: PolicyType? = nil, scalingAdjustment: Int? = nil, scalingAdjustmentType: ScalingAdjustmentType? = nil, targetConfiguration: TargetConfiguration? = nil, threshold: Double? = nil) {
            self.comparisonOperator = comparisonOperator
            self.evaluationPeriods = evaluationPeriods
            self.fleetId = fleetId
            self.metricName = metricName
            self.name = name
            self.policyType = policyType
            self.scalingAdjustment = scalingAdjustment
            self.scalingAdjustmentType = scalingAdjustmentType
            self.targetConfiguration = targetConfiguration
            self.threshold = threshold
        }

        public func validate(name: String) throws {
            try validate(self.evaluationPeriods, name:"evaluationPeriods", parent: name, min: 1)
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try validate(self.name, name:"name", parent: name, max: 1024)
            try validate(self.name, name:"name", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case comparisonOperator = "ComparisonOperator"
            case evaluationPeriods = "EvaluationPeriods"
            case fleetId = "FleetId"
            case metricName = "MetricName"
            case name = "Name"
            case policyType = "PolicyType"
            case scalingAdjustment = "ScalingAdjustment"
            case scalingAdjustmentType = "ScalingAdjustmentType"
            case targetConfiguration = "TargetConfiguration"
            case threshold = "Threshold"
        }
    }

    public struct PutScalingPolicyOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]

        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct RequestUploadCredentialsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BuildId", required: true, type: .string)
        ]

        /// Unique identifier for a build to get credentials for.
        public let buildId: String

        public init(buildId: String) {
            self.buildId = buildId
        }

        public func validate(name: String) throws {
            try validate(self.buildId, name:"buildId", parent: name, pattern: "^build-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
        }
    }

    public struct RequestUploadCredentialsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageLocation", required: false, type: .structure), 
            AWSShapeMember(label: "UploadCredentials", required: false, type: .structure)
        ]

        /// Amazon S3 path and key, identifying where the game build files are stored.
        public let storageLocation: S3Location?
        /// AWS credentials required when uploading a game build to the storage location. These credentials have a limited lifespan and are valid only for the build they were issued for.
        public let uploadCredentials: AwsCredentials?

        public init(storageLocation: S3Location? = nil, uploadCredentials: AwsCredentials? = nil) {
            self.storageLocation = storageLocation
            self.uploadCredentials = uploadCredentials
        }

        private enum CodingKeys: String, CodingKey {
            case storageLocation = "StorageLocation"
            case uploadCredentials = "UploadCredentials"
        }
    }

    public struct ResolveAliasInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasId", required: true, type: .string)
        ]

        /// Unique identifier for the alias you want to resolve.
        public let aliasId: String

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

        public func validate(name: String) throws {
            try validate(self.aliasId, name:"aliasId", parent: name, pattern: "^alias-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
        }
    }

    public struct ResolveAliasOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: false, type: .string)
        ]

        /// Fleet identifier that is associated with the requested alias.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct ResourceCreationLimitPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NewGameSessionsPerCreator", required: false, type: .integer), 
            AWSShapeMember(label: "PolicyPeriodInMinutes", required: false, type: .integer)
        ]

        /// Maximum number of game sessions that an individual can create during the policy period. 
        public let newGameSessionsPerCreator: Int?
        /// Time span used in evaluating the resource creation limit policy. 
        public let policyPeriodInMinutes: Int?

        public init(newGameSessionsPerCreator: Int? = nil, policyPeriodInMinutes: Int? = nil) {
            self.newGameSessionsPerCreator = newGameSessionsPerCreator
            self.policyPeriodInMinutes = policyPeriodInMinutes
        }

        public func validate(name: String) throws {
            try validate(self.newGameSessionsPerCreator, name:"newGameSessionsPerCreator", parent: name, min: 0)
            try validate(self.policyPeriodInMinutes, name:"policyPeriodInMinutes", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case newGameSessionsPerCreator = "NewGameSessionsPerCreator"
            case policyPeriodInMinutes = "PolicyPeriodInMinutes"
        }
    }

    public struct RoutingStrategy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]

        /// Unique identifier for a fleet that the alias points to.
        public let fleetId: String?
        /// Message text to be used with a terminal routing strategy.
        public let message: String?
        /// Type of routing strategy. Possible routing types include the following:    SIMPLE -- The alias resolves to one specific fleet. Use this type when routing to active fleets.    TERMINAL -- The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the RoutingStrategy message embedded.  
        public let `type`: RoutingStrategyType?

        public init(fleetId: String? = nil, message: String? = nil, type: RoutingStrategyType? = nil) {
            self.fleetId = fleetId
            self.message = message
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case message = "Message"
            case `type` = "Type"
        }
    }

    public enum RoutingStrategyType: String, CustomStringConvertible, Codable {
        case simple = "SIMPLE"
        case terminal = "TERMINAL"
        public var description: String { return self.rawValue }
    }

    public struct RuntimeConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionActivationTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "MaxConcurrentGameSessionActivations", required: false, type: .integer), 
            AWSShapeMember(label: "ServerProcesses", required: false, type: .list)
        ]

        /// Maximum amount of time (in seconds) that a game session can remain in status ACTIVATING. If the game session is not active before the timeout, activation is terminated and the game session status is changed to TERMINATED.
        public let gameSessionActivationTimeoutSeconds: Int?
        /// Maximum number of game sessions with status ACTIVATING to allow on an instance simultaneously. This setting limits the amount of instance resources that can be used for new game activations at any one time.
        public let maxConcurrentGameSessionActivations: Int?
        /// Collection of server process configurations that describe which server processes to run on each instance in a fleet.
        public let serverProcesses: [ServerProcess]?

        public init(gameSessionActivationTimeoutSeconds: Int? = nil, maxConcurrentGameSessionActivations: Int? = nil, serverProcesses: [ServerProcess]? = nil) {
            self.gameSessionActivationTimeoutSeconds = gameSessionActivationTimeoutSeconds
            self.maxConcurrentGameSessionActivations = maxConcurrentGameSessionActivations
            self.serverProcesses = serverProcesses
        }

        public func validate(name: String) throws {
            try validate(self.gameSessionActivationTimeoutSeconds, name:"gameSessionActivationTimeoutSeconds", parent: name, max: 600)
            try validate(self.gameSessionActivationTimeoutSeconds, name:"gameSessionActivationTimeoutSeconds", parent: name, min: 1)
            try validate(self.maxConcurrentGameSessionActivations, name:"maxConcurrentGameSessionActivations", parent: name, max: 2147483647)
            try validate(self.maxConcurrentGameSessionActivations, name:"maxConcurrentGameSessionActivations", parent: name, min: 1)
            try self.serverProcesses?.forEach {
                try $0.validate(name: "\(name).serverProcesses[]")
            }
            try validate(self.serverProcesses, name:"serverProcesses", parent: name, max: 50)
            try validate(self.serverProcesses, name:"serverProcesses", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionActivationTimeoutSeconds = "GameSessionActivationTimeoutSeconds"
            case maxConcurrentGameSessionActivations = "MaxConcurrentGameSessionActivations"
            case serverProcesses = "ServerProcesses"
        }
    }

    public struct S3Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "ObjectVersion", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string)
        ]

        /// Amazon S3 bucket identifier. This is the name of the S3 bucket.
        public let bucket: String?
        /// Name of the zip file containing the build files or script files. 
        public let key: String?
        /// Version of the file, if object versioning is turned on for the bucket. Amazon GameLift uses this information when retrieving files from an S3 bucket that you own. Use this parameter to specify a specific version of the file; if not set, the latest version of the file is retrieved. 
        public let objectVersion: String?
        /// Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access the S3 bucket.
        public let roleArn: String?

        public init(bucket: String? = nil, key: String? = nil, objectVersion: String? = nil, roleArn: String? = nil) {
            self.bucket = bucket
            self.key = key
            self.objectVersion = objectVersion
            self.roleArn = roleArn
        }

        public func validate(name: String) throws {
            try validate(self.bucket, name:"bucket", parent: name, min: 1)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.objectVersion, name:"objectVersion", parent: name, min: 1)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
            case objectVersion = "ObjectVersion"
            case roleArn = "RoleArn"
        }
    }

    public enum ScalingAdjustmentType: String, CustomStringConvertible, Codable {
        case changeincapacity = "ChangeInCapacity"
        case exactcapacity = "ExactCapacity"
        case percentchangeincapacity = "PercentChangeInCapacity"
        public var description: String { return self.rawValue }
    }

    public struct ScalingPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComparisonOperator", required: false, type: .enum), 
            AWSShapeMember(label: "EvaluationPeriods", required: false, type: .integer), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "MetricName", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "PolicyType", required: false, type: .enum), 
            AWSShapeMember(label: "ScalingAdjustment", required: false, type: .integer), 
            AWSShapeMember(label: "ScalingAdjustmentType", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "TargetConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Threshold", required: false, type: .double)
        ]

        /// Comparison operator to use when measuring a metric against the threshold value.
        public let comparisonOperator: ComparisonOperatorType?
        /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
        public let evaluationPeriods: Int?
        /// Unique identifier for a fleet that is associated with this scaling policy.
        public let fleetId: String?
        /// Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For detailed descriptions of fleet metrics, see Monitor Amazon GameLift with Amazon CloudWatch.     ActivatingGameSessions -- Game sessions in the process of being created.    ActiveGameSessions -- Game sessions that are currently running.    ActiveInstances -- Fleet instances that are currently running at least one game session.    AvailableGameSessions -- Additional game sessions that fleet could host simultaneously, given current capacity.    AvailablePlayerSessions -- Empty player slots in currently active game sessions. This includes game sessions that are not currently accepting players. Reserved player slots are not included.    CurrentPlayerSessions -- Player slots in active game sessions that are being used by a player or are reserved for a player.     IdleInstances -- Active instances that are currently hosting zero game sessions.     PercentAvailableGameSessions -- Unused percentage of the total number of game sessions that a fleet could host simultaneously, given current capacity. Use this metric for a target-based scaling policy.    PercentIdleInstances -- Percentage of the total number of active instances that are hosting zero game sessions.    QueueDepth -- Pending game session placement requests, in any queue, where the current fleet is the top-priority destination.    WaitTime -- Current wait time for pending game session placement requests, in any queue, where the current fleet is the top-priority destination.   
        public let metricName: MetricName?
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
        public let name: String?
        /// Type of scaling policy to create. For a target-based policy, set the parameter MetricName to 'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods, ScalingAdjustmentType, and ScalingAdjustment.
        public let policyType: PolicyType?
        /// Amount of adjustment to make, based on the scaling adjustment type.
        public let scalingAdjustment: Int?
        /// Type of adjustment to make to a fleet's instance count (see FleetCapacity):    ChangeInCapacity -- add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.    ExactCapacity -- set the instance count to the scaling adjustment value.    PercentChangeInCapacity -- increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down.  
        public let scalingAdjustmentType: ScalingAdjustmentType?
        /// Current status of the scaling policy. The scaling policy can be in force only when in an ACTIVE status. Scaling policies can be suspended for individual fleets (see StopFleetActions; if suspended for a fleet, the policy status does not change. View a fleet's stopped actions by calling DescribeFleetCapacity.    ACTIVE -- The scaling policy can be used for auto-scaling a fleet.    UPDATE_REQUESTED -- A request to update the scaling policy has been received.    UPDATING -- A change is being made to the scaling policy.    DELETE_REQUESTED -- A request to delete the scaling policy has been received.    DELETING -- The scaling policy is being deleted.    DELETED -- The scaling policy has been deleted.    ERROR -- An error occurred in creating the policy. It should be removed and recreated.  
        public let status: ScalingStatusType?
        /// Object that contains settings for a target-based scaling policy.
        public let targetConfiguration: TargetConfiguration?
        /// Metric value used to trigger a scaling event.
        public let threshold: Double?

        public init(comparisonOperator: ComparisonOperatorType? = nil, evaluationPeriods: Int? = nil, fleetId: String? = nil, metricName: MetricName? = nil, name: String? = nil, policyType: PolicyType? = nil, scalingAdjustment: Int? = nil, scalingAdjustmentType: ScalingAdjustmentType? = nil, status: ScalingStatusType? = nil, targetConfiguration: TargetConfiguration? = nil, threshold: Double? = nil) {
            self.comparisonOperator = comparisonOperator
            self.evaluationPeriods = evaluationPeriods
            self.fleetId = fleetId
            self.metricName = metricName
            self.name = name
            self.policyType = policyType
            self.scalingAdjustment = scalingAdjustment
            self.scalingAdjustmentType = scalingAdjustmentType
            self.status = status
            self.targetConfiguration = targetConfiguration
            self.threshold = threshold
        }

        private enum CodingKeys: String, CodingKey {
            case comparisonOperator = "ComparisonOperator"
            case evaluationPeriods = "EvaluationPeriods"
            case fleetId = "FleetId"
            case metricName = "MetricName"
            case name = "Name"
            case policyType = "PolicyType"
            case scalingAdjustment = "ScalingAdjustment"
            case scalingAdjustmentType = "ScalingAdjustmentType"
            case status = "Status"
            case targetConfiguration = "TargetConfiguration"
            case threshold = "Threshold"
        }
    }

    public enum ScalingStatusType: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case updateRequested = "UPDATE_REQUESTED"
        case updating = "UPDATING"
        case deleteRequested = "DELETE_REQUESTED"
        case deleting = "DELETING"
        case deleted = "DELETED"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public struct Script: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ScriptId", required: false, type: .string), 
            AWSShapeMember(label: "SizeOnDisk", required: false, type: .long), 
            AWSShapeMember(label: "StorageLocation", required: false, type: .structure), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]

        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// Descriptive label that is associated with a script. Script names do not need to be unique.
        public let name: String?
        /// Unique identifier for a Realtime script
        public let scriptId: String?
        /// File size of the uploaded Realtime script, expressed in bytes. When files are uploaded from an S3 location, this value remains at "0".
        public let sizeOnDisk: Int64?
        public let storageLocation: S3Location?
        /// Version that is associated with a build or script. Version strings do not need to be unique.
        public let version: String?

        public init(creationTime: TimeStamp? = nil, name: String? = nil, scriptId: String? = nil, sizeOnDisk: Int64? = nil, storageLocation: S3Location? = nil, version: String? = nil) {
            self.creationTime = creationTime
            self.name = name
            self.scriptId = scriptId
            self.sizeOnDisk = sizeOnDisk
            self.storageLocation = storageLocation
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case name = "Name"
            case scriptId = "ScriptId"
            case sizeOnDisk = "SizeOnDisk"
            case storageLocation = "StorageLocation"
            case version = "Version"
        }
    }

    public struct SearchGameSessionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasId", required: false, type: .string), 
            AWSShapeMember(label: "FilterExpression", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SortExpression", required: false, type: .string)
        ]

        /// Unique identifier for an alias associated with the fleet to search for active game sessions. Each request must reference either a fleet ID or alias ID, but not both.
        public let aliasId: String?
        /// String containing the search criteria for the session search. If no filter expression is included, the request returns results for all game sessions in the fleet that are in ACTIVE status. A filter expression can contain one or multiple conditions. Each condition consists of the following:    Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, gameSessionProperties, maximumSessions, creationTimeMillis, playerSessionCount, hasAvailablePlayerSessions.    Comparator -- Valid comparators are: =, &lt;&gt;, &lt;, &gt;, &lt;=, &gt;=.     Value -- Value to be searched for. Values may be numbers, boolean values (true/false) or strings depending on the operand. String values are case sensitive and must be enclosed in single quotes. Special characters must be escaped. Boolean and string values can only be used with the comparators = and &lt;&gt;. For example, the following filter expression searches on gameSessionName: "FilterExpression": "gameSessionName = 'Matt\\'s Awesome Game 1'".    To chain multiple conditions in a single expression, use the logical keywords AND, OR, and NOT and parentheses as needed. For example: x AND y AND NOT z, NOT (x OR y). Session search evaluates conditions from left to right using the following precedence rules:    =, &lt;&gt;, &lt;, &gt;, &lt;=, &gt;=    Parentheses   NOT   AND   OR   For example, this filter expression retrieves game sessions hosting at least ten players that have an open player slot: "maximumSessions&gt;=10 AND hasAvailablePlayerSessions=true". 
        public let filterExpression: String?
        /// Unique identifier for a fleet to search for active game sessions. Each request must reference either a fleet ID or alias ID, but not both.
        public let fleetId: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. The maximum number of results returned is 20, even if this value is not set or is set higher than 20. 
        public let limit: Int?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Instructions on how to sort the search results. If no sort expression is included, the request returns results in random order. A sort expression consists of the following elements:    Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, gameSessionProperties, maximumSessions, creationTimeMillis, playerSessionCount, hasAvailablePlayerSessions.    Order -- Valid sort orders are ASC (ascending) and DESC (descending).   For example, this sort expression returns the oldest active sessions first: "SortExpression": "creationTimeMillis ASC". Results with a null value for the sort operand are returned at the end of the list.
        public let sortExpression: String?

        public init(aliasId: String? = nil, filterExpression: String? = nil, fleetId: String? = nil, limit: Int? = nil, nextToken: String? = nil, sortExpression: String? = nil) {
            self.aliasId = aliasId
            self.filterExpression = filterExpression
            self.fleetId = fleetId
            self.limit = limit
            self.nextToken = nextToken
            self.sortExpression = sortExpression
        }

        public func validate(name: String) throws {
            try validate(self.aliasId, name:"aliasId", parent: name, pattern: "^alias-\\S+")
            try validate(self.filterExpression, name:"filterExpression", parent: name, max: 1024)
            try validate(self.filterExpression, name:"filterExpression", parent: name, min: 1)
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try validate(self.limit, name:"limit", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
            try validate(self.sortExpression, name:"sortExpression", parent: name, max: 1024)
            try validate(self.sortExpression, name:"sortExpression", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
            case filterExpression = "FilterExpression"
            case fleetId = "FleetId"
            case limit = "Limit"
            case nextToken = "NextToken"
            case sortExpression = "SortExpression"
        }
    }

    public struct SearchGameSessionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Collection of objects containing game session properties for each session matching the request.
        public let gameSessions: [GameSession]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessions: [GameSession]? = nil, nextToken: String? = nil) {
            self.gameSessions = gameSessions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessions = "GameSessions"
            case nextToken = "NextToken"
        }
    }

    public struct ServerProcess: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConcurrentExecutions", required: true, type: .integer), 
            AWSShapeMember(label: "LaunchPath", required: true, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .string)
        ]

        /// Number of server processes using this configuration to run concurrently on an instance.
        public let concurrentExecutions: Int
        /// Location of the server executable in a custom game build or the name of the Realtime script file that contains the Init() function. Game builds and Realtime scripts are installed on instances at the root:    Windows (for custom game builds only): C:\game. Example: "C:\game\MyGame\server.exe"    Linux: /local/game. Examples: "/local/game/MyGame/server.exe" or "/local/game/MyRealtimeScript.js"  
        public let launchPath: String
        /// Optional list of parameters to pass to the server executable or Realtime script on launch.
        public let parameters: String?

        public init(concurrentExecutions: Int, launchPath: String, parameters: String? = nil) {
            self.concurrentExecutions = concurrentExecutions
            self.launchPath = launchPath
            self.parameters = parameters
        }

        public func validate(name: String) throws {
            try validate(self.concurrentExecutions, name:"concurrentExecutions", parent: name, min: 1)
            try validate(self.launchPath, name:"launchPath", parent: name, max: 1024)
            try validate(self.launchPath, name:"launchPath", parent: name, min: 1)
            try validate(self.parameters, name:"parameters", parent: name, max: 1024)
            try validate(self.parameters, name:"parameters", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case concurrentExecutions = "ConcurrentExecutions"
            case launchPath = "LaunchPath"
            case parameters = "Parameters"
        }
    }

    public struct StartFleetActionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Actions", required: true, type: .list), 
            AWSShapeMember(label: "FleetId", required: true, type: .string)
        ]

        /// List of actions to restart on the fleet.
        public let actions: [FleetAction]
        /// Unique identifier for a fleet
        public let fleetId: String

        public init(actions: [FleetAction], fleetId: String) {
            self.actions = actions
            self.fleetId = fleetId
        }

        public func validate(name: String) throws {
            try validate(self.actions, name:"actions", parent: name, max: 1)
            try validate(self.actions, name:"actions", parent: name, min: 1)
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "Actions"
            case fleetId = "FleetId"
        }
    }

    public struct StartFleetActionsOutput: AWSShape {


        public init() {
        }

    }

    public struct StartGameSessionPlacementInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DesiredPlayerSessions", required: false, type: .list), 
            AWSShapeMember(label: "GameProperties", required: false, type: .list), 
            AWSShapeMember(label: "GameSessionData", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionName", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionQueueName", required: true, type: .string), 
            AWSShapeMember(label: "MaximumPlayerSessionCount", required: true, type: .integer), 
            AWSShapeMember(label: "PlacementId", required: true, type: .string), 
            AWSShapeMember(label: "PlayerLatencies", required: false, type: .list)
        ]

        /// Set of information on each player to create a player session for.
        public let desiredPlayerSessions: [DesiredPlayerSession]?
        /// Set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session).
        public let gameProperties: [GameProperty]?
        /// Set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session).
        public let gameSessionData: String?
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let gameSessionName: String?
        /// Name of the queue to use to place the new game session.
        public let gameSessionQueueName: String
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int
        /// Unique identifier to assign to the new game session placement. This value is developer-defined. The value must be unique across all regions and cannot be reused unless you are resubmitting a canceled or timed-out placement request.
        public let placementId: String
        /// Set of values, expressed in milliseconds, indicating the amount of latency that a player experiences when connected to AWS regions. This information is used to try to place the new game session where it can offer the best possible gameplay experience for the players. 
        public let playerLatencies: [PlayerLatency]?

        public init(desiredPlayerSessions: [DesiredPlayerSession]? = nil, gameProperties: [GameProperty]? = nil, gameSessionData: String? = nil, gameSessionName: String? = nil, gameSessionQueueName: String, maximumPlayerSessionCount: Int, placementId: String, playerLatencies: [PlayerLatency]? = nil) {
            self.desiredPlayerSessions = desiredPlayerSessions
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionName = gameSessionName
            self.gameSessionQueueName = gameSessionQueueName
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.placementId = placementId
            self.playerLatencies = playerLatencies
        }

        public func validate(name: String) throws {
            try self.desiredPlayerSessions?.forEach {
                try $0.validate(name: "\(name).desiredPlayerSessions[]")
            }
            try self.gameProperties?.forEach {
                try $0.validate(name: "\(name).gameProperties[]")
            }
            try validate(self.gameProperties, name:"gameProperties", parent: name, max: 16)
            try validate(self.gameSessionData, name:"gameSessionData", parent: name, max: 4096)
            try validate(self.gameSessionData, name:"gameSessionData", parent: name, min: 1)
            try validate(self.gameSessionName, name:"gameSessionName", parent: name, max: 1024)
            try validate(self.gameSessionName, name:"gameSessionName", parent: name, min: 1)
            try validate(self.gameSessionQueueName, name:"gameSessionQueueName", parent: name, max: 128)
            try validate(self.gameSessionQueueName, name:"gameSessionQueueName", parent: name, min: 1)
            try validate(self.gameSessionQueueName, name:"gameSessionQueueName", parent: name, pattern: "[a-zA-Z0-9-]+")
            try validate(self.maximumPlayerSessionCount, name:"maximumPlayerSessionCount", parent: name, min: 0)
            try validate(self.placementId, name:"placementId", parent: name, max: 48)
            try validate(self.placementId, name:"placementId", parent: name, min: 1)
            try validate(self.placementId, name:"placementId", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.playerLatencies?.forEach {
                try $0.validate(name: "\(name).playerLatencies[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case desiredPlayerSessions = "DesiredPlayerSessions"
            case gameProperties = "GameProperties"
            case gameSessionData = "GameSessionData"
            case gameSessionName = "GameSessionName"
            case gameSessionQueueName = "GameSessionQueueName"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
            case placementId = "PlacementId"
            case playerLatencies = "PlayerLatencies"
        }
    }

    public struct StartGameSessionPlacementOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionPlacement", required: false, type: .structure)
        ]

        /// Object that describes the newly created game session placement. This object includes all the information provided in the request, as well as start/end time stamps and placement status. 
        public let gameSessionPlacement: GameSessionPlacement?

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionPlacement = "GameSessionPlacement"
        }
    }

    public struct StartMatchBackfillInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfigurationName", required: true, type: .string), 
            AWSShapeMember(label: "GameSessionArn", required: true, type: .string), 
            AWSShapeMember(label: "Players", required: true, type: .list), 
            AWSShapeMember(label: "TicketId", required: false, type: .string)
        ]

        /// Name of the matchmaker to use for this request. The name of the matchmaker that was used with the original game session is listed in the GameSession object, MatchmakerData property. This property contains a matchmaking configuration ARN value, which includes the matchmaker name. (In the ARN value "arn:aws:gamelift:us-west-2:111122223333:matchmakingconfiguration/MM-4v4", the matchmaking configuration name is "MM-4v4".) Use only the name for this parameter.
        public let configurationName: String
        /// Amazon Resource Name (ARN) that is assigned to a game session and uniquely identifies it. 
        public let gameSessionArn: String
        /// Match information on all players that are currently assigned to the game session. This information is used by the matchmaker to find new players and add them to the existing game.   PlayerID, PlayerAttributes, Team -\\- This information is maintained in the GameSession object, MatchmakerData property, for all players who are currently assigned to the game session. The matchmaker data is in JSON syntax, formatted as a string. For more details, see  Match Data.    LatencyInMs -\\- If the matchmaker uses player latency, include a latency value, in milliseconds, for the region that the game session is currently in. Do not include latency values for any other region.  
        public let players: [Player]
        /// Unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of a UUID. Use this identifier to track the match backfill ticket status and retrieve match results.
        public let ticketId: String?

        public init(configurationName: String, gameSessionArn: String, players: [Player], ticketId: String? = nil) {
            self.configurationName = configurationName
            self.gameSessionArn = gameSessionArn
            self.players = players
            self.ticketId = ticketId
        }

        public func validate(name: String) throws {
            try validate(self.configurationName, name:"configurationName", parent: name, max: 128)
            try validate(self.configurationName, name:"configurationName", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
            try validate(self.gameSessionArn, name:"gameSessionArn", parent: name, max: 256)
            try validate(self.gameSessionArn, name:"gameSessionArn", parent: name, min: 1)
            try validate(self.gameSessionArn, name:"gameSessionArn", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try self.players.forEach {
                try $0.validate(name: "\(name).players[]")
            }
            try validate(self.ticketId, name:"ticketId", parent: name, max: 128)
            try validate(self.ticketId, name:"ticketId", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case configurationName = "ConfigurationName"
            case gameSessionArn = "GameSessionArn"
            case players = "Players"
            case ticketId = "TicketId"
        }
    }

    public struct StartMatchBackfillOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MatchmakingTicket", required: false, type: .structure)
        ]

        /// Ticket representing the backfill matchmaking request. This object includes the information in the request, ticket status, and match results as generated during the matchmaking process.
        public let matchmakingTicket: MatchmakingTicket?

        public init(matchmakingTicket: MatchmakingTicket? = nil) {
            self.matchmakingTicket = matchmakingTicket
        }

        private enum CodingKeys: String, CodingKey {
            case matchmakingTicket = "MatchmakingTicket"
        }
    }

    public struct StartMatchmakingInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfigurationName", required: true, type: .string), 
            AWSShapeMember(label: "Players", required: true, type: .list), 
            AWSShapeMember(label: "TicketId", required: false, type: .string)
        ]

        /// Name of the matchmaking configuration to use for this request. Matchmaking configurations must exist in the same region as this request.
        public let configurationName: String
        /// Information on each player to be matched. This information must include a player ID, and may contain player attributes and latency data to be used in the matchmaking process. After a successful match, Player objects contain the name of the team the player is assigned to.
        public let players: [Player]
        /// Unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of a UUID. Use this identifier to track the matchmaking ticket status and retrieve match results.
        public let ticketId: String?

        public init(configurationName: String, players: [Player], ticketId: String? = nil) {
            self.configurationName = configurationName
            self.players = players
            self.ticketId = ticketId
        }

        public func validate(name: String) throws {
            try validate(self.configurationName, name:"configurationName", parent: name, max: 128)
            try validate(self.configurationName, name:"configurationName", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
            try self.players.forEach {
                try $0.validate(name: "\(name).players[]")
            }
            try validate(self.ticketId, name:"ticketId", parent: name, max: 128)
            try validate(self.ticketId, name:"ticketId", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case configurationName = "ConfigurationName"
            case players = "Players"
            case ticketId = "TicketId"
        }
    }

    public struct StartMatchmakingOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MatchmakingTicket", required: false, type: .structure)
        ]

        /// Ticket representing the matchmaking request. This object include the information included in the request, ticket status, and match results as generated during the matchmaking process.
        public let matchmakingTicket: MatchmakingTicket?

        public init(matchmakingTicket: MatchmakingTicket? = nil) {
            self.matchmakingTicket = matchmakingTicket
        }

        private enum CodingKeys: String, CodingKey {
            case matchmakingTicket = "MatchmakingTicket"
        }
    }

    public struct StopFleetActionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Actions", required: true, type: .list), 
            AWSShapeMember(label: "FleetId", required: true, type: .string)
        ]

        /// List of actions to suspend on the fleet. 
        public let actions: [FleetAction]
        /// Unique identifier for a fleet
        public let fleetId: String

        public init(actions: [FleetAction], fleetId: String) {
            self.actions = actions
            self.fleetId = fleetId
        }

        public func validate(name: String) throws {
            try validate(self.actions, name:"actions", parent: name, max: 1)
            try validate(self.actions, name:"actions", parent: name, min: 1)
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "Actions"
            case fleetId = "FleetId"
        }
    }

    public struct StopFleetActionsOutput: AWSShape {


        public init() {
        }

    }

    public struct StopGameSessionPlacementInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlacementId", required: true, type: .string)
        ]

        /// Unique identifier for a game session placement to cancel.
        public let placementId: String

        public init(placementId: String) {
            self.placementId = placementId
        }

        public func validate(name: String) throws {
            try validate(self.placementId, name:"placementId", parent: name, max: 48)
            try validate(self.placementId, name:"placementId", parent: name, min: 1)
            try validate(self.placementId, name:"placementId", parent: name, pattern: "[a-zA-Z0-9-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case placementId = "PlacementId"
        }
    }

    public struct StopGameSessionPlacementOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionPlacement", required: false, type: .structure)
        ]

        /// Object that describes the canceled game session placement, with CANCELLED status and an end time stamp. 
        public let gameSessionPlacement: GameSessionPlacement?

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionPlacement = "GameSessionPlacement"
        }
    }

    public struct StopMatchmakingInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TicketId", required: true, type: .string)
        ]

        /// Unique identifier for a matchmaking ticket.
        public let ticketId: String

        public init(ticketId: String) {
            self.ticketId = ticketId
        }

        public func validate(name: String) throws {
            try validate(self.ticketId, name:"ticketId", parent: name, max: 128)
            try validate(self.ticketId, name:"ticketId", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case ticketId = "TicketId"
        }
    }

    public struct StopMatchmakingOutput: AWSShape {


        public init() {
        }

    }

    public struct TargetConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetValue", required: true, type: .double)
        ]

        /// Desired value to use with a target-based scaling policy. The value must be relevant for whatever metric the scaling policy is using. For example, in a policy using the metric PercentAvailableGameSessions, the target value should be the preferred size of the fleet's buffer (the percent of capacity that should be idle and ready for new game sessions).
        public let targetValue: Double

        public init(targetValue: Double) {
            self.targetValue = targetValue
        }

        private enum CodingKeys: String, CodingKey {
            case targetValue = "TargetValue"
        }
    }

    public struct UpdateAliasInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "RoutingStrategy", required: false, type: .structure)
        ]

        /// Unique identifier for a fleet alias. Specify the alias you want to update.
        public let aliasId: String
        /// Human-readable description of an alias.
        public let description: String?
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String?
        /// Object that specifies the fleet and routing type to use for the alias.
        public let routingStrategy: RoutingStrategy?

        public init(aliasId: String, description: String? = nil, name: String? = nil, routingStrategy: RoutingStrategy? = nil) {
            self.aliasId = aliasId
            self.description = description
            self.name = name
            self.routingStrategy = routingStrategy
        }

        public func validate(name: String) throws {
            try validate(self.aliasId, name:"aliasId", parent: name, pattern: "^alias-\\S+")
            try validate(self.description, name:"description", parent: name, max: 1024)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, max: 1024)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: ".*\\S.*")
            try self.routingStrategy?.validate(name: "\(name).routingStrategy")
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
            case description = "Description"
            case name = "Name"
            case routingStrategy = "RoutingStrategy"
        }
    }

    public struct UpdateAliasOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alias", required: false, type: .structure)
        ]

        /// Object that contains the updated alias configuration.
        public let alias: Alias?

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

        private enum CodingKeys: String, CodingKey {
            case alias = "Alias"
        }
    }

    public struct UpdateBuildInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BuildId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]

        /// Unique identifier for a build to update.
        public let buildId: String
        /// Descriptive label that is associated with a build. Build names do not need to be unique. 
        public let name: String?
        /// Version that is associated with a build or script. Version strings do not need to be unique.
        public let version: String?

        public init(buildId: String, name: String? = nil, version: String? = nil) {
            self.buildId = buildId
            self.name = name
            self.version = version
        }

        public func validate(name: String) throws {
            try validate(self.buildId, name:"buildId", parent: name, pattern: "^build-\\S+")
            try validate(self.name, name:"name", parent: name, max: 1024)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.version, name:"version", parent: name, max: 1024)
            try validate(self.version, name:"version", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
            case name = "Name"
            case version = "Version"
        }
    }

    public struct UpdateBuildOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Build", required: false, type: .structure)
        ]

        /// Object that contains the updated build record.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case build = "Build"
        }
    }

    public struct UpdateFleetAttributesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "MetricGroups", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "NewGameSessionProtectionPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "ResourceCreationLimitPolicy", required: false, type: .structure)
        ]

        /// Human-readable description of a fleet.
        public let description: String?
        /// Unique identifier for a fleet to update attribute metadata for.
        public let fleetId: String
        /// Names of metric groups to include this fleet in. Amazon CloudWatch uses a fleet metric group is to aggregate metrics from multiple fleets. Use an existing metric group name to add this fleet to the group. Or use a new name to create a new metric group. A fleet can only be included in one metric group at a time.
        public let metricGroups: [String]?
        /// Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public let name: String?
        /// Game session protection policy to apply to all new instances created in this fleet. Instances that already exist are not affected. You can set protection for individual instances using UpdateGameSession.    NoProtection -- The game session can be terminated during a scale-down event.    FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let newGameSessionProtectionPolicy: ProtectionPolicy?
        /// Policy that limits the number of game sessions an individual player can create over a span of time. 
        public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?

        public init(description: String? = nil, fleetId: String, metricGroups: [String]? = nil, name: String? = nil, newGameSessionProtectionPolicy: ProtectionPolicy? = nil, resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil) {
            self.description = description
            self.fleetId = fleetId
            self.metricGroups = metricGroups
            self.name = name
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 1024)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try self.metricGroups?.forEach {
                try validate($0, name: "metricGroups[]", parent: name, max: 255)
                try validate($0, name: "metricGroups[]", parent: name, min: 1)
            }
            try validate(self.metricGroups, name:"metricGroups", parent: name, max: 1)
            try validate(self.name, name:"name", parent: name, max: 1024)
            try validate(self.name, name:"name", parent: name, min: 1)
            try self.resourceCreationLimitPolicy?.validate(name: "\(name).resourceCreationLimitPolicy")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case fleetId = "FleetId"
            case metricGroups = "MetricGroups"
            case name = "Name"
            case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
            case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
        }
    }

    public struct UpdateFleetAttributesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: false, type: .string)
        ]

        /// Unique identifier for a fleet that was updated.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct UpdateFleetCapacityInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DesiredInstances", required: false, type: .integer), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "MaxSize", required: false, type: .integer), 
            AWSShapeMember(label: "MinSize", required: false, type: .integer)
        ]

        /// Number of EC2 instances you want this fleet to host.
        public let desiredInstances: Int?
        /// Unique identifier for a fleet to update capacity for.
        public let fleetId: String
        /// Maximum value allowed for the fleet's instance count. Default if not set is 1.
        public let maxSize: Int?
        /// Minimum value allowed for the fleet's instance count. Default if not set is 0.
        public let minSize: Int?

        public init(desiredInstances: Int? = nil, fleetId: String, maxSize: Int? = nil, minSize: Int? = nil) {
            self.desiredInstances = desiredInstances
            self.fleetId = fleetId
            self.maxSize = maxSize
            self.minSize = minSize
        }

        public func validate(name: String) throws {
            try validate(self.desiredInstances, name:"desiredInstances", parent: name, min: 0)
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try validate(self.maxSize, name:"maxSize", parent: name, min: 0)
            try validate(self.minSize, name:"minSize", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case desiredInstances = "DesiredInstances"
            case fleetId = "FleetId"
            case maxSize = "MaxSize"
            case minSize = "MinSize"
        }
    }

    public struct UpdateFleetCapacityOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: false, type: .string)
        ]

        /// Unique identifier for a fleet that was updated.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct UpdateFleetPortSettingsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "InboundPermissionAuthorizations", required: false, type: .list), 
            AWSShapeMember(label: "InboundPermissionRevocations", required: false, type: .list)
        ]

        /// Unique identifier for a fleet to update port settings for.
        public let fleetId: String
        /// Collection of port settings to be added to the fleet record.
        public let inboundPermissionAuthorizations: [IpPermission]?
        /// Collection of port settings to be removed from the fleet record.
        public let inboundPermissionRevocations: [IpPermission]?

        public init(fleetId: String, inboundPermissionAuthorizations: [IpPermission]? = nil, inboundPermissionRevocations: [IpPermission]? = nil) {
            self.fleetId = fleetId
            self.inboundPermissionAuthorizations = inboundPermissionAuthorizations
            self.inboundPermissionRevocations = inboundPermissionRevocations
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try self.inboundPermissionAuthorizations?.forEach {
                try $0.validate(name: "\(name).inboundPermissionAuthorizations[]")
            }
            try validate(self.inboundPermissionAuthorizations, name:"inboundPermissionAuthorizations", parent: name, max: 50)
            try self.inboundPermissionRevocations?.forEach {
                try $0.validate(name: "\(name).inboundPermissionRevocations[]")
            }
            try validate(self.inboundPermissionRevocations, name:"inboundPermissionRevocations", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case inboundPermissionAuthorizations = "InboundPermissionAuthorizations"
            case inboundPermissionRevocations = "InboundPermissionRevocations"
        }
    }

    public struct UpdateFleetPortSettingsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: false, type: .string)
        ]

        /// Unique identifier for a fleet that was updated.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct UpdateGameSessionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionId", required: true, type: .string), 
            AWSShapeMember(label: "MaximumPlayerSessionCount", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "PlayerSessionCreationPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "ProtectionPolicy", required: false, type: .enum)
        ]

        /// Unique identifier for the game session to update.
        public let gameSessionId: String
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int?
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let name: String?
        /// Policy determining whether or not the game session accepts new players.
        public let playerSessionCreationPolicy: PlayerSessionCreationPolicy?
        /// Game session protection policy to apply to this game session only.    NoProtection -- The game session can be terminated during a scale-down event.    FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let protectionPolicy: ProtectionPolicy?

        public init(gameSessionId: String, maximumPlayerSessionCount: Int? = nil, name: String? = nil, playerSessionCreationPolicy: PlayerSessionCreationPolicy? = nil, protectionPolicy: ProtectionPolicy? = nil) {
            self.gameSessionId = gameSessionId
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.name = name
            self.playerSessionCreationPolicy = playerSessionCreationPolicy
            self.protectionPolicy = protectionPolicy
        }

        public func validate(name: String) throws {
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, max: 256)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, min: 1)
            try validate(self.gameSessionId, name:"gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try validate(self.maximumPlayerSessionCount, name:"maximumPlayerSessionCount", parent: name, min: 0)
            try validate(self.name, name:"name", parent: name, max: 1024)
            try validate(self.name, name:"name", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionId = "GameSessionId"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
            case name = "Name"
            case playerSessionCreationPolicy = "PlayerSessionCreationPolicy"
            case protectionPolicy = "ProtectionPolicy"
        }
    }

    public struct UpdateGameSessionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSession", required: false, type: .structure)
        ]

        /// Object that contains the updated game session metadata.
        public let gameSession: GameSession?

        public init(gameSession: GameSession? = nil) {
            self.gameSession = gameSession
        }

        private enum CodingKeys: String, CodingKey {
            case gameSession = "GameSession"
        }
    }

    public struct UpdateGameSessionQueueInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destinations", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "PlayerLatencyPolicies", required: false, type: .list), 
            AWSShapeMember(label: "TimeoutInSeconds", required: false, type: .integer)
        ]

        /// List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order. When updating this list, provide a complete list of destinations.
        public let destinations: [GameSessionQueueDestination]?
        /// Descriptive label that is associated with game session queue. Queue names must be unique within each region.
        public let name: String
        /// Collection of latency policies to apply when processing game sessions placement requests with player latency information. Multiple policies are evaluated in order of the maximum latency value, starting with the lowest latency values. With just one policy, it is enforced at the start of the game session placement for the duration period. With multiple policies, each policy is enforced consecutively for its duration period. For example, a queue might enforce a 60-second policy followed by a 120-second policy, and then no policy for the remainder of the placement. When updating policies, provide a complete collection of policies.
        public let playerLatencyPolicies: [PlayerLatencyPolicy]?
        /// Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public let timeoutInSeconds: Int?

        public init(destinations: [GameSessionQueueDestination]? = nil, name: String, playerLatencyPolicies: [PlayerLatencyPolicy]? = nil, timeoutInSeconds: Int? = nil) {
            self.destinations = destinations
            self.name = name
            self.playerLatencyPolicies = playerLatencyPolicies
            self.timeoutInSeconds = timeoutInSeconds
        }

        public func validate(name: String) throws {
            try self.destinations?.forEach {
                try $0.validate(name: "\(name).destinations[]")
            }
            try validate(self.name, name:"name", parent: name, max: 128)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.playerLatencyPolicies?.forEach {
                try $0.validate(name: "\(name).playerLatencyPolicies[]")
            }
            try validate(self.timeoutInSeconds, name:"timeoutInSeconds", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case destinations = "Destinations"
            case name = "Name"
            case playerLatencyPolicies = "PlayerLatencyPolicies"
            case timeoutInSeconds = "TimeoutInSeconds"
        }
    }

    public struct UpdateGameSessionQueueOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionQueue", required: false, type: .structure)
        ]

        /// Object that describes the newly updated game session queue.
        public let gameSessionQueue: GameSessionQueue?

        public init(gameSessionQueue: GameSessionQueue? = nil) {
            self.gameSessionQueue = gameSessionQueue
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionQueue = "GameSessionQueue"
        }
    }

    public struct UpdateMatchmakingConfigurationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptanceRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "AcceptanceTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "AdditionalPlayerCount", required: false, type: .integer), 
            AWSShapeMember(label: "BackfillMode", required: false, type: .enum), 
            AWSShapeMember(label: "CustomEventData", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "GameProperties", required: false, type: .list), 
            AWSShapeMember(label: "GameSessionData", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionQueueArns", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "NotificationTarget", required: false, type: .string), 
            AWSShapeMember(label: "RequestTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "RuleSetName", required: false, type: .string)
        ]

        /// Flag that determines whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE.
        public let acceptanceRequired: Bool?
        /// Length of time (in seconds) to wait for players to accept a proposed match. If any player rejects the match or fails to accept before the timeout, the ticket continues to look for an acceptable match.
        public let acceptanceTimeoutSeconds: Int?
        /// Number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match.
        public let additionalPlayerCount: Int?
        /// Method used to backfill game sessions created with this matchmaking configuration. Specify MANUAL when your game manages backfill requests manually or does not use the match backfill feature. Specify AUTOMATIC to have GameLift create a StartMatchBackfill request whenever a game session has one or more open slots. Learn more about manual and automatic backfill in Backfill Existing Games with FlexMatch.
        public let backfillMode: BackfillMode?
        /// Information to add to all events related to the matchmaking configuration. 
        public let customEventData: String?
        /// Descriptive label that is associated with matchmaking configuration.
        public let description: String?
        /// Set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session). This information is added to the new GameSession object that is created for a successful match. 
        public let gameProperties: [GameProperty]?
        /// Set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the GameSession object with a request to start a new game session (see Start a Game Session). This information is added to the new GameSession object that is created for a successful match. 
        public let gameSessionData: String?
        /// Amazon Resource Name (ARN) that is assigned to a game session queue and uniquely identifies it. Format is arn:aws:gamelift:&lt;region&gt;:&lt;aws account&gt;:gamesessionqueue/&lt;queue name&gt;. These queues are used when placing game sessions for matches that are created with this matchmaking configuration. Queues can be located in any region.
        public let gameSessionQueueArns: [String]?
        /// Unique identifier for a matchmaking configuration to update.
        public let name: String
        /// SNS topic ARN that is set up to receive matchmaking notifications. See  Setting up Notifications for Matchmaking for more information.
        public let notificationTarget: String?
        /// Maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
        public let requestTimeoutSeconds: Int?
        /// Unique identifier for a matchmaking rule set to use with this configuration. A matchmaking configuration can only use rule sets that are defined in the same region.
        public let ruleSetName: String?

        public init(acceptanceRequired: Bool? = nil, acceptanceTimeoutSeconds: Int? = nil, additionalPlayerCount: Int? = nil, backfillMode: BackfillMode? = nil, customEventData: String? = nil, description: String? = nil, gameProperties: [GameProperty]? = nil, gameSessionData: String? = nil, gameSessionQueueArns: [String]? = nil, name: String, notificationTarget: String? = nil, requestTimeoutSeconds: Int? = nil, ruleSetName: String? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
            self.additionalPlayerCount = additionalPlayerCount
            self.backfillMode = backfillMode
            self.customEventData = customEventData
            self.description = description
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionQueueArns = gameSessionQueueArns
            self.name = name
            self.notificationTarget = notificationTarget
            self.requestTimeoutSeconds = requestTimeoutSeconds
            self.ruleSetName = ruleSetName
        }

        public func validate(name: String) throws {
            try validate(self.acceptanceTimeoutSeconds, name:"acceptanceTimeoutSeconds", parent: name, max: 600)
            try validate(self.acceptanceTimeoutSeconds, name:"acceptanceTimeoutSeconds", parent: name, min: 1)
            try validate(self.additionalPlayerCount, name:"additionalPlayerCount", parent: name, min: 0)
            try validate(self.customEventData, name:"customEventData", parent: name, max: 256)
            try validate(self.customEventData, name:"customEventData", parent: name, min: 0)
            try validate(self.description, name:"description", parent: name, max: 1024)
            try validate(self.description, name:"description", parent: name, min: 1)
            try self.gameProperties?.forEach {
                try $0.validate(name: "\(name).gameProperties[]")
            }
            try validate(self.gameProperties, name:"gameProperties", parent: name, max: 16)
            try validate(self.gameSessionData, name:"gameSessionData", parent: name, max: 4096)
            try validate(self.gameSessionData, name:"gameSessionData", parent: name, min: 1)
            try self.gameSessionQueueArns?.forEach {
                try validate($0, name: "gameSessionQueueArns[]", parent: name, max: 256)
                try validate($0, name: "gameSessionQueueArns[]", parent: name, min: 1)
                try validate($0, name: "gameSessionQueueArns[]", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            }
            try validate(self.name, name:"name", parent: name, max: 128)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
            try validate(self.notificationTarget, name:"notificationTarget", parent: name, max: 300)
            try validate(self.notificationTarget, name:"notificationTarget", parent: name, min: 0)
            try validate(self.notificationTarget, name:"notificationTarget", parent: name, pattern: "[a-zA-Z0-9:_/-]*")
            try validate(self.requestTimeoutSeconds, name:"requestTimeoutSeconds", parent: name, max: 43200)
            try validate(self.requestTimeoutSeconds, name:"requestTimeoutSeconds", parent: name, min: 1)
            try validate(self.ruleSetName, name:"ruleSetName", parent: name, max: 128)
            try validate(self.ruleSetName, name:"ruleSetName", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "AcceptanceRequired"
            case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
            case additionalPlayerCount = "AdditionalPlayerCount"
            case backfillMode = "BackfillMode"
            case customEventData = "CustomEventData"
            case description = "Description"
            case gameProperties = "GameProperties"
            case gameSessionData = "GameSessionData"
            case gameSessionQueueArns = "GameSessionQueueArns"
            case name = "Name"
            case notificationTarget = "NotificationTarget"
            case requestTimeoutSeconds = "RequestTimeoutSeconds"
            case ruleSetName = "RuleSetName"
        }
    }

    public struct UpdateMatchmakingConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configuration", required: false, type: .structure)
        ]

        /// Object that describes the updated matchmaking configuration.
        public let configuration: MatchmakingConfiguration?

        public init(configuration: MatchmakingConfiguration? = nil) {
            self.configuration = configuration
        }

        private enum CodingKeys: String, CodingKey {
            case configuration = "Configuration"
        }
    }

    public struct UpdateRuntimeConfigurationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "RuntimeConfiguration", required: true, type: .structure)
        ]

        /// Unique identifier for a fleet to update run-time configuration for.
        public let fleetId: String
        /// Instructions for launching server processes on each instance in the fleet. Server processes run either a custom game build executable or a Realtime Servers script. The run-time configuration lists the types of server processes to run on an instance and includes the following configuration settings: the server executable or launch script file, launch parameters, and the number of processes to run concurrently on each instance. A CreateFleet request must include a run-time configuration with at least one server process configuration.
        public let runtimeConfiguration: RuntimeConfiguration

        public init(fleetId: String, runtimeConfiguration: RuntimeConfiguration) {
            self.fleetId = fleetId
            self.runtimeConfiguration = runtimeConfiguration
        }

        public func validate(name: String) throws {
            try validate(self.fleetId, name:"fleetId", parent: name, pattern: "^fleet-\\S+")
            try self.runtimeConfiguration.validate(name: "\(name).runtimeConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case runtimeConfiguration = "RuntimeConfiguration"
        }
    }

    public struct UpdateRuntimeConfigurationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuntimeConfiguration", required: false, type: .structure)
        ]

        /// The run-time configuration currently in force. If the update was successful, this object matches the one in the request.
        public let runtimeConfiguration: RuntimeConfiguration?

        public init(runtimeConfiguration: RuntimeConfiguration? = nil) {
            self.runtimeConfiguration = runtimeConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case runtimeConfiguration = "RuntimeConfiguration"
        }
    }

    public struct UpdateScriptInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ScriptId", required: true, type: .string), 
            AWSShapeMember(label: "StorageLocation", required: false, type: .structure), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "ZipFile", required: false, type: .blob)
        ]

        /// Descriptive label that is associated with a script. Script names do not need to be unique.
        public let name: String?
        /// Unique identifier for a Realtime script to update.
        public let scriptId: String
        /// Location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version. 
        public let storageLocation: S3Location?
        /// Version that is associated with a build or script. Version strings do not need to be unique.
        public let version: String?
        /// Data object containing your Realtime scripts and dependencies as a zip file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB. When using the AWS CLI tool to create a script, this parameter is set to the zip file name. It must be prepended with the string "fileb://" to indicate that the file data is a binary object. For example: --zip-file fileb://myRealtimeScript.zip.
        public let zipFile: Data?

        public init(name: String? = nil, scriptId: String, storageLocation: S3Location? = nil, version: String? = nil, zipFile: Data? = nil) {
            self.name = name
            self.scriptId = scriptId
            self.storageLocation = storageLocation
            self.version = version
            self.zipFile = zipFile
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 1024)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.scriptId, name:"scriptId", parent: name, pattern: "^script-\\S+|^arn:.*script-\\S+")
            try self.storageLocation?.validate(name: "\(name).storageLocation")
            try validate(self.version, name:"version", parent: name, max: 1024)
            try validate(self.version, name:"version", parent: name, min: 1)
            try validate(self.zipFile, name:"zipFile", parent: name, max: 5000000)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case scriptId = "ScriptId"
            case storageLocation = "StorageLocation"
            case version = "Version"
            case zipFile = "ZipFile"
        }
    }

    public struct UpdateScriptOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Script", required: false, type: .structure)
        ]

        /// The newly created script record with a unique script ID. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the CreateScript request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.
        public let script: Script?

        public init(script: Script? = nil) {
            self.script = script
        }

        private enum CodingKeys: String, CodingKey {
            case script = "Script"
        }
    }

    public struct ValidateMatchmakingRuleSetInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuleSetBody", required: true, type: .string)
        ]

        /// Collection of matchmaking rules to validate, formatted as a JSON string.
        public let ruleSetBody: String

        public init(ruleSetBody: String) {
            self.ruleSetBody = ruleSetBody
        }

        public func validate(name: String) throws {
            try validate(self.ruleSetBody, name:"ruleSetBody", parent: name, max: 65535)
            try validate(self.ruleSetBody, name:"ruleSetBody", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case ruleSetBody = "RuleSetBody"
        }
    }

    public struct ValidateMatchmakingRuleSetOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Valid", required: false, type: .boolean)
        ]

        /// Response indicating whether the rule set is valid.
        public let valid: Bool?

        public init(valid: Bool? = nil) {
            self.valid = valid
        }

        private enum CodingKeys: String, CodingKey {
            case valid = "Valid"
        }
    }

    public struct VpcPeeringAuthorization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ExpirationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "GameLiftAwsAccountId", required: false, type: .string), 
            AWSShapeMember(label: "PeerVpcAwsAccountId", required: false, type: .string), 
            AWSShapeMember(label: "PeerVpcId", required: false, type: .string)
        ]

        /// Time stamp indicating when this authorization was issued. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// Time stamp indicating when this authorization expires (24 hours after issuance). Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let expirationTime: TimeStamp?
        /// Unique identifier for the AWS account that you use to manage your Amazon GameLift fleet. You can find your Account ID in the AWS Management Console under account settings.
        public let gameLiftAwsAccountId: String?
        public let peerVpcAwsAccountId: String?
        /// Unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same region where your fleet is deployed. Look up a VPC ID using the VPC Dashboard in the AWS Management Console. Learn more about VPC peering in VPC Peering with Amazon GameLift Fleets.
        public let peerVpcId: String?

        public init(creationTime: TimeStamp? = nil, expirationTime: TimeStamp? = nil, gameLiftAwsAccountId: String? = nil, peerVpcAwsAccountId: String? = nil, peerVpcId: String? = nil) {
            self.creationTime = creationTime
            self.expirationTime = expirationTime
            self.gameLiftAwsAccountId = gameLiftAwsAccountId
            self.peerVpcAwsAccountId = peerVpcAwsAccountId
            self.peerVpcId = peerVpcId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case expirationTime = "ExpirationTime"
            case gameLiftAwsAccountId = "GameLiftAwsAccountId"
            case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
            case peerVpcId = "PeerVpcId"
        }
    }

    public struct VpcPeeringConnection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "GameLiftVpcId", required: false, type: .string), 
            AWSShapeMember(label: "IpV4CidrBlock", required: false, type: .string), 
            AWSShapeMember(label: "PeerVpcId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .structure), 
            AWSShapeMember(label: "VpcPeeringConnectionId", required: false, type: .string)
        ]

        /// Unique identifier for a fleet. This ID determines the ID of the Amazon GameLift VPC for your fleet.
        public let fleetId: String?
        /// Unique identifier for the VPC that contains the Amazon GameLift fleet for this connection. This VPC is managed by Amazon GameLift and does not appear in your AWS account. 
        public let gameLiftVpcId: String?
        /// CIDR block of IPv4 addresses assigned to the VPC peering connection for the GameLift VPC. The peered VPC also has an IPv4 CIDR block associated with it; these blocks cannot overlap or the peering connection cannot be created. 
        public let ipV4CidrBlock: String?
        /// Unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same region where your fleet is deployed. Look up a VPC ID using the VPC Dashboard in the AWS Management Console. Learn more about VPC peering in VPC Peering with Amazon GameLift Fleets.
        public let peerVpcId: String?
        /// Object that contains status information about the connection. Status indicates if a connection is pending, successful, or failed.
        public let status: VpcPeeringConnectionStatus?
        /// Unique identifier that is automatically assigned to the connection record. This ID is referenced in VPC peering connection events, and is used when deleting a connection with DeleteVpcPeeringConnection. 
        public let vpcPeeringConnectionId: String?

        public init(fleetId: String? = nil, gameLiftVpcId: String? = nil, ipV4CidrBlock: String? = nil, peerVpcId: String? = nil, status: VpcPeeringConnectionStatus? = nil, vpcPeeringConnectionId: String? = nil) {
            self.fleetId = fleetId
            self.gameLiftVpcId = gameLiftVpcId
            self.ipV4CidrBlock = ipV4CidrBlock
            self.peerVpcId = peerVpcId
            self.status = status
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case gameLiftVpcId = "GameLiftVpcId"
            case ipV4CidrBlock = "IpV4CidrBlock"
            case peerVpcId = "PeerVpcId"
            case status = "Status"
            case vpcPeeringConnectionId = "VpcPeeringConnectionId"
        }
    }

    public struct VpcPeeringConnectionStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]

        /// Code indicating the status of a VPC peering connection.
        public let code: String?
        /// Additional messaging associated with the connection status. 
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }
}
