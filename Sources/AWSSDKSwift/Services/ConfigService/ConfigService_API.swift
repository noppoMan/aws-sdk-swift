//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

@_exported import AWSSDKSwiftCore
import Foundation
import NIO

/**
Client object for interacting with AWS ConfigService service.

AWS Config AWS Config provides a way to keep track of the configurations of all the AWS resources associated with your AWS account. You can use AWS Config to get the current and historical configurations of each AWS resource and also to get information about the relationship between the resources. An AWS resource can be an Amazon Compute Cloud (Amazon EC2) instance, an Elastic Block Store (EBS) volume, an elastic network Interface (ENI), or a security group. For a complete list of resources currently supported by AWS Config, see Supported AWS Resources. You can access and manage AWS Config through the AWS Management Console, the AWS Command Line Interface (AWS CLI), the AWS Config API, or the AWS SDKs for AWS Config. This reference guide contains documentation for the AWS Config API and the AWS CLI commands that you can use to manage AWS Config. The AWS Config API uses the Signature Version 4 protocol for signing requests. For more information about how to sign a request with this protocol, see Signature Version 4 Signing Process. For detailed information about AWS Config features and their associated actions or commands, as well as how to work with AWS Management Console, see What Is AWS Config in the AWS Config Developer Guide.
*/
public struct ConfigService {

    //MARK: Member variables

    public let client: AWSClient

    //MARK: Initialization

    /// Initialize the ConfigService client
    /// - parameters:
    ///     - accessKeyId: Public access key provided by AWS
    ///     - secretAccessKey: Private access key provided by AWS
    ///     - sessionToken: Token provided by STS.AssumeRole() which allows access to another AWS account
    ///     - region: Region of server you want to communicate with
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middlewares: Array of middlewares to apply to requests and responses
    ///     - httpClientProvider: HTTPClient to use. Use `useAWSClientShared` if the client shall manage its own HTTPClient.
    public init(
        accessKeyId: String? = nil,
        secretAccessKey: String? = nil,
        sessionToken: String? = nil,
        region: AWSSDKSwiftCore.Region? = nil,
        endpoint: String? = nil,
        middlewares: [AWSServiceMiddleware] = [],
        httpClientProvider: AWSClient.HTTPClientProvider
    ) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            sessionToken: sessionToken,
            region: region,
            amzTarget: "StarlingDoveService",
            service: "config",
            serviceProtocol: ServiceProtocol(type: .json, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2014-11-12",
            endpoint: endpoint,
            middlewares: middlewares,
            possibleErrorTypes: [ConfigServiceErrorType.self],
            httpClientProvider: httpClientProvider
        )
    }
    
    //MARK: API Calls

    ///  Returns the current configuration items for resources that are present in your AWS Config aggregator. The operation also returns a list of resources that are not processed in the current request. If there are no unprocessed resources, the operation returns an empty unprocessedResourceIdentifiers list.     The API does not return results for deleted resources.    The API does not return tags and relationships.   
    public func batchGetAggregateResourceConfig(_ input: BatchGetAggregateResourceConfigRequest) -> EventLoopFuture<BatchGetAggregateResourceConfigResponse> {
        return client.send(operation: "BatchGetAggregateResourceConfig", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the current configuration for one or more requested resources. The operation also returns a list of resources that are not processed in the current request. If there are no unprocessed resources, the operation returns an empty unprocessedResourceKeys list.     The API does not return results for deleted resources.    The API does not return any tags for the requested resources. This information is filtered out of the supplementaryConfiguration section of the API response.   
    public func batchGetResourceConfig(_ input: BatchGetResourceConfigRequest) -> EventLoopFuture<BatchGetResourceConfigResponse> {
        return client.send(operation: "BatchGetResourceConfig", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the authorization granted to the specified configuration aggregator account in a specified region.
    @discardableResult public func deleteAggregationAuthorization(_ input: DeleteAggregationAuthorizationRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteAggregationAuthorization", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the specified AWS Config rule and all of its evaluation results. AWS Config sets the state of a rule to DELETING until the deletion is complete. You cannot update a rule while it is in this state. If you make a PutConfigRule or DeleteConfigRule request for the rule, you will receive a ResourceInUseException. You can check the state of a rule by using the DescribeConfigRules request.
    @discardableResult public func deleteConfigRule(_ input: DeleteConfigRuleRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteConfigRule", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the specified configuration aggregator and the aggregated data associated with the aggregator.
    @discardableResult public func deleteConfigurationAggregator(_ input: DeleteConfigurationAggregatorRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteConfigurationAggregator", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the configuration recorder. After the configuration recorder is deleted, AWS Config will not record resource configuration changes until you create a new configuration recorder. This action does not delete the configuration information that was previously recorded. You will be able to access the previously recorded information by using the GetResourceConfigHistory action, but you will not be able to access this information in the AWS Config console until you create a new configuration recorder.
    @discardableResult public func deleteConfigurationRecorder(_ input: DeleteConfigurationRecorderRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteConfigurationRecorder", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the specified conformance pack and all the AWS Config rules, remediation actions, and all evaluation results within that conformance pack. AWS Config sets the conformance pack to DELETE_IN_PROGRESS until the deletion is complete. You cannot update a conformance pack while it is in this state.
    @discardableResult public func deleteConformancePack(_ input: DeleteConformancePackRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteConformancePack", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the delivery channel. Before you can delete the delivery channel, you must stop the configuration recorder by using the StopConfigurationRecorder action.
    @discardableResult public func deleteDeliveryChannel(_ input: DeleteDeliveryChannelRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteDeliveryChannel", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the evaluation results for the specified AWS Config rule. You can specify one AWS Config rule per request. After you delete the evaluation results, you can call the StartConfigRulesEvaluation API to start evaluating your AWS resources against the rule.
    public func deleteEvaluationResults(_ input: DeleteEvaluationResultsRequest) -> EventLoopFuture<DeleteEvaluationResultsResponse> {
        return client.send(operation: "DeleteEvaluationResults", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the specified organization config rule and all of its evaluation results from all member accounts in that organization. Only a master account can delete an organization config rule. AWS Config sets the state of a rule to DELETE_IN_PROGRESS until the deletion is complete. You cannot update a rule while it is in this state.
    @discardableResult public func deleteOrganizationConfigRule(_ input: DeleteOrganizationConfigRuleRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteOrganizationConfigRule", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the specified organization conformance pack and all of the config rules and remediation actions from all member accounts in that organization. Only a master account can delete an organization conformance pack. AWS Config sets the state of a conformance pack to DELETE_IN_PROGRESS until the deletion is complete. You cannot update a conformance pack while it is in this state. 
    @discardableResult public func deleteOrganizationConformancePack(_ input: DeleteOrganizationConformancePackRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteOrganizationConformancePack", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes pending authorization requests for a specified aggregator account in a specified region.
    @discardableResult public func deletePendingAggregationRequest(_ input: DeletePendingAggregationRequestRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "DeletePendingAggregationRequest", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the remediation configuration.
    public func deleteRemediationConfiguration(_ input: DeleteRemediationConfigurationRequest) -> EventLoopFuture<DeleteRemediationConfigurationResponse> {
        return client.send(operation: "DeleteRemediationConfiguration", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes one or more remediation exceptions mentioned in the resource keys.
    public func deleteRemediationExceptions(_ input: DeleteRemediationExceptionsRequest) -> EventLoopFuture<DeleteRemediationExceptionsResponse> {
        return client.send(operation: "DeleteRemediationExceptions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Records the configuration state for a custom resource that has been deleted. This API records a new ConfigurationItem with a ResourceDeleted status. You can retrieve the ConfigurationItems recorded for this resource in your AWS Config History. 
    @discardableResult public func deleteResourceConfig(_ input: DeleteResourceConfigRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteResourceConfig", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the retention configuration.
    @discardableResult public func deleteRetentionConfiguration(_ input: DeleteRetentionConfigurationRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteRetentionConfiguration", path: "/", httpMethod: "POST", input: input)
    }

    ///  Schedules delivery of a configuration snapshot to the Amazon S3 bucket in the specified delivery channel. After the delivery has started, AWS Config sends the following notifications using an Amazon SNS topic that you have specified.   Notification of the start of the delivery.   Notification of the completion of the delivery, if the delivery was successfully completed.   Notification of delivery failure, if the delivery failed.  
    public func deliverConfigSnapshot(_ input: DeliverConfigSnapshotRequest) -> EventLoopFuture<DeliverConfigSnapshotResponse> {
        return client.send(operation: "DeliverConfigSnapshot", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns a list of compliant and noncompliant rules with the number of resources for compliant and noncompliant rules.   The results can return an empty result page, but if you have a nextToken, the results are displayed on the next page. 
    public func describeAggregateComplianceByConfigRules(_ input: DescribeAggregateComplianceByConfigRulesRequest) -> EventLoopFuture<DescribeAggregateComplianceByConfigRulesResponse> {
        return client.send(operation: "DescribeAggregateComplianceByConfigRules", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns a list of authorizations granted to various aggregator accounts and regions.
    public func describeAggregationAuthorizations(_ input: DescribeAggregationAuthorizationsRequest) -> EventLoopFuture<DescribeAggregationAuthorizationsResponse> {
        return client.send(operation: "DescribeAggregationAuthorizations", path: "/", httpMethod: "POST", input: input)
    }

    ///  Indicates whether the specified AWS Config rules are compliant. If a rule is noncompliant, this action returns the number of AWS resources that do not comply with the rule. A rule is compliant if all of the evaluated resources comply with it. It is noncompliant if any of these resources do not comply. If AWS Config has no current evaluation results for the rule, it returns INSUFFICIENT_DATA. This result might indicate one of the following conditions:   AWS Config has never invoked an evaluation for the rule. To check whether it has, use the DescribeConfigRuleEvaluationStatus action to get the LastSuccessfulInvocationTime and LastFailedInvocationTime.   The rule's AWS Lambda function is failing to send evaluation results to AWS Config. Verify that the role you assigned to your configuration recorder includes the config:PutEvaluations permission. If the rule is a custom rule, verify that the AWS Lambda execution role includes the config:PutEvaluations permission.   The rule's AWS Lambda function has returned NOT_APPLICABLE for all evaluation results. This can occur if the resources were deleted or removed from the rule's scope.  
    public func describeComplianceByConfigRule(_ input: DescribeComplianceByConfigRuleRequest) -> EventLoopFuture<DescribeComplianceByConfigRuleResponse> {
        return client.send(operation: "DescribeComplianceByConfigRule", path: "/", httpMethod: "POST", input: input)
    }

    ///  Indicates whether the specified AWS resources are compliant. If a resource is noncompliant, this action returns the number of AWS Config rules that the resource does not comply with. A resource is compliant if it complies with all the AWS Config rules that evaluate it. It is noncompliant if it does not comply with one or more of these rules. If AWS Config has no current evaluation results for the resource, it returns INSUFFICIENT_DATA. This result might indicate one of the following conditions about the rules that evaluate the resource:   AWS Config has never invoked an evaluation for the rule. To check whether it has, use the DescribeConfigRuleEvaluationStatus action to get the LastSuccessfulInvocationTime and LastFailedInvocationTime.   The rule's AWS Lambda function is failing to send evaluation results to AWS Config. Verify that the role that you assigned to your configuration recorder includes the config:PutEvaluations permission. If the rule is a custom rule, verify that the AWS Lambda execution role includes the config:PutEvaluations permission.   The rule's AWS Lambda function has returned NOT_APPLICABLE for all evaluation results. This can occur if the resources were deleted or removed from the rule's scope.  
    public func describeComplianceByResource(_ input: DescribeComplianceByResourceRequest) -> EventLoopFuture<DescribeComplianceByResourceResponse> {
        return client.send(operation: "DescribeComplianceByResource", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns status information for each of your AWS managed Config rules. The status includes information such as the last time AWS Config invoked the rule, the last time AWS Config failed to invoke the rule, and the related error for the last failure.
    public func describeConfigRuleEvaluationStatus(_ input: DescribeConfigRuleEvaluationStatusRequest) -> EventLoopFuture<DescribeConfigRuleEvaluationStatusResponse> {
        return client.send(operation: "DescribeConfigRuleEvaluationStatus", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns details about your AWS Config rules.
    public func describeConfigRules(_ input: DescribeConfigRulesRequest) -> EventLoopFuture<DescribeConfigRulesResponse> {
        return client.send(operation: "DescribeConfigRules", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns status information for sources within an aggregator. The status includes information about the last time AWS Config verified authorization between the source account and an aggregator account. In case of a failure, the status contains the related error code or message. 
    public func describeConfigurationAggregatorSourcesStatus(_ input: DescribeConfigurationAggregatorSourcesStatusRequest) -> EventLoopFuture<DescribeConfigurationAggregatorSourcesStatusResponse> {
        return client.send(operation: "DescribeConfigurationAggregatorSourcesStatus", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the details of one or more configuration aggregators. If the configuration aggregator is not specified, this action returns the details for all the configuration aggregators associated with the account. 
    public func describeConfigurationAggregators(_ input: DescribeConfigurationAggregatorsRequest) -> EventLoopFuture<DescribeConfigurationAggregatorsResponse> {
        return client.send(operation: "DescribeConfigurationAggregators", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the current status of the specified configuration recorder. If a configuration recorder is not specified, this action returns the status of all configuration recorders associated with the account.  Currently, you can specify only one configuration recorder per region in your account. 
    public func describeConfigurationRecorderStatus(_ input: DescribeConfigurationRecorderStatusRequest) -> EventLoopFuture<DescribeConfigurationRecorderStatusResponse> {
        return client.send(operation: "DescribeConfigurationRecorderStatus", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the details for the specified configuration recorders. If the configuration recorder is not specified, this action returns the details for all configuration recorders associated with the account.  Currently, you can specify only one configuration recorder per region in your account. 
    public func describeConfigurationRecorders(_ input: DescribeConfigurationRecordersRequest) -> EventLoopFuture<DescribeConfigurationRecordersResponse> {
        return client.send(operation: "DescribeConfigurationRecorders", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns compliance details for each rule in that conformance pack.  You must provide exact rule names. 
    public func describeConformancePackCompliance(_ input: DescribeConformancePackComplianceRequest) -> EventLoopFuture<DescribeConformancePackComplianceResponse> {
        return client.send(operation: "DescribeConformancePackCompliance", path: "/", httpMethod: "POST", input: input)
    }

    ///  Provides one or more conformance packs deployment status.  If there are no conformance packs then you will see an empty result. 
    public func describeConformancePackStatus(_ input: DescribeConformancePackStatusRequest) -> EventLoopFuture<DescribeConformancePackStatusResponse> {
        return client.send(operation: "DescribeConformancePackStatus", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns a list of one or more conformance packs.
    public func describeConformancePacks(_ input: DescribeConformancePacksRequest) -> EventLoopFuture<DescribeConformancePacksResponse> {
        return client.send(operation: "DescribeConformancePacks", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the current status of the specified delivery channel. If a delivery channel is not specified, this action returns the current status of all delivery channels associated with the account.  Currently, you can specify only one delivery channel per region in your account. 
    public func describeDeliveryChannelStatus(_ input: DescribeDeliveryChannelStatusRequest) -> EventLoopFuture<DescribeDeliveryChannelStatusResponse> {
        return client.send(operation: "DescribeDeliveryChannelStatus", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns details about the specified delivery channel. If a delivery channel is not specified, this action returns the details of all delivery channels associated with the account.  Currently, you can specify only one delivery channel per region in your account. 
    public func describeDeliveryChannels(_ input: DescribeDeliveryChannelsRequest) -> EventLoopFuture<DescribeDeliveryChannelsResponse> {
        return client.send(operation: "DescribeDeliveryChannels", path: "/", httpMethod: "POST", input: input)
    }

    ///  Provides organization config rule deployment status for an organization.  The status is not considered successful until organization config rule is successfully deployed in all the member accounts with an exception of excluded accounts. When you specify the limit and the next token, you receive a paginated response. Limit and next token are not applicable if you specify organization config rule names. It is only applicable, when you request all the organization config rules. Only a master account can call this API. 
    public func describeOrganizationConfigRuleStatuses(_ input: DescribeOrganizationConfigRuleStatusesRequest) -> EventLoopFuture<DescribeOrganizationConfigRuleStatusesResponse> {
        return client.send(operation: "DescribeOrganizationConfigRuleStatuses", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns a list of organization config rules.  When you specify the limit and the next token, you receive a paginated response. Limit and next token are not applicable if you specify organization config rule names. It is only applicable, when you request all the organization config rules. Only a master account can call this API. 
    public func describeOrganizationConfigRules(_ input: DescribeOrganizationConfigRulesRequest) -> EventLoopFuture<DescribeOrganizationConfigRulesResponse> {
        return client.send(operation: "DescribeOrganizationConfigRules", path: "/", httpMethod: "POST", input: input)
    }

    ///  Provides organization conformance pack deployment status for an organization.  The status is not considered successful until organization conformance pack is successfully deployed in all the member accounts with an exception of excluded accounts. When you specify the limit and the next token, you receive a paginated response. Limit and next token are not applicable if you specify organization conformance pack names. They are only applicable, when you request all the organization conformance packs. Only a master account can call this API. 
    public func describeOrganizationConformancePackStatuses(_ input: DescribeOrganizationConformancePackStatusesRequest) -> EventLoopFuture<DescribeOrganizationConformancePackStatusesResponse> {
        return client.send(operation: "DescribeOrganizationConformancePackStatuses", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns a list of organization conformance packs.  When you specify the limit and the next token, you receive a paginated response.  Limit and next token are not applicable if you specify organization conformance packs names. They are only applicable, when you request all the organization conformance packs.  Only a master account can call this API. 
    public func describeOrganizationConformancePacks(_ input: DescribeOrganizationConformancePacksRequest) -> EventLoopFuture<DescribeOrganizationConformancePacksResponse> {
        return client.send(operation: "DescribeOrganizationConformancePacks", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns a list of all pending aggregation requests.
    public func describePendingAggregationRequests(_ input: DescribePendingAggregationRequestsRequest) -> EventLoopFuture<DescribePendingAggregationRequestsResponse> {
        return client.send(operation: "DescribePendingAggregationRequests", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the details of one or more remediation configurations.
    public func describeRemediationConfigurations(_ input: DescribeRemediationConfigurationsRequest) -> EventLoopFuture<DescribeRemediationConfigurationsResponse> {
        return client.send(operation: "DescribeRemediationConfigurations", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the details of one or more remediation exceptions. A detailed view of a remediation exception for a set of resources that includes an explanation of an exception and the time when the exception will be deleted. When you specify the limit and the next token, you receive a paginated response.   When you specify the limit and the next token, you receive a paginated response.  Limit and next token are not applicable if you request resources in batch. It is only applicable, when you request all resources. 
    public func describeRemediationExceptions(_ input: DescribeRemediationExceptionsRequest) -> EventLoopFuture<DescribeRemediationExceptionsResponse> {
        return client.send(operation: "DescribeRemediationExceptions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Provides a detailed view of a Remediation Execution for a set of resources including state, timestamps for when steps for the remediation execution occur, and any error messages for steps that have failed. When you specify the limit and the next token, you receive a paginated response.
    public func describeRemediationExecutionStatus(_ input: DescribeRemediationExecutionStatusRequest) -> EventLoopFuture<DescribeRemediationExecutionStatusResponse> {
        return client.send(operation: "DescribeRemediationExecutionStatus", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the details of one or more retention configurations. If the retention configuration name is not specified, this action returns the details for all the retention configurations for that account.  Currently, AWS Config supports only one retention configuration per region in your account. 
    public func describeRetentionConfigurations(_ input: DescribeRetentionConfigurationsRequest) -> EventLoopFuture<DescribeRetentionConfigurationsResponse> {
        return client.send(operation: "DescribeRetentionConfigurations", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the evaluation results for the specified AWS Config rule for a specific resource in a rule. The results indicate which AWS resources were evaluated by the rule, when each resource was last evaluated, and whether each resource complies with the rule.   The results can return an empty result page. But if you have a nextToken, the results are displayed on the next page. 
    public func getAggregateComplianceDetailsByConfigRule(_ input: GetAggregateComplianceDetailsByConfigRuleRequest) -> EventLoopFuture<GetAggregateComplianceDetailsByConfigRuleResponse> {
        return client.send(operation: "GetAggregateComplianceDetailsByConfigRule", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the number of compliant and noncompliant rules for one or more accounts and regions in an aggregator.  The results can return an empty result page, but if you have a nextToken, the results are displayed on the next page. 
    public func getAggregateConfigRuleComplianceSummary(_ input: GetAggregateConfigRuleComplianceSummaryRequest) -> EventLoopFuture<GetAggregateConfigRuleComplianceSummaryResponse> {
        return client.send(operation: "GetAggregateConfigRuleComplianceSummary", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the resource counts across accounts and regions that are present in your AWS Config aggregator. You can request the resource counts by providing filters and GroupByKey. For example, if the input contains accountID 12345678910 and region us-east-1 in filters, the API returns the count of resources in account ID 12345678910 and region us-east-1. If the input contains ACCOUNT_ID as a GroupByKey, the API returns resource counts for all source accounts that are present in your aggregator.
    public func getAggregateDiscoveredResourceCounts(_ input: GetAggregateDiscoveredResourceCountsRequest) -> EventLoopFuture<GetAggregateDiscoveredResourceCountsResponse> {
        return client.send(operation: "GetAggregateDiscoveredResourceCounts", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns configuration item that is aggregated for your specific resource in a specific source account and region.
    public func getAggregateResourceConfig(_ input: GetAggregateResourceConfigRequest) -> EventLoopFuture<GetAggregateResourceConfigResponse> {
        return client.send(operation: "GetAggregateResourceConfig", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the evaluation results for the specified AWS Config rule. The results indicate which AWS resources were evaluated by the rule, when each resource was last evaluated, and whether each resource complies with the rule.
    public func getComplianceDetailsByConfigRule(_ input: GetComplianceDetailsByConfigRuleRequest) -> EventLoopFuture<GetComplianceDetailsByConfigRuleResponse> {
        return client.send(operation: "GetComplianceDetailsByConfigRule", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the evaluation results for the specified AWS resource. The results indicate which AWS Config rules were used to evaluate the resource, when each rule was last used, and whether the resource complies with each rule.
    public func getComplianceDetailsByResource(_ input: GetComplianceDetailsByResourceRequest) -> EventLoopFuture<GetComplianceDetailsByResourceResponse> {
        return client.send(operation: "GetComplianceDetailsByResource", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the number of AWS Config rules that are compliant and noncompliant, up to a maximum of 25 for each.
    public func getComplianceSummaryByConfigRule() -> EventLoopFuture<GetComplianceSummaryByConfigRuleResponse> {
        return client.send(operation: "GetComplianceSummaryByConfigRule", path: "/", httpMethod: "POST")
    }

    ///  Returns the number of resources that are compliant and the number that are noncompliant. You can specify one or more resource types to get these numbers for each resource type. The maximum number returned is 100.
    public func getComplianceSummaryByResourceType(_ input: GetComplianceSummaryByResourceTypeRequest) -> EventLoopFuture<GetComplianceSummaryByResourceTypeResponse> {
        return client.send(operation: "GetComplianceSummaryByResourceType", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns compliance details of a conformance pack for all AWS resources that are monitered by conformance pack.
    public func getConformancePackComplianceDetails(_ input: GetConformancePackComplianceDetailsRequest) -> EventLoopFuture<GetConformancePackComplianceDetailsResponse> {
        return client.send(operation: "GetConformancePackComplianceDetails", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns compliance details for the conformance pack based on the cumulative compliance results of all the rules in that conformance pack.
    public func getConformancePackComplianceSummary(_ input: GetConformancePackComplianceSummaryRequest) -> EventLoopFuture<GetConformancePackComplianceSummaryResponse> {
        return client.send(operation: "GetConformancePackComplianceSummary", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the resource types, the number of each resource type, and the total number of resources that AWS Config is recording in this region for your AWS account.   Example    AWS Config is recording three resource types in the US East (Ohio) Region for your account: 25 EC2 instances, 20 IAM users, and 15 S3 buckets.   You make a call to the GetDiscoveredResourceCounts action and specify that you want all resource types.    AWS Config returns the following:   The resource types (EC2 instances, IAM users, and S3 buckets).   The number of each resource type (25, 20, and 15).   The total number of all resources (60).     The response is paginated. By default, AWS Config lists 100 ResourceCount objects on each page. You can customize this number with the limit parameter. The response includes a nextToken string. To get the next page of results, run the request again and specify the string for the nextToken parameter.  If you make a call to the GetDiscoveredResourceCounts action, you might not immediately receive resource counts in the following situations:   You are a new AWS Config customer.   You just enabled resource recording.   It might take a few minutes for AWS Config to record and count your resources. Wait a few minutes and then retry the GetDiscoveredResourceCounts action.  
    public func getDiscoveredResourceCounts(_ input: GetDiscoveredResourceCountsRequest) -> EventLoopFuture<GetDiscoveredResourceCountsResponse> {
        return client.send(operation: "GetDiscoveredResourceCounts", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns detailed status for each member account within an organization for a given organization config rule.  Only a master account can call this API. 
    public func getOrganizationConfigRuleDetailedStatus(_ input: GetOrganizationConfigRuleDetailedStatusRequest) -> EventLoopFuture<GetOrganizationConfigRuleDetailedStatusResponse> {
        return client.send(operation: "GetOrganizationConfigRuleDetailedStatus", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns detailed status for each member account within an organization for a given organization conformance pack. Only a master account can call this API.
    public func getOrganizationConformancePackDetailedStatus(_ input: GetOrganizationConformancePackDetailedStatusRequest) -> EventLoopFuture<GetOrganizationConformancePackDetailedStatusResponse> {
        return client.send(operation: "GetOrganizationConformancePackDetailedStatus", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns a list of configuration items for the specified resource. The list contains details about each state of the resource during the specified time interval. If you specified a retention period to retain your ConfigurationItems between a minimum of 30 days and a maximum of 7 years (2557 days), AWS Config returns the ConfigurationItems for the specified retention period.  The response is paginated. By default, AWS Config returns a limit of 10 configuration items per page. You can customize this number with the limit parameter. The response includes a nextToken string. To get the next page of results, run the request again and specify the string for the nextToken parameter.  Each call to the API is limited to span a duration of seven days. It is likely that the number of records returned is smaller than the specified limit. In such cases, you can make another call, using the nextToken. 
    public func getResourceConfigHistory(_ input: GetResourceConfigHistoryRequest) -> EventLoopFuture<GetResourceConfigHistoryResponse> {
        return client.send(operation: "GetResourceConfigHistory", path: "/", httpMethod: "POST", input: input)
    }

    ///  Accepts a resource type and returns a list of resource identifiers that are aggregated for a specific resource type across accounts and regions. A resource identifier includes the resource type, ID, (if available) the custom resource name, source account, and source region. You can narrow the results to include only resources that have specific resource IDs, or a resource name, or source account ID, or source region. For example, if the input consists of accountID 12345678910 and the region is us-east-1 for resource type AWS::EC2::Instance then the API returns all the EC2 instance identifiers of accountID 12345678910 and region us-east-1.
    public func listAggregateDiscoveredResources(_ input: ListAggregateDiscoveredResourcesRequest) -> EventLoopFuture<ListAggregateDiscoveredResourcesResponse> {
        return client.send(operation: "ListAggregateDiscoveredResources", path: "/", httpMethod: "POST", input: input)
    }

    ///  Accepts a resource type and returns a list of resource identifiers for the resources of that type. A resource identifier includes the resource type, ID, and (if available) the custom resource name. The results consist of resources that AWS Config has discovered, including those that AWS Config is not currently recording. You can narrow the results to include only resources that have specific resource IDs or a resource name.  You can specify either resource IDs or a resource name, but not both, in the same request.  The response is paginated. By default, AWS Config lists 100 resource identifiers on each page. You can customize this number with the limit parameter. The response includes a nextToken string. To get the next page of results, run the request again and specify the string for the nextToken parameter.
    public func listDiscoveredResources(_ input: ListDiscoveredResourcesRequest) -> EventLoopFuture<ListDiscoveredResourcesResponse> {
        return client.send(operation: "ListDiscoveredResources", path: "/", httpMethod: "POST", input: input)
    }

    ///  List the tags for AWS Config resource.
    public func listTagsForResource(_ input: ListTagsForResourceRequest) -> EventLoopFuture<ListTagsForResourceResponse> {
        return client.send(operation: "ListTagsForResource", path: "/", httpMethod: "POST", input: input)
    }

    ///  Authorizes the aggregator account and region to collect data from the source account and region. 
    public func putAggregationAuthorization(_ input: PutAggregationAuthorizationRequest) -> EventLoopFuture<PutAggregationAuthorizationResponse> {
        return client.send(operation: "PutAggregationAuthorization", path: "/", httpMethod: "POST", input: input)
    }

    ///  Adds or updates an AWS Config rule for evaluating whether your AWS resources comply with your desired configurations. You can use this action for custom AWS Config rules and AWS managed Config rules. A custom AWS Config rule is a rule that you develop and maintain. An AWS managed Config rule is a customizable, predefined rule that AWS Config provides. If you are adding a new custom AWS Config rule, you must first create the AWS Lambda function that the rule invokes to evaluate your resources. When you use the PutConfigRule action to add the rule to AWS Config, you must specify the Amazon Resource Name (ARN) that AWS Lambda assigns to the function. Specify the ARN for the SourceIdentifier key. This key is part of the Source object, which is part of the ConfigRule object.  If you are adding an AWS managed Config rule, specify the rule's identifier for the SourceIdentifier key. To reference AWS managed Config rule identifiers, see About AWS Managed Config Rules. For any new rule that you add, specify the ConfigRuleName in the ConfigRule object. Do not specify the ConfigRuleArn or the ConfigRuleId. These values are generated by AWS Config for new rules. If you are updating a rule that you added previously, you can specify the rule by ConfigRuleName, ConfigRuleId, or ConfigRuleArn in the ConfigRule data type that you use in this request. The maximum number of rules that AWS Config supports is 150. For information about requesting a rule limit increase, see AWS Config Limits in the AWS General Reference Guide. For more information about developing and using AWS Config rules, see Evaluating AWS Resource Configurations with AWS Config in the AWS Config Developer Guide.
    @discardableResult public func putConfigRule(_ input: PutConfigRuleRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "PutConfigRule", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates and updates the configuration aggregator with the selected source accounts and regions. The source account can be individual account(s) or an organization.  AWS Config should be enabled in source accounts and regions you want to aggregate. If your source type is an organization, you must be signed in to the master account and all features must be enabled in your organization. AWS Config calls EnableAwsServiceAccess API to enable integration between AWS Config and AWS Organizations.  
    public func putConfigurationAggregator(_ input: PutConfigurationAggregatorRequest) -> EventLoopFuture<PutConfigurationAggregatorResponse> {
        return client.send(operation: "PutConfigurationAggregator", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new configuration recorder to record the selected resource configurations. You can use this action to change the role roleARN or the recordingGroup of an existing recorder. To change the role, call the action on the existing configuration recorder and specify a role.  Currently, you can specify only one configuration recorder per region in your account. If ConfigurationRecorder does not have the recordingGroup parameter specified, the default is to record all supported resource types. 
    @discardableResult public func putConfigurationRecorder(_ input: PutConfigurationRecorderRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "PutConfigurationRecorder", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates or updates a conformance pack. A conformance pack is a collection of AWS Config rules that can be easily deployed in an account and a region and across AWS Organization. This API creates a service linked role AWSServiceRoleForConfigConforms in your account. The service linked role is created only when the role does not exist in your account. AWS Config verifies the existence of role with GetRole action.  You must specify either the TemplateS3Uri or the TemplateBody parameter, but not both. If you provide both AWS Config uses the TemplateS3Uri parameter and ignores the TemplateBody parameter. 
    public func putConformancePack(_ input: PutConformancePackRequest) -> EventLoopFuture<PutConformancePackResponse> {
        return client.send(operation: "PutConformancePack", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a delivery channel object to deliver configuration information to an Amazon S3 bucket and Amazon SNS topic. Before you can create a delivery channel, you must create a configuration recorder. You can use this action to change the Amazon S3 bucket or an Amazon SNS topic of the existing delivery channel. To change the Amazon S3 bucket or an Amazon SNS topic, call this action and specify the changed values for the S3 bucket and the SNS topic. If you specify a different value for either the S3 bucket or the SNS topic, this action will keep the existing value for the parameter that is not changed.  You can have only one delivery channel per region in your account. 
    @discardableResult public func putDeliveryChannel(_ input: PutDeliveryChannelRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "PutDeliveryChannel", path: "/", httpMethod: "POST", input: input)
    }

    ///  Used by an AWS Lambda function to deliver evaluation results to AWS Config. This action is required in every AWS Lambda function that is invoked by an AWS Config rule.
    public func putEvaluations(_ input: PutEvaluationsRequest) -> EventLoopFuture<PutEvaluationsResponse> {
        return client.send(operation: "PutEvaluations", path: "/", httpMethod: "POST", input: input)
    }

    ///  Adds or updates organization config rule for your entire organization evaluating whether your AWS resources comply with your desired configurations. Only a master account can create or update an organization config rule. This API enables organization service access through the EnableAWSServiceAccess action and creates a service linked role AWSServiceRoleForConfigMultiAccountSetup in the master account of your organization. The service linked role is created only when the role does not exist in the master account. AWS Config verifies the existence of role with GetRole action. You can use this action to create both custom AWS Config rules and AWS managed Config rules. If you are adding a new custom AWS Config rule, you must first create AWS Lambda function in the master account that the rule invokes to evaluate your resources. When you use the PutOrganizationConfigRule action to add the rule to AWS Config, you must specify the Amazon Resource Name (ARN) that AWS Lambda assigns to the function. If you are adding an AWS managed Config rule, specify the rule's identifier for the RuleIdentifier key. The maximum number of organization config rules that AWS Config supports is 150.  Specify either OrganizationCustomRuleMetadata or OrganizationManagedRuleMetadata. 
    public func putOrganizationConfigRule(_ input: PutOrganizationConfigRuleRequest) -> EventLoopFuture<PutOrganizationConfigRuleResponse> {
        return client.send(operation: "PutOrganizationConfigRule", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deploys conformance packs across member accounts in an AWS Organization. This API enables organization service access for config-multiaccountsetup.amazonaws.com through the EnableAWSServiceAccess action and creates a service linked role AWSServiceRoleForConfigMultiAccountSetup in the master account of your organization. The service linked role is created only when the role does not exist in the master account. AWS Config verifies the existence of role with GetRole action.  You must specify either the TemplateS3Uri or the TemplateBody parameter, but not both. If you provide both AWS Config uses the TemplateS3Uri parameter and ignores the TemplateBody parameter. AWS Config sets the state of a conformance pack to CREATE_IN_PROGRESS and UPDATE_IN_PROGRESS until the confomance pack is created or updated. You cannot update a conformance pack while it is in this state. You can create 6 conformance packs with 25 AWS Config rules in each pack. 
    public func putOrganizationConformancePack(_ input: PutOrganizationConformancePackRequest) -> EventLoopFuture<PutOrganizationConformancePackResponse> {
        return client.send(operation: "PutOrganizationConformancePack", path: "/", httpMethod: "POST", input: input)
    }

    ///  Adds or updates the remediation configuration with a specific AWS Config rule with the selected target or action. The API creates the RemediationConfiguration object for the AWS Config rule. The AWS Config rule must already exist for you to add a remediation configuration. The target (SSM document) must exist and have permissions to use the target. 
    public func putRemediationConfigurations(_ input: PutRemediationConfigurationsRequest) -> EventLoopFuture<PutRemediationConfigurationsResponse> {
        return client.send(operation: "PutRemediationConfigurations", path: "/", httpMethod: "POST", input: input)
    }

    ///  A remediation exception is when a specific resource is no longer considered for auto-remediation. This API adds a new exception or updates an exisiting exception for a specific resource with a specific AWS Config rule. 
    public func putRemediationExceptions(_ input: PutRemediationExceptionsRequest) -> EventLoopFuture<PutRemediationExceptionsResponse> {
        return client.send(operation: "PutRemediationExceptions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Records the configuration state for the resource provided in the request. The configuration state of a resource is represented in AWS Config as Configuration Items. Once this API records the configuration item, you can retrieve the list of configuration items for the custom resource type using existing AWS Config APIs.   The custom resource type must be registered with AWS CloudFormation. This API accepts the configuration item registered with AWS CloudFormation. When you call this API, AWS Config only stores configuration state of the resource provided in the request. This API does not change or remediate the configuration of the resource.  
    @discardableResult public func putResourceConfig(_ input: PutResourceConfigRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "PutResourceConfig", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates and updates the retention configuration with details about retention period (number of days) that AWS Config stores your historical information. The API creates the RetentionConfiguration object and names the object as default. When you have a RetentionConfiguration object named default, calling the API modifies the default object.   Currently, AWS Config supports only one retention configuration per region in your account. 
    public func putRetentionConfiguration(_ input: PutRetentionConfigurationRequest) -> EventLoopFuture<PutRetentionConfigurationResponse> {
        return client.send(operation: "PutRetentionConfiguration", path: "/", httpMethod: "POST", input: input)
    }

    ///  Accepts a structured query language (SQL) SELECT command and an aggregator to query configuration state of AWS resources across multiple accounts and regions, performs the corresponding search, and returns resource configurations matching the properties. For more information about query components, see the  Query Components  section in the AWS Config Developer Guide.
    public func selectAggregateResourceConfig(_ input: SelectAggregateResourceConfigRequest) -> EventLoopFuture<SelectAggregateResourceConfigResponse> {
        return client.send(operation: "SelectAggregateResourceConfig", path: "/", httpMethod: "POST", input: input)
    }

    ///  Accepts a structured query language (SQL) SELECT command, performs the corresponding search, and returns resource configurations matching the properties. For more information about query components, see the  Query Components  section in the AWS Config Developer Guide.
    public func selectResourceConfig(_ input: SelectResourceConfigRequest) -> EventLoopFuture<SelectResourceConfigResponse> {
        return client.send(operation: "SelectResourceConfig", path: "/", httpMethod: "POST", input: input)
    }

    ///  Runs an on-demand evaluation for the specified AWS Config rules against the last known configuration state of the resources. Use StartConfigRulesEvaluation when you want to test that a rule you updated is working as expected. StartConfigRulesEvaluation does not re-record the latest configuration state for your resources. It re-runs an evaluation against the last known state of your resources.  You can specify up to 25 AWS Config rules per request.  An existing StartConfigRulesEvaluation call for the specified rules must complete before you can call the API again. If you chose to have AWS Config stream to an Amazon SNS topic, you will receive a ConfigRuleEvaluationStarted notification when the evaluation starts.  You don't need to call the StartConfigRulesEvaluation API to run an evaluation for a new rule. When you create a rule, AWS Config evaluates your resources against the rule automatically.   The StartConfigRulesEvaluation API is useful if you want to run on-demand evaluations, such as the following example:   You have a custom rule that evaluates your IAM resources every 24 hours.   You update your Lambda function to add additional conditions to your rule.   Instead of waiting for the next periodic evaluation, you call the StartConfigRulesEvaluation API.   AWS Config invokes your Lambda function and evaluates your IAM resources.   Your custom rule will still run periodic evaluations every 24 hours.  
    public func startConfigRulesEvaluation(_ input: StartConfigRulesEvaluationRequest) -> EventLoopFuture<StartConfigRulesEvaluationResponse> {
        return client.send(operation: "StartConfigRulesEvaluation", path: "/", httpMethod: "POST", input: input)
    }

    ///  Starts recording configurations of the AWS resources you have selected to record in your AWS account. You must have created at least one delivery channel to successfully start the configuration recorder.
    @discardableResult public func startConfigurationRecorder(_ input: StartConfigurationRecorderRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "StartConfigurationRecorder", path: "/", httpMethod: "POST", input: input)
    }

    ///  Runs an on-demand remediation for the specified AWS Config rules against the last known remediation configuration. It runs an execution against the current state of your resources. Remediation execution is asynchronous. You can specify up to 100 resource keys per request. An existing StartRemediationExecution call for the specified resource keys must complete before you can call the API again.
    public func startRemediationExecution(_ input: StartRemediationExecutionRequest) -> EventLoopFuture<StartRemediationExecutionResponse> {
        return client.send(operation: "StartRemediationExecution", path: "/", httpMethod: "POST", input: input)
    }

    ///  Stops recording configurations of the AWS resources you have selected to record in your AWS account.
    @discardableResult public func stopConfigurationRecorder(_ input: StopConfigurationRecorderRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "StopConfigurationRecorder", path: "/", httpMethod: "POST", input: input)
    }

    ///  Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are deleted as well.
    @discardableResult public func tagResource(_ input: TagResourceRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "TagResource", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes specified tags from a resource.
    @discardableResult public func untagResource(_ input: UntagResourceRequest) -> EventLoopFuture<Void> {
        return client.send(operation: "UntagResource", path: "/", httpMethod: "POST", input: input)
    }
}
