// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension DocDB {
    //MARK: Enums

    public enum ApplyMethod: String, CustomStringConvertible, Codable {
        case immediate = "immediate"
        case pendingReboot = "pending-reboot"
        public var description: String { return self.rawValue }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case dbInstance = "db-instance"
        case dbParameterGroup = "db-parameter-group"
        case dbSecurityGroup = "db-security-group"
        case dbSnapshot = "db-snapshot"
        case dbCluster = "db-cluster"
        case dbClusterSnapshot = "db-cluster-snapshot"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AddTagsToResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", encoding: .list(member:"Tag"))
        ]

        /// The Amazon DocumentDB resource that the tags are added to. This value is an Amazon Resource Name (ARN).
        public let resourceName: String
        /// The tags to be assigned to the Amazon DocumentDB resource. 
        public let tags: [Tag]

        public init(resourceName: String, tags: [Tag]) {
            self.resourceName = resourceName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName = "ResourceName"
            case tags = "Tags"
        }
    }

    public struct ApplyPendingMaintenanceActionMessage: AWSShape {

        /// The pending maintenance action to apply to this resource. Valid values: system-update, db-upgrade 
        public let applyAction: String
        /// A value that specifies the type of opt-in request or undoes an opt-in request. An opt-in request of type immediate can't be undone. Valid values:    immediate - Apply the maintenance action immediately.    next-maintenance - Apply the maintenance action during the next maintenance window for the resource.    undo-opt-in - Cancel any existing next-maintenance opt-in requests.  
        public let optInType: String
        /// The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to.
        public let resourceIdentifier: String

        public init(applyAction: String, optInType: String, resourceIdentifier: String) {
            self.applyAction = applyAction
            self.optInType = optInType
            self.resourceIdentifier = resourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case applyAction = "ApplyAction"
            case optInType = "OptInType"
            case resourceIdentifier = "ResourceIdentifier"
        }
    }

    public struct ApplyPendingMaintenanceActionResult: AWSShape {

        public let resourcePendingMaintenanceActions: ResourcePendingMaintenanceActions?

        public init(resourcePendingMaintenanceActions: ResourcePendingMaintenanceActions? = nil) {
            self.resourcePendingMaintenanceActions = resourcePendingMaintenanceActions
        }

        private enum CodingKeys: String, CodingKey {
            case resourcePendingMaintenanceActions = "ResourcePendingMaintenanceActions"
        }
    }

    public struct AvailabilityZone: AWSShape {

        /// The name of the Availability Zone.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct Certificate: AWSShape {

        /// The Amazon Resource Name (ARN) for the certificate. Example: arn:aws:rds:us-east-1::cert:rds-ca-2019 
        public let certificateArn: String?
        /// The unique key that identifies a certificate. Example: rds-ca-2019 
        public let certificateIdentifier: String?
        /// The type of the certificate. Example: CA 
        public let certificateType: String?
        /// The thumbprint of the certificate.
        public let thumbprint: String?
        /// The starting date-time from which the certificate is valid. Example: 2019-07-31T17:57:09Z 
        public let validFrom: TimeStamp?
        /// The date-time after which the certificate is no longer valid. Example: 2024-07-31T17:57:09Z 
        public let validTill: TimeStamp?

        public init(certificateArn: String? = nil, certificateIdentifier: String? = nil, certificateType: String? = nil, thumbprint: String? = nil, validFrom: TimeStamp? = nil, validTill: TimeStamp? = nil) {
            self.certificateArn = certificateArn
            self.certificateIdentifier = certificateIdentifier
            self.certificateType = certificateType
            self.thumbprint = thumbprint
            self.validFrom = validFrom
            self.validTill = validTill
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
            case certificateIdentifier = "CertificateIdentifier"
            case certificateType = "CertificateType"
            case thumbprint = "Thumbprint"
            case validFrom = "ValidFrom"
            case validTill = "ValidTill"
        }
    }

    public struct CertificateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificates", encoding: .list(member:"Certificate"))
        ]

        /// A list of certificates for this AWS account.
        public let certificates: [Certificate]?
        /// An optional pagination token provided if the number of records retrieved is greater than MaxRecords. If this parameter is specified, the marker specifies the next record in the list. Including the value of Marker in the next call to DescribeCertificates results in the next page of certificates.
        public let marker: String?

        public init(certificates: [Certificate]? = nil, marker: String? = nil) {
            self.certificates = certificates
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "Certificates"
            case marker = "Marker"
        }
    }

    public struct CloudwatchLogsExportConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisableLogTypes", encoding: .list(member:"member")), 
            AWSShapeMember(label: "EnableLogTypes", encoding: .list(member:"member"))
        ]

        /// The list of log types to disable.
        public let disableLogTypes: [String]?
        /// The list of log types to enable.
        public let enableLogTypes: [String]?

        public init(disableLogTypes: [String]? = nil, enableLogTypes: [String]? = nil) {
            self.disableLogTypes = disableLogTypes
            self.enableLogTypes = enableLogTypes
        }

        private enum CodingKeys: String, CodingKey {
            case disableLogTypes = "DisableLogTypes"
            case enableLogTypes = "EnableLogTypes"
        }
    }

    public struct CopyDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", encoding: .list(member:"Tag"))
        ]

        /// The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. Constraints:   Must specify a valid DB cluster parameter group.   If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier; for example, my-db-cluster-param-group, or a valid ARN.   If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN; for example, arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1.  
        public let sourceDBClusterParameterGroupIdentifier: String
        /// The tags that are to be assigned to the parameter group.
        public let tags: [Tag]?
        /// A description for the copied DB cluster parameter group.
        public let targetDBClusterParameterGroupDescription: String
        /// The identifier for the copied DB cluster parameter group. Constraints:   Cannot be null, empty, or blank.   Must contain from 1 to 255 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-cluster-param-group1 
        public let targetDBClusterParameterGroupIdentifier: String

        public init(sourceDBClusterParameterGroupIdentifier: String, tags: [Tag]? = nil, targetDBClusterParameterGroupDescription: String, targetDBClusterParameterGroupIdentifier: String) {
            self.sourceDBClusterParameterGroupIdentifier = sourceDBClusterParameterGroupIdentifier
            self.tags = tags
            self.targetDBClusterParameterGroupDescription = targetDBClusterParameterGroupDescription
            self.targetDBClusterParameterGroupIdentifier = targetDBClusterParameterGroupIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case sourceDBClusterParameterGroupIdentifier = "SourceDBClusterParameterGroupIdentifier"
            case tags = "Tags"
            case targetDBClusterParameterGroupDescription = "TargetDBClusterParameterGroupDescription"
            case targetDBClusterParameterGroupIdentifier = "TargetDBClusterParameterGroupIdentifier"
        }
    }

    public struct CopyDBClusterParameterGroupResult: AWSShape {

        public let dBClusterParameterGroup: DBClusterParameterGroup?

        public init(dBClusterParameterGroup: DBClusterParameterGroup? = nil) {
            self.dBClusterParameterGroup = dBClusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroup = "DBClusterParameterGroup"
        }
    }

    public struct CopyDBClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", encoding: .list(member:"Tag"))
        ]

        /// Set to true to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
        public let copyTags: Bool?
        /// The AWS KMS key ID for an encrypted DB cluster snapshot. The AWS KMS key ID is the Amazon Resource Name (ARN), AWS KMS key identifier, or the AWS KMS key alias for the AWS KMS encryption key.  If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for KmsKeyId to encrypt the copy with a new AWS KMS encryption key. If you don't specify a value for KmsKeyId, then the copy of the DB cluster snapshot is encrypted with the same AWS KMS key as the source DB cluster snapshot.  If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for KmsKeyId.  To copy an encrypted DB cluster snapshot to another AWS Region, set KmsKeyId to the AWS KMS key ID that you want to use to encrypt the copy of the DB cluster snapshot in the destination Region. AWS KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one Region in another Region. If you copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.
        public let kmsKeyId: String?
        /// The URL that contains a Signature Version 4 signed request for the CopyDBClusterSnapshot API action in the AWS Region that contains the source DB cluster snapshot to copy. You must use the PreSignedUrl parameter when copying an encrypted DB cluster snapshot from another AWS Region. The presigned URL must be a valid request for the CopyDBSClusterSnapshot API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The presigned URL request must contain the following parameter values:    KmsKeyId - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the CopyDBClusterSnapshot action that is called in the destination AWS Region, and the action contained in the presigned URL.    DestinationRegion - The name of the AWS Region that the DB cluster snapshot will be created in.    SourceDBClusterSnapshotIdentifier - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your SourceDBClusterSnapshotIdentifier looks like the following example: arn:aws:rds:us-west-2:123456789012:cluster-snapshot:my-cluster-snapshot-20161115.  
        public let preSignedUrl: String?
        /// The identifier of the DB cluster snapshot to copy. This parameter is not case sensitive. You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another. Constraints:   Must specify a valid system snapshot in the "available" state.   If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.   If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN.   Example: my-cluster-snapshot1 
        public let sourceDBClusterSnapshotIdentifier: String
        /// The tags to be assigned to the DB cluster snapshot.
        public let tags: [Tag]?
        /// The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case sensitive. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-cluster-snapshot2 
        public let targetDBClusterSnapshotIdentifier: String

        public init(copyTags: Bool? = nil, kmsKeyId: String? = nil, preSignedUrl: String? = nil, sourceDBClusterSnapshotIdentifier: String, tags: [Tag]? = nil, targetDBClusterSnapshotIdentifier: String) {
            self.copyTags = copyTags
            self.kmsKeyId = kmsKeyId
            self.preSignedUrl = preSignedUrl
            self.sourceDBClusterSnapshotIdentifier = sourceDBClusterSnapshotIdentifier
            self.tags = tags
            self.targetDBClusterSnapshotIdentifier = targetDBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case copyTags = "CopyTags"
            case kmsKeyId = "KmsKeyId"
            case preSignedUrl = "PreSignedUrl"
            case sourceDBClusterSnapshotIdentifier = "SourceDBClusterSnapshotIdentifier"
            case tags = "Tags"
            case targetDBClusterSnapshotIdentifier = "TargetDBClusterSnapshotIdentifier"
        }
    }

    public struct CopyDBClusterSnapshotResult: AWSShape {

        public let dBClusterSnapshot: DBClusterSnapshot?

        public init(dBClusterSnapshot: DBClusterSnapshot? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct CreateDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", encoding: .list(member:"AvailabilityZone")), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", encoding: .list(member:"member")), 
            AWSShapeMember(label: "Tags", encoding: .list(member:"Tag")), 
            AWSShapeMember(label: "VpcSecurityGroupIds", encoding: .list(member:"VpcSecurityGroupId"))
        ]

        /// A list of Amazon EC2 Availability Zones that instances in the DB cluster can be created in.
        public let availabilityZones: [String]?
        /// The number of days for which automated backups are retained. You must specify a minimum value of 1. Default: 1 Constraints:   Must be a value from 1 to 35.  
        public let backupRetentionPeriod: Int?
        /// The DB cluster identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-cluster 
        public let dBClusterIdentifier: String
        ///  The name of the DB cluster parameter group to associate with this DB cluster.
        public let dBClusterParameterGroupName: String?
        /// A DB subnet group to associate with this DB cluster. Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// Specifies whether this cluster can be deleted. If DeletionProtection is enabled, the cluster cannot be deleted unless it is modified and DeletionProtection is disabled. DeletionProtection protects clusters from being accidentally deleted.
        public let deletionProtection: Bool?
        /// A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs.
        public let enableCloudwatchLogsExports: [String]?
        /// The name of the database engine to be used for this DB cluster. Valid values: docdb 
        public let engine: String
        /// The version number of the database engine to use.
        public let engineVersion: String?
        /// The AWS KMS key identifier for an encrypted DB cluster. The AWS KMS key identifier is the Amazon Resource Name (ARN) for the AWS KMS encryption key. If you are creating a DB cluster using the same AWS account that owns the AWS KMS encryption key that is used to encrypt the new DB cluster, you can use the AWS KMS key alias instead of the ARN for the AWS KMS encryption key. If an encryption key is not specified in KmsKeyId:   If ReplicationSourceIdentifier identifies an encrypted source, then Amazon DocumentDB uses the encryption key that is used to encrypt the source. Otherwise, Amazon DocumentDB uses your default encryption key.    If the StorageEncrypted parameter is true and ReplicationSourceIdentifier is not specified, Amazon DocumentDB uses your default encryption key.   AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. If you create a replica of an encrypted DB cluster in another AWS Region, you must set KmsKeyId to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the replica in that AWS Region.
        public let kmsKeyId: String?
        /// The name of the master user for the DB cluster. Constraints:   Must be from 1 to 63 letters or numbers.   The first character must be a letter.   Cannot be a reserved word for the chosen database engine.  
        public let masterUsername: String
        /// The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@). Constraints: Must contain from 8 to 100 characters.
        public let masterUserPassword: String
        /// The port number on which the instances in the DB cluster accept connections.
        public let port: Int?
        /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// Specifies whether the DB cluster is encrypted.
        public let storageEncrypted: Bool?
        /// The tags to be assigned to the DB cluster.
        public let tags: [Tag]?
        /// A list of EC2 VPC security groups to associate with this DB cluster.
        public let vpcSecurityGroupIds: [String]?

        public init(availabilityZones: [String]? = nil, backupRetentionPeriod: Int? = nil, dBClusterIdentifier: String, dBClusterParameterGroupName: String? = nil, dBSubnetGroupName: String? = nil, deletionProtection: Bool? = nil, enableCloudwatchLogsExports: [String]? = nil, engine: String, engineVersion: String? = nil, kmsKeyId: String? = nil, masterUsername: String, masterUserPassword: String, port: Int? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, storageEncrypted: Bool? = nil, tags: [Tag]? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.availabilityZones = availabilityZones
            self.backupRetentionPeriod = backupRetentionPeriod
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.dBSubnetGroupName = dBSubnetGroupName
            self.deletionProtection = deletionProtection
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.engine = engine
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.masterUsername = masterUsername
            self.masterUserPassword = masterUserPassword
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.storageEncrypted = storageEncrypted
            self.tags = tags
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case deletionProtection = "DeletionProtection"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case kmsKeyId = "KmsKeyId"
            case masterUsername = "MasterUsername"
            case masterUserPassword = "MasterUserPassword"
            case port = "Port"
            case preferredBackupWindow = "PreferredBackupWindow"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case storageEncrypted = "StorageEncrypted"
            case tags = "Tags"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct CreateDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", encoding: .list(member:"Tag"))
        ]

        /// The name of the DB cluster parameter group. Constraints:   Must match the name of an existing DBClusterParameterGroup.    This value is stored as a lowercase string. 
        public let dBClusterParameterGroupName: String
        /// The DB cluster parameter group family name.
        public let dBParameterGroupFamily: String
        /// The description for the DB cluster parameter group.
        public let description: String
        /// The tags to be assigned to the DB cluster parameter group.
        public let tags: [Tag]?

        public init(dBClusterParameterGroupName: String, dBParameterGroupFamily: String, description: String, tags: [Tag]? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.description = description
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case description = "Description"
            case tags = "Tags"
        }
    }

    public struct CreateDBClusterParameterGroupResult: AWSShape {

        public let dBClusterParameterGroup: DBClusterParameterGroup?

        public init(dBClusterParameterGroup: DBClusterParameterGroup? = nil) {
            self.dBClusterParameterGroup = dBClusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroup = "DBClusterParameterGroup"
        }
    }

    public struct CreateDBClusterResult: AWSShape {

        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct CreateDBClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", encoding: .list(member:"Tag"))
        ]

        /// The identifier of the DB cluster to create a snapshot for. This parameter is not case sensitive. Constraints:   Must match the identifier of an existing DBCluster.   Example: my-cluster 
        public let dBClusterIdentifier: String
        /// The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-cluster-snapshot1 
        public let dBClusterSnapshotIdentifier: String
        /// The tags to be assigned to the DB cluster snapshot.
        public let tags: [Tag]?

        public init(dBClusterIdentifier: String, dBClusterSnapshotIdentifier: String, tags: [Tag]? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case tags = "Tags"
        }
    }

    public struct CreateDBClusterSnapshotResult: AWSShape {

        public let dBClusterSnapshot: DBClusterSnapshot?

        public init(dBClusterSnapshot: DBClusterSnapshot? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct CreateDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", encoding: .list(member:"Tag"))
        ]

        /// Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window. Default: true 
        public let autoMinorVersionUpgrade: Bool?
        ///  The Amazon EC2 Availability Zone that the DB instance is created in. Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.  Example: us-east-1d   Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to true. The specified Availability Zone must be in the same AWS Region as the current endpoint. 
        public let availabilityZone: String?
        /// The identifier of the DB cluster that the instance will belong to.
        public let dBClusterIdentifier: String
        /// The compute and memory capacity of the DB instance; for example, db.r5.large. 
        public let dBInstanceClass: String
        /// The DB instance identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: mydbinstance 
        public let dBInstanceIdentifier: String
        /// The name of the database engine to be used for this instance. Valid value: docdb 
        public let engine: String
        /// The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).  Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.  Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance. Default: 1 Valid values: 0-15
        public let promotionTier: Int?
        /// The tags to be assigned to the DB instance. You can assign up to 10 tags to an instance.
        public let tags: [Tag]?

        public init(autoMinorVersionUpgrade: Bool? = nil, availabilityZone: String? = nil, dBClusterIdentifier: String, dBInstanceClass: String, dBInstanceIdentifier: String, engine: String, preferredMaintenanceWindow: String? = nil, promotionTier: Int? = nil, tags: [Tag]? = nil) {
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.availabilityZone = availabilityZone
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.engine = engine
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.promotionTier = promotionTier
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case availabilityZone = "AvailabilityZone"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBInstanceClass = "DBInstanceClass"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case engine = "Engine"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case promotionTier = "PromotionTier"
            case tags = "Tags"
        }
    }

    public struct CreateDBInstanceResult: AWSShape {

        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct CreateDBSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", encoding: .list(member:"SubnetIdentifier")), 
            AWSShapeMember(label: "Tags", encoding: .list(member:"Tag"))
        ]

        /// The description for the DB subnet group.
        public let dBSubnetGroupDescription: String
        /// The name for the DB subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default. Example: mySubnetgroup 
        public let dBSubnetGroupName: String
        /// The Amazon EC2 subnet IDs for the DB subnet group.
        public let subnetIds: [String]
        /// The tags to be assigned to the DB subnet group.
        public let tags: [Tag]?

        public init(dBSubnetGroupDescription: String, dBSubnetGroupName: String, subnetIds: [String], tags: [Tag]? = nil) {
            self.dBSubnetGroupDescription = dBSubnetGroupDescription
            self.dBSubnetGroupName = dBSubnetGroupName
            self.subnetIds = subnetIds
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupDescription = "DBSubnetGroupDescription"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case subnetIds = "SubnetIds"
            case tags = "Tags"
        }
    }

    public struct CreateDBSubnetGroupResult: AWSShape {

        public let dBSubnetGroup: DBSubnetGroup?

        public init(dBSubnetGroup: DBSubnetGroup? = nil) {
            self.dBSubnetGroup = dBSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroup = "DBSubnetGroup"
        }
    }

    public struct DBCluster: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociatedRoles", encoding: .list(member:"DBClusterRole")), 
            AWSShapeMember(label: "AvailabilityZones", encoding: .list(member:"AvailabilityZone")), 
            AWSShapeMember(label: "DBClusterMembers", encoding: .list(member:"DBClusterMember")), 
            AWSShapeMember(label: "EnabledCloudwatchLogsExports", encoding: .list(member:"member")), 
            AWSShapeMember(label: "VpcSecurityGroups", encoding: .list(member:"VpcSecurityGroupMembership"))
        ]

        /// Provides a list of the AWS Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other AWS services on your behalf.
        public let associatedRoles: [DBClusterRole]?
        /// Provides the list of Amazon EC2 Availability Zones that instances in the DB cluster can be created in.
        public let availabilityZones: [String]?
        /// Specifies the number of days for which automatic DB snapshots are retained.
        public let backupRetentionPeriod: Int?
        /// Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public let clusterCreateTime: TimeStamp?
        /// The Amazon Resource Name (ARN) for the DB cluster.
        public let dBClusterArn: String?
        /// Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.
        public let dBClusterIdentifier: String?
        /// Provides the list of instances that make up the DB cluster.
        public let dBClusterMembers: [DBClusterMember]?
        /// Specifies the name of the DB cluster parameter group for the DB cluster.
        public let dBClusterParameterGroup: String?
        /// The AWS Region-unique, immutable identifier for the DB cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed.
        public let dbClusterResourceId: String?
        /// Specifies information on the subnet group that is associated with the DB cluster, including the name, description, and subnets in the subnet group.
        public let dBSubnetGroup: String?
        /// Specifies whether this cluster can be deleted. If DeletionProtection is enabled, the cluster cannot be deleted unless it is modified and DeletionProtection is disabled. DeletionProtection protects clusters from being accidentally deleted.
        public let deletionProtection: Bool?
        /// The earliest time to which a database can be restored with point-in-time restore.
        public let earliestRestorableTime: TimeStamp?
        /// A list of log types that this DB cluster is configured to export to Amazon CloudWatch Logs.
        public let enabledCloudwatchLogsExports: [String]?
        /// Specifies the connection endpoint for the primary instance of the DB cluster.
        public let endpoint: String?
        /// Provides the name of the database engine to be used for this DB cluster.
        public let engine: String?
        /// Indicates the database engine version.
        public let engineVersion: String?
        /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
        public let hostedZoneId: String?
        /// If StorageEncrypted is true, the AWS KMS key identifier for the encrypted DB cluster.
        public let kmsKeyId: String?
        /// Specifies the latest time to which a database can be restored with point-in-time restore.
        public let latestRestorableTime: TimeStamp?
        /// Contains the master user name for the DB cluster.
        public let masterUsername: String?
        /// Specifies whether the DB cluster has instances in multiple Availability Zones.
        public let multiAZ: Bool?
        /// Specifies the progress of the operation as a percentage.
        public let percentProgress: String?
        /// Specifies the port that the database engine is listening on.
        public let port: Int?
        /// Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod. 
        public let preferredBackupWindow: String?
        /// Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public let preferredMaintenanceWindow: String?
        /// The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load balances connections across the Amazon DocumentDB replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Amazon DocumentDB distributes the connection requests among the Amazon DocumentDB replicas in the DB cluster. This functionality can help balance your read workload across multiple Amazon DocumentDB replicas in your DB cluster.  If a failover occurs, and the Amazon DocumentDB replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Amazon DocumentDB replicas in the cluster, you can then reconnect to the reader endpoint.
        public let readerEndpoint: String?
        /// Specifies the current state of this DB cluster.
        public let status: String?
        /// Specifies whether the DB cluster is encrypted.
        public let storageEncrypted: Bool?
        /// Provides a list of virtual private cloud (VPC) security groups that the DB cluster belongs to.
        public let vpcSecurityGroups: [VpcSecurityGroupMembership]?

        public init(associatedRoles: [DBClusterRole]? = nil, availabilityZones: [String]? = nil, backupRetentionPeriod: Int? = nil, clusterCreateTime: TimeStamp? = nil, dBClusterArn: String? = nil, dBClusterIdentifier: String? = nil, dBClusterMembers: [DBClusterMember]? = nil, dBClusterParameterGroup: String? = nil, dbClusterResourceId: String? = nil, dBSubnetGroup: String? = nil, deletionProtection: Bool? = nil, earliestRestorableTime: TimeStamp? = nil, enabledCloudwatchLogsExports: [String]? = nil, endpoint: String? = nil, engine: String? = nil, engineVersion: String? = nil, hostedZoneId: String? = nil, kmsKeyId: String? = nil, latestRestorableTime: TimeStamp? = nil, masterUsername: String? = nil, multiAZ: Bool? = nil, percentProgress: String? = nil, port: Int? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, readerEndpoint: String? = nil, status: String? = nil, storageEncrypted: Bool? = nil, vpcSecurityGroups: [VpcSecurityGroupMembership]? = nil) {
            self.associatedRoles = associatedRoles
            self.availabilityZones = availabilityZones
            self.backupRetentionPeriod = backupRetentionPeriod
            self.clusterCreateTime = clusterCreateTime
            self.dBClusterArn = dBClusterArn
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterMembers = dBClusterMembers
            self.dBClusterParameterGroup = dBClusterParameterGroup
            self.dbClusterResourceId = dbClusterResourceId
            self.dBSubnetGroup = dBSubnetGroup
            self.deletionProtection = deletionProtection
            self.earliestRestorableTime = earliestRestorableTime
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.endpoint = endpoint
            self.engine = engine
            self.engineVersion = engineVersion
            self.hostedZoneId = hostedZoneId
            self.kmsKeyId = kmsKeyId
            self.latestRestorableTime = latestRestorableTime
            self.masterUsername = masterUsername
            self.multiAZ = multiAZ
            self.percentProgress = percentProgress
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.readerEndpoint = readerEndpoint
            self.status = status
            self.storageEncrypted = storageEncrypted
            self.vpcSecurityGroups = vpcSecurityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case associatedRoles = "AssociatedRoles"
            case availabilityZones = "AvailabilityZones"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case clusterCreateTime = "ClusterCreateTime"
            case dBClusterArn = "DBClusterArn"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterMembers = "DBClusterMembers"
            case dBClusterParameterGroup = "DBClusterParameterGroup"
            case dbClusterResourceId = "DbClusterResourceId"
            case dBSubnetGroup = "DBSubnetGroup"
            case deletionProtection = "DeletionProtection"
            case earliestRestorableTime = "EarliestRestorableTime"
            case enabledCloudwatchLogsExports = "EnabledCloudwatchLogsExports"
            case endpoint = "Endpoint"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case hostedZoneId = "HostedZoneId"
            case kmsKeyId = "KmsKeyId"
            case latestRestorableTime = "LatestRestorableTime"
            case masterUsername = "MasterUsername"
            case multiAZ = "MultiAZ"
            case percentProgress = "PercentProgress"
            case port = "Port"
            case preferredBackupWindow = "PreferredBackupWindow"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case readerEndpoint = "ReaderEndpoint"
            case status = "Status"
            case storageEncrypted = "StorageEncrypted"
            case vpcSecurityGroups = "VpcSecurityGroups"
        }
    }

    public struct DBClusterMember: AWSShape {

        /// Specifies the status of the DB cluster parameter group for this member of the DB cluster.
        public let dBClusterParameterGroupStatus: String?
        /// Specifies the instance identifier for this member of the DB cluster.
        public let dBInstanceIdentifier: String?
        /// A value that is true if the cluster member is the primary instance for the DB cluster and false otherwise.
        public let isClusterWriter: Bool?
        /// A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance. 
        public let promotionTier: Int?

        public init(dBClusterParameterGroupStatus: String? = nil, dBInstanceIdentifier: String? = nil, isClusterWriter: Bool? = nil, promotionTier: Int? = nil) {
            self.dBClusterParameterGroupStatus = dBClusterParameterGroupStatus
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.isClusterWriter = isClusterWriter
            self.promotionTier = promotionTier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupStatus = "DBClusterParameterGroupStatus"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case isClusterWriter = "IsClusterWriter"
            case promotionTier = "PromotionTier"
        }
    }

    public struct DBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusters", encoding: .list(member:"DBCluster"))
        ]

        /// A list of DB clusters.
        public let dBClusters: [DBCluster]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBClusters: [DBCluster]? = nil, marker: String? = nil) {
            self.dBClusters = dBClusters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusters = "DBClusters"
            case marker = "Marker"
        }
    }

    public struct DBClusterParameterGroup: AWSShape {

        /// The Amazon Resource Name (ARN) for the DB cluster parameter group.
        public let dBClusterParameterGroupArn: String?
        /// Provides the name of the DB cluster parameter group.
        public let dBClusterParameterGroupName: String?
        /// Provides the name of the DB parameter group family that this DB cluster parameter group is compatible with.
        public let dBParameterGroupFamily: String?
        /// Provides the customer-specified description for this DB cluster parameter group.
        public let description: String?

        public init(dBClusterParameterGroupArn: String? = nil, dBClusterParameterGroupName: String? = nil, dBParameterGroupFamily: String? = nil, description: String? = nil) {
            self.dBClusterParameterGroupArn = dBClusterParameterGroupArn
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupArn = "DBClusterParameterGroupArn"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case description = "Description"
        }
    }

    public struct DBClusterParameterGroupDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", encoding: .list(member:"Parameter"))
        ]

        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// Provides a list of parameters for the DB cluster parameter group.
        public let parameters: [Parameter]?

        public init(marker: String? = nil, parameters: [Parameter]? = nil) {
            self.marker = marker
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case parameters = "Parameters"
        }
    }

    public struct DBClusterParameterGroupNameMessage: AWSShape {

        /// The name of a DB cluster parameter group. Constraints:   Must be from 1 to 255 letters or numbers.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.    This value is stored as a lowercase string. 
        public let dBClusterParameterGroupName: String?

        public init(dBClusterParameterGroupName: String? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct DBClusterParameterGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroups", encoding: .list(member:"DBClusterParameterGroup"))
        ]

        /// A list of DB cluster parameter groups.
        public let dBClusterParameterGroups: [DBClusterParameterGroup]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBClusterParameterGroups: [DBClusterParameterGroup]? = nil, marker: String? = nil) {
            self.dBClusterParameterGroups = dBClusterParameterGroups
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroups = "DBClusterParameterGroups"
            case marker = "Marker"
        }
    }

    public struct DBClusterRole: AWSShape {

        /// The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.
        public let roleArn: String?
        /// Describes the state of association between the IAM role and the DB cluster. The Status property returns one of the following values:    ACTIVE - The IAM role ARN is associated with the DB cluster and can be used to access other AWS services on your behalf.    PENDING - The IAM role ARN is being associated with the DB cluster.    INVALID - The IAM role ARN is associated with the DB cluster, but the DB cluster cannot assume the IAM role to access other AWS services on your behalf.  
        public let status: String?

        public init(roleArn: String? = nil, status: String? = nil) {
            self.roleArn = roleArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case status = "Status"
        }
    }

    public struct DBClusterSnapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", encoding: .list(member:"AvailabilityZone"))
        ]

        /// Provides the list of Amazon EC2 Availability Zones that instances in the DB cluster snapshot can be restored in.
        public let availabilityZones: [String]?
        /// Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public let clusterCreateTime: TimeStamp?
        /// Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.
        public let dBClusterIdentifier: String?
        /// The Amazon Resource Name (ARN) for the DB cluster snapshot.
        public let dBClusterSnapshotArn: String?
        /// Specifies the identifier for the DB cluster snapshot.
        public let dBClusterSnapshotIdentifier: String?
        /// Specifies the name of the database engine.
        public let engine: String?
        /// Provides the version of the database engine for this DB cluster snapshot.
        public let engineVersion: String?
        /// If StorageEncrypted is true, the AWS KMS key identifier for the encrypted DB cluster snapshot.
        public let kmsKeyId: String?
        /// Provides the master user name for the DB cluster snapshot.
        public let masterUsername: String?
        /// Specifies the percentage of the estimated data that has been transferred.
        public let percentProgress: Int?
        /// Specifies the port that the DB cluster was listening on at the time of the snapshot.
        public let port: Int?
        /// Provides the time when the snapshot was taken, in UTC.
        public let snapshotCreateTime: TimeStamp?
        /// Provides the type of the DB cluster snapshot.
        public let snapshotType: String?
        /// If the DB cluster snapshot was copied from a source DB cluster snapshot, the ARN for the source DB cluster snapshot; otherwise, a null value.
        public let sourceDBClusterSnapshotArn: String?
        /// Specifies the status of this DB cluster snapshot.
        public let status: String?
        /// Specifies whether the DB cluster snapshot is encrypted.
        public let storageEncrypted: Bool?
        /// Provides the virtual private cloud (VPC) ID that is associated with the DB cluster snapshot.
        public let vpcId: String?

        public init(availabilityZones: [String]? = nil, clusterCreateTime: TimeStamp? = nil, dBClusterIdentifier: String? = nil, dBClusterSnapshotArn: String? = nil, dBClusterSnapshotIdentifier: String? = nil, engine: String? = nil, engineVersion: String? = nil, kmsKeyId: String? = nil, masterUsername: String? = nil, percentProgress: Int? = nil, port: Int? = nil, snapshotCreateTime: TimeStamp? = nil, snapshotType: String? = nil, sourceDBClusterSnapshotArn: String? = nil, status: String? = nil, storageEncrypted: Bool? = nil, vpcId: String? = nil) {
            self.availabilityZones = availabilityZones
            self.clusterCreateTime = clusterCreateTime
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterSnapshotArn = dBClusterSnapshotArn
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.engine = engine
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.masterUsername = masterUsername
            self.percentProgress = percentProgress
            self.port = port
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotType = snapshotType
            self.sourceDBClusterSnapshotArn = sourceDBClusterSnapshotArn
            self.status = status
            self.storageEncrypted = storageEncrypted
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case clusterCreateTime = "ClusterCreateTime"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterSnapshotArn = "DBClusterSnapshotArn"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case kmsKeyId = "KmsKeyId"
            case masterUsername = "MasterUsername"
            case percentProgress = "PercentProgress"
            case port = "Port"
            case snapshotCreateTime = "SnapshotCreateTime"
            case snapshotType = "SnapshotType"
            case sourceDBClusterSnapshotArn = "SourceDBClusterSnapshotArn"
            case status = "Status"
            case storageEncrypted = "StorageEncrypted"
            case vpcId = "VpcId"
        }
    }

    public struct DBClusterSnapshotAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeValues", encoding: .list(member:"AttributeValue"))
        ]

        /// The name of the manual DB cluster snapshot attribute. The attribute named restore refers to the list of AWS accounts that have permission to copy or restore the manual DB cluster snapshot.
        public let attributeName: String?
        /// The values for the manual DB cluster snapshot attribute. If the AttributeName field is set to restore, then this element returns a list of IDs of the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If a value of all is in the list, then the manual DB cluster snapshot is public and available for any AWS account to copy or restore.
        public let attributeValues: [String]?

        public init(attributeName: String? = nil, attributeValues: [String]? = nil) {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case attributeValues = "AttributeValues"
        }
    }

    public struct DBClusterSnapshotAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotAttributes", encoding: .list(member:"DBClusterSnapshotAttribute"))
        ]

        /// The list of attributes and values for the DB cluster snapshot.
        public let dBClusterSnapshotAttributes: [DBClusterSnapshotAttribute]?
        /// The identifier of the DB cluster snapshot that the attributes apply to.
        public let dBClusterSnapshotIdentifier: String?

        public init(dBClusterSnapshotAttributes: [DBClusterSnapshotAttribute]? = nil, dBClusterSnapshotIdentifier: String? = nil) {
            self.dBClusterSnapshotAttributes = dBClusterSnapshotAttributes
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotAttributes = "DBClusterSnapshotAttributes"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        }
    }

    public struct DBClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshots", encoding: .list(member:"DBClusterSnapshot"))
        ]

        /// Provides a list of DB cluster snapshots.
        public let dBClusterSnapshots: [DBClusterSnapshot]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBClusterSnapshots: [DBClusterSnapshot]? = nil, marker: String? = nil) {
            self.dBClusterSnapshots = dBClusterSnapshots
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshots = "DBClusterSnapshots"
            case marker = "Marker"
        }
    }

    public struct DBEngineVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportableLogTypes", encoding: .list(member:"member")), 
            AWSShapeMember(label: "ValidUpgradeTarget", encoding: .list(member:"UpgradeTarget"))
        ]

        /// The description of the database engine.
        public let dBEngineDescription: String?
        /// The description of the database engine version.
        public let dBEngineVersionDescription: String?
        /// The name of the DB parameter group family for the database engine.
        public let dBParameterGroupFamily: String?
        /// The name of the database engine.
        public let engine: String?
        /// The version number of the database engine.
        public let engineVersion: String?
        /// The types of logs that the database engine has available for export to Amazon CloudWatch Logs.
        public let exportableLogTypes: [String]?
        /// A value that indicates whether the engine version supports exporting the log types specified by ExportableLogTypes to CloudWatch Logs.
        public let supportsLogExportsToCloudwatchLogs: Bool?
        /// A list of engine versions that this database engine version can be upgraded to.
        public let validUpgradeTarget: [UpgradeTarget]?

        public init(dBEngineDescription: String? = nil, dBEngineVersionDescription: String? = nil, dBParameterGroupFamily: String? = nil, engine: String? = nil, engineVersion: String? = nil, exportableLogTypes: [String]? = nil, supportsLogExportsToCloudwatchLogs: Bool? = nil, validUpgradeTarget: [UpgradeTarget]? = nil) {
            self.dBEngineDescription = dBEngineDescription
            self.dBEngineVersionDescription = dBEngineVersionDescription
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.engine = engine
            self.engineVersion = engineVersion
            self.exportableLogTypes = exportableLogTypes
            self.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs
            self.validUpgradeTarget = validUpgradeTarget
        }

        private enum CodingKeys: String, CodingKey {
            case dBEngineDescription = "DBEngineDescription"
            case dBEngineVersionDescription = "DBEngineVersionDescription"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case exportableLogTypes = "ExportableLogTypes"
            case supportsLogExportsToCloudwatchLogs = "SupportsLogExportsToCloudwatchLogs"
            case validUpgradeTarget = "ValidUpgradeTarget"
        }
    }

    public struct DBEngineVersionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBEngineVersions", encoding: .list(member:"DBEngineVersion"))
        ]

        /// Detailed information about one or more DB engine versions.
        public let dBEngineVersions: [DBEngineVersion]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBEngineVersions: [DBEngineVersion]? = nil, marker: String? = nil) {
            self.dBEngineVersions = dBEngineVersions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBEngineVersions = "DBEngineVersions"
            case marker = "Marker"
        }
    }

    public struct DBInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnabledCloudwatchLogsExports", encoding: .list(member:"member")), 
            AWSShapeMember(label: "StatusInfos", encoding: .list(member:"DBInstanceStatusInfo")), 
            AWSShapeMember(label: "VpcSecurityGroups", encoding: .list(member:"VpcSecurityGroupMembership"))
        ]

        /// Indicates that minor version patches are applied automatically.
        public let autoMinorVersionUpgrade: Bool?
        /// Specifies the name of the Availability Zone that the DB instance is located in.
        public let availabilityZone: String?
        /// Specifies the number of days for which automatic DB snapshots are retained.
        public let backupRetentionPeriod: Int?
        /// The identifier of the CA certificate for this DB instance.
        public let cACertificateIdentifier: String?
        /// Contains the name of the DB cluster that the DB instance is a member of if the DB instance is a member of a DB cluster.
        public let dBClusterIdentifier: String?
        /// The Amazon Resource Name (ARN) for the DB instance.
        public let dBInstanceArn: String?
        /// Contains the name of the compute and memory capacity class of the DB instance.
        public let dBInstanceClass: String?
        /// Contains a user-provided database identifier. This identifier is the unique key that identifies a DB instance.
        public let dBInstanceIdentifier: String?
        /// Specifies the current state of this database.
        public let dBInstanceStatus: String?
        /// The AWS Region-unique, immutable identifier for the DB instance. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB instance is accessed.
        public let dbiResourceId: String?
        /// Specifies information on the subnet group that is associated with the DB instance, including the name, description, and subnets in the subnet group.
        public let dBSubnetGroup: DBSubnetGroup?
        /// A list of log types that this DB instance is configured to export to Amazon CloudWatch Logs.
        public let enabledCloudwatchLogsExports: [String]?
        /// Specifies the connection endpoint.
        public let endpoint: Endpoint?
        /// Provides the name of the database engine to be used for this DB instance.
        public let engine: String?
        /// Indicates the database engine version.
        public let engineVersion: String?
        /// Provides the date and time that the DB instance was created.
        public let instanceCreateTime: TimeStamp?
        ///  If StorageEncrypted is true, the AWS KMS key identifier for the encrypted DB instance. 
        public let kmsKeyId: String?
        /// Specifies the latest time to which a database can be restored with point-in-time restore.
        public let latestRestorableTime: TimeStamp?
        /// Specifies that changes to the DB instance are pending. This element is included only when changes are pending. Specific changes are identified by subelements.
        public let pendingModifiedValues: PendingModifiedValues?
        ///  Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod. 
        public let preferredBackupWindow: String?
        /// Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public let preferredMaintenanceWindow: String?
        /// A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.
        public let promotionTier: Int?
        /// Not supported. Amazon DocumentDB does not currently support public endpoints. The value of PubliclyAccessible is always false.
        public let publiclyAccessible: Bool?
        /// The status of a read replica. If the instance is not a read replica, this is blank.
        public let statusInfos: [DBInstanceStatusInfo]?
        /// Specifies whether or not the DB instance is encrypted.
        public let storageEncrypted: Bool?
        /// Provides a list of VPC security group elements that the DB instance belongs to.
        public let vpcSecurityGroups: [VpcSecurityGroupMembership]?

        public init(autoMinorVersionUpgrade: Bool? = nil, availabilityZone: String? = nil, backupRetentionPeriod: Int? = nil, cACertificateIdentifier: String? = nil, dBClusterIdentifier: String? = nil, dBInstanceArn: String? = nil, dBInstanceClass: String? = nil, dBInstanceIdentifier: String? = nil, dBInstanceStatus: String? = nil, dbiResourceId: String? = nil, dBSubnetGroup: DBSubnetGroup? = nil, enabledCloudwatchLogsExports: [String]? = nil, endpoint: Endpoint? = nil, engine: String? = nil, engineVersion: String? = nil, instanceCreateTime: TimeStamp? = nil, kmsKeyId: String? = nil, latestRestorableTime: TimeStamp? = nil, pendingModifiedValues: PendingModifiedValues? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, promotionTier: Int? = nil, publiclyAccessible: Bool? = nil, statusInfos: [DBInstanceStatusInfo]? = nil, storageEncrypted: Bool? = nil, vpcSecurityGroups: [VpcSecurityGroupMembership]? = nil) {
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.availabilityZone = availabilityZone
            self.backupRetentionPeriod = backupRetentionPeriod
            self.cACertificateIdentifier = cACertificateIdentifier
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBInstanceArn = dBInstanceArn
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBInstanceStatus = dBInstanceStatus
            self.dbiResourceId = dbiResourceId
            self.dBSubnetGroup = dBSubnetGroup
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.endpoint = endpoint
            self.engine = engine
            self.engineVersion = engineVersion
            self.instanceCreateTime = instanceCreateTime
            self.kmsKeyId = kmsKeyId
            self.latestRestorableTime = latestRestorableTime
            self.pendingModifiedValues = pendingModifiedValues
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.promotionTier = promotionTier
            self.publiclyAccessible = publiclyAccessible
            self.statusInfos = statusInfos
            self.storageEncrypted = storageEncrypted
            self.vpcSecurityGroups = vpcSecurityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case availabilityZone = "AvailabilityZone"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case cACertificateIdentifier = "CACertificateIdentifier"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBInstanceArn = "DBInstanceArn"
            case dBInstanceClass = "DBInstanceClass"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBInstanceStatus = "DBInstanceStatus"
            case dbiResourceId = "DbiResourceId"
            case dBSubnetGroup = "DBSubnetGroup"
            case enabledCloudwatchLogsExports = "EnabledCloudwatchLogsExports"
            case endpoint = "Endpoint"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case instanceCreateTime = "InstanceCreateTime"
            case kmsKeyId = "KmsKeyId"
            case latestRestorableTime = "LatestRestorableTime"
            case pendingModifiedValues = "PendingModifiedValues"
            case preferredBackupWindow = "PreferredBackupWindow"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case promotionTier = "PromotionTier"
            case publiclyAccessible = "PubliclyAccessible"
            case statusInfos = "StatusInfos"
            case storageEncrypted = "StorageEncrypted"
            case vpcSecurityGroups = "VpcSecurityGroups"
        }
    }

    public struct DBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstances", encoding: .list(member:"DBInstance"))
        ]

        /// Detailed information about one or more DB instances. 
        public let dBInstances: [DBInstance]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBInstances: [DBInstance]? = nil, marker: String? = nil) {
            self.dBInstances = dBInstances
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstances = "DBInstances"
            case marker = "Marker"
        }
    }

    public struct DBInstanceStatusInfo: AWSShape {

        /// Details of the error if there is an error for the instance. If the instance is not in an error state, this value is blank.
        public let message: String?
        /// A Boolean value that is true if the instance is operating normally, or false if the instance is in an error state.
        public let normal: Bool?
        /// Status of the DB instance. For a StatusType of read replica, the values can be replicating, error, stopped, or terminated.
        public let status: String?
        /// This value is currently "read replication."
        public let statusType: String?

        public init(message: String? = nil, normal: Bool? = nil, status: String? = nil, statusType: String? = nil) {
            self.message = message
            self.normal = normal
            self.status = status
            self.statusType = statusType
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case normal = "Normal"
            case status = "Status"
            case statusType = "StatusType"
        }
    }

    public struct DBSubnetGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnets", encoding: .list(member:"Subnet"))
        ]

        /// The Amazon Resource Name (ARN) for the DB subnet group.
        public let dBSubnetGroupArn: String?
        /// Provides the description of the DB subnet group.
        public let dBSubnetGroupDescription: String?
        /// The name of the DB subnet group.
        public let dBSubnetGroupName: String?
        /// Provides the status of the DB subnet group.
        public let subnetGroupStatus: String?
        /// Detailed information about one or more subnets within a DB subnet group.
        public let subnets: [Subnet]?
        /// Provides the virtual private cloud (VPC) ID of the DB subnet group.
        public let vpcId: String?

        public init(dBSubnetGroupArn: String? = nil, dBSubnetGroupDescription: String? = nil, dBSubnetGroupName: String? = nil, subnetGroupStatus: String? = nil, subnets: [Subnet]? = nil, vpcId: String? = nil) {
            self.dBSubnetGroupArn = dBSubnetGroupArn
            self.dBSubnetGroupDescription = dBSubnetGroupDescription
            self.dBSubnetGroupName = dBSubnetGroupName
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupArn = "DBSubnetGroupArn"
            case dBSubnetGroupDescription = "DBSubnetGroupDescription"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case subnetGroupStatus = "SubnetGroupStatus"
            case subnets = "Subnets"
            case vpcId = "VpcId"
        }
    }

    public struct DBSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSubnetGroups", encoding: .list(member:"DBSubnetGroup"))
        ]

        /// Detailed information about one or more DB subnet groups.
        public let dBSubnetGroups: [DBSubnetGroup]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBSubnetGroups: [DBSubnetGroup]? = nil, marker: String? = nil) {
            self.dBSubnetGroups = dBSubnetGroups
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroups = "DBSubnetGroups"
            case marker = "Marker"
        }
    }

    public struct DeleteDBClusterMessage: AWSShape {

        /// The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case sensitive. Constraints:   Must match an existing DBClusterIdentifier.  
        public let dBClusterIdentifier: String
        ///  The DB cluster snapshot identifier of the new DB cluster snapshot created when SkipFinalSnapshot is set to false.    Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.   Constraints:   Must be from 1 to 255 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let finalDBSnapshotIdentifier: String?
        ///  Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If true is specified, no DB cluster snapshot is created. If false is specified, a DB cluster snapshot is created before the DB cluster is deleted.   If SkipFinalSnapshot is false, you must specify a FinalDBSnapshotIdentifier parameter.  Default: false 
        public let skipFinalSnapshot: Bool?

        public init(dBClusterIdentifier: String, finalDBSnapshotIdentifier: String? = nil, skipFinalSnapshot: Bool? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.finalDBSnapshotIdentifier = finalDBSnapshotIdentifier
            self.skipFinalSnapshot = skipFinalSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case finalDBSnapshotIdentifier = "FinalDBSnapshotIdentifier"
            case skipFinalSnapshot = "SkipFinalSnapshot"
        }
    }

    public struct DeleteDBClusterParameterGroupMessage: AWSShape {

        /// The name of the DB cluster parameter group. Constraints:   Must be the name of an existing DB cluster parameter group.   You can't delete a default DB cluster parameter group.   Cannot be associated with any DB clusters.  
        public let dBClusterParameterGroupName: String

        public init(dBClusterParameterGroupName: String) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct DeleteDBClusterResult: AWSShape {

        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct DeleteDBClusterSnapshotMessage: AWSShape {

        /// The identifier of the DB cluster snapshot to delete. Constraints: Must be the name of an existing DB cluster snapshot in the available state.
        public let dBClusterSnapshotIdentifier: String

        public init(dBClusterSnapshotIdentifier: String) {
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        }
    }

    public struct DeleteDBClusterSnapshotResult: AWSShape {

        public let dBClusterSnapshot: DBClusterSnapshot?

        public init(dBClusterSnapshot: DBClusterSnapshot? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct DeleteDBInstanceMessage: AWSShape {

        /// The DB instance identifier for the DB instance to be deleted. This parameter isn't case sensitive. Constraints:   Must match the name of an existing DB instance.  
        public let dBInstanceIdentifier: String

        public init(dBInstanceIdentifier: String) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct DeleteDBInstanceResult: AWSShape {

        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct DeleteDBSubnetGroupMessage: AWSShape {

        /// The name of the database subnet group to delete.  You can't delete the default subnet group.  Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup 
        public let dBSubnetGroupName: String

        public init(dBSubnetGroupName: String) {
            self.dBSubnetGroupName = dBSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupName = "DBSubnetGroupName"
        }
    }

    public struct DescribeCertificatesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// The user-supplied certificate identifier. If this parameter is specified, information for only the specified certificate is returned. If this parameter is omitted, a list of up to MaxRecords certificates is returned. This parameter is not case sensitive. Constraints   Must match an existing CertificateIdentifier.  
        public let certificateIdentifier: String?
        /// This parameter is not currently supported.
        public let filters: [Filter]?
        /// An optional pagination token provided by a previous DescribeCertificates request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints:   Minimum: 20   Maximum: 100  
        public let maxRecords: Int?

        public init(certificateIdentifier: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.certificateIdentifier = certificateIdentifier
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case certificateIdentifier = "CertificateIdentifier"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBClusterParameterGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// The name of a specific DB cluster parameter group to return details for. Constraints:   If provided, must match the name of an existing DBClusterParameterGroup.  
        public let dBClusterParameterGroupName: String?
        /// This parameter is not currently supported.
        public let filters: [Filter]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBClusterParameterGroupName: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBClusterParametersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// The name of a specific DB cluster parameter group to return parameter details for. Constraints:   If provided, must match the name of an existing DBClusterParameterGroup.  
        public let dBClusterParameterGroupName: String
        /// This parameter is not currently supported.
        public let filters: [Filter]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        ///  A value that indicates to return only parameters for a specific source. Parameter sources can be engine, service, or customer. 
        public let source: String?

        public init(dBClusterParameterGroupName: String, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil, source: String? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case source = "Source"
        }
    }

    public struct DescribeDBClusterSnapshotAttributesMessage: AWSShape {

        /// The identifier for the DB cluster snapshot to describe the attributes for.
        public let dBClusterSnapshotIdentifier: String

        public init(dBClusterSnapshotIdentifier: String) {
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        }
    }

    public struct DescribeDBClusterSnapshotAttributesResult: AWSShape {

        public let dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult?

        public init(dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult? = nil) {
            self.dBClusterSnapshotAttributesResult = dBClusterSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotAttributesResult = "DBClusterSnapshotAttributesResult"
        }
    }

    public struct DescribeDBClusterSnapshotsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used with the DBClusterSnapshotIdentifier parameter. This parameter is not case sensitive.  Constraints:   If provided, must match the identifier of an existing DBCluster.  
        public let dBClusterIdentifier: String?
        /// A specific DB cluster snapshot identifier to describe. This parameter can't be used with the DBClusterIdentifier parameter. This value is stored as a lowercase string.  Constraints:   If provided, must match the identifier of an existing DBClusterSnapshot.   If this identifier is for an automated snapshot, the SnapshotType parameter must also be specified.  
        public let dBClusterSnapshotIdentifier: String?
        /// This parameter is not currently supported.
        public let filters: [Filter]?
        /// Set to true to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is false.
        public let includePublic: Bool?
        /// Set to true to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is false.
        public let includeShared: Bool?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The type of DB cluster snapshots to be returned. You can specify one of the following values:    automated - Return all DB cluster snapshots that Amazon DocumentDB has automatically created for your AWS account.    manual - Return all DB cluster snapshots that you have manually created for your AWS account.    shared - Return all manual DB cluster snapshots that have been shared to your AWS account.    public - Return all DB cluster snapshots that have been marked as public.   If you don't specify a SnapshotType value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the IncludeShared parameter to true. You can include public DB cluster snapshots with these results by setting the IncludePublic parameter to true. The IncludeShared and IncludePublic parameters don't apply for SnapshotType values of manual or automated. The IncludePublic parameter doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply when SnapshotType is set to public.
        public let snapshotType: String?

        public init(dBClusterIdentifier: String? = nil, dBClusterSnapshotIdentifier: String? = nil, filters: [Filter]? = nil, includePublic: Bool? = nil, includeShared: Bool? = nil, marker: String? = nil, maxRecords: Int? = nil, snapshotType: String? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.filters = filters
            self.includePublic = includePublic
            self.includeShared = includeShared
            self.marker = marker
            self.maxRecords = maxRecords
            self.snapshotType = snapshotType
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case filters = "Filters"
            case includePublic = "IncludePublic"
            case includeShared = "IncludeShared"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case snapshotType = "SnapshotType"
        }
    }

    public struct DescribeDBClustersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// The user-provided DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case sensitive. Constraints:   If provided, must match an existing DBClusterIdentifier.  
        public let dBClusterIdentifier: String?
        /// A filter that specifies one or more DB clusters to describe. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list only includes information about the DB clusters identified by these ARNs.  
        public let filters: [Filter]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBClusterIdentifier: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBEngineVersionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// The name of a specific DB parameter group family to return details for. Constraints:   If provided, must match an existing DBParameterGroupFamily.  
        public let dBParameterGroupFamily: String?
        /// Indicates that only the default version of the specified engine or engine and major version combination is returned.
        public let defaultOnly: Bool?
        /// The database engine to return.
        public let engine: String?
        /// The database engine version to return. Example: 5.1.49 
        public let engineVersion: String?
        /// This parameter is not currently supported.
        public let filters: [Filter]?
        /// If this parameter is specified and the requested engine supports the CharacterSetName parameter for CreateDBInstance, the response includes a list of supported character sets for each engine version. 
        public let listSupportedCharacterSets: Bool?
        /// If this parameter is specified and the requested engine supports the TimeZone parameter for CreateDBInstance, the response includes a list of supported time zones for each engine version. 
        public let listSupportedTimezones: Bool?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBParameterGroupFamily: String? = nil, defaultOnly: Bool? = nil, engine: String? = nil, engineVersion: String? = nil, filters: [Filter]? = nil, listSupportedCharacterSets: Bool? = nil, listSupportedTimezones: Bool? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.defaultOnly = defaultOnly
            self.engine = engine
            self.engineVersion = engineVersion
            self.filters = filters
            self.listSupportedCharacterSets = listSupportedCharacterSets
            self.listSupportedTimezones = listSupportedTimezones
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case defaultOnly = "DefaultOnly"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case filters = "Filters"
            case listSupportedCharacterSets = "ListSupportedCharacterSets"
            case listSupportedTimezones = "ListSupportedTimezones"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBInstancesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// The user-provided instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case sensitive. Constraints:   If provided, must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String?
        /// A filter that specifies one or more DB instances to describe. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list includes only the information about the DB instances that are associated with the DB clusters that are identified by these ARNs.    db-instance-id - Accepts DB instance identifiers and DB instance ARNs. The results list includes only the information about the DB instances that are identified by these ARNs.  
        public let filters: [Filter]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBInstanceIdentifier: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBSubnetGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// The name of the DB subnet group to return details for.
        public let dBSubnetGroupName: String?
        /// This parameter is not currently supported.
        public let filters: [Filter]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBSubnetGroupName: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBSubnetGroupName = dBSubnetGroupName
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupName = "DBSubnetGroupName"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeEngineDefaultClusterParametersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// The name of the DB cluster parameter group family to return the engine parameter information for.
        public let dBParameterGroupFamily: String
        /// This parameter is not currently supported.
        public let filters: [Filter]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBParameterGroupFamily: String, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeEngineDefaultClusterParametersResult: AWSShape {

        public let engineDefaults: EngineDefaults?

        public init(engineDefaults: EngineDefaults? = nil) {
            self.engineDefaults = engineDefaults
        }

        private enum CodingKeys: String, CodingKey {
            case engineDefaults = "EngineDefaults"
        }
    }

    public struct DescribeEventCategoriesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// This parameter is not currently supported.
        public let filters: [Filter]?
        /// The type of source that is generating the events. Valid values: db-instance, db-parameter-group, db-security-group, db-snapshot 
        public let sourceType: String?

        public init(filters: [Filter]? = nil, sourceType: String? = nil) {
            self.filters = filters
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case sourceType = "SourceType"
        }
    }

    public struct DescribeEventsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategories", encoding: .list(member:"EventCategory")), 
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// The number of minutes to retrieve events for. Default: 60
        public let duration: Int?
        ///  The end of the time interval for which to retrieve events, specified in ISO 8601 format.  Example: 2009-07-08T18:00Z
        public let endTime: TimeStamp?
        /// A list of event categories that trigger notifications for an event notification subscription.
        public let eventCategories: [String]?
        /// This parameter is not currently supported.
        public let filters: [Filter]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The identifier of the event source for which events are returned. If not specified, then all sources are included in the response. Constraints:   If SourceIdentifier is provided, SourceType must also be provided.   If the source type is DBInstance, a DBInstanceIdentifier must be provided.   If the source type is DBSecurityGroup, a DBSecurityGroupName must be provided.   If the source type is DBParameterGroup, a DBParameterGroupName must be provided.   If the source type is DBSnapshot, a DBSnapshotIdentifier must be provided.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let sourceIdentifier: String?
        /// The event source to retrieve events for. If no value is specified, all events are returned.
        public let sourceType: SourceType?
        ///  The beginning of the time interval to retrieve events for, specified in ISO 8601 format.  Example: 2009-07-08T18:00Z
        public let startTime: TimeStamp?

        public init(duration: Int? = nil, endTime: TimeStamp? = nil, eventCategories: [String]? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil, sourceIdentifier: String? = nil, sourceType: SourceType? = nil, startTime: TimeStamp? = nil) {
            self.duration = duration
            self.endTime = endTime
            self.eventCategories = eventCategories
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
            self.sourceIdentifier = sourceIdentifier
            self.sourceType = sourceType
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case endTime = "EndTime"
            case eventCategories = "EventCategories"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case sourceIdentifier = "SourceIdentifier"
            case sourceType = "SourceType"
            case startTime = "StartTime"
        }
    }

    public struct DescribeOrderableDBInstanceOptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// The DB instance class filter value. Specify this parameter to show only the available offerings that match the specified DB instance class.
        public let dBInstanceClass: String?
        /// The name of the engine to retrieve DB instance options for.
        public let engine: String
        /// The engine version filter value. Specify this parameter to show only the available offerings that match the specified engine version.
        public let engineVersion: String?
        /// This parameter is not currently supported.
        public let filters: [Filter]?
        /// The license model filter value. Specify this parameter to show only the available offerings that match the specified license model.
        public let licenseModel: String?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The virtual private cloud (VPC) filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
        public let vpc: Bool?

        public init(dBInstanceClass: String? = nil, engine: String, engineVersion: String? = nil, filters: [Filter]? = nil, licenseModel: String? = nil, marker: String? = nil, maxRecords: Int? = nil, vpc: Bool? = nil) {
            self.dBInstanceClass = dBInstanceClass
            self.engine = engine
            self.engineVersion = engineVersion
            self.filters = filters
            self.licenseModel = licenseModel
            self.marker = marker
            self.maxRecords = maxRecords
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceClass = "DBInstanceClass"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case filters = "Filters"
            case licenseModel = "LicenseModel"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case vpc = "Vpc"
        }
    }

    public struct DescribePendingMaintenanceActionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// A filter that specifies one or more resources to return pending maintenance actions for. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list includes only pending maintenance actions for the DB clusters identified by these ARNs.    db-instance-id - Accepts DB instance identifiers and DB instance ARNs. The results list includes only pending maintenance actions for the DB instances identified by these ARNs.  
        public let filters: [Filter]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The ARN of a resource to return pending maintenance actions for.
        public let resourceIdentifier: String?

        public init(filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil, resourceIdentifier: String? = nil) {
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
            self.resourceIdentifier = resourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case resourceIdentifier = "ResourceIdentifier"
        }
    }

    public struct Endpoint: AWSShape {

        /// Specifies the DNS address of the DB instance.
        public let address: String?
        /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
        public let hostedZoneId: String?
        /// Specifies the port that the database engine is listening on.
        public let port: Int?

        public init(address: String? = nil, hostedZoneId: String? = nil, port: Int? = nil) {
            self.address = address
            self.hostedZoneId = hostedZoneId
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case hostedZoneId = "HostedZoneId"
            case port = "Port"
        }
    }

    public struct EngineDefaults: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", encoding: .list(member:"Parameter"))
        ]

        /// The name of the DB cluster parameter group family to return the engine parameter information for.
        public let dBParameterGroupFamily: String?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The parameters of a particular DB cluster parameter group family.
        public let parameters: [Parameter]?

        public init(dBParameterGroupFamily: String? = nil, marker: String? = nil, parameters: [Parameter]? = nil) {
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.marker = marker
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case marker = "Marker"
            case parameters = "Parameters"
        }
    }

    public struct Event: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategories", encoding: .list(member:"EventCategory"))
        ]

        /// Specifies the date and time of the event.
        public let date: TimeStamp?
        /// Specifies the category for the event.
        public let eventCategories: [String]?
        /// Provides the text of this event.
        public let message: String?
        /// The Amazon Resource Name (ARN) for the event.
        public let sourceArn: String?
        /// Provides the identifier for the source of the event.
        public let sourceIdentifier: String?
        /// Specifies the source type for this event.
        public let sourceType: SourceType?

        public init(date: TimeStamp? = nil, eventCategories: [String]? = nil, message: String? = nil, sourceArn: String? = nil, sourceIdentifier: String? = nil, sourceType: SourceType? = nil) {
            self.date = date
            self.eventCategories = eventCategories
            self.message = message
            self.sourceArn = sourceArn
            self.sourceIdentifier = sourceIdentifier
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case date = "Date"
            case eventCategories = "EventCategories"
            case message = "Message"
            case sourceArn = "SourceArn"
            case sourceIdentifier = "SourceIdentifier"
            case sourceType = "SourceType"
        }
    }

    public struct EventCategoriesMap: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategories", encoding: .list(member:"EventCategory"))
        ]

        /// The event categories for the specified source type.
        public let eventCategories: [String]?
        /// The source type that the returned categories belong to.
        public let sourceType: String?

        public init(eventCategories: [String]? = nil, sourceType: String? = nil) {
            self.eventCategories = eventCategories
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategories = "EventCategories"
            case sourceType = "SourceType"
        }
    }

    public struct EventCategoriesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategoriesMapList", encoding: .list(member:"EventCategoriesMap"))
        ]

        /// A list of event category maps.
        public let eventCategoriesMapList: [EventCategoriesMap]?

        public init(eventCategoriesMapList: [EventCategoriesMap]? = nil) {
            self.eventCategoriesMapList = eventCategoriesMapList
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategoriesMapList = "EventCategoriesMapList"
        }
    }

    public struct EventsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", encoding: .list(member:"Event"))
        ]

        /// Detailed information about one or more events. 
        public let events: [Event]?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(events: [Event]? = nil, marker: String? = nil) {
            self.events = events
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case marker = "Marker"
        }
    }

    public struct FailoverDBClusterMessage: AWSShape {

        /// A DB cluster identifier to force a failover for. This parameter is not case sensitive. Constraints:   Must match the identifier of an existing DBCluster.  
        public let dBClusterIdentifier: String?
        /// The name of the instance to promote to the primary instance. You must specify the instance identifier for an Amazon DocumentDB replica in the DB cluster. For example, mydbcluster-replica1.
        public let targetDBInstanceIdentifier: String?

        public init(dBClusterIdentifier: String? = nil, targetDBInstanceIdentifier: String? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.targetDBInstanceIdentifier = targetDBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case targetDBInstanceIdentifier = "TargetDBInstanceIdentifier"
        }
    }

    public struct FailoverDBClusterResult: AWSShape {

        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", encoding: .list(member:"Value"))
        ]

        /// The name of the filter. Filter names are case sensitive.
        public let name: String
        /// One or more filter values. Filter values are case sensitive.
        public let values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    public struct ListTagsForResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", encoding: .list(member:"Filter"))
        ]

        /// This parameter is not currently supported.
        public let filters: [Filter]?
        /// The Amazon DocumentDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).
        public let resourceName: String

        public init(filters: [Filter]? = nil, resourceName: String) {
            self.filters = filters
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case resourceName = "ResourceName"
        }
    }

    public struct ModifyDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcSecurityGroupIds", encoding: .list(member:"VpcSecurityGroupId"))
        ]

        /// A value that specifies whether the changes in this request and any pending changes are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB cluster. If this parameter is set to false, changes to the DB cluster are applied during the next maintenance window. The ApplyImmediately parameter affects only the NewDBClusterIdentifier and MasterUserPassword values. If you set this parameter value to false, the changes to the NewDBClusterIdentifier and MasterUserPassword values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the ApplyImmediately parameter. Default: false 
        public let applyImmediately: Bool?
        /// The number of days for which automated backups are retained. You must specify a minimum value of 1. Default: 1 Constraints:   Must be a value from 1 to 35.  
        public let backupRetentionPeriod: Int?
        /// The configuration setting for the log types to be enabled for export to Amazon CloudWatch Logs for a specific DB instance or DB cluster. The EnableLogTypes and DisableLogTypes arrays determine which logs are exported (or not exported) to CloudWatch Logs.
        public let cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration?
        /// The DB cluster identifier for the cluster that is being modified. This parameter is not case sensitive. Constraints:   Must match the identifier of an existing DBCluster.  
        public let dBClusterIdentifier: String
        /// The name of the DB cluster parameter group to use for the DB cluster.
        public let dBClusterParameterGroupName: String?
        /// Specifies whether this cluster can be deleted. If DeletionProtection is enabled, the cluster cannot be deleted unless it is modified and DeletionProtection is disabled. DeletionProtection protects clusters from being accidentally deleted.
        public let deletionProtection: Bool?
        /// The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true.
        public let engineVersion: String?
        /// The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@). Constraints: Must contain from 8 to 100 characters.
        public let masterUserPassword: String?
        /// The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-cluster2 
        public let newDBClusterIdentifier: String?
        /// The port number on which the DB cluster accepts connections. Constraints: Must be a value from 1150 to 65535.  Default: The same port as the original DB cluster.
        public let port: Int?
        /// The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter.  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.  Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// A list of virtual private cloud (VPC) security groups that the DB cluster will belong to.
        public let vpcSecurityGroupIds: [String]?

        public init(applyImmediately: Bool? = nil, backupRetentionPeriod: Int? = nil, cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration? = nil, dBClusterIdentifier: String, dBClusterParameterGroupName: String? = nil, deletionProtection: Bool? = nil, engineVersion: String? = nil, masterUserPassword: String? = nil, newDBClusterIdentifier: String? = nil, port: Int? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.applyImmediately = applyImmediately
            self.backupRetentionPeriod = backupRetentionPeriod
            self.cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.deletionProtection = deletionProtection
            self.engineVersion = engineVersion
            self.masterUserPassword = masterUserPassword
            self.newDBClusterIdentifier = newDBClusterIdentifier
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case applyImmediately = "ApplyImmediately"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case cloudwatchLogsExportConfiguration = "CloudwatchLogsExportConfiguration"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case deletionProtection = "DeletionProtection"
            case engineVersion = "EngineVersion"
            case masterUserPassword = "MasterUserPassword"
            case newDBClusterIdentifier = "NewDBClusterIdentifier"
            case port = "Port"
            case preferredBackupWindow = "PreferredBackupWindow"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct ModifyDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", encoding: .list(member:"Parameter"))
        ]

        /// The name of the DB cluster parameter group to modify.
        public let dBClusterParameterGroupName: String
        /// A list of parameters in the DB cluster parameter group to modify.
        public let parameters: [Parameter]

        public init(dBClusterParameterGroupName: String, parameters: [Parameter]) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case parameters = "Parameters"
        }
    }

    public struct ModifyDBClusterResult: AWSShape {

        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct ModifyDBClusterSnapshotAttributeMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValuesToAdd", encoding: .list(member:"AttributeValue")), 
            AWSShapeMember(label: "ValuesToRemove", encoding: .list(member:"AttributeValue"))
        ]

        /// The name of the DB cluster snapshot attribute to modify. To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to restore.
        public let attributeName: String
        /// The identifier for the DB cluster snapshot to modify the attributes for.
        public let dBClusterSnapshotIdentifier: String
        /// A list of DB cluster snapshot attributes to add to the attribute specified by AttributeName. To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs. To make the manual DB cluster snapshot restorable by any AWS account, set it to all. Do not add the all value for any manual DB cluster snapshots that contain private information that you don't want to be available to all AWS accounts.
        public let valuesToAdd: [String]?
        /// A list of DB cluster snapshot attributes to remove from the attribute specified by AttributeName. To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers. To remove authorization for any AWS account to copy or restore the DB cluster snapshot, set it to all . If you specify all, an AWS account whose account ID is explicitly added to the restore attribute can still copy or restore a manual DB cluster snapshot.
        public let valuesToRemove: [String]?

        public init(attributeName: String, dBClusterSnapshotIdentifier: String, valuesToAdd: [String]? = nil, valuesToRemove: [String]? = nil) {
            self.attributeName = attributeName
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.valuesToAdd = valuesToAdd
            self.valuesToRemove = valuesToRemove
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case valuesToAdd = "ValuesToAdd"
            case valuesToRemove = "ValuesToRemove"
        }
    }

    public struct ModifyDBClusterSnapshotAttributeResult: AWSShape {

        public let dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult?

        public init(dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult? = nil) {
            self.dBClusterSnapshotAttributesResult = dBClusterSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotAttributesResult = "DBClusterSnapshotAttributesResult"
        }
    }

    public struct ModifyDBInstanceMessage: AWSShape {

        /// Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB instance.   If this parameter is set to false, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next reboot. Default: false 
        public let applyImmediately: Bool?
        /// Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case, and the change is asynchronously applied as soon as possible. An outage results if this parameter is set to true during the maintenance window, and a newer minor version is available, and Amazon DocumentDB has enabled automatic patching for that engine version. 
        public let autoMinorVersionUpgrade: Bool?
        /// Indicates the certificate that needs to be associated with the instance.
        public let cACertificateIdentifier: String?
        /// The new compute and memory capacity of the DB instance; for example, db.r5.large. Not all DB instance classes are available in all AWS Regions.  If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless ApplyImmediately is specified as true for this request.  Default: Uses existing setting.
        public let dBInstanceClass: String?
        /// The DB instance identifier. This value is stored as a lowercase string. Constraints:   Must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String
        ///  The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you set Apply Immediately to true. It occurs during the next maintenance window if you set Apply Immediately to false. This value is stored as a lowercase string.  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: mydbinstance 
        public let newDBInstanceIdentifier: String?
        /// The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, changing this parameter causes a reboot of the DB instance. If you are moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure that pending changes are applied. Default: Uses existing setting. Format: ddd:hh24:mi-ddd:hh24:mi  Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun Constraints: Must be at least 30 minutes.
        public let preferredMaintenanceWindow: String?
        /// A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance. Default: 1 Valid values: 0-15
        public let promotionTier: Int?

        public init(applyImmediately: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, cACertificateIdentifier: String? = nil, dBInstanceClass: String? = nil, dBInstanceIdentifier: String, newDBInstanceIdentifier: String? = nil, preferredMaintenanceWindow: String? = nil, promotionTier: Int? = nil) {
            self.applyImmediately = applyImmediately
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.cACertificateIdentifier = cACertificateIdentifier
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.newDBInstanceIdentifier = newDBInstanceIdentifier
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.promotionTier = promotionTier
        }

        private enum CodingKeys: String, CodingKey {
            case applyImmediately = "ApplyImmediately"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case cACertificateIdentifier = "CACertificateIdentifier"
            case dBInstanceClass = "DBInstanceClass"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case newDBInstanceIdentifier = "NewDBInstanceIdentifier"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case promotionTier = "PromotionTier"
        }
    }

    public struct ModifyDBInstanceResult: AWSShape {

        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct ModifyDBSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", encoding: .list(member:"SubnetIdentifier"))
        ]

        /// The description for the DB subnet group.
        public let dBSubnetGroupDescription: String?
        /// The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.  Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup 
        public let dBSubnetGroupName: String
        /// The Amazon EC2 subnet IDs for the DB subnet group.
        public let subnetIds: [String]

        public init(dBSubnetGroupDescription: String? = nil, dBSubnetGroupName: String, subnetIds: [String]) {
            self.dBSubnetGroupDescription = dBSubnetGroupDescription
            self.dBSubnetGroupName = dBSubnetGroupName
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupDescription = "DBSubnetGroupDescription"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case subnetIds = "SubnetIds"
        }
    }

    public struct ModifyDBSubnetGroupResult: AWSShape {

        public let dBSubnetGroup: DBSubnetGroup?

        public init(dBSubnetGroup: DBSubnetGroup? = nil) {
            self.dBSubnetGroup = dBSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroup = "DBSubnetGroup"
        }
    }

    public struct OrderableDBInstanceOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", encoding: .list(member:"AvailabilityZone"))
        ]

        /// A list of Availability Zones for a DB instance.
        public let availabilityZones: [AvailabilityZone]?
        /// The DB instance class for a DB instance.
        public let dBInstanceClass: String?
        /// The engine type of a DB instance.
        public let engine: String?
        /// The engine version of a DB instance.
        public let engineVersion: String?
        /// The license model for a DB instance.
        public let licenseModel: String?
        /// Indicates whether a DB instance is in a virtual private cloud (VPC).
        public let vpc: Bool?

        public init(availabilityZones: [AvailabilityZone]? = nil, dBInstanceClass: String? = nil, engine: String? = nil, engineVersion: String? = nil, licenseModel: String? = nil, vpc: Bool? = nil) {
            self.availabilityZones = availabilityZones
            self.dBInstanceClass = dBInstanceClass
            self.engine = engine
            self.engineVersion = engineVersion
            self.licenseModel = licenseModel
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case dBInstanceClass = "DBInstanceClass"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case licenseModel = "LicenseModel"
            case vpc = "Vpc"
        }
    }

    public struct OrderableDBInstanceOptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrderableDBInstanceOptions", encoding: .list(member:"OrderableDBInstanceOption"))
        ]

        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The options that are available for a particular orderable DB instance.
        public let orderableDBInstanceOptions: [OrderableDBInstanceOption]?

        public init(marker: String? = nil, orderableDBInstanceOptions: [OrderableDBInstanceOption]? = nil) {
            self.marker = marker
            self.orderableDBInstanceOptions = orderableDBInstanceOptions
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case orderableDBInstanceOptions = "OrderableDBInstanceOptions"
        }
    }

    public struct Parameter: AWSShape {

        /// Specifies the valid range of values for the parameter.
        public let allowedValues: String?
        /// Indicates when to apply parameter updates.
        public let applyMethod: ApplyMethod?
        /// Specifies the engine-specific parameters type.
        public let applyType: String?
        /// Specifies the valid data type for the parameter.
        public let dataType: String?
        /// Provides a description of the parameter.
        public let description: String?
        ///  Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed. 
        public let isModifiable: Bool?
        /// The earliest engine version to which the parameter can apply.
        public let minimumEngineVersion: String?
        /// Specifies the name of the parameter.
        public let parameterName: String?
        /// Specifies the value of the parameter.
        public let parameterValue: String?
        /// Indicates the source of the parameter value.
        public let source: String?

        public init(allowedValues: String? = nil, applyMethod: ApplyMethod? = nil, applyType: String? = nil, dataType: String? = nil, description: String? = nil, isModifiable: Bool? = nil, minimumEngineVersion: String? = nil, parameterName: String? = nil, parameterValue: String? = nil, source: String? = nil) {
            self.allowedValues = allowedValues
            self.applyMethod = applyMethod
            self.applyType = applyType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.parameterName = parameterName
            self.parameterValue = parameterValue
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case allowedValues = "AllowedValues"
            case applyMethod = "ApplyMethod"
            case applyType = "ApplyType"
            case dataType = "DataType"
            case description = "Description"
            case isModifiable = "IsModifiable"
            case minimumEngineVersion = "MinimumEngineVersion"
            case parameterName = "ParameterName"
            case parameterValue = "ParameterValue"
            case source = "Source"
        }
    }

    public struct PendingCloudwatchLogsExports: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogTypesToDisable", encoding: .list(member:"member")), 
            AWSShapeMember(label: "LogTypesToEnable", encoding: .list(member:"member"))
        ]

        /// Log types that are in the process of being enabled. After they are enabled, these log types are exported to Amazon CloudWatch Logs.
        public let logTypesToDisable: [String]?
        /// Log types that are in the process of being deactivated. After they are deactivated, these log types aren't exported to CloudWatch Logs.
        public let logTypesToEnable: [String]?

        public init(logTypesToDisable: [String]? = nil, logTypesToEnable: [String]? = nil) {
            self.logTypesToDisable = logTypesToDisable
            self.logTypesToEnable = logTypesToEnable
        }

        private enum CodingKeys: String, CodingKey {
            case logTypesToDisable = "LogTypesToDisable"
            case logTypesToEnable = "LogTypesToEnable"
        }
    }

    public struct PendingMaintenanceAction: AWSShape {

        /// The type of pending maintenance action that is available for the resource.
        public let action: String?
        /// The date of the maintenance window when the action is applied. The maintenance action is applied to the resource during its first maintenance window after this date. If this date is specified, any next-maintenance opt-in requests are ignored.
        public let autoAppliedAfterDate: TimeStamp?
        /// The effective date when the pending maintenance action is applied to the resource.
        public let currentApplyDate: TimeStamp?
        /// A description providing more detail about the maintenance action.
        public let description: String?
        /// The date when the maintenance action is automatically applied. The maintenance action is applied to the resource on this date regardless of the maintenance window for the resource. If this date is specified, any immediate opt-in requests are ignored.
        public let forcedApplyDate: TimeStamp?
        /// Indicates the type of opt-in request that has been received for the resource.
        public let optInStatus: String?

        public init(action: String? = nil, autoAppliedAfterDate: TimeStamp? = nil, currentApplyDate: TimeStamp? = nil, description: String? = nil, forcedApplyDate: TimeStamp? = nil, optInStatus: String? = nil) {
            self.action = action
            self.autoAppliedAfterDate = autoAppliedAfterDate
            self.currentApplyDate = currentApplyDate
            self.description = description
            self.forcedApplyDate = forcedApplyDate
            self.optInStatus = optInStatus
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case autoAppliedAfterDate = "AutoAppliedAfterDate"
            case currentApplyDate = "CurrentApplyDate"
            case description = "Description"
            case forcedApplyDate = "ForcedApplyDate"
            case optInStatus = "OptInStatus"
        }
    }

    public struct PendingMaintenanceActionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PendingMaintenanceActions", encoding: .list(member:"ResourcePendingMaintenanceActions"))
        ]

        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The maintenance actions to be applied.
        public let pendingMaintenanceActions: [ResourcePendingMaintenanceActions]?

        public init(marker: String? = nil, pendingMaintenanceActions: [ResourcePendingMaintenanceActions]? = nil) {
            self.marker = marker
            self.pendingMaintenanceActions = pendingMaintenanceActions
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case pendingMaintenanceActions = "PendingMaintenanceActions"
        }
    }

    public struct PendingModifiedValues: AWSShape {

        ///  Contains the new AllocatedStorage size for the DB instance that will be applied or is currently being applied. 
        public let allocatedStorage: Int?
        /// Specifies the pending number of days for which automated backups are retained.
        public let backupRetentionPeriod: Int?
        /// Specifies the identifier of the certificate authority (CA) certificate for the DB instance.
        public let cACertificateIdentifier: String?
        ///  Contains the new DBInstanceClass for the DB instance that will be applied or is currently being applied. 
        public let dBInstanceClass: String?
        ///  Contains the new DBInstanceIdentifier for the DB instance that will be applied or is currently being applied. 
        public let dBInstanceIdentifier: String?
        /// The new DB subnet group for the DB instance. 
        public let dBSubnetGroupName: String?
        /// Indicates the database engine version.
        public let engineVersion: String?
        /// Specifies the new Provisioned IOPS value for the DB instance that will be applied or is currently being applied.
        public let iops: Int?
        /// The license model for the DB instance. Valid values: license-included, bring-your-own-license, general-public-license 
        public let licenseModel: String?
        /// Contains the pending or currently in-progress change of the master credentials for the DB instance.
        public let masterUserPassword: String?
        /// Indicates that the Single-AZ DB instance is to change to a Multi-AZ deployment.
        public let multiAZ: Bool?
        /// A list of the log types whose configuration is still pending. These log types are in the process of being activated or deactivated.
        public let pendingCloudwatchLogsExports: PendingCloudwatchLogsExports?
        /// Specifies the pending port for the DB instance.
        public let port: Int?
        /// Specifies the storage type to be associated with the DB instance.
        public let storageType: String?

        public init(allocatedStorage: Int? = nil, backupRetentionPeriod: Int? = nil, cACertificateIdentifier: String? = nil, dBInstanceClass: String? = nil, dBInstanceIdentifier: String? = nil, dBSubnetGroupName: String? = nil, engineVersion: String? = nil, iops: Int? = nil, licenseModel: String? = nil, masterUserPassword: String? = nil, multiAZ: Bool? = nil, pendingCloudwatchLogsExports: PendingCloudwatchLogsExports? = nil, port: Int? = nil, storageType: String? = nil) {
            self.allocatedStorage = allocatedStorage
            self.backupRetentionPeriod = backupRetentionPeriod
            self.cACertificateIdentifier = cACertificateIdentifier
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBSubnetGroupName = dBSubnetGroupName
            self.engineVersion = engineVersion
            self.iops = iops
            self.licenseModel = licenseModel
            self.masterUserPassword = masterUserPassword
            self.multiAZ = multiAZ
            self.pendingCloudwatchLogsExports = pendingCloudwatchLogsExports
            self.port = port
            self.storageType = storageType
        }

        private enum CodingKeys: String, CodingKey {
            case allocatedStorage = "AllocatedStorage"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case cACertificateIdentifier = "CACertificateIdentifier"
            case dBInstanceClass = "DBInstanceClass"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case engineVersion = "EngineVersion"
            case iops = "Iops"
            case licenseModel = "LicenseModel"
            case masterUserPassword = "MasterUserPassword"
            case multiAZ = "MultiAZ"
            case pendingCloudwatchLogsExports = "PendingCloudwatchLogsExports"
            case port = "Port"
            case storageType = "StorageType"
        }
    }

    public struct RebootDBInstanceMessage: AWSShape {

        /// The DB instance identifier. This parameter is stored as a lowercase string. Constraints:   Must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String
        ///  When true, the reboot is conducted through a Multi-AZ failover.  Constraint: You can't specify true if the instance is not configured for Multi-AZ.
        public let forceFailover: Bool?

        public init(dBInstanceIdentifier: String, forceFailover: Bool? = nil) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.forceFailover = forceFailover
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case forceFailover = "ForceFailover"
        }
    }

    public struct RebootDBInstanceResult: AWSShape {

        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct RemoveTagsFromResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKeys", encoding: .list(member:"member"))
        ]

        /// The Amazon DocumentDB resource that the tags are removed from. This value is an Amazon Resource Name (ARN).
        public let resourceName: String
        /// The tag key (name) of the tag to be removed.
        public let tagKeys: [String]

        public init(resourceName: String, tagKeys: [String]) {
            self.resourceName = resourceName
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName = "ResourceName"
            case tagKeys = "TagKeys"
        }
    }

    public struct ResetDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", encoding: .list(member:"Parameter"))
        ]

        /// The name of the DB cluster parameter group to reset.
        public let dBClusterParameterGroupName: String
        /// A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the ResetAllParameters parameter is set to true.
        public let parameters: [Parameter]?
        /// A value that is set to true to reset all parameters in the DB cluster parameter group to their default values, and false otherwise. You can't use this parameter if there is a list of parameter names specified for the Parameters parameter.
        public let resetAllParameters: Bool?

        public init(dBClusterParameterGroupName: String, parameters: [Parameter]? = nil, resetAllParameters: Bool? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.parameters = parameters
            self.resetAllParameters = resetAllParameters
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case parameters = "Parameters"
            case resetAllParameters = "ResetAllParameters"
        }
    }

    public struct ResourcePendingMaintenanceActions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PendingMaintenanceActionDetails", encoding: .list(member:"PendingMaintenanceAction"))
        ]

        /// A list that provides details about the pending maintenance actions for the resource.
        public let pendingMaintenanceActionDetails: [PendingMaintenanceAction]?
        /// The Amazon Resource Name (ARN) of the resource that has pending maintenance actions.
        public let resourceIdentifier: String?

        public init(pendingMaintenanceActionDetails: [PendingMaintenanceAction]? = nil, resourceIdentifier: String? = nil) {
            self.pendingMaintenanceActionDetails = pendingMaintenanceActionDetails
            self.resourceIdentifier = resourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case pendingMaintenanceActionDetails = "PendingMaintenanceActionDetails"
            case resourceIdentifier = "ResourceIdentifier"
        }
    }

    public struct RestoreDBClusterFromSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", encoding: .list(member:"AvailabilityZone")), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", encoding: .list(member:"member")), 
            AWSShapeMember(label: "Tags", encoding: .list(member:"Tag")), 
            AWSShapeMember(label: "VpcSecurityGroupIds", encoding: .list(member:"VpcSecurityGroupId"))
        ]

        /// Provides the list of Amazon EC2 Availability Zones that instances in the restored DB cluster can be created in.
        public let availabilityZones: [String]?
        /// The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case sensitive. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-snapshot-id 
        public let dBClusterIdentifier: String
        /// The name of the DB subnet group to use for the new DB cluster. Constraints: If provided, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// Specifies whether this cluster can be deleted. If DeletionProtection is enabled, the cluster cannot be deleted unless it is modified and DeletionProtection is disabled. DeletionProtection protects clusters from being accidentally deleted.
        public let deletionProtection: Bool?
        /// A list of log types that must be enabled for exporting to Amazon CloudWatch Logs.
        public let enableCloudwatchLogsExports: [String]?
        /// The database engine to use for the new DB cluster. Default: The same as source. Constraint: Must be compatible with the engine of the source.
        public let engine: String
        /// The version of the database engine to use for the new DB cluster.
        public let engineVersion: String?
        /// The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot. The AWS KMS key identifier is the Amazon Resource Name (ARN) for the AWS KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the AWS KMS encryption key used to encrypt the new DB cluster, then you can use the AWS KMS key alias instead of the ARN for the AWS KMS encryption key. If you do not specify a value for the KmsKeyId parameter, then the following occurs:   If the DB snapshot or DB cluster snapshot in SnapshotIdentifier is encrypted, then the restored DB cluster is encrypted using the AWS KMS key that was used to encrypt the DB snapshot or the DB cluster snapshot.   If the DB snapshot or the DB cluster snapshot in SnapshotIdentifier is not encrypted, then the restored DB cluster is not encrypted.  
        public let kmsKeyId: String?
        /// The port number on which the new DB cluster accepts connections. Constraints: Must be a value from 1150 to 65535. Default: The same port as the original DB cluster.
        public let port: Int?
        /// The identifier for the DB snapshot or DB cluster snapshot to restore from. You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot. Constraints:   Must match the identifier of an existing snapshot.  
        public let snapshotIdentifier: String
        /// The tags to be assigned to the restored DB cluster.
        public let tags: [Tag]?
        /// A list of virtual private cloud (VPC) security groups that the new DB cluster will belong to.
        public let vpcSecurityGroupIds: [String]?

        public init(availabilityZones: [String]? = nil, dBClusterIdentifier: String, dBSubnetGroupName: String? = nil, deletionProtection: Bool? = nil, enableCloudwatchLogsExports: [String]? = nil, engine: String, engineVersion: String? = nil, kmsKeyId: String? = nil, port: Int? = nil, snapshotIdentifier: String, tags: [Tag]? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.availabilityZones = availabilityZones
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBSubnetGroupName = dBSubnetGroupName
            self.deletionProtection = deletionProtection
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.engine = engine
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.port = port
            self.snapshotIdentifier = snapshotIdentifier
            self.tags = tags
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case deletionProtection = "DeletionProtection"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case kmsKeyId = "KmsKeyId"
            case port = "Port"
            case snapshotIdentifier = "SnapshotIdentifier"
            case tags = "Tags"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct RestoreDBClusterFromSnapshotResult: AWSShape {

        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct RestoreDBClusterToPointInTimeMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableCloudwatchLogsExports", encoding: .list(member:"member")), 
            AWSShapeMember(label: "Tags", encoding: .list(member:"Tag")), 
            AWSShapeMember(label: "VpcSecurityGroupIds", encoding: .list(member:"VpcSecurityGroupId"))
        ]

        /// The name of the new DB cluster to be created. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let dBClusterIdentifier: String
        /// The DB subnet group name to use for the new DB cluster. Constraints: If provided, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// Specifies whether this cluster can be deleted. If DeletionProtection is enabled, the cluster cannot be deleted unless it is modified and DeletionProtection is disabled. DeletionProtection protects clusters from being accidentally deleted.
        public let deletionProtection: Bool?
        /// A list of log types that must be enabled for exporting to Amazon CloudWatch Logs.
        public let enableCloudwatchLogsExports: [String]?
        /// The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster. The AWS KMS key identifier is the Amazon Resource Name (ARN) for the AWS KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the AWS KMS encryption key used to encrypt the new DB cluster, then you can use the AWS KMS key alias instead of the ARN for the AWS KMS encryption key. You can restore to a new DB cluster and encrypt the new DB cluster with an AWS KMS key that is different from the AWS KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the AWS KMS key identified by the KmsKeyId parameter. If you do not specify a value for the KmsKeyId parameter, then the following occurs:   If the DB cluster is encrypted, then the restored DB cluster is encrypted using the AWS KMS key that was used to encrypt the source DB cluster.   If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.   If DBClusterIdentifier refers to a DB cluster that is not encrypted, then the restore request is rejected.
        public let kmsKeyId: String?
        /// The port number on which the new DB cluster accepts connections. Constraints: Must be a value from 1150 to 65535.  Default: The default port for the engine.
        public let port: Int?
        /// The date and time to restore the DB cluster to. Valid values: A time in Universal Coordinated Time (UTC) format. Constraints:   Must be before the latest restorable time for the DB instance.   Must be specified if the UseLatestRestorableTime parameter is not provided.   Cannot be specified if the UseLatestRestorableTime parameter is true.   Cannot be specified if the RestoreType parameter is copy-on-write.   Example: 2015-03-07T23:45:00Z 
        public let restoreToTime: TimeStamp?
        /// The identifier of the source DB cluster from which to restore. Constraints:   Must match the identifier of an existing DBCluster.  
        public let sourceDBClusterIdentifier: String
        /// The tags to be assigned to the restored DB cluster.
        public let tags: [Tag]?
        /// A value that is set to true to restore the DB cluster to the latest restorable backup time, and false otherwise.  Default: false  Constraints: Cannot be specified if the RestoreToTime parameter is provided.
        public let useLatestRestorableTime: Bool?
        /// A list of VPC security groups that the new DB cluster belongs to.
        public let vpcSecurityGroupIds: [String]?

        public init(dBClusterIdentifier: String, dBSubnetGroupName: String? = nil, deletionProtection: Bool? = nil, enableCloudwatchLogsExports: [String]? = nil, kmsKeyId: String? = nil, port: Int? = nil, restoreToTime: TimeStamp? = nil, sourceDBClusterIdentifier: String, tags: [Tag]? = nil, useLatestRestorableTime: Bool? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBSubnetGroupName = dBSubnetGroupName
            self.deletionProtection = deletionProtection
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.kmsKeyId = kmsKeyId
            self.port = port
            self.restoreToTime = restoreToTime
            self.sourceDBClusterIdentifier = sourceDBClusterIdentifier
            self.tags = tags
            self.useLatestRestorableTime = useLatestRestorableTime
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case deletionProtection = "DeletionProtection"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case kmsKeyId = "KmsKeyId"
            case port = "Port"
            case restoreToTime = "RestoreToTime"
            case sourceDBClusterIdentifier = "SourceDBClusterIdentifier"
            case tags = "Tags"
            case useLatestRestorableTime = "UseLatestRestorableTime"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct RestoreDBClusterToPointInTimeResult: AWSShape {

        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct StartDBClusterMessage: AWSShape {

        /// The identifier of the cluster to restart. Example: docdb-2019-05-28-15-24-52 
        public let dBClusterIdentifier: String

        public init(dBClusterIdentifier: String) {
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct StartDBClusterResult: AWSShape {

        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct StopDBClusterMessage: AWSShape {

        /// The identifier of the cluster to stop. Example: docdb-2019-05-28-15-24-52 
        public let dBClusterIdentifier: String

        public init(dBClusterIdentifier: String) {
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct StopDBClusterResult: AWSShape {

        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct Subnet: AWSShape {

        /// Specifies the Availability Zone for the subnet.
        public let subnetAvailabilityZone: AvailabilityZone?
        /// Specifies the identifier of the subnet.
        public let subnetIdentifier: String?
        /// Specifies the status of the subnet.
        public let subnetStatus: String?

        public init(subnetAvailabilityZone: AvailabilityZone? = nil, subnetIdentifier: String? = nil, subnetStatus: String? = nil) {
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetIdentifier = subnetIdentifier
            self.subnetStatus = subnetStatus
        }

        private enum CodingKeys: String, CodingKey {
            case subnetAvailabilityZone = "SubnetAvailabilityZone"
            case subnetIdentifier = "SubnetIdentifier"
            case subnetStatus = "SubnetStatus"
        }
    }

    public struct Tag: AWSShape {

        /// The required name of the tag. The string value can be from 1 to 128 Unicode characters in length and can't be prefixed with "aws:" or "rds:". The string can contain only the set of Unicode letters, digits, white space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let key: String?
        /// The optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and can't be prefixed with "aws:" or "rds:". The string can contain only the set of Unicode letters, digits, white space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagListMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", encoding: .list(member:"Tag"))
        ]

        /// A list of one or more tags.
        public let tagList: [Tag]?

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public struct UpgradeTarget: AWSShape {

        /// A value that indicates whether the target version is applied to any source DB instances that have AutoMinorVersionUpgrade set to true.
        public let autoUpgrade: Bool?
        /// The version of the database engine that a DB instance can be upgraded to.
        public let description: String?
        /// The name of the upgrade target database engine.
        public let engine: String?
        /// The version number of the upgrade target database engine.
        public let engineVersion: String?
        /// A value that indicates whether a database engine is upgraded to a major version.
        public let isMajorVersionUpgrade: Bool?

        public init(autoUpgrade: Bool? = nil, description: String? = nil, engine: String? = nil, engineVersion: String? = nil, isMajorVersionUpgrade: Bool? = nil) {
            self.autoUpgrade = autoUpgrade
            self.description = description
            self.engine = engine
            self.engineVersion = engineVersion
            self.isMajorVersionUpgrade = isMajorVersionUpgrade
        }

        private enum CodingKeys: String, CodingKey {
            case autoUpgrade = "AutoUpgrade"
            case description = "Description"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case isMajorVersionUpgrade = "IsMajorVersionUpgrade"
        }
    }

    public struct VpcSecurityGroupMembership: AWSShape {

        /// The status of the VPC security group.
        public let status: String?
        /// The name of the VPC security group.
        public let vpcSecurityGroupId: String?

        public init(status: String? = nil, vpcSecurityGroupId: String? = nil) {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case vpcSecurityGroupId = "VpcSecurityGroupId"
        }
    }
}
