// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension MediaLive {
    //MARK: Enums

    public enum AacCodingMode: String, CustomStringConvertible, Codable {
        case adReceiverMix = "AD_RECEIVER_MIX"
        case codingMode10 = "CODING_MODE_1_0"
        case codingMode11 = "CODING_MODE_1_1"
        case codingMode20 = "CODING_MODE_2_0"
        case codingMode51 = "CODING_MODE_5_1"
        public var description: String { return self.rawValue }
    }

    public enum AacInputType: String, CustomStringConvertible, Codable {
        case broadcasterMixedAd = "BROADCASTER_MIXED_AD"
        case normal = "NORMAL"
        public var description: String { return self.rawValue }
    }

    public enum AacProfile: String, CustomStringConvertible, Codable {
        case hev1 = "HEV1"
        case hev2 = "HEV2"
        case lc = "LC"
        public var description: String { return self.rawValue }
    }

    public enum AacRateControlMode: String, CustomStringConvertible, Codable {
        case cbr = "CBR"
        case vbr = "VBR"
        public var description: String { return self.rawValue }
    }

    public enum AacRawFormat: String, CustomStringConvertible, Codable {
        case latmLoas = "LATM_LOAS"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum AacSpec: String, CustomStringConvertible, Codable {
        case mpeg2 = "MPEG2"
        case mpeg4 = "MPEG4"
        public var description: String { return self.rawValue }
    }

    public enum AacVbrQuality: String, CustomStringConvertible, Codable {
        case high = "HIGH"
        case low = "LOW"
        case mediumHigh = "MEDIUM_HIGH"
        case mediumLow = "MEDIUM_LOW"
        public var description: String { return self.rawValue }
    }

    public enum Ac3BitstreamMode: String, CustomStringConvertible, Codable {
        case commentary = "COMMENTARY"
        case completeMain = "COMPLETE_MAIN"
        case dialogue = "DIALOGUE"
        case emergency = "EMERGENCY"
        case hearingImpaired = "HEARING_IMPAIRED"
        case musicAndEffects = "MUSIC_AND_EFFECTS"
        case visuallyImpaired = "VISUALLY_IMPAIRED"
        case voiceOver = "VOICE_OVER"
        public var description: String { return self.rawValue }
    }

    public enum Ac3CodingMode: String, CustomStringConvertible, Codable {
        case codingMode10 = "CODING_MODE_1_0"
        case codingMode11 = "CODING_MODE_1_1"
        case codingMode20 = "CODING_MODE_2_0"
        case codingMode32Lfe = "CODING_MODE_3_2_LFE"
        public var description: String { return self.rawValue }
    }

    public enum Ac3DrcProfile: String, CustomStringConvertible, Codable {
        case filmStandard = "FILM_STANDARD"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum Ac3LfeFilter: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum Ac3MetadataControl: String, CustomStringConvertible, Codable {
        case followInput = "FOLLOW_INPUT"
        case useConfigured = "USE_CONFIGURED"
        public var description: String { return self.rawValue }
    }

    public enum AfdSignaling: String, CustomStringConvertible, Codable {
        case auto = "AUTO"
        case fixed = "FIXED"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum AudioDescriptionAudioTypeControl: String, CustomStringConvertible, Codable {
        case followInput = "FOLLOW_INPUT"
        case useConfigured = "USE_CONFIGURED"
        public var description: String { return self.rawValue }
    }

    public enum AudioDescriptionLanguageCodeControl: String, CustomStringConvertible, Codable {
        case followInput = "FOLLOW_INPUT"
        case useConfigured = "USE_CONFIGURED"
        public var description: String { return self.rawValue }
    }

    public enum AudioLanguageSelectionPolicy: String, CustomStringConvertible, Codable {
        case loose = "LOOSE"
        case strict = "STRICT"
        public var description: String { return self.rawValue }
    }

    public enum AudioNormalizationAlgorithm: String, CustomStringConvertible, Codable {
        case itu17701 = "ITU_1770_1"
        case itu17702 = "ITU_1770_2"
        public var description: String { return self.rawValue }
    }

    public enum AudioNormalizationAlgorithmControl: String, CustomStringConvertible, Codable {
        case correctAudio = "CORRECT_AUDIO"
        public var description: String { return self.rawValue }
    }

    public enum AudioOnlyHlsSegmentType: String, CustomStringConvertible, Codable {
        case aac = "AAC"
        case fmp4 = "FMP4"
        public var description: String { return self.rawValue }
    }

    public enum AudioOnlyHlsTrackType: String, CustomStringConvertible, Codable {
        case alternateAudioAutoSelect = "ALTERNATE_AUDIO_AUTO_SELECT"
        case alternateAudioAutoSelectDefault = "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
        case alternateAudioNotAutoSelect = "ALTERNATE_AUDIO_NOT_AUTO_SELECT"
        case audioOnlyVariantStream = "AUDIO_ONLY_VARIANT_STREAM"
        public var description: String { return self.rawValue }
    }

    public enum AudioType: String, CustomStringConvertible, Codable {
        case cleanEffects = "CLEAN_EFFECTS"
        case hearingImpaired = "HEARING_IMPAIRED"
        case undefined = "UNDEFINED"
        case visualImpairedCommentary = "VISUAL_IMPAIRED_COMMENTARY"
        public var description: String { return self.rawValue }
    }

    public enum AuthenticationScheme: String, CustomStringConvertible, Codable {
        case akamai = "AKAMAI"
        case common = "COMMON"
        public var description: String { return self.rawValue }
    }

    public enum AvailBlankingState: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum BlackoutSlateNetworkEndBlackout: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum BlackoutSlateState: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum BurnInAlignment: String, CustomStringConvertible, Codable {
        case centered = "CENTERED"
        case left = "LEFT"
        case smart = "SMART"
        public var description: String { return self.rawValue }
    }

    public enum BurnInBackgroundColor: String, CustomStringConvertible, Codable {
        case black = "BLACK"
        case none = "NONE"
        case white = "WHITE"
        public var description: String { return self.rawValue }
    }

    public enum BurnInFontColor: String, CustomStringConvertible, Codable {
        case black = "BLACK"
        case blue = "BLUE"
        case green = "GREEN"
        case red = "RED"
        case white = "WHITE"
        case yellow = "YELLOW"
        public var description: String { return self.rawValue }
    }

    public enum BurnInOutlineColor: String, CustomStringConvertible, Codable {
        case black = "BLACK"
        case blue = "BLUE"
        case green = "GREEN"
        case red = "RED"
        case white = "WHITE"
        case yellow = "YELLOW"
        public var description: String { return self.rawValue }
    }

    public enum BurnInShadowColor: String, CustomStringConvertible, Codable {
        case black = "BLACK"
        case none = "NONE"
        case white = "WHITE"
        public var description: String { return self.rawValue }
    }

    public enum BurnInTeletextGridControl: String, CustomStringConvertible, Codable {
        case fixed = "FIXED"
        case scaled = "SCALED"
        public var description: String { return self.rawValue }
    }

    public enum ChannelClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        case singlePipeline = "SINGLE_PIPELINE"
        public var description: String { return self.rawValue }
    }

    public enum ChannelState: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case createFailed = "CREATE_FAILED"
        case idle = "IDLE"
        case starting = "STARTING"
        case running = "RUNNING"
        case recovering = "RECOVERING"
        case stopping = "STOPPING"
        case deleting = "DELETING"
        case deleted = "DELETED"
        case updating = "UPDATING"
        case updateFailed = "UPDATE_FAILED"
        public var description: String { return self.rawValue }
    }

    public enum DvbSdtOutputSdt: String, CustomStringConvertible, Codable {
        case sdtFollow = "SDT_FOLLOW"
        case sdtFollowIfPresent = "SDT_FOLLOW_IF_PRESENT"
        case sdtManual = "SDT_MANUAL"
        case sdtNone = "SDT_NONE"
        public var description: String { return self.rawValue }
    }

    public enum DvbSubDestinationAlignment: String, CustomStringConvertible, Codable {
        case centered = "CENTERED"
        case left = "LEFT"
        case smart = "SMART"
        public var description: String { return self.rawValue }
    }

    public enum DvbSubDestinationBackgroundColor: String, CustomStringConvertible, Codable {
        case black = "BLACK"
        case none = "NONE"
        case white = "WHITE"
        public var description: String { return self.rawValue }
    }

    public enum DvbSubDestinationFontColor: String, CustomStringConvertible, Codable {
        case black = "BLACK"
        case blue = "BLUE"
        case green = "GREEN"
        case red = "RED"
        case white = "WHITE"
        case yellow = "YELLOW"
        public var description: String { return self.rawValue }
    }

    public enum DvbSubDestinationOutlineColor: String, CustomStringConvertible, Codable {
        case black = "BLACK"
        case blue = "BLUE"
        case green = "GREEN"
        case red = "RED"
        case white = "WHITE"
        case yellow = "YELLOW"
        public var description: String { return self.rawValue }
    }

    public enum DvbSubDestinationShadowColor: String, CustomStringConvertible, Codable {
        case black = "BLACK"
        case none = "NONE"
        case white = "WHITE"
        public var description: String { return self.rawValue }
    }

    public enum DvbSubDestinationTeletextGridControl: String, CustomStringConvertible, Codable {
        case fixed = "FIXED"
        case scaled = "SCALED"
        public var description: String { return self.rawValue }
    }

    public enum Eac3AttenuationControl: String, CustomStringConvertible, Codable {
        case attenuate3Db = "ATTENUATE_3_DB"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum Eac3BitstreamMode: String, CustomStringConvertible, Codable {
        case commentary = "COMMENTARY"
        case completeMain = "COMPLETE_MAIN"
        case emergency = "EMERGENCY"
        case hearingImpaired = "HEARING_IMPAIRED"
        case visuallyImpaired = "VISUALLY_IMPAIRED"
        public var description: String { return self.rawValue }
    }

    public enum Eac3CodingMode: String, CustomStringConvertible, Codable {
        case codingMode10 = "CODING_MODE_1_0"
        case codingMode20 = "CODING_MODE_2_0"
        case codingMode32 = "CODING_MODE_3_2"
        public var description: String { return self.rawValue }
    }

    public enum Eac3DcFilter: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum Eac3DrcLine: String, CustomStringConvertible, Codable {
        case filmLight = "FILM_LIGHT"
        case filmStandard = "FILM_STANDARD"
        case musicLight = "MUSIC_LIGHT"
        case musicStandard = "MUSIC_STANDARD"
        case none = "NONE"
        case speech = "SPEECH"
        public var description: String { return self.rawValue }
    }

    public enum Eac3DrcRf: String, CustomStringConvertible, Codable {
        case filmLight = "FILM_LIGHT"
        case filmStandard = "FILM_STANDARD"
        case musicLight = "MUSIC_LIGHT"
        case musicStandard = "MUSIC_STANDARD"
        case none = "NONE"
        case speech = "SPEECH"
        public var description: String { return self.rawValue }
    }

    public enum Eac3LfeControl: String, CustomStringConvertible, Codable {
        case lfe = "LFE"
        case noLfe = "NO_LFE"
        public var description: String { return self.rawValue }
    }

    public enum Eac3LfeFilter: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum Eac3MetadataControl: String, CustomStringConvertible, Codable {
        case followInput = "FOLLOW_INPUT"
        case useConfigured = "USE_CONFIGURED"
        public var description: String { return self.rawValue }
    }

    public enum Eac3PassthroughControl: String, CustomStringConvertible, Codable {
        case noPassthrough = "NO_PASSTHROUGH"
        case whenPossible = "WHEN_POSSIBLE"
        public var description: String { return self.rawValue }
    }

    public enum Eac3PhaseControl: String, CustomStringConvertible, Codable {
        case noShift = "NO_SHIFT"
        case shift90Degrees = "SHIFT_90_DEGREES"
        public var description: String { return self.rawValue }
    }

    public enum Eac3StereoDownmix: String, CustomStringConvertible, Codable {
        case dpl2 = "DPL2"
        case loRo = "LO_RO"
        case ltRt = "LT_RT"
        case notIndicated = "NOT_INDICATED"
        public var description: String { return self.rawValue }
    }

    public enum Eac3SurroundExMode: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        case notIndicated = "NOT_INDICATED"
        public var description: String { return self.rawValue }
    }

    public enum Eac3SurroundMode: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        case notIndicated = "NOT_INDICATED"
        public var description: String { return self.rawValue }
    }

    public enum EmbeddedConvert608To708: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case upconvert = "UPCONVERT"
        public var description: String { return self.rawValue }
    }

    public enum EmbeddedScte20Detection: String, CustomStringConvertible, Codable {
        case auto = "AUTO"
        case off = "OFF"
        public var description: String { return self.rawValue }
    }

    public enum FecOutputIncludeFec: String, CustomStringConvertible, Codable {
        case column = "COLUMN"
        case columnAndRow = "COLUMN_AND_ROW"
        public var description: String { return self.rawValue }
    }

    public enum FixedAfd: String, CustomStringConvertible, Codable {
        case afd0000 = "AFD_0000"
        case afd0010 = "AFD_0010"
        case afd0011 = "AFD_0011"
        case afd0100 = "AFD_0100"
        case afd1000 = "AFD_1000"
        case afd1001 = "AFD_1001"
        case afd1010 = "AFD_1010"
        case afd1011 = "AFD_1011"
        case afd1101 = "AFD_1101"
        case afd1110 = "AFD_1110"
        case afd1111 = "AFD_1111"
        public var description: String { return self.rawValue }
    }

    public enum Fmp4NielsenId3Behavior: String, CustomStringConvertible, Codable {
        case noPassthrough = "NO_PASSTHROUGH"
        case passthrough = "PASSTHROUGH"
        public var description: String { return self.rawValue }
    }

    public enum Fmp4TimedMetadataBehavior: String, CustomStringConvertible, Codable {
        case noPassthrough = "NO_PASSTHROUGH"
        case passthrough = "PASSTHROUGH"
        public var description: String { return self.rawValue }
    }

    public enum FollowPoint: String, CustomStringConvertible, Codable {
        case end = "END"
        case start = "START"
        public var description: String { return self.rawValue }
    }

    public enum FrameCaptureIntervalUnit: String, CustomStringConvertible, Codable {
        case milliseconds = "MILLISECONDS"
        case seconds = "SECONDS"
        public var description: String { return self.rawValue }
    }

    public enum GlobalConfigurationInputEndAction: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case switchAndLoopInputs = "SWITCH_AND_LOOP_INPUTS"
        public var description: String { return self.rawValue }
    }

    public enum GlobalConfigurationLowFramerateInputs: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum GlobalConfigurationOutputLockingMode: String, CustomStringConvertible, Codable {
        case epochLocking = "EPOCH_LOCKING"
        case pipelineLocking = "PIPELINE_LOCKING"
        public var description: String { return self.rawValue }
    }

    public enum GlobalConfigurationOutputTimingSource: String, CustomStringConvertible, Codable {
        case inputClock = "INPUT_CLOCK"
        case systemClock = "SYSTEM_CLOCK"
        public var description: String { return self.rawValue }
    }

    public enum H264AdaptiveQuantization: String, CustomStringConvertible, Codable {
        case high = "HIGH"
        case higher = "HIGHER"
        case low = "LOW"
        case max = "MAX"
        case medium = "MEDIUM"
        case off = "OFF"
        public var description: String { return self.rawValue }
    }

    public enum H264ColorMetadata: String, CustomStringConvertible, Codable {
        case ignore = "IGNORE"
        case insert = "INSERT"
        public var description: String { return self.rawValue }
    }

    public enum H264EntropyEncoding: String, CustomStringConvertible, Codable {
        case cabac = "CABAC"
        case cavlc = "CAVLC"
        public var description: String { return self.rawValue }
    }

    public enum H264FlickerAq: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum H264ForceFieldPictures: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum H264FramerateControl: String, CustomStringConvertible, Codable {
        case initializeFromSource = "INITIALIZE_FROM_SOURCE"
        case specified = "SPECIFIED"
        public var description: String { return self.rawValue }
    }

    public enum H264GopBReference: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum H264GopSizeUnits: String, CustomStringConvertible, Codable {
        case frames = "FRAMES"
        case seconds = "SECONDS"
        public var description: String { return self.rawValue }
    }

    public enum H264Level: String, CustomStringConvertible, Codable {
        case h264Level1 = "H264_LEVEL_1"
        case h264Level11 = "H264_LEVEL_1_1"
        case h264Level12 = "H264_LEVEL_1_2"
        case h264Level13 = "H264_LEVEL_1_3"
        case h264Level2 = "H264_LEVEL_2"
        case h264Level21 = "H264_LEVEL_2_1"
        case h264Level22 = "H264_LEVEL_2_2"
        case h264Level3 = "H264_LEVEL_3"
        case h264Level31 = "H264_LEVEL_3_1"
        case h264Level32 = "H264_LEVEL_3_2"
        case h264Level4 = "H264_LEVEL_4"
        case h264Level41 = "H264_LEVEL_4_1"
        case h264Level42 = "H264_LEVEL_4_2"
        case h264Level5 = "H264_LEVEL_5"
        case h264Level51 = "H264_LEVEL_5_1"
        case h264Level52 = "H264_LEVEL_5_2"
        case h264LevelAuto = "H264_LEVEL_AUTO"
        public var description: String { return self.rawValue }
    }

    public enum H264LookAheadRateControl: String, CustomStringConvertible, Codable {
        case high = "HIGH"
        case low = "LOW"
        case medium = "MEDIUM"
        public var description: String { return self.rawValue }
    }

    public enum H264ParControl: String, CustomStringConvertible, Codable {
        case initializeFromSource = "INITIALIZE_FROM_SOURCE"
        case specified = "SPECIFIED"
        public var description: String { return self.rawValue }
    }

    public enum H264Profile: String, CustomStringConvertible, Codable {
        case baseline = "BASELINE"
        case high = "HIGH"
        case high10Bit = "HIGH_10BIT"
        case high422 = "HIGH_422"
        case high42210Bit = "HIGH_422_10BIT"
        case main = "MAIN"
        public var description: String { return self.rawValue }
    }

    public enum H264QualityLevel: String, CustomStringConvertible, Codable {
        case enhancedQuality = "ENHANCED_QUALITY"
        case standardQuality = "STANDARD_QUALITY"
        public var description: String { return self.rawValue }
    }

    public enum H264RateControlMode: String, CustomStringConvertible, Codable {
        case cbr = "CBR"
        case multiplex = "MULTIPLEX"
        case qvbr = "QVBR"
        case vbr = "VBR"
        public var description: String { return self.rawValue }
    }

    public enum H264ScanType: String, CustomStringConvertible, Codable {
        case interlaced = "INTERLACED"
        case progressive = "PROGRESSIVE"
        public var description: String { return self.rawValue }
    }

    public enum H264SceneChangeDetect: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum H264SpatialAq: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum H264SubGopLength: String, CustomStringConvertible, Codable {
        case dynamic = "DYNAMIC"
        case fixed = "FIXED"
        public var description: String { return self.rawValue }
    }

    public enum H264Syntax: String, CustomStringConvertible, Codable {
        case `default` = "DEFAULT"
        case rp2027 = "RP2027"
        public var description: String { return self.rawValue }
    }

    public enum H264TemporalAq: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum H264TimecodeInsertionBehavior: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case picTimingSei = "PIC_TIMING_SEI"
        public var description: String { return self.rawValue }
    }

    public enum H265AdaptiveQuantization: String, CustomStringConvertible, Codable {
        case high = "HIGH"
        case higher = "HIGHER"
        case low = "LOW"
        case max = "MAX"
        case medium = "MEDIUM"
        case off = "OFF"
        public var description: String { return self.rawValue }
    }

    public enum H265AlternativeTransferFunction: String, CustomStringConvertible, Codable {
        case insert = "INSERT"
        case omit = "OMIT"
        public var description: String { return self.rawValue }
    }

    public enum H265ColorMetadata: String, CustomStringConvertible, Codable {
        case ignore = "IGNORE"
        case insert = "INSERT"
        public var description: String { return self.rawValue }
    }

    public enum H265FlickerAq: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum H265GopSizeUnits: String, CustomStringConvertible, Codable {
        case frames = "FRAMES"
        case seconds = "SECONDS"
        public var description: String { return self.rawValue }
    }

    public enum H265Level: String, CustomStringConvertible, Codable {
        case h265Level1 = "H265_LEVEL_1"
        case h265Level2 = "H265_LEVEL_2"
        case h265Level21 = "H265_LEVEL_2_1"
        case h265Level3 = "H265_LEVEL_3"
        case h265Level31 = "H265_LEVEL_3_1"
        case h265Level4 = "H265_LEVEL_4"
        case h265Level41 = "H265_LEVEL_4_1"
        case h265Level5 = "H265_LEVEL_5"
        case h265Level51 = "H265_LEVEL_5_1"
        case h265Level52 = "H265_LEVEL_5_2"
        case h265Level6 = "H265_LEVEL_6"
        case h265Level61 = "H265_LEVEL_6_1"
        case h265Level62 = "H265_LEVEL_6_2"
        case h265LevelAuto = "H265_LEVEL_AUTO"
        public var description: String { return self.rawValue }
    }

    public enum H265LookAheadRateControl: String, CustomStringConvertible, Codable {
        case high = "HIGH"
        case low = "LOW"
        case medium = "MEDIUM"
        public var description: String { return self.rawValue }
    }

    public enum H265Profile: String, CustomStringConvertible, Codable {
        case main = "MAIN"
        case main10Bit = "MAIN_10BIT"
        public var description: String { return self.rawValue }
    }

    public enum H265RateControlMode: String, CustomStringConvertible, Codable {
        case cbr = "CBR"
        case multiplex = "MULTIPLEX"
        case qvbr = "QVBR"
        public var description: String { return self.rawValue }
    }

    public enum H265ScanType: String, CustomStringConvertible, Codable {
        case progressive = "PROGRESSIVE"
        public var description: String { return self.rawValue }
    }

    public enum H265SceneChangeDetect: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum H265Tier: String, CustomStringConvertible, Codable {
        case high = "HIGH"
        case main = "MAIN"
        public var description: String { return self.rawValue }
    }

    public enum H265TimecodeInsertionBehavior: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case picTimingSei = "PIC_TIMING_SEI"
        public var description: String { return self.rawValue }
    }

    public enum HlsAdMarkers: String, CustomStringConvertible, Codable {
        case adobe = "ADOBE"
        case elemental = "ELEMENTAL"
        case elementalScte35 = "ELEMENTAL_SCTE35"
        public var description: String { return self.rawValue }
    }

    public enum HlsAkamaiHttpTransferMode: String, CustomStringConvertible, Codable {
        case chunked = "CHUNKED"
        case nonChunked = "NON_CHUNKED"
        public var description: String { return self.rawValue }
    }

    public enum HlsCaptionLanguageSetting: String, CustomStringConvertible, Codable {
        case insert = "INSERT"
        case none = "NONE"
        case omit = "OMIT"
        public var description: String { return self.rawValue }
    }

    public enum HlsClientCache: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum HlsCodecSpecification: String, CustomStringConvertible, Codable {
        case rfc4281 = "RFC_4281"
        case rfc6381 = "RFC_6381"
        public var description: String { return self.rawValue }
    }

    public enum HlsDirectoryStructure: String, CustomStringConvertible, Codable {
        case singleDirectory = "SINGLE_DIRECTORY"
        case subdirectoryPerStream = "SUBDIRECTORY_PER_STREAM"
        public var description: String { return self.rawValue }
    }

    public enum HlsEncryptionType: String, CustomStringConvertible, Codable {
        case aes128 = "AES128"
        case sampleAes = "SAMPLE_AES"
        public var description: String { return self.rawValue }
    }

    public enum HlsH265PackagingType: String, CustomStringConvertible, Codable {
        case hev1 = "HEV1"
        case hvc1 = "HVC1"
        public var description: String { return self.rawValue }
    }

    public enum HlsId3SegmentTaggingState: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum HlsIvInManifest: String, CustomStringConvertible, Codable {
        case exclude = "EXCLUDE"
        case include = "INCLUDE"
        public var description: String { return self.rawValue }
    }

    public enum HlsIvSource: String, CustomStringConvertible, Codable {
        case explicit = "EXPLICIT"
        case followsSegmentNumber = "FOLLOWS_SEGMENT_NUMBER"
        public var description: String { return self.rawValue }
    }

    public enum HlsManifestCompression: String, CustomStringConvertible, Codable {
        case gzip = "GZIP"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum HlsManifestDurationFormat: String, CustomStringConvertible, Codable {
        case floatingPoint = "FLOATING_POINT"
        case integer = "INTEGER"
        public var description: String { return self.rawValue }
    }

    public enum HlsMediaStoreStorageClass: String, CustomStringConvertible, Codable {
        case temporal = "TEMPORAL"
        public var description: String { return self.rawValue }
    }

    public enum HlsMode: String, CustomStringConvertible, Codable {
        case live = "LIVE"
        case vod = "VOD"
        public var description: String { return self.rawValue }
    }

    public enum HlsOutputSelection: String, CustomStringConvertible, Codable {
        case manifestsAndSegments = "MANIFESTS_AND_SEGMENTS"
        case segmentsOnly = "SEGMENTS_ONLY"
        public var description: String { return self.rawValue }
    }

    public enum HlsProgramDateTime: String, CustomStringConvertible, Codable {
        case exclude = "EXCLUDE"
        case include = "INCLUDE"
        public var description: String { return self.rawValue }
    }

    public enum HlsRedundantManifest: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum HlsSegmentationMode: String, CustomStringConvertible, Codable {
        case useInputSegmentation = "USE_INPUT_SEGMENTATION"
        case useSegmentDuration = "USE_SEGMENT_DURATION"
        public var description: String { return self.rawValue }
    }

    public enum HlsStreamInfResolution: String, CustomStringConvertible, Codable {
        case exclude = "EXCLUDE"
        case include = "INCLUDE"
        public var description: String { return self.rawValue }
    }

    public enum HlsTimedMetadataId3Frame: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case priv = "PRIV"
        case tdrl = "TDRL"
        public var description: String { return self.rawValue }
    }

    public enum HlsTsFileMode: String, CustomStringConvertible, Codable {
        case segmentedFiles = "SEGMENTED_FILES"
        case singleFile = "SINGLE_FILE"
        public var description: String { return self.rawValue }
    }

    public enum HlsWebdavHttpTransferMode: String, CustomStringConvertible, Codable {
        case chunked = "CHUNKED"
        case nonChunked = "NON_CHUNKED"
        public var description: String { return self.rawValue }
    }

    public enum IFrameOnlyPlaylistType: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case standard = "STANDARD"
        public var description: String { return self.rawValue }
    }

    public enum InputClass: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        case singlePipeline = "SINGLE_PIPELINE"
        public var description: String { return self.rawValue }
    }

    public enum InputCodec: String, CustomStringConvertible, Codable {
        case mpeg2 = "MPEG2"
        case avc = "AVC"
        case hevc = "HEVC"
        public var description: String { return self.rawValue }
    }

    public enum InputDeblockFilter: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum InputDenoiseFilter: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum InputFilter: String, CustomStringConvertible, Codable {
        case auto = "AUTO"
        case disabled = "DISABLED"
        case forced = "FORCED"
        public var description: String { return self.rawValue }
    }

    public enum InputLossActionForHlsOut: String, CustomStringConvertible, Codable {
        case emitOutput = "EMIT_OUTPUT"
        case pauseOutput = "PAUSE_OUTPUT"
        public var description: String { return self.rawValue }
    }

    public enum InputLossActionForMsSmoothOut: String, CustomStringConvertible, Codable {
        case emitOutput = "EMIT_OUTPUT"
        case pauseOutput = "PAUSE_OUTPUT"
        public var description: String { return self.rawValue }
    }

    public enum InputLossActionForRtmpOut: String, CustomStringConvertible, Codable {
        case emitOutput = "EMIT_OUTPUT"
        case pauseOutput = "PAUSE_OUTPUT"
        public var description: String { return self.rawValue }
    }

    public enum InputLossActionForUdpOut: String, CustomStringConvertible, Codable {
        case dropProgram = "DROP_PROGRAM"
        case dropTs = "DROP_TS"
        case emitProgram = "EMIT_PROGRAM"
        public var description: String { return self.rawValue }
    }

    public enum InputLossImageType: String, CustomStringConvertible, Codable {
        case color = "COLOR"
        case slate = "SLATE"
        public var description: String { return self.rawValue }
    }

    public enum InputMaximumBitrate: String, CustomStringConvertible, Codable {
        case max10Mbps = "MAX_10_MBPS"
        case max20Mbps = "MAX_20_MBPS"
        case max50Mbps = "MAX_50_MBPS"
        public var description: String { return self.rawValue }
    }

    public enum InputPreference: String, CustomStringConvertible, Codable {
        case equalInputPreference = "EQUAL_INPUT_PREFERENCE"
        case primaryInputPreferred = "PRIMARY_INPUT_PREFERRED"
        public var description: String { return self.rawValue }
    }

    public enum InputResolution: String, CustomStringConvertible, Codable {
        case sd = "SD"
        case hd = "HD"
        case uhd = "UHD"
        public var description: String { return self.rawValue }
    }

    public enum InputSecurityGroupState: String, CustomStringConvertible, Codable {
        case idle = "IDLE"
        case inUse = "IN_USE"
        case updating = "UPDATING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public enum InputSourceEndBehavior: String, CustomStringConvertible, Codable {
        case `continue` = "CONTINUE"
        case loop = "LOOP"
        public var description: String { return self.rawValue }
    }

    public enum InputSourceType: String, CustomStringConvertible, Codable {
        case `static` = "STATIC"
        case dynamic = "DYNAMIC"
        public var description: String { return self.rawValue }
    }

    public enum InputState: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case detached = "DETACHED"
        case attached = "ATTACHED"
        case deleting = "DELETING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public enum InputTimecodeSource: String, CustomStringConvertible, Codable {
        case zerobased = "ZEROBASED"
        case embedded = "EMBEDDED"
        public var description: String { return self.rawValue }
    }

    public enum InputType: String, CustomStringConvertible, Codable {
        case udpPush = "UDP_PUSH"
        case rtpPush = "RTP_PUSH"
        case rtmpPush = "RTMP_PUSH"
        case rtmpPull = "RTMP_PULL"
        case urlPull = "URL_PULL"
        case mp4File = "MP4_FILE"
        case mediaconnect = "MEDIACONNECT"
        public var description: String { return self.rawValue }
    }

    public enum LastFrameClippingBehavior: String, CustomStringConvertible, Codable {
        case excludeLastFrame = "EXCLUDE_LAST_FRAME"
        case includeLastFrame = "INCLUDE_LAST_FRAME"
        public var description: String { return self.rawValue }
    }

    public enum LogLevel: String, CustomStringConvertible, Codable {
        case error = "ERROR"
        case warning = "WARNING"
        case info = "INFO"
        case debug = "DEBUG"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public enum M2tsAbsentInputAudioBehavior: String, CustomStringConvertible, Codable {
        case drop = "DROP"
        case encodeSilence = "ENCODE_SILENCE"
        public var description: String { return self.rawValue }
    }

    public enum M2tsArib: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum M2tsAribCaptionsPidControl: String, CustomStringConvertible, Codable {
        case auto = "AUTO"
        case useConfigured = "USE_CONFIGURED"
        public var description: String { return self.rawValue }
    }

    public enum M2tsAudioBufferModel: String, CustomStringConvertible, Codable {
        case atsc = "ATSC"
        case dvb = "DVB"
        public var description: String { return self.rawValue }
    }

    public enum M2tsAudioInterval: String, CustomStringConvertible, Codable {
        case videoAndFixedIntervals = "VIDEO_AND_FIXED_INTERVALS"
        case videoInterval = "VIDEO_INTERVAL"
        public var description: String { return self.rawValue }
    }

    public enum M2tsAudioStreamType: String, CustomStringConvertible, Codable {
        case atsc = "ATSC"
        case dvb = "DVB"
        public var description: String { return self.rawValue }
    }

    public enum M2tsBufferModel: String, CustomStringConvertible, Codable {
        case multiplex = "MULTIPLEX"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum M2tsCcDescriptor: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum M2tsEbifControl: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case passthrough = "PASSTHROUGH"
        public var description: String { return self.rawValue }
    }

    public enum M2tsEbpPlacement: String, CustomStringConvertible, Codable {
        case videoAndAudioPids = "VIDEO_AND_AUDIO_PIDS"
        case videoPid = "VIDEO_PID"
        public var description: String { return self.rawValue }
    }

    public enum M2tsEsRateInPes: String, CustomStringConvertible, Codable {
        case exclude = "EXCLUDE"
        case include = "INCLUDE"
        public var description: String { return self.rawValue }
    }

    public enum M2tsKlv: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case passthrough = "PASSTHROUGH"
        public var description: String { return self.rawValue }
    }

    public enum M2tsNielsenId3Behavior: String, CustomStringConvertible, Codable {
        case noPassthrough = "NO_PASSTHROUGH"
        case passthrough = "PASSTHROUGH"
        public var description: String { return self.rawValue }
    }

    public enum M2tsPcrControl: String, CustomStringConvertible, Codable {
        case configuredPcrPeriod = "CONFIGURED_PCR_PERIOD"
        case pcrEveryPesPacket = "PCR_EVERY_PES_PACKET"
        public var description: String { return self.rawValue }
    }

    public enum M2tsRateMode: String, CustomStringConvertible, Codable {
        case cbr = "CBR"
        case vbr = "VBR"
        public var description: String { return self.rawValue }
    }

    public enum M2tsScte35Control: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case passthrough = "PASSTHROUGH"
        public var description: String { return self.rawValue }
    }

    public enum M2tsSegmentationMarkers: String, CustomStringConvertible, Codable {
        case ebp = "EBP"
        case ebpLegacy = "EBP_LEGACY"
        case none = "NONE"
        case psiSegstart = "PSI_SEGSTART"
        case raiAdapt = "RAI_ADAPT"
        case raiSegstart = "RAI_SEGSTART"
        public var description: String { return self.rawValue }
    }

    public enum M2tsSegmentationStyle: String, CustomStringConvertible, Codable {
        case maintainCadence = "MAINTAIN_CADENCE"
        case resetCadence = "RESET_CADENCE"
        public var description: String { return self.rawValue }
    }

    public enum M2tsTimedMetadataBehavior: String, CustomStringConvertible, Codable {
        case noPassthrough = "NO_PASSTHROUGH"
        case passthrough = "PASSTHROUGH"
        public var description: String { return self.rawValue }
    }

    public enum M3u8NielsenId3Behavior: String, CustomStringConvertible, Codable {
        case noPassthrough = "NO_PASSTHROUGH"
        case passthrough = "PASSTHROUGH"
        public var description: String { return self.rawValue }
    }

    public enum M3u8PcrControl: String, CustomStringConvertible, Codable {
        case configuredPcrPeriod = "CONFIGURED_PCR_PERIOD"
        case pcrEveryPesPacket = "PCR_EVERY_PES_PACKET"
        public var description: String { return self.rawValue }
    }

    public enum M3u8Scte35Behavior: String, CustomStringConvertible, Codable {
        case noPassthrough = "NO_PASSTHROUGH"
        case passthrough = "PASSTHROUGH"
        public var description: String { return self.rawValue }
    }

    public enum M3u8TimedMetadataBehavior: String, CustomStringConvertible, Codable {
        case noPassthrough = "NO_PASSTHROUGH"
        case passthrough = "PASSTHROUGH"
        public var description: String { return self.rawValue }
    }

    public enum Mp2CodingMode: String, CustomStringConvertible, Codable {
        case codingMode10 = "CODING_MODE_1_0"
        case codingMode20 = "CODING_MODE_2_0"
        public var description: String { return self.rawValue }
    }

    public enum MsSmoothH265PackagingType: String, CustomStringConvertible, Codable {
        case hev1 = "HEV1"
        case hvc1 = "HVC1"
        public var description: String { return self.rawValue }
    }

    public enum MultiplexState: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case createFailed = "CREATE_FAILED"
        case idle = "IDLE"
        case starting = "STARTING"
        case running = "RUNNING"
        case recovering = "RECOVERING"
        case stopping = "STOPPING"
        case deleting = "DELETING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInputServerValidation: String, CustomStringConvertible, Codable {
        case checkCryptographyAndValidateName = "CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME"
        case checkCryptographyOnly = "CHECK_CRYPTOGRAPHY_ONLY"
        public var description: String { return self.rawValue }
    }

    public enum NielsenPcmToId3TaggingState: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum OfferingDurationUnits: String, CustomStringConvertible, Codable {
        case months = "MONTHS"
        public var description: String { return self.rawValue }
    }

    public enum OfferingType: String, CustomStringConvertible, Codable {
        case noUpfront = "NO_UPFRONT"
        public var description: String { return self.rawValue }
    }

    public enum PipelineId: String, CustomStringConvertible, Codable {
        case pipeline0 = "PIPELINE_0"
        case pipeline1 = "PIPELINE_1"
        public var description: String { return self.rawValue }
    }

    public enum PreferredChannelPipeline: String, CustomStringConvertible, Codable {
        case currentlyActive = "CURRENTLY_ACTIVE"
        case pipeline0 = "PIPELINE_0"
        case pipeline1 = "PIPELINE_1"
        public var description: String { return self.rawValue }
    }

    public enum ReservationCodec: String, CustomStringConvertible, Codable {
        case mpeg2 = "MPEG2"
        case avc = "AVC"
        case hevc = "HEVC"
        case audio = "AUDIO"
        public var description: String { return self.rawValue }
    }

    public enum ReservationMaximumBitrate: String, CustomStringConvertible, Codable {
        case max10Mbps = "MAX_10_MBPS"
        case max20Mbps = "MAX_20_MBPS"
        case max50Mbps = "MAX_50_MBPS"
        public var description: String { return self.rawValue }
    }

    public enum ReservationMaximumFramerate: String, CustomStringConvertible, Codable {
        case max30Fps = "MAX_30_FPS"
        case max60Fps = "MAX_60_FPS"
        public var description: String { return self.rawValue }
    }

    public enum ReservationResolution: String, CustomStringConvertible, Codable {
        case sd = "SD"
        case hd = "HD"
        case fhd = "FHD"
        case uhd = "UHD"
        public var description: String { return self.rawValue }
    }

    public enum ReservationResourceType: String, CustomStringConvertible, Codable {
        case input = "INPUT"
        case output = "OUTPUT"
        case multiplex = "MULTIPLEX"
        case channel = "CHANNEL"
        public var description: String { return self.rawValue }
    }

    public enum ReservationSpecialFeature: String, CustomStringConvertible, Codable {
        case advancedAudio = "ADVANCED_AUDIO"
        case audioNormalization = "AUDIO_NORMALIZATION"
        public var description: String { return self.rawValue }
    }

    public enum ReservationState: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case expired = "EXPIRED"
        case canceled = "CANCELED"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public enum ReservationVideoQuality: String, CustomStringConvertible, Codable {
        case standard = "STANDARD"
        case enhanced = "ENHANCED"
        case premium = "PREMIUM"
        public var description: String { return self.rawValue }
    }

    public enum RtmpCacheFullBehavior: String, CustomStringConvertible, Codable {
        case disconnectImmediately = "DISCONNECT_IMMEDIATELY"
        case waitForServer = "WAIT_FOR_SERVER"
        public var description: String { return self.rawValue }
    }

    public enum RtmpCaptionData: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case field1608 = "FIELD1_608"
        case field1AndField2608 = "FIELD1_AND_FIELD2_608"
        public var description: String { return self.rawValue }
    }

    public enum RtmpOutputCertificateMode: String, CustomStringConvertible, Codable {
        case selfSigned = "SELF_SIGNED"
        case verifyAuthenticity = "VERIFY_AUTHENTICITY"
        public var description: String { return self.rawValue }
    }

    public enum Scte20Convert608To708: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case upconvert = "UPCONVERT"
        public var description: String { return self.rawValue }
    }

    public enum Scte35AposNoRegionalBlackoutBehavior: String, CustomStringConvertible, Codable {
        case follow = "FOLLOW"
        case ignore = "IGNORE"
        public var description: String { return self.rawValue }
    }

    public enum Scte35AposWebDeliveryAllowedBehavior: String, CustomStringConvertible, Codable {
        case follow = "FOLLOW"
        case ignore = "IGNORE"
        public var description: String { return self.rawValue }
    }

    public enum Scte35ArchiveAllowedFlag: String, CustomStringConvertible, Codable {
        case archiveNotAllowed = "ARCHIVE_NOT_ALLOWED"
        case archiveAllowed = "ARCHIVE_ALLOWED"
        public var description: String { return self.rawValue }
    }

    public enum Scte35DeviceRestrictions: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case restrictGroup0 = "RESTRICT_GROUP0"
        case restrictGroup1 = "RESTRICT_GROUP1"
        case restrictGroup2 = "RESTRICT_GROUP2"
        public var description: String { return self.rawValue }
    }

    public enum Scte35NoRegionalBlackoutFlag: String, CustomStringConvertible, Codable {
        case regionalBlackout = "REGIONAL_BLACKOUT"
        case noRegionalBlackout = "NO_REGIONAL_BLACKOUT"
        public var description: String { return self.rawValue }
    }

    public enum Scte35SegmentationCancelIndicator: String, CustomStringConvertible, Codable {
        case segmentationEventNotCanceled = "SEGMENTATION_EVENT_NOT_CANCELED"
        case segmentationEventCanceled = "SEGMENTATION_EVENT_CANCELED"
        public var description: String { return self.rawValue }
    }

    public enum Scte35SpliceInsertNoRegionalBlackoutBehavior: String, CustomStringConvertible, Codable {
        case follow = "FOLLOW"
        case ignore = "IGNORE"
        public var description: String { return self.rawValue }
    }

    public enum Scte35SpliceInsertWebDeliveryAllowedBehavior: String, CustomStringConvertible, Codable {
        case follow = "FOLLOW"
        case ignore = "IGNORE"
        public var description: String { return self.rawValue }
    }

    public enum Scte35WebDeliveryAllowedFlag: String, CustomStringConvertible, Codable {
        case webDeliveryNotAllowed = "WEB_DELIVERY_NOT_ALLOWED"
        case webDeliveryAllowed = "WEB_DELIVERY_ALLOWED"
        public var description: String { return self.rawValue }
    }

    public enum SmoothGroupAudioOnlyTimecodeControl: String, CustomStringConvertible, Codable {
        case passthrough = "PASSTHROUGH"
        case useConfiguredClock = "USE_CONFIGURED_CLOCK"
        public var description: String { return self.rawValue }
    }

    public enum SmoothGroupCertificateMode: String, CustomStringConvertible, Codable {
        case selfSigned = "SELF_SIGNED"
        case verifyAuthenticity = "VERIFY_AUTHENTICITY"
        public var description: String { return self.rawValue }
    }

    public enum SmoothGroupEventIdMode: String, CustomStringConvertible, Codable {
        case noEventId = "NO_EVENT_ID"
        case useConfigured = "USE_CONFIGURED"
        case useTimestamp = "USE_TIMESTAMP"
        public var description: String { return self.rawValue }
    }

    public enum SmoothGroupEventStopBehavior: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case sendEos = "SEND_EOS"
        public var description: String { return self.rawValue }
    }

    public enum SmoothGroupSegmentationMode: String, CustomStringConvertible, Codable {
        case useInputSegmentation = "USE_INPUT_SEGMENTATION"
        case useSegmentDuration = "USE_SEGMENT_DURATION"
        public var description: String { return self.rawValue }
    }

    public enum SmoothGroupSparseTrackType: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case scte35 = "SCTE_35"
        case scte35WithoutSegmentation = "SCTE_35_WITHOUT_SEGMENTATION"
        public var description: String { return self.rawValue }
    }

    public enum SmoothGroupStreamManifestBehavior: String, CustomStringConvertible, Codable {
        case doNotSend = "DO_NOT_SEND"
        case send = "SEND"
        public var description: String { return self.rawValue }
    }

    public enum SmoothGroupTimestampOffsetMode: String, CustomStringConvertible, Codable {
        case useConfiguredOffset = "USE_CONFIGURED_OFFSET"
        case useEventStartDate = "USE_EVENT_START_DATE"
        public var description: String { return self.rawValue }
    }

    public enum TemporalFilterPostFilterSharpening: String, CustomStringConvertible, Codable {
        case auto = "AUTO"
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum TemporalFilterStrength: String, CustomStringConvertible, Codable {
        case auto = "AUTO"
        case strength1 = "STRENGTH_1"
        case strength10 = "STRENGTH_10"
        case strength11 = "STRENGTH_11"
        case strength12 = "STRENGTH_12"
        case strength13 = "STRENGTH_13"
        case strength14 = "STRENGTH_14"
        case strength15 = "STRENGTH_15"
        case strength16 = "STRENGTH_16"
        case strength2 = "STRENGTH_2"
        case strength3 = "STRENGTH_3"
        case strength4 = "STRENGTH_4"
        case strength5 = "STRENGTH_5"
        case strength6 = "STRENGTH_6"
        case strength7 = "STRENGTH_7"
        case strength8 = "STRENGTH_8"
        case strength9 = "STRENGTH_9"
        public var description: String { return self.rawValue }
    }

    public enum TimecodeConfigSource: String, CustomStringConvertible, Codable {
        case embedded = "EMBEDDED"
        case systemclock = "SYSTEMCLOCK"
        case zerobased = "ZEROBASED"
        public var description: String { return self.rawValue }
    }

    public enum TtmlDestinationStyleControl: String, CustomStringConvertible, Codable {
        case passthrough = "PASSTHROUGH"
        case useConfigured = "USE_CONFIGURED"
        public var description: String { return self.rawValue }
    }

    public enum UdpTimedMetadataId3Frame: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case priv = "PRIV"
        case tdrl = "TDRL"
        public var description: String { return self.rawValue }
    }

    public enum VideoDescriptionRespondToAfd: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case passthrough = "PASSTHROUGH"
        case respond = "RESPOND"
        public var description: String { return self.rawValue }
    }

    public enum VideoDescriptionScalingBehavior: String, CustomStringConvertible, Codable {
        case `default` = "DEFAULT"
        case stretchToOutput = "STRETCH_TO_OUTPUT"
        public var description: String { return self.rawValue }
    }

    public enum VideoSelectorColorSpace: String, CustomStringConvertible, Codable {
        case follow = "FOLLOW"
        case rec601 = "REC_601"
        case rec709 = "REC_709"
        public var description: String { return self.rawValue }
    }

    public enum VideoSelectorColorSpaceUsage: String, CustomStringConvertible, Codable {
        case fallback = "FALLBACK"
        case force = "FORCE"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AacSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bitrate", location: .body(locationName: "bitrate"), required: false, type: .double), 
            AWSShapeMember(label: "CodingMode", location: .body(locationName: "codingMode"), required: false, type: .enum), 
            AWSShapeMember(label: "InputType", location: .body(locationName: "inputType"), required: false, type: .enum), 
            AWSShapeMember(label: "Profile", location: .body(locationName: "profile"), required: false, type: .enum), 
            AWSShapeMember(label: "RateControlMode", location: .body(locationName: "rateControlMode"), required: false, type: .enum), 
            AWSShapeMember(label: "RawFormat", location: .body(locationName: "rawFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "SampleRate", location: .body(locationName: "sampleRate"), required: false, type: .double), 
            AWSShapeMember(label: "Spec", location: .body(locationName: "spec"), required: false, type: .enum), 
            AWSShapeMember(label: "VbrQuality", location: .body(locationName: "vbrQuality"), required: false, type: .enum)
        ]

        /// Average bitrate in bits/second. Valid values depend on rate control mode and profile.
        public let bitrate: Double?
        /// Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
        public let codingMode: AacCodingMode?
        /// Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.  The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd.
        /// Leave set to "normal" when input does not contain pre-mixed audio + AD.
        public let inputType: AacInputType?
        /// AAC Profile.
        public let profile: AacProfile?
        /// Rate Control Mode.
        public let rateControlMode: AacRateControlMode?
        /// Sets LATM / LOAS AAC output for raw containers.
        public let rawFormat: AacRawFormat?
        /// Sample rate in Hz. Valid values depend on rate control mode and profile.
        public let sampleRate: Double?
        /// Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
        public let spec: AacSpec?
        /// VBR Quality Level - Only used if rateControlMode is VBR.
        public let vbrQuality: AacVbrQuality?

        public init(bitrate: Double? = nil, codingMode: AacCodingMode? = nil, inputType: AacInputType? = nil, profile: AacProfile? = nil, rateControlMode: AacRateControlMode? = nil, rawFormat: AacRawFormat? = nil, sampleRate: Double? = nil, spec: AacSpec? = nil, vbrQuality: AacVbrQuality? = nil) {
            self.bitrate = bitrate
            self.codingMode = codingMode
            self.inputType = inputType
            self.profile = profile
            self.rateControlMode = rateControlMode
            self.rawFormat = rawFormat
            self.sampleRate = sampleRate
            self.spec = spec
            self.vbrQuality = vbrQuality
        }

        private enum CodingKeys: String, CodingKey {
            case bitrate = "bitrate"
            case codingMode = "codingMode"
            case inputType = "inputType"
            case profile = "profile"
            case rateControlMode = "rateControlMode"
            case rawFormat = "rawFormat"
            case sampleRate = "sampleRate"
            case spec = "spec"
            case vbrQuality = "vbrQuality"
        }
    }

    public struct Ac3Settings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bitrate", location: .body(locationName: "bitrate"), required: false, type: .double), 
            AWSShapeMember(label: "BitstreamMode", location: .body(locationName: "bitstreamMode"), required: false, type: .enum), 
            AWSShapeMember(label: "CodingMode", location: .body(locationName: "codingMode"), required: false, type: .enum), 
            AWSShapeMember(label: "Dialnorm", location: .body(locationName: "dialnorm"), required: false, type: .integer), 
            AWSShapeMember(label: "DrcProfile", location: .body(locationName: "drcProfile"), required: false, type: .enum), 
            AWSShapeMember(label: "LfeFilter", location: .body(locationName: "lfeFilter"), required: false, type: .enum), 
            AWSShapeMember(label: "MetadataControl", location: .body(locationName: "metadataControl"), required: false, type: .enum)
        ]

        /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
        public let bitrate: Double?
        /// Specifies the bitstream mode (bsmod) for the emitted AC-3 stream. See ATSC A/52-2012 for background on these values.
        public let bitstreamMode: Ac3BitstreamMode?
        /// Dolby Digital coding mode. Determines number of channels.
        public let codingMode: Ac3CodingMode?
        /// Sets the dialnorm for the output. If excluded and input audio is Dolby Digital, dialnorm will be passed through.
        public let dialnorm: Int?
        /// If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
        public let drcProfile: Ac3DrcProfile?
        /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.
        public let lfeFilter: Ac3LfeFilter?
        /// When set to "followInput", encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
        public let metadataControl: Ac3MetadataControl?

        public init(bitrate: Double? = nil, bitstreamMode: Ac3BitstreamMode? = nil, codingMode: Ac3CodingMode? = nil, dialnorm: Int? = nil, drcProfile: Ac3DrcProfile? = nil, lfeFilter: Ac3LfeFilter? = nil, metadataControl: Ac3MetadataControl? = nil) {
            self.bitrate = bitrate
            self.bitstreamMode = bitstreamMode
            self.codingMode = codingMode
            self.dialnorm = dialnorm
            self.drcProfile = drcProfile
            self.lfeFilter = lfeFilter
            self.metadataControl = metadataControl
        }

        public func validate(name: String) throws {
            try validate(self.dialnorm, name:"dialnorm", parent: name, max: 31)
            try validate(self.dialnorm, name:"dialnorm", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case bitrate = "bitrate"
            case bitstreamMode = "bitstreamMode"
            case codingMode = "codingMode"
            case dialnorm = "dialnorm"
            case drcProfile = "drcProfile"
            case lfeFilter = "lfeFilter"
            case metadataControl = "metadataControl"
        }
    }

    public struct ArchiveContainerSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "M2tsSettings", location: .body(locationName: "m2tsSettings"), required: false, type: .structure)
        ]

        public let m2tsSettings: M2tsSettings?

        public init(m2tsSettings: M2tsSettings? = nil) {
            self.m2tsSettings = m2tsSettings
        }

        public func validate(name: String) throws {
            try self.m2tsSettings?.validate(name: "\(name).m2tsSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case m2tsSettings = "m2tsSettings"
        }
    }

    public struct ArchiveGroupSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: true, type: .structure), 
            AWSShapeMember(label: "RolloverInterval", location: .body(locationName: "rolloverInterval"), required: false, type: .integer)
        ]

        /// A directory and base filename where archive files should be written.
        public let destination: OutputLocationRef
        /// Number of seconds to write to archive file before closing and starting a new one.
        public let rolloverInterval: Int?

        public init(destination: OutputLocationRef, rolloverInterval: Int? = nil) {
            self.destination = destination
            self.rolloverInterval = rolloverInterval
        }

        public func validate(name: String) throws {
            try validate(self.rolloverInterval, name:"rolloverInterval", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "destination"
            case rolloverInterval = "rolloverInterval"
        }
    }

    public struct ArchiveOutputSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContainerSettings", location: .body(locationName: "containerSettings"), required: true, type: .structure), 
            AWSShapeMember(label: "Extension", location: .body(locationName: "extension"), required: false, type: .string), 
            AWSShapeMember(label: "NameModifier", location: .body(locationName: "nameModifier"), required: false, type: .string)
        ]

        /// Settings specific to the container type of the file.
        public let containerSettings: ArchiveContainerSettings
        /// Output file extension. If excluded, this will be auto-selected from the container type.
        public let `extension`: String?
        /// String concatenated to the end of the destination filename.  Required for multiple outputs of the same type.
        public let nameModifier: String?

        public init(containerSettings: ArchiveContainerSettings, extension: String? = nil, nameModifier: String? = nil) {
            self.containerSettings = containerSettings
            self.`extension` = `extension`
            self.nameModifier = nameModifier
        }

        public func validate(name: String) throws {
            try self.containerSettings.validate(name: "\(name).containerSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case containerSettings = "containerSettings"
            case `extension` = "extension"
            case nameModifier = "nameModifier"
        }
    }

    public struct AribDestinationSettings: AWSShape {


        public init() {
        }

    }

    public struct AribSourceSettings: AWSShape {


        public init() {
        }

    }

    public struct AudioChannelMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputChannelLevels", location: .body(locationName: "inputChannelLevels"), required: true, type: .list), 
            AWSShapeMember(label: "OutputChannel", location: .body(locationName: "outputChannel"), required: true, type: .integer)
        ]

        /// Indices and gain values for each input channel that should be remixed into this output channel.
        public let inputChannelLevels: [InputChannelLevel]
        /// The index of the output channel being produced.
        public let outputChannel: Int

        public init(inputChannelLevels: [InputChannelLevel], outputChannel: Int) {
            self.inputChannelLevels = inputChannelLevels
            self.outputChannel = outputChannel
        }

        public func validate(name: String) throws {
            try self.inputChannelLevels.forEach {
                try $0.validate(name: "\(name).inputChannelLevels[]")
            }
            try validate(self.outputChannel, name:"outputChannel", parent: name, max: 7)
            try validate(self.outputChannel, name:"outputChannel", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case inputChannelLevels = "inputChannelLevels"
            case outputChannel = "outputChannel"
        }
    }

    public struct AudioCodecSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AacSettings", location: .body(locationName: "aacSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Ac3Settings", location: .body(locationName: "ac3Settings"), required: false, type: .structure), 
            AWSShapeMember(label: "Eac3Settings", location: .body(locationName: "eac3Settings"), required: false, type: .structure), 
            AWSShapeMember(label: "Mp2Settings", location: .body(locationName: "mp2Settings"), required: false, type: .structure), 
            AWSShapeMember(label: "PassThroughSettings", location: .body(locationName: "passThroughSettings"), required: false, type: .structure)
        ]

        public let aacSettings: AacSettings?
        public let ac3Settings: Ac3Settings?
        public let eac3Settings: Eac3Settings?
        public let mp2Settings: Mp2Settings?
        public let passThroughSettings: PassThroughSettings?

        public init(aacSettings: AacSettings? = nil, ac3Settings: Ac3Settings? = nil, eac3Settings: Eac3Settings? = nil, mp2Settings: Mp2Settings? = nil, passThroughSettings: PassThroughSettings? = nil) {
            self.aacSettings = aacSettings
            self.ac3Settings = ac3Settings
            self.eac3Settings = eac3Settings
            self.mp2Settings = mp2Settings
            self.passThroughSettings = passThroughSettings
        }

        public func validate(name: String) throws {
            try self.ac3Settings?.validate(name: "\(name).ac3Settings")
            try self.eac3Settings?.validate(name: "\(name).eac3Settings")
        }

        private enum CodingKeys: String, CodingKey {
            case aacSettings = "aacSettings"
            case ac3Settings = "ac3Settings"
            case eac3Settings = "eac3Settings"
            case mp2Settings = "mp2Settings"
            case passThroughSettings = "passThroughSettings"
        }
    }

    public struct AudioDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AudioNormalizationSettings", location: .body(locationName: "audioNormalizationSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "AudioSelectorName", location: .body(locationName: "audioSelectorName"), required: true, type: .string), 
            AWSShapeMember(label: "AudioType", location: .body(locationName: "audioType"), required: false, type: .enum), 
            AWSShapeMember(label: "AudioTypeControl", location: .body(locationName: "audioTypeControl"), required: false, type: .enum), 
            AWSShapeMember(label: "CodecSettings", location: .body(locationName: "codecSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "LanguageCode", location: .body(locationName: "languageCode"), required: false, type: .string), 
            AWSShapeMember(label: "LanguageCodeControl", location: .body(locationName: "languageCodeControl"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "RemixSettings", location: .body(locationName: "remixSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "StreamName", location: .body(locationName: "streamName"), required: false, type: .string)
        ]

        /// Advanced audio normalization settings.
        public let audioNormalizationSettings: AudioNormalizationSettings?
        /// The name of the AudioSelector used as the source for this AudioDescription.
        public let audioSelectorName: String
        /// Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
        public let audioType: AudioType?
        /// Determines how audio type is determined.
        ///   followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output.
        ///   useConfigured: The value in Audio Type is included in the output.
        /// Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
        public let audioTypeControl: AudioDescriptionAudioTypeControl?
        /// Audio codec settings.
        public let codecSettings: AudioCodecSettings?
        /// Indicates the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
        public let languageCode: String?
        /// Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
        public let languageCodeControl: AudioDescriptionLanguageCodeControl?
        /// The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription.  Description names should be unique within this Live Event.
        public let name: String
        /// Settings that control how input audio channels are remixed into the output audio channels.
        public let remixSettings: RemixSettings?
        /// Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
        public let streamName: String?

        public init(audioNormalizationSettings: AudioNormalizationSettings? = nil, audioSelectorName: String, audioType: AudioType? = nil, audioTypeControl: AudioDescriptionAudioTypeControl? = nil, codecSettings: AudioCodecSettings? = nil, languageCode: String? = nil, languageCodeControl: AudioDescriptionLanguageCodeControl? = nil, name: String, remixSettings: RemixSettings? = nil, streamName: String? = nil) {
            self.audioNormalizationSettings = audioNormalizationSettings
            self.audioSelectorName = audioSelectorName
            self.audioType = audioType
            self.audioTypeControl = audioTypeControl
            self.codecSettings = codecSettings
            self.languageCode = languageCode
            self.languageCodeControl = languageCodeControl
            self.name = name
            self.remixSettings = remixSettings
            self.streamName = streamName
        }

        public func validate(name: String) throws {
            try self.codecSettings?.validate(name: "\(name).codecSettings")
            try validate(self.languageCode, name:"languageCode", parent: name, max: 3)
            try validate(self.languageCode, name:"languageCode", parent: name, min: 3)
            try self.remixSettings?.validate(name: "\(name).remixSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case audioNormalizationSettings = "audioNormalizationSettings"
            case audioSelectorName = "audioSelectorName"
            case audioType = "audioType"
            case audioTypeControl = "audioTypeControl"
            case codecSettings = "codecSettings"
            case languageCode = "languageCode"
            case languageCodeControl = "languageCodeControl"
            case name = "name"
            case remixSettings = "remixSettings"
            case streamName = "streamName"
        }
    }

    public struct AudioLanguageSelection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", location: .body(locationName: "languageCode"), required: true, type: .string), 
            AWSShapeMember(label: "LanguageSelectionPolicy", location: .body(locationName: "languageSelectionPolicy"), required: false, type: .enum)
        ]

        /// Selects a specific three-letter language code from within an audio source.
        public let languageCode: String
        /// When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.
        public let languageSelectionPolicy: AudioLanguageSelectionPolicy?

        public init(languageCode: String, languageSelectionPolicy: AudioLanguageSelectionPolicy? = nil) {
            self.languageCode = languageCode
            self.languageSelectionPolicy = languageSelectionPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "languageCode"
            case languageSelectionPolicy = "languageSelectionPolicy"
        }
    }

    public struct AudioNormalizationSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Algorithm", location: .body(locationName: "algorithm"), required: false, type: .enum), 
            AWSShapeMember(label: "AlgorithmControl", location: .body(locationName: "algorithmControl"), required: false, type: .enum), 
            AWSShapeMember(label: "TargetLkfs", location: .body(locationName: "targetLkfs"), required: false, type: .double)
        ]

        /// Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.
        public let algorithm: AudioNormalizationAlgorithm?
        /// When set to correctAudio the output audio is corrected using the chosen algorithm. If set to measureOnly, the audio will be measured but not adjusted.
        public let algorithmControl: AudioNormalizationAlgorithmControl?
        /// Target LKFS(loudness) to adjust volume to. If no value is entered, a default value will be used according to the chosen algorithm.  The CALM Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a target of -23 LKFS.
        public let targetLkfs: Double?

        public init(algorithm: AudioNormalizationAlgorithm? = nil, algorithmControl: AudioNormalizationAlgorithmControl? = nil, targetLkfs: Double? = nil) {
            self.algorithm = algorithm
            self.algorithmControl = algorithmControl
            self.targetLkfs = targetLkfs
        }

        private enum CodingKeys: String, CodingKey {
            case algorithm = "algorithm"
            case algorithmControl = "algorithmControl"
            case targetLkfs = "targetLkfs"
        }
    }

    public struct AudioOnlyHlsSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AudioGroupId", location: .body(locationName: "audioGroupId"), required: false, type: .string), 
            AWSShapeMember(label: "AudioOnlyImage", location: .body(locationName: "audioOnlyImage"), required: false, type: .structure), 
            AWSShapeMember(label: "AudioTrackType", location: .body(locationName: "audioTrackType"), required: false, type: .enum), 
            AWSShapeMember(label: "SegmentType", location: .body(locationName: "segmentType"), required: false, type: .enum)
        ]

        /// Specifies the group to which the audio Rendition belongs.
        public let audioGroupId: String?
        /// Optional. Specifies the .jpg or .png image to use as the cover art for an audio-only output. We recommend a low bit-size file because the image increases the output audio bandwidth.
        /// The image is attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.
        public let audioOnlyImage: InputLocation?
        /// Four types of audio-only tracks are supported:
        /// Audio-Only Variant Stream
        /// The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest.
        /// Alternate Audio, Auto Select, Default
        /// Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES
        /// Alternate Audio, Auto Select, Not Default
        /// Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES
        /// Alternate Audio, not Auto Select
        /// Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
        public let audioTrackType: AudioOnlyHlsTrackType?
        /// Specifies the segment type.
        public let segmentType: AudioOnlyHlsSegmentType?

        public init(audioGroupId: String? = nil, audioOnlyImage: InputLocation? = nil, audioTrackType: AudioOnlyHlsTrackType? = nil, segmentType: AudioOnlyHlsSegmentType? = nil) {
            self.audioGroupId = audioGroupId
            self.audioOnlyImage = audioOnlyImage
            self.audioTrackType = audioTrackType
            self.segmentType = segmentType
        }

        private enum CodingKeys: String, CodingKey {
            case audioGroupId = "audioGroupId"
            case audioOnlyImage = "audioOnlyImage"
            case audioTrackType = "audioTrackType"
            case segmentType = "segmentType"
        }
    }

    public struct AudioPidSelection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Pid", location: .body(locationName: "pid"), required: true, type: .integer)
        ]

        /// Selects a specific PID from within a source.
        public let pid: Int

        public init(pid: Int) {
            self.pid = pid
        }

        public func validate(name: String) throws {
            try validate(self.pid, name:"pid", parent: name, max: 8191)
            try validate(self.pid, name:"pid", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case pid = "pid"
        }
    }

    public struct AudioSelector: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "SelectorSettings", location: .body(locationName: "selectorSettings"), required: false, type: .structure)
        ]

        /// The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector.  Selector names should be unique per input.
        public let name: String
        /// The audio selector settings.
        public let selectorSettings: AudioSelectorSettings?

        public init(name: String, selectorSettings: AudioSelectorSettings? = nil) {
            self.name = name
            self.selectorSettings = selectorSettings
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, min: 1)
            try self.selectorSettings?.validate(name: "\(name).selectorSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case selectorSettings = "selectorSettings"
        }
    }

    public struct AudioSelectorSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AudioLanguageSelection", location: .body(locationName: "audioLanguageSelection"), required: false, type: .structure), 
            AWSShapeMember(label: "AudioPidSelection", location: .body(locationName: "audioPidSelection"), required: false, type: .structure), 
            AWSShapeMember(label: "AudioTrackSelection", location: .body(locationName: "audioTrackSelection"), required: false, type: .structure)
        ]

        public let audioLanguageSelection: AudioLanguageSelection?
        public let audioPidSelection: AudioPidSelection?
        public let audioTrackSelection: AudioTrackSelection?

        public init(audioLanguageSelection: AudioLanguageSelection? = nil, audioPidSelection: AudioPidSelection? = nil, audioTrackSelection: AudioTrackSelection? = nil) {
            self.audioLanguageSelection = audioLanguageSelection
            self.audioPidSelection = audioPidSelection
            self.audioTrackSelection = audioTrackSelection
        }

        public func validate(name: String) throws {
            try self.audioPidSelection?.validate(name: "\(name).audioPidSelection")
            try self.audioTrackSelection?.validate(name: "\(name).audioTrackSelection")
        }

        private enum CodingKeys: String, CodingKey {
            case audioLanguageSelection = "audioLanguageSelection"
            case audioPidSelection = "audioPidSelection"
            case audioTrackSelection = "audioTrackSelection"
        }
    }

    public struct AudioTrack: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Track", location: .body(locationName: "track"), required: true, type: .integer)
        ]

        /// 1-based integer value that maps to a specific audio track
        public let track: Int

        public init(track: Int) {
            self.track = track
        }

        public func validate(name: String) throws {
            try validate(self.track, name:"track", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case track = "track"
        }
    }

    public struct AudioTrackSelection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tracks", location: .body(locationName: "tracks"), required: true, type: .list)
        ]

        /// Selects one or more unique audio tracks from within an mp4 source.
        public let tracks: [AudioTrack]

        public init(tracks: [AudioTrack]) {
            self.tracks = tracks
        }

        public func validate(name: String) throws {
            try self.tracks.forEach {
                try $0.validate(name: "\(name).tracks[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case tracks = "tracks"
        }
    }

    public struct AutomaticInputFailoverSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputPreference", location: .body(locationName: "inputPreference"), required: false, type: .enum), 
            AWSShapeMember(label: "SecondaryInputId", location: .body(locationName: "secondaryInputId"), required: true, type: .string)
        ]

        /// Input preference when deciding which input to make active when a previously failed input has recovered.
        public let inputPreference: InputPreference?
        /// The input ID of the secondary input in the automatic input failover pair.
        public let secondaryInputId: String

        public init(inputPreference: InputPreference? = nil, secondaryInputId: String) {
            self.inputPreference = inputPreference
            self.secondaryInputId = secondaryInputId
        }

        private enum CodingKeys: String, CodingKey {
            case inputPreference = "inputPreference"
            case secondaryInputId = "secondaryInputId"
        }
    }

    public struct AvailBlanking: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailBlankingImage", location: .body(locationName: "availBlankingImage"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]

        /// Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.
        public let availBlankingImage: InputLocation?
        /// When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
        public let state: AvailBlankingState?

        public init(availBlankingImage: InputLocation? = nil, state: AvailBlankingState? = nil) {
            self.availBlankingImage = availBlankingImage
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case availBlankingImage = "availBlankingImage"
            case state = "state"
        }
    }

    public struct AvailConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailSettings", location: .body(locationName: "availSettings"), required: false, type: .structure)
        ]

        /// Ad avail settings.
        public let availSettings: AvailSettings?

        public init(availSettings: AvailSettings? = nil) {
            self.availSettings = availSettings
        }

        public func validate(name: String) throws {
            try self.availSettings?.validate(name: "\(name).availSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case availSettings = "availSettings"
        }
    }

    public struct AvailSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Scte35SpliceInsert", location: .body(locationName: "scte35SpliceInsert"), required: false, type: .structure), 
            AWSShapeMember(label: "Scte35TimeSignalApos", location: .body(locationName: "scte35TimeSignalApos"), required: false, type: .structure)
        ]

        public let scte35SpliceInsert: Scte35SpliceInsert?
        public let scte35TimeSignalApos: Scte35TimeSignalApos?

        public init(scte35SpliceInsert: Scte35SpliceInsert? = nil, scte35TimeSignalApos: Scte35TimeSignalApos? = nil) {
            self.scte35SpliceInsert = scte35SpliceInsert
            self.scte35TimeSignalApos = scte35TimeSignalApos
        }

        public func validate(name: String) throws {
            try self.scte35SpliceInsert?.validate(name: "\(name).scte35SpliceInsert")
            try self.scte35TimeSignalApos?.validate(name: "\(name).scte35TimeSignalApos")
        }

        private enum CodingKeys: String, CodingKey {
            case scte35SpliceInsert = "scte35SpliceInsert"
            case scte35TimeSignalApos = "scte35TimeSignalApos"
        }
    }

    public struct BatchScheduleActionCreateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduleActions", location: .body(locationName: "scheduleActions"), required: true, type: .list)
        ]

        /// A list of schedule actions to create.
        public let scheduleActions: [ScheduleAction]

        public init(scheduleActions: [ScheduleAction]) {
            self.scheduleActions = scheduleActions
        }

        public func validate(name: String) throws {
            try self.scheduleActions.forEach {
                try $0.validate(name: "\(name).scheduleActions[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case scheduleActions = "scheduleActions"
        }
    }

    public struct BatchScheduleActionCreateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduleActions", location: .body(locationName: "scheduleActions"), required: true, type: .list)
        ]

        /// List of actions that have been created in the schedule.
        public let scheduleActions: [ScheduleAction]

        public init(scheduleActions: [ScheduleAction]) {
            self.scheduleActions = scheduleActions
        }

        private enum CodingKeys: String, CodingKey {
            case scheduleActions = "scheduleActions"
        }
    }

    public struct BatchScheduleActionDeleteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionNames", location: .body(locationName: "actionNames"), required: true, type: .list)
        ]

        /// A list of schedule actions to delete.
        public let actionNames: [String]

        public init(actionNames: [String]) {
            self.actionNames = actionNames
        }

        private enum CodingKeys: String, CodingKey {
            case actionNames = "actionNames"
        }
    }

    public struct BatchScheduleActionDeleteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduleActions", location: .body(locationName: "scheduleActions"), required: true, type: .list)
        ]

        /// List of actions that have been deleted from the schedule.
        public let scheduleActions: [ScheduleAction]

        public init(scheduleActions: [ScheduleAction]) {
            self.scheduleActions = scheduleActions
        }

        private enum CodingKeys: String, CodingKey {
            case scheduleActions = "scheduleActions"
        }
    }

    public struct BatchUpdateScheduleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelId", location: .uri(locationName: "channelId"), required: true, type: .string), 
            AWSShapeMember(label: "Creates", location: .body(locationName: "creates"), required: false, type: .structure), 
            AWSShapeMember(label: "Deletes", location: .body(locationName: "deletes"), required: false, type: .structure)
        ]

        public let channelId: String
        /// Schedule actions to create in the schedule.
        public let creates: BatchScheduleActionCreateRequest?
        /// Schedule actions to delete from the schedule.
        public let deletes: BatchScheduleActionDeleteRequest?

        public init(channelId: String, creates: BatchScheduleActionCreateRequest? = nil, deletes: BatchScheduleActionDeleteRequest? = nil) {
            self.channelId = channelId
            self.creates = creates
            self.deletes = deletes
        }

        public func validate(name: String) throws {
            try self.creates?.validate(name: "\(name).creates")
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "channelId"
            case creates = "creates"
            case deletes = "deletes"
        }
    }

    public struct BatchUpdateScheduleResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Creates", location: .body(locationName: "creates"), required: false, type: .structure), 
            AWSShapeMember(label: "Deletes", location: .body(locationName: "deletes"), required: false, type: .structure)
        ]

        public let creates: BatchScheduleActionCreateResult?
        public let deletes: BatchScheduleActionDeleteResult?

        public init(creates: BatchScheduleActionCreateResult? = nil, deletes: BatchScheduleActionDeleteResult? = nil) {
            self.creates = creates
            self.deletes = deletes
        }

        private enum CodingKeys: String, CodingKey {
            case creates = "creates"
            case deletes = "deletes"
        }
    }

    public struct BlackoutSlate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlackoutSlateImage", location: .body(locationName: "blackoutSlateImage"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkEndBlackout", location: .body(locationName: "networkEndBlackout"), required: false, type: .enum), 
            AWSShapeMember(label: "NetworkEndBlackoutImage", location: .body(locationName: "networkEndBlackoutImage"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkId", location: .body(locationName: "networkId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]

        /// Blackout slate image to be used. Leave empty for solid black. Only bmp and png images are supported.
        public let blackoutSlateImage: InputLocation?
        /// Setting to enabled causes the encoder to blackout the video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted when the Network Start Segmentation Descriptor is encountered. The Network End and Network Start descriptors must contain a network ID that matches the value entered in "Network ID".
        public let networkEndBlackout: BlackoutSlateNetworkEndBlackout?
        /// Path to local file to use as Network End Blackout image. Image will be scaled to fill the entire output raster.
        public let networkEndBlackoutImage: InputLocation?
        /// Provides Network ID that matches EIDR ID format (e.g., "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").
        public let networkId: String?
        /// When set to enabled, causes video, audio and captions to be blanked when indicated by program metadata.
        public let state: BlackoutSlateState?

        public init(blackoutSlateImage: InputLocation? = nil, networkEndBlackout: BlackoutSlateNetworkEndBlackout? = nil, networkEndBlackoutImage: InputLocation? = nil, networkId: String? = nil, state: BlackoutSlateState? = nil) {
            self.blackoutSlateImage = blackoutSlateImage
            self.networkEndBlackout = networkEndBlackout
            self.networkEndBlackoutImage = networkEndBlackoutImage
            self.networkId = networkId
            self.state = state
        }

        public func validate(name: String) throws {
            try validate(self.networkId, name:"networkId", parent: name, max: 34)
            try validate(self.networkId, name:"networkId", parent: name, min: 34)
        }

        private enum CodingKeys: String, CodingKey {
            case blackoutSlateImage = "blackoutSlateImage"
            case networkEndBlackout = "networkEndBlackout"
            case networkEndBlackoutImage = "networkEndBlackoutImage"
            case networkId = "networkId"
            case state = "state"
        }
    }

    public struct BurnInDestinationSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alignment", location: .body(locationName: "alignment"), required: false, type: .enum), 
            AWSShapeMember(label: "BackgroundColor", location: .body(locationName: "backgroundColor"), required: false, type: .enum), 
            AWSShapeMember(label: "BackgroundOpacity", location: .body(locationName: "backgroundOpacity"), required: false, type: .integer), 
            AWSShapeMember(label: "Font", location: .body(locationName: "font"), required: false, type: .structure), 
            AWSShapeMember(label: "FontColor", location: .body(locationName: "fontColor"), required: false, type: .enum), 
            AWSShapeMember(label: "FontOpacity", location: .body(locationName: "fontOpacity"), required: false, type: .integer), 
            AWSShapeMember(label: "FontResolution", location: .body(locationName: "fontResolution"), required: false, type: .integer), 
            AWSShapeMember(label: "FontSize", location: .body(locationName: "fontSize"), required: false, type: .string), 
            AWSShapeMember(label: "OutlineColor", location: .body(locationName: "outlineColor"), required: false, type: .enum), 
            AWSShapeMember(label: "OutlineSize", location: .body(locationName: "outlineSize"), required: false, type: .integer), 
            AWSShapeMember(label: "ShadowColor", location: .body(locationName: "shadowColor"), required: false, type: .enum), 
            AWSShapeMember(label: "ShadowOpacity", location: .body(locationName: "shadowOpacity"), required: false, type: .integer), 
            AWSShapeMember(label: "ShadowXOffset", location: .body(locationName: "shadowXOffset"), required: false, type: .integer), 
            AWSShapeMember(label: "ShadowYOffset", location: .body(locationName: "shadowYOffset"), required: false, type: .integer), 
            AWSShapeMember(label: "TeletextGridControl", location: .body(locationName: "teletextGridControl"), required: false, type: .enum), 
            AWSShapeMember(label: "XPosition", location: .body(locationName: "xPosition"), required: false, type: .integer), 
            AWSShapeMember(label: "YPosition", location: .body(locationName: "yPosition"), required: false, type: .integer)
        ]

        /// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles.  All burn-in and DVB-Sub font settings must match.
        public let alignment: BurnInAlignment?
        /// Specifies the color of the rectangle behind the captions.  All burn-in and DVB-Sub font settings must match.
        public let backgroundColor: BurnInBackgroundColor?
        /// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent).  All burn-in and DVB-Sub font settings must match.
        public let backgroundOpacity: Int?
        /// External font file used for caption burn-in. File extension must be 'ttf' or 'tte'.  Although the user can select output fonts for many different types of input captions,  embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts.  All burn-in and DVB-Sub font settings must match.
        public let font: InputLocation?
        /// Specifies the color of the burned-in captions.  This option is not valid for source captions that are STL, 608/embedded or teletext.  These source settings are already pre-defined by the caption stream.  All burn-in and DVB-Sub font settings must match.
        public let fontColor: BurnInFontColor?
        /// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent.  All burn-in and DVB-Sub font settings must match.
        public let fontOpacity: Int?
        /// Font resolution in DPI (dots per inch); default is 96 dpi.  All burn-in and DVB-Sub font settings must match.
        public let fontResolution: Int?
        /// When set to 'auto' fontSize will scale depending on the size of the output.  Giving a positive integer will specify the exact font size in points.  All burn-in and DVB-Sub font settings must match.
        public let fontSize: String?
        /// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public let outlineColor: BurnInOutlineColor?
        /// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public let outlineSize: Int?
        /// Specifies the color of the shadow cast by the captions.  All burn-in and DVB-Sub font settings must match.
        public let shadowColor: BurnInShadowColor?
        /// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent).  All burn-in and DVB-Sub font settings must match.
        public let shadowOpacity: Int?
        /// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left.  All burn-in and DVB-Sub font settings must match.
        public let shadowXOffset: Int?
        /// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text.  All burn-in and DVB-Sub font settings must match.
        public let shadowYOffset: Int?
        /// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
        public let teletextGridControl: BurnInTeletextGridControl?
        /// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter.  All burn-in and DVB-Sub font settings must match.
        public let xPosition: Int?
        /// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output.  All burn-in and DVB-Sub font settings must match.
        public let yPosition: Int?

        public init(alignment: BurnInAlignment? = nil, backgroundColor: BurnInBackgroundColor? = nil, backgroundOpacity: Int? = nil, font: InputLocation? = nil, fontColor: BurnInFontColor? = nil, fontOpacity: Int? = nil, fontResolution: Int? = nil, fontSize: String? = nil, outlineColor: BurnInOutlineColor? = nil, outlineSize: Int? = nil, shadowColor: BurnInShadowColor? = nil, shadowOpacity: Int? = nil, shadowXOffset: Int? = nil, shadowYOffset: Int? = nil, teletextGridControl: BurnInTeletextGridControl? = nil, xPosition: Int? = nil, yPosition: Int? = nil) {
            self.alignment = alignment
            self.backgroundColor = backgroundColor
            self.backgroundOpacity = backgroundOpacity
            self.font = font
            self.fontColor = fontColor
            self.fontOpacity = fontOpacity
            self.fontResolution = fontResolution
            self.fontSize = fontSize
            self.outlineColor = outlineColor
            self.outlineSize = outlineSize
            self.shadowColor = shadowColor
            self.shadowOpacity = shadowOpacity
            self.shadowXOffset = shadowXOffset
            self.shadowYOffset = shadowYOffset
            self.teletextGridControl = teletextGridControl
            self.xPosition = xPosition
            self.yPosition = yPosition
        }

        public func validate(name: String) throws {
            try validate(self.backgroundOpacity, name:"backgroundOpacity", parent: name, max: 255)
            try validate(self.backgroundOpacity, name:"backgroundOpacity", parent: name, min: 0)
            try validate(self.fontOpacity, name:"fontOpacity", parent: name, max: 255)
            try validate(self.fontOpacity, name:"fontOpacity", parent: name, min: 0)
            try validate(self.fontResolution, name:"fontResolution", parent: name, max: 600)
            try validate(self.fontResolution, name:"fontResolution", parent: name, min: 96)
            try validate(self.outlineSize, name:"outlineSize", parent: name, max: 10)
            try validate(self.outlineSize, name:"outlineSize", parent: name, min: 0)
            try validate(self.shadowOpacity, name:"shadowOpacity", parent: name, max: 255)
            try validate(self.shadowOpacity, name:"shadowOpacity", parent: name, min: 0)
            try validate(self.xPosition, name:"xPosition", parent: name, min: 0)
            try validate(self.yPosition, name:"yPosition", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case alignment = "alignment"
            case backgroundColor = "backgroundColor"
            case backgroundOpacity = "backgroundOpacity"
            case font = "font"
            case fontColor = "fontColor"
            case fontOpacity = "fontOpacity"
            case fontResolution = "fontResolution"
            case fontSize = "fontSize"
            case outlineColor = "outlineColor"
            case outlineSize = "outlineSize"
            case shadowColor = "shadowColor"
            case shadowOpacity = "shadowOpacity"
            case shadowXOffset = "shadowXOffset"
            case shadowYOffset = "shadowYOffset"
            case teletextGridControl = "teletextGridControl"
            case xPosition = "xPosition"
            case yPosition = "yPosition"
        }
    }

    public struct CaptionDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CaptionSelectorName", location: .body(locationName: "captionSelectorName"), required: true, type: .string), 
            AWSShapeMember(label: "DestinationSettings", location: .body(locationName: "destinationSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "LanguageCode", location: .body(locationName: "languageCode"), required: false, type: .string), 
            AWSShapeMember(label: "LanguageDescription", location: .body(locationName: "languageDescription"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string)
        ]

        /// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
        public let captionSelectorName: String
        /// Additional settings for captions destination that depend on the destination type.
        public let destinationSettings: CaptionDestinationSettings?
        /// ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
        public let languageCode: String?
        /// Human readable information to indicate captions available for players (eg. English, or Spanish).
        public let languageDescription: String?
        /// Name of the caption description.  Used to associate a caption description with an output.  Names must be unique within an event.
        public let name: String

        public init(captionSelectorName: String, destinationSettings: CaptionDestinationSettings? = nil, languageCode: String? = nil, languageDescription: String? = nil, name: String) {
            self.captionSelectorName = captionSelectorName
            self.destinationSettings = destinationSettings
            self.languageCode = languageCode
            self.languageDescription = languageDescription
            self.name = name
        }

        public func validate(name: String) throws {
            try self.destinationSettings?.validate(name: "\(name).destinationSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case captionSelectorName = "captionSelectorName"
            case destinationSettings = "destinationSettings"
            case languageCode = "languageCode"
            case languageDescription = "languageDescription"
            case name = "name"
        }
    }

    public struct CaptionDestinationSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AribDestinationSettings", location: .body(locationName: "aribDestinationSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "BurnInDestinationSettings", location: .body(locationName: "burnInDestinationSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DvbSubDestinationSettings", location: .body(locationName: "dvbSubDestinationSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "EmbeddedDestinationSettings", location: .body(locationName: "embeddedDestinationSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "EmbeddedPlusScte20DestinationSettings", location: .body(locationName: "embeddedPlusScte20DestinationSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "RtmpCaptionInfoDestinationSettings", location: .body(locationName: "rtmpCaptionInfoDestinationSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Scte20PlusEmbeddedDestinationSettings", location: .body(locationName: "scte20PlusEmbeddedDestinationSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Scte27DestinationSettings", location: .body(locationName: "scte27DestinationSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "SmpteTtDestinationSettings", location: .body(locationName: "smpteTtDestinationSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "TeletextDestinationSettings", location: .body(locationName: "teletextDestinationSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "TtmlDestinationSettings", location: .body(locationName: "ttmlDestinationSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "WebvttDestinationSettings", location: .body(locationName: "webvttDestinationSettings"), required: false, type: .structure)
        ]

        public let aribDestinationSettings: AribDestinationSettings?
        public let burnInDestinationSettings: BurnInDestinationSettings?
        public let dvbSubDestinationSettings: DvbSubDestinationSettings?
        public let embeddedDestinationSettings: EmbeddedDestinationSettings?
        public let embeddedPlusScte20DestinationSettings: EmbeddedPlusScte20DestinationSettings?
        public let rtmpCaptionInfoDestinationSettings: RtmpCaptionInfoDestinationSettings?
        public let scte20PlusEmbeddedDestinationSettings: Scte20PlusEmbeddedDestinationSettings?
        public let scte27DestinationSettings: Scte27DestinationSettings?
        public let smpteTtDestinationSettings: SmpteTtDestinationSettings?
        public let teletextDestinationSettings: TeletextDestinationSettings?
        public let ttmlDestinationSettings: TtmlDestinationSettings?
        public let webvttDestinationSettings: WebvttDestinationSettings?

        public init(aribDestinationSettings: AribDestinationSettings? = nil, burnInDestinationSettings: BurnInDestinationSettings? = nil, dvbSubDestinationSettings: DvbSubDestinationSettings? = nil, embeddedDestinationSettings: EmbeddedDestinationSettings? = nil, embeddedPlusScte20DestinationSettings: EmbeddedPlusScte20DestinationSettings? = nil, rtmpCaptionInfoDestinationSettings: RtmpCaptionInfoDestinationSettings? = nil, scte20PlusEmbeddedDestinationSettings: Scte20PlusEmbeddedDestinationSettings? = nil, scte27DestinationSettings: Scte27DestinationSettings? = nil, smpteTtDestinationSettings: SmpteTtDestinationSettings? = nil, teletextDestinationSettings: TeletextDestinationSettings? = nil, ttmlDestinationSettings: TtmlDestinationSettings? = nil, webvttDestinationSettings: WebvttDestinationSettings? = nil) {
            self.aribDestinationSettings = aribDestinationSettings
            self.burnInDestinationSettings = burnInDestinationSettings
            self.dvbSubDestinationSettings = dvbSubDestinationSettings
            self.embeddedDestinationSettings = embeddedDestinationSettings
            self.embeddedPlusScte20DestinationSettings = embeddedPlusScte20DestinationSettings
            self.rtmpCaptionInfoDestinationSettings = rtmpCaptionInfoDestinationSettings
            self.scte20PlusEmbeddedDestinationSettings = scte20PlusEmbeddedDestinationSettings
            self.scte27DestinationSettings = scte27DestinationSettings
            self.smpteTtDestinationSettings = smpteTtDestinationSettings
            self.teletextDestinationSettings = teletextDestinationSettings
            self.ttmlDestinationSettings = ttmlDestinationSettings
            self.webvttDestinationSettings = webvttDestinationSettings
        }

        public func validate(name: String) throws {
            try self.burnInDestinationSettings?.validate(name: "\(name).burnInDestinationSettings")
            try self.dvbSubDestinationSettings?.validate(name: "\(name).dvbSubDestinationSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case aribDestinationSettings = "aribDestinationSettings"
            case burnInDestinationSettings = "burnInDestinationSettings"
            case dvbSubDestinationSettings = "dvbSubDestinationSettings"
            case embeddedDestinationSettings = "embeddedDestinationSettings"
            case embeddedPlusScte20DestinationSettings = "embeddedPlusScte20DestinationSettings"
            case rtmpCaptionInfoDestinationSettings = "rtmpCaptionInfoDestinationSettings"
            case scte20PlusEmbeddedDestinationSettings = "scte20PlusEmbeddedDestinationSettings"
            case scte27DestinationSettings = "scte27DestinationSettings"
            case smpteTtDestinationSettings = "smpteTtDestinationSettings"
            case teletextDestinationSettings = "teletextDestinationSettings"
            case ttmlDestinationSettings = "ttmlDestinationSettings"
            case webvttDestinationSettings = "webvttDestinationSettings"
        }
    }

    public struct CaptionLanguageMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CaptionChannel", location: .body(locationName: "captionChannel"), required: true, type: .integer), 
            AWSShapeMember(label: "LanguageCode", location: .body(locationName: "languageCode"), required: true, type: .string), 
            AWSShapeMember(label: "LanguageDescription", location: .body(locationName: "languageDescription"), required: true, type: .string)
        ]

        /// The closed caption channel being described by this CaptionLanguageMapping.  Each channel mapping must have a unique channel number (maximum of 4)
        public let captionChannel: Int
        /// Three character ISO 639-2 language code (see http://www.loc.gov/standards/iso639-2)
        public let languageCode: String
        /// Textual description of language
        public let languageDescription: String

        public init(captionChannel: Int, languageCode: String, languageDescription: String) {
            self.captionChannel = captionChannel
            self.languageCode = languageCode
            self.languageDescription = languageDescription
        }

        public func validate(name: String) throws {
            try validate(self.captionChannel, name:"captionChannel", parent: name, max: 4)
            try validate(self.captionChannel, name:"captionChannel", parent: name, min: 1)
            try validate(self.languageCode, name:"languageCode", parent: name, max: 3)
            try validate(self.languageCode, name:"languageCode", parent: name, min: 3)
            try validate(self.languageDescription, name:"languageDescription", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case captionChannel = "captionChannel"
            case languageCode = "languageCode"
            case languageDescription = "languageDescription"
        }
    }

    public struct CaptionSelector: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", location: .body(locationName: "languageCode"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "SelectorSettings", location: .body(locationName: "selectorSettings"), required: false, type: .structure)
        ]

        /// When specified this field indicates the three letter language code of the caption track to extract from the source.
        public let languageCode: String?
        /// Name identifier for a caption selector.  This name is used to associate this caption selector with one or more caption descriptions.  Names must be unique within an event.
        public let name: String
        /// Caption selector settings.
        public let selectorSettings: CaptionSelectorSettings?

        public init(languageCode: String? = nil, name: String, selectorSettings: CaptionSelectorSettings? = nil) {
            self.languageCode = languageCode
            self.name = name
            self.selectorSettings = selectorSettings
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, min: 1)
            try self.selectorSettings?.validate(name: "\(name).selectorSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "languageCode"
            case name = "name"
            case selectorSettings = "selectorSettings"
        }
    }

    public struct CaptionSelectorSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AribSourceSettings", location: .body(locationName: "aribSourceSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DvbSubSourceSettings", location: .body(locationName: "dvbSubSourceSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "EmbeddedSourceSettings", location: .body(locationName: "embeddedSourceSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Scte20SourceSettings", location: .body(locationName: "scte20SourceSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Scte27SourceSettings", location: .body(locationName: "scte27SourceSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "TeletextSourceSettings", location: .body(locationName: "teletextSourceSettings"), required: false, type: .structure)
        ]

        public let aribSourceSettings: AribSourceSettings?
        public let dvbSubSourceSettings: DvbSubSourceSettings?
        public let embeddedSourceSettings: EmbeddedSourceSettings?
        public let scte20SourceSettings: Scte20SourceSettings?
        public let scte27SourceSettings: Scte27SourceSettings?
        public let teletextSourceSettings: TeletextSourceSettings?

        public init(aribSourceSettings: AribSourceSettings? = nil, dvbSubSourceSettings: DvbSubSourceSettings? = nil, embeddedSourceSettings: EmbeddedSourceSettings? = nil, scte20SourceSettings: Scte20SourceSettings? = nil, scte27SourceSettings: Scte27SourceSettings? = nil, teletextSourceSettings: TeletextSourceSettings? = nil) {
            self.aribSourceSettings = aribSourceSettings
            self.dvbSubSourceSettings = dvbSubSourceSettings
            self.embeddedSourceSettings = embeddedSourceSettings
            self.scte20SourceSettings = scte20SourceSettings
            self.scte27SourceSettings = scte27SourceSettings
            self.teletextSourceSettings = teletextSourceSettings
        }

        public func validate(name: String) throws {
            try self.dvbSubSourceSettings?.validate(name: "\(name).dvbSubSourceSettings")
            try self.embeddedSourceSettings?.validate(name: "\(name).embeddedSourceSettings")
            try self.scte20SourceSettings?.validate(name: "\(name).scte20SourceSettings")
            try self.scte27SourceSettings?.validate(name: "\(name).scte27SourceSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case aribSourceSettings = "aribSourceSettings"
            case dvbSubSourceSettings = "dvbSubSourceSettings"
            case embeddedSourceSettings = "embeddedSourceSettings"
            case scte20SourceSettings = "scte20SourceSettings"
            case scte27SourceSettings = "scte27SourceSettings"
            case teletextSourceSettings = "teletextSourceSettings"
        }
    }

    public struct Channel: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "ChannelClass", location: .body(locationName: "channelClass"), required: false, type: .enum), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "EgressEndpoints", location: .body(locationName: "egressEndpoints"), required: false, type: .list), 
            AWSShapeMember(label: "EncoderSettings", location: .body(locationName: "encoderSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "InputAttachments", location: .body(locationName: "inputAttachments"), required: false, type: .list), 
            AWSShapeMember(label: "InputSpecification", location: .body(locationName: "inputSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "LogLevel", location: .body(locationName: "logLevel"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "PipelineDetails", location: .body(locationName: "pipelineDetails"), required: false, type: .list), 
            AWSShapeMember(label: "PipelinesRunningCount", location: .body(locationName: "pipelinesRunningCount"), required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        /// The unique arn of the channel.
        public let arn: String?
        /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
        public let channelClass: ChannelClass?
        /// A list of destinations of the channel. For UDP outputs, there is one
        /// destination per output. For other types (HLS, for example), there is
        /// one destination per packager.
        public let destinations: [OutputDestination]?
        /// The endpoints where outgoing connections initiate from
        public let egressEndpoints: [ChannelEgressEndpoint]?
        public let encoderSettings: EncoderSettings?
        /// The unique id of the channel.
        public let id: String?
        /// List of input attachments for channel.
        public let inputAttachments: [InputAttachment]?
        public let inputSpecification: InputSpecification?
        /// The log level being written to CloudWatch Logs.
        public let logLevel: LogLevel?
        /// The name of the channel. (user-mutable)
        public let name: String?
        /// Runtime details for the pipelines of a running channel.
        public let pipelineDetails: [PipelineDetail]?
        /// The number of currently healthy pipelines.
        public let pipelinesRunningCount: Int?
        /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
        public let roleArn: String?
        public let state: ChannelState?
        /// A collection of key-value pairs.
        public let tags: [String: String]?

        public init(arn: String? = nil, channelClass: ChannelClass? = nil, destinations: [OutputDestination]? = nil, egressEndpoints: [ChannelEgressEndpoint]? = nil, encoderSettings: EncoderSettings? = nil, id: String? = nil, inputAttachments: [InputAttachment]? = nil, inputSpecification: InputSpecification? = nil, logLevel: LogLevel? = nil, name: String? = nil, pipelineDetails: [PipelineDetail]? = nil, pipelinesRunningCount: Int? = nil, roleArn: String? = nil, state: ChannelState? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.channelClass = channelClass
            self.destinations = destinations
            self.egressEndpoints = egressEndpoints
            self.encoderSettings = encoderSettings
            self.id = id
            self.inputAttachments = inputAttachments
            self.inputSpecification = inputSpecification
            self.logLevel = logLevel
            self.name = name
            self.pipelineDetails = pipelineDetails
            self.pipelinesRunningCount = pipelinesRunningCount
            self.roleArn = roleArn
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case channelClass = "channelClass"
            case destinations = "destinations"
            case egressEndpoints = "egressEndpoints"
            case encoderSettings = "encoderSettings"
            case id = "id"
            case inputAttachments = "inputAttachments"
            case inputSpecification = "inputSpecification"
            case logLevel = "logLevel"
            case name = "name"
            case pipelineDetails = "pipelineDetails"
            case pipelinesRunningCount = "pipelinesRunningCount"
            case roleArn = "roleArn"
            case state = "state"
            case tags = "tags"
        }
    }

    public struct ChannelEgressEndpoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceIp", location: .body(locationName: "sourceIp"), required: false, type: .string)
        ]

        /// Public IP of where a channel's output comes from
        public let sourceIp: String?

        public init(sourceIp: String? = nil) {
            self.sourceIp = sourceIp
        }

        private enum CodingKeys: String, CodingKey {
            case sourceIp = "sourceIp"
        }
    }

    public struct ChannelSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "ChannelClass", location: .body(locationName: "channelClass"), required: false, type: .enum), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "EgressEndpoints", location: .body(locationName: "egressEndpoints"), required: false, type: .list), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "InputAttachments", location: .body(locationName: "inputAttachments"), required: false, type: .list), 
            AWSShapeMember(label: "InputSpecification", location: .body(locationName: "inputSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "LogLevel", location: .body(locationName: "logLevel"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "PipelinesRunningCount", location: .body(locationName: "pipelinesRunningCount"), required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        /// The unique arn of the channel.
        public let arn: String?
        /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
        public let channelClass: ChannelClass?
        /// A list of destinations of the channel. For UDP outputs, there is one
        /// destination per output. For other types (HLS, for example), there is
        /// one destination per packager.
        public let destinations: [OutputDestination]?
        /// The endpoints where outgoing connections initiate from
        public let egressEndpoints: [ChannelEgressEndpoint]?
        /// The unique id of the channel.
        public let id: String?
        /// List of input attachments for channel.
        public let inputAttachments: [InputAttachment]?
        public let inputSpecification: InputSpecification?
        /// The log level being written to CloudWatch Logs.
        public let logLevel: LogLevel?
        /// The name of the channel. (user-mutable)
        public let name: String?
        /// The number of currently healthy pipelines.
        public let pipelinesRunningCount: Int?
        /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
        public let roleArn: String?
        public let state: ChannelState?
        /// A collection of key-value pairs.
        public let tags: [String: String]?

        public init(arn: String? = nil, channelClass: ChannelClass? = nil, destinations: [OutputDestination]? = nil, egressEndpoints: [ChannelEgressEndpoint]? = nil, id: String? = nil, inputAttachments: [InputAttachment]? = nil, inputSpecification: InputSpecification? = nil, logLevel: LogLevel? = nil, name: String? = nil, pipelinesRunningCount: Int? = nil, roleArn: String? = nil, state: ChannelState? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.channelClass = channelClass
            self.destinations = destinations
            self.egressEndpoints = egressEndpoints
            self.id = id
            self.inputAttachments = inputAttachments
            self.inputSpecification = inputSpecification
            self.logLevel = logLevel
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.roleArn = roleArn
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case channelClass = "channelClass"
            case destinations = "destinations"
            case egressEndpoints = "egressEndpoints"
            case id = "id"
            case inputAttachments = "inputAttachments"
            case inputSpecification = "inputSpecification"
            case logLevel = "logLevel"
            case name = "name"
            case pipelinesRunningCount = "pipelinesRunningCount"
            case roleArn = "roleArn"
            case state = "state"
            case tags = "tags"
        }
    }

    public struct ColorSpacePassthroughSettings: AWSShape {


        public init() {
        }

    }

    public struct CreateChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelClass", location: .body(locationName: "channelClass"), required: false, type: .enum), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "EncoderSettings", location: .body(locationName: "encoderSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "InputAttachments", location: .body(locationName: "inputAttachments"), required: false, type: .list), 
            AWSShapeMember(label: "InputSpecification", location: .body(locationName: "inputSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "LogLevel", location: .body(locationName: "logLevel"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "RequestId", location: .body(locationName: "requestId"), required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let channelClass: ChannelClass?
        public let destinations: [OutputDestination]?
        public let encoderSettings: EncoderSettings?
        public let inputAttachments: [InputAttachment]?
        public let inputSpecification: InputSpecification?
        public let logLevel: LogLevel?
        public let name: String?
        public let requestId: String?
        public let roleArn: String?
        public let tags: [String: String]?

        public init(channelClass: ChannelClass? = nil, destinations: [OutputDestination]? = nil, encoderSettings: EncoderSettings? = nil, inputAttachments: [InputAttachment]? = nil, inputSpecification: InputSpecification? = nil, logLevel: LogLevel? = nil, name: String? = nil, requestId: String? = CreateChannelRequest.idempotencyToken(), roleArn: String? = nil, tags: [String: String]? = nil) {
            self.channelClass = channelClass
            self.destinations = destinations
            self.encoderSettings = encoderSettings
            self.inputAttachments = inputAttachments
            self.inputSpecification = inputSpecification
            self.logLevel = logLevel
            self.name = name
            self.requestId = requestId
            self.roleArn = roleArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.destinations?.forEach {
                try $0.validate(name: "\(name).destinations[]")
            }
            try self.encoderSettings?.validate(name: "\(name).encoderSettings")
            try self.inputAttachments?.forEach {
                try $0.validate(name: "\(name).inputAttachments[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case channelClass = "channelClass"
            case destinations = "destinations"
            case encoderSettings = "encoderSettings"
            case inputAttachments = "inputAttachments"
            case inputSpecification = "inputSpecification"
            case logLevel = "logLevel"
            case name = "name"
            case requestId = "requestId"
            case roleArn = "roleArn"
            case tags = "tags"
        }
    }

    public struct CreateChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Channel", location: .body(locationName: "channel"), required: false, type: .structure)
        ]

        public let channel: Channel?

        public init(channel: Channel? = nil) {
            self.channel = channel
        }

        private enum CodingKeys: String, CodingKey {
            case channel = "channel"
        }
    }

    public struct CreateInputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "InputSecurityGroups", location: .body(locationName: "inputSecurityGroups"), required: false, type: .list), 
            AWSShapeMember(label: "MediaConnectFlows", location: .body(locationName: "mediaConnectFlows"), required: false, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "RequestId", location: .body(locationName: "requestId"), required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string), 
            AWSShapeMember(label: "Sources", location: .body(locationName: "sources"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "Vpc", location: .body(locationName: "vpc"), required: false, type: .structure)
        ]

        public let destinations: [InputDestinationRequest]?
        public let inputSecurityGroups: [String]?
        public let mediaConnectFlows: [MediaConnectFlowRequest]?
        public let name: String?
        public let requestId: String?
        public let roleArn: String?
        public let sources: [InputSourceRequest]?
        public let tags: [String: String]?
        public let `type`: InputType?
        public let vpc: InputVpcRequest?

        public init(destinations: [InputDestinationRequest]? = nil, inputSecurityGroups: [String]? = nil, mediaConnectFlows: [MediaConnectFlowRequest]? = nil, name: String? = nil, requestId: String? = CreateInputRequest.idempotencyToken(), roleArn: String? = nil, sources: [InputSourceRequest]? = nil, tags: [String: String]? = nil, type: InputType? = nil, vpc: InputVpcRequest? = nil) {
            self.destinations = destinations
            self.inputSecurityGroups = inputSecurityGroups
            self.mediaConnectFlows = mediaConnectFlows
            self.name = name
            self.requestId = requestId
            self.roleArn = roleArn
            self.sources = sources
            self.tags = tags
            self.`type` = `type`
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case destinations = "destinations"
            case inputSecurityGroups = "inputSecurityGroups"
            case mediaConnectFlows = "mediaConnectFlows"
            case name = "name"
            case requestId = "requestId"
            case roleArn = "roleArn"
            case sources = "sources"
            case tags = "tags"
            case `type` = "type"
            case vpc = "vpc"
        }
    }

    public struct CreateInputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Input", location: .body(locationName: "input"), required: false, type: .structure)
        ]

        public let input: Input?

        public init(input: Input? = nil) {
            self.input = input
        }

        private enum CodingKeys: String, CodingKey {
            case input = "input"
        }
    }

    public struct CreateInputSecurityGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "WhitelistRules", location: .body(locationName: "whitelistRules"), required: false, type: .list)
        ]

        public let tags: [String: String]?
        public let whitelistRules: [InputWhitelistRuleCidr]?

        public init(tags: [String: String]? = nil, whitelistRules: [InputWhitelistRuleCidr]? = nil) {
            self.tags = tags
            self.whitelistRules = whitelistRules
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case whitelistRules = "whitelistRules"
        }
    }

    public struct CreateInputSecurityGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroup", location: .body(locationName: "securityGroup"), required: false, type: .structure)
        ]

        public let securityGroup: InputSecurityGroup?

        public init(securityGroup: InputSecurityGroup? = nil) {
            self.securityGroup = securityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroup = "securityGroup"
        }
    }

    public struct CreateMultiplexProgramRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultiplexId", location: .uri(locationName: "multiplexId"), required: true, type: .string), 
            AWSShapeMember(label: "MultiplexProgramSettings", location: .body(locationName: "multiplexProgramSettings"), required: true, type: .structure), 
            AWSShapeMember(label: "ProgramName", location: .body(locationName: "programName"), required: true, type: .string), 
            AWSShapeMember(label: "RequestId", location: .body(locationName: "requestId"), required: true, type: .string)
        ]

        public let multiplexId: String
        public let multiplexProgramSettings: MultiplexProgramSettings
        public let programName: String
        public let requestId: String

        public init(multiplexId: String, multiplexProgramSettings: MultiplexProgramSettings, programName: String, requestId: String = CreateMultiplexProgramRequest.idempotencyToken()) {
            self.multiplexId = multiplexId
            self.multiplexProgramSettings = multiplexProgramSettings
            self.programName = programName
            self.requestId = requestId
        }

        public func validate(name: String) throws {
            try self.multiplexProgramSettings.validate(name: "\(name).multiplexProgramSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexId = "multiplexId"
            case multiplexProgramSettings = "multiplexProgramSettings"
            case programName = "programName"
            case requestId = "requestId"
        }
    }

    public struct CreateMultiplexProgramResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultiplexProgram", location: .body(locationName: "multiplexProgram"), required: false, type: .structure)
        ]

        public let multiplexProgram: MultiplexProgram?

        public init(multiplexProgram: MultiplexProgram? = nil) {
            self.multiplexProgram = multiplexProgram
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexProgram = "multiplexProgram"
        }
    }

    public struct CreateMultiplexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZones"), required: true, type: .list), 
            AWSShapeMember(label: "MultiplexSettings", location: .body(locationName: "multiplexSettings"), required: true, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "RequestId", location: .body(locationName: "requestId"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let availabilityZones: [String]
        public let multiplexSettings: MultiplexSettings
        public let name: String
        public let requestId: String
        public let tags: [String: String]?

        public init(availabilityZones: [String], multiplexSettings: MultiplexSettings, name: String, requestId: String = CreateMultiplexRequest.idempotencyToken(), tags: [String: String]? = nil) {
            self.availabilityZones = availabilityZones
            self.multiplexSettings = multiplexSettings
            self.name = name
            self.requestId = requestId
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.multiplexSettings.validate(name: "\(name).multiplexSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "availabilityZones"
            case multiplexSettings = "multiplexSettings"
            case name = "name"
            case requestId = "requestId"
            case tags = "tags"
        }
    }

    public struct CreateMultiplexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Multiplex", location: .body(locationName: "multiplex"), required: false, type: .structure)
        ]

        public let multiplex: Multiplex?

        public init(multiplex: Multiplex? = nil) {
            self.multiplex = multiplex
        }

        private enum CodingKeys: String, CodingKey {
            case multiplex = "multiplex"
        }
    }

    public struct CreateTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let resourceArn: String
        public let tags: [String: String]?

        public init(resourceArn: String, tags: [String: String]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
            case tags = "tags"
        }
    }

    public struct DeleteChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelId", location: .uri(locationName: "channelId"), required: true, type: .string)
        ]

        public let channelId: String

        public init(channelId: String) {
            self.channelId = channelId
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "channelId"
        }
    }

    public struct DeleteChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "ChannelClass", location: .body(locationName: "channelClass"), required: false, type: .enum), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "EgressEndpoints", location: .body(locationName: "egressEndpoints"), required: false, type: .list), 
            AWSShapeMember(label: "EncoderSettings", location: .body(locationName: "encoderSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "InputAttachments", location: .body(locationName: "inputAttachments"), required: false, type: .list), 
            AWSShapeMember(label: "InputSpecification", location: .body(locationName: "inputSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "LogLevel", location: .body(locationName: "logLevel"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "PipelineDetails", location: .body(locationName: "pipelineDetails"), required: false, type: .list), 
            AWSShapeMember(label: "PipelinesRunningCount", location: .body(locationName: "pipelinesRunningCount"), required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let arn: String?
        public let channelClass: ChannelClass?
        public let destinations: [OutputDestination]?
        public let egressEndpoints: [ChannelEgressEndpoint]?
        public let encoderSettings: EncoderSettings?
        public let id: String?
        public let inputAttachments: [InputAttachment]?
        public let inputSpecification: InputSpecification?
        public let logLevel: LogLevel?
        public let name: String?
        public let pipelineDetails: [PipelineDetail]?
        public let pipelinesRunningCount: Int?
        public let roleArn: String?
        public let state: ChannelState?
        public let tags: [String: String]?

        public init(arn: String? = nil, channelClass: ChannelClass? = nil, destinations: [OutputDestination]? = nil, egressEndpoints: [ChannelEgressEndpoint]? = nil, encoderSettings: EncoderSettings? = nil, id: String? = nil, inputAttachments: [InputAttachment]? = nil, inputSpecification: InputSpecification? = nil, logLevel: LogLevel? = nil, name: String? = nil, pipelineDetails: [PipelineDetail]? = nil, pipelinesRunningCount: Int? = nil, roleArn: String? = nil, state: ChannelState? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.channelClass = channelClass
            self.destinations = destinations
            self.egressEndpoints = egressEndpoints
            self.encoderSettings = encoderSettings
            self.id = id
            self.inputAttachments = inputAttachments
            self.inputSpecification = inputSpecification
            self.logLevel = logLevel
            self.name = name
            self.pipelineDetails = pipelineDetails
            self.pipelinesRunningCount = pipelinesRunningCount
            self.roleArn = roleArn
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case channelClass = "channelClass"
            case destinations = "destinations"
            case egressEndpoints = "egressEndpoints"
            case encoderSettings = "encoderSettings"
            case id = "id"
            case inputAttachments = "inputAttachments"
            case inputSpecification = "inputSpecification"
            case logLevel = "logLevel"
            case name = "name"
            case pipelineDetails = "pipelineDetails"
            case pipelinesRunningCount = "pipelinesRunningCount"
            case roleArn = "roleArn"
            case state = "state"
            case tags = "tags"
        }
    }

    public struct DeleteInputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputId", location: .uri(locationName: "inputId"), required: true, type: .string)
        ]

        public let inputId: String

        public init(inputId: String) {
            self.inputId = inputId
        }

        private enum CodingKeys: String, CodingKey {
            case inputId = "inputId"
        }
    }

    public struct DeleteInputResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteInputSecurityGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputSecurityGroupId", location: .uri(locationName: "inputSecurityGroupId"), required: true, type: .string)
        ]

        public let inputSecurityGroupId: String

        public init(inputSecurityGroupId: String) {
            self.inputSecurityGroupId = inputSecurityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case inputSecurityGroupId = "inputSecurityGroupId"
        }
    }

    public struct DeleteInputSecurityGroupResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteMultiplexProgramRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultiplexId", location: .uri(locationName: "multiplexId"), required: true, type: .string), 
            AWSShapeMember(label: "ProgramName", location: .uri(locationName: "programName"), required: true, type: .string)
        ]

        public let multiplexId: String
        public let programName: String

        public init(multiplexId: String, programName: String) {
            self.multiplexId = multiplexId
            self.programName = programName
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexId = "multiplexId"
            case programName = "programName"
        }
    }

    public struct DeleteMultiplexProgramResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelId", location: .body(locationName: "channelId"), required: false, type: .string), 
            AWSShapeMember(label: "MultiplexProgramSettings", location: .body(locationName: "multiplexProgramSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "PacketIdentifiersMap", location: .body(locationName: "packetIdentifiersMap"), required: false, type: .structure), 
            AWSShapeMember(label: "ProgramName", location: .body(locationName: "programName"), required: false, type: .string)
        ]

        public let channelId: String?
        public let multiplexProgramSettings: MultiplexProgramSettings?
        public let packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap?
        public let programName: String?

        public init(channelId: String? = nil, multiplexProgramSettings: MultiplexProgramSettings? = nil, packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap? = nil, programName: String? = nil) {
            self.channelId = channelId
            self.multiplexProgramSettings = multiplexProgramSettings
            self.packetIdentifiersMap = packetIdentifiersMap
            self.programName = programName
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "channelId"
            case multiplexProgramSettings = "multiplexProgramSettings"
            case packetIdentifiersMap = "packetIdentifiersMap"
            case programName = "programName"
        }
    }

    public struct DeleteMultiplexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultiplexId", location: .uri(locationName: "multiplexId"), required: true, type: .string)
        ]

        public let multiplexId: String

        public init(multiplexId: String) {
            self.multiplexId = multiplexId
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexId = "multiplexId"
        }
    }

    public struct DeleteMultiplexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZones"), required: false, type: .list), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "MultiplexSettings", location: .body(locationName: "multiplexSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "PipelinesRunningCount", location: .body(locationName: "pipelinesRunningCount"), required: false, type: .integer), 
            AWSShapeMember(label: "ProgramCount", location: .body(locationName: "programCount"), required: false, type: .integer), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let arn: String?
        public let availabilityZones: [String]?
        public let destinations: [MultiplexOutputDestination]?
        public let id: String?
        public let multiplexSettings: MultiplexSettings?
        public let name: String?
        public let pipelinesRunningCount: Int?
        public let programCount: Int?
        public let state: MultiplexState?
        public let tags: [String: String]?

        public init(arn: String? = nil, availabilityZones: [String]? = nil, destinations: [MultiplexOutputDestination]? = nil, id: String? = nil, multiplexSettings: MultiplexSettings? = nil, name: String? = nil, pipelinesRunningCount: Int? = nil, programCount: Int? = nil, state: MultiplexState? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.availabilityZones = availabilityZones
            self.destinations = destinations
            self.id = id
            self.multiplexSettings = multiplexSettings
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.programCount = programCount
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case availabilityZones = "availabilityZones"
            case destinations = "destinations"
            case id = "id"
            case multiplexSettings = "multiplexSettings"
            case name = "name"
            case pipelinesRunningCount = "pipelinesRunningCount"
            case programCount = "programCount"
            case state = "state"
            case tags = "tags"
        }
    }

    public struct DeleteReservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservationId", location: .uri(locationName: "reservationId"), required: true, type: .string)
        ]

        public let reservationId: String

        public init(reservationId: String) {
            self.reservationId = reservationId
        }

        private enum CodingKeys: String, CodingKey {
            case reservationId = "reservationId"
        }
    }

    public struct DeleteReservationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .string), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "DurationUnits", location: .body(locationName: "durationUnits"), required: false, type: .enum), 
            AWSShapeMember(label: "End", location: .body(locationName: "end"), required: false, type: .string), 
            AWSShapeMember(label: "FixedPrice", location: .body(locationName: "fixedPrice"), required: false, type: .double), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingDescription", location: .body(locationName: "offeringDescription"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "Region", location: .body(locationName: "region"), required: false, type: .string), 
            AWSShapeMember(label: "ReservationId", location: .body(locationName: "reservationId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceSpecification", location: .body(locationName: "resourceSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Start", location: .body(locationName: "start"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "UsagePrice", location: .body(locationName: "usagePrice"), required: false, type: .double)
        ]

        public let arn: String?
        public let count: Int?
        public let currencyCode: String?
        public let duration: Int?
        public let durationUnits: OfferingDurationUnits?
        public let end: String?
        public let fixedPrice: Double?
        public let name: String?
        public let offeringDescription: String?
        public let offeringId: String?
        public let offeringType: OfferingType?
        public let region: String?
        public let reservationId: String?
        public let resourceSpecification: ReservationResourceSpecification?
        public let start: String?
        public let state: ReservationState?
        public let tags: [String: String]?
        public let usagePrice: Double?

        public init(arn: String? = nil, count: Int? = nil, currencyCode: String? = nil, duration: Int? = nil, durationUnits: OfferingDurationUnits? = nil, end: String? = nil, fixedPrice: Double? = nil, name: String? = nil, offeringDescription: String? = nil, offeringId: String? = nil, offeringType: OfferingType? = nil, region: String? = nil, reservationId: String? = nil, resourceSpecification: ReservationResourceSpecification? = nil, start: String? = nil, state: ReservationState? = nil, tags: [String: String]? = nil, usagePrice: Double? = nil) {
            self.arn = arn
            self.count = count
            self.currencyCode = currencyCode
            self.duration = duration
            self.durationUnits = durationUnits
            self.end = end
            self.fixedPrice = fixedPrice
            self.name = name
            self.offeringDescription = offeringDescription
            self.offeringId = offeringId
            self.offeringType = offeringType
            self.region = region
            self.reservationId = reservationId
            self.resourceSpecification = resourceSpecification
            self.start = start
            self.state = state
            self.tags = tags
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case count = "count"
            case currencyCode = "currencyCode"
            case duration = "duration"
            case durationUnits = "durationUnits"
            case end = "end"
            case fixedPrice = "fixedPrice"
            case name = "name"
            case offeringDescription = "offeringDescription"
            case offeringId = "offeringId"
            case offeringType = "offeringType"
            case region = "region"
            case reservationId = "reservationId"
            case resourceSpecification = "resourceSpecification"
            case start = "start"
            case state = "state"
            case tags = "tags"
            case usagePrice = "usagePrice"
        }
    }

    public struct DeleteScheduleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelId", location: .uri(locationName: "channelId"), required: true, type: .string)
        ]

        public let channelId: String

        public init(channelId: String) {
            self.channelId = channelId
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "channelId"
        }
    }

    public struct DeleteScheduleResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list)
        ]

        public let resourceArn: String
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
            case tagKeys = "tagKeys"
        }
    }

    public struct DescribeChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelId", location: .uri(locationName: "channelId"), required: true, type: .string)
        ]

        public let channelId: String

        public init(channelId: String) {
            self.channelId = channelId
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "channelId"
        }
    }

    public struct DescribeChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "ChannelClass", location: .body(locationName: "channelClass"), required: false, type: .enum), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "EgressEndpoints", location: .body(locationName: "egressEndpoints"), required: false, type: .list), 
            AWSShapeMember(label: "EncoderSettings", location: .body(locationName: "encoderSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "InputAttachments", location: .body(locationName: "inputAttachments"), required: false, type: .list), 
            AWSShapeMember(label: "InputSpecification", location: .body(locationName: "inputSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "LogLevel", location: .body(locationName: "logLevel"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "PipelineDetails", location: .body(locationName: "pipelineDetails"), required: false, type: .list), 
            AWSShapeMember(label: "PipelinesRunningCount", location: .body(locationName: "pipelinesRunningCount"), required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let arn: String?
        public let channelClass: ChannelClass?
        public let destinations: [OutputDestination]?
        public let egressEndpoints: [ChannelEgressEndpoint]?
        public let encoderSettings: EncoderSettings?
        public let id: String?
        public let inputAttachments: [InputAttachment]?
        public let inputSpecification: InputSpecification?
        public let logLevel: LogLevel?
        public let name: String?
        public let pipelineDetails: [PipelineDetail]?
        public let pipelinesRunningCount: Int?
        public let roleArn: String?
        public let state: ChannelState?
        public let tags: [String: String]?

        public init(arn: String? = nil, channelClass: ChannelClass? = nil, destinations: [OutputDestination]? = nil, egressEndpoints: [ChannelEgressEndpoint]? = nil, encoderSettings: EncoderSettings? = nil, id: String? = nil, inputAttachments: [InputAttachment]? = nil, inputSpecification: InputSpecification? = nil, logLevel: LogLevel? = nil, name: String? = nil, pipelineDetails: [PipelineDetail]? = nil, pipelinesRunningCount: Int? = nil, roleArn: String? = nil, state: ChannelState? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.channelClass = channelClass
            self.destinations = destinations
            self.egressEndpoints = egressEndpoints
            self.encoderSettings = encoderSettings
            self.id = id
            self.inputAttachments = inputAttachments
            self.inputSpecification = inputSpecification
            self.logLevel = logLevel
            self.name = name
            self.pipelineDetails = pipelineDetails
            self.pipelinesRunningCount = pipelinesRunningCount
            self.roleArn = roleArn
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case channelClass = "channelClass"
            case destinations = "destinations"
            case egressEndpoints = "egressEndpoints"
            case encoderSettings = "encoderSettings"
            case id = "id"
            case inputAttachments = "inputAttachments"
            case inputSpecification = "inputSpecification"
            case logLevel = "logLevel"
            case name = "name"
            case pipelineDetails = "pipelineDetails"
            case pipelinesRunningCount = "pipelinesRunningCount"
            case roleArn = "roleArn"
            case state = "state"
            case tags = "tags"
        }
    }

    public struct DescribeInputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputId", location: .uri(locationName: "inputId"), required: true, type: .string)
        ]

        public let inputId: String

        public init(inputId: String) {
            self.inputId = inputId
        }

        private enum CodingKeys: String, CodingKey {
            case inputId = "inputId"
        }
    }

    public struct DescribeInputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "AttachedChannels", location: .body(locationName: "attachedChannels"), required: false, type: .list), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "InputClass", location: .body(locationName: "inputClass"), required: false, type: .enum), 
            AWSShapeMember(label: "InputSourceType", location: .body(locationName: "inputSourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "MediaConnectFlows", location: .body(locationName: "mediaConnectFlows"), required: false, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "securityGroups"), required: false, type: .list), 
            AWSShapeMember(label: "Sources", location: .body(locationName: "sources"), required: false, type: .list), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum)
        ]

        public let arn: String?
        public let attachedChannels: [String]?
        public let destinations: [InputDestination]?
        public let id: String?
        public let inputClass: InputClass?
        public let inputSourceType: InputSourceType?
        public let mediaConnectFlows: [MediaConnectFlow]?
        public let name: String?
        public let roleArn: String?
        public let securityGroups: [String]?
        public let sources: [InputSource]?
        public let state: InputState?
        public let tags: [String: String]?
        public let `type`: InputType?

        public init(arn: String? = nil, attachedChannels: [String]? = nil, destinations: [InputDestination]? = nil, id: String? = nil, inputClass: InputClass? = nil, inputSourceType: InputSourceType? = nil, mediaConnectFlows: [MediaConnectFlow]? = nil, name: String? = nil, roleArn: String? = nil, securityGroups: [String]? = nil, sources: [InputSource]? = nil, state: InputState? = nil, tags: [String: String]? = nil, type: InputType? = nil) {
            self.arn = arn
            self.attachedChannels = attachedChannels
            self.destinations = destinations
            self.id = id
            self.inputClass = inputClass
            self.inputSourceType = inputSourceType
            self.mediaConnectFlows = mediaConnectFlows
            self.name = name
            self.roleArn = roleArn
            self.securityGroups = securityGroups
            self.sources = sources
            self.state = state
            self.tags = tags
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case attachedChannels = "attachedChannels"
            case destinations = "destinations"
            case id = "id"
            case inputClass = "inputClass"
            case inputSourceType = "inputSourceType"
            case mediaConnectFlows = "mediaConnectFlows"
            case name = "name"
            case roleArn = "roleArn"
            case securityGroups = "securityGroups"
            case sources = "sources"
            case state = "state"
            case tags = "tags"
            case `type` = "type"
        }
    }

    public struct DescribeInputSecurityGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputSecurityGroupId", location: .uri(locationName: "inputSecurityGroupId"), required: true, type: .string)
        ]

        public let inputSecurityGroupId: String

        public init(inputSecurityGroupId: String) {
            self.inputSecurityGroupId = inputSecurityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case inputSecurityGroupId = "inputSecurityGroupId"
        }
    }

    public struct DescribeInputSecurityGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "Inputs", location: .body(locationName: "inputs"), required: false, type: .list), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "WhitelistRules", location: .body(locationName: "whitelistRules"), required: false, type: .list)
        ]

        public let arn: String?
        public let id: String?
        public let inputs: [String]?
        public let state: InputSecurityGroupState?
        public let tags: [String: String]?
        public let whitelistRules: [InputWhitelistRule]?

        public init(arn: String? = nil, id: String? = nil, inputs: [String]? = nil, state: InputSecurityGroupState? = nil, tags: [String: String]? = nil, whitelistRules: [InputWhitelistRule]? = nil) {
            self.arn = arn
            self.id = id
            self.inputs = inputs
            self.state = state
            self.tags = tags
            self.whitelistRules = whitelistRules
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case id = "id"
            case inputs = "inputs"
            case state = "state"
            case tags = "tags"
            case whitelistRules = "whitelistRules"
        }
    }

    public struct DescribeMultiplexProgramRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultiplexId", location: .uri(locationName: "multiplexId"), required: true, type: .string), 
            AWSShapeMember(label: "ProgramName", location: .uri(locationName: "programName"), required: true, type: .string)
        ]

        public let multiplexId: String
        public let programName: String

        public init(multiplexId: String, programName: String) {
            self.multiplexId = multiplexId
            self.programName = programName
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexId = "multiplexId"
            case programName = "programName"
        }
    }

    public struct DescribeMultiplexProgramResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelId", location: .body(locationName: "channelId"), required: false, type: .string), 
            AWSShapeMember(label: "MultiplexProgramSettings", location: .body(locationName: "multiplexProgramSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "PacketIdentifiersMap", location: .body(locationName: "packetIdentifiersMap"), required: false, type: .structure), 
            AWSShapeMember(label: "ProgramName", location: .body(locationName: "programName"), required: false, type: .string)
        ]

        public let channelId: String?
        public let multiplexProgramSettings: MultiplexProgramSettings?
        public let packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap?
        public let programName: String?

        public init(channelId: String? = nil, multiplexProgramSettings: MultiplexProgramSettings? = nil, packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap? = nil, programName: String? = nil) {
            self.channelId = channelId
            self.multiplexProgramSettings = multiplexProgramSettings
            self.packetIdentifiersMap = packetIdentifiersMap
            self.programName = programName
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "channelId"
            case multiplexProgramSettings = "multiplexProgramSettings"
            case packetIdentifiersMap = "packetIdentifiersMap"
            case programName = "programName"
        }
    }

    public struct DescribeMultiplexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultiplexId", location: .uri(locationName: "multiplexId"), required: true, type: .string)
        ]

        public let multiplexId: String

        public init(multiplexId: String) {
            self.multiplexId = multiplexId
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexId = "multiplexId"
        }
    }

    public struct DescribeMultiplexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZones"), required: false, type: .list), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "MultiplexSettings", location: .body(locationName: "multiplexSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "PipelinesRunningCount", location: .body(locationName: "pipelinesRunningCount"), required: false, type: .integer), 
            AWSShapeMember(label: "ProgramCount", location: .body(locationName: "programCount"), required: false, type: .integer), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let arn: String?
        public let availabilityZones: [String]?
        public let destinations: [MultiplexOutputDestination]?
        public let id: String?
        public let multiplexSettings: MultiplexSettings?
        public let name: String?
        public let pipelinesRunningCount: Int?
        public let programCount: Int?
        public let state: MultiplexState?
        public let tags: [String: String]?

        public init(arn: String? = nil, availabilityZones: [String]? = nil, destinations: [MultiplexOutputDestination]? = nil, id: String? = nil, multiplexSettings: MultiplexSettings? = nil, name: String? = nil, pipelinesRunningCount: Int? = nil, programCount: Int? = nil, state: MultiplexState? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.availabilityZones = availabilityZones
            self.destinations = destinations
            self.id = id
            self.multiplexSettings = multiplexSettings
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.programCount = programCount
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case availabilityZones = "availabilityZones"
            case destinations = "destinations"
            case id = "id"
            case multiplexSettings = "multiplexSettings"
            case name = "name"
            case pipelinesRunningCount = "pipelinesRunningCount"
            case programCount = "programCount"
            case state = "state"
            case tags = "tags"
        }
    }

    public struct DescribeOfferingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OfferingId", location: .uri(locationName: "offeringId"), required: true, type: .string)
        ]

        public let offeringId: String

        public init(offeringId: String) {
            self.offeringId = offeringId
        }

        private enum CodingKeys: String, CodingKey {
            case offeringId = "offeringId"
        }
    }

    public struct DescribeOfferingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .string), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "DurationUnits", location: .body(locationName: "durationUnits"), required: false, type: .enum), 
            AWSShapeMember(label: "FixedPrice", location: .body(locationName: "fixedPrice"), required: false, type: .double), 
            AWSShapeMember(label: "OfferingDescription", location: .body(locationName: "offeringDescription"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "Region", location: .body(locationName: "region"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceSpecification", location: .body(locationName: "resourceSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "UsagePrice", location: .body(locationName: "usagePrice"), required: false, type: .double)
        ]

        public let arn: String?
        public let currencyCode: String?
        public let duration: Int?
        public let durationUnits: OfferingDurationUnits?
        public let fixedPrice: Double?
        public let offeringDescription: String?
        public let offeringId: String?
        public let offeringType: OfferingType?
        public let region: String?
        public let resourceSpecification: ReservationResourceSpecification?
        public let usagePrice: Double?

        public init(arn: String? = nil, currencyCode: String? = nil, duration: Int? = nil, durationUnits: OfferingDurationUnits? = nil, fixedPrice: Double? = nil, offeringDescription: String? = nil, offeringId: String? = nil, offeringType: OfferingType? = nil, region: String? = nil, resourceSpecification: ReservationResourceSpecification? = nil, usagePrice: Double? = nil) {
            self.arn = arn
            self.currencyCode = currencyCode
            self.duration = duration
            self.durationUnits = durationUnits
            self.fixedPrice = fixedPrice
            self.offeringDescription = offeringDescription
            self.offeringId = offeringId
            self.offeringType = offeringType
            self.region = region
            self.resourceSpecification = resourceSpecification
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case currencyCode = "currencyCode"
            case duration = "duration"
            case durationUnits = "durationUnits"
            case fixedPrice = "fixedPrice"
            case offeringDescription = "offeringDescription"
            case offeringId = "offeringId"
            case offeringType = "offeringType"
            case region = "region"
            case resourceSpecification = "resourceSpecification"
            case usagePrice = "usagePrice"
        }
    }

    public struct DescribeReservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservationId", location: .uri(locationName: "reservationId"), required: true, type: .string)
        ]

        public let reservationId: String

        public init(reservationId: String) {
            self.reservationId = reservationId
        }

        private enum CodingKeys: String, CodingKey {
            case reservationId = "reservationId"
        }
    }

    public struct DescribeReservationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .string), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "DurationUnits", location: .body(locationName: "durationUnits"), required: false, type: .enum), 
            AWSShapeMember(label: "End", location: .body(locationName: "end"), required: false, type: .string), 
            AWSShapeMember(label: "FixedPrice", location: .body(locationName: "fixedPrice"), required: false, type: .double), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingDescription", location: .body(locationName: "offeringDescription"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "Region", location: .body(locationName: "region"), required: false, type: .string), 
            AWSShapeMember(label: "ReservationId", location: .body(locationName: "reservationId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceSpecification", location: .body(locationName: "resourceSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Start", location: .body(locationName: "start"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "UsagePrice", location: .body(locationName: "usagePrice"), required: false, type: .double)
        ]

        public let arn: String?
        public let count: Int?
        public let currencyCode: String?
        public let duration: Int?
        public let durationUnits: OfferingDurationUnits?
        public let end: String?
        public let fixedPrice: Double?
        public let name: String?
        public let offeringDescription: String?
        public let offeringId: String?
        public let offeringType: OfferingType?
        public let region: String?
        public let reservationId: String?
        public let resourceSpecification: ReservationResourceSpecification?
        public let start: String?
        public let state: ReservationState?
        public let tags: [String: String]?
        public let usagePrice: Double?

        public init(arn: String? = nil, count: Int? = nil, currencyCode: String? = nil, duration: Int? = nil, durationUnits: OfferingDurationUnits? = nil, end: String? = nil, fixedPrice: Double? = nil, name: String? = nil, offeringDescription: String? = nil, offeringId: String? = nil, offeringType: OfferingType? = nil, region: String? = nil, reservationId: String? = nil, resourceSpecification: ReservationResourceSpecification? = nil, start: String? = nil, state: ReservationState? = nil, tags: [String: String]? = nil, usagePrice: Double? = nil) {
            self.arn = arn
            self.count = count
            self.currencyCode = currencyCode
            self.duration = duration
            self.durationUnits = durationUnits
            self.end = end
            self.fixedPrice = fixedPrice
            self.name = name
            self.offeringDescription = offeringDescription
            self.offeringId = offeringId
            self.offeringType = offeringType
            self.region = region
            self.reservationId = reservationId
            self.resourceSpecification = resourceSpecification
            self.start = start
            self.state = state
            self.tags = tags
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case count = "count"
            case currencyCode = "currencyCode"
            case duration = "duration"
            case durationUnits = "durationUnits"
            case end = "end"
            case fixedPrice = "fixedPrice"
            case name = "name"
            case offeringDescription = "offeringDescription"
            case offeringId = "offeringId"
            case offeringType = "offeringType"
            case region = "region"
            case reservationId = "reservationId"
            case resourceSpecification = "resourceSpecification"
            case start = "start"
            case state = "state"
            case tags = "tags"
            case usagePrice = "usagePrice"
        }
    }

    public struct DescribeScheduleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelId", location: .uri(locationName: "channelId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let channelId: String
        public let maxResults: Int?
        public let nextToken: String?

        public init(channelId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.channelId = channelId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "channelId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeScheduleResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ScheduleActions", location: .body(locationName: "scheduleActions"), required: false, type: .list)
        ]

        public let nextToken: String?
        public let scheduleActions: [ScheduleAction]?

        public init(nextToken: String? = nil, scheduleActions: [ScheduleAction]? = nil) {
            self.nextToken = nextToken
            self.scheduleActions = scheduleActions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case scheduleActions = "scheduleActions"
        }
    }

    public struct DvbNitSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkId", location: .body(locationName: "networkId"), required: true, type: .integer), 
            AWSShapeMember(label: "NetworkName", location: .body(locationName: "networkName"), required: true, type: .string), 
            AWSShapeMember(label: "RepInterval", location: .body(locationName: "repInterval"), required: false, type: .integer)
        ]

        /// The numeric value placed in the Network Information Table (NIT).
        public let networkId: Int
        /// The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
        public let networkName: String
        /// The number of milliseconds between instances of this table in the output transport stream.
        public let repInterval: Int?

        public init(networkId: Int, networkName: String, repInterval: Int? = nil) {
            self.networkId = networkId
            self.networkName = networkName
            self.repInterval = repInterval
        }

        public func validate(name: String) throws {
            try validate(self.networkId, name:"networkId", parent: name, max: 65536)
            try validate(self.networkId, name:"networkId", parent: name, min: 0)
            try validate(self.networkName, name:"networkName", parent: name, max: 256)
            try validate(self.networkName, name:"networkName", parent: name, min: 1)
            try validate(self.repInterval, name:"repInterval", parent: name, max: 10000)
            try validate(self.repInterval, name:"repInterval", parent: name, min: 25)
        }

        private enum CodingKeys: String, CodingKey {
            case networkId = "networkId"
            case networkName = "networkName"
            case repInterval = "repInterval"
        }
    }

    public struct DvbSdtSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputSdt", location: .body(locationName: "outputSdt"), required: false, type: .enum), 
            AWSShapeMember(label: "RepInterval", location: .body(locationName: "repInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceProviderName", location: .body(locationName: "serviceProviderName"), required: false, type: .string)
        ]

        /// Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
        public let outputSdt: DvbSdtOutputSdt?
        /// The number of milliseconds between instances of this table in the output transport stream.
        public let repInterval: Int?
        /// The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
        public let serviceName: String?
        /// The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
        public let serviceProviderName: String?

        public init(outputSdt: DvbSdtOutputSdt? = nil, repInterval: Int? = nil, serviceName: String? = nil, serviceProviderName: String? = nil) {
            self.outputSdt = outputSdt
            self.repInterval = repInterval
            self.serviceName = serviceName
            self.serviceProviderName = serviceProviderName
        }

        public func validate(name: String) throws {
            try validate(self.repInterval, name:"repInterval", parent: name, max: 2000)
            try validate(self.repInterval, name:"repInterval", parent: name, min: 25)
            try validate(self.serviceName, name:"serviceName", parent: name, max: 256)
            try validate(self.serviceName, name:"serviceName", parent: name, min: 1)
            try validate(self.serviceProviderName, name:"serviceProviderName", parent: name, max: 256)
            try validate(self.serviceProviderName, name:"serviceProviderName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case outputSdt = "outputSdt"
            case repInterval = "repInterval"
            case serviceName = "serviceName"
            case serviceProviderName = "serviceProviderName"
        }
    }

    public struct DvbSubDestinationSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alignment", location: .body(locationName: "alignment"), required: false, type: .enum), 
            AWSShapeMember(label: "BackgroundColor", location: .body(locationName: "backgroundColor"), required: false, type: .enum), 
            AWSShapeMember(label: "BackgroundOpacity", location: .body(locationName: "backgroundOpacity"), required: false, type: .integer), 
            AWSShapeMember(label: "Font", location: .body(locationName: "font"), required: false, type: .structure), 
            AWSShapeMember(label: "FontColor", location: .body(locationName: "fontColor"), required: false, type: .enum), 
            AWSShapeMember(label: "FontOpacity", location: .body(locationName: "fontOpacity"), required: false, type: .integer), 
            AWSShapeMember(label: "FontResolution", location: .body(locationName: "fontResolution"), required: false, type: .integer), 
            AWSShapeMember(label: "FontSize", location: .body(locationName: "fontSize"), required: false, type: .string), 
            AWSShapeMember(label: "OutlineColor", location: .body(locationName: "outlineColor"), required: false, type: .enum), 
            AWSShapeMember(label: "OutlineSize", location: .body(locationName: "outlineSize"), required: false, type: .integer), 
            AWSShapeMember(label: "ShadowColor", location: .body(locationName: "shadowColor"), required: false, type: .enum), 
            AWSShapeMember(label: "ShadowOpacity", location: .body(locationName: "shadowOpacity"), required: false, type: .integer), 
            AWSShapeMember(label: "ShadowXOffset", location: .body(locationName: "shadowXOffset"), required: false, type: .integer), 
            AWSShapeMember(label: "ShadowYOffset", location: .body(locationName: "shadowYOffset"), required: false, type: .integer), 
            AWSShapeMember(label: "TeletextGridControl", location: .body(locationName: "teletextGridControl"), required: false, type: .enum), 
            AWSShapeMember(label: "XPosition", location: .body(locationName: "xPosition"), required: false, type: .integer), 
            AWSShapeMember(label: "YPosition", location: .body(locationName: "yPosition"), required: false, type: .integer)
        ]

        /// If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles.  This option is not valid for source captions that are STL or 608/embedded.  These source settings are already pre-defined by the caption stream.  All burn-in and DVB-Sub font settings must match.
        public let alignment: DvbSubDestinationAlignment?
        /// Specifies the color of the rectangle behind the captions.  All burn-in and DVB-Sub font settings must match.
        public let backgroundColor: DvbSubDestinationBackgroundColor?
        /// Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent).  All burn-in and DVB-Sub font settings must match.
        public let backgroundOpacity: Int?
        /// External font file used for caption burn-in. File extension must be 'ttf' or 'tte'.  Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts.  All burn-in and DVB-Sub font settings must match.
        public let font: InputLocation?
        /// Specifies the color of the burned-in captions.  This option is not valid for source captions that are STL, 608/embedded or teletext.  These source settings are already pre-defined by the caption stream.  All burn-in and DVB-Sub font settings must match.
        public let fontColor: DvbSubDestinationFontColor?
        /// Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent.  All burn-in and DVB-Sub font settings must match.
        public let fontOpacity: Int?
        /// Font resolution in DPI (dots per inch); default is 96 dpi.  All burn-in and DVB-Sub font settings must match.
        public let fontResolution: Int?
        /// When set to auto fontSize will scale depending on the size of the output.  Giving a positive integer will specify the exact font size in points.  All burn-in and DVB-Sub font settings must match.
        public let fontSize: String?
        /// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public let outlineColor: DvbSubDestinationOutlineColor?
        /// Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
        public let outlineSize: Int?
        /// Specifies the color of the shadow cast by the captions.  All burn-in and DVB-Sub font settings must match.
        public let shadowColor: DvbSubDestinationShadowColor?
        /// Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent).  All burn-in and DVB-Sub font settings must match.
        public let shadowOpacity: Int?
        /// Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left.  All burn-in and DVB-Sub font settings must match.
        public let shadowXOffset: Int?
        /// Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text.  All burn-in and DVB-Sub font settings must match.
        public let shadowYOffset: Int?
        /// Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
        public let teletextGridControl: DvbSubDestinationTeletextGridControl?
        /// Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter.  This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream.  All burn-in and DVB-Sub font settings must match.
        public let xPosition: Int?
        /// Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output.  This option is not valid for source captions that are STL, 608/embedded or teletext.  These source settings are already pre-defined by the caption stream.  All burn-in and DVB-Sub font settings must match.
        public let yPosition: Int?

        public init(alignment: DvbSubDestinationAlignment? = nil, backgroundColor: DvbSubDestinationBackgroundColor? = nil, backgroundOpacity: Int? = nil, font: InputLocation? = nil, fontColor: DvbSubDestinationFontColor? = nil, fontOpacity: Int? = nil, fontResolution: Int? = nil, fontSize: String? = nil, outlineColor: DvbSubDestinationOutlineColor? = nil, outlineSize: Int? = nil, shadowColor: DvbSubDestinationShadowColor? = nil, shadowOpacity: Int? = nil, shadowXOffset: Int? = nil, shadowYOffset: Int? = nil, teletextGridControl: DvbSubDestinationTeletextGridControl? = nil, xPosition: Int? = nil, yPosition: Int? = nil) {
            self.alignment = alignment
            self.backgroundColor = backgroundColor
            self.backgroundOpacity = backgroundOpacity
            self.font = font
            self.fontColor = fontColor
            self.fontOpacity = fontOpacity
            self.fontResolution = fontResolution
            self.fontSize = fontSize
            self.outlineColor = outlineColor
            self.outlineSize = outlineSize
            self.shadowColor = shadowColor
            self.shadowOpacity = shadowOpacity
            self.shadowXOffset = shadowXOffset
            self.shadowYOffset = shadowYOffset
            self.teletextGridControl = teletextGridControl
            self.xPosition = xPosition
            self.yPosition = yPosition
        }

        public func validate(name: String) throws {
            try validate(self.backgroundOpacity, name:"backgroundOpacity", parent: name, max: 255)
            try validate(self.backgroundOpacity, name:"backgroundOpacity", parent: name, min: 0)
            try validate(self.fontOpacity, name:"fontOpacity", parent: name, max: 255)
            try validate(self.fontOpacity, name:"fontOpacity", parent: name, min: 0)
            try validate(self.fontResolution, name:"fontResolution", parent: name, max: 600)
            try validate(self.fontResolution, name:"fontResolution", parent: name, min: 96)
            try validate(self.outlineSize, name:"outlineSize", parent: name, max: 10)
            try validate(self.outlineSize, name:"outlineSize", parent: name, min: 0)
            try validate(self.shadowOpacity, name:"shadowOpacity", parent: name, max: 255)
            try validate(self.shadowOpacity, name:"shadowOpacity", parent: name, min: 0)
            try validate(self.xPosition, name:"xPosition", parent: name, min: 0)
            try validate(self.yPosition, name:"yPosition", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case alignment = "alignment"
            case backgroundColor = "backgroundColor"
            case backgroundOpacity = "backgroundOpacity"
            case font = "font"
            case fontColor = "fontColor"
            case fontOpacity = "fontOpacity"
            case fontResolution = "fontResolution"
            case fontSize = "fontSize"
            case outlineColor = "outlineColor"
            case outlineSize = "outlineSize"
            case shadowColor = "shadowColor"
            case shadowOpacity = "shadowOpacity"
            case shadowXOffset = "shadowXOffset"
            case shadowYOffset = "shadowYOffset"
            case teletextGridControl = "teletextGridControl"
            case xPosition = "xPosition"
            case yPosition = "yPosition"
        }
    }

    public struct DvbSubSourceSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Pid", location: .body(locationName: "pid"), required: false, type: .integer)
        ]

        /// When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
        public let pid: Int?

        public init(pid: Int? = nil) {
            self.pid = pid
        }

        public func validate(name: String) throws {
            try validate(self.pid, name:"pid", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case pid = "pid"
        }
    }

    public struct DvbTdtSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RepInterval", location: .body(locationName: "repInterval"), required: false, type: .integer)
        ]

        /// The number of milliseconds between instances of this table in the output transport stream.
        public let repInterval: Int?

        public init(repInterval: Int? = nil) {
            self.repInterval = repInterval
        }

        public func validate(name: String) throws {
            try validate(self.repInterval, name:"repInterval", parent: name, max: 30000)
            try validate(self.repInterval, name:"repInterval", parent: name, min: 1000)
        }

        private enum CodingKeys: String, CodingKey {
            case repInterval = "repInterval"
        }
    }

    public struct Eac3Settings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttenuationControl", location: .body(locationName: "attenuationControl"), required: false, type: .enum), 
            AWSShapeMember(label: "Bitrate", location: .body(locationName: "bitrate"), required: false, type: .double), 
            AWSShapeMember(label: "BitstreamMode", location: .body(locationName: "bitstreamMode"), required: false, type: .enum), 
            AWSShapeMember(label: "CodingMode", location: .body(locationName: "codingMode"), required: false, type: .enum), 
            AWSShapeMember(label: "DcFilter", location: .body(locationName: "dcFilter"), required: false, type: .enum), 
            AWSShapeMember(label: "Dialnorm", location: .body(locationName: "dialnorm"), required: false, type: .integer), 
            AWSShapeMember(label: "DrcLine", location: .body(locationName: "drcLine"), required: false, type: .enum), 
            AWSShapeMember(label: "DrcRf", location: .body(locationName: "drcRf"), required: false, type: .enum), 
            AWSShapeMember(label: "LfeControl", location: .body(locationName: "lfeControl"), required: false, type: .enum), 
            AWSShapeMember(label: "LfeFilter", location: .body(locationName: "lfeFilter"), required: false, type: .enum), 
            AWSShapeMember(label: "LoRoCenterMixLevel", location: .body(locationName: "loRoCenterMixLevel"), required: false, type: .double), 
            AWSShapeMember(label: "LoRoSurroundMixLevel", location: .body(locationName: "loRoSurroundMixLevel"), required: false, type: .double), 
            AWSShapeMember(label: "LtRtCenterMixLevel", location: .body(locationName: "ltRtCenterMixLevel"), required: false, type: .double), 
            AWSShapeMember(label: "LtRtSurroundMixLevel", location: .body(locationName: "ltRtSurroundMixLevel"), required: false, type: .double), 
            AWSShapeMember(label: "MetadataControl", location: .body(locationName: "metadataControl"), required: false, type: .enum), 
            AWSShapeMember(label: "PassthroughControl", location: .body(locationName: "passthroughControl"), required: false, type: .enum), 
            AWSShapeMember(label: "PhaseControl", location: .body(locationName: "phaseControl"), required: false, type: .enum), 
            AWSShapeMember(label: "StereoDownmix", location: .body(locationName: "stereoDownmix"), required: false, type: .enum), 
            AWSShapeMember(label: "SurroundExMode", location: .body(locationName: "surroundExMode"), required: false, type: .enum), 
            AWSShapeMember(label: "SurroundMode", location: .body(locationName: "surroundMode"), required: false, type: .enum)
        ]

        /// When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
        public let attenuationControl: Eac3AttenuationControl?
        /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
        public let bitrate: Double?
        /// Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
        public let bitstreamMode: Eac3BitstreamMode?
        /// Dolby Digital Plus coding mode. Determines number of channels.
        public let codingMode: Eac3CodingMode?
        /// When set to enabled, activates a DC highpass filter for all input channels.
        public let dcFilter: Eac3DcFilter?
        /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
        public let dialnorm: Int?
        /// Sets the Dolby dynamic range compression profile.
        public let drcLine: Eac3DrcLine?
        /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
        public let drcRf: Eac3DrcRf?
        /// When encoding 3/2 audio, setting to lfe enables the LFE channel
        public let lfeControl: Eac3LfeControl?
        /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
        public let lfeFilter: Eac3LfeFilter?
        /// Left only/Right only center mix level. Only used for 3/2 coding mode.
        public let loRoCenterMixLevel: Double?
        /// Left only/Right only surround mix level. Only used for 3/2 coding mode.
        public let loRoSurroundMixLevel: Double?
        /// Left total/Right total center mix level. Only used for 3/2 coding mode.
        public let ltRtCenterMixLevel: Double?
        /// Left total/Right total surround mix level. Only used for 3/2 coding mode.
        public let ltRtSurroundMixLevel: Double?
        /// When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
        public let metadataControl: Eac3MetadataControl?
        /// When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
        public let passthroughControl: Eac3PassthroughControl?
        /// When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
        public let phaseControl: Eac3PhaseControl?
        /// Stereo downmix preference. Only used for 3/2 coding mode.
        public let stereoDownmix: Eac3StereoDownmix?
        /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
        public let surroundExMode: Eac3SurroundExMode?
        /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
        public let surroundMode: Eac3SurroundMode?

        public init(attenuationControl: Eac3AttenuationControl? = nil, bitrate: Double? = nil, bitstreamMode: Eac3BitstreamMode? = nil, codingMode: Eac3CodingMode? = nil, dcFilter: Eac3DcFilter? = nil, dialnorm: Int? = nil, drcLine: Eac3DrcLine? = nil, drcRf: Eac3DrcRf? = nil, lfeControl: Eac3LfeControl? = nil, lfeFilter: Eac3LfeFilter? = nil, loRoCenterMixLevel: Double? = nil, loRoSurroundMixLevel: Double? = nil, ltRtCenterMixLevel: Double? = nil, ltRtSurroundMixLevel: Double? = nil, metadataControl: Eac3MetadataControl? = nil, passthroughControl: Eac3PassthroughControl? = nil, phaseControl: Eac3PhaseControl? = nil, stereoDownmix: Eac3StereoDownmix? = nil, surroundExMode: Eac3SurroundExMode? = nil, surroundMode: Eac3SurroundMode? = nil) {
            self.attenuationControl = attenuationControl
            self.bitrate = bitrate
            self.bitstreamMode = bitstreamMode
            self.codingMode = codingMode
            self.dcFilter = dcFilter
            self.dialnorm = dialnorm
            self.drcLine = drcLine
            self.drcRf = drcRf
            self.lfeControl = lfeControl
            self.lfeFilter = lfeFilter
            self.loRoCenterMixLevel = loRoCenterMixLevel
            self.loRoSurroundMixLevel = loRoSurroundMixLevel
            self.ltRtCenterMixLevel = ltRtCenterMixLevel
            self.ltRtSurroundMixLevel = ltRtSurroundMixLevel
            self.metadataControl = metadataControl
            self.passthroughControl = passthroughControl
            self.phaseControl = phaseControl
            self.stereoDownmix = stereoDownmix
            self.surroundExMode = surroundExMode
            self.surroundMode = surroundMode
        }

        public func validate(name: String) throws {
            try validate(self.dialnorm, name:"dialnorm", parent: name, max: 31)
            try validate(self.dialnorm, name:"dialnorm", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attenuationControl = "attenuationControl"
            case bitrate = "bitrate"
            case bitstreamMode = "bitstreamMode"
            case codingMode = "codingMode"
            case dcFilter = "dcFilter"
            case dialnorm = "dialnorm"
            case drcLine = "drcLine"
            case drcRf = "drcRf"
            case lfeControl = "lfeControl"
            case lfeFilter = "lfeFilter"
            case loRoCenterMixLevel = "loRoCenterMixLevel"
            case loRoSurroundMixLevel = "loRoSurroundMixLevel"
            case ltRtCenterMixLevel = "ltRtCenterMixLevel"
            case ltRtSurroundMixLevel = "ltRtSurroundMixLevel"
            case metadataControl = "metadataControl"
            case passthroughControl = "passthroughControl"
            case phaseControl = "phaseControl"
            case stereoDownmix = "stereoDownmix"
            case surroundExMode = "surroundExMode"
            case surroundMode = "surroundMode"
        }
    }

    public struct EmbeddedDestinationSettings: AWSShape {


        public init() {
        }

    }

    public struct EmbeddedPlusScte20DestinationSettings: AWSShape {


        public init() {
        }

    }

    public struct EmbeddedSourceSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Convert608To708", location: .body(locationName: "convert608To708"), required: false, type: .enum), 
            AWSShapeMember(label: "Scte20Detection", location: .body(locationName: "scte20Detection"), required: false, type: .enum), 
            AWSShapeMember(label: "Source608ChannelNumber", location: .body(locationName: "source608ChannelNumber"), required: false, type: .integer), 
            AWSShapeMember(label: "Source608TrackNumber", location: .body(locationName: "source608TrackNumber"), required: false, type: .integer)
        ]

        /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
        public let convert608To708: EmbeddedConvert608To708?
        /// Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
        public let scte20Detection: EmbeddedScte20Detection?
        /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
        public let source608ChannelNumber: Int?
        /// This field is unused and deprecated.
        public let source608TrackNumber: Int?

        public init(convert608To708: EmbeddedConvert608To708? = nil, scte20Detection: EmbeddedScte20Detection? = nil, source608ChannelNumber: Int? = nil, source608TrackNumber: Int? = nil) {
            self.convert608To708 = convert608To708
            self.scte20Detection = scte20Detection
            self.source608ChannelNumber = source608ChannelNumber
            self.source608TrackNumber = source608TrackNumber
        }

        public func validate(name: String) throws {
            try validate(self.source608ChannelNumber, name:"source608ChannelNumber", parent: name, max: 4)
            try validate(self.source608ChannelNumber, name:"source608ChannelNumber", parent: name, min: 1)
            try validate(self.source608TrackNumber, name:"source608TrackNumber", parent: name, max: 5)
            try validate(self.source608TrackNumber, name:"source608TrackNumber", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case convert608To708 = "convert608To708"
            case scte20Detection = "scte20Detection"
            case source608ChannelNumber = "source608ChannelNumber"
            case source608TrackNumber = "source608TrackNumber"
        }
    }

    public struct EncoderSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AudioDescriptions", location: .body(locationName: "audioDescriptions"), required: true, type: .list), 
            AWSShapeMember(label: "AvailBlanking", location: .body(locationName: "availBlanking"), required: false, type: .structure), 
            AWSShapeMember(label: "AvailConfiguration", location: .body(locationName: "availConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "BlackoutSlate", location: .body(locationName: "blackoutSlate"), required: false, type: .structure), 
            AWSShapeMember(label: "CaptionDescriptions", location: .body(locationName: "captionDescriptions"), required: false, type: .list), 
            AWSShapeMember(label: "GlobalConfiguration", location: .body(locationName: "globalConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "NielsenConfiguration", location: .body(locationName: "nielsenConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "OutputGroups", location: .body(locationName: "outputGroups"), required: true, type: .list), 
            AWSShapeMember(label: "TimecodeConfig", location: .body(locationName: "timecodeConfig"), required: true, type: .structure), 
            AWSShapeMember(label: "VideoDescriptions", location: .body(locationName: "videoDescriptions"), required: true, type: .list)
        ]

        public let audioDescriptions: [AudioDescription]
        /// Settings for ad avail blanking.
        public let availBlanking: AvailBlanking?
        /// Event-wide configuration settings for ad avail insertion.
        public let availConfiguration: AvailConfiguration?
        /// Settings for blackout slate.
        public let blackoutSlate: BlackoutSlate?
        /// Settings for caption decriptions
        public let captionDescriptions: [CaptionDescription]?
        /// Configuration settings that apply to the event as a whole.
        public let globalConfiguration: GlobalConfiguration?
        /// Nielsen configuration settings.
        public let nielsenConfiguration: NielsenConfiguration?
        public let outputGroups: [OutputGroup]
        /// Contains settings used to acquire and adjust timecode information from inputs.
        public let timecodeConfig: TimecodeConfig
        public let videoDescriptions: [VideoDescription]

        public init(audioDescriptions: [AudioDescription], availBlanking: AvailBlanking? = nil, availConfiguration: AvailConfiguration? = nil, blackoutSlate: BlackoutSlate? = nil, captionDescriptions: [CaptionDescription]? = nil, globalConfiguration: GlobalConfiguration? = nil, nielsenConfiguration: NielsenConfiguration? = nil, outputGroups: [OutputGroup], timecodeConfig: TimecodeConfig, videoDescriptions: [VideoDescription]) {
            self.audioDescriptions = audioDescriptions
            self.availBlanking = availBlanking
            self.availConfiguration = availConfiguration
            self.blackoutSlate = blackoutSlate
            self.captionDescriptions = captionDescriptions
            self.globalConfiguration = globalConfiguration
            self.nielsenConfiguration = nielsenConfiguration
            self.outputGroups = outputGroups
            self.timecodeConfig = timecodeConfig
            self.videoDescriptions = videoDescriptions
        }

        public func validate(name: String) throws {
            try self.audioDescriptions.forEach {
                try $0.validate(name: "\(name).audioDescriptions[]")
            }
            try self.availConfiguration?.validate(name: "\(name).availConfiguration")
            try self.blackoutSlate?.validate(name: "\(name).blackoutSlate")
            try self.captionDescriptions?.forEach {
                try $0.validate(name: "\(name).captionDescriptions[]")
            }
            try self.globalConfiguration?.validate(name: "\(name).globalConfiguration")
            try self.outputGroups.forEach {
                try $0.validate(name: "\(name).outputGroups[]")
            }
            try self.timecodeConfig.validate(name: "\(name).timecodeConfig")
            try self.videoDescriptions.forEach {
                try $0.validate(name: "\(name).videoDescriptions[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case audioDescriptions = "audioDescriptions"
            case availBlanking = "availBlanking"
            case availConfiguration = "availConfiguration"
            case blackoutSlate = "blackoutSlate"
            case captionDescriptions = "captionDescriptions"
            case globalConfiguration = "globalConfiguration"
            case nielsenConfiguration = "nielsenConfiguration"
            case outputGroups = "outputGroups"
            case timecodeConfig = "timecodeConfig"
            case videoDescriptions = "videoDescriptions"
        }
    }

    public struct FecOutputSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ColumnDepth", location: .body(locationName: "columnDepth"), required: false, type: .integer), 
            AWSShapeMember(label: "IncludeFec", location: .body(locationName: "includeFec"), required: false, type: .enum), 
            AWSShapeMember(label: "RowLength", location: .body(locationName: "rowLength"), required: false, type: .integer)
        ]

        /// Parameter D from SMPTE 2022-1. The height of the FEC protection matrix.  The number of transport stream packets per column error correction packet. Must be between 4 and 20, inclusive.
        public let columnDepth: Int?
        /// Enables column only or column and row based FEC
        public let includeFec: FecOutputIncludeFec?
        /// Parameter L from SMPTE 2022-1. The width of the FEC protection matrix.  Must be between 1 and 20, inclusive. If only Column FEC is used, then larger values increase robustness.  If Row FEC is used, then this is the number of transport stream packets per row error correction packet, and the value must be between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is column, this value must be 1 to 20, inclusive.
        public let rowLength: Int?

        public init(columnDepth: Int? = nil, includeFec: FecOutputIncludeFec? = nil, rowLength: Int? = nil) {
            self.columnDepth = columnDepth
            self.includeFec = includeFec
            self.rowLength = rowLength
        }

        public func validate(name: String) throws {
            try validate(self.columnDepth, name:"columnDepth", parent: name, max: 20)
            try validate(self.columnDepth, name:"columnDepth", parent: name, min: 4)
            try validate(self.rowLength, name:"rowLength", parent: name, max: 20)
            try validate(self.rowLength, name:"rowLength", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case columnDepth = "columnDepth"
            case includeFec = "includeFec"
            case rowLength = "rowLength"
        }
    }

    public struct FixedModeScheduleActionStartSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Time", location: .body(locationName: "time"), required: true, type: .string)
        ]

        /// Start time for the action to start in the channel. (Not the time for the action to be added to the schedule: actions are always added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits (for example, mm might be 01) except for the two constants "T" for time and "Z" for "UTC format".
        public let time: String

        public init(time: String) {
            self.time = time
        }

        private enum CodingKeys: String, CodingKey {
            case time = "time"
        }
    }

    public struct Fmp4HlsSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AudioRenditionSets", location: .body(locationName: "audioRenditionSets"), required: false, type: .string), 
            AWSShapeMember(label: "NielsenId3Behavior", location: .body(locationName: "nielsenId3Behavior"), required: false, type: .enum), 
            AWSShapeMember(label: "TimedMetadataBehavior", location: .body(locationName: "timedMetadataBehavior"), required: false, type: .enum)
        ]

        /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
        public let audioRenditionSets: String?
        /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public let nielsenId3Behavior: Fmp4NielsenId3Behavior?
        /// When set to passthrough, timed metadata is passed through from input to output.
        public let timedMetadataBehavior: Fmp4TimedMetadataBehavior?

        public init(audioRenditionSets: String? = nil, nielsenId3Behavior: Fmp4NielsenId3Behavior? = nil, timedMetadataBehavior: Fmp4TimedMetadataBehavior? = nil) {
            self.audioRenditionSets = audioRenditionSets
            self.nielsenId3Behavior = nielsenId3Behavior
            self.timedMetadataBehavior = timedMetadataBehavior
        }

        private enum CodingKeys: String, CodingKey {
            case audioRenditionSets = "audioRenditionSets"
            case nielsenId3Behavior = "nielsenId3Behavior"
            case timedMetadataBehavior = "timedMetadataBehavior"
        }
    }

    public struct FollowModeScheduleActionStartSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FollowPoint", location: .body(locationName: "followPoint"), required: true, type: .enum), 
            AWSShapeMember(label: "ReferenceActionName", location: .body(locationName: "referenceActionName"), required: true, type: .string)
        ]

        /// Identifies whether this action starts relative to the start or relative to the end of the reference action.
        public let followPoint: FollowPoint
        /// The action name of another action that this one refers to.
        public let referenceActionName: String

        public init(followPoint: FollowPoint, referenceActionName: String) {
            self.followPoint = followPoint
            self.referenceActionName = referenceActionName
        }

        private enum CodingKeys: String, CodingKey {
            case followPoint = "followPoint"
            case referenceActionName = "referenceActionName"
        }
    }

    public struct FrameCaptureGroupSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: true, type: .structure)
        ]

        /// The destination for the frame capture files. Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example, s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore container, plus a file name prefix (for example, mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of the prefix from the destination field (for example, "curling_") + name modifier + the counter (5 digits, starting from 00001) + extension (which is always .jpg).  For example, curlingLow.00001.jpg
        public let destination: OutputLocationRef

        public init(destination: OutputLocationRef) {
            self.destination = destination
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "destination"
        }
    }

    public struct FrameCaptureOutputSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NameModifier", location: .body(locationName: "nameModifier"), required: false, type: .string)
        ]

        /// Required if the output group contains more than one output. This modifier forms part of the output file name.
        public let nameModifier: String?

        public init(nameModifier: String? = nil) {
            self.nameModifier = nameModifier
        }

        private enum CodingKeys: String, CodingKey {
            case nameModifier = "nameModifier"
        }
    }

    public struct FrameCaptureSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CaptureInterval", location: .body(locationName: "captureInterval"), required: true, type: .integer), 
            AWSShapeMember(label: "CaptureIntervalUnits", location: .body(locationName: "captureIntervalUnits"), required: false, type: .enum)
        ]

        /// The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
        public let captureInterval: Int
        /// Unit for the frame capture interval.
        public let captureIntervalUnits: FrameCaptureIntervalUnit?

        public init(captureInterval: Int, captureIntervalUnits: FrameCaptureIntervalUnit? = nil) {
            self.captureInterval = captureInterval
            self.captureIntervalUnits = captureIntervalUnits
        }

        public func validate(name: String) throws {
            try validate(self.captureInterval, name:"captureInterval", parent: name, max: 3600000)
            try validate(self.captureInterval, name:"captureInterval", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case captureInterval = "captureInterval"
            case captureIntervalUnits = "captureIntervalUnits"
        }
    }

    public struct GlobalConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialAudioGain", location: .body(locationName: "initialAudioGain"), required: false, type: .integer), 
            AWSShapeMember(label: "InputEndAction", location: .body(locationName: "inputEndAction"), required: false, type: .enum), 
            AWSShapeMember(label: "InputLossBehavior", location: .body(locationName: "inputLossBehavior"), required: false, type: .structure), 
            AWSShapeMember(label: "OutputLockingMode", location: .body(locationName: "outputLockingMode"), required: false, type: .enum), 
            AWSShapeMember(label: "OutputTimingSource", location: .body(locationName: "outputTimingSource"), required: false, type: .enum), 
            AWSShapeMember(label: "SupportLowFramerateInputs", location: .body(locationName: "supportLowFramerateInputs"), required: false, type: .enum)
        ]

        /// Value to set the initial audio gain for the Live Event.
        public let initialAudioGain: Int?
        /// Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input.  When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
        public let inputEndAction: GlobalConfigurationInputEndAction?
        /// Settings for system actions when input is lost.
        public let inputLossBehavior: InputLossBehavior?
        /// Indicates how MediaLive pipelines are synchronized.
        /// PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other.
        /// EPOCHLOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
        public let outputLockingMode: GlobalConfigurationOutputLockingMode?
        /// Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
        public let outputTimingSource: GlobalConfigurationOutputTimingSource?
        /// Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
        public let supportLowFramerateInputs: GlobalConfigurationLowFramerateInputs?

        public init(initialAudioGain: Int? = nil, inputEndAction: GlobalConfigurationInputEndAction? = nil, inputLossBehavior: InputLossBehavior? = nil, outputLockingMode: GlobalConfigurationOutputLockingMode? = nil, outputTimingSource: GlobalConfigurationOutputTimingSource? = nil, supportLowFramerateInputs: GlobalConfigurationLowFramerateInputs? = nil) {
            self.initialAudioGain = initialAudioGain
            self.inputEndAction = inputEndAction
            self.inputLossBehavior = inputLossBehavior
            self.outputLockingMode = outputLockingMode
            self.outputTimingSource = outputTimingSource
            self.supportLowFramerateInputs = supportLowFramerateInputs
        }

        public func validate(name: String) throws {
            try validate(self.initialAudioGain, name:"initialAudioGain", parent: name, max: 60)
            try validate(self.initialAudioGain, name:"initialAudioGain", parent: name, min: -60)
            try self.inputLossBehavior?.validate(name: "\(name).inputLossBehavior")
        }

        private enum CodingKeys: String, CodingKey {
            case initialAudioGain = "initialAudioGain"
            case inputEndAction = "inputEndAction"
            case inputLossBehavior = "inputLossBehavior"
            case outputLockingMode = "outputLockingMode"
            case outputTimingSource = "outputTimingSource"
            case supportLowFramerateInputs = "supportLowFramerateInputs"
        }
    }

    public struct H264ColorSpaceSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ColorSpacePassthroughSettings", location: .body(locationName: "colorSpacePassthroughSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Rec601Settings", location: .body(locationName: "rec601Settings"), required: false, type: .structure), 
            AWSShapeMember(label: "Rec709Settings", location: .body(locationName: "rec709Settings"), required: false, type: .structure)
        ]

        public let colorSpacePassthroughSettings: ColorSpacePassthroughSettings?
        public let rec601Settings: Rec601Settings?
        public let rec709Settings: Rec709Settings?

        public init(colorSpacePassthroughSettings: ColorSpacePassthroughSettings? = nil, rec601Settings: Rec601Settings? = nil, rec709Settings: Rec709Settings? = nil) {
            self.colorSpacePassthroughSettings = colorSpacePassthroughSettings
            self.rec601Settings = rec601Settings
            self.rec709Settings = rec709Settings
        }

        private enum CodingKeys: String, CodingKey {
            case colorSpacePassthroughSettings = "colorSpacePassthroughSettings"
            case rec601Settings = "rec601Settings"
            case rec709Settings = "rec709Settings"
        }
    }

    public struct H264FilterSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TemporalFilterSettings", location: .body(locationName: "temporalFilterSettings"), required: false, type: .structure)
        ]

        public let temporalFilterSettings: TemporalFilterSettings?

        public init(temporalFilterSettings: TemporalFilterSettings? = nil) {
            self.temporalFilterSettings = temporalFilterSettings
        }

        private enum CodingKeys: String, CodingKey {
            case temporalFilterSettings = "temporalFilterSettings"
        }
    }

    public struct H264Settings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdaptiveQuantization", location: .body(locationName: "adaptiveQuantization"), required: false, type: .enum), 
            AWSShapeMember(label: "AfdSignaling", location: .body(locationName: "afdSignaling"), required: false, type: .enum), 
            AWSShapeMember(label: "Bitrate", location: .body(locationName: "bitrate"), required: false, type: .integer), 
            AWSShapeMember(label: "BufFillPct", location: .body(locationName: "bufFillPct"), required: false, type: .integer), 
            AWSShapeMember(label: "BufSize", location: .body(locationName: "bufSize"), required: false, type: .integer), 
            AWSShapeMember(label: "ColorMetadata", location: .body(locationName: "colorMetadata"), required: false, type: .enum), 
            AWSShapeMember(label: "ColorSpaceSettings", location: .body(locationName: "colorSpaceSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "EntropyEncoding", location: .body(locationName: "entropyEncoding"), required: false, type: .enum), 
            AWSShapeMember(label: "FilterSettings", location: .body(locationName: "filterSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "FixedAfd", location: .body(locationName: "fixedAfd"), required: false, type: .enum), 
            AWSShapeMember(label: "FlickerAq", location: .body(locationName: "flickerAq"), required: false, type: .enum), 
            AWSShapeMember(label: "ForceFieldPictures", location: .body(locationName: "forceFieldPictures"), required: false, type: .enum), 
            AWSShapeMember(label: "FramerateControl", location: .body(locationName: "framerateControl"), required: false, type: .enum), 
            AWSShapeMember(label: "FramerateDenominator", location: .body(locationName: "framerateDenominator"), required: false, type: .integer), 
            AWSShapeMember(label: "FramerateNumerator", location: .body(locationName: "framerateNumerator"), required: false, type: .integer), 
            AWSShapeMember(label: "GopBReference", location: .body(locationName: "gopBReference"), required: false, type: .enum), 
            AWSShapeMember(label: "GopClosedCadence", location: .body(locationName: "gopClosedCadence"), required: false, type: .integer), 
            AWSShapeMember(label: "GopNumBFrames", location: .body(locationName: "gopNumBFrames"), required: false, type: .integer), 
            AWSShapeMember(label: "GopSize", location: .body(locationName: "gopSize"), required: false, type: .double), 
            AWSShapeMember(label: "GopSizeUnits", location: .body(locationName: "gopSizeUnits"), required: false, type: .enum), 
            AWSShapeMember(label: "Level", location: .body(locationName: "level"), required: false, type: .enum), 
            AWSShapeMember(label: "LookAheadRateControl", location: .body(locationName: "lookAheadRateControl"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxBitrate", location: .body(locationName: "maxBitrate"), required: false, type: .integer), 
            AWSShapeMember(label: "MinIInterval", location: .body(locationName: "minIInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "NumRefFrames", location: .body(locationName: "numRefFrames"), required: false, type: .integer), 
            AWSShapeMember(label: "ParControl", location: .body(locationName: "parControl"), required: false, type: .enum), 
            AWSShapeMember(label: "ParDenominator", location: .body(locationName: "parDenominator"), required: false, type: .integer), 
            AWSShapeMember(label: "ParNumerator", location: .body(locationName: "parNumerator"), required: false, type: .integer), 
            AWSShapeMember(label: "Profile", location: .body(locationName: "profile"), required: false, type: .enum), 
            AWSShapeMember(label: "QualityLevel", location: .body(locationName: "qualityLevel"), required: false, type: .enum), 
            AWSShapeMember(label: "QvbrQualityLevel", location: .body(locationName: "qvbrQualityLevel"), required: false, type: .integer), 
            AWSShapeMember(label: "RateControlMode", location: .body(locationName: "rateControlMode"), required: false, type: .enum), 
            AWSShapeMember(label: "ScanType", location: .body(locationName: "scanType"), required: false, type: .enum), 
            AWSShapeMember(label: "SceneChangeDetect", location: .body(locationName: "sceneChangeDetect"), required: false, type: .enum), 
            AWSShapeMember(label: "Slices", location: .body(locationName: "slices"), required: false, type: .integer), 
            AWSShapeMember(label: "Softness", location: .body(locationName: "softness"), required: false, type: .integer), 
            AWSShapeMember(label: "SpatialAq", location: .body(locationName: "spatialAq"), required: false, type: .enum), 
            AWSShapeMember(label: "SubgopLength", location: .body(locationName: "subgopLength"), required: false, type: .enum), 
            AWSShapeMember(label: "Syntax", location: .body(locationName: "syntax"), required: false, type: .enum), 
            AWSShapeMember(label: "TemporalAq", location: .body(locationName: "temporalAq"), required: false, type: .enum), 
            AWSShapeMember(label: "TimecodeInsertion", location: .body(locationName: "timecodeInsertion"), required: false, type: .enum)
        ]

        /// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
        public let adaptiveQuantization: H264AdaptiveQuantization?
        /// Indicates that AFD values will be written into the output stream.  If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
        public let afdSignaling: AfdSignaling?
        /// Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
        public let bitrate: Int?
        /// Percentage of the buffer that should initially be filled (HRD buffer model).
        public let bufFillPct: Int?
        /// Size of buffer (HRD buffer model) in bits.
        public let bufSize: Int?
        /// Includes colorspace metadata in the output.
        public let colorMetadata: H264ColorMetadata?
        /// Color Space settings
        public let colorSpaceSettings: H264ColorSpaceSettings?
        /// Entropy encoding mode.  Use cabac (must be in Main or High profile) or cavlc.
        public let entropyEncoding: H264EntropyEncoding?
        /// Settings associated with the specified filter.
        public let filterSettings: H264FilterSettings?
        /// Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
        public let fixedAfd: FixedAfd?
        /// If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
        public let flickerAq: H264FlickerAq?
        /// This setting applies only when scan type is "interlaced." It controls whether coding is performed on a field basis or on a frame basis. (When the video is progressive, the coding is always performed on a frame basis.)
        /// enabled: Force MediaLive to code on a field basis, so that odd and even sets of fields are coded separately.
        /// disabled: Code the two sets of fields separately (on a field basis) or together (on a frame basis using PAFF), depending on what is most appropriate for the content.
        public let forceFieldPictures: H264ForceFieldPictures?
        /// This field indicates how the output video frame rate is specified.  If "specified" is selected then the output video frame rate is determined by framerateNumerator and framerateDenominator, else if "initializeFromSource" is selected then the output video frame rate will be set equal to the input video frame rate of the first input.
        public let framerateControl: H264FramerateControl?
        /// Framerate denominator.
        public let framerateDenominator: Int?
        /// Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
        public let framerateNumerator: Int?
        /// If enabled, use reference B frames for GOP structures that have B frames > 1.
        public let gopBReference: H264GopBReference?
        /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
        public let gopClosedCadence: Int?
        /// Number of B-frames between reference frames.
        public let gopNumBFrames: Int?
        /// GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits.
        /// If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1.
        /// If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
        public let gopSize: Double?
        /// Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
        public let gopSizeUnits: H264GopSizeUnits?
        /// H.264 Level.
        public let level: H264Level?
        /// Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
        public let lookAheadRateControl: H264LookAheadRateControl?
        /// For QVBR: See the tooltip for Quality level
        /// For VBR: Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
        public let maxBitrate: Int?
        /// Only meaningful if sceneChangeDetect is set to enabled.  Defaults to 5 if multiplex rate control is used.  Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
        public let minIInterval: Int?
        /// Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
        public let numRefFrames: Int?
        /// This field indicates how the output pixel aspect ratio is specified.  If "specified" is selected then the output video pixel aspect ratio is determined by parNumerator and parDenominator, else if "initializeFromSource" is selected then the output pixsel aspect ratio will be set equal to the input video pixel aspect ratio of the first input.
        public let parControl: H264ParControl?
        /// Pixel Aspect Ratio denominator.
        public let parDenominator: Int?
        /// Pixel Aspect Ratio numerator.
        public let parNumerator: Int?
        /// H.264 Profile.
        public let profile: H264Profile?
        /// If set to "ENHANCEDQUALITY," improves visual quality at an increased output cost. If this video is being delivered to a MediaLive Multiplex, "ENHANCEDQUALITY" is always used.
        public let qualityLevel: H264QualityLevel?
        /// Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are:
        /// - Primary screen: Quality level: 8 to 10. Max bitrate: 4M
        /// - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M
        /// - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
        public let qvbrQualityLevel: Int?
        /// Rate control mode.
        /// QVBR: Quality will match the specified quality level except when it is constrained by the
        /// maximum bitrate.  Recommended if you or your viewers pay for bandwidth.
        /// VBR: Quality and bitrate vary, depending on the video complexity. Recommended instead of QVBR
        /// if you want to maintain a specific average bitrate over the duration of the channel.
        /// CBR: Quality varies, depending on the video complexity. Recommended only if you distribute
        /// your assets to devices that cannot handle variable bitrates.
        /// Multiplex: This rate control mode is only supported (and is required) when the video is being
        /// delivered to a MediaLive Multiplex in which case the rate control configuration is controlled
        /// by the properties within the Multiplex Program.
        public let rateControlMode: H264RateControlMode?
        /// Sets the scan type of the output to progressive or top-field-first interlaced.
        public let scanType: H264ScanType?
        /// Scene change detection.
        /// - On: inserts I-frames when scene change is detected.
        /// - Off: does not force an I-frame when scene change is detected.
        public let sceneChangeDetect: H264SceneChangeDetect?
        /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures.
        /// This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
        public let slices: Int?
        /// Softness. Selects quantizer matrix, larger values reduce high-frequency content in the encoded image.
        public let softness: Int?
        /// If set to enabled, adjust quantization within each frame based on spatial variation of content complexity.
        public let spatialAq: H264SpatialAq?
        /// If set to fixed, use gopNumBFrames B-frames per sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve visual quality.
        public let subgopLength: H264SubGopLength?
        /// Produces a bitstream compliant with SMPTE RP-2027.
        public let syntax: H264Syntax?
        /// If set to enabled, adjust quantization within each frame based on temporal variation of content complexity.
        public let temporalAq: H264TemporalAq?
        /// Determines how timecodes should be inserted into the video elementary stream.
        /// - 'disabled': Do not include timecodes
        /// - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
        public let timecodeInsertion: H264TimecodeInsertionBehavior?

        public init(adaptiveQuantization: H264AdaptiveQuantization? = nil, afdSignaling: AfdSignaling? = nil, bitrate: Int? = nil, bufFillPct: Int? = nil, bufSize: Int? = nil, colorMetadata: H264ColorMetadata? = nil, colorSpaceSettings: H264ColorSpaceSettings? = nil, entropyEncoding: H264EntropyEncoding? = nil, filterSettings: H264FilterSettings? = nil, fixedAfd: FixedAfd? = nil, flickerAq: H264FlickerAq? = nil, forceFieldPictures: H264ForceFieldPictures? = nil, framerateControl: H264FramerateControl? = nil, framerateDenominator: Int? = nil, framerateNumerator: Int? = nil, gopBReference: H264GopBReference? = nil, gopClosedCadence: Int? = nil, gopNumBFrames: Int? = nil, gopSize: Double? = nil, gopSizeUnits: H264GopSizeUnits? = nil, level: H264Level? = nil, lookAheadRateControl: H264LookAheadRateControl? = nil, maxBitrate: Int? = nil, minIInterval: Int? = nil, numRefFrames: Int? = nil, parControl: H264ParControl? = nil, parDenominator: Int? = nil, parNumerator: Int? = nil, profile: H264Profile? = nil, qualityLevel: H264QualityLevel? = nil, qvbrQualityLevel: Int? = nil, rateControlMode: H264RateControlMode? = nil, scanType: H264ScanType? = nil, sceneChangeDetect: H264SceneChangeDetect? = nil, slices: Int? = nil, softness: Int? = nil, spatialAq: H264SpatialAq? = nil, subgopLength: H264SubGopLength? = nil, syntax: H264Syntax? = nil, temporalAq: H264TemporalAq? = nil, timecodeInsertion: H264TimecodeInsertionBehavior? = nil) {
            self.adaptiveQuantization = adaptiveQuantization
            self.afdSignaling = afdSignaling
            self.bitrate = bitrate
            self.bufFillPct = bufFillPct
            self.bufSize = bufSize
            self.colorMetadata = colorMetadata
            self.colorSpaceSettings = colorSpaceSettings
            self.entropyEncoding = entropyEncoding
            self.filterSettings = filterSettings
            self.fixedAfd = fixedAfd
            self.flickerAq = flickerAq
            self.forceFieldPictures = forceFieldPictures
            self.framerateControl = framerateControl
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopBReference = gopBReference
            self.gopClosedCadence = gopClosedCadence
            self.gopNumBFrames = gopNumBFrames
            self.gopSize = gopSize
            self.gopSizeUnits = gopSizeUnits
            self.level = level
            self.lookAheadRateControl = lookAheadRateControl
            self.maxBitrate = maxBitrate
            self.minIInterval = minIInterval
            self.numRefFrames = numRefFrames
            self.parControl = parControl
            self.parDenominator = parDenominator
            self.parNumerator = parNumerator
            self.profile = profile
            self.qualityLevel = qualityLevel
            self.qvbrQualityLevel = qvbrQualityLevel
            self.rateControlMode = rateControlMode
            self.scanType = scanType
            self.sceneChangeDetect = sceneChangeDetect
            self.slices = slices
            self.softness = softness
            self.spatialAq = spatialAq
            self.subgopLength = subgopLength
            self.syntax = syntax
            self.temporalAq = temporalAq
            self.timecodeInsertion = timecodeInsertion
        }

        public func validate(name: String) throws {
            try validate(self.bitrate, name:"bitrate", parent: name, min: 1000)
            try validate(self.bufFillPct, name:"bufFillPct", parent: name, max: 100)
            try validate(self.bufFillPct, name:"bufFillPct", parent: name, min: 0)
            try validate(self.bufSize, name:"bufSize", parent: name, min: 0)
            try validate(self.framerateDenominator, name:"framerateDenominator", parent: name, min: 1)
            try validate(self.framerateNumerator, name:"framerateNumerator", parent: name, min: 1)
            try validate(self.gopClosedCadence, name:"gopClosedCadence", parent: name, min: 0)
            try validate(self.gopNumBFrames, name:"gopNumBFrames", parent: name, max: 7)
            try validate(self.gopNumBFrames, name:"gopNumBFrames", parent: name, min: 0)
            try validate(self.maxBitrate, name:"maxBitrate", parent: name, min: 1000)
            try validate(self.minIInterval, name:"minIInterval", parent: name, max: 30)
            try validate(self.minIInterval, name:"minIInterval", parent: name, min: 0)
            try validate(self.numRefFrames, name:"numRefFrames", parent: name, max: 6)
            try validate(self.numRefFrames, name:"numRefFrames", parent: name, min: 1)
            try validate(self.parDenominator, name:"parDenominator", parent: name, min: 1)
            try validate(self.qvbrQualityLevel, name:"qvbrQualityLevel", parent: name, max: 10)
            try validate(self.qvbrQualityLevel, name:"qvbrQualityLevel", parent: name, min: 1)
            try validate(self.slices, name:"slices", parent: name, max: 32)
            try validate(self.slices, name:"slices", parent: name, min: 1)
            try validate(self.softness, name:"softness", parent: name, max: 128)
            try validate(self.softness, name:"softness", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case adaptiveQuantization = "adaptiveQuantization"
            case afdSignaling = "afdSignaling"
            case bitrate = "bitrate"
            case bufFillPct = "bufFillPct"
            case bufSize = "bufSize"
            case colorMetadata = "colorMetadata"
            case colorSpaceSettings = "colorSpaceSettings"
            case entropyEncoding = "entropyEncoding"
            case filterSettings = "filterSettings"
            case fixedAfd = "fixedAfd"
            case flickerAq = "flickerAq"
            case forceFieldPictures = "forceFieldPictures"
            case framerateControl = "framerateControl"
            case framerateDenominator = "framerateDenominator"
            case framerateNumerator = "framerateNumerator"
            case gopBReference = "gopBReference"
            case gopClosedCadence = "gopClosedCadence"
            case gopNumBFrames = "gopNumBFrames"
            case gopSize = "gopSize"
            case gopSizeUnits = "gopSizeUnits"
            case level = "level"
            case lookAheadRateControl = "lookAheadRateControl"
            case maxBitrate = "maxBitrate"
            case minIInterval = "minIInterval"
            case numRefFrames = "numRefFrames"
            case parControl = "parControl"
            case parDenominator = "parDenominator"
            case parNumerator = "parNumerator"
            case profile = "profile"
            case qualityLevel = "qualityLevel"
            case qvbrQualityLevel = "qvbrQualityLevel"
            case rateControlMode = "rateControlMode"
            case scanType = "scanType"
            case sceneChangeDetect = "sceneChangeDetect"
            case slices = "slices"
            case softness = "softness"
            case spatialAq = "spatialAq"
            case subgopLength = "subgopLength"
            case syntax = "syntax"
            case temporalAq = "temporalAq"
            case timecodeInsertion = "timecodeInsertion"
        }
    }

    public struct H265ColorSpaceSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ColorSpacePassthroughSettings", location: .body(locationName: "colorSpacePassthroughSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Hdr10Settings", location: .body(locationName: "hdr10Settings"), required: false, type: .structure), 
            AWSShapeMember(label: "Rec601Settings", location: .body(locationName: "rec601Settings"), required: false, type: .structure), 
            AWSShapeMember(label: "Rec709Settings", location: .body(locationName: "rec709Settings"), required: false, type: .structure)
        ]

        public let colorSpacePassthroughSettings: ColorSpacePassthroughSettings?
        public let hdr10Settings: Hdr10Settings?
        public let rec601Settings: Rec601Settings?
        public let rec709Settings: Rec709Settings?

        public init(colorSpacePassthroughSettings: ColorSpacePassthroughSettings? = nil, hdr10Settings: Hdr10Settings? = nil, rec601Settings: Rec601Settings? = nil, rec709Settings: Rec709Settings? = nil) {
            self.colorSpacePassthroughSettings = colorSpacePassthroughSettings
            self.hdr10Settings = hdr10Settings
            self.rec601Settings = rec601Settings
            self.rec709Settings = rec709Settings
        }

        public func validate(name: String) throws {
            try self.hdr10Settings?.validate(name: "\(name).hdr10Settings")
        }

        private enum CodingKeys: String, CodingKey {
            case colorSpacePassthroughSettings = "colorSpacePassthroughSettings"
            case hdr10Settings = "hdr10Settings"
            case rec601Settings = "rec601Settings"
            case rec709Settings = "rec709Settings"
        }
    }

    public struct H265Settings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdaptiveQuantization", location: .body(locationName: "adaptiveQuantization"), required: false, type: .enum), 
            AWSShapeMember(label: "AfdSignaling", location: .body(locationName: "afdSignaling"), required: false, type: .enum), 
            AWSShapeMember(label: "AlternativeTransferFunction", location: .body(locationName: "alternativeTransferFunction"), required: false, type: .enum), 
            AWSShapeMember(label: "Bitrate", location: .body(locationName: "bitrate"), required: false, type: .integer), 
            AWSShapeMember(label: "BufSize", location: .body(locationName: "bufSize"), required: false, type: .integer), 
            AWSShapeMember(label: "ColorMetadata", location: .body(locationName: "colorMetadata"), required: false, type: .enum), 
            AWSShapeMember(label: "ColorSpaceSettings", location: .body(locationName: "colorSpaceSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "FixedAfd", location: .body(locationName: "fixedAfd"), required: false, type: .enum), 
            AWSShapeMember(label: "FlickerAq", location: .body(locationName: "flickerAq"), required: false, type: .enum), 
            AWSShapeMember(label: "FramerateDenominator", location: .body(locationName: "framerateDenominator"), required: true, type: .integer), 
            AWSShapeMember(label: "FramerateNumerator", location: .body(locationName: "framerateNumerator"), required: true, type: .integer), 
            AWSShapeMember(label: "GopClosedCadence", location: .body(locationName: "gopClosedCadence"), required: false, type: .integer), 
            AWSShapeMember(label: "GopSize", location: .body(locationName: "gopSize"), required: false, type: .double), 
            AWSShapeMember(label: "GopSizeUnits", location: .body(locationName: "gopSizeUnits"), required: false, type: .enum), 
            AWSShapeMember(label: "Level", location: .body(locationName: "level"), required: false, type: .enum), 
            AWSShapeMember(label: "LookAheadRateControl", location: .body(locationName: "lookAheadRateControl"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxBitrate", location: .body(locationName: "maxBitrate"), required: false, type: .integer), 
            AWSShapeMember(label: "MinIInterval", location: .body(locationName: "minIInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "ParDenominator", location: .body(locationName: "parDenominator"), required: false, type: .integer), 
            AWSShapeMember(label: "ParNumerator", location: .body(locationName: "parNumerator"), required: false, type: .integer), 
            AWSShapeMember(label: "Profile", location: .body(locationName: "profile"), required: false, type: .enum), 
            AWSShapeMember(label: "QvbrQualityLevel", location: .body(locationName: "qvbrQualityLevel"), required: false, type: .integer), 
            AWSShapeMember(label: "RateControlMode", location: .body(locationName: "rateControlMode"), required: false, type: .enum), 
            AWSShapeMember(label: "ScanType", location: .body(locationName: "scanType"), required: false, type: .enum), 
            AWSShapeMember(label: "SceneChangeDetect", location: .body(locationName: "sceneChangeDetect"), required: false, type: .enum), 
            AWSShapeMember(label: "Slices", location: .body(locationName: "slices"), required: false, type: .integer), 
            AWSShapeMember(label: "Tier", location: .body(locationName: "tier"), required: false, type: .enum), 
            AWSShapeMember(label: "TimecodeInsertion", location: .body(locationName: "timecodeInsertion"), required: false, type: .enum)
        ]

        /// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
        public let adaptiveQuantization: H265AdaptiveQuantization?
        /// Indicates that AFD values will be written into the output stream.  If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
        public let afdSignaling: AfdSignaling?
        /// Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.
        public let alternativeTransferFunction: H265AlternativeTransferFunction?
        /// Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
        public let bitrate: Int?
        /// Size of buffer (HRD buffer model) in bits.
        public let bufSize: Int?
        /// Includes colorspace metadata in the output.
        public let colorMetadata: H265ColorMetadata?
        /// Color Space settings
        public let colorSpaceSettings: H265ColorSpaceSettings?
        /// Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
        public let fixedAfd: FixedAfd?
        /// If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
        public let flickerAq: H265FlickerAq?
        /// Framerate denominator.
        public let framerateDenominator: Int
        /// Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
        public let framerateNumerator: Int
        /// Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
        public let gopClosedCadence: Int?
        /// GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits.
        /// If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1.
        /// If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
        public let gopSize: Double?
        /// Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
        public let gopSizeUnits: H265GopSizeUnits?
        /// H.265 Level.
        public let level: H265Level?
        /// Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
        public let lookAheadRateControl: H265LookAheadRateControl?
        /// For QVBR: See the tooltip for Quality level
        public let maxBitrate: Int?
        /// Only meaningful if sceneChangeDetect is set to enabled.  Defaults to 5 if multiplex rate control is used.  Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
        public let minIInterval: Int?
        /// Pixel Aspect Ratio denominator.
        public let parDenominator: Int?
        /// Pixel Aspect Ratio numerator.
        public let parNumerator: Int?
        /// H.265 Profile.
        public let profile: H265Profile?
        /// Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are:
        /// - Primary screen: Quality level: 8 to 10. Max bitrate: 4M
        /// - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M
        /// - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
        public let qvbrQualityLevel: Int?
        /// Rate control mode.
        /// QVBR: Quality will match the specified quality level except when it is constrained by the
        /// maximum bitrate.  Recommended if you or your viewers pay for bandwidth.
        /// CBR: Quality varies, depending on the video complexity. Recommended only if you distribute
        /// your assets to devices that cannot handle variable bitrates.
        public let rateControlMode: H265RateControlMode?
        /// Sets the scan type of the output to progressive or top-field-first interlaced.
        public let scanType: H265ScanType?
        /// Scene change detection.
        public let sceneChangeDetect: H265SceneChangeDetect?
        /// Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures.
        /// This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
        public let slices: Int?
        /// H.265 Tier.
        public let tier: H265Tier?
        /// Determines how timecodes should be inserted into the video elementary stream.
        /// - 'disabled': Do not include timecodes
        /// - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
        public let timecodeInsertion: H265TimecodeInsertionBehavior?

        public init(adaptiveQuantization: H265AdaptiveQuantization? = nil, afdSignaling: AfdSignaling? = nil, alternativeTransferFunction: H265AlternativeTransferFunction? = nil, bitrate: Int? = nil, bufSize: Int? = nil, colorMetadata: H265ColorMetadata? = nil, colorSpaceSettings: H265ColorSpaceSettings? = nil, fixedAfd: FixedAfd? = nil, flickerAq: H265FlickerAq? = nil, framerateDenominator: Int, framerateNumerator: Int, gopClosedCadence: Int? = nil, gopSize: Double? = nil, gopSizeUnits: H265GopSizeUnits? = nil, level: H265Level? = nil, lookAheadRateControl: H265LookAheadRateControl? = nil, maxBitrate: Int? = nil, minIInterval: Int? = nil, parDenominator: Int? = nil, parNumerator: Int? = nil, profile: H265Profile? = nil, qvbrQualityLevel: Int? = nil, rateControlMode: H265RateControlMode? = nil, scanType: H265ScanType? = nil, sceneChangeDetect: H265SceneChangeDetect? = nil, slices: Int? = nil, tier: H265Tier? = nil, timecodeInsertion: H265TimecodeInsertionBehavior? = nil) {
            self.adaptiveQuantization = adaptiveQuantization
            self.afdSignaling = afdSignaling
            self.alternativeTransferFunction = alternativeTransferFunction
            self.bitrate = bitrate
            self.bufSize = bufSize
            self.colorMetadata = colorMetadata
            self.colorSpaceSettings = colorSpaceSettings
            self.fixedAfd = fixedAfd
            self.flickerAq = flickerAq
            self.framerateDenominator = framerateDenominator
            self.framerateNumerator = framerateNumerator
            self.gopClosedCadence = gopClosedCadence
            self.gopSize = gopSize
            self.gopSizeUnits = gopSizeUnits
            self.level = level
            self.lookAheadRateControl = lookAheadRateControl
            self.maxBitrate = maxBitrate
            self.minIInterval = minIInterval
            self.parDenominator = parDenominator
            self.parNumerator = parNumerator
            self.profile = profile
            self.qvbrQualityLevel = qvbrQualityLevel
            self.rateControlMode = rateControlMode
            self.scanType = scanType
            self.sceneChangeDetect = sceneChangeDetect
            self.slices = slices
            self.tier = tier
            self.timecodeInsertion = timecodeInsertion
        }

        public func validate(name: String) throws {
            try validate(self.bitrate, name:"bitrate", parent: name, max: 40000000)
            try validate(self.bitrate, name:"bitrate", parent: name, min: 100000)
            try validate(self.bufSize, name:"bufSize", parent: name, max: 80000000)
            try validate(self.bufSize, name:"bufSize", parent: name, min: 100000)
            try self.colorSpaceSettings?.validate(name: "\(name).colorSpaceSettings")
            try validate(self.framerateDenominator, name:"framerateDenominator", parent: name, max: 3003)
            try validate(self.framerateDenominator, name:"framerateDenominator", parent: name, min: 1)
            try validate(self.framerateNumerator, name:"framerateNumerator", parent: name, min: 1)
            try validate(self.gopClosedCadence, name:"gopClosedCadence", parent: name, min: 0)
            try validate(self.maxBitrate, name:"maxBitrate", parent: name, max: 40000000)
            try validate(self.maxBitrate, name:"maxBitrate", parent: name, min: 100000)
            try validate(self.minIInterval, name:"minIInterval", parent: name, max: 30)
            try validate(self.minIInterval, name:"minIInterval", parent: name, min: 0)
            try validate(self.parDenominator, name:"parDenominator", parent: name, min: 1)
            try validate(self.parNumerator, name:"parNumerator", parent: name, min: 1)
            try validate(self.qvbrQualityLevel, name:"qvbrQualityLevel", parent: name, max: 10)
            try validate(self.qvbrQualityLevel, name:"qvbrQualityLevel", parent: name, min: 1)
            try validate(self.slices, name:"slices", parent: name, max: 16)
            try validate(self.slices, name:"slices", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case adaptiveQuantization = "adaptiveQuantization"
            case afdSignaling = "afdSignaling"
            case alternativeTransferFunction = "alternativeTransferFunction"
            case bitrate = "bitrate"
            case bufSize = "bufSize"
            case colorMetadata = "colorMetadata"
            case colorSpaceSettings = "colorSpaceSettings"
            case fixedAfd = "fixedAfd"
            case flickerAq = "flickerAq"
            case framerateDenominator = "framerateDenominator"
            case framerateNumerator = "framerateNumerator"
            case gopClosedCadence = "gopClosedCadence"
            case gopSize = "gopSize"
            case gopSizeUnits = "gopSizeUnits"
            case level = "level"
            case lookAheadRateControl = "lookAheadRateControl"
            case maxBitrate = "maxBitrate"
            case minIInterval = "minIInterval"
            case parDenominator = "parDenominator"
            case parNumerator = "parNumerator"
            case profile = "profile"
            case qvbrQualityLevel = "qvbrQualityLevel"
            case rateControlMode = "rateControlMode"
            case scanType = "scanType"
            case sceneChangeDetect = "sceneChangeDetect"
            case slices = "slices"
            case tier = "tier"
            case timecodeInsertion = "timecodeInsertion"
        }
    }

    public struct Hdr10Settings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxCll", location: .body(locationName: "maxCll"), required: false, type: .integer), 
            AWSShapeMember(label: "MaxFall", location: .body(locationName: "maxFall"), required: false, type: .integer)
        ]

        /// Maximum Content Light Level
        /// An integer metadata value defining the maximum light level, in nits,
        /// of any single pixel within an encoded HDR video stream or file.
        public let maxCll: Int?
        /// Maximum Frame Average Light Level
        /// An integer metadata value defining the maximum average light level, in nits,
        /// for any single frame within an encoded HDR video stream or file.
        public let maxFall: Int?

        public init(maxCll: Int? = nil, maxFall: Int? = nil) {
            self.maxCll = maxCll
            self.maxFall = maxFall
        }

        public func validate(name: String) throws {
            try validate(self.maxCll, name:"maxCll", parent: name, max: 32768)
            try validate(self.maxCll, name:"maxCll", parent: name, min: 0)
            try validate(self.maxFall, name:"maxFall", parent: name, max: 32768)
            try validate(self.maxFall, name:"maxFall", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case maxCll = "maxCll"
            case maxFall = "maxFall"
        }
    }

    public struct HlsAkamaiSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionRetryInterval", location: .body(locationName: "connectionRetryInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "FilecacheDuration", location: .body(locationName: "filecacheDuration"), required: false, type: .integer), 
            AWSShapeMember(label: "HttpTransferMode", location: .body(locationName: "httpTransferMode"), required: false, type: .enum), 
            AWSShapeMember(label: "NumRetries", location: .body(locationName: "numRetries"), required: false, type: .integer), 
            AWSShapeMember(label: "RestartDelay", location: .body(locationName: "restartDelay"), required: false, type: .integer), 
            AWSShapeMember(label: "Salt", location: .body(locationName: "salt"), required: false, type: .string), 
            AWSShapeMember(label: "Token", location: .body(locationName: "token"), required: false, type: .string)
        ]

        /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
        public let connectionRetryInterval: Int?
        /// Size in seconds of file cache for streaming outputs.
        public let filecacheDuration: Int?
        /// Specify whether or not to use chunked transfer encoding to Akamai. User should contact Akamai to enable this feature.
        public let httpTransferMode: HlsAkamaiHttpTransferMode?
        /// Number of retry attempts that will be made before the Live Event is put into an error state.
        public let numRetries: Int?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public let restartDelay: Int?
        /// Salt for authenticated Akamai.
        public let salt: String?
        /// Token parameter for authenticated akamai. If not specified, _gda_ is used.
        public let token: String?

        public init(connectionRetryInterval: Int? = nil, filecacheDuration: Int? = nil, httpTransferMode: HlsAkamaiHttpTransferMode? = nil, numRetries: Int? = nil, restartDelay: Int? = nil, salt: String? = nil, token: String? = nil) {
            self.connectionRetryInterval = connectionRetryInterval
            self.filecacheDuration = filecacheDuration
            self.httpTransferMode = httpTransferMode
            self.numRetries = numRetries
            self.restartDelay = restartDelay
            self.salt = salt
            self.token = token
        }

        public func validate(name: String) throws {
            try validate(self.connectionRetryInterval, name:"connectionRetryInterval", parent: name, min: 0)
            try validate(self.filecacheDuration, name:"filecacheDuration", parent: name, max: 600)
            try validate(self.filecacheDuration, name:"filecacheDuration", parent: name, min: 0)
            try validate(self.numRetries, name:"numRetries", parent: name, min: 0)
            try validate(self.restartDelay, name:"restartDelay", parent: name, max: 15)
            try validate(self.restartDelay, name:"restartDelay", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case connectionRetryInterval = "connectionRetryInterval"
            case filecacheDuration = "filecacheDuration"
            case httpTransferMode = "httpTransferMode"
            case numRetries = "numRetries"
            case restartDelay = "restartDelay"
            case salt = "salt"
            case token = "token"
        }
    }

    public struct HlsBasicPutSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionRetryInterval", location: .body(locationName: "connectionRetryInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "FilecacheDuration", location: .body(locationName: "filecacheDuration"), required: false, type: .integer), 
            AWSShapeMember(label: "NumRetries", location: .body(locationName: "numRetries"), required: false, type: .integer), 
            AWSShapeMember(label: "RestartDelay", location: .body(locationName: "restartDelay"), required: false, type: .integer)
        ]

        /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
        public let connectionRetryInterval: Int?
        /// Size in seconds of file cache for streaming outputs.
        public let filecacheDuration: Int?
        /// Number of retry attempts that will be made before the Live Event is put into an error state.
        public let numRetries: Int?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public let restartDelay: Int?

        public init(connectionRetryInterval: Int? = nil, filecacheDuration: Int? = nil, numRetries: Int? = nil, restartDelay: Int? = nil) {
            self.connectionRetryInterval = connectionRetryInterval
            self.filecacheDuration = filecacheDuration
            self.numRetries = numRetries
            self.restartDelay = restartDelay
        }

        public func validate(name: String) throws {
            try validate(self.connectionRetryInterval, name:"connectionRetryInterval", parent: name, min: 0)
            try validate(self.filecacheDuration, name:"filecacheDuration", parent: name, max: 600)
            try validate(self.filecacheDuration, name:"filecacheDuration", parent: name, min: 0)
            try validate(self.numRetries, name:"numRetries", parent: name, min: 0)
            try validate(self.restartDelay, name:"restartDelay", parent: name, max: 15)
            try validate(self.restartDelay, name:"restartDelay", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case connectionRetryInterval = "connectionRetryInterval"
            case filecacheDuration = "filecacheDuration"
            case numRetries = "numRetries"
            case restartDelay = "restartDelay"
        }
    }

    public struct HlsCdnSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HlsAkamaiSettings", location: .body(locationName: "hlsAkamaiSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "HlsBasicPutSettings", location: .body(locationName: "hlsBasicPutSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "HlsMediaStoreSettings", location: .body(locationName: "hlsMediaStoreSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "HlsWebdavSettings", location: .body(locationName: "hlsWebdavSettings"), required: false, type: .structure)
        ]

        public let hlsAkamaiSettings: HlsAkamaiSettings?
        public let hlsBasicPutSettings: HlsBasicPutSettings?
        public let hlsMediaStoreSettings: HlsMediaStoreSettings?
        public let hlsWebdavSettings: HlsWebdavSettings?

        public init(hlsAkamaiSettings: HlsAkamaiSettings? = nil, hlsBasicPutSettings: HlsBasicPutSettings? = nil, hlsMediaStoreSettings: HlsMediaStoreSettings? = nil, hlsWebdavSettings: HlsWebdavSettings? = nil) {
            self.hlsAkamaiSettings = hlsAkamaiSettings
            self.hlsBasicPutSettings = hlsBasicPutSettings
            self.hlsMediaStoreSettings = hlsMediaStoreSettings
            self.hlsWebdavSettings = hlsWebdavSettings
        }

        public func validate(name: String) throws {
            try self.hlsAkamaiSettings?.validate(name: "\(name).hlsAkamaiSettings")
            try self.hlsBasicPutSettings?.validate(name: "\(name).hlsBasicPutSettings")
            try self.hlsMediaStoreSettings?.validate(name: "\(name).hlsMediaStoreSettings")
            try self.hlsWebdavSettings?.validate(name: "\(name).hlsWebdavSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case hlsAkamaiSettings = "hlsAkamaiSettings"
            case hlsBasicPutSettings = "hlsBasicPutSettings"
            case hlsMediaStoreSettings = "hlsMediaStoreSettings"
            case hlsWebdavSettings = "hlsWebdavSettings"
        }
    }

    public struct HlsGroupSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdMarkers", location: .body(locationName: "adMarkers"), required: false, type: .list), 
            AWSShapeMember(label: "BaseUrlContent", location: .body(locationName: "baseUrlContent"), required: false, type: .string), 
            AWSShapeMember(label: "BaseUrlContent1", location: .body(locationName: "baseUrlContent1"), required: false, type: .string), 
            AWSShapeMember(label: "BaseUrlManifest", location: .body(locationName: "baseUrlManifest"), required: false, type: .string), 
            AWSShapeMember(label: "BaseUrlManifest1", location: .body(locationName: "baseUrlManifest1"), required: false, type: .string), 
            AWSShapeMember(label: "CaptionLanguageMappings", location: .body(locationName: "captionLanguageMappings"), required: false, type: .list), 
            AWSShapeMember(label: "CaptionLanguageSetting", location: .body(locationName: "captionLanguageSetting"), required: false, type: .enum), 
            AWSShapeMember(label: "ClientCache", location: .body(locationName: "clientCache"), required: false, type: .enum), 
            AWSShapeMember(label: "CodecSpecification", location: .body(locationName: "codecSpecification"), required: false, type: .enum), 
            AWSShapeMember(label: "ConstantIv", location: .body(locationName: "constantIv"), required: false, type: .string), 
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryStructure", location: .body(locationName: "directoryStructure"), required: false, type: .enum), 
            AWSShapeMember(label: "EncryptionType", location: .body(locationName: "encryptionType"), required: false, type: .enum), 
            AWSShapeMember(label: "HlsCdnSettings", location: .body(locationName: "hlsCdnSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "HlsId3SegmentTagging", location: .body(locationName: "hlsId3SegmentTagging"), required: false, type: .enum), 
            AWSShapeMember(label: "IFrameOnlyPlaylists", location: .body(locationName: "iFrameOnlyPlaylists"), required: false, type: .enum), 
            AWSShapeMember(label: "IndexNSegments", location: .body(locationName: "indexNSegments"), required: false, type: .integer), 
            AWSShapeMember(label: "InputLossAction", location: .body(locationName: "inputLossAction"), required: false, type: .enum), 
            AWSShapeMember(label: "IvInManifest", location: .body(locationName: "ivInManifest"), required: false, type: .enum), 
            AWSShapeMember(label: "IvSource", location: .body(locationName: "ivSource"), required: false, type: .enum), 
            AWSShapeMember(label: "KeepSegments", location: .body(locationName: "keepSegments"), required: false, type: .integer), 
            AWSShapeMember(label: "KeyFormat", location: .body(locationName: "keyFormat"), required: false, type: .string), 
            AWSShapeMember(label: "KeyFormatVersions", location: .body(locationName: "keyFormatVersions"), required: false, type: .string), 
            AWSShapeMember(label: "KeyProviderSettings", location: .body(locationName: "keyProviderSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ManifestCompression", location: .body(locationName: "manifestCompression"), required: false, type: .enum), 
            AWSShapeMember(label: "ManifestDurationFormat", location: .body(locationName: "manifestDurationFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "MinSegmentLength", location: .body(locationName: "minSegmentLength"), required: false, type: .integer), 
            AWSShapeMember(label: "Mode", location: .body(locationName: "mode"), required: false, type: .enum), 
            AWSShapeMember(label: "OutputSelection", location: .body(locationName: "outputSelection"), required: false, type: .enum), 
            AWSShapeMember(label: "ProgramDateTime", location: .body(locationName: "programDateTime"), required: false, type: .enum), 
            AWSShapeMember(label: "ProgramDateTimePeriod", location: .body(locationName: "programDateTimePeriod"), required: false, type: .integer), 
            AWSShapeMember(label: "RedundantManifest", location: .body(locationName: "redundantManifest"), required: false, type: .enum), 
            AWSShapeMember(label: "SegmentationMode", location: .body(locationName: "segmentationMode"), required: false, type: .enum), 
            AWSShapeMember(label: "SegmentLength", location: .body(locationName: "segmentLength"), required: false, type: .integer), 
            AWSShapeMember(label: "SegmentsPerSubdirectory", location: .body(locationName: "segmentsPerSubdirectory"), required: false, type: .integer), 
            AWSShapeMember(label: "StreamInfResolution", location: .body(locationName: "streamInfResolution"), required: false, type: .enum), 
            AWSShapeMember(label: "TimedMetadataId3Frame", location: .body(locationName: "timedMetadataId3Frame"), required: false, type: .enum), 
            AWSShapeMember(label: "TimedMetadataId3Period", location: .body(locationName: "timedMetadataId3Period"), required: false, type: .integer), 
            AWSShapeMember(label: "TimestampDeltaMilliseconds", location: .body(locationName: "timestampDeltaMilliseconds"), required: false, type: .integer), 
            AWSShapeMember(label: "TsFileMode", location: .body(locationName: "tsFileMode"), required: false, type: .enum)
        ]

        /// Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
        public let adMarkers: [HlsAdMarkers]?
        /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
        public let baseUrlContent: String?
        /// Optional. One value per output group.
        /// This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
        public let baseUrlContent1: String?
        /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
        public let baseUrlManifest: String?
        /// Optional. One value per output group.
        /// Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
        public let baseUrlManifest1: String?
        /// Mapping of up to 4 caption channels to caption languages.  Is only meaningful if captionLanguageSetting is set to "insert".
        public let captionLanguageMappings: [CaptionLanguageMapping]?
        /// Applies only to 608 Embedded output captions.
        /// insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions.
        /// none: Include CLOSED-CAPTIONS=NONE line in the manifest.
        /// omit: Omit any CLOSED-CAPTIONS line from the manifest.
        public let captionLanguageSetting: HlsCaptionLanguageSetting?
        /// When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
        public let clientCache: HlsClientCache?
        /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
        public let codecSpecification: HlsCodecSpecification?
        /// For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
        public let constantIv: String?
        /// A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
        public let destination: OutputLocationRef
        /// Place segments in subdirectories.
        public let directoryStructure: HlsDirectoryStructure?
        /// Encrypts the segments with the given encryption scheme.  Exclude this parameter if no encryption is desired.
        public let encryptionType: HlsEncryptionType?
        /// Parameters that control interactions with the CDN.
        public let hlsCdnSettings: HlsCdnSettings?
        /// State of HLS ID3 Segment Tagging
        public let hlsId3SegmentTagging: HlsId3SegmentTaggingState?
        /// DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field).
        /// STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
        public let iFrameOnlyPlaylists: IFrameOnlyPlaylistType?
        /// Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be less than or equal to the Keep Segments field.
        public let indexNSegments: Int?
        /// Parameter that control output group behavior on input loss.
        public let inputLossAction: InputLossActionForHlsOut?
        /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
        public let ivInManifest: HlsIvInManifest?
        /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
        public let ivSource: HlsIvSource?
        /// Applies only if Mode field is LIVE. Specifies the number of media segments (.ts files) to retain in the destination directory.
        public let keepSegments: Int?
        /// The value specifies how the key is represented in the resource identified by the URI.  If parameter is absent, an implicit value of "identity" is used.  A reverse DNS string can also be given.
        public let keyFormat: String?
        /// Either a single positive integer version value or a slash delimited list of version values (1/2/3).
        public let keyFormatVersions: String?
        /// The key provider settings.
        public let keyProviderSettings: KeyProviderSettings?
        /// When set to gzip, compresses HLS playlist.
        public let manifestCompression: HlsManifestCompression?
        /// Indicates whether the output manifest should use floating point or integer values for segment duration.
        public let manifestDurationFormat: HlsManifestDurationFormat?
        /// When set, minimumSegmentLength is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
        public let minSegmentLength: Int?
        /// If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event.
        /// VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
        public let mode: HlsMode?
        /// MANIFESTSANDSEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group.
        /// VARIANTMANIFESTSANDSEGMENTS: Generates media manifests for this output group, but not a master manifest.
        /// SEGMENTSONLY: Does not generate any manifests for this output group.
        public let outputSelection: HlsOutputSelection?
        /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestampOffset.
        public let programDateTime: HlsProgramDateTime?
        /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
        public let programDateTimePeriod: Int?
        /// ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines.
        /// DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only.
        /// For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
        public let redundantManifest: HlsRedundantManifest?
        /// useInputSegmentation has been deprecated. The configured segment size is always used.
        public let segmentationMode: HlsSegmentationMode?
        /// Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.
        public let segmentLength: Int?
        /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
        public let segmentsPerSubdirectory: Int?
        /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
        public let streamInfResolution: HlsStreamInfResolution?
        /// Indicates ID3 frame that has the timecode.
        public let timedMetadataId3Frame: HlsTimedMetadataId3Frame?
        /// Timed Metadata interval in seconds.
        public let timedMetadataId3Period: Int?
        /// Provides an extra millisecond delta offset to fine tune the timestamps.
        public let timestampDeltaMilliseconds: Int?
        /// SEGMENTEDFILES: Emit the program as segments - multiple .ts media files.
        /// SINGLEFILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
        public let tsFileMode: HlsTsFileMode?

        public init(adMarkers: [HlsAdMarkers]? = nil, baseUrlContent: String? = nil, baseUrlContent1: String? = nil, baseUrlManifest: String? = nil, baseUrlManifest1: String? = nil, captionLanguageMappings: [CaptionLanguageMapping]? = nil, captionLanguageSetting: HlsCaptionLanguageSetting? = nil, clientCache: HlsClientCache? = nil, codecSpecification: HlsCodecSpecification? = nil, constantIv: String? = nil, destination: OutputLocationRef, directoryStructure: HlsDirectoryStructure? = nil, encryptionType: HlsEncryptionType? = nil, hlsCdnSettings: HlsCdnSettings? = nil, hlsId3SegmentTagging: HlsId3SegmentTaggingState? = nil, iFrameOnlyPlaylists: IFrameOnlyPlaylistType? = nil, indexNSegments: Int? = nil, inputLossAction: InputLossActionForHlsOut? = nil, ivInManifest: HlsIvInManifest? = nil, ivSource: HlsIvSource? = nil, keepSegments: Int? = nil, keyFormat: String? = nil, keyFormatVersions: String? = nil, keyProviderSettings: KeyProviderSettings? = nil, manifestCompression: HlsManifestCompression? = nil, manifestDurationFormat: HlsManifestDurationFormat? = nil, minSegmentLength: Int? = nil, mode: HlsMode? = nil, outputSelection: HlsOutputSelection? = nil, programDateTime: HlsProgramDateTime? = nil, programDateTimePeriod: Int? = nil, redundantManifest: HlsRedundantManifest? = nil, segmentationMode: HlsSegmentationMode? = nil, segmentLength: Int? = nil, segmentsPerSubdirectory: Int? = nil, streamInfResolution: HlsStreamInfResolution? = nil, timedMetadataId3Frame: HlsTimedMetadataId3Frame? = nil, timedMetadataId3Period: Int? = nil, timestampDeltaMilliseconds: Int? = nil, tsFileMode: HlsTsFileMode? = nil) {
            self.adMarkers = adMarkers
            self.baseUrlContent = baseUrlContent
            self.baseUrlContent1 = baseUrlContent1
            self.baseUrlManifest = baseUrlManifest
            self.baseUrlManifest1 = baseUrlManifest1
            self.captionLanguageMappings = captionLanguageMappings
            self.captionLanguageSetting = captionLanguageSetting
            self.clientCache = clientCache
            self.codecSpecification = codecSpecification
            self.constantIv = constantIv
            self.destination = destination
            self.directoryStructure = directoryStructure
            self.encryptionType = encryptionType
            self.hlsCdnSettings = hlsCdnSettings
            self.hlsId3SegmentTagging = hlsId3SegmentTagging
            self.iFrameOnlyPlaylists = iFrameOnlyPlaylists
            self.indexNSegments = indexNSegments
            self.inputLossAction = inputLossAction
            self.ivInManifest = ivInManifest
            self.ivSource = ivSource
            self.keepSegments = keepSegments
            self.keyFormat = keyFormat
            self.keyFormatVersions = keyFormatVersions
            self.keyProviderSettings = keyProviderSettings
            self.manifestCompression = manifestCompression
            self.manifestDurationFormat = manifestDurationFormat
            self.minSegmentLength = minSegmentLength
            self.mode = mode
            self.outputSelection = outputSelection
            self.programDateTime = programDateTime
            self.programDateTimePeriod = programDateTimePeriod
            self.redundantManifest = redundantManifest
            self.segmentationMode = segmentationMode
            self.segmentLength = segmentLength
            self.segmentsPerSubdirectory = segmentsPerSubdirectory
            self.streamInfResolution = streamInfResolution
            self.timedMetadataId3Frame = timedMetadataId3Frame
            self.timedMetadataId3Period = timedMetadataId3Period
            self.timestampDeltaMilliseconds = timestampDeltaMilliseconds
            self.tsFileMode = tsFileMode
        }

        public func validate(name: String) throws {
            try self.captionLanguageMappings?.forEach {
                try $0.validate(name: "\(name).captionLanguageMappings[]")
            }
            try validate(self.constantIv, name:"constantIv", parent: name, max: 32)
            try validate(self.constantIv, name:"constantIv", parent: name, min: 32)
            try self.hlsCdnSettings?.validate(name: "\(name).hlsCdnSettings")
            try validate(self.indexNSegments, name:"indexNSegments", parent: name, min: 3)
            try validate(self.keepSegments, name:"keepSegments", parent: name, min: 1)
            try self.keyProviderSettings?.validate(name: "\(name).keyProviderSettings")
            try validate(self.minSegmentLength, name:"minSegmentLength", parent: name, min: 0)
            try validate(self.programDateTimePeriod, name:"programDateTimePeriod", parent: name, max: 3600)
            try validate(self.programDateTimePeriod, name:"programDateTimePeriod", parent: name, min: 0)
            try validate(self.segmentLength, name:"segmentLength", parent: name, min: 1)
            try validate(self.segmentsPerSubdirectory, name:"segmentsPerSubdirectory", parent: name, min: 1)
            try validate(self.timedMetadataId3Period, name:"timedMetadataId3Period", parent: name, min: 0)
            try validate(self.timestampDeltaMilliseconds, name:"timestampDeltaMilliseconds", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case adMarkers = "adMarkers"
            case baseUrlContent = "baseUrlContent"
            case baseUrlContent1 = "baseUrlContent1"
            case baseUrlManifest = "baseUrlManifest"
            case baseUrlManifest1 = "baseUrlManifest1"
            case captionLanguageMappings = "captionLanguageMappings"
            case captionLanguageSetting = "captionLanguageSetting"
            case clientCache = "clientCache"
            case codecSpecification = "codecSpecification"
            case constantIv = "constantIv"
            case destination = "destination"
            case directoryStructure = "directoryStructure"
            case encryptionType = "encryptionType"
            case hlsCdnSettings = "hlsCdnSettings"
            case hlsId3SegmentTagging = "hlsId3SegmentTagging"
            case iFrameOnlyPlaylists = "iFrameOnlyPlaylists"
            case indexNSegments = "indexNSegments"
            case inputLossAction = "inputLossAction"
            case ivInManifest = "ivInManifest"
            case ivSource = "ivSource"
            case keepSegments = "keepSegments"
            case keyFormat = "keyFormat"
            case keyFormatVersions = "keyFormatVersions"
            case keyProviderSettings = "keyProviderSettings"
            case manifestCompression = "manifestCompression"
            case manifestDurationFormat = "manifestDurationFormat"
            case minSegmentLength = "minSegmentLength"
            case mode = "mode"
            case outputSelection = "outputSelection"
            case programDateTime = "programDateTime"
            case programDateTimePeriod = "programDateTimePeriod"
            case redundantManifest = "redundantManifest"
            case segmentationMode = "segmentationMode"
            case segmentLength = "segmentLength"
            case segmentsPerSubdirectory = "segmentsPerSubdirectory"
            case streamInfResolution = "streamInfResolution"
            case timedMetadataId3Frame = "timedMetadataId3Frame"
            case timedMetadataId3Period = "timedMetadataId3Period"
            case timestampDeltaMilliseconds = "timestampDeltaMilliseconds"
            case tsFileMode = "tsFileMode"
        }
    }

    public struct HlsId3SegmentTaggingScheduleActionSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", location: .body(locationName: "tag"), required: true, type: .string)
        ]

        /// ID3 tag to insert into each segment. Supports special keyword identifiers to substitute in segment-related values.\nSupported keyword identifiers: https://docs.aws.amazon.com/medialive/latest/ug/variable-data-identifiers.html
        public let tag: String

        public init(tag: String) {
            self.tag = tag
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "tag"
        }
    }

    public struct HlsInputSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bandwidth", location: .body(locationName: "bandwidth"), required: false, type: .integer), 
            AWSShapeMember(label: "BufferSegments", location: .body(locationName: "bufferSegments"), required: false, type: .integer), 
            AWSShapeMember(label: "Retries", location: .body(locationName: "retries"), required: false, type: .integer), 
            AWSShapeMember(label: "RetryInterval", location: .body(locationName: "retryInterval"), required: false, type: .integer)
        ]

        /// When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen.  The bitrate is specified in bits per second, as in an HLS manifest.
        public let bandwidth: Int?
        /// When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment).  When not specified, the HLS input will begin with the first segment specified in the m3u8.
        public let bufferSegments: Int?
        /// The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
        public let retries: Int?
        /// The number of seconds between retries when an attempt to read a manifest or segment fails.
        public let retryInterval: Int?

        public init(bandwidth: Int? = nil, bufferSegments: Int? = nil, retries: Int? = nil, retryInterval: Int? = nil) {
            self.bandwidth = bandwidth
            self.bufferSegments = bufferSegments
            self.retries = retries
            self.retryInterval = retryInterval
        }

        public func validate(name: String) throws {
            try validate(self.bandwidth, name:"bandwidth", parent: name, min: 0)
            try validate(self.bufferSegments, name:"bufferSegments", parent: name, min: 0)
            try validate(self.retries, name:"retries", parent: name, min: 0)
            try validate(self.retryInterval, name:"retryInterval", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case bandwidth = "bandwidth"
            case bufferSegments = "bufferSegments"
            case retries = "retries"
            case retryInterval = "retryInterval"
        }
    }

    public struct HlsMediaStoreSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionRetryInterval", location: .body(locationName: "connectionRetryInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "FilecacheDuration", location: .body(locationName: "filecacheDuration"), required: false, type: .integer), 
            AWSShapeMember(label: "MediaStoreStorageClass", location: .body(locationName: "mediaStoreStorageClass"), required: false, type: .enum), 
            AWSShapeMember(label: "NumRetries", location: .body(locationName: "numRetries"), required: false, type: .integer), 
            AWSShapeMember(label: "RestartDelay", location: .body(locationName: "restartDelay"), required: false, type: .integer)
        ]

        /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
        public let connectionRetryInterval: Int?
        /// Size in seconds of file cache for streaming outputs.
        public let filecacheDuration: Int?
        /// When set to temporal, output files are stored in non-persistent memory for faster reading and writing.
        public let mediaStoreStorageClass: HlsMediaStoreStorageClass?
        /// Number of retry attempts that will be made before the Live Event is put into an error state.
        public let numRetries: Int?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public let restartDelay: Int?

        public init(connectionRetryInterval: Int? = nil, filecacheDuration: Int? = nil, mediaStoreStorageClass: HlsMediaStoreStorageClass? = nil, numRetries: Int? = nil, restartDelay: Int? = nil) {
            self.connectionRetryInterval = connectionRetryInterval
            self.filecacheDuration = filecacheDuration
            self.mediaStoreStorageClass = mediaStoreStorageClass
            self.numRetries = numRetries
            self.restartDelay = restartDelay
        }

        public func validate(name: String) throws {
            try validate(self.connectionRetryInterval, name:"connectionRetryInterval", parent: name, min: 0)
            try validate(self.filecacheDuration, name:"filecacheDuration", parent: name, max: 600)
            try validate(self.filecacheDuration, name:"filecacheDuration", parent: name, min: 0)
            try validate(self.numRetries, name:"numRetries", parent: name, min: 0)
            try validate(self.restartDelay, name:"restartDelay", parent: name, max: 15)
            try validate(self.restartDelay, name:"restartDelay", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case connectionRetryInterval = "connectionRetryInterval"
            case filecacheDuration = "filecacheDuration"
            case mediaStoreStorageClass = "mediaStoreStorageClass"
            case numRetries = "numRetries"
            case restartDelay = "restartDelay"
        }
    }

    public struct HlsOutputSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "H265PackagingType", location: .body(locationName: "h265PackagingType"), required: false, type: .enum), 
            AWSShapeMember(label: "HlsSettings", location: .body(locationName: "hlsSettings"), required: true, type: .structure), 
            AWSShapeMember(label: "NameModifier", location: .body(locationName: "nameModifier"), required: false, type: .string), 
            AWSShapeMember(label: "SegmentModifier", location: .body(locationName: "segmentModifier"), required: false, type: .string)
        ]

        /// Only applicable when this output is referencing an H.265 video description.
        /// Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
        public let h265PackagingType: HlsH265PackagingType?
        /// Settings regarding the underlying stream. These settings are different for audio-only outputs.
        public let hlsSettings: HlsSettings
        /// String concatenated to the end of the destination filename. Accepts \"Format Identifiers\":#formatIdentifierParameters.
        public let nameModifier: String?
        /// String concatenated to end of segment filenames.
        public let segmentModifier: String?

        public init(h265PackagingType: HlsH265PackagingType? = nil, hlsSettings: HlsSettings, nameModifier: String? = nil, segmentModifier: String? = nil) {
            self.h265PackagingType = h265PackagingType
            self.hlsSettings = hlsSettings
            self.nameModifier = nameModifier
            self.segmentModifier = segmentModifier
        }

        public func validate(name: String) throws {
            try self.hlsSettings.validate(name: "\(name).hlsSettings")
            try validate(self.nameModifier, name:"nameModifier", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case h265PackagingType = "h265PackagingType"
            case hlsSettings = "hlsSettings"
            case nameModifier = "nameModifier"
            case segmentModifier = "segmentModifier"
        }
    }

    public struct HlsSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AudioOnlyHlsSettings", location: .body(locationName: "audioOnlyHlsSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Fmp4HlsSettings", location: .body(locationName: "fmp4HlsSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "StandardHlsSettings", location: .body(locationName: "standardHlsSettings"), required: false, type: .structure)
        ]

        public let audioOnlyHlsSettings: AudioOnlyHlsSettings?
        public let fmp4HlsSettings: Fmp4HlsSettings?
        public let standardHlsSettings: StandardHlsSettings?

        public init(audioOnlyHlsSettings: AudioOnlyHlsSettings? = nil, fmp4HlsSettings: Fmp4HlsSettings? = nil, standardHlsSettings: StandardHlsSettings? = nil) {
            self.audioOnlyHlsSettings = audioOnlyHlsSettings
            self.fmp4HlsSettings = fmp4HlsSettings
            self.standardHlsSettings = standardHlsSettings
        }

        public func validate(name: String) throws {
            try self.standardHlsSettings?.validate(name: "\(name).standardHlsSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case audioOnlyHlsSettings = "audioOnlyHlsSettings"
            case fmp4HlsSettings = "fmp4HlsSettings"
            case standardHlsSettings = "standardHlsSettings"
        }
    }

    public struct HlsTimedMetadataScheduleActionSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id3", location: .body(locationName: "id3"), required: true, type: .string)
        ]

        /// Base64 string formatted according to the ID3 specification: http://id3.org/id3v2.4.0-structure
        public let id3: String

        public init(id3: String) {
            self.id3 = id3
        }

        private enum CodingKeys: String, CodingKey {
            case id3 = "id3"
        }
    }

    public struct HlsWebdavSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionRetryInterval", location: .body(locationName: "connectionRetryInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "FilecacheDuration", location: .body(locationName: "filecacheDuration"), required: false, type: .integer), 
            AWSShapeMember(label: "HttpTransferMode", location: .body(locationName: "httpTransferMode"), required: false, type: .enum), 
            AWSShapeMember(label: "NumRetries", location: .body(locationName: "numRetries"), required: false, type: .integer), 
            AWSShapeMember(label: "RestartDelay", location: .body(locationName: "restartDelay"), required: false, type: .integer)
        ]

        /// Number of seconds to wait before retrying connection to the CDN if the connection is lost.
        public let connectionRetryInterval: Int?
        /// Size in seconds of file cache for streaming outputs.
        public let filecacheDuration: Int?
        /// Specify whether or not to use chunked transfer encoding to WebDAV.
        public let httpTransferMode: HlsWebdavHttpTransferMode?
        /// Number of retry attempts that will be made before the Live Event is put into an error state.
        public let numRetries: Int?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public let restartDelay: Int?

        public init(connectionRetryInterval: Int? = nil, filecacheDuration: Int? = nil, httpTransferMode: HlsWebdavHttpTransferMode? = nil, numRetries: Int? = nil, restartDelay: Int? = nil) {
            self.connectionRetryInterval = connectionRetryInterval
            self.filecacheDuration = filecacheDuration
            self.httpTransferMode = httpTransferMode
            self.numRetries = numRetries
            self.restartDelay = restartDelay
        }

        public func validate(name: String) throws {
            try validate(self.connectionRetryInterval, name:"connectionRetryInterval", parent: name, min: 0)
            try validate(self.filecacheDuration, name:"filecacheDuration", parent: name, max: 600)
            try validate(self.filecacheDuration, name:"filecacheDuration", parent: name, min: 0)
            try validate(self.numRetries, name:"numRetries", parent: name, min: 0)
            try validate(self.restartDelay, name:"restartDelay", parent: name, max: 15)
            try validate(self.restartDelay, name:"restartDelay", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case connectionRetryInterval = "connectionRetryInterval"
            case filecacheDuration = "filecacheDuration"
            case httpTransferMode = "httpTransferMode"
            case numRetries = "numRetries"
            case restartDelay = "restartDelay"
        }
    }

    public struct ImmediateModeScheduleActionStartSettings: AWSShape {


        public init() {
        }

    }

    public struct Input: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "AttachedChannels", location: .body(locationName: "attachedChannels"), required: false, type: .list), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "InputClass", location: .body(locationName: "inputClass"), required: false, type: .enum), 
            AWSShapeMember(label: "InputSourceType", location: .body(locationName: "inputSourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "MediaConnectFlows", location: .body(locationName: "mediaConnectFlows"), required: false, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "securityGroups"), required: false, type: .list), 
            AWSShapeMember(label: "Sources", location: .body(locationName: "sources"), required: false, type: .list), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum)
        ]

        /// The Unique ARN of the input (generated, immutable).
        public let arn: String?
        /// A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
        public let attachedChannels: [String]?
        /// A list of the destinations of the input (PUSH-type).
        public let destinations: [InputDestination]?
        /// The generated ID of the input (unique for user account, immutable).
        public let id: String?
        /// STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails.
        /// SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also  SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input.
        public let inputClass: InputClass?
        /// Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes
        /// during input switch actions. Presently, this functionality only works with MP4_FILE inputs.
        public let inputSourceType: InputSourceType?
        /// A list of MediaConnect Flows for this input.
        public let mediaConnectFlows: [MediaConnectFlow]?
        /// The user-assigned name (This is a mutable value).
        public let name: String?
        /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
        public let roleArn: String?
        /// A list of IDs for all the Input Security Groups attached to the input.
        public let securityGroups: [String]?
        /// A list of the sources of the input (PULL-type).
        public let sources: [InputSource]?
        public let state: InputState?
        /// A collection of key-value pairs.
        public let tags: [String: String]?
        public let `type`: InputType?

        public init(arn: String? = nil, attachedChannels: [String]? = nil, destinations: [InputDestination]? = nil, id: String? = nil, inputClass: InputClass? = nil, inputSourceType: InputSourceType? = nil, mediaConnectFlows: [MediaConnectFlow]? = nil, name: String? = nil, roleArn: String? = nil, securityGroups: [String]? = nil, sources: [InputSource]? = nil, state: InputState? = nil, tags: [String: String]? = nil, type: InputType? = nil) {
            self.arn = arn
            self.attachedChannels = attachedChannels
            self.destinations = destinations
            self.id = id
            self.inputClass = inputClass
            self.inputSourceType = inputSourceType
            self.mediaConnectFlows = mediaConnectFlows
            self.name = name
            self.roleArn = roleArn
            self.securityGroups = securityGroups
            self.sources = sources
            self.state = state
            self.tags = tags
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case attachedChannels = "attachedChannels"
            case destinations = "destinations"
            case id = "id"
            case inputClass = "inputClass"
            case inputSourceType = "inputSourceType"
            case mediaConnectFlows = "mediaConnectFlows"
            case name = "name"
            case roleArn = "roleArn"
            case securityGroups = "securityGroups"
            case sources = "sources"
            case state = "state"
            case tags = "tags"
            case `type` = "type"
        }
    }

    public struct InputAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomaticInputFailoverSettings", location: .body(locationName: "automaticInputFailoverSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "InputAttachmentName", location: .body(locationName: "inputAttachmentName"), required: false, type: .string), 
            AWSShapeMember(label: "InputId", location: .body(locationName: "inputId"), required: false, type: .string), 
            AWSShapeMember(label: "InputSettings", location: .body(locationName: "inputSettings"), required: false, type: .structure)
        ]

        /// User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
        public let automaticInputFailoverSettings: AutomaticInputFailoverSettings?
        /// User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
        public let inputAttachmentName: String?
        /// The ID of the input
        public let inputId: String?
        /// Settings of an input (caption selector, etc.)
        public let inputSettings: InputSettings?

        public init(automaticInputFailoverSettings: AutomaticInputFailoverSettings? = nil, inputAttachmentName: String? = nil, inputId: String? = nil, inputSettings: InputSettings? = nil) {
            self.automaticInputFailoverSettings = automaticInputFailoverSettings
            self.inputAttachmentName = inputAttachmentName
            self.inputId = inputId
            self.inputSettings = inputSettings
        }

        public func validate(name: String) throws {
            try self.inputSettings?.validate(name: "\(name).inputSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case automaticInputFailoverSettings = "automaticInputFailoverSettings"
            case inputAttachmentName = "inputAttachmentName"
            case inputId = "inputId"
            case inputSettings = "inputSettings"
        }
    }

    public struct InputChannelLevel: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Gain", location: .body(locationName: "gain"), required: true, type: .integer), 
            AWSShapeMember(label: "InputChannel", location: .body(locationName: "inputChannel"), required: true, type: .integer)
        ]

        /// Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
        public let gain: Int
        /// The index of the input channel used as a source.
        public let inputChannel: Int

        public init(gain: Int, inputChannel: Int) {
            self.gain = gain
            self.inputChannel = inputChannel
        }

        public func validate(name: String) throws {
            try validate(self.gain, name:"gain", parent: name, max: 6)
            try validate(self.gain, name:"gain", parent: name, min: -60)
            try validate(self.inputChannel, name:"inputChannel", parent: name, max: 15)
            try validate(self.inputChannel, name:"inputChannel", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case gain = "gain"
            case inputChannel = "inputChannel"
        }
    }

    public struct InputClippingSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputTimecodeSource", location: .body(locationName: "inputTimecodeSource"), required: true, type: .enum), 
            AWSShapeMember(label: "StartTimecode", location: .body(locationName: "startTimecode"), required: false, type: .structure), 
            AWSShapeMember(label: "StopTimecode", location: .body(locationName: "stopTimecode"), required: false, type: .structure)
        ]

        /// The source of the timecodes in the source being clipped.
        public let inputTimecodeSource: InputTimecodeSource
        /// Settings to identify the start of the clip.
        public let startTimecode: StartTimecode?
        /// Settings to identify the end of the clip.
        public let stopTimecode: StopTimecode?

        public init(inputTimecodeSource: InputTimecodeSource, startTimecode: StartTimecode? = nil, stopTimecode: StopTimecode? = nil) {
            self.inputTimecodeSource = inputTimecodeSource
            self.startTimecode = startTimecode
            self.stopTimecode = stopTimecode
        }

        private enum CodingKeys: String, CodingKey {
            case inputTimecodeSource = "inputTimecodeSource"
            case startTimecode = "startTimecode"
            case stopTimecode = "stopTimecode"
        }
    }

    public struct InputDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ip", location: .body(locationName: "ip"), required: false, type: .string), 
            AWSShapeMember(label: "Port", location: .body(locationName: "port"), required: false, type: .string), 
            AWSShapeMember(label: "Url", location: .body(locationName: "url"), required: false, type: .string), 
            AWSShapeMember(label: "Vpc", location: .body(locationName: "vpc"), required: false, type: .structure)
        ]

        /// The system-generated static IP address of endpoint.
        /// It remains fixed for the lifetime of the input.
        public let ip: String?
        /// The port number for the input.
        public let port: String?
        /// This represents the endpoint that the customer stream will be
        /// pushed to.
        public let url: String?
        public let vpc: InputDestinationVpc?

        public init(ip: String? = nil, port: String? = nil, url: String? = nil, vpc: InputDestinationVpc? = nil) {
            self.ip = ip
            self.port = port
            self.url = url
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case ip = "ip"
            case port = "port"
            case url = "url"
            case vpc = "vpc"
        }
    }

    public struct InputDestinationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StreamName", location: .body(locationName: "streamName"), required: false, type: .string)
        ]

        /// A unique name for the location the RTMP stream is being pushed
        /// to.
        public let streamName: String?

        public init(streamName: String? = nil) {
            self.streamName = streamName
        }

        private enum CodingKeys: String, CodingKey {
            case streamName = "streamName"
        }
    }

    public struct InputDestinationVpc: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string)
        ]

        /// The availability zone of the Input destination.
        public let availabilityZone: String?
        /// The network interface ID of the Input destination in the VPC.
        public let networkInterfaceId: String?

        public init(availabilityZone: String? = nil, networkInterfaceId: String? = nil) {
            self.availabilityZone = availabilityZone
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct InputLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PasswordParam", location: .body(locationName: "passwordParam"), required: false, type: .string), 
            AWSShapeMember(label: "Uri", location: .body(locationName: "uri"), required: true, type: .string), 
            AWSShapeMember(label: "Username", location: .body(locationName: "username"), required: false, type: .string)
        ]

        /// key used to extract the password from EC2 Parameter store
        public let passwordParam: String?
        /// Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
        public let uri: String
        /// Username if credentials are required to access a file or publishing point.  This can be either a plaintext username, or a reference to an AWS parameter store name from which the username can be retrieved.  AWS Parameter store format: "ssm://"
        public let username: String?

        public init(passwordParam: String? = nil, uri: String, username: String? = nil) {
            self.passwordParam = passwordParam
            self.uri = uri
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case passwordParam = "passwordParam"
            case uri = "uri"
            case username = "username"
        }
    }

    public struct InputLossBehavior: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlackFrameMsec", location: .body(locationName: "blackFrameMsec"), required: false, type: .integer), 
            AWSShapeMember(label: "InputLossImageColor", location: .body(locationName: "inputLossImageColor"), required: false, type: .string), 
            AWSShapeMember(label: "InputLossImageSlate", location: .body(locationName: "inputLossImageSlate"), required: false, type: .structure), 
            AWSShapeMember(label: "InputLossImageType", location: .body(locationName: "inputLossImageType"), required: false, type: .enum), 
            AWSShapeMember(label: "RepeatFrameMsec", location: .body(locationName: "repeatFrameMsec"), required: false, type: .integer)
        ]

        /// On input loss, the number of milliseconds to substitute black into the output before switching to the frame specified by inputLossImageType.  A value x, where 0 <= x <= 1,000,000 and a value of 1,000,000 will be interpreted as infinite.
        public let blackFrameMsec: Int?
        /// When input loss image type is "color" this field specifies the color to use. Value: 6 hex characters representing the values of RGB.
        public let inputLossImageColor: String?
        /// When input loss image type is "slate" these fields specify the parameters for accessing the slate.
        public let inputLossImageSlate: InputLocation?
        /// Indicates whether to substitute a solid color or a slate into the output after input loss exceeds blackFrameMsec.
        public let inputLossImageType: InputLossImageType?
        /// On input loss, the number of milliseconds to repeat the previous picture before substituting black into the output.  A value x, where 0 <= x <= 1,000,000 and a value of 1,000,000 will be interpreted as infinite.
        public let repeatFrameMsec: Int?

        public init(blackFrameMsec: Int? = nil, inputLossImageColor: String? = nil, inputLossImageSlate: InputLocation? = nil, inputLossImageType: InputLossImageType? = nil, repeatFrameMsec: Int? = nil) {
            self.blackFrameMsec = blackFrameMsec
            self.inputLossImageColor = inputLossImageColor
            self.inputLossImageSlate = inputLossImageSlate
            self.inputLossImageType = inputLossImageType
            self.repeatFrameMsec = repeatFrameMsec
        }

        public func validate(name: String) throws {
            try validate(self.blackFrameMsec, name:"blackFrameMsec", parent: name, max: 1000000)
            try validate(self.blackFrameMsec, name:"blackFrameMsec", parent: name, min: 0)
            try validate(self.inputLossImageColor, name:"inputLossImageColor", parent: name, max: 6)
            try validate(self.inputLossImageColor, name:"inputLossImageColor", parent: name, min: 6)
            try validate(self.repeatFrameMsec, name:"repeatFrameMsec", parent: name, max: 1000000)
            try validate(self.repeatFrameMsec, name:"repeatFrameMsec", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case blackFrameMsec = "blackFrameMsec"
            case inputLossImageColor = "inputLossImageColor"
            case inputLossImageSlate = "inputLossImageSlate"
            case inputLossImageType = "inputLossImageType"
            case repeatFrameMsec = "repeatFrameMsec"
        }
    }

    public struct InputSecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "Inputs", location: .body(locationName: "inputs"), required: false, type: .list), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "WhitelistRules", location: .body(locationName: "whitelistRules"), required: false, type: .list)
        ]

        /// Unique ARN of Input Security Group
        public let arn: String?
        /// The Id of the Input Security Group
        public let id: String?
        /// The list of inputs currently using this Input Security Group.
        public let inputs: [String]?
        /// The current state of the Input Security Group.
        public let state: InputSecurityGroupState?
        /// A collection of key-value pairs.
        public let tags: [String: String]?
        /// Whitelist rules and their sync status
        public let whitelistRules: [InputWhitelistRule]?

        public init(arn: String? = nil, id: String? = nil, inputs: [String]? = nil, state: InputSecurityGroupState? = nil, tags: [String: String]? = nil, whitelistRules: [InputWhitelistRule]? = nil) {
            self.arn = arn
            self.id = id
            self.inputs = inputs
            self.state = state
            self.tags = tags
            self.whitelistRules = whitelistRules
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case id = "id"
            case inputs = "inputs"
            case state = "state"
            case tags = "tags"
            case whitelistRules = "whitelistRules"
        }
    }

    public struct InputSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AudioSelectors", location: .body(locationName: "audioSelectors"), required: false, type: .list), 
            AWSShapeMember(label: "CaptionSelectors", location: .body(locationName: "captionSelectors"), required: false, type: .list), 
            AWSShapeMember(label: "DeblockFilter", location: .body(locationName: "deblockFilter"), required: false, type: .enum), 
            AWSShapeMember(label: "DenoiseFilter", location: .body(locationName: "denoiseFilter"), required: false, type: .enum), 
            AWSShapeMember(label: "FilterStrength", location: .body(locationName: "filterStrength"), required: false, type: .integer), 
            AWSShapeMember(label: "InputFilter", location: .body(locationName: "inputFilter"), required: false, type: .enum), 
            AWSShapeMember(label: "NetworkInputSettings", location: .body(locationName: "networkInputSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "SourceEndBehavior", location: .body(locationName: "sourceEndBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "VideoSelector", location: .body(locationName: "videoSelector"), required: false, type: .structure)
        ]

        /// Used to select the audio stream to decode for inputs that have multiple available.
        public let audioSelectors: [AudioSelector]?
        /// Used to select the caption input to use for inputs that have multiple available.
        public let captionSelectors: [CaptionSelector]?
        /// Enable or disable the deblock filter when filtering.
        public let deblockFilter: InputDeblockFilter?
        /// Enable or disable the denoise filter when filtering.
        public let denoiseFilter: InputDenoiseFilter?
        /// Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
        public let filterStrength: Int?
        /// Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default.
        /// 1) auto - filtering will be applied depending on input type/quality
        /// 2) disabled - no filtering will be applied to the input
        /// 3) forced - filtering will be applied regardless of input type
        public let inputFilter: InputFilter?
        /// Input settings.
        public let networkInputSettings: NetworkInputSettings?
        /// Loop input if it is a file. This allows a file input to be streamed indefinitely.
        public let sourceEndBehavior: InputSourceEndBehavior?
        /// Informs which video elementary stream to decode for input types that have multiple available.
        public let videoSelector: VideoSelector?

        public init(audioSelectors: [AudioSelector]? = nil, captionSelectors: [CaptionSelector]? = nil, deblockFilter: InputDeblockFilter? = nil, denoiseFilter: InputDenoiseFilter? = nil, filterStrength: Int? = nil, inputFilter: InputFilter? = nil, networkInputSettings: NetworkInputSettings? = nil, sourceEndBehavior: InputSourceEndBehavior? = nil, videoSelector: VideoSelector? = nil) {
            self.audioSelectors = audioSelectors
            self.captionSelectors = captionSelectors
            self.deblockFilter = deblockFilter
            self.denoiseFilter = denoiseFilter
            self.filterStrength = filterStrength
            self.inputFilter = inputFilter
            self.networkInputSettings = networkInputSettings
            self.sourceEndBehavior = sourceEndBehavior
            self.videoSelector = videoSelector
        }

        public func validate(name: String) throws {
            try self.audioSelectors?.forEach {
                try $0.validate(name: "\(name).audioSelectors[]")
            }
            try self.captionSelectors?.forEach {
                try $0.validate(name: "\(name).captionSelectors[]")
            }
            try validate(self.filterStrength, name:"filterStrength", parent: name, max: 5)
            try validate(self.filterStrength, name:"filterStrength", parent: name, min: 1)
            try self.networkInputSettings?.validate(name: "\(name).networkInputSettings")
            try self.videoSelector?.validate(name: "\(name).videoSelector")
        }

        private enum CodingKeys: String, CodingKey {
            case audioSelectors = "audioSelectors"
            case captionSelectors = "captionSelectors"
            case deblockFilter = "deblockFilter"
            case denoiseFilter = "denoiseFilter"
            case filterStrength = "filterStrength"
            case inputFilter = "inputFilter"
            case networkInputSettings = "networkInputSettings"
            case sourceEndBehavior = "sourceEndBehavior"
            case videoSelector = "videoSelector"
        }
    }

    public struct InputSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PasswordParam", location: .body(locationName: "passwordParam"), required: false, type: .string), 
            AWSShapeMember(label: "Url", location: .body(locationName: "url"), required: false, type: .string), 
            AWSShapeMember(label: "Username", location: .body(locationName: "username"), required: false, type: .string)
        ]

        /// The key used to extract the password from EC2 Parameter store.
        public let passwordParam: String?
        /// This represents the customer's source URL where stream is
        /// pulled from.
        public let url: String?
        /// The username for the input source.
        public let username: String?

        public init(passwordParam: String? = nil, url: String? = nil, username: String? = nil) {
            self.passwordParam = passwordParam
            self.url = url
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case passwordParam = "passwordParam"
            case url = "url"
            case username = "username"
        }
    }

    public struct InputSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PasswordParam", location: .body(locationName: "passwordParam"), required: false, type: .string), 
            AWSShapeMember(label: "Url", location: .body(locationName: "url"), required: false, type: .string), 
            AWSShapeMember(label: "Username", location: .body(locationName: "username"), required: false, type: .string)
        ]

        /// The key used to extract the password from EC2 Parameter store.
        public let passwordParam: String?
        /// This represents the customer's source URL where stream is
        /// pulled from.
        public let url: String?
        /// The username for the input source.
        public let username: String?

        public init(passwordParam: String? = nil, url: String? = nil, username: String? = nil) {
            self.passwordParam = passwordParam
            self.url = url
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case passwordParam = "passwordParam"
            case url = "url"
            case username = "username"
        }
    }

    public struct InputSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Codec", location: .body(locationName: "codec"), required: false, type: .enum), 
            AWSShapeMember(label: "MaximumBitrate", location: .body(locationName: "maximumBitrate"), required: false, type: .enum), 
            AWSShapeMember(label: "Resolution", location: .body(locationName: "resolution"), required: false, type: .enum)
        ]

        /// Input codec
        public let codec: InputCodec?
        /// Maximum input bitrate, categorized coarsely
        public let maximumBitrate: InputMaximumBitrate?
        /// Input resolution, categorized coarsely
        public let resolution: InputResolution?

        public init(codec: InputCodec? = nil, maximumBitrate: InputMaximumBitrate? = nil, resolution: InputResolution? = nil) {
            self.codec = codec
            self.maximumBitrate = maximumBitrate
            self.resolution = resolution
        }

        private enum CodingKeys: String, CodingKey {
            case codec = "codec"
            case maximumBitrate = "maximumBitrate"
            case resolution = "resolution"
        }
    }

    public struct InputSwitchScheduleActionSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputAttachmentNameReference", location: .body(locationName: "inputAttachmentNameReference"), required: true, type: .string), 
            AWSShapeMember(label: "InputClippingSettings", location: .body(locationName: "inputClippingSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "UrlPath", location: .body(locationName: "urlPath"), required: false, type: .list)
        ]

        /// The name of the input attachment (not the name of the input!) to switch to. The name is specified in the channel configuration.
        public let inputAttachmentNameReference: String
        /// Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
        public let inputClippingSettings: InputClippingSettings?
        /// The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
        public let urlPath: [String]?

        public init(inputAttachmentNameReference: String, inputClippingSettings: InputClippingSettings? = nil, urlPath: [String]? = nil) {
            self.inputAttachmentNameReference = inputAttachmentNameReference
            self.inputClippingSettings = inputClippingSettings
            self.urlPath = urlPath
        }

        private enum CodingKeys: String, CodingKey {
            case inputAttachmentNameReference = "inputAttachmentNameReference"
            case inputClippingSettings = "inputClippingSettings"
            case urlPath = "urlPath"
        }
    }

    public struct InputVpcRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "securityGroupIds"), required: false, type: .list), 
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "subnetIds"), required: true, type: .list)
        ]

        /// A list of up to 5 EC2 VPC security group IDs to attach to the Input VPC network interfaces.
        /// Requires subnetIds. If none are specified then the VPC default security group will be used.
        public let securityGroupIds: [String]?
        /// A list of 2 VPC subnet IDs from the same VPC.
        /// Subnet IDs must be mapped to two unique availability zones (AZ).
        public let subnetIds: [String]

        public init(securityGroupIds: [String]? = nil, subnetIds: [String]) {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds = "securityGroupIds"
            case subnetIds = "subnetIds"
        }
    }

    public struct InputWhitelistRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", location: .body(locationName: "cidr"), required: false, type: .string)
        ]

        /// The IPv4 CIDR that's whitelisted.
        public let cidr: String?

        public init(cidr: String? = nil) {
            self.cidr = cidr
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "cidr"
        }
    }

    public struct InputWhitelistRuleCidr: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", location: .body(locationName: "cidr"), required: false, type: .string)
        ]

        /// The IPv4 CIDR to whitelist.
        public let cidr: String?

        public init(cidr: String? = nil) {
            self.cidr = cidr
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "cidr"
        }
    }

    public struct KeyProviderSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StaticKeySettings", location: .body(locationName: "staticKeySettings"), required: false, type: .structure)
        ]

        public let staticKeySettings: StaticKeySettings?

        public init(staticKeySettings: StaticKeySettings? = nil) {
            self.staticKeySettings = staticKeySettings
        }

        public func validate(name: String) throws {
            try self.staticKeySettings?.validate(name: "\(name).staticKeySettings")
        }

        private enum CodingKeys: String, CodingKey {
            case staticKeySettings = "staticKeySettings"
        }
    }

    public struct ListChannelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListChannelsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Channels", location: .body(locationName: "channels"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let channels: [ChannelSummary]?
        public let nextToken: String?

        public init(channels: [ChannelSummary]? = nil, nextToken: String? = nil) {
            self.channels = channels
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case channels = "channels"
            case nextToken = "nextToken"
        }
    }

    public struct ListInputSecurityGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListInputSecurityGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputSecurityGroups", location: .body(locationName: "inputSecurityGroups"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let inputSecurityGroups: [InputSecurityGroup]?
        public let nextToken: String?

        public init(inputSecurityGroups: [InputSecurityGroup]? = nil, nextToken: String? = nil) {
            self.inputSecurityGroups = inputSecurityGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case inputSecurityGroups = "inputSecurityGroups"
            case nextToken = "nextToken"
        }
    }

    public struct ListInputsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListInputsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Inputs", location: .body(locationName: "inputs"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let inputs: [Input]?
        public let nextToken: String?

        public init(inputs: [Input]? = nil, nextToken: String? = nil) {
            self.inputs = inputs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case inputs = "inputs"
            case nextToken = "nextToken"
        }
    }

    public struct ListMultiplexProgramsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "MultiplexId", location: .uri(locationName: "multiplexId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let multiplexId: String
        public let nextToken: String?

        public init(maxResults: Int? = nil, multiplexId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.multiplexId = multiplexId
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case multiplexId = "multiplexId"
            case nextToken = "nextToken"
        }
    }

    public struct ListMultiplexProgramsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultiplexPrograms", location: .body(locationName: "multiplexPrograms"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let multiplexPrograms: [MultiplexProgramSummary]?
        public let nextToken: String?

        public init(multiplexPrograms: [MultiplexProgramSummary]? = nil, nextToken: String? = nil) {
            self.multiplexPrograms = multiplexPrograms
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexPrograms = "multiplexPrograms"
            case nextToken = "nextToken"
        }
    }

    public struct ListMultiplexesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListMultiplexesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Multiplexes", location: .body(locationName: "multiplexes"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let multiplexes: [MultiplexSummary]?
        public let nextToken: String?

        public init(multiplexes: [MultiplexSummary]? = nil, nextToken: String? = nil) {
            self.multiplexes = multiplexes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexes = "multiplexes"
            case nextToken = "nextToken"
        }
    }

    public struct ListOfferingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelClass", location: .querystring(locationName: "channelClass"), required: false, type: .string), 
            AWSShapeMember(label: "ChannelConfiguration", location: .querystring(locationName: "channelConfiguration"), required: false, type: .string), 
            AWSShapeMember(label: "Codec", location: .querystring(locationName: "codec"), required: false, type: .string), 
            AWSShapeMember(label: "Duration", location: .querystring(locationName: "duration"), required: false, type: .string), 
            AWSShapeMember(label: "MaximumBitrate", location: .querystring(locationName: "maximumBitrate"), required: false, type: .string), 
            AWSShapeMember(label: "MaximumFramerate", location: .querystring(locationName: "maximumFramerate"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Resolution", location: .querystring(locationName: "resolution"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .querystring(locationName: "resourceType"), required: false, type: .string), 
            AWSShapeMember(label: "SpecialFeature", location: .querystring(locationName: "specialFeature"), required: false, type: .string), 
            AWSShapeMember(label: "VideoQuality", location: .querystring(locationName: "videoQuality"), required: false, type: .string)
        ]

        public let channelClass: String?
        public let channelConfiguration: String?
        public let codec: String?
        public let duration: String?
        public let maximumBitrate: String?
        public let maximumFramerate: String?
        public let maxResults: Int?
        public let nextToken: String?
        public let resolution: String?
        public let resourceType: String?
        public let specialFeature: String?
        public let videoQuality: String?

        public init(channelClass: String? = nil, channelConfiguration: String? = nil, codec: String? = nil, duration: String? = nil, maximumBitrate: String? = nil, maximumFramerate: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, resolution: String? = nil, resourceType: String? = nil, specialFeature: String? = nil, videoQuality: String? = nil) {
            self.channelClass = channelClass
            self.channelConfiguration = channelConfiguration
            self.codec = codec
            self.duration = duration
            self.maximumBitrate = maximumBitrate
            self.maximumFramerate = maximumFramerate
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resolution = resolution
            self.resourceType = resourceType
            self.specialFeature = specialFeature
            self.videoQuality = videoQuality
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case channelClass = "channelClass"
            case channelConfiguration = "channelConfiguration"
            case codec = "codec"
            case duration = "duration"
            case maximumBitrate = "maximumBitrate"
            case maximumFramerate = "maximumFramerate"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case resolution = "resolution"
            case resourceType = "resourceType"
            case specialFeature = "specialFeature"
            case videoQuality = "videoQuality"
        }
    }

    public struct ListOfferingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Offerings", location: .body(locationName: "offerings"), required: false, type: .list)
        ]

        public let nextToken: String?
        public let offerings: [Offering]?

        public init(nextToken: String? = nil, offerings: [Offering]? = nil) {
            self.nextToken = nextToken
            self.offerings = offerings
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case offerings = "offerings"
        }
    }

    public struct ListReservationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelClass", location: .querystring(locationName: "channelClass"), required: false, type: .string), 
            AWSShapeMember(label: "Codec", location: .querystring(locationName: "codec"), required: false, type: .string), 
            AWSShapeMember(label: "MaximumBitrate", location: .querystring(locationName: "maximumBitrate"), required: false, type: .string), 
            AWSShapeMember(label: "MaximumFramerate", location: .querystring(locationName: "maximumFramerate"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Resolution", location: .querystring(locationName: "resolution"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .querystring(locationName: "resourceType"), required: false, type: .string), 
            AWSShapeMember(label: "SpecialFeature", location: .querystring(locationName: "specialFeature"), required: false, type: .string), 
            AWSShapeMember(label: "VideoQuality", location: .querystring(locationName: "videoQuality"), required: false, type: .string)
        ]

        public let channelClass: String?
        public let codec: String?
        public let maximumBitrate: String?
        public let maximumFramerate: String?
        public let maxResults: Int?
        public let nextToken: String?
        public let resolution: String?
        public let resourceType: String?
        public let specialFeature: String?
        public let videoQuality: String?

        public init(channelClass: String? = nil, codec: String? = nil, maximumBitrate: String? = nil, maximumFramerate: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, resolution: String? = nil, resourceType: String? = nil, specialFeature: String? = nil, videoQuality: String? = nil) {
            self.channelClass = channelClass
            self.codec = codec
            self.maximumBitrate = maximumBitrate
            self.maximumFramerate = maximumFramerate
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resolution = resolution
            self.resourceType = resourceType
            self.specialFeature = specialFeature
            self.videoQuality = videoQuality
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case channelClass = "channelClass"
            case codec = "codec"
            case maximumBitrate = "maximumBitrate"
            case maximumFramerate = "maximumFramerate"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case resolution = "resolution"
            case resourceType = "resourceType"
            case specialFeature = "specialFeature"
            case videoQuality = "videoQuality"
        }
    }

    public struct ListReservationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Reservations", location: .body(locationName: "reservations"), required: false, type: .list)
        ]

        public let nextToken: String?
        public let reservations: [Reservation]?

        public init(nextToken: String? = nil, reservations: [Reservation]? = nil) {
            self.nextToken = nextToken
            self.reservations = reservations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reservations = "reservations"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string)
        ]

        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct M2tsSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AbsentInputAudioBehavior", location: .body(locationName: "absentInputAudioBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "Arib", location: .body(locationName: "arib"), required: false, type: .enum), 
            AWSShapeMember(label: "AribCaptionsPid", location: .body(locationName: "aribCaptionsPid"), required: false, type: .string), 
            AWSShapeMember(label: "AribCaptionsPidControl", location: .body(locationName: "aribCaptionsPidControl"), required: false, type: .enum), 
            AWSShapeMember(label: "AudioBufferModel", location: .body(locationName: "audioBufferModel"), required: false, type: .enum), 
            AWSShapeMember(label: "AudioFramesPerPes", location: .body(locationName: "audioFramesPerPes"), required: false, type: .integer), 
            AWSShapeMember(label: "AudioPids", location: .body(locationName: "audioPids"), required: false, type: .string), 
            AWSShapeMember(label: "AudioStreamType", location: .body(locationName: "audioStreamType"), required: false, type: .enum), 
            AWSShapeMember(label: "Bitrate", location: .body(locationName: "bitrate"), required: false, type: .integer), 
            AWSShapeMember(label: "BufferModel", location: .body(locationName: "bufferModel"), required: false, type: .enum), 
            AWSShapeMember(label: "CcDescriptor", location: .body(locationName: "ccDescriptor"), required: false, type: .enum), 
            AWSShapeMember(label: "DvbNitSettings", location: .body(locationName: "dvbNitSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DvbSdtSettings", location: .body(locationName: "dvbSdtSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DvbSubPids", location: .body(locationName: "dvbSubPids"), required: false, type: .string), 
            AWSShapeMember(label: "DvbTdtSettings", location: .body(locationName: "dvbTdtSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DvbTeletextPid", location: .body(locationName: "dvbTeletextPid"), required: false, type: .string), 
            AWSShapeMember(label: "Ebif", location: .body(locationName: "ebif"), required: false, type: .enum), 
            AWSShapeMember(label: "EbpAudioInterval", location: .body(locationName: "ebpAudioInterval"), required: false, type: .enum), 
            AWSShapeMember(label: "EbpLookaheadMs", location: .body(locationName: "ebpLookaheadMs"), required: false, type: .integer), 
            AWSShapeMember(label: "EbpPlacement", location: .body(locationName: "ebpPlacement"), required: false, type: .enum), 
            AWSShapeMember(label: "EcmPid", location: .body(locationName: "ecmPid"), required: false, type: .string), 
            AWSShapeMember(label: "EsRateInPes", location: .body(locationName: "esRateInPes"), required: false, type: .enum), 
            AWSShapeMember(label: "EtvPlatformPid", location: .body(locationName: "etvPlatformPid"), required: false, type: .string), 
            AWSShapeMember(label: "EtvSignalPid", location: .body(locationName: "etvSignalPid"), required: false, type: .string), 
            AWSShapeMember(label: "FragmentTime", location: .body(locationName: "fragmentTime"), required: false, type: .double), 
            AWSShapeMember(label: "Klv", location: .body(locationName: "klv"), required: false, type: .enum), 
            AWSShapeMember(label: "KlvDataPids", location: .body(locationName: "klvDataPids"), required: false, type: .string), 
            AWSShapeMember(label: "NielsenId3Behavior", location: .body(locationName: "nielsenId3Behavior"), required: false, type: .enum), 
            AWSShapeMember(label: "NullPacketBitrate", location: .body(locationName: "nullPacketBitrate"), required: false, type: .double), 
            AWSShapeMember(label: "PatInterval", location: .body(locationName: "patInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "PcrControl", location: .body(locationName: "pcrControl"), required: false, type: .enum), 
            AWSShapeMember(label: "PcrPeriod", location: .body(locationName: "pcrPeriod"), required: false, type: .integer), 
            AWSShapeMember(label: "PcrPid", location: .body(locationName: "pcrPid"), required: false, type: .string), 
            AWSShapeMember(label: "PmtInterval", location: .body(locationName: "pmtInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "PmtPid", location: .body(locationName: "pmtPid"), required: false, type: .string), 
            AWSShapeMember(label: "ProgramNum", location: .body(locationName: "programNum"), required: false, type: .integer), 
            AWSShapeMember(label: "RateMode", location: .body(locationName: "rateMode"), required: false, type: .enum), 
            AWSShapeMember(label: "Scte27Pids", location: .body(locationName: "scte27Pids"), required: false, type: .string), 
            AWSShapeMember(label: "Scte35Control", location: .body(locationName: "scte35Control"), required: false, type: .enum), 
            AWSShapeMember(label: "Scte35Pid", location: .body(locationName: "scte35Pid"), required: false, type: .string), 
            AWSShapeMember(label: "SegmentationMarkers", location: .body(locationName: "segmentationMarkers"), required: false, type: .enum), 
            AWSShapeMember(label: "SegmentationStyle", location: .body(locationName: "segmentationStyle"), required: false, type: .enum), 
            AWSShapeMember(label: "SegmentationTime", location: .body(locationName: "segmentationTime"), required: false, type: .double), 
            AWSShapeMember(label: "TimedMetadataBehavior", location: .body(locationName: "timedMetadataBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "TimedMetadataPid", location: .body(locationName: "timedMetadataPid"), required: false, type: .string), 
            AWSShapeMember(label: "TransportStreamId", location: .body(locationName: "transportStreamId"), required: false, type: .integer), 
            AWSShapeMember(label: "VideoPid", location: .body(locationName: "videoPid"), required: false, type: .string)
        ]

        /// When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
        public let absentInputAudioBehavior: M2tsAbsentInputAudioBehavior?
        /// When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
        public let arib: M2tsArib?
        /// Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public let aribCaptionsPid: String?
        /// If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids.  If set to useConfigured, ARIB Captions will be on the configured pid number.
        public let aribCaptionsPidControl: M2tsAribCaptionsPidControl?
        /// When set to dvb, uses DVB buffer model for Dolby Digital audio.  When set to atsc, the ATSC model is used.
        public let audioBufferModel: M2tsAudioBufferModel?
        /// The number of audio frames to insert for each PES packet.
        public let audioFramesPerPes: Int?
        /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
        public let audioPids: String?
        /// When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
        public let audioStreamType: M2tsAudioStreamType?
        /// The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
        public let bitrate: Int?
        /// If set to multiplex, use multiplex buffer model for accurate interleaving.  Setting to bufferModel to none can lead to lower latency, but low-memory devices may not be able to play back the stream without interruptions.
        public let bufferModel: M2tsBufferModel?
        /// When set to enabled, generates captionServiceDescriptor in PMT.
        public let ccDescriptor: M2tsCcDescriptor?
        /// Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
        public let dvbNitSettings: DvbNitSettings?
        /// Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
        public let dvbSdtSettings: DvbSdtSettings?
        /// Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.  Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
        public let dvbSubPids: String?
        /// Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
        public let dvbTdtSettings: DvbTdtSettings?
        /// Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public let dvbTeletextPid: String?
        /// If set to passthrough, passes any EBIF data from the input source to this output.
        public let ebif: M2tsEbifControl?
        /// When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected.  Partitions 1 and 2 will always follow the video interval.
        public let ebpAudioInterval: M2tsAudioInterval?
        /// When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker.  The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
        public let ebpLookaheadMs: Int?
        /// Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs.  If set to videoPid, EBP markers will be placed on only the video PID.
        public let ebpPlacement: M2tsEbpPlacement?
        /// This field is unused and deprecated.
        public let ecmPid: String?
        /// Include or exclude the ES Rate field in the PES header.
        public let esRateInPes: M2tsEsRateInPes?
        /// Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public let etvPlatformPid: String?
        /// Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public let etvSignalPid: String?
        /// The length in seconds of each fragment. Only used with EBP markers.
        public let fragmentTime: Double?
        /// If set to passthrough, passes any KLV data from the input source to this output.
        public let klv: M2tsKlv?
        /// Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.  Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
        public let klvDataPids: String?
        /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public let nielsenId3Behavior: M2tsNielsenId3Behavior?
        /// Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
        public let nullPacketBitrate: Double?
        /// The number of milliseconds between instances of this table in the output transport stream.  Valid values are 0, 10..1000.
        public let patInterval: Int?
        /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
        public let pcrControl: M2tsPcrControl?
        /// Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
        public let pcrPeriod: Int?
        /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public let pcrPid: String?
        /// The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
        public let pmtInterval: Int?
        /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public let pmtPid: String?
        /// The value of the program number field in the Program Map Table.
        public let programNum: Int?
        /// When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
        public let rateMode: M2tsRateMode?
        /// Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.  Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
        public let scte27Pids: String?
        /// Optionally pass SCTE-35 signals from the input source to this output.
        public let scte35Control: M2tsScte35Control?
        /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public let scte35Pid: String?
        /// Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
        public let segmentationMarkers: M2tsSegmentationMarkers?
        /// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted.
        /// When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds.
        /// When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
        public let segmentationStyle: M2tsSegmentationStyle?
        /// The length in seconds of each segment. Required unless markers is set to None_.
        public let segmentationTime: Double?
        /// When set to passthrough, timed metadata will be passed through from input to output.
        public let timedMetadataBehavior: M2tsTimedMetadataBehavior?
        /// Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public let timedMetadataPid: String?
        /// The value of the transport stream ID field in the Program Map Table.
        public let transportStreamId: Int?
        /// Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public let videoPid: String?

        public init(absentInputAudioBehavior: M2tsAbsentInputAudioBehavior? = nil, arib: M2tsArib? = nil, aribCaptionsPid: String? = nil, aribCaptionsPidControl: M2tsAribCaptionsPidControl? = nil, audioBufferModel: M2tsAudioBufferModel? = nil, audioFramesPerPes: Int? = nil, audioPids: String? = nil, audioStreamType: M2tsAudioStreamType? = nil, bitrate: Int? = nil, bufferModel: M2tsBufferModel? = nil, ccDescriptor: M2tsCcDescriptor? = nil, dvbNitSettings: DvbNitSettings? = nil, dvbSdtSettings: DvbSdtSettings? = nil, dvbSubPids: String? = nil, dvbTdtSettings: DvbTdtSettings? = nil, dvbTeletextPid: String? = nil, ebif: M2tsEbifControl? = nil, ebpAudioInterval: M2tsAudioInterval? = nil, ebpLookaheadMs: Int? = nil, ebpPlacement: M2tsEbpPlacement? = nil, ecmPid: String? = nil, esRateInPes: M2tsEsRateInPes? = nil, etvPlatformPid: String? = nil, etvSignalPid: String? = nil, fragmentTime: Double? = nil, klv: M2tsKlv? = nil, klvDataPids: String? = nil, nielsenId3Behavior: M2tsNielsenId3Behavior? = nil, nullPacketBitrate: Double? = nil, patInterval: Int? = nil, pcrControl: M2tsPcrControl? = nil, pcrPeriod: Int? = nil, pcrPid: String? = nil, pmtInterval: Int? = nil, pmtPid: String? = nil, programNum: Int? = nil, rateMode: M2tsRateMode? = nil, scte27Pids: String? = nil, scte35Control: M2tsScte35Control? = nil, scte35Pid: String? = nil, segmentationMarkers: M2tsSegmentationMarkers? = nil, segmentationStyle: M2tsSegmentationStyle? = nil, segmentationTime: Double? = nil, timedMetadataBehavior: M2tsTimedMetadataBehavior? = nil, timedMetadataPid: String? = nil, transportStreamId: Int? = nil, videoPid: String? = nil) {
            self.absentInputAudioBehavior = absentInputAudioBehavior
            self.arib = arib
            self.aribCaptionsPid = aribCaptionsPid
            self.aribCaptionsPidControl = aribCaptionsPidControl
            self.audioBufferModel = audioBufferModel
            self.audioFramesPerPes = audioFramesPerPes
            self.audioPids = audioPids
            self.audioStreamType = audioStreamType
            self.bitrate = bitrate
            self.bufferModel = bufferModel
            self.ccDescriptor = ccDescriptor
            self.dvbNitSettings = dvbNitSettings
            self.dvbSdtSettings = dvbSdtSettings
            self.dvbSubPids = dvbSubPids
            self.dvbTdtSettings = dvbTdtSettings
            self.dvbTeletextPid = dvbTeletextPid
            self.ebif = ebif
            self.ebpAudioInterval = ebpAudioInterval
            self.ebpLookaheadMs = ebpLookaheadMs
            self.ebpPlacement = ebpPlacement
            self.ecmPid = ecmPid
            self.esRateInPes = esRateInPes
            self.etvPlatformPid = etvPlatformPid
            self.etvSignalPid = etvSignalPid
            self.fragmentTime = fragmentTime
            self.klv = klv
            self.klvDataPids = klvDataPids
            self.nielsenId3Behavior = nielsenId3Behavior
            self.nullPacketBitrate = nullPacketBitrate
            self.patInterval = patInterval
            self.pcrControl = pcrControl
            self.pcrPeriod = pcrPeriod
            self.pcrPid = pcrPid
            self.pmtInterval = pmtInterval
            self.pmtPid = pmtPid
            self.programNum = programNum
            self.rateMode = rateMode
            self.scte27Pids = scte27Pids
            self.scte35Control = scte35Control
            self.scte35Pid = scte35Pid
            self.segmentationMarkers = segmentationMarkers
            self.segmentationStyle = segmentationStyle
            self.segmentationTime = segmentationTime
            self.timedMetadataBehavior = timedMetadataBehavior
            self.timedMetadataPid = timedMetadataPid
            self.transportStreamId = transportStreamId
            self.videoPid = videoPid
        }

        public func validate(name: String) throws {
            try validate(self.audioFramesPerPes, name:"audioFramesPerPes", parent: name, min: 0)
            try validate(self.bitrate, name:"bitrate", parent: name, min: 0)
            try self.dvbNitSettings?.validate(name: "\(name).dvbNitSettings")
            try self.dvbSdtSettings?.validate(name: "\(name).dvbSdtSettings")
            try self.dvbTdtSettings?.validate(name: "\(name).dvbTdtSettings")
            try validate(self.ebpLookaheadMs, name:"ebpLookaheadMs", parent: name, max: 10000)
            try validate(self.ebpLookaheadMs, name:"ebpLookaheadMs", parent: name, min: 0)
            try validate(self.patInterval, name:"patInterval", parent: name, max: 1000)
            try validate(self.patInterval, name:"patInterval", parent: name, min: 0)
            try validate(self.pcrPeriod, name:"pcrPeriod", parent: name, max: 500)
            try validate(self.pcrPeriod, name:"pcrPeriod", parent: name, min: 0)
            try validate(self.pmtInterval, name:"pmtInterval", parent: name, max: 1000)
            try validate(self.pmtInterval, name:"pmtInterval", parent: name, min: 0)
            try validate(self.programNum, name:"programNum", parent: name, max: 65535)
            try validate(self.programNum, name:"programNum", parent: name, min: 0)
            try validate(self.transportStreamId, name:"transportStreamId", parent: name, max: 65535)
            try validate(self.transportStreamId, name:"transportStreamId", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case absentInputAudioBehavior = "absentInputAudioBehavior"
            case arib = "arib"
            case aribCaptionsPid = "aribCaptionsPid"
            case aribCaptionsPidControl = "aribCaptionsPidControl"
            case audioBufferModel = "audioBufferModel"
            case audioFramesPerPes = "audioFramesPerPes"
            case audioPids = "audioPids"
            case audioStreamType = "audioStreamType"
            case bitrate = "bitrate"
            case bufferModel = "bufferModel"
            case ccDescriptor = "ccDescriptor"
            case dvbNitSettings = "dvbNitSettings"
            case dvbSdtSettings = "dvbSdtSettings"
            case dvbSubPids = "dvbSubPids"
            case dvbTdtSettings = "dvbTdtSettings"
            case dvbTeletextPid = "dvbTeletextPid"
            case ebif = "ebif"
            case ebpAudioInterval = "ebpAudioInterval"
            case ebpLookaheadMs = "ebpLookaheadMs"
            case ebpPlacement = "ebpPlacement"
            case ecmPid = "ecmPid"
            case esRateInPes = "esRateInPes"
            case etvPlatformPid = "etvPlatformPid"
            case etvSignalPid = "etvSignalPid"
            case fragmentTime = "fragmentTime"
            case klv = "klv"
            case klvDataPids = "klvDataPids"
            case nielsenId3Behavior = "nielsenId3Behavior"
            case nullPacketBitrate = "nullPacketBitrate"
            case patInterval = "patInterval"
            case pcrControl = "pcrControl"
            case pcrPeriod = "pcrPeriod"
            case pcrPid = "pcrPid"
            case pmtInterval = "pmtInterval"
            case pmtPid = "pmtPid"
            case programNum = "programNum"
            case rateMode = "rateMode"
            case scte27Pids = "scte27Pids"
            case scte35Control = "scte35Control"
            case scte35Pid = "scte35Pid"
            case segmentationMarkers = "segmentationMarkers"
            case segmentationStyle = "segmentationStyle"
            case segmentationTime = "segmentationTime"
            case timedMetadataBehavior = "timedMetadataBehavior"
            case timedMetadataPid = "timedMetadataPid"
            case transportStreamId = "transportStreamId"
            case videoPid = "videoPid"
        }
    }

    public struct M3u8Settings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AudioFramesPerPes", location: .body(locationName: "audioFramesPerPes"), required: false, type: .integer), 
            AWSShapeMember(label: "AudioPids", location: .body(locationName: "audioPids"), required: false, type: .string), 
            AWSShapeMember(label: "EcmPid", location: .body(locationName: "ecmPid"), required: false, type: .string), 
            AWSShapeMember(label: "NielsenId3Behavior", location: .body(locationName: "nielsenId3Behavior"), required: false, type: .enum), 
            AWSShapeMember(label: "PatInterval", location: .body(locationName: "patInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "PcrControl", location: .body(locationName: "pcrControl"), required: false, type: .enum), 
            AWSShapeMember(label: "PcrPeriod", location: .body(locationName: "pcrPeriod"), required: false, type: .integer), 
            AWSShapeMember(label: "PcrPid", location: .body(locationName: "pcrPid"), required: false, type: .string), 
            AWSShapeMember(label: "PmtInterval", location: .body(locationName: "pmtInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "PmtPid", location: .body(locationName: "pmtPid"), required: false, type: .string), 
            AWSShapeMember(label: "ProgramNum", location: .body(locationName: "programNum"), required: false, type: .integer), 
            AWSShapeMember(label: "Scte35Behavior", location: .body(locationName: "scte35Behavior"), required: false, type: .enum), 
            AWSShapeMember(label: "Scte35Pid", location: .body(locationName: "scte35Pid"), required: false, type: .string), 
            AWSShapeMember(label: "TimedMetadataBehavior", location: .body(locationName: "timedMetadataBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "TimedMetadataPid", location: .body(locationName: "timedMetadataPid"), required: false, type: .string), 
            AWSShapeMember(label: "TransportStreamId", location: .body(locationName: "transportStreamId"), required: false, type: .integer), 
            AWSShapeMember(label: "VideoPid", location: .body(locationName: "videoPid"), required: false, type: .string)
        ]

        /// The number of audio frames to insert for each PES packet.
        public let audioFramesPerPes: Int?
        /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.
        public let audioPids: String?
        /// This parameter is unused and deprecated.
        public let ecmPid: String?
        /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public let nielsenId3Behavior: M3u8NielsenId3Behavior?
        /// The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
        public let patInterval: Int?
        /// When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
        public let pcrControl: M3u8PcrControl?
        /// Maximum time in milliseconds between Program Clock References (PCRs) inserted into the transport stream.
        public let pcrPeriod: Int?
        /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.
        public let pcrPid: String?
        /// The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
        public let pmtInterval: Int?
        /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
        public let pmtPid: String?
        /// The value of the program number field in the Program Map Table.
        public let programNum: Int?
        /// If set to passthrough, passes any SCTE-35 signals from the input source to this output.
        public let scte35Behavior: M3u8Scte35Behavior?
        /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.
        public let scte35Pid: String?
        /// When set to passthrough, timed metadata is passed through from input to output.
        public let timedMetadataBehavior: M3u8TimedMetadataBehavior?
        /// Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value.  Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
        public let timedMetadataPid: String?
        /// The value of the transport stream ID field in the Program Map Table.
        public let transportStreamId: Int?
        /// Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.
        public let videoPid: String?

        public init(audioFramesPerPes: Int? = nil, audioPids: String? = nil, ecmPid: String? = nil, nielsenId3Behavior: M3u8NielsenId3Behavior? = nil, patInterval: Int? = nil, pcrControl: M3u8PcrControl? = nil, pcrPeriod: Int? = nil, pcrPid: String? = nil, pmtInterval: Int? = nil, pmtPid: String? = nil, programNum: Int? = nil, scte35Behavior: M3u8Scte35Behavior? = nil, scte35Pid: String? = nil, timedMetadataBehavior: M3u8TimedMetadataBehavior? = nil, timedMetadataPid: String? = nil, transportStreamId: Int? = nil, videoPid: String? = nil) {
            self.audioFramesPerPes = audioFramesPerPes
            self.audioPids = audioPids
            self.ecmPid = ecmPid
            self.nielsenId3Behavior = nielsenId3Behavior
            self.patInterval = patInterval
            self.pcrControl = pcrControl
            self.pcrPeriod = pcrPeriod
            self.pcrPid = pcrPid
            self.pmtInterval = pmtInterval
            self.pmtPid = pmtPid
            self.programNum = programNum
            self.scte35Behavior = scte35Behavior
            self.scte35Pid = scte35Pid
            self.timedMetadataBehavior = timedMetadataBehavior
            self.timedMetadataPid = timedMetadataPid
            self.transportStreamId = transportStreamId
            self.videoPid = videoPid
        }

        public func validate(name: String) throws {
            try validate(self.audioFramesPerPes, name:"audioFramesPerPes", parent: name, min: 0)
            try validate(self.patInterval, name:"patInterval", parent: name, max: 1000)
            try validate(self.patInterval, name:"patInterval", parent: name, min: 0)
            try validate(self.pcrPeriod, name:"pcrPeriod", parent: name, max: 500)
            try validate(self.pcrPeriod, name:"pcrPeriod", parent: name, min: 0)
            try validate(self.pmtInterval, name:"pmtInterval", parent: name, max: 1000)
            try validate(self.pmtInterval, name:"pmtInterval", parent: name, min: 0)
            try validate(self.programNum, name:"programNum", parent: name, max: 65535)
            try validate(self.programNum, name:"programNum", parent: name, min: 0)
            try validate(self.transportStreamId, name:"transportStreamId", parent: name, max: 65535)
            try validate(self.transportStreamId, name:"transportStreamId", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case audioFramesPerPes = "audioFramesPerPes"
            case audioPids = "audioPids"
            case ecmPid = "ecmPid"
            case nielsenId3Behavior = "nielsenId3Behavior"
            case patInterval = "patInterval"
            case pcrControl = "pcrControl"
            case pcrPeriod = "pcrPeriod"
            case pcrPid = "pcrPid"
            case pmtInterval = "pmtInterval"
            case pmtPid = "pmtPid"
            case programNum = "programNum"
            case scte35Behavior = "scte35Behavior"
            case scte35Pid = "scte35Pid"
            case timedMetadataBehavior = "timedMetadataBehavior"
            case timedMetadataPid = "timedMetadataPid"
            case transportStreamId = "transportStreamId"
            case videoPid = "videoPid"
        }
    }

    public struct MediaConnectFlow: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string)
        ]

        /// The unique ARN of the MediaConnect Flow being used as a source.
        public let flowArn: String?

        public init(flowArn: String? = nil) {
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
        }
    }

    public struct MediaConnectFlowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string)
        ]

        /// The ARN of the MediaConnect Flow that you want to use as a source.
        public let flowArn: String?

        public init(flowArn: String? = nil) {
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
        }
    }

    public struct MediaPackageGroupSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: true, type: .structure)
        ]

        /// MediaPackage channel destination.
        public let destination: OutputLocationRef

        public init(destination: OutputLocationRef) {
            self.destination = destination
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "destination"
        }
    }

    public struct MediaPackageOutputDestinationSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelId", location: .body(locationName: "channelId"), required: false, type: .string)
        ]

        /// ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.
        public let channelId: String?

        public init(channelId: String? = nil) {
            self.channelId = channelId
        }

        public func validate(name: String) throws {
            try validate(self.channelId, name:"channelId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "channelId"
        }
    }

    public struct MediaPackageOutputSettings: AWSShape {


        public init() {
        }

    }

    public struct Mp2Settings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bitrate", location: .body(locationName: "bitrate"), required: false, type: .double), 
            AWSShapeMember(label: "CodingMode", location: .body(locationName: "codingMode"), required: false, type: .enum), 
            AWSShapeMember(label: "SampleRate", location: .body(locationName: "sampleRate"), required: false, type: .double)
        ]

        /// Average bitrate in bits/second.
        public let bitrate: Double?
        /// The MPEG2 Audio coding mode.  Valid values are codingMode10 (for mono) or codingMode20 (for stereo).
        public let codingMode: Mp2CodingMode?
        /// Sample rate in Hz.
        public let sampleRate: Double?

        public init(bitrate: Double? = nil, codingMode: Mp2CodingMode? = nil, sampleRate: Double? = nil) {
            self.bitrate = bitrate
            self.codingMode = codingMode
            self.sampleRate = sampleRate
        }

        private enum CodingKeys: String, CodingKey {
            case bitrate = "bitrate"
            case codingMode = "codingMode"
            case sampleRate = "sampleRate"
        }
    }

    public struct MsSmoothGroupSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcquisitionPointId", location: .body(locationName: "acquisitionPointId"), required: false, type: .string), 
            AWSShapeMember(label: "AudioOnlyTimecodeControl", location: .body(locationName: "audioOnlyTimecodeControl"), required: false, type: .enum), 
            AWSShapeMember(label: "CertificateMode", location: .body(locationName: "certificateMode"), required: false, type: .enum), 
            AWSShapeMember(label: "ConnectionRetryInterval", location: .body(locationName: "connectionRetryInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: true, type: .structure), 
            AWSShapeMember(label: "EventId", location: .body(locationName: "eventId"), required: false, type: .string), 
            AWSShapeMember(label: "EventIdMode", location: .body(locationName: "eventIdMode"), required: false, type: .enum), 
            AWSShapeMember(label: "EventStopBehavior", location: .body(locationName: "eventStopBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "FilecacheDuration", location: .body(locationName: "filecacheDuration"), required: false, type: .integer), 
            AWSShapeMember(label: "FragmentLength", location: .body(locationName: "fragmentLength"), required: false, type: .integer), 
            AWSShapeMember(label: "InputLossAction", location: .body(locationName: "inputLossAction"), required: false, type: .enum), 
            AWSShapeMember(label: "NumRetries", location: .body(locationName: "numRetries"), required: false, type: .integer), 
            AWSShapeMember(label: "RestartDelay", location: .body(locationName: "restartDelay"), required: false, type: .integer), 
            AWSShapeMember(label: "SegmentationMode", location: .body(locationName: "segmentationMode"), required: false, type: .enum), 
            AWSShapeMember(label: "SendDelayMs", location: .body(locationName: "sendDelayMs"), required: false, type: .integer), 
            AWSShapeMember(label: "SparseTrackType", location: .body(locationName: "sparseTrackType"), required: false, type: .enum), 
            AWSShapeMember(label: "StreamManifestBehavior", location: .body(locationName: "streamManifestBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "TimestampOffset", location: .body(locationName: "timestampOffset"), required: false, type: .string), 
            AWSShapeMember(label: "TimestampOffsetMode", location: .body(locationName: "timestampOffsetMode"), required: false, type: .enum)
        ]

        /// The value of the "Acquisition Point Identity" element used in each message placed in the sparse track.  Only enabled if sparseTrackType is not "none".
        public let acquisitionPointId: String?
        /// If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
        public let audioOnlyTimecodeControl: SmoothGroupAudioOnlyTimecodeControl?
        /// If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA).  This will cause https outputs to self-signed certificates to fail.
        public let certificateMode: SmoothGroupCertificateMode?
        /// Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
        public let connectionRetryInterval: Int?
        /// Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
        public let destination: OutputLocationRef
        /// MS Smooth event ID to be sent to the IIS server.
        /// Should only be specified if eventIdMode is set to useConfigured.
        public let eventId: String?
        /// Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run.
        /// Options:
        /// - "useConfigured" - use the value provided in eventId
        /// - "useTimestamp" - generate and send an event ID based on the current timestamp
        /// - "noEventId" - do not send an event ID to the IIS server.
        public let eventIdMode: SmoothGroupEventIdMode?
        /// When set to sendEos, send EOS signal to IIS server when stopping the event
        public let eventStopBehavior: SmoothGroupEventStopBehavior?
        /// Size in seconds of file cache for streaming outputs.
        public let filecacheDuration: Int?
        /// Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
        public let fragmentLength: Int?
        /// Parameter that control output group behavior on input loss.
        public let inputLossAction: InputLossActionForMsSmoothOut?
        /// Number of retry attempts.
        public let numRetries: Int?
        /// Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
        public let restartDelay: Int?
        /// useInputSegmentation has been deprecated. The configured segment size is always used.
        public let segmentationMode: SmoothGroupSegmentationMode?
        /// Number of milliseconds to delay the output from the second pipeline.
        public let sendDelayMs: Int?
        /// If set to scte35, use incoming SCTE-35 messages to generate a sparse track in this group of MS-Smooth outputs. scte35WithoutSegmentation is the same as scte35, except EML will not start a new segment at a SCTE-35 marker. It will still encode an IDR frame at a SCTE-35 marker.
        public let sparseTrackType: SmoothGroupSparseTrackType?
        /// When set to send, send stream manifest so publishing point doesn't start until all streams start.
        public let streamManifestBehavior: SmoothGroupStreamManifestBehavior?
        /// Timestamp offset for the event.  Only used if timestampOffsetMode is set to useConfiguredOffset.
        public let timestampOffset: String?
        /// Type of timestamp date offset to use.
        /// - useEventStartDate: Use the date the event was started as the offset
        /// - useConfiguredOffset: Use an explicitly configured date as the offset
        public let timestampOffsetMode: SmoothGroupTimestampOffsetMode?

        public init(acquisitionPointId: String? = nil, audioOnlyTimecodeControl: SmoothGroupAudioOnlyTimecodeControl? = nil, certificateMode: SmoothGroupCertificateMode? = nil, connectionRetryInterval: Int? = nil, destination: OutputLocationRef, eventId: String? = nil, eventIdMode: SmoothGroupEventIdMode? = nil, eventStopBehavior: SmoothGroupEventStopBehavior? = nil, filecacheDuration: Int? = nil, fragmentLength: Int? = nil, inputLossAction: InputLossActionForMsSmoothOut? = nil, numRetries: Int? = nil, restartDelay: Int? = nil, segmentationMode: SmoothGroupSegmentationMode? = nil, sendDelayMs: Int? = nil, sparseTrackType: SmoothGroupSparseTrackType? = nil, streamManifestBehavior: SmoothGroupStreamManifestBehavior? = nil, timestampOffset: String? = nil, timestampOffsetMode: SmoothGroupTimestampOffsetMode? = nil) {
            self.acquisitionPointId = acquisitionPointId
            self.audioOnlyTimecodeControl = audioOnlyTimecodeControl
            self.certificateMode = certificateMode
            self.connectionRetryInterval = connectionRetryInterval
            self.destination = destination
            self.eventId = eventId
            self.eventIdMode = eventIdMode
            self.eventStopBehavior = eventStopBehavior
            self.filecacheDuration = filecacheDuration
            self.fragmentLength = fragmentLength
            self.inputLossAction = inputLossAction
            self.numRetries = numRetries
            self.restartDelay = restartDelay
            self.segmentationMode = segmentationMode
            self.sendDelayMs = sendDelayMs
            self.sparseTrackType = sparseTrackType
            self.streamManifestBehavior = streamManifestBehavior
            self.timestampOffset = timestampOffset
            self.timestampOffsetMode = timestampOffsetMode
        }

        public func validate(name: String) throws {
            try validate(self.connectionRetryInterval, name:"connectionRetryInterval", parent: name, min: 0)
            try validate(self.filecacheDuration, name:"filecacheDuration", parent: name, min: 0)
            try validate(self.fragmentLength, name:"fragmentLength", parent: name, min: 1)
            try validate(self.numRetries, name:"numRetries", parent: name, min: 0)
            try validate(self.restartDelay, name:"restartDelay", parent: name, min: 0)
            try validate(self.sendDelayMs, name:"sendDelayMs", parent: name, max: 10000)
            try validate(self.sendDelayMs, name:"sendDelayMs", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case acquisitionPointId = "acquisitionPointId"
            case audioOnlyTimecodeControl = "audioOnlyTimecodeControl"
            case certificateMode = "certificateMode"
            case connectionRetryInterval = "connectionRetryInterval"
            case destination = "destination"
            case eventId = "eventId"
            case eventIdMode = "eventIdMode"
            case eventStopBehavior = "eventStopBehavior"
            case filecacheDuration = "filecacheDuration"
            case fragmentLength = "fragmentLength"
            case inputLossAction = "inputLossAction"
            case numRetries = "numRetries"
            case restartDelay = "restartDelay"
            case segmentationMode = "segmentationMode"
            case sendDelayMs = "sendDelayMs"
            case sparseTrackType = "sparseTrackType"
            case streamManifestBehavior = "streamManifestBehavior"
            case timestampOffset = "timestampOffset"
            case timestampOffsetMode = "timestampOffsetMode"
        }
    }

    public struct MsSmoothOutputSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "H265PackagingType", location: .body(locationName: "h265PackagingType"), required: false, type: .enum), 
            AWSShapeMember(label: "NameModifier", location: .body(locationName: "nameModifier"), required: false, type: .string)
        ]

        /// Only applicable when this output is referencing an H.265 video description.
        /// Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
        public let h265PackagingType: MsSmoothH265PackagingType?
        /// String concatenated to the end of the destination filename.  Required for multiple outputs of the same type.
        public let nameModifier: String?

        public init(h265PackagingType: MsSmoothH265PackagingType? = nil, nameModifier: String? = nil) {
            self.h265PackagingType = h265PackagingType
            self.nameModifier = nameModifier
        }

        private enum CodingKeys: String, CodingKey {
            case h265PackagingType = "h265PackagingType"
            case nameModifier = "nameModifier"
        }
    }

    public struct Multiplex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZones"), required: false, type: .list), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "MultiplexSettings", location: .body(locationName: "multiplexSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "PipelinesRunningCount", location: .body(locationName: "pipelinesRunningCount"), required: false, type: .integer), 
            AWSShapeMember(label: "ProgramCount", location: .body(locationName: "programCount"), required: false, type: .integer), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        /// The unique arn of the multiplex.
        public let arn: String?
        /// A list of availability zones for the multiplex.
        public let availabilityZones: [String]?
        /// A list of the multiplex output destinations.
        public let destinations: [MultiplexOutputDestination]?
        /// The unique id of the multiplex.
        public let id: String?
        /// Configuration for a multiplex event.
        public let multiplexSettings: MultiplexSettings?
        /// The name of the multiplex.
        public let name: String?
        /// The number of currently healthy pipelines.
        public let pipelinesRunningCount: Int?
        /// The number of programs in the multiplex.
        public let programCount: Int?
        /// The current state of the multiplex.
        public let state: MultiplexState?
        /// A collection of key-value pairs.
        public let tags: [String: String]?

        public init(arn: String? = nil, availabilityZones: [String]? = nil, destinations: [MultiplexOutputDestination]? = nil, id: String? = nil, multiplexSettings: MultiplexSettings? = nil, name: String? = nil, pipelinesRunningCount: Int? = nil, programCount: Int? = nil, state: MultiplexState? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.availabilityZones = availabilityZones
            self.destinations = destinations
            self.id = id
            self.multiplexSettings = multiplexSettings
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.programCount = programCount
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case availabilityZones = "availabilityZones"
            case destinations = "destinations"
            case id = "id"
            case multiplexSettings = "multiplexSettings"
            case name = "name"
            case pipelinesRunningCount = "pipelinesRunningCount"
            case programCount = "programCount"
            case state = "state"
            case tags = "tags"
        }
    }

    public struct MultiplexGroupSettings: AWSShape {


        public init() {
        }

    }

    public struct MultiplexMediaConnectOutputDestinationSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: false, type: .string)
        ]

        /// The MediaConnect entitlement ARN available as a Flow source.
        public let entitlementArn: String?

        public init(entitlementArn: String? = nil) {
            self.entitlementArn = entitlementArn
        }

        private enum CodingKeys: String, CodingKey {
            case entitlementArn = "entitlementArn"
        }
    }

    public struct MultiplexOutputDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MediaConnectSettings", location: .body(locationName: "mediaConnectSettings"), required: false, type: .structure)
        ]

        /// Multiplex MediaConnect output destination settings.
        public let mediaConnectSettings: MultiplexMediaConnectOutputDestinationSettings?

        public init(mediaConnectSettings: MultiplexMediaConnectOutputDestinationSettings? = nil) {
            self.mediaConnectSettings = mediaConnectSettings
        }

        private enum CodingKeys: String, CodingKey {
            case mediaConnectSettings = "mediaConnectSettings"
        }
    }

    public struct MultiplexOutputSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: true, type: .structure)
        ]

        /// Destination is a Multiplex.
        public let destination: OutputLocationRef

        public init(destination: OutputLocationRef) {
            self.destination = destination
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "destination"
        }
    }

    public struct MultiplexProgram: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelId", location: .body(locationName: "channelId"), required: false, type: .string), 
            AWSShapeMember(label: "MultiplexProgramSettings", location: .body(locationName: "multiplexProgramSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "PacketIdentifiersMap", location: .body(locationName: "packetIdentifiersMap"), required: false, type: .structure), 
            AWSShapeMember(label: "ProgramName", location: .body(locationName: "programName"), required: false, type: .string)
        ]

        /// The MediaLive channel associated with the program.
        public let channelId: String?
        /// The settings for this multiplex program.
        public let multiplexProgramSettings: MultiplexProgramSettings?
        /// The packet identifier map for this multiplex program.
        public let packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap?
        /// The name of the multiplex program.
        public let programName: String?

        public init(channelId: String? = nil, multiplexProgramSettings: MultiplexProgramSettings? = nil, packetIdentifiersMap: MultiplexProgramPacketIdentifiersMap? = nil, programName: String? = nil) {
            self.channelId = channelId
            self.multiplexProgramSettings = multiplexProgramSettings
            self.packetIdentifiersMap = packetIdentifiersMap
            self.programName = programName
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "channelId"
            case multiplexProgramSettings = "multiplexProgramSettings"
            case packetIdentifiersMap = "packetIdentifiersMap"
            case programName = "programName"
        }
    }

    public struct MultiplexProgramChannelDestinationSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultiplexId", location: .body(locationName: "multiplexId"), required: false, type: .string), 
            AWSShapeMember(label: "ProgramName", location: .body(locationName: "programName"), required: false, type: .string)
        ]

        /// The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances.
        /// The Multiplex must be in the same region as the Channel.
        public let multiplexId: String?
        /// The program name of the Multiplex program that the encoder is providing output to.
        public let programName: String?

        public init(multiplexId: String? = nil, programName: String? = nil) {
            self.multiplexId = multiplexId
            self.programName = programName
        }

        public func validate(name: String) throws {
            try validate(self.multiplexId, name:"multiplexId", parent: name, min: 1)
            try validate(self.programName, name:"programName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexId = "multiplexId"
            case programName = "programName"
        }
    }

    public struct MultiplexProgramPacketIdentifiersMap: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AudioPids", location: .body(locationName: "audioPids"), required: false, type: .list), 
            AWSShapeMember(label: "DvbSubPids", location: .body(locationName: "dvbSubPids"), required: false, type: .list), 
            AWSShapeMember(label: "DvbTeletextPid", location: .body(locationName: "dvbTeletextPid"), required: false, type: .integer), 
            AWSShapeMember(label: "EtvPlatformPid", location: .body(locationName: "etvPlatformPid"), required: false, type: .integer), 
            AWSShapeMember(label: "EtvSignalPid", location: .body(locationName: "etvSignalPid"), required: false, type: .integer), 
            AWSShapeMember(label: "KlvDataPids", location: .body(locationName: "klvDataPids"), required: false, type: .list), 
            AWSShapeMember(label: "PcrPid", location: .body(locationName: "pcrPid"), required: false, type: .integer), 
            AWSShapeMember(label: "PmtPid", location: .body(locationName: "pmtPid"), required: false, type: .integer), 
            AWSShapeMember(label: "PrivateMetadataPid", location: .body(locationName: "privateMetadataPid"), required: false, type: .integer), 
            AWSShapeMember(label: "Scte27Pids", location: .body(locationName: "scte27Pids"), required: false, type: .list), 
            AWSShapeMember(label: "Scte35Pid", location: .body(locationName: "scte35Pid"), required: false, type: .integer), 
            AWSShapeMember(label: "TimedMetadataPid", location: .body(locationName: "timedMetadataPid"), required: false, type: .integer), 
            AWSShapeMember(label: "VideoPid", location: .body(locationName: "videoPid"), required: false, type: .integer)
        ]

        public let audioPids: [Int]?
        public let dvbSubPids: [Int]?
        public let dvbTeletextPid: Int?
        public let etvPlatformPid: Int?
        public let etvSignalPid: Int?
        public let klvDataPids: [Int]?
        public let pcrPid: Int?
        public let pmtPid: Int?
        public let privateMetadataPid: Int?
        public let scte27Pids: [Int]?
        public let scte35Pid: Int?
        public let timedMetadataPid: Int?
        public let videoPid: Int?

        public init(audioPids: [Int]? = nil, dvbSubPids: [Int]? = nil, dvbTeletextPid: Int? = nil, etvPlatformPid: Int? = nil, etvSignalPid: Int? = nil, klvDataPids: [Int]? = nil, pcrPid: Int? = nil, pmtPid: Int? = nil, privateMetadataPid: Int? = nil, scte27Pids: [Int]? = nil, scte35Pid: Int? = nil, timedMetadataPid: Int? = nil, videoPid: Int? = nil) {
            self.audioPids = audioPids
            self.dvbSubPids = dvbSubPids
            self.dvbTeletextPid = dvbTeletextPid
            self.etvPlatformPid = etvPlatformPid
            self.etvSignalPid = etvSignalPid
            self.klvDataPids = klvDataPids
            self.pcrPid = pcrPid
            self.pmtPid = pmtPid
            self.privateMetadataPid = privateMetadataPid
            self.scte27Pids = scte27Pids
            self.scte35Pid = scte35Pid
            self.timedMetadataPid = timedMetadataPid
            self.videoPid = videoPid
        }

        private enum CodingKeys: String, CodingKey {
            case audioPids = "audioPids"
            case dvbSubPids = "dvbSubPids"
            case dvbTeletextPid = "dvbTeletextPid"
            case etvPlatformPid = "etvPlatformPid"
            case etvSignalPid = "etvSignalPid"
            case klvDataPids = "klvDataPids"
            case pcrPid = "pcrPid"
            case pmtPid = "pmtPid"
            case privateMetadataPid = "privateMetadataPid"
            case scte27Pids = "scte27Pids"
            case scte35Pid = "scte35Pid"
            case timedMetadataPid = "timedMetadataPid"
            case videoPid = "videoPid"
        }
    }

    public struct MultiplexProgramServiceDescriptor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderName", location: .body(locationName: "providerName"), required: true, type: .string), 
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: true, type: .string)
        ]

        /// Name of the provider.
        public let providerName: String
        /// Name of the service.
        public let serviceName: String

        public init(providerName: String, serviceName: String) {
            self.providerName = providerName
            self.serviceName = serviceName
        }

        public func validate(name: String) throws {
            try validate(self.providerName, name:"providerName", parent: name, max: 256)
            try validate(self.serviceName, name:"serviceName", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "providerName"
            case serviceName = "serviceName"
        }
    }

    public struct MultiplexProgramSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PreferredChannelPipeline", location: .body(locationName: "preferredChannelPipeline"), required: false, type: .enum), 
            AWSShapeMember(label: "ProgramNumber", location: .body(locationName: "programNumber"), required: true, type: .integer), 
            AWSShapeMember(label: "ServiceDescriptor", location: .body(locationName: "serviceDescriptor"), required: false, type: .structure), 
            AWSShapeMember(label: "VideoSettings", location: .body(locationName: "videoSettings"), required: false, type: .structure)
        ]

        /// Indicates which pipeline is preferred by the multiplex for program ingest.
        public let preferredChannelPipeline: PreferredChannelPipeline?
        /// Unique program number.
        public let programNumber: Int
        /// Transport stream service descriptor configuration for the Multiplex program.
        public let serviceDescriptor: MultiplexProgramServiceDescriptor?
        /// Program video settings configuration.
        public let videoSettings: MultiplexVideoSettings?

        public init(preferredChannelPipeline: PreferredChannelPipeline? = nil, programNumber: Int, serviceDescriptor: MultiplexProgramServiceDescriptor? = nil, videoSettings: MultiplexVideoSettings? = nil) {
            self.preferredChannelPipeline = preferredChannelPipeline
            self.programNumber = programNumber
            self.serviceDescriptor = serviceDescriptor
            self.videoSettings = videoSettings
        }

        public func validate(name: String) throws {
            try validate(self.programNumber, name:"programNumber", parent: name, max: 65535)
            try validate(self.programNumber, name:"programNumber", parent: name, min: 0)
            try self.serviceDescriptor?.validate(name: "\(name).serviceDescriptor")
            try self.videoSettings?.validate(name: "\(name).videoSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case preferredChannelPipeline = "preferredChannelPipeline"
            case programNumber = "programNumber"
            case serviceDescriptor = "serviceDescriptor"
            case videoSettings = "videoSettings"
        }
    }

    public struct MultiplexProgramSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelId", location: .body(locationName: "channelId"), required: false, type: .string), 
            AWSShapeMember(label: "ProgramName", location: .body(locationName: "programName"), required: false, type: .string)
        ]

        /// The MediaLive Channel associated with the program.
        public let channelId: String?
        /// The name of the multiplex program.
        public let programName: String?

        public init(channelId: String? = nil, programName: String? = nil) {
            self.channelId = channelId
            self.programName = programName
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "channelId"
            case programName = "programName"
        }
    }

    public struct MultiplexSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaximumVideoBufferDelayMilliseconds", location: .body(locationName: "maximumVideoBufferDelayMilliseconds"), required: false, type: .integer), 
            AWSShapeMember(label: "TransportStreamBitrate", location: .body(locationName: "transportStreamBitrate"), required: true, type: .integer), 
            AWSShapeMember(label: "TransportStreamId", location: .body(locationName: "transportStreamId"), required: true, type: .integer), 
            AWSShapeMember(label: "TransportStreamReservedBitrate", location: .body(locationName: "transportStreamReservedBitrate"), required: false, type: .integer)
        ]

        /// Maximum video buffer delay in milliseconds.
        public let maximumVideoBufferDelayMilliseconds: Int?
        /// Transport stream bit rate.
        public let transportStreamBitrate: Int
        /// Transport stream ID.
        public let transportStreamId: Int
        /// Transport stream reserved bit rate.
        public let transportStreamReservedBitrate: Int?

        public init(maximumVideoBufferDelayMilliseconds: Int? = nil, transportStreamBitrate: Int, transportStreamId: Int, transportStreamReservedBitrate: Int? = nil) {
            self.maximumVideoBufferDelayMilliseconds = maximumVideoBufferDelayMilliseconds
            self.transportStreamBitrate = transportStreamBitrate
            self.transportStreamId = transportStreamId
            self.transportStreamReservedBitrate = transportStreamReservedBitrate
        }

        public func validate(name: String) throws {
            try validate(self.maximumVideoBufferDelayMilliseconds, name:"maximumVideoBufferDelayMilliseconds", parent: name, max: 3000)
            try validate(self.maximumVideoBufferDelayMilliseconds, name:"maximumVideoBufferDelayMilliseconds", parent: name, min: 1000)
            try validate(self.transportStreamBitrate, name:"transportStreamBitrate", parent: name, max: 100000000)
            try validate(self.transportStreamBitrate, name:"transportStreamBitrate", parent: name, min: 1000000)
            try validate(self.transportStreamId, name:"transportStreamId", parent: name, max: 65535)
            try validate(self.transportStreamId, name:"transportStreamId", parent: name, min: 0)
            try validate(self.transportStreamReservedBitrate, name:"transportStreamReservedBitrate", parent: name, max: 100000000)
            try validate(self.transportStreamReservedBitrate, name:"transportStreamReservedBitrate", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case maximumVideoBufferDelayMilliseconds = "maximumVideoBufferDelayMilliseconds"
            case transportStreamBitrate = "transportStreamBitrate"
            case transportStreamId = "transportStreamId"
            case transportStreamReservedBitrate = "transportStreamReservedBitrate"
        }
    }

    public struct MultiplexSettingsSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransportStreamBitrate", location: .body(locationName: "transportStreamBitrate"), required: false, type: .integer)
        ]

        /// Transport stream bit rate.
        public let transportStreamBitrate: Int?

        public init(transportStreamBitrate: Int? = nil) {
            self.transportStreamBitrate = transportStreamBitrate
        }

        private enum CodingKeys: String, CodingKey {
            case transportStreamBitrate = "transportStreamBitrate"
        }
    }

    public struct MultiplexStatmuxVideoSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaximumBitrate", location: .body(locationName: "maximumBitrate"), required: false, type: .integer), 
            AWSShapeMember(label: "MinimumBitrate", location: .body(locationName: "minimumBitrate"), required: false, type: .integer)
        ]

        /// Maximum statmux bitrate.
        public let maximumBitrate: Int?
        /// Minimum statmux bitrate.
        public let minimumBitrate: Int?

        public init(maximumBitrate: Int? = nil, minimumBitrate: Int? = nil) {
            self.maximumBitrate = maximumBitrate
            self.minimumBitrate = minimumBitrate
        }

        public func validate(name: String) throws {
            try validate(self.maximumBitrate, name:"maximumBitrate", parent: name, max: 100000000)
            try validate(self.maximumBitrate, name:"maximumBitrate", parent: name, min: 100000)
            try validate(self.minimumBitrate, name:"minimumBitrate", parent: name, max: 100000000)
            try validate(self.minimumBitrate, name:"minimumBitrate", parent: name, min: 100000)
        }

        private enum CodingKeys: String, CodingKey {
            case maximumBitrate = "maximumBitrate"
            case minimumBitrate = "minimumBitrate"
        }
    }

    public struct MultiplexSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZones"), required: false, type: .list), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "MultiplexSettings", location: .body(locationName: "multiplexSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "PipelinesRunningCount", location: .body(locationName: "pipelinesRunningCount"), required: false, type: .integer), 
            AWSShapeMember(label: "ProgramCount", location: .body(locationName: "programCount"), required: false, type: .integer), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        /// The unique arn of the multiplex.
        public let arn: String?
        /// A list of availability zones for the multiplex.
        public let availabilityZones: [String]?
        /// The unique id of the multiplex.
        public let id: String?
        /// Configuration for a multiplex event.
        public let multiplexSettings: MultiplexSettingsSummary?
        /// The name of the multiplex.
        public let name: String?
        /// The number of currently healthy pipelines.
        public let pipelinesRunningCount: Int?
        /// The number of programs in the multiplex.
        public let programCount: Int?
        /// The current state of the multiplex.
        public let state: MultiplexState?
        /// A collection of key-value pairs.
        public let tags: [String: String]?

        public init(arn: String? = nil, availabilityZones: [String]? = nil, id: String? = nil, multiplexSettings: MultiplexSettingsSummary? = nil, name: String? = nil, pipelinesRunningCount: Int? = nil, programCount: Int? = nil, state: MultiplexState? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.availabilityZones = availabilityZones
            self.id = id
            self.multiplexSettings = multiplexSettings
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.programCount = programCount
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case availabilityZones = "availabilityZones"
            case id = "id"
            case multiplexSettings = "multiplexSettings"
            case name = "name"
            case pipelinesRunningCount = "pipelinesRunningCount"
            case programCount = "programCount"
            case state = "state"
            case tags = "tags"
        }
    }

    public struct MultiplexVideoSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstantBitrate", location: .body(locationName: "constantBitrate"), required: false, type: .integer), 
            AWSShapeMember(label: "StatmuxSettings", location: .body(locationName: "statmuxSettings"), required: false, type: .structure)
        ]

        /// The constant bitrate configuration for the video encode.
        /// When this field is defined, StatmuxSettings must be undefined.
        public let constantBitrate: Int?
        /// Statmux rate control settings.
        /// When this field is defined, ConstantBitrate must be undefined.
        public let statmuxSettings: MultiplexStatmuxVideoSettings?

        public init(constantBitrate: Int? = nil, statmuxSettings: MultiplexStatmuxVideoSettings? = nil) {
            self.constantBitrate = constantBitrate
            self.statmuxSettings = statmuxSettings
        }

        public func validate(name: String) throws {
            try validate(self.constantBitrate, name:"constantBitrate", parent: name, max: 100000000)
            try validate(self.constantBitrate, name:"constantBitrate", parent: name, min: 100000)
            try self.statmuxSettings?.validate(name: "\(name).statmuxSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case constantBitrate = "constantBitrate"
            case statmuxSettings = "statmuxSettings"
        }
    }

    public struct NetworkInputSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HlsInputSettings", location: .body(locationName: "hlsInputSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ServerValidation", location: .body(locationName: "serverValidation"), required: false, type: .enum)
        ]

        /// Specifies HLS input settings when the uri is for a HLS manifest.
        public let hlsInputSettings: HlsInputSettings?
        /// Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.
        public let serverValidation: NetworkInputServerValidation?

        public init(hlsInputSettings: HlsInputSettings? = nil, serverValidation: NetworkInputServerValidation? = nil) {
            self.hlsInputSettings = hlsInputSettings
            self.serverValidation = serverValidation
        }

        public func validate(name: String) throws {
            try self.hlsInputSettings?.validate(name: "\(name).hlsInputSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case hlsInputSettings = "hlsInputSettings"
            case serverValidation = "serverValidation"
        }
    }

    public struct NielsenConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributorId", location: .body(locationName: "distributorId"), required: false, type: .string), 
            AWSShapeMember(label: "NielsenPcmToId3Tagging", location: .body(locationName: "nielsenPcmToId3Tagging"), required: false, type: .enum)
        ]

        /// Enter the Distributor ID assigned to your organization by Nielsen.
        public let distributorId: String?
        /// Enables Nielsen PCM to ID3 tagging
        public let nielsenPcmToId3Tagging: NielsenPcmToId3TaggingState?

        public init(distributorId: String? = nil, nielsenPcmToId3Tagging: NielsenPcmToId3TaggingState? = nil) {
            self.distributorId = distributorId
            self.nielsenPcmToId3Tagging = nielsenPcmToId3Tagging
        }

        private enum CodingKeys: String, CodingKey {
            case distributorId = "distributorId"
            case nielsenPcmToId3Tagging = "nielsenPcmToId3Tagging"
        }
    }

    public struct Offering: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .string), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "DurationUnits", location: .body(locationName: "durationUnits"), required: false, type: .enum), 
            AWSShapeMember(label: "FixedPrice", location: .body(locationName: "fixedPrice"), required: false, type: .double), 
            AWSShapeMember(label: "OfferingDescription", location: .body(locationName: "offeringDescription"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "Region", location: .body(locationName: "region"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceSpecification", location: .body(locationName: "resourceSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "UsagePrice", location: .body(locationName: "usagePrice"), required: false, type: .double)
        ]

        /// Unique offering ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:offering:87654321'
        public let arn: String?
        /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
        public let currencyCode: String?
        /// Lease duration, e.g. '12'
        public let duration: Int?
        /// Units for duration, e.g. 'MONTHS'
        public let durationUnits: OfferingDurationUnits?
        /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
        public let fixedPrice: Double?
        /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
        public let offeringDescription: String?
        /// Unique offering ID, e.g. '87654321'
        public let offeringId: String?
        /// Offering type, e.g. 'NO_UPFRONT'
        public let offeringType: OfferingType?
        /// AWS region, e.g. 'us-west-2'
        public let region: String?
        /// Resource configuration details
        public let resourceSpecification: ReservationResourceSpecification?
        /// Recurring usage charge for each reserved resource, e.g. '157.0'
        public let usagePrice: Double?

        public init(arn: String? = nil, currencyCode: String? = nil, duration: Int? = nil, durationUnits: OfferingDurationUnits? = nil, fixedPrice: Double? = nil, offeringDescription: String? = nil, offeringId: String? = nil, offeringType: OfferingType? = nil, region: String? = nil, resourceSpecification: ReservationResourceSpecification? = nil, usagePrice: Double? = nil) {
            self.arn = arn
            self.currencyCode = currencyCode
            self.duration = duration
            self.durationUnits = durationUnits
            self.fixedPrice = fixedPrice
            self.offeringDescription = offeringDescription
            self.offeringId = offeringId
            self.offeringType = offeringType
            self.region = region
            self.resourceSpecification = resourceSpecification
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case currencyCode = "currencyCode"
            case duration = "duration"
            case durationUnits = "durationUnits"
            case fixedPrice = "fixedPrice"
            case offeringDescription = "offeringDescription"
            case offeringId = "offeringId"
            case offeringType = "offeringType"
            case region = "region"
            case resourceSpecification = "resourceSpecification"
            case usagePrice = "usagePrice"
        }
    }

    public struct Output: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AudioDescriptionNames", location: .body(locationName: "audioDescriptionNames"), required: false, type: .list), 
            AWSShapeMember(label: "CaptionDescriptionNames", location: .body(locationName: "captionDescriptionNames"), required: false, type: .list), 
            AWSShapeMember(label: "OutputName", location: .body(locationName: "outputName"), required: false, type: .string), 
            AWSShapeMember(label: "OutputSettings", location: .body(locationName: "outputSettings"), required: true, type: .structure), 
            AWSShapeMember(label: "VideoDescriptionName", location: .body(locationName: "videoDescriptionName"), required: false, type: .string)
        ]

        /// The names of the AudioDescriptions used as audio sources for this output.
        public let audioDescriptionNames: [String]?
        /// The names of the CaptionDescriptions used as caption sources for this output.
        public let captionDescriptionNames: [String]?
        /// The name used to identify an output.
        public let outputName: String?
        /// Output type-specific settings.
        public let outputSettings: OutputSettings
        /// The name of the VideoDescription used as the source for this output.
        public let videoDescriptionName: String?

        public init(audioDescriptionNames: [String]? = nil, captionDescriptionNames: [String]? = nil, outputName: String? = nil, outputSettings: OutputSettings, videoDescriptionName: String? = nil) {
            self.audioDescriptionNames = audioDescriptionNames
            self.captionDescriptionNames = captionDescriptionNames
            self.outputName = outputName
            self.outputSettings = outputSettings
            self.videoDescriptionName = videoDescriptionName
        }

        public func validate(name: String) throws {
            try validate(self.outputName, name:"outputName", parent: name, max: 255)
            try validate(self.outputName, name:"outputName", parent: name, min: 1)
            try self.outputSettings.validate(name: "\(name).outputSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case audioDescriptionNames = "audioDescriptionNames"
            case captionDescriptionNames = "captionDescriptionNames"
            case outputName = "outputName"
            case outputSettings = "outputSettings"
            case videoDescriptionName = "videoDescriptionName"
        }
    }

    public struct OutputDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "MediaPackageSettings", location: .body(locationName: "mediaPackageSettings"), required: false, type: .list), 
            AWSShapeMember(label: "MultiplexSettings", location: .body(locationName: "multiplexSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Settings", location: .body(locationName: "settings"), required: false, type: .list)
        ]

        /// User-specified id. This is used in an output group or an output.
        public let id: String?
        /// Destination settings for a MediaPackage output; one destination for both encoders.
        public let mediaPackageSettings: [MediaPackageOutputDestinationSettings]?
        /// Destination settings for a Multiplex output; one destination for both encoders.
        public let multiplexSettings: MultiplexProgramChannelDestinationSettings?
        /// Destination settings for a standard output; one destination for each redundant encoder.
        public let settings: [OutputDestinationSettings]?

        public init(id: String? = nil, mediaPackageSettings: [MediaPackageOutputDestinationSettings]? = nil, multiplexSettings: MultiplexProgramChannelDestinationSettings? = nil, settings: [OutputDestinationSettings]? = nil) {
            self.id = id
            self.mediaPackageSettings = mediaPackageSettings
            self.multiplexSettings = multiplexSettings
            self.settings = settings
        }

        public func validate(name: String) throws {
            try self.mediaPackageSettings?.forEach {
                try $0.validate(name: "\(name).mediaPackageSettings[]")
            }
            try self.multiplexSettings?.validate(name: "\(name).multiplexSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case mediaPackageSettings = "mediaPackageSettings"
            case multiplexSettings = "multiplexSettings"
            case settings = "settings"
        }
    }

    public struct OutputDestinationSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PasswordParam", location: .body(locationName: "passwordParam"), required: false, type: .string), 
            AWSShapeMember(label: "StreamName", location: .body(locationName: "streamName"), required: false, type: .string), 
            AWSShapeMember(label: "Url", location: .body(locationName: "url"), required: false, type: .string), 
            AWSShapeMember(label: "Username", location: .body(locationName: "username"), required: false, type: .string)
        ]

        /// key used to extract the password from EC2 Parameter store
        public let passwordParam: String?
        /// Stream name for RTMP destinations (URLs of type rtmp://)
        public let streamName: String?
        /// A URL specifying a destination
        public let url: String?
        /// username for destination
        public let username: String?

        public init(passwordParam: String? = nil, streamName: String? = nil, url: String? = nil, username: String? = nil) {
            self.passwordParam = passwordParam
            self.streamName = streamName
            self.url = url
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case passwordParam = "passwordParam"
            case streamName = "streamName"
            case url = "url"
            case username = "username"
        }
    }

    public struct OutputGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "OutputGroupSettings", location: .body(locationName: "outputGroupSettings"), required: true, type: .structure), 
            AWSShapeMember(label: "Outputs", location: .body(locationName: "outputs"), required: true, type: .list)
        ]

        /// Custom output group name optionally defined by the user.  Only letters, numbers, and the underscore character allowed; only 32 characters allowed.
        public let name: String?
        /// Settings associated with the output group.
        public let outputGroupSettings: OutputGroupSettings
        public let outputs: [Output]

        public init(name: String? = nil, outputGroupSettings: OutputGroupSettings, outputs: [Output]) {
            self.name = name
            self.outputGroupSettings = outputGroupSettings
            self.outputs = outputs
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 32)
            try self.outputGroupSettings.validate(name: "\(name).outputGroupSettings")
            try self.outputs.forEach {
                try $0.validate(name: "\(name).outputs[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case outputGroupSettings = "outputGroupSettings"
            case outputs = "outputs"
        }
    }

    public struct OutputGroupSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ArchiveGroupSettings", location: .body(locationName: "archiveGroupSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "FrameCaptureGroupSettings", location: .body(locationName: "frameCaptureGroupSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "HlsGroupSettings", location: .body(locationName: "hlsGroupSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "MediaPackageGroupSettings", location: .body(locationName: "mediaPackageGroupSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "MsSmoothGroupSettings", location: .body(locationName: "msSmoothGroupSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "MultiplexGroupSettings", location: .body(locationName: "multiplexGroupSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "RtmpGroupSettings", location: .body(locationName: "rtmpGroupSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "UdpGroupSettings", location: .body(locationName: "udpGroupSettings"), required: false, type: .structure)
        ]

        public let archiveGroupSettings: ArchiveGroupSettings?
        public let frameCaptureGroupSettings: FrameCaptureGroupSettings?
        public let hlsGroupSettings: HlsGroupSettings?
        public let mediaPackageGroupSettings: MediaPackageGroupSettings?
        public let msSmoothGroupSettings: MsSmoothGroupSettings?
        public let multiplexGroupSettings: MultiplexGroupSettings?
        public let rtmpGroupSettings: RtmpGroupSettings?
        public let udpGroupSettings: UdpGroupSettings?

        public init(archiveGroupSettings: ArchiveGroupSettings? = nil, frameCaptureGroupSettings: FrameCaptureGroupSettings? = nil, hlsGroupSettings: HlsGroupSettings? = nil, mediaPackageGroupSettings: MediaPackageGroupSettings? = nil, msSmoothGroupSettings: MsSmoothGroupSettings? = nil, multiplexGroupSettings: MultiplexGroupSettings? = nil, rtmpGroupSettings: RtmpGroupSettings? = nil, udpGroupSettings: UdpGroupSettings? = nil) {
            self.archiveGroupSettings = archiveGroupSettings
            self.frameCaptureGroupSettings = frameCaptureGroupSettings
            self.hlsGroupSettings = hlsGroupSettings
            self.mediaPackageGroupSettings = mediaPackageGroupSettings
            self.msSmoothGroupSettings = msSmoothGroupSettings
            self.multiplexGroupSettings = multiplexGroupSettings
            self.rtmpGroupSettings = rtmpGroupSettings
            self.udpGroupSettings = udpGroupSettings
        }

        public func validate(name: String) throws {
            try self.archiveGroupSettings?.validate(name: "\(name).archiveGroupSettings")
            try self.hlsGroupSettings?.validate(name: "\(name).hlsGroupSettings")
            try self.msSmoothGroupSettings?.validate(name: "\(name).msSmoothGroupSettings")
            try self.rtmpGroupSettings?.validate(name: "\(name).rtmpGroupSettings")
            try self.udpGroupSettings?.validate(name: "\(name).udpGroupSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case archiveGroupSettings = "archiveGroupSettings"
            case frameCaptureGroupSettings = "frameCaptureGroupSettings"
            case hlsGroupSettings = "hlsGroupSettings"
            case mediaPackageGroupSettings = "mediaPackageGroupSettings"
            case msSmoothGroupSettings = "msSmoothGroupSettings"
            case multiplexGroupSettings = "multiplexGroupSettings"
            case rtmpGroupSettings = "rtmpGroupSettings"
            case udpGroupSettings = "udpGroupSettings"
        }
    }

    public struct OutputLocationRef: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationRefId", location: .body(locationName: "destinationRefId"), required: false, type: .string)
        ]

        public let destinationRefId: String?

        public init(destinationRefId: String? = nil) {
            self.destinationRefId = destinationRefId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationRefId = "destinationRefId"
        }
    }

    public struct OutputSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ArchiveOutputSettings", location: .body(locationName: "archiveOutputSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "FrameCaptureOutputSettings", location: .body(locationName: "frameCaptureOutputSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "HlsOutputSettings", location: .body(locationName: "hlsOutputSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "MediaPackageOutputSettings", location: .body(locationName: "mediaPackageOutputSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "MsSmoothOutputSettings", location: .body(locationName: "msSmoothOutputSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "MultiplexOutputSettings", location: .body(locationName: "multiplexOutputSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "RtmpOutputSettings", location: .body(locationName: "rtmpOutputSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "UdpOutputSettings", location: .body(locationName: "udpOutputSettings"), required: false, type: .structure)
        ]

        public let archiveOutputSettings: ArchiveOutputSettings?
        public let frameCaptureOutputSettings: FrameCaptureOutputSettings?
        public let hlsOutputSettings: HlsOutputSettings?
        public let mediaPackageOutputSettings: MediaPackageOutputSettings?
        public let msSmoothOutputSettings: MsSmoothOutputSettings?
        public let multiplexOutputSettings: MultiplexOutputSettings?
        public let rtmpOutputSettings: RtmpOutputSettings?
        public let udpOutputSettings: UdpOutputSettings?

        public init(archiveOutputSettings: ArchiveOutputSettings? = nil, frameCaptureOutputSettings: FrameCaptureOutputSettings? = nil, hlsOutputSettings: HlsOutputSettings? = nil, mediaPackageOutputSettings: MediaPackageOutputSettings? = nil, msSmoothOutputSettings: MsSmoothOutputSettings? = nil, multiplexOutputSettings: MultiplexOutputSettings? = nil, rtmpOutputSettings: RtmpOutputSettings? = nil, udpOutputSettings: UdpOutputSettings? = nil) {
            self.archiveOutputSettings = archiveOutputSettings
            self.frameCaptureOutputSettings = frameCaptureOutputSettings
            self.hlsOutputSettings = hlsOutputSettings
            self.mediaPackageOutputSettings = mediaPackageOutputSettings
            self.msSmoothOutputSettings = msSmoothOutputSettings
            self.multiplexOutputSettings = multiplexOutputSettings
            self.rtmpOutputSettings = rtmpOutputSettings
            self.udpOutputSettings = udpOutputSettings
        }

        public func validate(name: String) throws {
            try self.archiveOutputSettings?.validate(name: "\(name).archiveOutputSettings")
            try self.hlsOutputSettings?.validate(name: "\(name).hlsOutputSettings")
            try self.rtmpOutputSettings?.validate(name: "\(name).rtmpOutputSettings")
            try self.udpOutputSettings?.validate(name: "\(name).udpOutputSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case archiveOutputSettings = "archiveOutputSettings"
            case frameCaptureOutputSettings = "frameCaptureOutputSettings"
            case hlsOutputSettings = "hlsOutputSettings"
            case mediaPackageOutputSettings = "mediaPackageOutputSettings"
            case msSmoothOutputSettings = "msSmoothOutputSettings"
            case multiplexOutputSettings = "multiplexOutputSettings"
            case rtmpOutputSettings = "rtmpOutputSettings"
            case udpOutputSettings = "udpOutputSettings"
        }
    }

    public struct PassThroughSettings: AWSShape {


        public init() {
        }

    }

    public struct PauseStateScheduleActionSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Pipelines", location: .body(locationName: "pipelines"), required: false, type: .list)
        ]

        public let pipelines: [PipelinePauseStateSettings]?

        public init(pipelines: [PipelinePauseStateSettings]? = nil) {
            self.pipelines = pipelines
        }

        private enum CodingKeys: String, CodingKey {
            case pipelines = "pipelines"
        }
    }

    public struct PipelineDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActiveInputAttachmentName", location: .body(locationName: "activeInputAttachmentName"), required: false, type: .string), 
            AWSShapeMember(label: "ActiveInputSwitchActionName", location: .body(locationName: "activeInputSwitchActionName"), required: false, type: .string), 
            AWSShapeMember(label: "PipelineId", location: .body(locationName: "pipelineId"), required: false, type: .string)
        ]

        /// The name of the active input attachment currently being ingested by this pipeline.
        public let activeInputAttachmentName: String?
        /// The name of the input switch schedule action that occurred most recently and that resulted in the switch to the current input attachment for this pipeline.
        public let activeInputSwitchActionName: String?
        /// Pipeline ID
        public let pipelineId: String?

        public init(activeInputAttachmentName: String? = nil, activeInputSwitchActionName: String? = nil, pipelineId: String? = nil) {
            self.activeInputAttachmentName = activeInputAttachmentName
            self.activeInputSwitchActionName = activeInputSwitchActionName
            self.pipelineId = pipelineId
        }

        private enum CodingKeys: String, CodingKey {
            case activeInputAttachmentName = "activeInputAttachmentName"
            case activeInputSwitchActionName = "activeInputSwitchActionName"
            case pipelineId = "pipelineId"
        }
    }

    public struct PipelinePauseStateSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PipelineId", location: .body(locationName: "pipelineId"), required: true, type: .enum)
        ]

        /// Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").
        public let pipelineId: PipelineId

        public init(pipelineId: PipelineId) {
            self.pipelineId = pipelineId
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineId = "pipelineId"
        }
    }

    public struct PurchaseOfferingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: true, type: .integer), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingId", location: .uri(locationName: "offeringId"), required: true, type: .string), 
            AWSShapeMember(label: "RequestId", location: .body(locationName: "requestId"), required: false, type: .string), 
            AWSShapeMember(label: "Start", location: .body(locationName: "start"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let count: Int
        public let name: String?
        public let offeringId: String
        public let requestId: String?
        public let start: String?
        public let tags: [String: String]?

        public init(count: Int, name: String? = nil, offeringId: String, requestId: String? = PurchaseOfferingRequest.idempotencyToken(), start: String? = nil, tags: [String: String]? = nil) {
            self.count = count
            self.name = name
            self.offeringId = offeringId
            self.requestId = requestId
            self.start = start
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.count, name:"count", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case name = "name"
            case offeringId = "offeringId"
            case requestId = "requestId"
            case start = "start"
            case tags = "tags"
        }
    }

    public struct PurchaseOfferingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reservation", location: .body(locationName: "reservation"), required: false, type: .structure)
        ]

        public let reservation: Reservation?

        public init(reservation: Reservation? = nil) {
            self.reservation = reservation
        }

        private enum CodingKeys: String, CodingKey {
            case reservation = "reservation"
        }
    }

    public struct Rec601Settings: AWSShape {


        public init() {
        }

    }

    public struct Rec709Settings: AWSShape {


        public init() {
        }

    }

    public struct RemixSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelMappings", location: .body(locationName: "channelMappings"), required: true, type: .list), 
            AWSShapeMember(label: "ChannelsIn", location: .body(locationName: "channelsIn"), required: false, type: .integer), 
            AWSShapeMember(label: "ChannelsOut", location: .body(locationName: "channelsOut"), required: false, type: .integer)
        ]

        /// Mapping of input channels to output channels, with appropriate gain adjustments.
        public let channelMappings: [AudioChannelMapping]
        /// Number of input channels to be used.
        public let channelsIn: Int?
        /// Number of output channels to be produced.
        /// Valid values: 1, 2, 4, 6, 8
        public let channelsOut: Int?

        public init(channelMappings: [AudioChannelMapping], channelsIn: Int? = nil, channelsOut: Int? = nil) {
            self.channelMappings = channelMappings
            self.channelsIn = channelsIn
            self.channelsOut = channelsOut
        }

        public func validate(name: String) throws {
            try self.channelMappings.forEach {
                try $0.validate(name: "\(name).channelMappings[]")
            }
            try validate(self.channelsIn, name:"channelsIn", parent: name, max: 16)
            try validate(self.channelsIn, name:"channelsIn", parent: name, min: 1)
            try validate(self.channelsOut, name:"channelsOut", parent: name, max: 8)
            try validate(self.channelsOut, name:"channelsOut", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case channelMappings = "channelMappings"
            case channelsIn = "channelsIn"
            case channelsOut = "channelsOut"
        }
    }

    public struct Reservation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .string), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "DurationUnits", location: .body(locationName: "durationUnits"), required: false, type: .enum), 
            AWSShapeMember(label: "End", location: .body(locationName: "end"), required: false, type: .string), 
            AWSShapeMember(label: "FixedPrice", location: .body(locationName: "fixedPrice"), required: false, type: .double), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingDescription", location: .body(locationName: "offeringDescription"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "Region", location: .body(locationName: "region"), required: false, type: .string), 
            AWSShapeMember(label: "ReservationId", location: .body(locationName: "reservationId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceSpecification", location: .body(locationName: "resourceSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Start", location: .body(locationName: "start"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "UsagePrice", location: .body(locationName: "usagePrice"), required: false, type: .double)
        ]

        /// Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
        public let arn: String?
        /// Number of reserved resources
        public let count: Int?
        /// Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
        public let currencyCode: String?
        /// Lease duration, e.g. '12'
        public let duration: Int?
        /// Units for duration, e.g. 'MONTHS'
        public let durationUnits: OfferingDurationUnits?
        /// Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
        public let end: String?
        /// One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
        public let fixedPrice: Double?
        /// User specified reservation name
        public let name: String?
        /// Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
        public let offeringDescription: String?
        /// Unique offering ID, e.g. '87654321'
        public let offeringId: String?
        /// Offering type, e.g. 'NO_UPFRONT'
        public let offeringType: OfferingType?
        /// AWS region, e.g. 'us-west-2'
        public let region: String?
        /// Unique reservation ID, e.g. '1234567'
        public let reservationId: String?
        /// Resource configuration details
        public let resourceSpecification: ReservationResourceSpecification?
        /// Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
        public let start: String?
        /// Current state of reservation, e.g. 'ACTIVE'
        public let state: ReservationState?
        /// A collection of key-value pairs
        public let tags: [String: String]?
        /// Recurring usage charge for each reserved resource, e.g. '157.0'
        public let usagePrice: Double?

        public init(arn: String? = nil, count: Int? = nil, currencyCode: String? = nil, duration: Int? = nil, durationUnits: OfferingDurationUnits? = nil, end: String? = nil, fixedPrice: Double? = nil, name: String? = nil, offeringDescription: String? = nil, offeringId: String? = nil, offeringType: OfferingType? = nil, region: String? = nil, reservationId: String? = nil, resourceSpecification: ReservationResourceSpecification? = nil, start: String? = nil, state: ReservationState? = nil, tags: [String: String]? = nil, usagePrice: Double? = nil) {
            self.arn = arn
            self.count = count
            self.currencyCode = currencyCode
            self.duration = duration
            self.durationUnits = durationUnits
            self.end = end
            self.fixedPrice = fixedPrice
            self.name = name
            self.offeringDescription = offeringDescription
            self.offeringId = offeringId
            self.offeringType = offeringType
            self.region = region
            self.reservationId = reservationId
            self.resourceSpecification = resourceSpecification
            self.start = start
            self.state = state
            self.tags = tags
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case count = "count"
            case currencyCode = "currencyCode"
            case duration = "duration"
            case durationUnits = "durationUnits"
            case end = "end"
            case fixedPrice = "fixedPrice"
            case name = "name"
            case offeringDescription = "offeringDescription"
            case offeringId = "offeringId"
            case offeringType = "offeringType"
            case region = "region"
            case reservationId = "reservationId"
            case resourceSpecification = "resourceSpecification"
            case start = "start"
            case state = "state"
            case tags = "tags"
            case usagePrice = "usagePrice"
        }
    }

    public struct ReservationResourceSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelClass", location: .body(locationName: "channelClass"), required: false, type: .enum), 
            AWSShapeMember(label: "Codec", location: .body(locationName: "codec"), required: false, type: .enum), 
            AWSShapeMember(label: "MaximumBitrate", location: .body(locationName: "maximumBitrate"), required: false, type: .enum), 
            AWSShapeMember(label: "MaximumFramerate", location: .body(locationName: "maximumFramerate"), required: false, type: .enum), 
            AWSShapeMember(label: "Resolution", location: .body(locationName: "resolution"), required: false, type: .enum), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "SpecialFeature", location: .body(locationName: "specialFeature"), required: false, type: .enum), 
            AWSShapeMember(label: "VideoQuality", location: .body(locationName: "videoQuality"), required: false, type: .enum)
        ]

        /// Channel class, e.g. 'STANDARD'
        public let channelClass: ChannelClass?
        /// Codec, e.g. 'AVC'
        public let codec: ReservationCodec?
        /// Maximum bitrate, e.g. 'MAX_20_MBPS'
        public let maximumBitrate: ReservationMaximumBitrate?
        /// Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)
        public let maximumFramerate: ReservationMaximumFramerate?
        /// Resolution, e.g. 'HD'
        public let resolution: ReservationResolution?
        /// Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
        public let resourceType: ReservationResourceType?
        /// Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)
        public let specialFeature: ReservationSpecialFeature?
        /// Video quality, e.g. 'STANDARD' (Outputs only)
        public let videoQuality: ReservationVideoQuality?

        public init(channelClass: ChannelClass? = nil, codec: ReservationCodec? = nil, maximumBitrate: ReservationMaximumBitrate? = nil, maximumFramerate: ReservationMaximumFramerate? = nil, resolution: ReservationResolution? = nil, resourceType: ReservationResourceType? = nil, specialFeature: ReservationSpecialFeature? = nil, videoQuality: ReservationVideoQuality? = nil) {
            self.channelClass = channelClass
            self.codec = codec
            self.maximumBitrate = maximumBitrate
            self.maximumFramerate = maximumFramerate
            self.resolution = resolution
            self.resourceType = resourceType
            self.specialFeature = specialFeature
            self.videoQuality = videoQuality
        }

        private enum CodingKeys: String, CodingKey {
            case channelClass = "channelClass"
            case codec = "codec"
            case maximumBitrate = "maximumBitrate"
            case maximumFramerate = "maximumFramerate"
            case resolution = "resolution"
            case resourceType = "resourceType"
            case specialFeature = "specialFeature"
            case videoQuality = "videoQuality"
        }
    }

    public struct RtmpCaptionInfoDestinationSettings: AWSShape {


        public init() {
        }

    }

    public struct RtmpGroupSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationScheme", location: .body(locationName: "authenticationScheme"), required: false, type: .enum), 
            AWSShapeMember(label: "CacheFullBehavior", location: .body(locationName: "cacheFullBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "CacheLength", location: .body(locationName: "cacheLength"), required: false, type: .integer), 
            AWSShapeMember(label: "CaptionData", location: .body(locationName: "captionData"), required: false, type: .enum), 
            AWSShapeMember(label: "InputLossAction", location: .body(locationName: "inputLossAction"), required: false, type: .enum), 
            AWSShapeMember(label: "RestartDelay", location: .body(locationName: "restartDelay"), required: false, type: .integer)
        ]

        /// Authentication scheme to use when connecting with CDN
        public let authenticationScheme: AuthenticationScheme?
        /// Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.
        public let cacheFullBehavior: RtmpCacheFullBehavior?
        /// Cache length, in seconds, is used to calculate buffer size.
        public let cacheLength: Int?
        /// Controls the types of data that passes to onCaptionInfo outputs.  If set to 'all' then 608 and 708 carried DTVCC data will be passed.  If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.
        public let captionData: RtmpCaptionData?
        /// Controls the behavior of this RTMP group if input becomes unavailable.
        /// - emitOutput: Emit a slate until input returns.
        /// - pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.
        public let inputLossAction: InputLossActionForRtmpOut?
        /// If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
        public let restartDelay: Int?

        public init(authenticationScheme: AuthenticationScheme? = nil, cacheFullBehavior: RtmpCacheFullBehavior? = nil, cacheLength: Int? = nil, captionData: RtmpCaptionData? = nil, inputLossAction: InputLossActionForRtmpOut? = nil, restartDelay: Int? = nil) {
            self.authenticationScheme = authenticationScheme
            self.cacheFullBehavior = cacheFullBehavior
            self.cacheLength = cacheLength
            self.captionData = captionData
            self.inputLossAction = inputLossAction
            self.restartDelay = restartDelay
        }

        public func validate(name: String) throws {
            try validate(self.cacheLength, name:"cacheLength", parent: name, min: 30)
            try validate(self.restartDelay, name:"restartDelay", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationScheme = "authenticationScheme"
            case cacheFullBehavior = "cacheFullBehavior"
            case cacheLength = "cacheLength"
            case captionData = "captionData"
            case inputLossAction = "inputLossAction"
            case restartDelay = "restartDelay"
        }
    }

    public struct RtmpOutputSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateMode", location: .body(locationName: "certificateMode"), required: false, type: .enum), 
            AWSShapeMember(label: "ConnectionRetryInterval", location: .body(locationName: "connectionRetryInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: true, type: .structure), 
            AWSShapeMember(label: "NumRetries", location: .body(locationName: "numRetries"), required: false, type: .integer)
        ]

        /// If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA).  This will cause rtmps outputs with self-signed certificates to fail.
        public let certificateMode: RtmpOutputCertificateMode?
        /// Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
        public let connectionRetryInterval: Int?
        /// The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
        public let destination: OutputLocationRef
        /// Number of retry attempts.
        public let numRetries: Int?

        public init(certificateMode: RtmpOutputCertificateMode? = nil, connectionRetryInterval: Int? = nil, destination: OutputLocationRef, numRetries: Int? = nil) {
            self.certificateMode = certificateMode
            self.connectionRetryInterval = connectionRetryInterval
            self.destination = destination
            self.numRetries = numRetries
        }

        public func validate(name: String) throws {
            try validate(self.connectionRetryInterval, name:"connectionRetryInterval", parent: name, min: 1)
            try validate(self.numRetries, name:"numRetries", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case certificateMode = "certificateMode"
            case connectionRetryInterval = "connectionRetryInterval"
            case destination = "destination"
            case numRetries = "numRetries"
        }
    }

    public struct ScheduleAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionName", location: .body(locationName: "actionName"), required: true, type: .string), 
            AWSShapeMember(label: "ScheduleActionSettings", location: .body(locationName: "scheduleActionSettings"), required: true, type: .structure), 
            AWSShapeMember(label: "ScheduleActionStartSettings", location: .body(locationName: "scheduleActionStartSettings"), required: true, type: .structure)
        ]

        /// The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.
        public let actionName: String
        /// Settings for this schedule action.
        public let scheduleActionSettings: ScheduleActionSettings
        /// The time for the action to start in the channel.
        public let scheduleActionStartSettings: ScheduleActionStartSettings

        public init(actionName: String, scheduleActionSettings: ScheduleActionSettings, scheduleActionStartSettings: ScheduleActionStartSettings) {
            self.actionName = actionName
            self.scheduleActionSettings = scheduleActionSettings
            self.scheduleActionStartSettings = scheduleActionStartSettings
        }

        public func validate(name: String) throws {
            try self.scheduleActionSettings.validate(name: "\(name).scheduleActionSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case actionName = "actionName"
            case scheduleActionSettings = "scheduleActionSettings"
            case scheduleActionStartSettings = "scheduleActionStartSettings"
        }
    }

    public struct ScheduleActionSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HlsId3SegmentTaggingSettings", location: .body(locationName: "hlsId3SegmentTaggingSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "HlsTimedMetadataSettings", location: .body(locationName: "hlsTimedMetadataSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "InputSwitchSettings", location: .body(locationName: "inputSwitchSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "PauseStateSettings", location: .body(locationName: "pauseStateSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Scte35ReturnToNetworkSettings", location: .body(locationName: "scte35ReturnToNetworkSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Scte35SpliceInsertSettings", location: .body(locationName: "scte35SpliceInsertSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Scte35TimeSignalSettings", location: .body(locationName: "scte35TimeSignalSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "StaticImageActivateSettings", location: .body(locationName: "staticImageActivateSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "StaticImageDeactivateSettings", location: .body(locationName: "staticImageDeactivateSettings"), required: false, type: .structure)
        ]

        /// Action to insert HLS ID3 segment tagging
        public let hlsId3SegmentTaggingSettings: HlsId3SegmentTaggingScheduleActionSettings?
        /// Action to insert HLS metadata
        public let hlsTimedMetadataSettings: HlsTimedMetadataScheduleActionSettings?
        /// Action to switch the input
        public let inputSwitchSettings: InputSwitchScheduleActionSettings?
        /// Action to pause or unpause one or both channel pipelines
        public let pauseStateSettings: PauseStateScheduleActionSettings?
        /// Action to insert SCTE-35 return_to_network message
        public let scte35ReturnToNetworkSettings: Scte35ReturnToNetworkScheduleActionSettings?
        /// Action to insert SCTE-35 splice_insert message
        public let scte35SpliceInsertSettings: Scte35SpliceInsertScheduleActionSettings?
        /// Action to insert SCTE-35 time_signal message
        public let scte35TimeSignalSettings: Scte35TimeSignalScheduleActionSettings?
        /// Action to activate a static image overlay
        public let staticImageActivateSettings: StaticImageActivateScheduleActionSettings?
        /// Action to deactivate a static image overlay
        public let staticImageDeactivateSettings: StaticImageDeactivateScheduleActionSettings?

        public init(hlsId3SegmentTaggingSettings: HlsId3SegmentTaggingScheduleActionSettings? = nil, hlsTimedMetadataSettings: HlsTimedMetadataScheduleActionSettings? = nil, inputSwitchSettings: InputSwitchScheduleActionSettings? = nil, pauseStateSettings: PauseStateScheduleActionSettings? = nil, scte35ReturnToNetworkSettings: Scte35ReturnToNetworkScheduleActionSettings? = nil, scte35SpliceInsertSettings: Scte35SpliceInsertScheduleActionSettings? = nil, scte35TimeSignalSettings: Scte35TimeSignalScheduleActionSettings? = nil, staticImageActivateSettings: StaticImageActivateScheduleActionSettings? = nil, staticImageDeactivateSettings: StaticImageDeactivateScheduleActionSettings? = nil) {
            self.hlsId3SegmentTaggingSettings = hlsId3SegmentTaggingSettings
            self.hlsTimedMetadataSettings = hlsTimedMetadataSettings
            self.inputSwitchSettings = inputSwitchSettings
            self.pauseStateSettings = pauseStateSettings
            self.scte35ReturnToNetworkSettings = scte35ReturnToNetworkSettings
            self.scte35SpliceInsertSettings = scte35SpliceInsertSettings
            self.scte35TimeSignalSettings = scte35TimeSignalSettings
            self.staticImageActivateSettings = staticImageActivateSettings
            self.staticImageDeactivateSettings = staticImageDeactivateSettings
        }

        public func validate(name: String) throws {
            try self.scte35ReturnToNetworkSettings?.validate(name: "\(name).scte35ReturnToNetworkSettings")
            try self.scte35SpliceInsertSettings?.validate(name: "\(name).scte35SpliceInsertSettings")
            try self.scte35TimeSignalSettings?.validate(name: "\(name).scte35TimeSignalSettings")
            try self.staticImageActivateSettings?.validate(name: "\(name).staticImageActivateSettings")
            try self.staticImageDeactivateSettings?.validate(name: "\(name).staticImageDeactivateSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case hlsId3SegmentTaggingSettings = "hlsId3SegmentTaggingSettings"
            case hlsTimedMetadataSettings = "hlsTimedMetadataSettings"
            case inputSwitchSettings = "inputSwitchSettings"
            case pauseStateSettings = "pauseStateSettings"
            case scte35ReturnToNetworkSettings = "scte35ReturnToNetworkSettings"
            case scte35SpliceInsertSettings = "scte35SpliceInsertSettings"
            case scte35TimeSignalSettings = "scte35TimeSignalSettings"
            case staticImageActivateSettings = "staticImageActivateSettings"
            case staticImageDeactivateSettings = "staticImageDeactivateSettings"
        }
    }

    public struct ScheduleActionStartSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FixedModeScheduleActionStartSettings", location: .body(locationName: "fixedModeScheduleActionStartSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "FollowModeScheduleActionStartSettings", location: .body(locationName: "followModeScheduleActionStartSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ImmediateModeScheduleActionStartSettings", location: .body(locationName: "immediateModeScheduleActionStartSettings"), required: false, type: .structure)
        ]

        /// Option for specifying the start time for an action.
        public let fixedModeScheduleActionStartSettings: FixedModeScheduleActionStartSettings?
        /// Option for specifying an action as relative to another action.
        public let followModeScheduleActionStartSettings: FollowModeScheduleActionStartSettings?
        /// Option for specifying an action that should be applied immediately.
        public let immediateModeScheduleActionStartSettings: ImmediateModeScheduleActionStartSettings?

        public init(fixedModeScheduleActionStartSettings: FixedModeScheduleActionStartSettings? = nil, followModeScheduleActionStartSettings: FollowModeScheduleActionStartSettings? = nil, immediateModeScheduleActionStartSettings: ImmediateModeScheduleActionStartSettings? = nil) {
            self.fixedModeScheduleActionStartSettings = fixedModeScheduleActionStartSettings
            self.followModeScheduleActionStartSettings = followModeScheduleActionStartSettings
            self.immediateModeScheduleActionStartSettings = immediateModeScheduleActionStartSettings
        }

        private enum CodingKeys: String, CodingKey {
            case fixedModeScheduleActionStartSettings = "fixedModeScheduleActionStartSettings"
            case followModeScheduleActionStartSettings = "followModeScheduleActionStartSettings"
            case immediateModeScheduleActionStartSettings = "immediateModeScheduleActionStartSettings"
        }
    }

    public struct Scte20PlusEmbeddedDestinationSettings: AWSShape {


        public init() {
        }

    }

    public struct Scte20SourceSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Convert608To708", location: .body(locationName: "convert608To708"), required: false, type: .enum), 
            AWSShapeMember(label: "Source608ChannelNumber", location: .body(locationName: "source608ChannelNumber"), required: false, type: .integer)
        ]

        /// If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
        public let convert608To708: Scte20Convert608To708?
        /// Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
        public let source608ChannelNumber: Int?

        public init(convert608To708: Scte20Convert608To708? = nil, source608ChannelNumber: Int? = nil) {
            self.convert608To708 = convert608To708
            self.source608ChannelNumber = source608ChannelNumber
        }

        public func validate(name: String) throws {
            try validate(self.source608ChannelNumber, name:"source608ChannelNumber", parent: name, max: 4)
            try validate(self.source608ChannelNumber, name:"source608ChannelNumber", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case convert608To708 = "convert608To708"
            case source608ChannelNumber = "source608ChannelNumber"
        }
    }

    public struct Scte27DestinationSettings: AWSShape {


        public init() {
        }

    }

    public struct Scte27SourceSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Pid", location: .body(locationName: "pid"), required: false, type: .integer)
        ]

        /// The pid field is used in conjunction with the caption selector languageCode field as follows:
        ///   - Specify PID and Language: Extracts captions from that PID; the language is "informational".
        ///   - Specify PID and omit Language: Extracts the specified PID.
        ///   - Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be.
        ///   - Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.
        public let pid: Int?

        public init(pid: Int? = nil) {
            self.pid = pid
        }

        public func validate(name: String) throws {
            try validate(self.pid, name:"pid", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case pid = "pid"
        }
    }

    public struct Scte35DeliveryRestrictions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ArchiveAllowedFlag", location: .body(locationName: "archiveAllowedFlag"), required: true, type: .enum), 
            AWSShapeMember(label: "DeviceRestrictions", location: .body(locationName: "deviceRestrictions"), required: true, type: .enum), 
            AWSShapeMember(label: "NoRegionalBlackoutFlag", location: .body(locationName: "noRegionalBlackoutFlag"), required: true, type: .enum), 
            AWSShapeMember(label: "WebDeliveryAllowedFlag", location: .body(locationName: "webDeliveryAllowedFlag"), required: true, type: .enum)
        ]

        /// Corresponds to SCTE-35 archive_allowed_flag.
        public let archiveAllowedFlag: Scte35ArchiveAllowedFlag
        /// Corresponds to SCTE-35 device_restrictions parameter.
        public let deviceRestrictions: Scte35DeviceRestrictions
        /// Corresponds to SCTE-35 no_regional_blackout_flag parameter.
        public let noRegionalBlackoutFlag: Scte35NoRegionalBlackoutFlag
        /// Corresponds to SCTE-35 web_delivery_allowed_flag parameter.
        public let webDeliveryAllowedFlag: Scte35WebDeliveryAllowedFlag

        public init(archiveAllowedFlag: Scte35ArchiveAllowedFlag, deviceRestrictions: Scte35DeviceRestrictions, noRegionalBlackoutFlag: Scte35NoRegionalBlackoutFlag, webDeliveryAllowedFlag: Scte35WebDeliveryAllowedFlag) {
            self.archiveAllowedFlag = archiveAllowedFlag
            self.deviceRestrictions = deviceRestrictions
            self.noRegionalBlackoutFlag = noRegionalBlackoutFlag
            self.webDeliveryAllowedFlag = webDeliveryAllowedFlag
        }

        private enum CodingKeys: String, CodingKey {
            case archiveAllowedFlag = "archiveAllowedFlag"
            case deviceRestrictions = "deviceRestrictions"
            case noRegionalBlackoutFlag = "noRegionalBlackoutFlag"
            case webDeliveryAllowedFlag = "webDeliveryAllowedFlag"
        }
    }

    public struct Scte35Descriptor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Scte35DescriptorSettings", location: .body(locationName: "scte35DescriptorSettings"), required: true, type: .structure)
        ]

        /// SCTE-35 Descriptor Settings.
        public let scte35DescriptorSettings: Scte35DescriptorSettings

        public init(scte35DescriptorSettings: Scte35DescriptorSettings) {
            self.scte35DescriptorSettings = scte35DescriptorSettings
        }

        public func validate(name: String) throws {
            try self.scte35DescriptorSettings.validate(name: "\(name).scte35DescriptorSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case scte35DescriptorSettings = "scte35DescriptorSettings"
        }
    }

    public struct Scte35DescriptorSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentationDescriptorScte35DescriptorSettings", location: .body(locationName: "segmentationDescriptorScte35DescriptorSettings"), required: true, type: .structure)
        ]

        /// SCTE-35 Segmentation Descriptor.
        public let segmentationDescriptorScte35DescriptorSettings: Scte35SegmentationDescriptor

        public init(segmentationDescriptorScte35DescriptorSettings: Scte35SegmentationDescriptor) {
            self.segmentationDescriptorScte35DescriptorSettings = segmentationDescriptorScte35DescriptorSettings
        }

        public func validate(name: String) throws {
            try self.segmentationDescriptorScte35DescriptorSettings.validate(name: "\(name).segmentationDescriptorScte35DescriptorSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case segmentationDescriptorScte35DescriptorSettings = "segmentationDescriptorScte35DescriptorSettings"
        }
    }

    public struct Scte35ReturnToNetworkScheduleActionSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpliceEventId", location: .body(locationName: "spliceEventId"), required: true, type: .long)
        ]

        /// The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
        public let spliceEventId: Int64

        public init(spliceEventId: Int64) {
            self.spliceEventId = spliceEventId
        }

        public func validate(name: String) throws {
            try validate(self.spliceEventId, name:"spliceEventId", parent: name, max: 4294967295)
            try validate(self.spliceEventId, name:"spliceEventId", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case spliceEventId = "spliceEventId"
        }
    }

    public struct Scte35SegmentationDescriptor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryRestrictions", location: .body(locationName: "deliveryRestrictions"), required: false, type: .structure), 
            AWSShapeMember(label: "SegmentationCancelIndicator", location: .body(locationName: "segmentationCancelIndicator"), required: true, type: .enum), 
            AWSShapeMember(label: "SegmentationDuration", location: .body(locationName: "segmentationDuration"), required: false, type: .long), 
            AWSShapeMember(label: "SegmentationEventId", location: .body(locationName: "segmentationEventId"), required: true, type: .long), 
            AWSShapeMember(label: "SegmentationTypeId", location: .body(locationName: "segmentationTypeId"), required: false, type: .integer), 
            AWSShapeMember(label: "SegmentationUpid", location: .body(locationName: "segmentationUpid"), required: false, type: .string), 
            AWSShapeMember(label: "SegmentationUpidType", location: .body(locationName: "segmentationUpidType"), required: false, type: .integer), 
            AWSShapeMember(label: "SegmentNum", location: .body(locationName: "segmentNum"), required: false, type: .integer), 
            AWSShapeMember(label: "SegmentsExpected", location: .body(locationName: "segmentsExpected"), required: false, type: .integer), 
            AWSShapeMember(label: "SubSegmentNum", location: .body(locationName: "subSegmentNum"), required: false, type: .integer), 
            AWSShapeMember(label: "SubSegmentsExpected", location: .body(locationName: "subSegmentsExpected"), required: false, type: .integer)
        ]

        /// Holds the four SCTE-35 delivery restriction parameters.
        public let deliveryRestrictions: Scte35DeliveryRestrictions?
        /// Corresponds to SCTE-35 segmentation_event_cancel_indicator.
        public let segmentationCancelIndicator: Scte35SegmentationCancelIndicator
        /// Corresponds to SCTE-35 segmentation_duration. Optional. The duration for the time_signal, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time in 90 KHz clock ticks. If you do not enter a duration, the time_signal will continue until you insert a cancellation message.
        public let segmentationDuration: Int64?
        /// Corresponds to SCTE-35 segmentation_event_id. 
        public let segmentationEventId: Int64
        /// Corresponds to SCTE-35 segmentation_type_id. One of the segmentation_type_id values listed in the SCTE-35 specification. On the console, enter the ID in decimal (for example, "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or decimal (for example, "52").
        public let segmentationTypeId: Int?
        /// Corresponds to SCTE-35 segmentation_upid. Enter a string containing the hexadecimal representation of the characters that make up the SCTE-35 segmentation_upid value. Must contain an even number of hex characters. Do not include spaces between each hex pair. For example, the ASCII "ADS Information" becomes hex "41445320496e666f726d6174696f6e.
        public let segmentationUpid: String?
        /// Corresponds to SCTE-35 segmentation_upid_type. On the console, enter one of the types listed in the SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the types listed in the SCTE-35 specification, in either hex (for example, "0x0C" ) or in decimal (for example, "12").
        public let segmentationUpidType: Int?
        /// Corresponds to SCTE-35 segment_num. A value that is valid for the specified segmentation_type_id.
        public let segmentNum: Int?
        /// Corresponds to SCTE-35 segments_expected. A value that is valid for the specified segmentation_type_id.
        public let segmentsExpected: Int?
        /// Corresponds to SCTE-35 sub_segment_num. A value that is valid for the specified segmentation_type_id.
        public let subSegmentNum: Int?
        /// Corresponds to SCTE-35 sub_segments_expected. A value that is valid for the specified segmentation_type_id.
        public let subSegmentsExpected: Int?

        public init(deliveryRestrictions: Scte35DeliveryRestrictions? = nil, segmentationCancelIndicator: Scte35SegmentationCancelIndicator, segmentationDuration: Int64? = nil, segmentationEventId: Int64, segmentationTypeId: Int? = nil, segmentationUpid: String? = nil, segmentationUpidType: Int? = nil, segmentNum: Int? = nil, segmentsExpected: Int? = nil, subSegmentNum: Int? = nil, subSegmentsExpected: Int? = nil) {
            self.deliveryRestrictions = deliveryRestrictions
            self.segmentationCancelIndicator = segmentationCancelIndicator
            self.segmentationDuration = segmentationDuration
            self.segmentationEventId = segmentationEventId
            self.segmentationTypeId = segmentationTypeId
            self.segmentationUpid = segmentationUpid
            self.segmentationUpidType = segmentationUpidType
            self.segmentNum = segmentNum
            self.segmentsExpected = segmentsExpected
            self.subSegmentNum = subSegmentNum
            self.subSegmentsExpected = subSegmentsExpected
        }

        public func validate(name: String) throws {
            try validate(self.segmentationDuration, name:"segmentationDuration", parent: name, max: 1099511627775)
            try validate(self.segmentationDuration, name:"segmentationDuration", parent: name, min: 0)
            try validate(self.segmentationEventId, name:"segmentationEventId", parent: name, max: 4294967295)
            try validate(self.segmentationEventId, name:"segmentationEventId", parent: name, min: 0)
            try validate(self.segmentationTypeId, name:"segmentationTypeId", parent: name, max: 255)
            try validate(self.segmentationTypeId, name:"segmentationTypeId", parent: name, min: 0)
            try validate(self.segmentationUpidType, name:"segmentationUpidType", parent: name, max: 255)
            try validate(self.segmentationUpidType, name:"segmentationUpidType", parent: name, min: 0)
            try validate(self.segmentNum, name:"segmentNum", parent: name, max: 255)
            try validate(self.segmentNum, name:"segmentNum", parent: name, min: 0)
            try validate(self.segmentsExpected, name:"segmentsExpected", parent: name, max: 255)
            try validate(self.segmentsExpected, name:"segmentsExpected", parent: name, min: 0)
            try validate(self.subSegmentNum, name:"subSegmentNum", parent: name, max: 255)
            try validate(self.subSegmentNum, name:"subSegmentNum", parent: name, min: 0)
            try validate(self.subSegmentsExpected, name:"subSegmentsExpected", parent: name, max: 255)
            try validate(self.subSegmentsExpected, name:"subSegmentsExpected", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryRestrictions = "deliveryRestrictions"
            case segmentationCancelIndicator = "segmentationCancelIndicator"
            case segmentationDuration = "segmentationDuration"
            case segmentationEventId = "segmentationEventId"
            case segmentationTypeId = "segmentationTypeId"
            case segmentationUpid = "segmentationUpid"
            case segmentationUpidType = "segmentationUpidType"
            case segmentNum = "segmentNum"
            case segmentsExpected = "segmentsExpected"
            case subSegmentNum = "subSegmentNum"
            case subSegmentsExpected = "subSegmentsExpected"
        }
    }

    public struct Scte35SpliceInsert: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdAvailOffset", location: .body(locationName: "adAvailOffset"), required: false, type: .integer), 
            AWSShapeMember(label: "NoRegionalBlackoutFlag", location: .body(locationName: "noRegionalBlackoutFlag"), required: false, type: .enum), 
            AWSShapeMember(label: "WebDeliveryAllowedFlag", location: .body(locationName: "webDeliveryAllowedFlag"), required: false, type: .enum)
        ]

        /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
        public let adAvailOffset: Int?
        /// When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
        public let noRegionalBlackoutFlag: Scte35SpliceInsertNoRegionalBlackoutBehavior?
        /// When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
        public let webDeliveryAllowedFlag: Scte35SpliceInsertWebDeliveryAllowedBehavior?

        public init(adAvailOffset: Int? = nil, noRegionalBlackoutFlag: Scte35SpliceInsertNoRegionalBlackoutBehavior? = nil, webDeliveryAllowedFlag: Scte35SpliceInsertWebDeliveryAllowedBehavior? = nil) {
            self.adAvailOffset = adAvailOffset
            self.noRegionalBlackoutFlag = noRegionalBlackoutFlag
            self.webDeliveryAllowedFlag = webDeliveryAllowedFlag
        }

        public func validate(name: String) throws {
            try validate(self.adAvailOffset, name:"adAvailOffset", parent: name, max: 1000)
            try validate(self.adAvailOffset, name:"adAvailOffset", parent: name, min: -1000)
        }

        private enum CodingKeys: String, CodingKey {
            case adAvailOffset = "adAvailOffset"
            case noRegionalBlackoutFlag = "noRegionalBlackoutFlag"
            case webDeliveryAllowedFlag = "webDeliveryAllowedFlag"
        }
    }

    public struct Scte35SpliceInsertScheduleActionSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .long), 
            AWSShapeMember(label: "SpliceEventId", location: .body(locationName: "spliceEventId"), required: true, type: .long)
        ]

        /// Optional, the duration for the splice_insert, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a duration, there is an expectation that the downstream system can read the duration and cue in at that time. If you do not enter a duration, the splice_insert will continue indefinitely and there is an expectation that you will enter a return_to_network to end the splice_insert at the appropriate time.
        public let duration: Int64?
        /// The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
        public let spliceEventId: Int64

        public init(duration: Int64? = nil, spliceEventId: Int64) {
            self.duration = duration
            self.spliceEventId = spliceEventId
        }

        public func validate(name: String) throws {
            try validate(self.duration, name:"duration", parent: name, max: 8589934591)
            try validate(self.duration, name:"duration", parent: name, min: 0)
            try validate(self.spliceEventId, name:"spliceEventId", parent: name, max: 4294967295)
            try validate(self.spliceEventId, name:"spliceEventId", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "duration"
            case spliceEventId = "spliceEventId"
        }
    }

    public struct Scte35TimeSignalApos: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdAvailOffset", location: .body(locationName: "adAvailOffset"), required: false, type: .integer), 
            AWSShapeMember(label: "NoRegionalBlackoutFlag", location: .body(locationName: "noRegionalBlackoutFlag"), required: false, type: .enum), 
            AWSShapeMember(label: "WebDeliveryAllowedFlag", location: .body(locationName: "webDeliveryAllowedFlag"), required: false, type: .enum)
        ]

        /// When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
        public let adAvailOffset: Int?
        /// When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
        public let noRegionalBlackoutFlag: Scte35AposNoRegionalBlackoutBehavior?
        /// When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
        public let webDeliveryAllowedFlag: Scte35AposWebDeliveryAllowedBehavior?

        public init(adAvailOffset: Int? = nil, noRegionalBlackoutFlag: Scte35AposNoRegionalBlackoutBehavior? = nil, webDeliveryAllowedFlag: Scte35AposWebDeliveryAllowedBehavior? = nil) {
            self.adAvailOffset = adAvailOffset
            self.noRegionalBlackoutFlag = noRegionalBlackoutFlag
            self.webDeliveryAllowedFlag = webDeliveryAllowedFlag
        }

        public func validate(name: String) throws {
            try validate(self.adAvailOffset, name:"adAvailOffset", parent: name, max: 1000)
            try validate(self.adAvailOffset, name:"adAvailOffset", parent: name, min: -1000)
        }

        private enum CodingKeys: String, CodingKey {
            case adAvailOffset = "adAvailOffset"
            case noRegionalBlackoutFlag = "noRegionalBlackoutFlag"
            case webDeliveryAllowedFlag = "webDeliveryAllowedFlag"
        }
    }

    public struct Scte35TimeSignalScheduleActionSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Scte35Descriptors", location: .body(locationName: "scte35Descriptors"), required: true, type: .list)
        ]

        /// The list of SCTE-35 descriptors accompanying the SCTE-35 time_signal.
        public let scte35Descriptors: [Scte35Descriptor]

        public init(scte35Descriptors: [Scte35Descriptor]) {
            self.scte35Descriptors = scte35Descriptors
        }

        public func validate(name: String) throws {
            try self.scte35Descriptors.forEach {
                try $0.validate(name: "\(name).scte35Descriptors[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case scte35Descriptors = "scte35Descriptors"
        }
    }

    public struct SmpteTtDestinationSettings: AWSShape {


        public init() {
        }

    }

    public struct StandardHlsSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AudioRenditionSets", location: .body(locationName: "audioRenditionSets"), required: false, type: .string), 
            AWSShapeMember(label: "M3u8Settings", location: .body(locationName: "m3u8Settings"), required: true, type: .structure)
        ]

        /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
        public let audioRenditionSets: String?
        public let m3u8Settings: M3u8Settings

        public init(audioRenditionSets: String? = nil, m3u8Settings: M3u8Settings) {
            self.audioRenditionSets = audioRenditionSets
            self.m3u8Settings = m3u8Settings
        }

        public func validate(name: String) throws {
            try self.m3u8Settings.validate(name: "\(name).m3u8Settings")
        }

        private enum CodingKeys: String, CodingKey {
            case audioRenditionSets = "audioRenditionSets"
            case m3u8Settings = "m3u8Settings"
        }
    }

    public struct StartChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelId", location: .uri(locationName: "channelId"), required: true, type: .string)
        ]

        public let channelId: String

        public init(channelId: String) {
            self.channelId = channelId
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "channelId"
        }
    }

    public struct StartChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "ChannelClass", location: .body(locationName: "channelClass"), required: false, type: .enum), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "EgressEndpoints", location: .body(locationName: "egressEndpoints"), required: false, type: .list), 
            AWSShapeMember(label: "EncoderSettings", location: .body(locationName: "encoderSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "InputAttachments", location: .body(locationName: "inputAttachments"), required: false, type: .list), 
            AWSShapeMember(label: "InputSpecification", location: .body(locationName: "inputSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "LogLevel", location: .body(locationName: "logLevel"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "PipelineDetails", location: .body(locationName: "pipelineDetails"), required: false, type: .list), 
            AWSShapeMember(label: "PipelinesRunningCount", location: .body(locationName: "pipelinesRunningCount"), required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let arn: String?
        public let channelClass: ChannelClass?
        public let destinations: [OutputDestination]?
        public let egressEndpoints: [ChannelEgressEndpoint]?
        public let encoderSettings: EncoderSettings?
        public let id: String?
        public let inputAttachments: [InputAttachment]?
        public let inputSpecification: InputSpecification?
        public let logLevel: LogLevel?
        public let name: String?
        public let pipelineDetails: [PipelineDetail]?
        public let pipelinesRunningCount: Int?
        public let roleArn: String?
        public let state: ChannelState?
        public let tags: [String: String]?

        public init(arn: String? = nil, channelClass: ChannelClass? = nil, destinations: [OutputDestination]? = nil, egressEndpoints: [ChannelEgressEndpoint]? = nil, encoderSettings: EncoderSettings? = nil, id: String? = nil, inputAttachments: [InputAttachment]? = nil, inputSpecification: InputSpecification? = nil, logLevel: LogLevel? = nil, name: String? = nil, pipelineDetails: [PipelineDetail]? = nil, pipelinesRunningCount: Int? = nil, roleArn: String? = nil, state: ChannelState? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.channelClass = channelClass
            self.destinations = destinations
            self.egressEndpoints = egressEndpoints
            self.encoderSettings = encoderSettings
            self.id = id
            self.inputAttachments = inputAttachments
            self.inputSpecification = inputSpecification
            self.logLevel = logLevel
            self.name = name
            self.pipelineDetails = pipelineDetails
            self.pipelinesRunningCount = pipelinesRunningCount
            self.roleArn = roleArn
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case channelClass = "channelClass"
            case destinations = "destinations"
            case egressEndpoints = "egressEndpoints"
            case encoderSettings = "encoderSettings"
            case id = "id"
            case inputAttachments = "inputAttachments"
            case inputSpecification = "inputSpecification"
            case logLevel = "logLevel"
            case name = "name"
            case pipelineDetails = "pipelineDetails"
            case pipelinesRunningCount = "pipelinesRunningCount"
            case roleArn = "roleArn"
            case state = "state"
            case tags = "tags"
        }
    }

    public struct StartMultiplexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultiplexId", location: .uri(locationName: "multiplexId"), required: true, type: .string)
        ]

        public let multiplexId: String

        public init(multiplexId: String) {
            self.multiplexId = multiplexId
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexId = "multiplexId"
        }
    }

    public struct StartMultiplexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZones"), required: false, type: .list), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "MultiplexSettings", location: .body(locationName: "multiplexSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "PipelinesRunningCount", location: .body(locationName: "pipelinesRunningCount"), required: false, type: .integer), 
            AWSShapeMember(label: "ProgramCount", location: .body(locationName: "programCount"), required: false, type: .integer), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let arn: String?
        public let availabilityZones: [String]?
        public let destinations: [MultiplexOutputDestination]?
        public let id: String?
        public let multiplexSettings: MultiplexSettings?
        public let name: String?
        public let pipelinesRunningCount: Int?
        public let programCount: Int?
        public let state: MultiplexState?
        public let tags: [String: String]?

        public init(arn: String? = nil, availabilityZones: [String]? = nil, destinations: [MultiplexOutputDestination]? = nil, id: String? = nil, multiplexSettings: MultiplexSettings? = nil, name: String? = nil, pipelinesRunningCount: Int? = nil, programCount: Int? = nil, state: MultiplexState? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.availabilityZones = availabilityZones
            self.destinations = destinations
            self.id = id
            self.multiplexSettings = multiplexSettings
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.programCount = programCount
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case availabilityZones = "availabilityZones"
            case destinations = "destinations"
            case id = "id"
            case multiplexSettings = "multiplexSettings"
            case name = "name"
            case pipelinesRunningCount = "pipelinesRunningCount"
            case programCount = "programCount"
            case state = "state"
            case tags = "tags"
        }
    }

    public struct StartTimecode: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Timecode", location: .body(locationName: "timecode"), required: false, type: .string)
        ]

        /// The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
        public let timecode: String?

        public init(timecode: String? = nil) {
            self.timecode = timecode
        }

        private enum CodingKeys: String, CodingKey {
            case timecode = "timecode"
        }
    }

    public struct StaticImageActivateScheduleActionSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "FadeIn", location: .body(locationName: "fadeIn"), required: false, type: .integer), 
            AWSShapeMember(label: "FadeOut", location: .body(locationName: "fadeOut"), required: false, type: .integer), 
            AWSShapeMember(label: "Height", location: .body(locationName: "height"), required: false, type: .integer), 
            AWSShapeMember(label: "Image", location: .body(locationName: "image"), required: true, type: .structure), 
            AWSShapeMember(label: "ImageX", location: .body(locationName: "imageX"), required: false, type: .integer), 
            AWSShapeMember(label: "ImageY", location: .body(locationName: "imageY"), required: false, type: .integer), 
            AWSShapeMember(label: "Layer", location: .body(locationName: "layer"), required: false, type: .integer), 
            AWSShapeMember(label: "Opacity", location: .body(locationName: "opacity"), required: false, type: .integer), 
            AWSShapeMember(label: "Width", location: .body(locationName: "width"), required: false, type: .integer)
        ]

        /// The duration in milliseconds for the image to remain on the video. If omitted or set to 0 the duration is unlimited and the image will remain until it is explicitly deactivated.
        public let duration: Int?
        /// The time in milliseconds for the image to fade in. The fade-in starts at the start time of the overlay. Default is 0 (no fade-in).
        public let fadeIn: Int?
        /// Applies only if a duration is specified. The time in milliseconds for the image to fade out. The fade-out starts when the duration time is hit, so it effectively extends the duration. Default is 0 (no fade-out).
        public let fadeOut: Int?
        /// The height of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified height. Leave blank to use the native height of the overlay.
        public let height: Int?
        /// The location and filename of the image file to overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in pixels) than the input video.
        public let image: InputLocation
        /// Placement of the left edge of the overlay relative to the left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame. If the placement causes the overlay to extend beyond the right edge of the underlying video, then the overlay is cropped on the right.
        public let imageX: Int?
        /// Placement of the top edge of the overlay relative to the top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the placement causes the overlay to extend beyond the bottom edge of the underlying video, then the overlay is cropped on the bottom.
        public let imageY: Int?
        /// The number of the layer, 0 to 7. There are 8 layers that can be overlaid on the video, each layer with a different image. The layers are in Z order, which means that overlays with higher values of layer are inserted on top of overlays with lower values of layer. Default is 0.
        public let layer: Int?
        /// Opacity of image where 0 is transparent and 100 is fully opaque. Default is 100.
        public let opacity: Int?
        /// The width of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified width. Leave blank to use the native width of the overlay.
        public let width: Int?

        public init(duration: Int? = nil, fadeIn: Int? = nil, fadeOut: Int? = nil, height: Int? = nil, image: InputLocation, imageX: Int? = nil, imageY: Int? = nil, layer: Int? = nil, opacity: Int? = nil, width: Int? = nil) {
            self.duration = duration
            self.fadeIn = fadeIn
            self.fadeOut = fadeOut
            self.height = height
            self.image = image
            self.imageX = imageX
            self.imageY = imageY
            self.layer = layer
            self.opacity = opacity
            self.width = width
        }

        public func validate(name: String) throws {
            try validate(self.duration, name:"duration", parent: name, min: 0)
            try validate(self.fadeIn, name:"fadeIn", parent: name, min: 0)
            try validate(self.fadeOut, name:"fadeOut", parent: name, min: 0)
            try validate(self.height, name:"height", parent: name, min: 1)
            try validate(self.imageX, name:"imageX", parent: name, min: 0)
            try validate(self.imageY, name:"imageY", parent: name, min: 0)
            try validate(self.layer, name:"layer", parent: name, max: 7)
            try validate(self.layer, name:"layer", parent: name, min: 0)
            try validate(self.opacity, name:"opacity", parent: name, max: 100)
            try validate(self.opacity, name:"opacity", parent: name, min: 0)
            try validate(self.width, name:"width", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "duration"
            case fadeIn = "fadeIn"
            case fadeOut = "fadeOut"
            case height = "height"
            case image = "image"
            case imageX = "imageX"
            case imageY = "imageY"
            case layer = "layer"
            case opacity = "opacity"
            case width = "width"
        }
    }

    public struct StaticImageDeactivateScheduleActionSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FadeOut", location: .body(locationName: "fadeOut"), required: false, type: .integer), 
            AWSShapeMember(label: "Layer", location: .body(locationName: "layer"), required: false, type: .integer)
        ]

        /// The time in milliseconds for the image to fade out. Default is 0 (no fade-out).
        public let fadeOut: Int?
        /// The image overlay layer to deactivate, 0 to 7. Default is 0.
        public let layer: Int?

        public init(fadeOut: Int? = nil, layer: Int? = nil) {
            self.fadeOut = fadeOut
            self.layer = layer
        }

        public func validate(name: String) throws {
            try validate(self.fadeOut, name:"fadeOut", parent: name, min: 0)
            try validate(self.layer, name:"layer", parent: name, max: 7)
            try validate(self.layer, name:"layer", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case fadeOut = "fadeOut"
            case layer = "layer"
        }
    }

    public struct StaticKeySettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyProviderServer", location: .body(locationName: "keyProviderServer"), required: false, type: .structure), 
            AWSShapeMember(label: "StaticKeyValue", location: .body(locationName: "staticKeyValue"), required: true, type: .string)
        ]

        /// The URL of the license server used for protecting content.
        public let keyProviderServer: InputLocation?
        /// Static key value as a 32 character hexadecimal string.
        public let staticKeyValue: String

        public init(keyProviderServer: InputLocation? = nil, staticKeyValue: String) {
            self.keyProviderServer = keyProviderServer
            self.staticKeyValue = staticKeyValue
        }

        public func validate(name: String) throws {
            try validate(self.staticKeyValue, name:"staticKeyValue", parent: name, max: 32)
            try validate(self.staticKeyValue, name:"staticKeyValue", parent: name, min: 32)
        }

        private enum CodingKeys: String, CodingKey {
            case keyProviderServer = "keyProviderServer"
            case staticKeyValue = "staticKeyValue"
        }
    }

    public struct StopChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelId", location: .uri(locationName: "channelId"), required: true, type: .string)
        ]

        public let channelId: String

        public init(channelId: String) {
            self.channelId = channelId
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "channelId"
        }
    }

    public struct StopChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "ChannelClass", location: .body(locationName: "channelClass"), required: false, type: .enum), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "EgressEndpoints", location: .body(locationName: "egressEndpoints"), required: false, type: .list), 
            AWSShapeMember(label: "EncoderSettings", location: .body(locationName: "encoderSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "InputAttachments", location: .body(locationName: "inputAttachments"), required: false, type: .list), 
            AWSShapeMember(label: "InputSpecification", location: .body(locationName: "inputSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "LogLevel", location: .body(locationName: "logLevel"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "PipelineDetails", location: .body(locationName: "pipelineDetails"), required: false, type: .list), 
            AWSShapeMember(label: "PipelinesRunningCount", location: .body(locationName: "pipelinesRunningCount"), required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let arn: String?
        public let channelClass: ChannelClass?
        public let destinations: [OutputDestination]?
        public let egressEndpoints: [ChannelEgressEndpoint]?
        public let encoderSettings: EncoderSettings?
        public let id: String?
        public let inputAttachments: [InputAttachment]?
        public let inputSpecification: InputSpecification?
        public let logLevel: LogLevel?
        public let name: String?
        public let pipelineDetails: [PipelineDetail]?
        public let pipelinesRunningCount: Int?
        public let roleArn: String?
        public let state: ChannelState?
        public let tags: [String: String]?

        public init(arn: String? = nil, channelClass: ChannelClass? = nil, destinations: [OutputDestination]? = nil, egressEndpoints: [ChannelEgressEndpoint]? = nil, encoderSettings: EncoderSettings? = nil, id: String? = nil, inputAttachments: [InputAttachment]? = nil, inputSpecification: InputSpecification? = nil, logLevel: LogLevel? = nil, name: String? = nil, pipelineDetails: [PipelineDetail]? = nil, pipelinesRunningCount: Int? = nil, roleArn: String? = nil, state: ChannelState? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.channelClass = channelClass
            self.destinations = destinations
            self.egressEndpoints = egressEndpoints
            self.encoderSettings = encoderSettings
            self.id = id
            self.inputAttachments = inputAttachments
            self.inputSpecification = inputSpecification
            self.logLevel = logLevel
            self.name = name
            self.pipelineDetails = pipelineDetails
            self.pipelinesRunningCount = pipelinesRunningCount
            self.roleArn = roleArn
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case channelClass = "channelClass"
            case destinations = "destinations"
            case egressEndpoints = "egressEndpoints"
            case encoderSettings = "encoderSettings"
            case id = "id"
            case inputAttachments = "inputAttachments"
            case inputSpecification = "inputSpecification"
            case logLevel = "logLevel"
            case name = "name"
            case pipelineDetails = "pipelineDetails"
            case pipelinesRunningCount = "pipelinesRunningCount"
            case roleArn = "roleArn"
            case state = "state"
            case tags = "tags"
        }
    }

    public struct StopMultiplexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultiplexId", location: .uri(locationName: "multiplexId"), required: true, type: .string)
        ]

        public let multiplexId: String

        public init(multiplexId: String) {
            self.multiplexId = multiplexId
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexId = "multiplexId"
        }
    }

    public struct StopMultiplexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZones"), required: false, type: .list), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "MultiplexSettings", location: .body(locationName: "multiplexSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "PipelinesRunningCount", location: .body(locationName: "pipelinesRunningCount"), required: false, type: .integer), 
            AWSShapeMember(label: "ProgramCount", location: .body(locationName: "programCount"), required: false, type: .integer), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let arn: String?
        public let availabilityZones: [String]?
        public let destinations: [MultiplexOutputDestination]?
        public let id: String?
        public let multiplexSettings: MultiplexSettings?
        public let name: String?
        public let pipelinesRunningCount: Int?
        public let programCount: Int?
        public let state: MultiplexState?
        public let tags: [String: String]?

        public init(arn: String? = nil, availabilityZones: [String]? = nil, destinations: [MultiplexOutputDestination]? = nil, id: String? = nil, multiplexSettings: MultiplexSettings? = nil, name: String? = nil, pipelinesRunningCount: Int? = nil, programCount: Int? = nil, state: MultiplexState? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.availabilityZones = availabilityZones
            self.destinations = destinations
            self.id = id
            self.multiplexSettings = multiplexSettings
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.programCount = programCount
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case availabilityZones = "availabilityZones"
            case destinations = "destinations"
            case id = "id"
            case multiplexSettings = "multiplexSettings"
            case name = "name"
            case pipelinesRunningCount = "pipelinesRunningCount"
            case programCount = "programCount"
            case state = "state"
            case tags = "tags"
        }
    }

    public struct StopTimecode: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastFrameClippingBehavior", location: .body(locationName: "lastFrameClippingBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "Timecode", location: .body(locationName: "timecode"), required: false, type: .string)
        ]

        /// If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
        public let lastFrameClippingBehavior: LastFrameClippingBehavior?
        /// The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
        public let timecode: String?

        public init(lastFrameClippingBehavior: LastFrameClippingBehavior? = nil, timecode: String? = nil) {
            self.lastFrameClippingBehavior = lastFrameClippingBehavior
            self.timecode = timecode
        }

        private enum CodingKeys: String, CodingKey {
            case lastFrameClippingBehavior = "lastFrameClippingBehavior"
            case timecode = "timecode"
        }
    }

    public struct TeletextDestinationSettings: AWSShape {


        public init() {
        }

    }

    public struct TeletextSourceSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageNumber", location: .body(locationName: "pageNumber"), required: false, type: .string)
        ]

        /// Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.
        public let pageNumber: String?

        public init(pageNumber: String? = nil) {
            self.pageNumber = pageNumber
        }

        private enum CodingKeys: String, CodingKey {
            case pageNumber = "pageNumber"
        }
    }

    public struct TemporalFilterSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PostFilterSharpening", location: .body(locationName: "postFilterSharpening"), required: false, type: .enum), 
            AWSShapeMember(label: "Strength", location: .body(locationName: "strength"), required: false, type: .enum)
        ]

        /// If set to "ENABLED," applies post-filter sharpening to improve visual quality. This is most beneficial when using a noisy or compressed input source and low output bitrates.
        public let postFilterSharpening: TemporalFilterPostFilterSharpening?
        /// Filter strength. A higher value produces stronger filtering.
        public let strength: TemporalFilterStrength?

        public init(postFilterSharpening: TemporalFilterPostFilterSharpening? = nil, strength: TemporalFilterStrength? = nil) {
            self.postFilterSharpening = postFilterSharpening
            self.strength = strength
        }

        private enum CodingKeys: String, CodingKey {
            case postFilterSharpening = "postFilterSharpening"
            case strength = "strength"
        }
    }

    public struct TimecodeConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Source", location: .body(locationName: "source"), required: true, type: .enum), 
            AWSShapeMember(label: "SyncThreshold", location: .body(locationName: "syncThreshold"), required: false, type: .integer)
        ]

        /// Identifies the source for the timecode that will be associated with the events outputs.
        /// -Embedded (embedded): Initialize the output timecode with timecode from the the source.  If no embedded timecode is detected in the source, the system falls back to using "Start at 0" (zerobased).
        /// -System Clock (systemclock): Use the UTC time.
        /// -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.
        public let source: TimecodeConfigSource
        /// Threshold in frames beyond which output timecode is resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.
        public let syncThreshold: Int?

        public init(source: TimecodeConfigSource, syncThreshold: Int? = nil) {
            self.source = source
            self.syncThreshold = syncThreshold
        }

        public func validate(name: String) throws {
            try validate(self.syncThreshold, name:"syncThreshold", parent: name, max: 1000000)
            try validate(self.syncThreshold, name:"syncThreshold", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case source = "source"
            case syncThreshold = "syncThreshold"
        }
    }

    public struct TtmlDestinationSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StyleControl", location: .body(locationName: "styleControl"), required: false, type: .enum)
        ]

        /// When set to passthrough, passes through style and position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the CFF-TT output or TTML output.
        public let styleControl: TtmlDestinationStyleControl?

        public init(styleControl: TtmlDestinationStyleControl? = nil) {
            self.styleControl = styleControl
        }

        private enum CodingKeys: String, CodingKey {
            case styleControl = "styleControl"
        }
    }

    public struct UdpContainerSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "M2tsSettings", location: .body(locationName: "m2tsSettings"), required: false, type: .structure)
        ]

        public let m2tsSettings: M2tsSettings?

        public init(m2tsSettings: M2tsSettings? = nil) {
            self.m2tsSettings = m2tsSettings
        }

        public func validate(name: String) throws {
            try self.m2tsSettings?.validate(name: "\(name).m2tsSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case m2tsSettings = "m2tsSettings"
        }
    }

    public struct UdpGroupSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputLossAction", location: .body(locationName: "inputLossAction"), required: false, type: .enum), 
            AWSShapeMember(label: "TimedMetadataId3Frame", location: .body(locationName: "timedMetadataId3Frame"), required: false, type: .enum), 
            AWSShapeMember(label: "TimedMetadataId3Period", location: .body(locationName: "timedMetadataId3Period"), required: false, type: .integer)
        ]

        /// Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted.  When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement).  Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.
        public let inputLossAction: InputLossActionForUdpOut?
        /// Indicates ID3 frame that has the timecode.
        public let timedMetadataId3Frame: UdpTimedMetadataId3Frame?
        /// Timed Metadata interval in seconds.
        public let timedMetadataId3Period: Int?

        public init(inputLossAction: InputLossActionForUdpOut? = nil, timedMetadataId3Frame: UdpTimedMetadataId3Frame? = nil, timedMetadataId3Period: Int? = nil) {
            self.inputLossAction = inputLossAction
            self.timedMetadataId3Frame = timedMetadataId3Frame
            self.timedMetadataId3Period = timedMetadataId3Period
        }

        public func validate(name: String) throws {
            try validate(self.timedMetadataId3Period, name:"timedMetadataId3Period", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case inputLossAction = "inputLossAction"
            case timedMetadataId3Frame = "timedMetadataId3Frame"
            case timedMetadataId3Period = "timedMetadataId3Period"
        }
    }

    public struct UdpOutputSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BufferMsec", location: .body(locationName: "bufferMsec"), required: false, type: .integer), 
            AWSShapeMember(label: "ContainerSettings", location: .body(locationName: "containerSettings"), required: true, type: .structure), 
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: true, type: .structure), 
            AWSShapeMember(label: "FecOutputSettings", location: .body(locationName: "fecOutputSettings"), required: false, type: .structure)
        ]

        /// UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
        public let bufferMsec: Int?
        public let containerSettings: UdpContainerSettings
        /// Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
        public let destination: OutputLocationRef
        /// Settings for enabling and adjusting Forward Error Correction on UDP outputs.
        public let fecOutputSettings: FecOutputSettings?

        public init(bufferMsec: Int? = nil, containerSettings: UdpContainerSettings, destination: OutputLocationRef, fecOutputSettings: FecOutputSettings? = nil) {
            self.bufferMsec = bufferMsec
            self.containerSettings = containerSettings
            self.destination = destination
            self.fecOutputSettings = fecOutputSettings
        }

        public func validate(name: String) throws {
            try validate(self.bufferMsec, name:"bufferMsec", parent: name, max: 10000)
            try validate(self.bufferMsec, name:"bufferMsec", parent: name, min: 0)
            try self.containerSettings.validate(name: "\(name).containerSettings")
            try self.fecOutputSettings?.validate(name: "\(name).fecOutputSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case bufferMsec = "bufferMsec"
            case containerSettings = "containerSettings"
            case destination = "destination"
            case fecOutputSettings = "fecOutputSettings"
        }
    }

    public struct UpdateChannelClassRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelClass", location: .body(locationName: "channelClass"), required: true, type: .enum), 
            AWSShapeMember(label: "ChannelId", location: .uri(locationName: "channelId"), required: true, type: .string), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list)
        ]

        public let channelClass: ChannelClass
        public let channelId: String
        public let destinations: [OutputDestination]?

        public init(channelClass: ChannelClass, channelId: String, destinations: [OutputDestination]? = nil) {
            self.channelClass = channelClass
            self.channelId = channelId
            self.destinations = destinations
        }

        public func validate(name: String) throws {
            try self.destinations?.forEach {
                try $0.validate(name: "\(name).destinations[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case channelClass = "channelClass"
            case channelId = "channelId"
            case destinations = "destinations"
        }
    }

    public struct UpdateChannelClassResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Channel", location: .body(locationName: "channel"), required: false, type: .structure)
        ]

        public let channel: Channel?

        public init(channel: Channel? = nil) {
            self.channel = channel
        }

        private enum CodingKeys: String, CodingKey {
            case channel = "channel"
        }
    }

    public struct UpdateChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelId", location: .uri(locationName: "channelId"), required: true, type: .string), 
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "EncoderSettings", location: .body(locationName: "encoderSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "InputAttachments", location: .body(locationName: "inputAttachments"), required: false, type: .list), 
            AWSShapeMember(label: "InputSpecification", location: .body(locationName: "inputSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "LogLevel", location: .body(locationName: "logLevel"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string)
        ]

        public let channelId: String
        public let destinations: [OutputDestination]?
        public let encoderSettings: EncoderSettings?
        public let inputAttachments: [InputAttachment]?
        public let inputSpecification: InputSpecification?
        public let logLevel: LogLevel?
        public let name: String?
        public let roleArn: String?

        public init(channelId: String, destinations: [OutputDestination]? = nil, encoderSettings: EncoderSettings? = nil, inputAttachments: [InputAttachment]? = nil, inputSpecification: InputSpecification? = nil, logLevel: LogLevel? = nil, name: String? = nil, roleArn: String? = nil) {
            self.channelId = channelId
            self.destinations = destinations
            self.encoderSettings = encoderSettings
            self.inputAttachments = inputAttachments
            self.inputSpecification = inputSpecification
            self.logLevel = logLevel
            self.name = name
            self.roleArn = roleArn
        }

        public func validate(name: String) throws {
            try self.destinations?.forEach {
                try $0.validate(name: "\(name).destinations[]")
            }
            try self.encoderSettings?.validate(name: "\(name).encoderSettings")
            try self.inputAttachments?.forEach {
                try $0.validate(name: "\(name).inputAttachments[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "channelId"
            case destinations = "destinations"
            case encoderSettings = "encoderSettings"
            case inputAttachments = "inputAttachments"
            case inputSpecification = "inputSpecification"
            case logLevel = "logLevel"
            case name = "name"
            case roleArn = "roleArn"
        }
    }

    public struct UpdateChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Channel", location: .body(locationName: "channel"), required: false, type: .structure)
        ]

        public let channel: Channel?

        public init(channel: Channel? = nil) {
            self.channel = channel
        }

        private enum CodingKeys: String, CodingKey {
            case channel = "channel"
        }
    }

    public struct UpdateInputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destinations", location: .body(locationName: "destinations"), required: false, type: .list), 
            AWSShapeMember(label: "InputId", location: .uri(locationName: "inputId"), required: true, type: .string), 
            AWSShapeMember(label: "InputSecurityGroups", location: .body(locationName: "inputSecurityGroups"), required: false, type: .list), 
            AWSShapeMember(label: "MediaConnectFlows", location: .body(locationName: "mediaConnectFlows"), required: false, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string), 
            AWSShapeMember(label: "Sources", location: .body(locationName: "sources"), required: false, type: .list)
        ]

        public let destinations: [InputDestinationRequest]?
        public let inputId: String
        public let inputSecurityGroups: [String]?
        public let mediaConnectFlows: [MediaConnectFlowRequest]?
        public let name: String?
        public let roleArn: String?
        public let sources: [InputSourceRequest]?

        public init(destinations: [InputDestinationRequest]? = nil, inputId: String, inputSecurityGroups: [String]? = nil, mediaConnectFlows: [MediaConnectFlowRequest]? = nil, name: String? = nil, roleArn: String? = nil, sources: [InputSourceRequest]? = nil) {
            self.destinations = destinations
            self.inputId = inputId
            self.inputSecurityGroups = inputSecurityGroups
            self.mediaConnectFlows = mediaConnectFlows
            self.name = name
            self.roleArn = roleArn
            self.sources = sources
        }

        private enum CodingKeys: String, CodingKey {
            case destinations = "destinations"
            case inputId = "inputId"
            case inputSecurityGroups = "inputSecurityGroups"
            case mediaConnectFlows = "mediaConnectFlows"
            case name = "name"
            case roleArn = "roleArn"
            case sources = "sources"
        }
    }

    public struct UpdateInputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Input", location: .body(locationName: "input"), required: false, type: .structure)
        ]

        public let input: Input?

        public init(input: Input? = nil) {
            self.input = input
        }

        private enum CodingKeys: String, CodingKey {
            case input = "input"
        }
    }

    public struct UpdateInputSecurityGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputSecurityGroupId", location: .uri(locationName: "inputSecurityGroupId"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "WhitelistRules", location: .body(locationName: "whitelistRules"), required: false, type: .list)
        ]

        public let inputSecurityGroupId: String
        public let tags: [String: String]?
        public let whitelistRules: [InputWhitelistRuleCidr]?

        public init(inputSecurityGroupId: String, tags: [String: String]? = nil, whitelistRules: [InputWhitelistRuleCidr]? = nil) {
            self.inputSecurityGroupId = inputSecurityGroupId
            self.tags = tags
            self.whitelistRules = whitelistRules
        }

        private enum CodingKeys: String, CodingKey {
            case inputSecurityGroupId = "inputSecurityGroupId"
            case tags = "tags"
            case whitelistRules = "whitelistRules"
        }
    }

    public struct UpdateInputSecurityGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroup", location: .body(locationName: "securityGroup"), required: false, type: .structure)
        ]

        public let securityGroup: InputSecurityGroup?

        public init(securityGroup: InputSecurityGroup? = nil) {
            self.securityGroup = securityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroup = "securityGroup"
        }
    }

    public struct UpdateMultiplexProgramRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultiplexId", location: .uri(locationName: "multiplexId"), required: true, type: .string), 
            AWSShapeMember(label: "MultiplexProgramSettings", location: .body(locationName: "multiplexProgramSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ProgramName", location: .uri(locationName: "programName"), required: true, type: .string)
        ]

        public let multiplexId: String
        public let multiplexProgramSettings: MultiplexProgramSettings?
        public let programName: String

        public init(multiplexId: String, multiplexProgramSettings: MultiplexProgramSettings? = nil, programName: String) {
            self.multiplexId = multiplexId
            self.multiplexProgramSettings = multiplexProgramSettings
            self.programName = programName
        }

        public func validate(name: String) throws {
            try self.multiplexProgramSettings?.validate(name: "\(name).multiplexProgramSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexId = "multiplexId"
            case multiplexProgramSettings = "multiplexProgramSettings"
            case programName = "programName"
        }
    }

    public struct UpdateMultiplexProgramResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultiplexProgram", location: .body(locationName: "multiplexProgram"), required: false, type: .structure)
        ]

        public let multiplexProgram: MultiplexProgram?

        public init(multiplexProgram: MultiplexProgram? = nil) {
            self.multiplexProgram = multiplexProgram
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexProgram = "multiplexProgram"
        }
    }

    public struct UpdateMultiplexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MultiplexId", location: .uri(locationName: "multiplexId"), required: true, type: .string), 
            AWSShapeMember(label: "MultiplexSettings", location: .body(locationName: "multiplexSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        public let multiplexId: String
        public let multiplexSettings: MultiplexSettings?
        public let name: String?

        public init(multiplexId: String, multiplexSettings: MultiplexSettings? = nil, name: String? = nil) {
            self.multiplexId = multiplexId
            self.multiplexSettings = multiplexSettings
            self.name = name
        }

        public func validate(name: String) throws {
            try self.multiplexSettings?.validate(name: "\(name).multiplexSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case multiplexId = "multiplexId"
            case multiplexSettings = "multiplexSettings"
            case name = "name"
        }
    }

    public struct UpdateMultiplexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Multiplex", location: .body(locationName: "multiplex"), required: false, type: .structure)
        ]

        public let multiplex: Multiplex?

        public init(multiplex: Multiplex? = nil) {
            self.multiplex = multiplex
        }

        private enum CodingKeys: String, CodingKey {
            case multiplex = "multiplex"
        }
    }

    public struct UpdateReservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ReservationId", location: .uri(locationName: "reservationId"), required: true, type: .string)
        ]

        public let name: String?
        public let reservationId: String

        public init(name: String? = nil, reservationId: String) {
            self.name = name
            self.reservationId = reservationId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case reservationId = "reservationId"
        }
    }

    public struct UpdateReservationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reservation", location: .body(locationName: "reservation"), required: false, type: .structure)
        ]

        public let reservation: Reservation?

        public init(reservation: Reservation? = nil) {
            self.reservation = reservation
        }

        private enum CodingKeys: String, CodingKey {
            case reservation = "reservation"
        }
    }

    public struct VideoCodecSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FrameCaptureSettings", location: .body(locationName: "frameCaptureSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "H264Settings", location: .body(locationName: "h264Settings"), required: false, type: .structure), 
            AWSShapeMember(label: "H265Settings", location: .body(locationName: "h265Settings"), required: false, type: .structure)
        ]

        public let frameCaptureSettings: FrameCaptureSettings?
        public let h264Settings: H264Settings?
        public let h265Settings: H265Settings?

        public init(frameCaptureSettings: FrameCaptureSettings? = nil, h264Settings: H264Settings? = nil, h265Settings: H265Settings? = nil) {
            self.frameCaptureSettings = frameCaptureSettings
            self.h264Settings = h264Settings
            self.h265Settings = h265Settings
        }

        public func validate(name: String) throws {
            try self.frameCaptureSettings?.validate(name: "\(name).frameCaptureSettings")
            try self.h264Settings?.validate(name: "\(name).h264Settings")
            try self.h265Settings?.validate(name: "\(name).h265Settings")
        }

        private enum CodingKeys: String, CodingKey {
            case frameCaptureSettings = "frameCaptureSettings"
            case h264Settings = "h264Settings"
            case h265Settings = "h265Settings"
        }
    }

    public struct VideoDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodecSettings", location: .body(locationName: "codecSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "Height", location: .body(locationName: "height"), required: false, type: .integer), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "RespondToAfd", location: .body(locationName: "respondToAfd"), required: false, type: .enum), 
            AWSShapeMember(label: "ScalingBehavior", location: .body(locationName: "scalingBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "Sharpness", location: .body(locationName: "sharpness"), required: false, type: .integer), 
            AWSShapeMember(label: "Width", location: .body(locationName: "width"), required: false, type: .integer)
        ]

        /// Video codec settings.
        public let codecSettings: VideoCodecSettings?
        /// Output video height, in pixels. Must be an even number. For most codecs, you can leave this field and width blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
        public let height: Int?
        /// The name of this VideoDescription. Outputs will use this name to uniquely identify this Description.  Description names should be unique within this Live Event.
        public let name: String
        /// Indicates how to respond to the AFD values in the input stream. RESPOND causes input video to be clipped, depending on the AFD value, input display aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE codec) includes the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE codec) ignores the AFD values and includes the values in the output, so input video is not clipped. NONE ignores the AFD values and does not include the values through to the output, so input video is not clipped.
        public let respondToAfd: VideoDescriptionRespondToAfd?
        /// STRETCHTOOUTPUT configures the output position to stretch the video to the specified output resolution (height and width). This option will override any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the video to provide the specified output resolution.
        public let scalingBehavior: VideoDescriptionScalingBehavior?
        /// Changes the strength of the anti-alias filter used for scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for most content.
        public let sharpness: Int?
        /// Output video width, in pixels. Must be an even number. For most codecs, you can leave this field and height blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
        public let width: Int?

        public init(codecSettings: VideoCodecSettings? = nil, height: Int? = nil, name: String, respondToAfd: VideoDescriptionRespondToAfd? = nil, scalingBehavior: VideoDescriptionScalingBehavior? = nil, sharpness: Int? = nil, width: Int? = nil) {
            self.codecSettings = codecSettings
            self.height = height
            self.name = name
            self.respondToAfd = respondToAfd
            self.scalingBehavior = scalingBehavior
            self.sharpness = sharpness
            self.width = width
        }

        public func validate(name: String) throws {
            try self.codecSettings?.validate(name: "\(name).codecSettings")
            try validate(self.sharpness, name:"sharpness", parent: name, max: 100)
            try validate(self.sharpness, name:"sharpness", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case codecSettings = "codecSettings"
            case height = "height"
            case name = "name"
            case respondToAfd = "respondToAfd"
            case scalingBehavior = "scalingBehavior"
            case sharpness = "sharpness"
            case width = "width"
        }
    }

    public struct VideoSelector: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ColorSpace", location: .body(locationName: "colorSpace"), required: false, type: .enum), 
            AWSShapeMember(label: "ColorSpaceUsage", location: .body(locationName: "colorSpaceUsage"), required: false, type: .enum), 
            AWSShapeMember(label: "SelectorSettings", location: .body(locationName: "selectorSettings"), required: false, type: .structure)
        ]

        /// Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.
        public let colorSpace: VideoSelectorColorSpace?
        /// Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.
        public let colorSpaceUsage: VideoSelectorColorSpaceUsage?
        /// The video selector settings.
        public let selectorSettings: VideoSelectorSettings?

        public init(colorSpace: VideoSelectorColorSpace? = nil, colorSpaceUsage: VideoSelectorColorSpaceUsage? = nil, selectorSettings: VideoSelectorSettings? = nil) {
            self.colorSpace = colorSpace
            self.colorSpaceUsage = colorSpaceUsage
            self.selectorSettings = selectorSettings
        }

        public func validate(name: String) throws {
            try self.selectorSettings?.validate(name: "\(name).selectorSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case colorSpace = "colorSpace"
            case colorSpaceUsage = "colorSpaceUsage"
            case selectorSettings = "selectorSettings"
        }
    }

    public struct VideoSelectorPid: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Pid", location: .body(locationName: "pid"), required: false, type: .integer)
        ]

        /// Selects a specific PID from within a video source.
        public let pid: Int?

        public init(pid: Int? = nil) {
            self.pid = pid
        }

        public func validate(name: String) throws {
            try validate(self.pid, name:"pid", parent: name, max: 8191)
            try validate(self.pid, name:"pid", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case pid = "pid"
        }
    }

    public struct VideoSelectorProgramId: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProgramId", location: .body(locationName: "programId"), required: false, type: .integer)
        ]

        /// Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
        public let programId: Int?

        public init(programId: Int? = nil) {
            self.programId = programId
        }

        public func validate(name: String) throws {
            try validate(self.programId, name:"programId", parent: name, max: 65536)
            try validate(self.programId, name:"programId", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case programId = "programId"
        }
    }

    public struct VideoSelectorSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VideoSelectorPid", location: .body(locationName: "videoSelectorPid"), required: false, type: .structure), 
            AWSShapeMember(label: "VideoSelectorProgramId", location: .body(locationName: "videoSelectorProgramId"), required: false, type: .structure)
        ]

        public let videoSelectorPid: VideoSelectorPid?
        public let videoSelectorProgramId: VideoSelectorProgramId?

        public init(videoSelectorPid: VideoSelectorPid? = nil, videoSelectorProgramId: VideoSelectorProgramId? = nil) {
            self.videoSelectorPid = videoSelectorPid
            self.videoSelectorProgramId = videoSelectorProgramId
        }

        public func validate(name: String) throws {
            try self.videoSelectorPid?.validate(name: "\(name).videoSelectorPid")
            try self.videoSelectorProgramId?.validate(name: "\(name).videoSelectorProgramId")
        }

        private enum CodingKeys: String, CodingKey {
            case videoSelectorPid = "videoSelectorPid"
            case videoSelectorProgramId = "videoSelectorProgramId"
        }
    }

    public struct WebvttDestinationSettings: AWSShape {


        public init() {
        }

    }
}
