// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

//MARK: Paginators

extension MediaLive {

    ///  Get a channel schedule
    public func describeSchedulePaginator(_ input: DescribeScheduleRequest, onPage: @escaping (DescribeScheduleResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeSchedule, tokenKey: \DescribeScheduleResponse.nextToken, onPage: onPage)
    }

    ///  Produces list of channels that have been created
    public func listChannelsPaginator(_ input: ListChannelsRequest, onPage: @escaping (ListChannelsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listChannels, tokenKey: \ListChannelsResponse.nextToken, onPage: onPage)
    }

    ///  List input devices that are currently being transferred. List input devices that you are transferring from your AWS account or input devices that another AWS account is transferring to you.
    public func listInputDeviceTransfersPaginator(_ input: ListInputDeviceTransfersRequest, onPage: @escaping (ListInputDeviceTransfersResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listInputDeviceTransfers, tokenKey: \ListInputDeviceTransfersResponse.nextToken, onPage: onPage)
    }

    ///  List input devices
    public func listInputDevicesPaginator(_ input: ListInputDevicesRequest, onPage: @escaping (ListInputDevicesResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listInputDevices, tokenKey: \ListInputDevicesResponse.nextToken, onPage: onPage)
    }

    ///  Produces a list of Input Security Groups for an account
    public func listInputSecurityGroupsPaginator(_ input: ListInputSecurityGroupsRequest, onPage: @escaping (ListInputSecurityGroupsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listInputSecurityGroups, tokenKey: \ListInputSecurityGroupsResponse.nextToken, onPage: onPage)
    }

    ///  Produces list of inputs that have been created
    public func listInputsPaginator(_ input: ListInputsRequest, onPage: @escaping (ListInputsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listInputs, tokenKey: \ListInputsResponse.nextToken, onPage: onPage)
    }

    ///  List the programs that currently exist for a specific multiplex.
    public func listMultiplexProgramsPaginator(_ input: ListMultiplexProgramsRequest, onPage: @escaping (ListMultiplexProgramsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listMultiplexPrograms, tokenKey: \ListMultiplexProgramsResponse.nextToken, onPage: onPage)
    }

    ///  Retrieve a list of the existing multiplexes.
    public func listMultiplexesPaginator(_ input: ListMultiplexesRequest, onPage: @escaping (ListMultiplexesResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listMultiplexes, tokenKey: \ListMultiplexesResponse.nextToken, onPage: onPage)
    }

    ///  List offerings available for purchase.
    public func listOfferingsPaginator(_ input: ListOfferingsRequest, onPage: @escaping (ListOfferingsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listOfferings, tokenKey: \ListOfferingsResponse.nextToken, onPage: onPage)
    }

    ///  List purchased reservations.
    public func listReservationsPaginator(_ input: ListReservationsRequest, onPage: @escaping (ListReservationsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listReservations, tokenKey: \ListReservationsResponse.nextToken, onPage: onPage)
    }

}

extension MediaLive.DescribeScheduleRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> MediaLive.DescribeScheduleRequest {
        return .init(
            channelId: self.channelId, 
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension MediaLive.ListChannelsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> MediaLive.ListChannelsRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension MediaLive.ListInputDeviceTransfersRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> MediaLive.ListInputDeviceTransfersRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token, 
            transferType: self.transferType
        )

    }
}

extension MediaLive.ListInputDevicesRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> MediaLive.ListInputDevicesRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension MediaLive.ListInputSecurityGroupsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> MediaLive.ListInputSecurityGroupsRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension MediaLive.ListInputsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> MediaLive.ListInputsRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension MediaLive.ListMultiplexProgramsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> MediaLive.ListMultiplexProgramsRequest {
        return .init(
            maxResults: self.maxResults, 
            multiplexId: self.multiplexId, 
            nextToken: token
        )

    }
}

extension MediaLive.ListMultiplexesRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> MediaLive.ListMultiplexesRequest {
        return .init(
            maxResults: self.maxResults, 
            nextToken: token
        )

    }
}

extension MediaLive.ListOfferingsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> MediaLive.ListOfferingsRequest {
        return .init(
            channelClass: self.channelClass, 
            channelConfiguration: self.channelConfiguration, 
            codec: self.codec, 
            duration: self.duration, 
            maximumBitrate: self.maximumBitrate, 
            maximumFramerate: self.maximumFramerate, 
            maxResults: self.maxResults, 
            nextToken: token, 
            resolution: self.resolution, 
            resourceType: self.resourceType, 
            specialFeature: self.specialFeature, 
            videoQuality: self.videoQuality
        )

    }
}

extension MediaLive.ListReservationsRequest: AWSPaginateStringToken {
    public func usingPaginationToken(_ token: String) -> MediaLive.ListReservationsRequest {
        return .init(
            channelClass: self.channelClass, 
            codec: self.codec, 
            maximumBitrate: self.maximumBitrate, 
            maximumFramerate: self.maximumFramerate, 
            maxResults: self.maxResults, 
            nextToken: token, 
            resolution: self.resolution, 
            resourceType: self.resourceType, 
            specialFeature: self.specialFeature, 
            videoQuality: self.videoQuality
        )

    }
}


