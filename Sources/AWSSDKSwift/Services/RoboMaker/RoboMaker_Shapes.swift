// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension RoboMaker {
    //MARK: Enums

    public enum Architecture: String, CustomStringConvertible, Codable {
        case x8664 = "X86_64"
        case arm64 = "ARM64"
        case armhf = "ARMHF"
        public var description: String { return self.rawValue }
    }

    public enum DeploymentJobErrorCode: String, CustomStringConvertible, Codable {
        case resourcenotfound = "ResourceNotFound"
        case environmentsetuperror = "EnvironmentSetupError"
        case etagmismatch = "EtagMismatch"
        case failurethresholdbreached = "FailureThresholdBreached"
        case robotdeploymentaborted = "RobotDeploymentAborted"
        case robotdeploymentnoresponse = "RobotDeploymentNoResponse"
        case robotagentconnectiontimeout = "RobotAgentConnectionTimeout"
        case greengrassdeploymentfailed = "GreengrassDeploymentFailed"
        case missingrobotarchitecture = "MissingRobotArchitecture"
        case missingrobotapplicationarchitecture = "MissingRobotApplicationArchitecture"
        case missingrobotdeploymentresource = "MissingRobotDeploymentResource"
        case greengrassgroupversiondoesnotexist = "GreengrassGroupVersionDoesNotExist"
        case extractingbundlefailure = "ExtractingBundleFailure"
        case prelaunchfilefailure = "PreLaunchFileFailure"
        case postlaunchfilefailure = "PostLaunchFileFailure"
        case badpermissionerror = "BadPermissionError"
        case downloadconditionfailed = "DownloadConditionFailed"
        case internalservererror = "InternalServerError"
        public var description: String { return self.rawValue }
    }

    public enum DeploymentStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case preparing = "Preparing"
        case inprogress = "InProgress"
        case failed = "Failed"
        case succeeded = "Succeeded"
        case canceled = "Canceled"
        public var description: String { return self.rawValue }
    }

    public enum FailureBehavior: String, CustomStringConvertible, Codable {
        case fail = "Fail"
        case `continue` = "Continue"
        public var description: String { return self.rawValue }
    }

    public enum RenderingEngineType: String, CustomStringConvertible, Codable {
        case ogre = "OGRE"
        public var description: String { return self.rawValue }
    }

    public enum RobotDeploymentStep: String, CustomStringConvertible, Codable {
        case validating = "Validating"
        case downloadingextracting = "DownloadingExtracting"
        case executingdownloadcondition = "ExecutingDownloadCondition"
        case executingprelaunch = "ExecutingPreLaunch"
        case launching = "Launching"
        case executingpostlaunch = "ExecutingPostLaunch"
        case finished = "Finished"
        public var description: String { return self.rawValue }
    }

    public enum RobotSoftwareSuiteType: String, CustomStringConvertible, Codable {
        case ros = "ROS"
        case ros2 = "ROS2"
        public var description: String { return self.rawValue }
    }

    public enum RobotSoftwareSuiteVersionType: String, CustomStringConvertible, Codable {
        case kinetic = "Kinetic"
        case melodic = "Melodic"
        case dashing = "Dashing"
        public var description: String { return self.rawValue }
    }

    public enum RobotStatus: String, CustomStringConvertible, Codable {
        case available = "Available"
        case registered = "Registered"
        case pendingnewdeployment = "PendingNewDeployment"
        case deploying = "Deploying"
        case failed = "Failed"
        case insync = "InSync"
        case noresponse = "NoResponse"
        public var description: String { return self.rawValue }
    }

    public enum SimulationJobErrorCode: String, CustomStringConvertible, Codable {
        case internalserviceerror = "InternalServiceError"
        case robotapplicationcrash = "RobotApplicationCrash"
        case simulationapplicationcrash = "SimulationApplicationCrash"
        case badpermissionsrobotapplication = "BadPermissionsRobotApplication"
        case badpermissionssimulationapplication = "BadPermissionsSimulationApplication"
        case badpermissionss3object = "BadPermissionsS3Object"
        case badpermissionss3output = "BadPermissionsS3Output"
        case badpermissionscloudwatchlogs = "BadPermissionsCloudwatchLogs"
        case subnetiplimitexceeded = "SubnetIpLimitExceeded"
        case enilimitexceeded = "ENILimitExceeded"
        case badpermissionsusercredentials = "BadPermissionsUserCredentials"
        case invalidbundlerobotapplication = "InvalidBundleRobotApplication"
        case invalidbundlesimulationapplication = "InvalidBundleSimulationApplication"
        case invalids3resource = "InvalidS3Resource"
        case mismatchedetag = "MismatchedEtag"
        case robotapplicationversionmismatchedetag = "RobotApplicationVersionMismatchedEtag"
        case simulationapplicationversionmismatchedetag = "SimulationApplicationVersionMismatchedEtag"
        case resourcenotfound = "ResourceNotFound"
        case invalidinput = "InvalidInput"
        case wrongregions3bucket = "WrongRegionS3Bucket"
        case wrongregions3output = "WrongRegionS3Output"
        case wrongregionrobotapplication = "WrongRegionRobotApplication"
        case wrongregionsimulationapplication = "WrongRegionSimulationApplication"
        public var description: String { return self.rawValue }
    }

    public enum SimulationJobStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case preparing = "Preparing"
        case running = "Running"
        case restarting = "Restarting"
        case completed = "Completed"
        case failed = "Failed"
        case runningfailed = "RunningFailed"
        case terminating = "Terminating"
        case terminated = "Terminated"
        case canceled = "Canceled"
        public var description: String { return self.rawValue }
    }

    public enum SimulationSoftwareSuiteType: String, CustomStringConvertible, Codable {
        case gazebo = "Gazebo"
        case rosbagplay = "RosbagPlay"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct BatchDescribeSimulationJobRequest: AWSShape {

        /// A list of Amazon Resource Names (ARNs) of simulation jobs to describe.
        public let jobs: [String]

        public init(jobs: [String]) {
            self.jobs = jobs
        }

        public func validate(name: String) throws {
            try self.jobs.forEach {
                try validate($0, name: "jobs[]", parent: name, max: 1224)
                try validate($0, name: "jobs[]", parent: name, min: 1)
                try validate($0, name: "jobs[]", parent: name, pattern: "arn:.*")
            }
            try validate(self.jobs, name:"jobs", parent: name, max: 100)
            try validate(self.jobs, name:"jobs", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case jobs = "jobs"
        }
    }

    public struct BatchDescribeSimulationJobResponse: AWSShape {

        /// A list of simulation jobs.
        public let jobs: [SimulationJob]?
        /// A list of unprocessed simulation job Amazon Resource Names (ARNs).
        public let unprocessedJobs: [String]?

        public init(jobs: [SimulationJob]? = nil, unprocessedJobs: [String]? = nil) {
            self.jobs = jobs
            self.unprocessedJobs = unprocessedJobs
        }

        private enum CodingKeys: String, CodingKey {
            case jobs = "jobs"
            case unprocessedJobs = "unprocessedJobs"
        }
    }

    public struct CancelDeploymentJobRequest: AWSShape {

        /// The deployment job ARN to cancel.
        public let job: String

        public init(job: String) {
            self.job = job
        }

        public func validate(name: String) throws {
            try validate(self.job, name:"job", parent: name, max: 1224)
            try validate(self.job, name:"job", parent: name, min: 1)
            try validate(self.job, name:"job", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case job = "job"
        }
    }

    public struct CancelDeploymentJobResponse: AWSShape {


        public init() {
        }

    }

    public struct CancelSimulationJobRequest: AWSShape {

        /// The simulation job ARN to cancel.
        public let job: String

        public init(job: String) {
            self.job = job
        }

        public func validate(name: String) throws {
            try validate(self.job, name:"job", parent: name, max: 1224)
            try validate(self.job, name:"job", parent: name, min: 1)
            try validate(self.job, name:"job", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case job = "job"
        }
    }

    public struct CancelSimulationJobResponse: AWSShape {


        public init() {
        }

    }

    public struct CreateDeploymentJobRequest: AWSShape {

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String
        /// The deployment application configuration.
        public let deploymentApplicationConfigs: [DeploymentApplicationConfig]
        /// The requested deployment configuration.
        public let deploymentConfig: DeploymentConfig?
        /// The Amazon Resource Name (ARN) of the fleet to deploy.
        public let fleet: String
        /// A map that contains tag keys and tag values that are attached to the deployment job.
        public let tags: [String: String]?

        public init(clientRequestToken: String = CreateDeploymentJobRequest.idempotencyToken(), deploymentApplicationConfigs: [DeploymentApplicationConfig], deploymentConfig: DeploymentConfig? = nil, fleet: String, tags: [String: String]? = nil) {
            self.clientRequestToken = clientRequestToken
            self.deploymentApplicationConfigs = deploymentApplicationConfigs
            self.deploymentConfig = deploymentConfig
            self.fleet = fleet
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, max: 64)
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, min: 1)
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, pattern: "[a-zA-Z0-9_\\-=]*")
            try self.deploymentApplicationConfigs.forEach {
                try $0.validate(name: "\(name).deploymentApplicationConfigs[]")
            }
            try validate(self.deploymentApplicationConfigs, name:"deploymentApplicationConfigs", parent: name, max: 1)
            try validate(self.deploymentApplicationConfigs, name:"deploymentApplicationConfigs", parent: name, min: 1)
            try self.deploymentConfig?.validate(name: "\(name).deploymentConfig")
            try validate(self.fleet, name:"fleet", parent: name, max: 1224)
            try validate(self.fleet, name:"fleet", parent: name, min: 1)
            try validate(self.fleet, name:"fleet", parent: name, pattern: "arn:.*")
            try self.tags?.forEach {
                try validate($0.key, name:"tags.key", parent: name, max: 128)
                try validate($0.key, name:"tags.key", parent: name, min: 1)
                try validate($0.key, name:"tags.key", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, min: 0)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case deploymentApplicationConfigs = "deploymentApplicationConfigs"
            case deploymentConfig = "deploymentConfig"
            case fleet = "fleet"
            case tags = "tags"
        }
    }

    public struct CreateDeploymentJobResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the deployment job.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the fleet was created.
        public let createdAt: TimeStamp?
        /// The deployment application configuration.
        public let deploymentApplicationConfigs: [DeploymentApplicationConfig]?
        /// The deployment configuration.
        public let deploymentConfig: DeploymentConfig?
        /// The failure code of the simulation job if it failed:  BadPermissionError  AWS Greengrass requires a service-level role permission to access other services. The role must include the  AWSGreengrassResourceAccessRolePolicy managed policy.   ExtractingBundleFailure  The robot application could not be extracted from the bundle.  FailureThresholdBreached  The percentage of robots that could not be updated exceeded the percentage set for the deployment.  GreengrassDeploymentFailed  The robot application could not be deployed to the robot.  GreengrassGroupVersionDoesNotExist  The AWS Greengrass group or version associated with a robot is missing.  InternalServerError  An internal error has occurred. Retry your request, but if the problem persists, contact us with details.  MissingRobotApplicationArchitecture  The robot application does not have a source that matches the architecture of the robot.  MissingRobotDeploymentResource  One or more of the resources specified for the robot application are missing. For example, does the robot application have the correct launch package and launch file?  PostLaunchFileFailure  The post-launch script failed.  PreLaunchFileFailure  The pre-launch script failed.  ResourceNotFound  One or more deployment resources are missing. For example, do robot application source bundles still exist?   RobotDeploymentNoResponse  There is no response from the robot. It might not be powered on or connected to the internet.  
        public let failureCode: DeploymentJobErrorCode?
        /// The failure reason of the deployment job if it failed.
        public let failureReason: String?
        /// The target fleet for the deployment job.
        public let fleet: String?
        /// The status of the deployment job.
        public let status: DeploymentStatus?
        /// The list of all tags added to the deployment job.
        public let tags: [String: String]?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, deploymentApplicationConfigs: [DeploymentApplicationConfig]? = nil, deploymentConfig: DeploymentConfig? = nil, failureCode: DeploymentJobErrorCode? = nil, failureReason: String? = nil, fleet: String? = nil, status: DeploymentStatus? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentApplicationConfigs = deploymentApplicationConfigs
            self.deploymentConfig = deploymentConfig
            self.failureCode = failureCode
            self.failureReason = failureReason
            self.fleet = fleet
            self.status = status
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case deploymentApplicationConfigs = "deploymentApplicationConfigs"
            case deploymentConfig = "deploymentConfig"
            case failureCode = "failureCode"
            case failureReason = "failureReason"
            case fleet = "fleet"
            case status = "status"
            case tags = "tags"
        }
    }

    public struct CreateFleetRequest: AWSShape {

        /// The name of the fleet.
        public let name: String
        /// A map that contains tag keys and tag values that are attached to the fleet.
        public let tags: [String: String]?

        public init(name: String, tags: [String: String]? = nil) {
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 255)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9_\\-]*")
            try self.tags?.forEach {
                try validate($0.key, name:"tags.key", parent: name, max: 128)
                try validate($0.key, name:"tags.key", parent: name, min: 1)
                try validate($0.key, name:"tags.key", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, min: 0)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case tags = "tags"
        }
    }

    public struct CreateFleetResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the fleet.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the fleet was created.
        public let createdAt: TimeStamp?
        /// The name of the fleet.
        public let name: String?
        /// The list of all tags added to the fleet.
        public let tags: [String: String]?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, name: String? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.name = name
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct CreateRobotApplicationRequest: AWSShape {

        /// The name of the robot application.
        public let name: String
        /// The robot software suite used by the robot application.
        public let robotSoftwareSuite: RobotSoftwareSuite
        /// The sources of the robot application.
        public let sources: [SourceConfig]
        /// A map that contains tag keys and tag values that are attached to the robot application.
        public let tags: [String: String]?

        public init(name: String, robotSoftwareSuite: RobotSoftwareSuite, sources: [SourceConfig], tags: [String: String]? = nil) {
            self.name = name
            self.robotSoftwareSuite = robotSoftwareSuite
            self.sources = sources
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 255)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9_\\-]*")
            try self.sources.forEach {
                try $0.validate(name: "\(name).sources[]")
            }
            try self.tags?.forEach {
                try validate($0.key, name:"tags.key", parent: name, max: 128)
                try validate($0.key, name:"tags.key", parent: name, min: 1)
                try validate($0.key, name:"tags.key", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, min: 0)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case sources = "sources"
            case tags = "tags"
        }
    }

    public struct CreateRobotApplicationResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the robot application.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the robot application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The name of the robot application.
        public let name: String?
        /// The revision id of the robot application.
        public let revisionId: String?
        /// The robot software suite used by the robot application.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The sources of the robot application.
        public let sources: [Source]?
        /// The list of all tags added to the robot application.
        public let tags: [String: String]?
        /// The version of the robot application.
        public let version: String?

        public init(arn: String? = nil, lastUpdatedAt: TimeStamp? = nil, name: String? = nil, revisionId: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, sources: [Source]? = nil, tags: [String: String]? = nil, version: String? = nil) {
            self.arn = arn
            self.lastUpdatedAt = lastUpdatedAt
            self.name = name
            self.revisionId = revisionId
            self.robotSoftwareSuite = robotSoftwareSuite
            self.sources = sources
            self.tags = tags
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case lastUpdatedAt = "lastUpdatedAt"
            case name = "name"
            case revisionId = "revisionId"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case sources = "sources"
            case tags = "tags"
            case version = "version"
        }
    }

    public struct CreateRobotApplicationVersionRequest: AWSShape {

        /// The application information for the robot application.
        public let application: String
        /// The current revision id for the robot application. If you provide a value and it matches the latest revision ID, a new version will be created.
        public let currentRevisionId: String?

        public init(application: String, currentRevisionId: String? = nil) {
            self.application = application
            self.currentRevisionId = currentRevisionId
        }

        public func validate(name: String) throws {
            try validate(self.application, name:"application", parent: name, max: 1224)
            try validate(self.application, name:"application", parent: name, min: 1)
            try validate(self.application, name:"application", parent: name, pattern: "arn:.*")
            try validate(self.currentRevisionId, name:"currentRevisionId", parent: name, max: 40)
            try validate(self.currentRevisionId, name:"currentRevisionId", parent: name, min: 1)
            try validate(self.currentRevisionId, name:"currentRevisionId", parent: name, pattern: "[a-zA-Z0-9_.\\-]*")
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case currentRevisionId = "currentRevisionId"
        }
    }

    public struct CreateRobotApplicationVersionResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the robot application.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the robot application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The name of the robot application.
        public let name: String?
        /// The revision id of the robot application.
        public let revisionId: String?
        /// The robot software suite used by the robot application.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The sources of the robot application.
        public let sources: [Source]?
        /// The version of the robot application.
        public let version: String?

        public init(arn: String? = nil, lastUpdatedAt: TimeStamp? = nil, name: String? = nil, revisionId: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, sources: [Source]? = nil, version: String? = nil) {
            self.arn = arn
            self.lastUpdatedAt = lastUpdatedAt
            self.name = name
            self.revisionId = revisionId
            self.robotSoftwareSuite = robotSoftwareSuite
            self.sources = sources
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case lastUpdatedAt = "lastUpdatedAt"
            case name = "name"
            case revisionId = "revisionId"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case sources = "sources"
            case version = "version"
        }
    }

    public struct CreateRobotRequest: AWSShape {

        /// The target architecture of the robot.
        public let architecture: Architecture
        /// The Greengrass group id.
        public let greengrassGroupId: String
        /// The name for the robot.
        public let name: String
        /// A map that contains tag keys and tag values that are attached to the robot.
        public let tags: [String: String]?

        public init(architecture: Architecture, greengrassGroupId: String, name: String, tags: [String: String]? = nil) {
            self.architecture = architecture
            self.greengrassGroupId = greengrassGroupId
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.greengrassGroupId, name:"greengrassGroupId", parent: name, max: 1224)
            try validate(self.greengrassGroupId, name:"greengrassGroupId", parent: name, min: 1)
            try validate(self.greengrassGroupId, name:"greengrassGroupId", parent: name, pattern: ".*")
            try validate(self.name, name:"name", parent: name, max: 255)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9_\\-]*")
            try self.tags?.forEach {
                try validate($0.key, name:"tags.key", parent: name, max: 128)
                try validate($0.key, name:"tags.key", parent: name, min: 1)
                try validate($0.key, name:"tags.key", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, min: 0)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case greengrassGroupId = "greengrassGroupId"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct CreateRobotResponse: AWSShape {

        /// The target architecture of the robot.
        public let architecture: Architecture?
        /// The Amazon Resource Name (ARN) of the robot.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the robot was created.
        public let createdAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the Greengrass group associated with the robot.
        public let greengrassGroupId: String?
        /// The name of the robot.
        public let name: String?
        /// The list of all tags added to the robot.
        public let tags: [String: String]?

        public init(architecture: Architecture? = nil, arn: String? = nil, createdAt: TimeStamp? = nil, greengrassGroupId: String? = nil, name: String? = nil, tags: [String: String]? = nil) {
            self.architecture = architecture
            self.arn = arn
            self.createdAt = createdAt
            self.greengrassGroupId = greengrassGroupId
            self.name = name
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case arn = "arn"
            case createdAt = "createdAt"
            case greengrassGroupId = "greengrassGroupId"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct CreateSimulationApplicationRequest: AWSShape {

        /// The name of the simulation application.
        public let name: String
        /// The rendering engine for the simulation application.
        public let renderingEngine: RenderingEngine?
        /// The robot software suite of the simulation application.
        public let robotSoftwareSuite: RobotSoftwareSuite
        /// The simulation software suite used by the simulation application.
        public let simulationSoftwareSuite: SimulationSoftwareSuite
        /// The sources of the simulation application.
        public let sources: [SourceConfig]
        /// A map that contains tag keys and tag values that are attached to the simulation application.
        public let tags: [String: String]?

        public init(name: String, renderingEngine: RenderingEngine? = nil, robotSoftwareSuite: RobotSoftwareSuite, simulationSoftwareSuite: SimulationSoftwareSuite, sources: [SourceConfig], tags: [String: String]? = nil) {
            self.name = name
            self.renderingEngine = renderingEngine
            self.robotSoftwareSuite = robotSoftwareSuite
            self.simulationSoftwareSuite = simulationSoftwareSuite
            self.sources = sources
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 255)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9_\\-]*")
            try self.renderingEngine?.validate(name: "\(name).renderingEngine")
            try self.simulationSoftwareSuite.validate(name: "\(name).simulationSoftwareSuite")
            try self.sources.forEach {
                try $0.validate(name: "\(name).sources[]")
            }
            try self.tags?.forEach {
                try validate($0.key, name:"tags.key", parent: name, max: 128)
                try validate($0.key, name:"tags.key", parent: name, min: 1)
                try validate($0.key, name:"tags.key", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, min: 0)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case renderingEngine = "renderingEngine"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case simulationSoftwareSuite = "simulationSoftwareSuite"
            case sources = "sources"
            case tags = "tags"
        }
    }

    public struct CreateSimulationApplicationResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the simulation application.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the simulation application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The name of the simulation application.
        public let name: String?
        /// The rendering engine for the simulation application.
        public let renderingEngine: RenderingEngine?
        /// The revision id of the simulation application.
        public let revisionId: String?
        /// Information about the robot software suite.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The simulation software suite used by the simulation application.
        public let simulationSoftwareSuite: SimulationSoftwareSuite?
        /// The sources of the simulation application.
        public let sources: [Source]?
        /// The list of all tags added to the simulation application.
        public let tags: [String: String]?
        /// The version of the simulation application.
        public let version: String?

        public init(arn: String? = nil, lastUpdatedAt: TimeStamp? = nil, name: String? = nil, renderingEngine: RenderingEngine? = nil, revisionId: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, simulationSoftwareSuite: SimulationSoftwareSuite? = nil, sources: [Source]? = nil, tags: [String: String]? = nil, version: String? = nil) {
            self.arn = arn
            self.lastUpdatedAt = lastUpdatedAt
            self.name = name
            self.renderingEngine = renderingEngine
            self.revisionId = revisionId
            self.robotSoftwareSuite = robotSoftwareSuite
            self.simulationSoftwareSuite = simulationSoftwareSuite
            self.sources = sources
            self.tags = tags
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case lastUpdatedAt = "lastUpdatedAt"
            case name = "name"
            case renderingEngine = "renderingEngine"
            case revisionId = "revisionId"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case simulationSoftwareSuite = "simulationSoftwareSuite"
            case sources = "sources"
            case tags = "tags"
            case version = "version"
        }
    }

    public struct CreateSimulationApplicationVersionRequest: AWSShape {

        /// The application information for the simulation application.
        public let application: String
        /// The current revision id for the simulation application. If you provide a value and it matches the latest revision ID, a new version will be created.
        public let currentRevisionId: String?

        public init(application: String, currentRevisionId: String? = nil) {
            self.application = application
            self.currentRevisionId = currentRevisionId
        }

        public func validate(name: String) throws {
            try validate(self.application, name:"application", parent: name, max: 1224)
            try validate(self.application, name:"application", parent: name, min: 1)
            try validate(self.application, name:"application", parent: name, pattern: "arn:.*")
            try validate(self.currentRevisionId, name:"currentRevisionId", parent: name, max: 40)
            try validate(self.currentRevisionId, name:"currentRevisionId", parent: name, min: 1)
            try validate(self.currentRevisionId, name:"currentRevisionId", parent: name, pattern: "[a-zA-Z0-9_.\\-]*")
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case currentRevisionId = "currentRevisionId"
        }
    }

    public struct CreateSimulationApplicationVersionResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the simulation application.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the simulation application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The name of the simulation application.
        public let name: String?
        /// The rendering engine for the simulation application.
        public let renderingEngine: RenderingEngine?
        /// The revision ID of the simulation application.
        public let revisionId: String?
        /// Information about the robot software suite.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The simulation software suite used by the simulation application.
        public let simulationSoftwareSuite: SimulationSoftwareSuite?
        /// The sources of the simulation application.
        public let sources: [Source]?
        /// The version of the simulation application.
        public let version: String?

        public init(arn: String? = nil, lastUpdatedAt: TimeStamp? = nil, name: String? = nil, renderingEngine: RenderingEngine? = nil, revisionId: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, simulationSoftwareSuite: SimulationSoftwareSuite? = nil, sources: [Source]? = nil, version: String? = nil) {
            self.arn = arn
            self.lastUpdatedAt = lastUpdatedAt
            self.name = name
            self.renderingEngine = renderingEngine
            self.revisionId = revisionId
            self.robotSoftwareSuite = robotSoftwareSuite
            self.simulationSoftwareSuite = simulationSoftwareSuite
            self.sources = sources
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case lastUpdatedAt = "lastUpdatedAt"
            case name = "name"
            case renderingEngine = "renderingEngine"
            case revisionId = "revisionId"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case simulationSoftwareSuite = "simulationSoftwareSuite"
            case sources = "sources"
            case version = "version"
        }
    }

    public struct CreateSimulationJobRequest: AWSShape {

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// The data sources for the simulation job.  There is a limit of 100 files and a combined size of 25GB for all DataSourceConfig objects.  
        public let dataSources: [DataSourceConfig]?
        /// The failure behavior the simulation job.  Continue  Restart the simulation job in the same host instance.  Fail  Stop the simulation job and terminate the instance.  
        public let failureBehavior: FailureBehavior?
        /// The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 
        public let iamRole: String
        /// The logging configuration.
        public let loggingConfig: LoggingConfig?
        /// The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds. When maxJobDurationInSeconds is reached, the simulation job will status will transition to Completed.
        public let maxJobDurationInSeconds: Int64
        /// Location for output files generated by the simulation job.
        public let outputLocation: OutputLocation?
        /// The robot application to use in the simulation job.
        public let robotApplications: [RobotApplicationConfig]?
        /// The simulation application to use in the simulation job.
        public let simulationApplications: [SimulationApplicationConfig]?
        /// A map that contains tag keys and tag values that are attached to the simulation job.
        public let tags: [String: String]?
        /// If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and one subnet ID. 
        public let vpcConfig: VPCConfig?

        public init(clientRequestToken: String? = CreateSimulationJobRequest.idempotencyToken(), dataSources: [DataSourceConfig]? = nil, failureBehavior: FailureBehavior? = nil, iamRole: String, loggingConfig: LoggingConfig? = nil, maxJobDurationInSeconds: Int64, outputLocation: OutputLocation? = nil, robotApplications: [RobotApplicationConfig]? = nil, simulationApplications: [SimulationApplicationConfig]? = nil, tags: [String: String]? = nil, vpcConfig: VPCConfig? = nil) {
            self.clientRequestToken = clientRequestToken
            self.dataSources = dataSources
            self.failureBehavior = failureBehavior
            self.iamRole = iamRole
            self.loggingConfig = loggingConfig
            self.maxJobDurationInSeconds = maxJobDurationInSeconds
            self.outputLocation = outputLocation
            self.robotApplications = robotApplications
            self.simulationApplications = simulationApplications
            self.tags = tags
            self.vpcConfig = vpcConfig
        }

        public func validate(name: String) throws {
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, max: 64)
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, min: 1)
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, pattern: "[a-zA-Z0-9_\\-=]*")
            try self.dataSources?.forEach {
                try $0.validate(name: "\(name).dataSources[]")
            }
            try validate(self.dataSources, name:"dataSources", parent: name, max: 5)
            try validate(self.dataSources, name:"dataSources", parent: name, min: 1)
            try validate(self.iamRole, name:"iamRole", parent: name, max: 255)
            try validate(self.iamRole, name:"iamRole", parent: name, min: 1)
            try validate(self.iamRole, name:"iamRole", parent: name, pattern: "arn:aws:iam::\\w+:role/.*")
            try self.outputLocation?.validate(name: "\(name).outputLocation")
            try self.robotApplications?.forEach {
                try $0.validate(name: "\(name).robotApplications[]")
            }
            try validate(self.robotApplications, name:"robotApplications", parent: name, max: 1)
            try validate(self.robotApplications, name:"robotApplications", parent: name, min: 1)
            try self.simulationApplications?.forEach {
                try $0.validate(name: "\(name).simulationApplications[]")
            }
            try validate(self.simulationApplications, name:"simulationApplications", parent: name, max: 1)
            try validate(self.simulationApplications, name:"simulationApplications", parent: name, min: 1)
            try self.tags?.forEach {
                try validate($0.key, name:"tags.key", parent: name, max: 128)
                try validate($0.key, name:"tags.key", parent: name, min: 1)
                try validate($0.key, name:"tags.key", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, min: 0)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
            }
            try self.vpcConfig?.validate(name: "\(name).vpcConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case dataSources = "dataSources"
            case failureBehavior = "failureBehavior"
            case iamRole = "iamRole"
            case loggingConfig = "loggingConfig"
            case maxJobDurationInSeconds = "maxJobDurationInSeconds"
            case outputLocation = "outputLocation"
            case robotApplications = "robotApplications"
            case simulationApplications = "simulationApplications"
            case tags = "tags"
            case vpcConfig = "vpcConfig"
        }
    }

    public struct CreateSimulationJobResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the simulation job.
        public let arn: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// The data sources for the simulation job.
        public let dataSources: [DataSource]?
        /// the failure behavior for the simulation job.
        public let failureBehavior: FailureBehavior?
        /// The failure code of the simulation job if it failed:  InternalServiceError  Internal service error.  RobotApplicationCrash  Robot application exited abnormally.  SimulationApplicationCrash   Simulation application exited abnormally.  BadPermissionsRobotApplication  Robot application bundle could not be downloaded.  BadPermissionsSimulationApplication  Simulation application bundle could not be downloaded.  BadPermissionsS3Output  Unable to publish outputs to customer-provided S3 bucket.  BadPermissionsCloudwatchLogs  Unable to publish logs to customer-provided CloudWatch Logs resource.  SubnetIpLimitExceeded  Subnet IP limit exceeded.  ENILimitExceeded  ENI limit exceeded.  BadPermissionsUserCredentials  Unable to use the Role provided.  InvalidBundleRobotApplication  Robot bundle cannot be extracted (invalid format, bundling error, or other issue).  InvalidBundleSimulationApplication  Simulation bundle cannot be extracted (invalid format, bundling error, or other issue).  RobotApplicationVersionMismatchedEtag  Etag for RobotApplication does not match value during version creation.  SimulationApplicationVersionMismatchedEtag  Etag for SimulationApplication does not match value during version creation.  
        public let failureCode: SimulationJobErrorCode?
        /// The IAM role that allows the simulation job to call the AWS APIs that are specified in its associated policies on your behalf.
        public let iamRole: String?
        /// The time, in milliseconds since the epoch, when the simulation job was last started.
        public let lastStartedAt: TimeStamp?
        /// The time, in milliseconds since the epoch, when the simulation job was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The logging configuration.
        public let loggingConfig: LoggingConfig?
        /// The maximum simulation job duration in seconds. 
        public let maxJobDurationInSeconds: Int64?
        /// Simulation job output files location.
        public let outputLocation: OutputLocation?
        /// The robot application used by the simulation job.
        public let robotApplications: [RobotApplicationConfig]?
        /// The simulation application used by the simulation job.
        public let simulationApplications: [SimulationApplicationConfig]?
        /// The simulation job execution duration in milliseconds.
        public let simulationTimeMillis: Int64?
        /// The status of the simulation job.
        public let status: SimulationJobStatus?
        /// The list of all tags added to the simulation job.
        public let tags: [String: String]?
        /// Information about the vpc configuration.
        public let vpcConfig: VPCConfigResponse?

        public init(arn: String? = nil, clientRequestToken: String? = nil, dataSources: [DataSource]? = nil, failureBehavior: FailureBehavior? = nil, failureCode: SimulationJobErrorCode? = nil, iamRole: String? = nil, lastStartedAt: TimeStamp? = nil, lastUpdatedAt: TimeStamp? = nil, loggingConfig: LoggingConfig? = nil, maxJobDurationInSeconds: Int64? = nil, outputLocation: OutputLocation? = nil, robotApplications: [RobotApplicationConfig]? = nil, simulationApplications: [SimulationApplicationConfig]? = nil, simulationTimeMillis: Int64? = nil, status: SimulationJobStatus? = nil, tags: [String: String]? = nil, vpcConfig: VPCConfigResponse? = nil) {
            self.arn = arn
            self.clientRequestToken = clientRequestToken
            self.dataSources = dataSources
            self.failureBehavior = failureBehavior
            self.failureCode = failureCode
            self.iamRole = iamRole
            self.lastStartedAt = lastStartedAt
            self.lastUpdatedAt = lastUpdatedAt
            self.loggingConfig = loggingConfig
            self.maxJobDurationInSeconds = maxJobDurationInSeconds
            self.outputLocation = outputLocation
            self.robotApplications = robotApplications
            self.simulationApplications = simulationApplications
            self.simulationTimeMillis = simulationTimeMillis
            self.status = status
            self.tags = tags
            self.vpcConfig = vpcConfig
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case clientRequestToken = "clientRequestToken"
            case dataSources = "dataSources"
            case failureBehavior = "failureBehavior"
            case failureCode = "failureCode"
            case iamRole = "iamRole"
            case lastStartedAt = "lastStartedAt"
            case lastUpdatedAt = "lastUpdatedAt"
            case loggingConfig = "loggingConfig"
            case maxJobDurationInSeconds = "maxJobDurationInSeconds"
            case outputLocation = "outputLocation"
            case robotApplications = "robotApplications"
            case simulationApplications = "simulationApplications"
            case simulationTimeMillis = "simulationTimeMillis"
            case status = "status"
            case tags = "tags"
            case vpcConfig = "vpcConfig"
        }
    }

    public struct DataSource: AWSShape {

        /// The name of the data source.
        public let name: String?
        /// The S3 bucket where the data files are located.
        public let s3Bucket: String?
        /// The list of S3 keys identifying the data source files.
        public let s3Keys: [S3KeyOutput]?

        public init(name: String? = nil, s3Bucket: String? = nil, s3Keys: [S3KeyOutput]? = nil) {
            self.name = name
            self.s3Bucket = s3Bucket
            self.s3Keys = s3Keys
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case s3Bucket = "s3Bucket"
            case s3Keys = "s3Keys"
        }
    }

    public struct DataSourceConfig: AWSShape {

        /// The name of the data source.
        public let name: String
        /// The S3 bucket where the data files are located.
        public let s3Bucket: String
        /// The list of S3 keys identifying the data source files.
        public let s3Keys: [String]

        public init(name: String, s3Bucket: String, s3Keys: [String]) {
            self.name = name
            self.s3Bucket = s3Bucket
            self.s3Keys = s3Keys
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 255)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9_\\-]*")
            try validate(self.s3Bucket, name:"s3Bucket", parent: name, max: 63)
            try validate(self.s3Bucket, name:"s3Bucket", parent: name, min: 3)
            try validate(self.s3Bucket, name:"s3Bucket", parent: name, pattern: "[a-z0-9][a-z0-9.\\-]*[a-z0-9]")
            try self.s3Keys.forEach {
                try validate($0, name: "s3Keys[]", parent: name, max: 1024)
                try validate($0, name: "s3Keys[]", parent: name, min: 1)
                try validate($0, name: "s3Keys[]", parent: name, pattern: ".*")
            }
            try validate(self.s3Keys, name:"s3Keys", parent: name, max: 100)
            try validate(self.s3Keys, name:"s3Keys", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case s3Bucket = "s3Bucket"
            case s3Keys = "s3Keys"
        }
    }

    public struct DeleteFleetRequest: AWSShape {

        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String

        public init(fleet: String) {
            self.fleet = fleet
        }

        public func validate(name: String) throws {
            try validate(self.fleet, name:"fleet", parent: name, max: 1224)
            try validate(self.fleet, name:"fleet", parent: name, min: 1)
            try validate(self.fleet, name:"fleet", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case fleet = "fleet"
        }
    }

    public struct DeleteFleetResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteRobotApplicationRequest: AWSShape {

        /// The Amazon Resource Name (ARN) of the the robot application.
        public let application: String
        /// The version of the robot application to delete.
        public let applicationVersion: String?

        public init(application: String, applicationVersion: String? = nil) {
            self.application = application
            self.applicationVersion = applicationVersion
        }

        public func validate(name: String) throws {
            try validate(self.application, name:"application", parent: name, max: 1224)
            try validate(self.application, name:"application", parent: name, min: 1)
            try validate(self.application, name:"application", parent: name, pattern: "arn:.*")
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, max: 255)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, min: 1)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, pattern: "(\\$LATEST)|[0-9]*")
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case applicationVersion = "applicationVersion"
        }
    }

    public struct DeleteRobotApplicationResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteRobotRequest: AWSShape {

        /// The Amazon Resource Name (ARN) of the robot.
        public let robot: String

        public init(robot: String) {
            self.robot = robot
        }

        public func validate(name: String) throws {
            try validate(self.robot, name:"robot", parent: name, max: 1224)
            try validate(self.robot, name:"robot", parent: name, min: 1)
            try validate(self.robot, name:"robot", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case robot = "robot"
        }
    }

    public struct DeleteRobotResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteSimulationApplicationRequest: AWSShape {

        /// The application information for the simulation application to delete.
        public let application: String
        /// The version of the simulation application to delete.
        public let applicationVersion: String?

        public init(application: String, applicationVersion: String? = nil) {
            self.application = application
            self.applicationVersion = applicationVersion
        }

        public func validate(name: String) throws {
            try validate(self.application, name:"application", parent: name, max: 1224)
            try validate(self.application, name:"application", parent: name, min: 1)
            try validate(self.application, name:"application", parent: name, pattern: "arn:.*")
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, max: 255)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, min: 1)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, pattern: "(\\$LATEST)|[0-9]*")
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case applicationVersion = "applicationVersion"
        }
    }

    public struct DeleteSimulationApplicationResponse: AWSShape {


        public init() {
        }

    }

    public struct DeploymentApplicationConfig: AWSShape {

        /// The Amazon Resource Name (ARN) of the robot application.
        public let application: String
        /// The version of the application.
        public let applicationVersion: String
        /// The launch configuration.
        public let launchConfig: DeploymentLaunchConfig

        public init(application: String, applicationVersion: String, launchConfig: DeploymentLaunchConfig) {
            self.application = application
            self.applicationVersion = applicationVersion
            self.launchConfig = launchConfig
        }

        public func validate(name: String) throws {
            try validate(self.application, name:"application", parent: name, max: 1224)
            try validate(self.application, name:"application", parent: name, min: 1)
            try validate(self.application, name:"application", parent: name, pattern: "arn:.*")
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, max: 255)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, min: 1)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, pattern: "[0-9]*")
            try self.launchConfig.validate(name: "\(name).launchConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case applicationVersion = "applicationVersion"
            case launchConfig = "launchConfig"
        }
    }

    public struct DeploymentConfig: AWSShape {

        /// The percentage of robots receiving the deployment at the same time.
        public let concurrentDeploymentPercentage: Int?
        /// The download condition file.
        public let downloadConditionFile: S3Object?
        /// The percentage of deployments that need to fail before stopping deployment.
        public let failureThresholdPercentage: Int?
        /// The amount of time, in seconds, to wait for deployment to a single robot to complete. Choose a time between 1 minute and 7 days. The default is 5 hours.
        public let robotDeploymentTimeoutInSeconds: Int64?

        public init(concurrentDeploymentPercentage: Int? = nil, downloadConditionFile: S3Object? = nil, failureThresholdPercentage: Int? = nil, robotDeploymentTimeoutInSeconds: Int64? = nil) {
            self.concurrentDeploymentPercentage = concurrentDeploymentPercentage
            self.downloadConditionFile = downloadConditionFile
            self.failureThresholdPercentage = failureThresholdPercentage
            self.robotDeploymentTimeoutInSeconds = robotDeploymentTimeoutInSeconds
        }

        public func validate(name: String) throws {
            try validate(self.concurrentDeploymentPercentage, name:"concurrentDeploymentPercentage", parent: name, max: 100)
            try validate(self.concurrentDeploymentPercentage, name:"concurrentDeploymentPercentage", parent: name, min: 1)
            try self.downloadConditionFile?.validate(name: "\(name).downloadConditionFile")
            try validate(self.failureThresholdPercentage, name:"failureThresholdPercentage", parent: name, max: 100)
            try validate(self.failureThresholdPercentage, name:"failureThresholdPercentage", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case concurrentDeploymentPercentage = "concurrentDeploymentPercentage"
            case downloadConditionFile = "downloadConditionFile"
            case failureThresholdPercentage = "failureThresholdPercentage"
            case robotDeploymentTimeoutInSeconds = "robotDeploymentTimeoutInSeconds"
        }
    }

    public struct DeploymentJob: AWSShape {

        /// The Amazon Resource Name (ARN) of the deployment job.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the deployment job was created.
        public let createdAt: TimeStamp?
        /// The deployment application configuration.
        public let deploymentApplicationConfigs: [DeploymentApplicationConfig]?
        /// The deployment configuration.
        public let deploymentConfig: DeploymentConfig?
        /// The deployment job failure code.
        public let failureCode: DeploymentJobErrorCode?
        /// A short description of the reason why the deployment job failed.
        public let failureReason: String?
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String?
        /// The status of the deployment job.
        public let status: DeploymentStatus?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, deploymentApplicationConfigs: [DeploymentApplicationConfig]? = nil, deploymentConfig: DeploymentConfig? = nil, failureCode: DeploymentJobErrorCode? = nil, failureReason: String? = nil, fleet: String? = nil, status: DeploymentStatus? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentApplicationConfigs = deploymentApplicationConfigs
            self.deploymentConfig = deploymentConfig
            self.failureCode = failureCode
            self.failureReason = failureReason
            self.fleet = fleet
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case deploymentApplicationConfigs = "deploymentApplicationConfigs"
            case deploymentConfig = "deploymentConfig"
            case failureCode = "failureCode"
            case failureReason = "failureReason"
            case fleet = "fleet"
            case status = "status"
        }
    }

    public struct DeploymentLaunchConfig: AWSShape {

        /// An array of key/value pairs specifying environment variables for the robot application
        public let environmentVariables: [String: String]?
        /// The launch file name.
        public let launchFile: String
        /// The package name.
        public let packageName: String
        /// The deployment post-launch file. This file will be executed after the launch file.
        public let postLaunchFile: String?
        /// The deployment pre-launch file. This file will be executed prior to the launch file.
        public let preLaunchFile: String?

        public init(environmentVariables: [String: String]? = nil, launchFile: String, packageName: String, postLaunchFile: String? = nil, preLaunchFile: String? = nil) {
            self.environmentVariables = environmentVariables
            self.launchFile = launchFile
            self.packageName = packageName
            self.postLaunchFile = postLaunchFile
            self.preLaunchFile = preLaunchFile
        }

        public func validate(name: String) throws {
            try self.environmentVariables?.forEach {
                try validate($0.key, name:"environmentVariables.key", parent: name, max: 1024)
                try validate($0.key, name:"environmentVariables.key", parent: name, min: 1)
                try validate($0.key, name:"environmentVariables.key", parent: name, pattern: "[A-Z_][A-Z0-9_]*")
                try validate($0.value, name:"environmentVariables[\"\($0.key)\"]", parent: name, max: 1024)
                try validate($0.value, name:"environmentVariables[\"\($0.key)\"]", parent: name, min: 1)
                try validate($0.value, name:"environmentVariables[\"\($0.key)\"]", parent: name, pattern: ".*")
            }
            try validate(self.launchFile, name:"launchFile", parent: name, max: 1024)
            try validate(self.launchFile, name:"launchFile", parent: name, min: 1)
            try validate(self.launchFile, name:"launchFile", parent: name, pattern: "[a-zA-Z0-9_.\\-]*")
            try validate(self.packageName, name:"packageName", parent: name, max: 1024)
            try validate(self.packageName, name:"packageName", parent: name, min: 1)
            try validate(self.packageName, name:"packageName", parent: name, pattern: "[a-zA-Z0-9_.\\-]*")
            try validate(self.postLaunchFile, name:"postLaunchFile", parent: name, max: 1024)
            try validate(self.postLaunchFile, name:"postLaunchFile", parent: name, min: 1)
            try validate(self.postLaunchFile, name:"postLaunchFile", parent: name, pattern: ".*")
            try validate(self.preLaunchFile, name:"preLaunchFile", parent: name, max: 1024)
            try validate(self.preLaunchFile, name:"preLaunchFile", parent: name, min: 1)
            try validate(self.preLaunchFile, name:"preLaunchFile", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case environmentVariables = "environmentVariables"
            case launchFile = "launchFile"
            case packageName = "packageName"
            case postLaunchFile = "postLaunchFile"
            case preLaunchFile = "preLaunchFile"
        }
    }

    public struct DeregisterRobotRequest: AWSShape {

        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String
        /// The Amazon Resource Name (ARN) of the robot.
        public let robot: String

        public init(fleet: String, robot: String) {
            self.fleet = fleet
            self.robot = robot
        }

        public func validate(name: String) throws {
            try validate(self.fleet, name:"fleet", parent: name, max: 1224)
            try validate(self.fleet, name:"fleet", parent: name, min: 1)
            try validate(self.fleet, name:"fleet", parent: name, pattern: "arn:.*")
            try validate(self.robot, name:"robot", parent: name, max: 1224)
            try validate(self.robot, name:"robot", parent: name, min: 1)
            try validate(self.robot, name:"robot", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case fleet = "fleet"
            case robot = "robot"
        }
    }

    public struct DeregisterRobotResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String?
        /// The Amazon Resource Name (ARN) of the robot.
        public let robot: String?

        public init(fleet: String? = nil, robot: String? = nil) {
            self.fleet = fleet
            self.robot = robot
        }

        private enum CodingKeys: String, CodingKey {
            case fleet = "fleet"
            case robot = "robot"
        }
    }

    public struct DescribeDeploymentJobRequest: AWSShape {

        /// The Amazon Resource Name (ARN) of the deployment job.
        public let job: String

        public init(job: String) {
            self.job = job
        }

        public func validate(name: String) throws {
            try validate(self.job, name:"job", parent: name, max: 1224)
            try validate(self.job, name:"job", parent: name, min: 1)
            try validate(self.job, name:"job", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case job = "job"
        }
    }

    public struct DescribeDeploymentJobResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the deployment job.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the deployment job was created.
        public let createdAt: TimeStamp?
        /// The deployment application configuration.
        public let deploymentApplicationConfigs: [DeploymentApplicationConfig]?
        /// The deployment configuration.
        public let deploymentConfig: DeploymentConfig?
        /// The deployment job failure code.
        public let failureCode: DeploymentJobErrorCode?
        /// A short description of the reason why the deployment job failed.
        public let failureReason: String?
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String?
        /// A list of robot deployment summaries.
        public let robotDeploymentSummary: [RobotDeployment]?
        /// The status of the deployment job.
        public let status: DeploymentStatus?
        /// The list of all tags added to the specified deployment job.
        public let tags: [String: String]?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, deploymentApplicationConfigs: [DeploymentApplicationConfig]? = nil, deploymentConfig: DeploymentConfig? = nil, failureCode: DeploymentJobErrorCode? = nil, failureReason: String? = nil, fleet: String? = nil, robotDeploymentSummary: [RobotDeployment]? = nil, status: DeploymentStatus? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentApplicationConfigs = deploymentApplicationConfigs
            self.deploymentConfig = deploymentConfig
            self.failureCode = failureCode
            self.failureReason = failureReason
            self.fleet = fleet
            self.robotDeploymentSummary = robotDeploymentSummary
            self.status = status
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case deploymentApplicationConfigs = "deploymentApplicationConfigs"
            case deploymentConfig = "deploymentConfig"
            case failureCode = "failureCode"
            case failureReason = "failureReason"
            case fleet = "fleet"
            case robotDeploymentSummary = "robotDeploymentSummary"
            case status = "status"
            case tags = "tags"
        }
    }

    public struct DescribeFleetRequest: AWSShape {

        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String

        public init(fleet: String) {
            self.fleet = fleet
        }

        public func validate(name: String) throws {
            try validate(self.fleet, name:"fleet", parent: name, max: 1224)
            try validate(self.fleet, name:"fleet", parent: name, min: 1)
            try validate(self.fleet, name:"fleet", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case fleet = "fleet"
        }
    }

    public struct DescribeFleetResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the fleet.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the fleet was created.
        public let createdAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the last deployment job.
        public let lastDeploymentJob: String?
        /// The status of the last deployment.
        public let lastDeploymentStatus: DeploymentStatus?
        /// The time of the last deployment.
        public let lastDeploymentTime: TimeStamp?
        /// The name of the fleet.
        public let name: String?
        /// A list of robots.
        public let robots: [Robot]?
        /// The list of all tags added to the specified fleet.
        public let tags: [String: String]?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, lastDeploymentJob: String? = nil, lastDeploymentStatus: DeploymentStatus? = nil, lastDeploymentTime: TimeStamp? = nil, name: String? = nil, robots: [Robot]? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.lastDeploymentJob = lastDeploymentJob
            self.lastDeploymentStatus = lastDeploymentStatus
            self.lastDeploymentTime = lastDeploymentTime
            self.name = name
            self.robots = robots
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case lastDeploymentJob = "lastDeploymentJob"
            case lastDeploymentStatus = "lastDeploymentStatus"
            case lastDeploymentTime = "lastDeploymentTime"
            case name = "name"
            case robots = "robots"
            case tags = "tags"
        }
    }

    public struct DescribeRobotApplicationRequest: AWSShape {

        /// The Amazon Resource Name (ARN) of the robot application.
        public let application: String
        /// The version of the robot application to describe.
        public let applicationVersion: String?

        public init(application: String, applicationVersion: String? = nil) {
            self.application = application
            self.applicationVersion = applicationVersion
        }

        public func validate(name: String) throws {
            try validate(self.application, name:"application", parent: name, max: 1224)
            try validate(self.application, name:"application", parent: name, min: 1)
            try validate(self.application, name:"application", parent: name, pattern: "arn:.*")
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, max: 255)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, min: 1)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, pattern: "(\\$LATEST)|[0-9]*")
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case applicationVersion = "applicationVersion"
        }
    }

    public struct DescribeRobotApplicationResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the robot application.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the robot application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The name of the robot application.
        public let name: String?
        /// The revision id of the robot application.
        public let revisionId: String?
        /// The robot software suite used by the robot application.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The sources of the robot application.
        public let sources: [Source]?
        /// The list of all tags added to the specified robot application.
        public let tags: [String: String]?
        /// The version of the robot application.
        public let version: String?

        public init(arn: String? = nil, lastUpdatedAt: TimeStamp? = nil, name: String? = nil, revisionId: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, sources: [Source]? = nil, tags: [String: String]? = nil, version: String? = nil) {
            self.arn = arn
            self.lastUpdatedAt = lastUpdatedAt
            self.name = name
            self.revisionId = revisionId
            self.robotSoftwareSuite = robotSoftwareSuite
            self.sources = sources
            self.tags = tags
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case lastUpdatedAt = "lastUpdatedAt"
            case name = "name"
            case revisionId = "revisionId"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case sources = "sources"
            case tags = "tags"
            case version = "version"
        }
    }

    public struct DescribeRobotRequest: AWSShape {

        /// The Amazon Resource Name (ARN) of the robot to be described.
        public let robot: String

        public init(robot: String) {
            self.robot = robot
        }

        public func validate(name: String) throws {
            try validate(self.robot, name:"robot", parent: name, max: 1224)
            try validate(self.robot, name:"robot", parent: name, min: 1)
            try validate(self.robot, name:"robot", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case robot = "robot"
        }
    }

    public struct DescribeRobotResponse: AWSShape {

        /// The target architecture of the robot application.
        public let architecture: Architecture?
        /// The Amazon Resource Name (ARN) of the robot.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the robot was created.
        public let createdAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleetArn: String?
        /// The Greengrass group id.
        public let greengrassGroupId: String?
        /// The Amazon Resource Name (ARN) of the last deployment job.
        public let lastDeploymentJob: String?
        /// The time of the last deployment job.
        public let lastDeploymentTime: TimeStamp?
        /// The name of the robot.
        public let name: String?
        /// The status of the fleet.
        public let status: RobotStatus?
        /// The list of all tags added to the specified robot.
        public let tags: [String: String]?

        public init(architecture: Architecture? = nil, arn: String? = nil, createdAt: TimeStamp? = nil, fleetArn: String? = nil, greengrassGroupId: String? = nil, lastDeploymentJob: String? = nil, lastDeploymentTime: TimeStamp? = nil, name: String? = nil, status: RobotStatus? = nil, tags: [String: String]? = nil) {
            self.architecture = architecture
            self.arn = arn
            self.createdAt = createdAt
            self.fleetArn = fleetArn
            self.greengrassGroupId = greengrassGroupId
            self.lastDeploymentJob = lastDeploymentJob
            self.lastDeploymentTime = lastDeploymentTime
            self.name = name
            self.status = status
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case arn = "arn"
            case createdAt = "createdAt"
            case fleetArn = "fleetArn"
            case greengrassGroupId = "greengrassGroupId"
            case lastDeploymentJob = "lastDeploymentJob"
            case lastDeploymentTime = "lastDeploymentTime"
            case name = "name"
            case status = "status"
            case tags = "tags"
        }
    }

    public struct DescribeSimulationApplicationRequest: AWSShape {

        /// The application information for the simulation application.
        public let application: String
        /// The version of the simulation application to describe.
        public let applicationVersion: String?

        public init(application: String, applicationVersion: String? = nil) {
            self.application = application
            self.applicationVersion = applicationVersion
        }

        public func validate(name: String) throws {
            try validate(self.application, name:"application", parent: name, max: 1224)
            try validate(self.application, name:"application", parent: name, min: 1)
            try validate(self.application, name:"application", parent: name, pattern: "arn:.*")
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, max: 255)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, min: 1)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, pattern: "(\\$LATEST)|[0-9]*")
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case applicationVersion = "applicationVersion"
        }
    }

    public struct DescribeSimulationApplicationResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the robot simulation application.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the simulation application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The name of the simulation application.
        public let name: String?
        /// The rendering engine for the simulation application.
        public let renderingEngine: RenderingEngine?
        /// The revision id of the simulation application.
        public let revisionId: String?
        /// Information about the robot software suite.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The simulation software suite used by the simulation application.
        public let simulationSoftwareSuite: SimulationSoftwareSuite?
        /// The sources of the simulation application.
        public let sources: [Source]?
        /// The list of all tags added to the specified simulation application.
        public let tags: [String: String]?
        /// The version of the simulation application.
        public let version: String?

        public init(arn: String? = nil, lastUpdatedAt: TimeStamp? = nil, name: String? = nil, renderingEngine: RenderingEngine? = nil, revisionId: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, simulationSoftwareSuite: SimulationSoftwareSuite? = nil, sources: [Source]? = nil, tags: [String: String]? = nil, version: String? = nil) {
            self.arn = arn
            self.lastUpdatedAt = lastUpdatedAt
            self.name = name
            self.renderingEngine = renderingEngine
            self.revisionId = revisionId
            self.robotSoftwareSuite = robotSoftwareSuite
            self.simulationSoftwareSuite = simulationSoftwareSuite
            self.sources = sources
            self.tags = tags
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case lastUpdatedAt = "lastUpdatedAt"
            case name = "name"
            case renderingEngine = "renderingEngine"
            case revisionId = "revisionId"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case simulationSoftwareSuite = "simulationSoftwareSuite"
            case sources = "sources"
            case tags = "tags"
            case version = "version"
        }
    }

    public struct DescribeSimulationJobRequest: AWSShape {

        /// The Amazon Resource Name (ARN) of the simulation job to be described.
        public let job: String

        public init(job: String) {
            self.job = job
        }

        public func validate(name: String) throws {
            try validate(self.job, name:"job", parent: name, max: 1224)
            try validate(self.job, name:"job", parent: name, min: 1)
            try validate(self.job, name:"job", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case job = "job"
        }
    }

    public struct DescribeSimulationJobResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the simulation job.
        public let arn: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// The data sources for the simulation job.
        public let dataSources: [DataSource]?
        /// The failure behavior for the simulation job.
        public let failureBehavior: FailureBehavior?
        /// The failure code of the simulation job if it failed:  InternalServiceError  Internal service error.  RobotApplicationCrash  Robot application exited abnormally.  SimulationApplicationCrash   Simulation application exited abnormally.  BadPermissionsRobotApplication  Robot application bundle could not be downloaded.  BadPermissionsSimulationApplication  Simulation application bundle could not be downloaded.  BadPermissionsS3Output  Unable to publish outputs to customer-provided S3 bucket.  BadPermissionsCloudwatchLogs  Unable to publish logs to customer-provided CloudWatch Logs resource.  SubnetIpLimitExceeded  Subnet IP limit exceeded.  ENILimitExceeded  ENI limit exceeded.  BadPermissionsUserCredentials  Unable to use the Role provided.  InvalidBundleRobotApplication  Robot bundle cannot be extracted (invalid format, bundling error, or other issue).  InvalidBundleSimulationApplication  Simulation bundle cannot be extracted (invalid format, bundling error, or other issue).  RobotApplicationVersionMismatchedEtag  Etag for RobotApplication does not match value during version creation.  SimulationApplicationVersionMismatchedEtag  Etag for SimulationApplication does not match value during version creation.  
        public let failureCode: SimulationJobErrorCode?
        /// Details about why the simulation job failed. For more information about troubleshooting, see Troubleshooting.
        public let failureReason: String?
        /// The IAM role that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf.
        public let iamRole: String?
        /// The time, in milliseconds since the epoch, when the simulation job was last started.
        public let lastStartedAt: TimeStamp?
        /// The time, in milliseconds since the epoch, when the simulation job was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The logging configuration.
        public let loggingConfig: LoggingConfig?
        /// The maximum job duration in seconds. The value must be 8 days (691,200 seconds) or less.
        public let maxJobDurationInSeconds: Int64?
        /// The name of the simulation job.
        public let name: String?
        /// The network interface information for the simulation job.
        public let networkInterface: NetworkInterface?
        /// Location for output files generated by the simulation job.
        public let outputLocation: OutputLocation?
        /// A list of robot applications.
        public let robotApplications: [RobotApplicationConfig]?
        /// A list of simulation applications.
        public let simulationApplications: [SimulationApplicationConfig]?
        /// The simulation job execution duration in milliseconds.
        public let simulationTimeMillis: Int64?
        /// The status of the simulation job.
        public let status: SimulationJobStatus?
        /// The list of all tags added to the specified simulation job.
        public let tags: [String: String]?
        /// The VPC configuration.
        public let vpcConfig: VPCConfigResponse?

        public init(arn: String? = nil, clientRequestToken: String? = nil, dataSources: [DataSource]? = nil, failureBehavior: FailureBehavior? = nil, failureCode: SimulationJobErrorCode? = nil, failureReason: String? = nil, iamRole: String? = nil, lastStartedAt: TimeStamp? = nil, lastUpdatedAt: TimeStamp? = nil, loggingConfig: LoggingConfig? = nil, maxJobDurationInSeconds: Int64? = nil, name: String? = nil, networkInterface: NetworkInterface? = nil, outputLocation: OutputLocation? = nil, robotApplications: [RobotApplicationConfig]? = nil, simulationApplications: [SimulationApplicationConfig]? = nil, simulationTimeMillis: Int64? = nil, status: SimulationJobStatus? = nil, tags: [String: String]? = nil, vpcConfig: VPCConfigResponse? = nil) {
            self.arn = arn
            self.clientRequestToken = clientRequestToken
            self.dataSources = dataSources
            self.failureBehavior = failureBehavior
            self.failureCode = failureCode
            self.failureReason = failureReason
            self.iamRole = iamRole
            self.lastStartedAt = lastStartedAt
            self.lastUpdatedAt = lastUpdatedAt
            self.loggingConfig = loggingConfig
            self.maxJobDurationInSeconds = maxJobDurationInSeconds
            self.name = name
            self.networkInterface = networkInterface
            self.outputLocation = outputLocation
            self.robotApplications = robotApplications
            self.simulationApplications = simulationApplications
            self.simulationTimeMillis = simulationTimeMillis
            self.status = status
            self.tags = tags
            self.vpcConfig = vpcConfig
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case clientRequestToken = "clientRequestToken"
            case dataSources = "dataSources"
            case failureBehavior = "failureBehavior"
            case failureCode = "failureCode"
            case failureReason = "failureReason"
            case iamRole = "iamRole"
            case lastStartedAt = "lastStartedAt"
            case lastUpdatedAt = "lastUpdatedAt"
            case loggingConfig = "loggingConfig"
            case maxJobDurationInSeconds = "maxJobDurationInSeconds"
            case name = "name"
            case networkInterface = "networkInterface"
            case outputLocation = "outputLocation"
            case robotApplications = "robotApplications"
            case simulationApplications = "simulationApplications"
            case simulationTimeMillis = "simulationTimeMillis"
            case status = "status"
            case tags = "tags"
            case vpcConfig = "vpcConfig"
        }
    }

    public struct Filter: AWSShape {

        /// The name of the filter.
        public let name: String?
        /// A list of values.
        public let values: [String]?

        public init(name: String? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 255)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9_\\-]*")
            try self.values?.forEach {
                try validate($0, name: "values[]", parent: name, max: 255)
                try validate($0, name: "values[]", parent: name, min: 1)
                try validate($0, name: "values[]", parent: name, pattern: "[a-zA-Z0-9_\\-]*")
            }
            try validate(self.values, name:"values", parent: name, max: 1)
            try validate(self.values, name:"values", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case values = "values"
        }
    }

    public struct Fleet: AWSShape {

        /// The Amazon Resource Name (ARN) of the fleet.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the fleet was created.
        public let createdAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the last deployment job.
        public let lastDeploymentJob: String?
        /// The status of the last fleet deployment.
        public let lastDeploymentStatus: DeploymentStatus?
        /// The time of the last deployment.
        public let lastDeploymentTime: TimeStamp?
        /// The name of the fleet.
        public let name: String?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, lastDeploymentJob: String? = nil, lastDeploymentStatus: DeploymentStatus? = nil, lastDeploymentTime: TimeStamp? = nil, name: String? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.lastDeploymentJob = lastDeploymentJob
            self.lastDeploymentStatus = lastDeploymentStatus
            self.lastDeploymentTime = lastDeploymentTime
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case lastDeploymentJob = "lastDeploymentJob"
            case lastDeploymentStatus = "lastDeploymentStatus"
            case lastDeploymentTime = "lastDeploymentTime"
            case name = "name"
        }
    }

    public struct LaunchConfig: AWSShape {

        /// The environment variables for the application launch.
        public let environmentVariables: [String: String]?
        /// The launch file name.
        public let launchFile: String
        /// The package name.
        public let packageName: String
        /// The port forwarding configuration.
        public let portForwardingConfig: PortForwardingConfig?

        public init(environmentVariables: [String: String]? = nil, launchFile: String, packageName: String, portForwardingConfig: PortForwardingConfig? = nil) {
            self.environmentVariables = environmentVariables
            self.launchFile = launchFile
            self.packageName = packageName
            self.portForwardingConfig = portForwardingConfig
        }

        public func validate(name: String) throws {
            try self.environmentVariables?.forEach {
                try validate($0.key, name:"environmentVariables.key", parent: name, max: 1024)
                try validate($0.key, name:"environmentVariables.key", parent: name, min: 1)
                try validate($0.key, name:"environmentVariables.key", parent: name, pattern: "[A-Z_][A-Z0-9_]*")
                try validate($0.value, name:"environmentVariables[\"\($0.key)\"]", parent: name, max: 1024)
                try validate($0.value, name:"environmentVariables[\"\($0.key)\"]", parent: name, min: 1)
                try validate($0.value, name:"environmentVariables[\"\($0.key)\"]", parent: name, pattern: ".*")
            }
            try validate(self.launchFile, name:"launchFile", parent: name, max: 1024)
            try validate(self.launchFile, name:"launchFile", parent: name, min: 1)
            try validate(self.launchFile, name:"launchFile", parent: name, pattern: "[a-zA-Z0-9_.\\-]*")
            try validate(self.packageName, name:"packageName", parent: name, max: 1024)
            try validate(self.packageName, name:"packageName", parent: name, min: 1)
            try validate(self.packageName, name:"packageName", parent: name, pattern: "[a-zA-Z0-9_.\\-]*")
            try self.portForwardingConfig?.validate(name: "\(name).portForwardingConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case environmentVariables = "environmentVariables"
            case launchFile = "launchFile"
            case packageName = "packageName"
            case portForwardingConfig = "portForwardingConfig"
        }
    }

    public struct ListDeploymentJobsRequest: AWSShape {

        /// Optional filters to limit results. The filter names status and fleetName are supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters, but they must be for the same named item. For example, if you are looking for items with the status InProgress or the status Pending.
        public let filters: [Filter]?
        /// The maximum number of deployment job results returned by ListDeploymentJobs in paginated output. When this parameter is used, ListDeploymentJobs only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListDeploymentJobs request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListDeploymentJobs returns up to 100 results and a nextToken value if applicable. 
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated ListDeploymentJobs request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.   This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try validate(self.filters, name:"filters", parent: name, max: 1)
            try validate(self.filters, name:"filters", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 2048)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[a-zA-Z0-9_.\\-\\/+=]*")
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "filters"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListDeploymentJobsResponse: AWSShape {

        /// A list of deployment jobs that meet the criteria of the request.
        public let deploymentJobs: [DeploymentJob]?
        /// The nextToken value to include in a future ListDeploymentJobs request. When the results of a ListDeploymentJobs request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?

        public init(deploymentJobs: [DeploymentJob]? = nil, nextToken: String? = nil) {
            self.deploymentJobs = deploymentJobs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentJobs = "deploymentJobs"
            case nextToken = "nextToken"
        }
    }

    public struct ListFleetsRequest: AWSShape {

        /// Optional filters to limit results. The filter name name is supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters.
        public let filters: [Filter]?
        /// The maximum number of deployment job results returned by ListFleets in paginated output. When this parameter is used, ListFleets only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListFleets request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListFleets returns up to 100 results and a nextToken value if applicable. 
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated ListFleets request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.   This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try validate(self.filters, name:"filters", parent: name, max: 1)
            try validate(self.filters, name:"filters", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 2048)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[a-zA-Z0-9_.\\-\\/+=]*")
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "filters"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListFleetsResponse: AWSShape {

        /// A list of fleet details meeting the request criteria.
        public let fleetDetails: [Fleet]?
        /// The nextToken value to include in a future ListDeploymentJobs request. When the results of a ListFleets request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?

        public init(fleetDetails: [Fleet]? = nil, nextToken: String? = nil) {
            self.fleetDetails = fleetDetails
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleetDetails = "fleetDetails"
            case nextToken = "nextToken"
        }
    }

    public struct ListRobotApplicationsRequest: AWSShape {

        /// Optional filters to limit results. The filter name name is supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters.
        public let filters: [Filter]?
        /// The maximum number of deployment job results returned by ListRobotApplications in paginated output. When this parameter is used, ListRobotApplications only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListRobotApplications request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListRobotApplications returns up to 100 results and a nextToken value if applicable. 
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated ListRobotApplications request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.   This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The version qualifier of the robot application.
        public let versionQualifier: String?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, versionQualifier: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.versionQualifier = versionQualifier
        }

        public func validate(name: String) throws {
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try validate(self.filters, name:"filters", parent: name, max: 1)
            try validate(self.filters, name:"filters", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 2048)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[a-zA-Z0-9_.\\-\\/+=]*")
            try validate(self.versionQualifier, name:"versionQualifier", parent: name, pattern: "ALL")
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "filters"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case versionQualifier = "versionQualifier"
        }
    }

    public struct ListRobotApplicationsResponse: AWSShape {

        /// The nextToken value to include in a future ListRobotApplications request. When the results of a ListRobotApplications request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?
        /// A list of robot application summaries that meet the criteria of the request.
        public let robotApplicationSummaries: [RobotApplicationSummary]?

        public init(nextToken: String? = nil, robotApplicationSummaries: [RobotApplicationSummary]? = nil) {
            self.nextToken = nextToken
            self.robotApplicationSummaries = robotApplicationSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case robotApplicationSummaries = "robotApplicationSummaries"
        }
    }

    public struct ListRobotsRequest: AWSShape {

        /// Optional filters to limit results. The filter names status and fleetName are supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters, but they must be for the same named item. For example, if you are looking for items with the status Registered or the status Available.
        public let filters: [Filter]?
        /// The maximum number of deployment job results returned by ListRobots in paginated output. When this parameter is used, ListRobots only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListRobots request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListRobots returns up to 100 results and a nextToken value if applicable. 
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated ListRobots request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.   This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try validate(self.filters, name:"filters", parent: name, max: 1)
            try validate(self.filters, name:"filters", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 2048)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[a-zA-Z0-9_.\\-\\/+=]*")
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "filters"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListRobotsResponse: AWSShape {

        /// The nextToken value to include in a future ListRobots request. When the results of a ListRobot request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?
        /// A list of robots that meet the criteria of the request.
        public let robots: [Robot]?

        public init(nextToken: String? = nil, robots: [Robot]? = nil) {
            self.nextToken = nextToken
            self.robots = robots
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case robots = "robots"
        }
    }

    public struct ListSimulationApplicationsRequest: AWSShape {

        /// Optional list of filters to limit results. The filter name name is supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters.
        public let filters: [Filter]?
        /// The maximum number of deployment job results returned by ListSimulationApplications in paginated output. When this parameter is used, ListSimulationApplications only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListSimulationApplications request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListSimulationApplications returns up to 100 results and a nextToken value if applicable. 
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated ListSimulationApplications request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.   This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The version qualifier of the simulation application.
        public let versionQualifier: String?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, versionQualifier: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.versionQualifier = versionQualifier
        }

        public func validate(name: String) throws {
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try validate(self.filters, name:"filters", parent: name, max: 1)
            try validate(self.filters, name:"filters", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 2048)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[a-zA-Z0-9_.\\-\\/+=]*")
            try validate(self.versionQualifier, name:"versionQualifier", parent: name, pattern: "ALL")
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "filters"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case versionQualifier = "versionQualifier"
        }
    }

    public struct ListSimulationApplicationsResponse: AWSShape {

        /// The nextToken value to include in a future ListSimulationApplications request. When the results of a ListRobot request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?
        /// A list of simulation application summaries that meet the criteria of the request.
        public let simulationApplicationSummaries: [SimulationApplicationSummary]?

        public init(nextToken: String? = nil, simulationApplicationSummaries: [SimulationApplicationSummary]? = nil) {
            self.nextToken = nextToken
            self.simulationApplicationSummaries = simulationApplicationSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case simulationApplicationSummaries = "simulationApplicationSummaries"
        }
    }

    public struct ListSimulationJobsRequest: AWSShape {

        /// Optional filters to limit results. The filter names status and simulationApplicationName and robotApplicationName are supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters, but they must be for the same named item. For example, if you are looking for items with the status Preparing or the status Running.
        public let filters: [Filter]?
        /// The maximum number of deployment job results returned by ListSimulationJobs in paginated output. When this parameter is used, ListSimulationJobs only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListSimulationJobs request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListSimulationJobs returns up to 100 results and a nextToken value if applicable. 
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated ListSimulationJobs request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.   This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try validate(self.filters, name:"filters", parent: name, max: 1)
            try validate(self.filters, name:"filters", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 2048)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, pattern: "[a-zA-Z0-9_.\\-\\/+=]*")
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "filters"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListSimulationJobsResponse: AWSShape {

        /// The nextToken value to include in a future ListSimulationJobs request. When the results of a ListRobot request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return. 
        public let nextToken: String?
        /// A list of simulation job summaries that meet the criteria of the request.
        public let simulationJobSummaries: [SimulationJobSummary]

        public init(nextToken: String? = nil, simulationJobSummaries: [SimulationJobSummary]) {
            self.nextToken = nextToken
            self.simulationJobSummaries = simulationJobSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case simulationJobSummaries = "simulationJobSummaries"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resourceArn"))
        ]

        /// The AWS RoboMaker Amazon Resource Name (ARN) with tags to be listed.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, max: 1224)
            try validate(self.resourceArn, name:"resourceArn", parent: name, min: 1)
            try validate(self.resourceArn, name:"resourceArn", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {

        /// The list of all tags added to the specified resource.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct LoggingConfig: AWSShape {

        /// A boolean indicating whether to record all ROS topics.
        public let recordAllRosTopics: Bool

        public init(recordAllRosTopics: Bool) {
            self.recordAllRosTopics = recordAllRosTopics
        }

        private enum CodingKeys: String, CodingKey {
            case recordAllRosTopics = "recordAllRosTopics"
        }
    }

    public struct NetworkInterface: AWSShape {

        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// The IPv4 public address of the network interface.
        public let publicIpAddress: String?

        public init(networkInterfaceId: String? = nil, privateIpAddress: String? = nil, publicIpAddress: String? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.publicIpAddress = publicIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case privateIpAddress = "privateIpAddress"
            case publicIpAddress = "publicIpAddress"
        }
    }

    public struct OutputLocation: AWSShape {

        /// The S3 bucket for output.
        public let s3Bucket: String?
        /// The S3 folder in the s3Bucket where output files will be placed.
        public let s3Prefix: String?

        public init(s3Bucket: String? = nil, s3Prefix: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }

        public func validate(name: String) throws {
            try validate(self.s3Bucket, name:"s3Bucket", parent: name, max: 63)
            try validate(self.s3Bucket, name:"s3Bucket", parent: name, min: 3)
            try validate(self.s3Bucket, name:"s3Bucket", parent: name, pattern: "[a-z0-9][a-z0-9.\\-]*[a-z0-9]")
            try validate(self.s3Prefix, name:"s3Prefix", parent: name, max: 1024)
            try validate(self.s3Prefix, name:"s3Prefix", parent: name, min: 1)
            try validate(self.s3Prefix, name:"s3Prefix", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "s3Bucket"
            case s3Prefix = "s3Prefix"
        }
    }

    public struct PortForwardingConfig: AWSShape {

        /// The port mappings for the configuration.
        public let portMappings: [PortMapping]?

        public init(portMappings: [PortMapping]? = nil) {
            self.portMappings = portMappings
        }

        public func validate(name: String) throws {
            try self.portMappings?.forEach {
                try $0.validate(name: "\(name).portMappings[]")
            }
            try validate(self.portMappings, name:"portMappings", parent: name, max: 10)
            try validate(self.portMappings, name:"portMappings", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case portMappings = "portMappings"
        }
    }

    public struct PortMapping: AWSShape {

        /// The port number on the application.
        public let applicationPort: Int
        /// A Boolean indicating whether to enable this port mapping on public IP.
        public let enableOnPublicIp: Bool?
        /// The port number on the simulation job instance to use as a remote connection point. 
        public let jobPort: Int

        public init(applicationPort: Int, enableOnPublicIp: Bool? = nil, jobPort: Int) {
            self.applicationPort = applicationPort
            self.enableOnPublicIp = enableOnPublicIp
            self.jobPort = jobPort
        }

        public func validate(name: String) throws {
            try validate(self.applicationPort, name:"applicationPort", parent: name, max: 65535)
            try validate(self.applicationPort, name:"applicationPort", parent: name, min: 1024)
            try validate(self.jobPort, name:"jobPort", parent: name, max: 65535)
            try validate(self.jobPort, name:"jobPort", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case applicationPort = "applicationPort"
            case enableOnPublicIp = "enableOnPublicIp"
            case jobPort = "jobPort"
        }
    }

    public struct ProgressDetail: AWSShape {

        /// The current progress status.  Validating  Validating the deployment.  DownloadingExtracting  Downloading and extracting the bundle on the robot.  ExecutingPreLaunch  Executing pre-launch script(s) if provided.  Launching  Launching the robot application.  ExecutingPostLaunch  Executing post-launch script(s) if provided.  Finished  Deployment is complete.  
        public let currentProgress: RobotDeploymentStep?
        /// Estimated amount of time in seconds remaining in the step. This currently only applies to the Downloading/Extracting step of the deployment. It is empty for other steps.
        public let estimatedTimeRemainingSeconds: Int?
        /// Precentage of the step that is done. This currently only applies to the Downloading/Extracting step of the deployment. It is empty for other steps.
        public let percentDone: Float?
        /// The Amazon Resource Name (ARN) of the deployment job.
        public let targetResource: String?

        public init(currentProgress: RobotDeploymentStep? = nil, estimatedTimeRemainingSeconds: Int? = nil, percentDone: Float? = nil, targetResource: String? = nil) {
            self.currentProgress = currentProgress
            self.estimatedTimeRemainingSeconds = estimatedTimeRemainingSeconds
            self.percentDone = percentDone
            self.targetResource = targetResource
        }

        private enum CodingKeys: String, CodingKey {
            case currentProgress = "currentProgress"
            case estimatedTimeRemainingSeconds = "estimatedTimeRemainingSeconds"
            case percentDone = "percentDone"
            case targetResource = "targetResource"
        }
    }

    public struct RegisterRobotRequest: AWSShape {

        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String
        /// The Amazon Resource Name (ARN) of the robot.
        public let robot: String

        public init(fleet: String, robot: String) {
            self.fleet = fleet
            self.robot = robot
        }

        public func validate(name: String) throws {
            try validate(self.fleet, name:"fleet", parent: name, max: 1224)
            try validate(self.fleet, name:"fleet", parent: name, min: 1)
            try validate(self.fleet, name:"fleet", parent: name, pattern: "arn:.*")
            try validate(self.robot, name:"robot", parent: name, max: 1224)
            try validate(self.robot, name:"robot", parent: name, min: 1)
            try validate(self.robot, name:"robot", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case fleet = "fleet"
            case robot = "robot"
        }
    }

    public struct RegisterRobotResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the fleet that the robot will join.
        public let fleet: String?
        /// Information about the robot registration.
        public let robot: String?

        public init(fleet: String? = nil, robot: String? = nil) {
            self.fleet = fleet
            self.robot = robot
        }

        private enum CodingKeys: String, CodingKey {
            case fleet = "fleet"
            case robot = "robot"
        }
    }

    public struct RenderingEngine: AWSShape {

        /// The name of the rendering engine.
        public let name: RenderingEngineType?
        /// The version of the rendering engine.
        public let version: String?

        public init(name: RenderingEngineType? = nil, version: String? = nil) {
            self.name = name
            self.version = version
        }

        public func validate(name: String) throws {
            try validate(self.version, name:"version", parent: name, pattern: "1.x")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case version = "version"
        }
    }

    public struct RestartSimulationJobRequest: AWSShape {

        /// The Amazon Resource Name (ARN) of the simulation job.
        public let job: String

        public init(job: String) {
            self.job = job
        }

        public func validate(name: String) throws {
            try validate(self.job, name:"job", parent: name, max: 1224)
            try validate(self.job, name:"job", parent: name, min: 1)
            try validate(self.job, name:"job", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case job = "job"
        }
    }

    public struct RestartSimulationJobResponse: AWSShape {


        public init() {
        }

    }

    public struct Robot: AWSShape {

        /// The architecture of the robot.
        public let architecture: Architecture?
        /// The Amazon Resource Name (ARN) of the robot.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the robot was created.
        public let createdAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleetArn: String?
        /// The Greengrass group associated with the robot.
        public let greenGrassGroupId: String?
        /// The Amazon Resource Name (ARN) of the last deployment job.
        public let lastDeploymentJob: String?
        /// The time of the last deployment.
        public let lastDeploymentTime: TimeStamp?
        /// The name of the robot.
        public let name: String?
        /// The status of the robot.
        public let status: RobotStatus?

        public init(architecture: Architecture? = nil, arn: String? = nil, createdAt: TimeStamp? = nil, fleetArn: String? = nil, greenGrassGroupId: String? = nil, lastDeploymentJob: String? = nil, lastDeploymentTime: TimeStamp? = nil, name: String? = nil, status: RobotStatus? = nil) {
            self.architecture = architecture
            self.arn = arn
            self.createdAt = createdAt
            self.fleetArn = fleetArn
            self.greenGrassGroupId = greenGrassGroupId
            self.lastDeploymentJob = lastDeploymentJob
            self.lastDeploymentTime = lastDeploymentTime
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case arn = "arn"
            case createdAt = "createdAt"
            case fleetArn = "fleetArn"
            case greenGrassGroupId = "greenGrassGroupId"
            case lastDeploymentJob = "lastDeploymentJob"
            case lastDeploymentTime = "lastDeploymentTime"
            case name = "name"
            case status = "status"
        }
    }

    public struct RobotApplicationConfig: AWSShape {

        /// The application information for the robot application.
        public let application: String
        /// The version of the robot application.
        public let applicationVersion: String?
        /// The launch configuration for the robot application.
        public let launchConfig: LaunchConfig

        public init(application: String, applicationVersion: String? = nil, launchConfig: LaunchConfig) {
            self.application = application
            self.applicationVersion = applicationVersion
            self.launchConfig = launchConfig
        }

        public func validate(name: String) throws {
            try validate(self.application, name:"application", parent: name, max: 1224)
            try validate(self.application, name:"application", parent: name, min: 1)
            try validate(self.application, name:"application", parent: name, pattern: "arn:.*")
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, max: 255)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, min: 1)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, pattern: "(\\$LATEST)|[0-9]*")
            try self.launchConfig.validate(name: "\(name).launchConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case applicationVersion = "applicationVersion"
            case launchConfig = "launchConfig"
        }
    }

    public struct RobotApplicationSummary: AWSShape {

        /// The Amazon Resource Name (ARN) of the robot.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the robot application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The name of the robot application.
        public let name: String?
        /// Information about a robot software suite.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The version of the robot application.
        public let version: String?

        public init(arn: String? = nil, lastUpdatedAt: TimeStamp? = nil, name: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, version: String? = nil) {
            self.arn = arn
            self.lastUpdatedAt = lastUpdatedAt
            self.name = name
            self.robotSoftwareSuite = robotSoftwareSuite
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case lastUpdatedAt = "lastUpdatedAt"
            case name = "name"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case version = "version"
        }
    }

    public struct RobotDeployment: AWSShape {

        /// The robot deployment Amazon Resource Name (ARN).
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the deployment finished.
        public let deploymentFinishTime: TimeStamp?
        /// The time, in milliseconds since the epoch, when the deployment was started.
        public let deploymentStartTime: TimeStamp?
        /// The robot deployment failure code.
        public let failureCode: DeploymentJobErrorCode?
        /// A short description of the reason why the robot deployment failed.
        public let failureReason: String?
        /// Information about how the deployment is progressing.
        public let progressDetail: ProgressDetail?
        /// The status of the robot deployment.
        public let status: RobotStatus?

        public init(arn: String? = nil, deploymentFinishTime: TimeStamp? = nil, deploymentStartTime: TimeStamp? = nil, failureCode: DeploymentJobErrorCode? = nil, failureReason: String? = nil, progressDetail: ProgressDetail? = nil, status: RobotStatus? = nil) {
            self.arn = arn
            self.deploymentFinishTime = deploymentFinishTime
            self.deploymentStartTime = deploymentStartTime
            self.failureCode = failureCode
            self.failureReason = failureReason
            self.progressDetail = progressDetail
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case deploymentFinishTime = "deploymentFinishTime"
            case deploymentStartTime = "deploymentStartTime"
            case failureCode = "failureCode"
            case failureReason = "failureReason"
            case progressDetail = "progressDetail"
            case status = "status"
        }
    }

    public struct RobotSoftwareSuite: AWSShape {

        /// The name of the robot software suite.
        public let name: RobotSoftwareSuiteType?
        /// The version of the robot software suite.
        public let version: RobotSoftwareSuiteVersionType?

        public init(name: RobotSoftwareSuiteType? = nil, version: RobotSoftwareSuiteVersionType? = nil) {
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case version = "version"
        }
    }

    public struct S3KeyOutput: AWSShape {

        /// The etag for the object.
        public let etag: String?
        /// The S3 key.
        public let s3Key: String?

        public init(etag: String? = nil, s3Key: String? = nil) {
            self.etag = etag
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case etag = "etag"
            case s3Key = "s3Key"
        }
    }

    public struct S3Object: AWSShape {

        /// The bucket containing the object.
        public let bucket: String
        /// The etag of the object.
        public let etag: String?
        /// The key of the object.
        public let key: String

        public init(bucket: String, etag: String? = nil, key: String) {
            self.bucket = bucket
            self.etag = etag
            self.key = key
        }

        public func validate(name: String) throws {
            try validate(self.bucket, name:"bucket", parent: name, max: 63)
            try validate(self.bucket, name:"bucket", parent: name, min: 3)
            try validate(self.bucket, name:"bucket", parent: name, pattern: "[a-z0-9][a-z0-9.\\-]*[a-z0-9]")
            try validate(self.key, name:"key", parent: name, max: 1024)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.key, name:"key", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "bucket"
            case etag = "etag"
            case key = "key"
        }
    }

    public struct SimulationApplicationConfig: AWSShape {

        /// The application information for the simulation application.
        public let application: String
        /// The version of the simulation application.
        public let applicationVersion: String?
        /// The launch configuration for the simulation application.
        public let launchConfig: LaunchConfig

        public init(application: String, applicationVersion: String? = nil, launchConfig: LaunchConfig) {
            self.application = application
            self.applicationVersion = applicationVersion
            self.launchConfig = launchConfig
        }

        public func validate(name: String) throws {
            try validate(self.application, name:"application", parent: name, max: 1224)
            try validate(self.application, name:"application", parent: name, min: 1)
            try validate(self.application, name:"application", parent: name, pattern: "arn:.*")
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, max: 255)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, min: 1)
            try validate(self.applicationVersion, name:"applicationVersion", parent: name, pattern: "(\\$LATEST)|[0-9]*")
            try self.launchConfig.validate(name: "\(name).launchConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case applicationVersion = "applicationVersion"
            case launchConfig = "launchConfig"
        }
    }

    public struct SimulationApplicationSummary: AWSShape {

        /// The Amazon Resource Name (ARN) of the simulation application.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the simulation application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The name of the simulation application.
        public let name: String?
        /// Information about a robot software suite.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// Information about a simulation software suite.
        public let simulationSoftwareSuite: SimulationSoftwareSuite?
        /// The version of the simulation application.
        public let version: String?

        public init(arn: String? = nil, lastUpdatedAt: TimeStamp? = nil, name: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, simulationSoftwareSuite: SimulationSoftwareSuite? = nil, version: String? = nil) {
            self.arn = arn
            self.lastUpdatedAt = lastUpdatedAt
            self.name = name
            self.robotSoftwareSuite = robotSoftwareSuite
            self.simulationSoftwareSuite = simulationSoftwareSuite
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case lastUpdatedAt = "lastUpdatedAt"
            case name = "name"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case simulationSoftwareSuite = "simulationSoftwareSuite"
            case version = "version"
        }
    }

    public struct SimulationJob: AWSShape {

        /// The Amazon Resource Name (ARN) of the simulation job.
        public let arn: String?
        /// A unique identifier for this SimulationJob request.
        public let clientRequestToken: String?
        /// The data sources for the simulation job.
        public let dataSources: [DataSource]?
        /// The failure behavior the simulation job.  Continue  Restart the simulation job in the same host instance.  Fail  Stop the simulation job and terminate the instance.  
        public let failureBehavior: FailureBehavior?
        /// The failure code of the simulation job if it failed.
        public let failureCode: SimulationJobErrorCode?
        /// The reason why the simulation job failed.
        public let failureReason: String?
        /// The IAM role that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 
        public let iamRole: String?
        /// The time, in milliseconds since the epoch, when the simulation job was last started.
        public let lastStartedAt: TimeStamp?
        /// The time, in milliseconds since the epoch, when the simulation job was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The logging configuration.
        public let loggingConfig: LoggingConfig?
        /// The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.
        public let maxJobDurationInSeconds: Int64?
        /// The name of the simulation job.
        public let name: String?
        /// Information about a network interface.
        public let networkInterface: NetworkInterface?
        /// Location for output files generated by the simulation job.
        public let outputLocation: OutputLocation?
        /// A list of robot applications.
        public let robotApplications: [RobotApplicationConfig]?
        /// A list of simulation applications.
        public let simulationApplications: [SimulationApplicationConfig]?
        /// The simulation job execution duration in milliseconds.
        public let simulationTimeMillis: Int64?
        /// Status of the simulation job.
        public let status: SimulationJobStatus?
        /// A map that contains tag keys and tag values that are attached to the simulation job.
        public let tags: [String: String]?
        /// VPC configuration information.
        public let vpcConfig: VPCConfigResponse?

        public init(arn: String? = nil, clientRequestToken: String? = nil, dataSources: [DataSource]? = nil, failureBehavior: FailureBehavior? = nil, failureCode: SimulationJobErrorCode? = nil, failureReason: String? = nil, iamRole: String? = nil, lastStartedAt: TimeStamp? = nil, lastUpdatedAt: TimeStamp? = nil, loggingConfig: LoggingConfig? = nil, maxJobDurationInSeconds: Int64? = nil, name: String? = nil, networkInterface: NetworkInterface? = nil, outputLocation: OutputLocation? = nil, robotApplications: [RobotApplicationConfig]? = nil, simulationApplications: [SimulationApplicationConfig]? = nil, simulationTimeMillis: Int64? = nil, status: SimulationJobStatus? = nil, tags: [String: String]? = nil, vpcConfig: VPCConfigResponse? = nil) {
            self.arn = arn
            self.clientRequestToken = clientRequestToken
            self.dataSources = dataSources
            self.failureBehavior = failureBehavior
            self.failureCode = failureCode
            self.failureReason = failureReason
            self.iamRole = iamRole
            self.lastStartedAt = lastStartedAt
            self.lastUpdatedAt = lastUpdatedAt
            self.loggingConfig = loggingConfig
            self.maxJobDurationInSeconds = maxJobDurationInSeconds
            self.name = name
            self.networkInterface = networkInterface
            self.outputLocation = outputLocation
            self.robotApplications = robotApplications
            self.simulationApplications = simulationApplications
            self.simulationTimeMillis = simulationTimeMillis
            self.status = status
            self.tags = tags
            self.vpcConfig = vpcConfig
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case clientRequestToken = "clientRequestToken"
            case dataSources = "dataSources"
            case failureBehavior = "failureBehavior"
            case failureCode = "failureCode"
            case failureReason = "failureReason"
            case iamRole = "iamRole"
            case lastStartedAt = "lastStartedAt"
            case lastUpdatedAt = "lastUpdatedAt"
            case loggingConfig = "loggingConfig"
            case maxJobDurationInSeconds = "maxJobDurationInSeconds"
            case name = "name"
            case networkInterface = "networkInterface"
            case outputLocation = "outputLocation"
            case robotApplications = "robotApplications"
            case simulationApplications = "simulationApplications"
            case simulationTimeMillis = "simulationTimeMillis"
            case status = "status"
            case tags = "tags"
            case vpcConfig = "vpcConfig"
        }
    }

    public struct SimulationJobSummary: AWSShape {

        /// The Amazon Resource Name (ARN) of the simulation job.
        public let arn: String?
        /// The names of the data sources.
        public let dataSourceNames: [String]?
        /// The time, in milliseconds since the epoch, when the simulation job was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The name of the simulation job.
        public let name: String?
        /// A list of simulation job robot application names.
        public let robotApplicationNames: [String]?
        /// A list of simulation job simulation application names.
        public let simulationApplicationNames: [String]?
        /// The status of the simulation job.
        public let status: SimulationJobStatus?

        public init(arn: String? = nil, dataSourceNames: [String]? = nil, lastUpdatedAt: TimeStamp? = nil, name: String? = nil, robotApplicationNames: [String]? = nil, simulationApplicationNames: [String]? = nil, status: SimulationJobStatus? = nil) {
            self.arn = arn
            self.dataSourceNames = dataSourceNames
            self.lastUpdatedAt = lastUpdatedAt
            self.name = name
            self.robotApplicationNames = robotApplicationNames
            self.simulationApplicationNames = simulationApplicationNames
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case dataSourceNames = "dataSourceNames"
            case lastUpdatedAt = "lastUpdatedAt"
            case name = "name"
            case robotApplicationNames = "robotApplicationNames"
            case simulationApplicationNames = "simulationApplicationNames"
            case status = "status"
        }
    }

    public struct SimulationSoftwareSuite: AWSShape {

        /// The name of the simulation software suite.
        public let name: SimulationSoftwareSuiteType?
        /// The version of the simulation software suite.
        public let version: String?

        public init(name: SimulationSoftwareSuiteType? = nil, version: String? = nil) {
            self.name = name
            self.version = version
        }

        public func validate(name: String) throws {
            try validate(self.version, name:"version", parent: name, pattern: "7|9|Kinetic|Melodic|Dashing")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case version = "version"
        }
    }

    public struct Source: AWSShape {

        /// The taget processor architecture for the application.
        public let architecture: Architecture?
        /// A hash of the object specified by s3Bucket and s3Key.
        public let etag: String?
        /// The s3 bucket name.
        public let s3Bucket: String?
        /// The s3 object key.
        public let s3Key: String?

        public init(architecture: Architecture? = nil, etag: String? = nil, s3Bucket: String? = nil, s3Key: String? = nil) {
            self.architecture = architecture
            self.etag = etag
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case etag = "etag"
            case s3Bucket = "s3Bucket"
            case s3Key = "s3Key"
        }
    }

    public struct SourceConfig: AWSShape {

        /// The target processor architecture for the application.
        public let architecture: Architecture?
        /// The Amazon S3 bucket name.
        public let s3Bucket: String?
        /// The s3 object key.
        public let s3Key: String?

        public init(architecture: Architecture? = nil, s3Bucket: String? = nil, s3Key: String? = nil) {
            self.architecture = architecture
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        public func validate(name: String) throws {
            try validate(self.s3Bucket, name:"s3Bucket", parent: name, max: 63)
            try validate(self.s3Bucket, name:"s3Bucket", parent: name, min: 3)
            try validate(self.s3Bucket, name:"s3Bucket", parent: name, pattern: "[a-z0-9][a-z0-9.\\-]*[a-z0-9]")
            try validate(self.s3Key, name:"s3Key", parent: name, max: 1024)
            try validate(self.s3Key, name:"s3Key", parent: name, min: 1)
            try validate(self.s3Key, name:"s3Key", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case s3Bucket = "s3Bucket"
            case s3Key = "s3Key"
        }
    }

    public struct SyncDeploymentJobRequest: AWSShape {

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String
        /// The target fleet for the synchronization.
        public let fleet: String

        public init(clientRequestToken: String = SyncDeploymentJobRequest.idempotencyToken(), fleet: String) {
            self.clientRequestToken = clientRequestToken
            self.fleet = fleet
        }

        public func validate(name: String) throws {
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, max: 64)
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, min: 1)
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, pattern: "[a-zA-Z0-9_\\-=]*")
            try validate(self.fleet, name:"fleet", parent: name, max: 1224)
            try validate(self.fleet, name:"fleet", parent: name, min: 1)
            try validate(self.fleet, name:"fleet", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case fleet = "fleet"
        }
    }

    public struct SyncDeploymentJobResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the synchronization request.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the fleet was created.
        public let createdAt: TimeStamp?
        /// Information about the deployment application configurations.
        public let deploymentApplicationConfigs: [DeploymentApplicationConfig]?
        /// Information about the deployment configuration.
        public let deploymentConfig: DeploymentConfig?
        /// The failure code if the job fails:  InternalServiceError  Internal service error.  RobotApplicationCrash  Robot application exited abnormally.  SimulationApplicationCrash   Simulation application exited abnormally.  BadPermissionsRobotApplication  Robot application bundle could not be downloaded.  BadPermissionsSimulationApplication  Simulation application bundle could not be downloaded.  BadPermissionsS3Output  Unable to publish outputs to customer-provided S3 bucket.  BadPermissionsCloudwatchLogs  Unable to publish logs to customer-provided CloudWatch Logs resource.  SubnetIpLimitExceeded  Subnet IP limit exceeded.  ENILimitExceeded  ENI limit exceeded.  BadPermissionsUserCredentials  Unable to use the Role provided.  InvalidBundleRobotApplication  Robot bundle cannot be extracted (invalid format, bundling error, or other issue).  InvalidBundleSimulationApplication  Simulation bundle cannot be extracted (invalid format, bundling error, or other issue).  RobotApplicationVersionMismatchedEtag  Etag for RobotApplication does not match value during version creation.  SimulationApplicationVersionMismatchedEtag  Etag for SimulationApplication does not match value during version creation.  
        public let failureCode: DeploymentJobErrorCode?
        /// The failure reason if the job fails.
        public let failureReason: String?
        /// The Amazon Resource Name (ARN) of the fleet.
        public let fleet: String?
        /// The status of the synchronization job.
        public let status: DeploymentStatus?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, deploymentApplicationConfigs: [DeploymentApplicationConfig]? = nil, deploymentConfig: DeploymentConfig? = nil, failureCode: DeploymentJobErrorCode? = nil, failureReason: String? = nil, fleet: String? = nil, status: DeploymentStatus? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentApplicationConfigs = deploymentApplicationConfigs
            self.deploymentConfig = deploymentConfig
            self.failureCode = failureCode
            self.failureReason = failureReason
            self.fleet = fleet
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case deploymentApplicationConfigs = "deploymentApplicationConfigs"
            case deploymentConfig = "deploymentConfig"
            case failureCode = "failureCode"
            case failureReason = "failureReason"
            case fleet = "fleet"
            case status = "status"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resourceArn"))
        ]

        /// The Amazon Resource Name (ARN) of the AWS RoboMaker resource you are tagging.
        public let resourceArn: String
        /// A map that contains tag keys and tag values that are attached to the resource.
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, max: 1224)
            try validate(self.resourceArn, name:"resourceArn", parent: name, min: 1)
            try validate(self.resourceArn, name:"resourceArn", parent: name, pattern: "arn:.*")
            try self.tags.forEach {
                try validate($0.key, name:"tags.key", parent: name, max: 128)
                try validate($0.key, name:"tags.key", parent: name, min: 1)
                try validate($0.key, name:"tags.key", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, min: 0)
                try validate($0.value, name:"tags[\"\($0.key)\"]", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .uri(locationName: "resourceArn")), 
            AWSShapeMember(label: "tagKeys", location: .querystring(locationName: "tagKeys"))
        ]

        /// The Amazon Resource Name (ARN) of the AWS RoboMaker resource you are removing tags.
        public let resourceArn: String
        /// A map that contains tag keys and tag values that will be unattached from the resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, max: 1224)
            try validate(self.resourceArn, name:"resourceArn", parent: name, min: 1)
            try validate(self.resourceArn, name:"resourceArn", parent: name, pattern: "arn:.*")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
                try validate($0, name: "tagKeys[]", parent: name, pattern: "[a-zA-Z0-9 _.\\-\\/+=:]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UntagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateRobotApplicationRequest: AWSShape {

        /// The application information for the robot application.
        public let application: String
        /// The revision id for the robot application.
        public let currentRevisionId: String?
        /// The robot software suite used by the robot application.
        public let robotSoftwareSuite: RobotSoftwareSuite
        /// The sources of the robot application.
        public let sources: [SourceConfig]

        public init(application: String, currentRevisionId: String? = nil, robotSoftwareSuite: RobotSoftwareSuite, sources: [SourceConfig]) {
            self.application = application
            self.currentRevisionId = currentRevisionId
            self.robotSoftwareSuite = robotSoftwareSuite
            self.sources = sources
        }

        public func validate(name: String) throws {
            try validate(self.application, name:"application", parent: name, max: 1224)
            try validate(self.application, name:"application", parent: name, min: 1)
            try validate(self.application, name:"application", parent: name, pattern: "arn:.*")
            try validate(self.currentRevisionId, name:"currentRevisionId", parent: name, max: 40)
            try validate(self.currentRevisionId, name:"currentRevisionId", parent: name, min: 1)
            try validate(self.currentRevisionId, name:"currentRevisionId", parent: name, pattern: "[a-zA-Z0-9_.\\-]*")
            try self.sources.forEach {
                try $0.validate(name: "\(name).sources[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case currentRevisionId = "currentRevisionId"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case sources = "sources"
        }
    }

    public struct UpdateRobotApplicationResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the updated robot application.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the robot application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The name of the robot application.
        public let name: String?
        /// The revision id of the robot application.
        public let revisionId: String?
        /// The robot software suite used by the robot application.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The sources of the robot application.
        public let sources: [Source]?
        /// The version of the robot application.
        public let version: String?

        public init(arn: String? = nil, lastUpdatedAt: TimeStamp? = nil, name: String? = nil, revisionId: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, sources: [Source]? = nil, version: String? = nil) {
            self.arn = arn
            self.lastUpdatedAt = lastUpdatedAt
            self.name = name
            self.revisionId = revisionId
            self.robotSoftwareSuite = robotSoftwareSuite
            self.sources = sources
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case lastUpdatedAt = "lastUpdatedAt"
            case name = "name"
            case revisionId = "revisionId"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case sources = "sources"
            case version = "version"
        }
    }

    public struct UpdateSimulationApplicationRequest: AWSShape {

        /// The application information for the simulation application.
        public let application: String
        /// The revision id for the robot application.
        public let currentRevisionId: String?
        /// The rendering engine for the simulation application.
        public let renderingEngine: RenderingEngine?
        /// Information about the robot software suite.
        public let robotSoftwareSuite: RobotSoftwareSuite
        /// The simulation software suite used by the simulation application.
        public let simulationSoftwareSuite: SimulationSoftwareSuite
        /// The sources of the simulation application.
        public let sources: [SourceConfig]

        public init(application: String, currentRevisionId: String? = nil, renderingEngine: RenderingEngine? = nil, robotSoftwareSuite: RobotSoftwareSuite, simulationSoftwareSuite: SimulationSoftwareSuite, sources: [SourceConfig]) {
            self.application = application
            self.currentRevisionId = currentRevisionId
            self.renderingEngine = renderingEngine
            self.robotSoftwareSuite = robotSoftwareSuite
            self.simulationSoftwareSuite = simulationSoftwareSuite
            self.sources = sources
        }

        public func validate(name: String) throws {
            try validate(self.application, name:"application", parent: name, max: 1224)
            try validate(self.application, name:"application", parent: name, min: 1)
            try validate(self.application, name:"application", parent: name, pattern: "arn:.*")
            try validate(self.currentRevisionId, name:"currentRevisionId", parent: name, max: 40)
            try validate(self.currentRevisionId, name:"currentRevisionId", parent: name, min: 1)
            try validate(self.currentRevisionId, name:"currentRevisionId", parent: name, pattern: "[a-zA-Z0-9_.\\-]*")
            try self.renderingEngine?.validate(name: "\(name).renderingEngine")
            try self.simulationSoftwareSuite.validate(name: "\(name).simulationSoftwareSuite")
            try self.sources.forEach {
                try $0.validate(name: "\(name).sources[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case application = "application"
            case currentRevisionId = "currentRevisionId"
            case renderingEngine = "renderingEngine"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case simulationSoftwareSuite = "simulationSoftwareSuite"
            case sources = "sources"
        }
    }

    public struct UpdateSimulationApplicationResponse: AWSShape {

        /// The Amazon Resource Name (ARN) of the updated simulation application.
        public let arn: String?
        /// The time, in milliseconds since the epoch, when the simulation application was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The name of the simulation application.
        public let name: String?
        /// The rendering engine for the simulation application.
        public let renderingEngine: RenderingEngine?
        /// The revision id of the simulation application.
        public let revisionId: String?
        /// Information about the robot software suite.
        public let robotSoftwareSuite: RobotSoftwareSuite?
        /// The simulation software suite used by the simulation application.
        public let simulationSoftwareSuite: SimulationSoftwareSuite?
        /// The sources of the simulation application.
        public let sources: [Source]?
        /// The version of the robot application.
        public let version: String?

        public init(arn: String? = nil, lastUpdatedAt: TimeStamp? = nil, name: String? = nil, renderingEngine: RenderingEngine? = nil, revisionId: String? = nil, robotSoftwareSuite: RobotSoftwareSuite? = nil, simulationSoftwareSuite: SimulationSoftwareSuite? = nil, sources: [Source]? = nil, version: String? = nil) {
            self.arn = arn
            self.lastUpdatedAt = lastUpdatedAt
            self.name = name
            self.renderingEngine = renderingEngine
            self.revisionId = revisionId
            self.robotSoftwareSuite = robotSoftwareSuite
            self.simulationSoftwareSuite = simulationSoftwareSuite
            self.sources = sources
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case lastUpdatedAt = "lastUpdatedAt"
            case name = "name"
            case renderingEngine = "renderingEngine"
            case revisionId = "revisionId"
            case robotSoftwareSuite = "robotSoftwareSuite"
            case simulationSoftwareSuite = "simulationSoftwareSuite"
            case sources = "sources"
            case version = "version"
        }
    }

    public struct VPCConfig: AWSShape {

        /// A boolean indicating whether to assign a public IP address.
        public let assignPublicIp: Bool?
        /// A list of one or more security groups IDs in your VPC.
        public let securityGroups: [String]?
        /// A list of one or more subnet IDs in your VPC.
        public let subnets: [String]

        public init(assignPublicIp: Bool? = nil, securityGroups: [String]? = nil, subnets: [String]) {
            self.assignPublicIp = assignPublicIp
            self.securityGroups = securityGroups
            self.subnets = subnets
        }

        public func validate(name: String) throws {
            try self.securityGroups?.forEach {
                try validate($0, name: "securityGroups[]", parent: name, min: 1)
            }
            try validate(self.securityGroups, name:"securityGroups", parent: name, max: 5)
            try validate(self.securityGroups, name:"securityGroups", parent: name, min: 1)
            try self.subnets.forEach {
                try validate($0, name: "subnets[]", parent: name, min: 1)
            }
            try validate(self.subnets, name:"subnets", parent: name, max: 16)
            try validate(self.subnets, name:"subnets", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case assignPublicIp = "assignPublicIp"
            case securityGroups = "securityGroups"
            case subnets = "subnets"
        }
    }

    public struct VPCConfigResponse: AWSShape {

        /// A boolean indicating if a public IP was assigned.
        public let assignPublicIp: Bool?
        /// A list of security group IDs associated with the simulation job.
        public let securityGroups: [String]?
        /// A list of subnet IDs associated with the simulation job.
        public let subnets: [String]?
        /// The VPC ID associated with your simulation job.
        public let vpcId: String?

        public init(assignPublicIp: Bool? = nil, securityGroups: [String]? = nil, subnets: [String]? = nil, vpcId: String? = nil) {
            self.assignPublicIp = assignPublicIp
            self.securityGroups = securityGroups
            self.subnets = subnets
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case assignPublicIp = "assignPublicIp"
            case securityGroups = "securityGroups"
            case subnets = "subnets"
            case vpcId = "vpcId"
        }
    }
}
