// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CodeCommit {

    public struct BatchDescribeMergeConflictsError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "exceptionName", required: true, type: .string), 
            AWSShapeMember(label: "filePath", required: true, type: .string), 
            AWSShapeMember(label: "message", required: true, type: .string)
        ]
        /// The name of the exception.
        public let exceptionName: String
        /// The path to the file.
        public let filePath: String
        /// The message provided by the exception.
        public let message: String

        public init(exceptionName: String, filePath: String, message: String) {
            self.exceptionName = exceptionName
            self.filePath = filePath
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case exceptionName = "exceptionName"
            case filePath = "filePath"
            case message = "message"
        }
    }

    public struct BatchDescribeMergeConflictsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "conflictDetailLevel", required: false, type: .enum), 
            AWSShapeMember(label: "conflictResolutionStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "destinationCommitSpecifier", required: true, type: .string), 
            AWSShapeMember(label: "filePaths", required: false, type: .list), 
            AWSShapeMember(label: "maxConflictFiles", required: false, type: .integer), 
            AWSShapeMember(label: "maxMergeHunks", required: false, type: .integer), 
            AWSShapeMember(label: "mergeOption", required: true, type: .enum), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "sourceCommitSpecifier", required: true, type: .string)
        ]
        /// The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.
        public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
        /// Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.
        public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let destinationCommitSpecifier: String
        /// The path of the target files used to describe the conflicts. If not specified, the default is all conflict files.
        public let filePaths: [String]?
        /// The maximum number of files to include in the output.
        public let maxConflictFiles: Int32?
        /// The maximum number of merge hunks to include in the output.
        public let maxMergeHunks: Int32?
        /// The merge option or strategy you want to use to merge the code.
        public let mergeOption: MergeOptionTypeEnum
        /// An enumeration token that when provided in a request, returns the next batch of the results.
        public let nextToken: String?
        /// The name of the repository that contains the merge conflicts you want to review.
        public let repositoryName: String
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let sourceCommitSpecifier: String

        public init(conflictDetailLevel: ConflictDetailLevelTypeEnum? = nil, conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum? = nil, destinationCommitSpecifier: String, filePaths: [String]? = nil, maxConflictFiles: Int32? = nil, maxMergeHunks: Int32? = nil, mergeOption: MergeOptionTypeEnum, nextToken: String? = nil, repositoryName: String, sourceCommitSpecifier: String) {
            self.conflictDetailLevel = conflictDetailLevel
            self.conflictResolutionStrategy = conflictResolutionStrategy
            self.destinationCommitSpecifier = destinationCommitSpecifier
            self.filePaths = filePaths
            self.maxConflictFiles = maxConflictFiles
            self.maxMergeHunks = maxMergeHunks
            self.mergeOption = mergeOption
            self.nextToken = nextToken
            self.repositoryName = repositoryName
            self.sourceCommitSpecifier = sourceCommitSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case conflictDetailLevel = "conflictDetailLevel"
            case conflictResolutionStrategy = "conflictResolutionStrategy"
            case destinationCommitSpecifier = "destinationCommitSpecifier"
            case filePaths = "filePaths"
            case maxConflictFiles = "maxConflictFiles"
            case maxMergeHunks = "maxMergeHunks"
            case mergeOption = "mergeOption"
            case nextToken = "nextToken"
            case repositoryName = "repositoryName"
            case sourceCommitSpecifier = "sourceCommitSpecifier"
        }
    }

    public struct BatchDescribeMergeConflictsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "baseCommitId", required: false, type: .string), 
            AWSShapeMember(label: "conflicts", required: true, type: .list), 
            AWSShapeMember(label: "destinationCommitId", required: true, type: .string), 
            AWSShapeMember(label: "errors", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "sourceCommitId", required: true, type: .string)
        ]
        /// The commit ID of the merge base.
        public let baseCommitId: String?
        /// A list of conflicts for each file, including the conflict metadata and the hunks of the differences between the files.
        public let conflicts: [Conflict]
        /// The commit ID of the destination commit specifier that was used in the merge evaluation.
        public let destinationCommitId: String
        /// A list of any errors returned while describing the merge conflicts for each file.
        public let errors: [BatchDescribeMergeConflictsError]?
        /// An enumeration token that can be used in a request to return the next batch of the results.
        public let nextToken: String?
        /// The commit ID of the source commit specifier that was used in the merge evaluation.
        public let sourceCommitId: String

        public init(baseCommitId: String? = nil, conflicts: [Conflict], destinationCommitId: String, errors: [BatchDescribeMergeConflictsError]? = nil, nextToken: String? = nil, sourceCommitId: String) {
            self.baseCommitId = baseCommitId
            self.conflicts = conflicts
            self.destinationCommitId = destinationCommitId
            self.errors = errors
            self.nextToken = nextToken
            self.sourceCommitId = sourceCommitId
        }

        private enum CodingKeys: String, CodingKey {
            case baseCommitId = "baseCommitId"
            case conflicts = "conflicts"
            case destinationCommitId = "destinationCommitId"
            case errors = "errors"
            case nextToken = "nextToken"
            case sourceCommitId = "sourceCommitId"
        }
    }

    public struct BatchGetRepositoriesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "repositoryNames", required: true, type: .list)
        ]
        /// The names of the repositories to get information about.
        public let repositoryNames: [String]

        public init(repositoryNames: [String]) {
            self.repositoryNames = repositoryNames
        }

        private enum CodingKeys: String, CodingKey {
            case repositoryNames = "repositoryNames"
        }
    }

    public struct BatchGetRepositoriesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "repositories", required: false, type: .list), 
            AWSShapeMember(label: "repositoriesNotFound", required: false, type: .list)
        ]
        /// A list of repositories returned by the batch get repositories operation.
        public let repositories: [RepositoryMetadata]?
        /// Returns a list of repository names for which information could not be found.
        public let repositoriesNotFound: [String]?

        public init(repositories: [RepositoryMetadata]? = nil, repositoriesNotFound: [String]? = nil) {
            self.repositories = repositories
            self.repositoriesNotFound = repositoriesNotFound
        }

        private enum CodingKeys: String, CodingKey {
            case repositories = "repositories"
            case repositoriesNotFound = "repositoriesNotFound"
        }
    }

    public struct BlobMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "blobId", required: false, type: .string), 
            AWSShapeMember(label: "mode", required: false, type: .string), 
            AWSShapeMember(label: "path", required: false, type: .string)
        ]
        /// The full ID of the blob.
        public let blobId: String?
        /// The file mode permissions of the blob. File mode permission codes include:    100644 indicates read/write    100755 indicates read/write/execute    160000 indicates a submodule    120000 indicates a symlink  
        public let mode: String?
        /// The path to the blob and any associated file name, if any.
        public let path: String?

        public init(blobId: String? = nil, mode: String? = nil, path: String? = nil) {
            self.blobId = blobId
            self.mode = mode
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case blobId = "blobId"
            case mode = "mode"
            case path = "path"
        }
    }

    public struct BranchInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "branchName", required: false, type: .string), 
            AWSShapeMember(label: "commitId", required: false, type: .string)
        ]
        /// The name of the branch.
        public let branchName: String?
        /// The ID of the last commit made to the branch.
        public let commitId: String?

        public init(branchName: String? = nil, commitId: String? = nil) {
            self.branchName = branchName
            self.commitId = commitId
        }

        private enum CodingKeys: String, CodingKey {
            case branchName = "branchName"
            case commitId = "commitId"
        }
    }

    public enum ChangeTypeEnum: String, CustomStringConvertible, Codable {
        case a = "A"
        case m = "M"
        case d = "D"
        public var description: String { return self.rawValue }
    }

    public struct Comment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorArn", required: false, type: .string), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "commentId", required: false, type: .string), 
            AWSShapeMember(label: "content", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "deleted", required: false, type: .boolean), 
            AWSShapeMember(label: "inReplyTo", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp)
        ]
        /// The Amazon Resource Name (ARN) of the person who posted the comment.
        public let authorArn: String?
        /// A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request will return information about the initial request that used that token.
        public let clientRequestToken: String?
        /// The system-generated comment ID.
        public let commentId: String?
        /// The content of the comment.
        public let content: String?
        /// The date and time the comment was created, in timestamp format.
        public let creationDate: TimeStamp?
        /// A Boolean value indicating whether the comment has been deleted.
        public let deleted: Bool?
        /// The ID of the comment for which this comment is a reply, if any.
        public let inReplyTo: String?
        /// The date and time the comment was most recently modified, in timestamp format.
        public let lastModifiedDate: TimeStamp?

        public init(authorArn: String? = nil, clientRequestToken: String? = nil, commentId: String? = nil, content: String? = nil, creationDate: TimeStamp? = nil, deleted: Bool? = nil, inReplyTo: String? = nil, lastModifiedDate: TimeStamp? = nil) {
            self.authorArn = authorArn
            self.clientRequestToken = clientRequestToken
            self.commentId = commentId
            self.content = content
            self.creationDate = creationDate
            self.deleted = deleted
            self.inReplyTo = inReplyTo
            self.lastModifiedDate = lastModifiedDate
        }

        private enum CodingKeys: String, CodingKey {
            case authorArn = "authorArn"
            case clientRequestToken = "clientRequestToken"
            case commentId = "commentId"
            case content = "content"
            case creationDate = "creationDate"
            case deleted = "deleted"
            case inReplyTo = "inReplyTo"
            case lastModifiedDate = "lastModifiedDate"
        }
    }

    public struct CommentsForComparedCommit: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "afterBlobId", required: false, type: .string), 
            AWSShapeMember(label: "afterCommitId", required: false, type: .string), 
            AWSShapeMember(label: "beforeBlobId", required: false, type: .string), 
            AWSShapeMember(label: "beforeCommitId", required: false, type: .string), 
            AWSShapeMember(label: "comments", required: false, type: .list), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "repositoryName", required: false, type: .string)
        ]
        /// The full blob ID of the commit used to establish the 'after' of the comparison.
        public let afterBlobId: String?
        /// The full commit ID of the commit used to establish the 'after' of the comparison.
        public let afterCommitId: String?
        /// The full blob ID of the commit used to establish the 'before' of the comparison.
        public let beforeBlobId: String?
        /// The full commit ID of the commit used to establish the 'before' of the comparison.
        public let beforeCommitId: String?
        /// An array of comment objects. Each comment object contains information about a comment on the comparison between commits.
        public let comments: [Comment]?
        /// Location information about the comment on the comparison, including the file name, line number, and whether the version of the file where the comment was made is 'BEFORE' or 'AFTER'.
        public let location: Location?
        /// The name of the repository that contains the compared commits.
        public let repositoryName: String?

        public init(afterBlobId: String? = nil, afterCommitId: String? = nil, beforeBlobId: String? = nil, beforeCommitId: String? = nil, comments: [Comment]? = nil, location: Location? = nil, repositoryName: String? = nil) {
            self.afterBlobId = afterBlobId
            self.afterCommitId = afterCommitId
            self.beforeBlobId = beforeBlobId
            self.beforeCommitId = beforeCommitId
            self.comments = comments
            self.location = location
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case afterBlobId = "afterBlobId"
            case afterCommitId = "afterCommitId"
            case beforeBlobId = "beforeBlobId"
            case beforeCommitId = "beforeCommitId"
            case comments = "comments"
            case location = "location"
            case repositoryName = "repositoryName"
        }
    }

    public struct CommentsForPullRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "afterBlobId", required: false, type: .string), 
            AWSShapeMember(label: "afterCommitId", required: false, type: .string), 
            AWSShapeMember(label: "beforeBlobId", required: false, type: .string), 
            AWSShapeMember(label: "beforeCommitId", required: false, type: .string), 
            AWSShapeMember(label: "comments", required: false, type: .list), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "pullRequestId", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: false, type: .string)
        ]
        /// The full blob ID of the file on which you want to comment on the source commit.
        public let afterBlobId: String?
        /// he full commit ID of the commit that was the tip of the source branch at the time the comment was made. 
        public let afterCommitId: String?
        /// The full blob ID of the file on which you want to comment on the destination commit.
        public let beforeBlobId: String?
        /// The full commit ID of the commit that was the tip of the destination branch when the pull request was created. This commit will be superceded by the after commit in the source branch when and if you merge the source branch into the destination branch.
        public let beforeCommitId: String?
        /// An array of comment objects. Each comment object contains information about a comment on the pull request.
        public let comments: [Comment]?
        /// Location information about the comment on the pull request, including the file name, line number, and whether the version of the file where the comment was made is 'BEFORE' (destination branch) or 'AFTER' (source branch).
        public let location: Location?
        /// The system-generated ID of the pull request.
        public let pullRequestId: String?
        /// The name of the repository that contains the pull request.
        public let repositoryName: String?

        public init(afterBlobId: String? = nil, afterCommitId: String? = nil, beforeBlobId: String? = nil, beforeCommitId: String? = nil, comments: [Comment]? = nil, location: Location? = nil, pullRequestId: String? = nil, repositoryName: String? = nil) {
            self.afterBlobId = afterBlobId
            self.afterCommitId = afterCommitId
            self.beforeBlobId = beforeBlobId
            self.beforeCommitId = beforeCommitId
            self.comments = comments
            self.location = location
            self.pullRequestId = pullRequestId
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case afterBlobId = "afterBlobId"
            case afterCommitId = "afterCommitId"
            case beforeBlobId = "beforeBlobId"
            case beforeCommitId = "beforeCommitId"
            case comments = "comments"
            case location = "location"
            case pullRequestId = "pullRequestId"
            case repositoryName = "repositoryName"
        }
    }

    public struct Commit: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "additionalData", required: false, type: .string), 
            AWSShapeMember(label: "author", required: false, type: .structure), 
            AWSShapeMember(label: "commitId", required: false, type: .string), 
            AWSShapeMember(label: "committer", required: false, type: .structure), 
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "parents", required: false, type: .list), 
            AWSShapeMember(label: "treeId", required: false, type: .string)
        ]
        /// Any additional data associated with the specified commit.
        public let additionalData: String?
        /// Information about the author of the specified commit. Information includes the date in timestamp format with GMT offset, the name of the author, and the email address for the author, as configured in Git.
        public let author: UserInfo?
        /// The full SHA of the specified commit. 
        public let commitId: String?
        /// Information about the person who committed the specified commit, also known as the committer. Information includes the date in timestamp format with GMT offset, the name of the committer, and the email address for the committer, as configured in Git. For more information about the difference between an author and a committer in Git, see Viewing the Commit History in Pro Git by Scott Chacon and Ben Straub.
        public let committer: UserInfo?
        /// The commit message associated with the specified commit.
        public let message: String?
        /// A list of parent commits for the specified commit. Each parent commit ID is the full commit ID.
        public let parents: [String]?
        /// Tree information for the specified commit.
        public let treeId: String?

        public init(additionalData: String? = nil, author: UserInfo? = nil, commitId: String? = nil, committer: UserInfo? = nil, message: String? = nil, parents: [String]? = nil, treeId: String? = nil) {
            self.additionalData = additionalData
            self.author = author
            self.commitId = commitId
            self.committer = committer
            self.message = message
            self.parents = parents
            self.treeId = treeId
        }

        private enum CodingKeys: String, CodingKey {
            case additionalData = "additionalData"
            case author = "author"
            case commitId = "commitId"
            case committer = "committer"
            case message = "message"
            case parents = "parents"
            case treeId = "treeId"
        }
    }

    public struct Conflict: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "conflictMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "mergeHunks", required: false, type: .list)
        ]
        /// Metadata about a conflict in a merge operation.
        public let conflictMetadata: ConflictMetadata?
        /// A list of hunks that contain the differences between files or lines causing the conflict.
        public let mergeHunks: [MergeHunk]?

        public init(conflictMetadata: ConflictMetadata? = nil, mergeHunks: [MergeHunk]? = nil) {
            self.conflictMetadata = conflictMetadata
            self.mergeHunks = mergeHunks
        }

        private enum CodingKeys: String, CodingKey {
            case conflictMetadata = "conflictMetadata"
            case mergeHunks = "mergeHunks"
        }
    }

    public enum ConflictDetailLevelTypeEnum: String, CustomStringConvertible, Codable {
        case fileLevel = "FILE_LEVEL"
        case lineLevel = "LINE_LEVEL"
        public var description: String { return self.rawValue }
    }

    public struct ConflictMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contentConflict", required: false, type: .boolean), 
            AWSShapeMember(label: "fileModeConflict", required: false, type: .boolean), 
            AWSShapeMember(label: "fileModes", required: false, type: .structure), 
            AWSShapeMember(label: "filePath", required: false, type: .string), 
            AWSShapeMember(label: "fileSizes", required: false, type: .structure), 
            AWSShapeMember(label: "isBinaryFile", required: false, type: .structure), 
            AWSShapeMember(label: "mergeOperations", required: false, type: .structure), 
            AWSShapeMember(label: "numberOfConflicts", required: false, type: .integer), 
            AWSShapeMember(label: "objectTypeConflict", required: false, type: .boolean), 
            AWSShapeMember(label: "objectTypes", required: false, type: .structure)
        ]
        /// A boolean value indicating whether there are conflicts in the content of a file.
        public let contentConflict: Bool?
        /// A boolean value indicating whether there are conflicts in the file mode of a file.
        public let fileModeConflict: Bool?
        /// The file modes of the file in the source, destination, and base of the merge.
        public let fileModes: FileModes?
        /// The path of the file that contains conflicts.
        public let filePath: String?
        /// The file sizes of the file in the source, destination, and base of the merge.
        public let fileSizes: FileSizes?
        /// A boolean value (true or false) indicating whether the file is binary or textual in the source, destination, and base of the merge.
        public let isBinaryFile: IsBinaryFile?
        /// Whether an add, modify, or delete operation caused the conflict between the source and destination of the merge.
        public let mergeOperations: MergeOperations?
        /// The number of conflicts, including both hunk conflicts and metadata conflicts.
        public let numberOfConflicts: Int32?
        /// A boolean value (true or false) indicating whether there are conflicts between the branches in the object type of a file, folder, or submodule.
        public let objectTypeConflict: Bool?
        /// Information about any object type conflicts in a merge operation.
        public let objectTypes: ObjectTypes?

        public init(contentConflict: Bool? = nil, fileModeConflict: Bool? = nil, fileModes: FileModes? = nil, filePath: String? = nil, fileSizes: FileSizes? = nil, isBinaryFile: IsBinaryFile? = nil, mergeOperations: MergeOperations? = nil, numberOfConflicts: Int32? = nil, objectTypeConflict: Bool? = nil, objectTypes: ObjectTypes? = nil) {
            self.contentConflict = contentConflict
            self.fileModeConflict = fileModeConflict
            self.fileModes = fileModes
            self.filePath = filePath
            self.fileSizes = fileSizes
            self.isBinaryFile = isBinaryFile
            self.mergeOperations = mergeOperations
            self.numberOfConflicts = numberOfConflicts
            self.objectTypeConflict = objectTypeConflict
            self.objectTypes = objectTypes
        }

        private enum CodingKeys: String, CodingKey {
            case contentConflict = "contentConflict"
            case fileModeConflict = "fileModeConflict"
            case fileModes = "fileModes"
            case filePath = "filePath"
            case fileSizes = "fileSizes"
            case isBinaryFile = "isBinaryFile"
            case mergeOperations = "mergeOperations"
            case numberOfConflicts = "numberOfConflicts"
            case objectTypeConflict = "objectTypeConflict"
            case objectTypes = "objectTypes"
        }
    }

    public struct ConflictResolution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deleteFiles", required: false, type: .list), 
            AWSShapeMember(label: "replaceContents", required: false, type: .list), 
            AWSShapeMember(label: "setFileModes", required: false, type: .list)
        ]
        /// Files that will be deleted as part of the merge conflict resolution.
        public let deleteFiles: [DeleteFileEntry]?
        /// Files that will have content replaced as part of the merge conflict resolution.
        public let replaceContents: [ReplaceContentEntry]?
        /// File modes that will be set as part of the merge conflict resolution.
        public let setFileModes: [SetFileModeEntry]?

        public init(deleteFiles: [DeleteFileEntry]? = nil, replaceContents: [ReplaceContentEntry]? = nil, setFileModes: [SetFileModeEntry]? = nil) {
            self.deleteFiles = deleteFiles
            self.replaceContents = replaceContents
            self.setFileModes = setFileModes
        }

        private enum CodingKeys: String, CodingKey {
            case deleteFiles = "deleteFiles"
            case replaceContents = "replaceContents"
            case setFileModes = "setFileModes"
        }
    }

    public enum ConflictResolutionStrategyTypeEnum: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case acceptSource = "ACCEPT_SOURCE"
        case acceptDestination = "ACCEPT_DESTINATION"
        case automerge = "AUTOMERGE"
        public var description: String { return self.rawValue }
    }

    public struct CreateBranchInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "branchName", required: true, type: .string), 
            AWSShapeMember(label: "commitId", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// The name of the new branch to create.
        public let branchName: String
        /// The ID of the commit to point the new branch to.
        public let commitId: String
        /// The name of the repository in which you want to create the new branch.
        public let repositoryName: String

        public init(branchName: String, commitId: String, repositoryName: String) {
            self.branchName = branchName
            self.commitId = commitId
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case branchName = "branchName"
            case commitId = "commitId"
            case repositoryName = "repositoryName"
        }
    }

    public struct CreateCommitInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorName", required: false, type: .string), 
            AWSShapeMember(label: "branchName", required: true, type: .string), 
            AWSShapeMember(label: "commitMessage", required: false, type: .string), 
            AWSShapeMember(label: "deleteFiles", required: false, type: .list), 
            AWSShapeMember(label: "email", required: false, type: .string), 
            AWSShapeMember(label: "keepEmptyFolders", required: false, type: .boolean), 
            AWSShapeMember(label: "parentCommitId", required: false, type: .string), 
            AWSShapeMember(label: "putFiles", required: false, type: .list), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "setFileModes", required: false, type: .list)
        ]
        /// The name of the author who created the commit. This information will be used as both the author and committer for the commit.
        public let authorName: String?
        /// The name of the branch where you will create the commit.
        public let branchName: String
        /// The commit message you want to include as part of creating the commit. Commit messages are limited to 256 KB. If no message is specified, a default message will be used.
        public let commitMessage: String?
        /// The files to delete in this commit. These files will still exist in prior commits.
        public let deleteFiles: [DeleteFileEntry]?
        /// The email address of the person who created the commit.
        public let email: String?
        /// If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file will be created for empty folders. The default is false.
        public let keepEmptyFolders: Bool?
        /// The ID of the commit that is the parent of the commit you will create. If this is an empty repository, this is not required.
        public let parentCommitId: String?
        /// The files to add or update in this commit.
        public let putFiles: [PutFileEntry]?
        /// The name of the repository where you will create the commit.
        public let repositoryName: String
        /// The file modes to update for files in this commit.
        public let setFileModes: [SetFileModeEntry]?

        public init(authorName: String? = nil, branchName: String, commitMessage: String? = nil, deleteFiles: [DeleteFileEntry]? = nil, email: String? = nil, keepEmptyFolders: Bool? = nil, parentCommitId: String? = nil, putFiles: [PutFileEntry]? = nil, repositoryName: String, setFileModes: [SetFileModeEntry]? = nil) {
            self.authorName = authorName
            self.branchName = branchName
            self.commitMessage = commitMessage
            self.deleteFiles = deleteFiles
            self.email = email
            self.keepEmptyFolders = keepEmptyFolders
            self.parentCommitId = parentCommitId
            self.putFiles = putFiles
            self.repositoryName = repositoryName
            self.setFileModes = setFileModes
        }

        private enum CodingKeys: String, CodingKey {
            case authorName = "authorName"
            case branchName = "branchName"
            case commitMessage = "commitMessage"
            case deleteFiles = "deleteFiles"
            case email = "email"
            case keepEmptyFolders = "keepEmptyFolders"
            case parentCommitId = "parentCommitId"
            case putFiles = "putFiles"
            case repositoryName = "repositoryName"
            case setFileModes = "setFileModes"
        }
    }

    public struct CreateCommitOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commitId", required: false, type: .string), 
            AWSShapeMember(label: "filesAdded", required: false, type: .list), 
            AWSShapeMember(label: "filesDeleted", required: false, type: .list), 
            AWSShapeMember(label: "filesUpdated", required: false, type: .list), 
            AWSShapeMember(label: "treeId", required: false, type: .string)
        ]
        /// The full commit ID of the commit that contains your committed file changes.
        public let commitId: String?
        /// The files added as part of the committed file changes.
        public let filesAdded: [FileMetadata]?
        /// The files deleted as part of the committed file changes.
        public let filesDeleted: [FileMetadata]?
        /// The files updated as part of the commited file changes.
        public let filesUpdated: [FileMetadata]?
        /// The full SHA-1 pointer of the tree information for the commit that contains the commited file changes.
        public let treeId: String?

        public init(commitId: String? = nil, filesAdded: [FileMetadata]? = nil, filesDeleted: [FileMetadata]? = nil, filesUpdated: [FileMetadata]? = nil, treeId: String? = nil) {
            self.commitId = commitId
            self.filesAdded = filesAdded
            self.filesDeleted = filesDeleted
            self.filesUpdated = filesUpdated
            self.treeId = treeId
        }

        private enum CodingKeys: String, CodingKey {
            case commitId = "commitId"
            case filesAdded = "filesAdded"
            case filesDeleted = "filesDeleted"
            case filesUpdated = "filesUpdated"
            case treeId = "treeId"
        }
    }

    public struct CreatePullRequestInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "targets", required: true, type: .list), 
            AWSShapeMember(label: "title", required: true, type: .string)
        ]
        /// A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request will return information about the initial request that used that token.  The AWS SDKs prepopulate client request tokens. If using an AWS SDK, you do not have to generate an idempotency token, as this will be done for you. 
        public let clientRequestToken: String?
        /// A description of the pull request.
        public let description: String?
        /// The targets for the pull request, including the source of the code to be reviewed (the source branch), and the destination where the creator of the pull request intends the code to be merged after the pull request is closed (the destination branch).
        public let targets: [Target]
        /// The title of the pull request. This title will be used to identify the pull request to other users in the repository.
        public let title: String

        public init(clientRequestToken: String? = nil, description: String? = nil, targets: [Target], title: String) {
            self.clientRequestToken = clientRequestToken
            self.description = description
            self.targets = targets
            self.title = title
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case description = "description"
            case targets = "targets"
            case title = "title"
        }
    }

    public struct CreatePullRequestOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pullRequest", required: true, type: .structure)
        ]
        /// Information about the newly created pull request.
        public let pullRequest: PullRequest

        public init(pullRequest: PullRequest) {
            self.pullRequest = pullRequest
        }

        private enum CodingKeys: String, CodingKey {
            case pullRequest = "pullRequest"
        }
    }

    public struct CreateRepositoryInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "repositoryDescription", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]
        /// A comment or description about the new repository.  The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page. 
        public let repositoryDescription: String?
        /// The name of the new repository to be created.  The repository name must be unique across the calling AWS account. In addition, repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. For a full description of the limits on repository names, see Limits in the AWS CodeCommit User Guide. The suffix ".git" is prohibited. 
        public let repositoryName: String
        /// One or more tag key-value pairs to use when tagging this repository.
        public let tags: [String: String]?

        public init(repositoryDescription: String? = nil, repositoryName: String, tags: [String: String]? = nil) {
            self.repositoryDescription = repositoryDescription
            self.repositoryName = repositoryName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case repositoryDescription = "repositoryDescription"
            case repositoryName = "repositoryName"
            case tags = "tags"
        }
    }

    public struct CreateRepositoryOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "repositoryMetadata", required: false, type: .structure)
        ]
        /// Information about the newly created repository.
        public let repositoryMetadata: RepositoryMetadata?

        public init(repositoryMetadata: RepositoryMetadata? = nil) {
            self.repositoryMetadata = repositoryMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case repositoryMetadata = "repositoryMetadata"
        }
    }

    public struct CreateUnreferencedMergeCommitInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorName", required: false, type: .string), 
            AWSShapeMember(label: "commitMessage", required: false, type: .string), 
            AWSShapeMember(label: "conflictDetailLevel", required: false, type: .enum), 
            AWSShapeMember(label: "conflictResolution", required: false, type: .structure), 
            AWSShapeMember(label: "conflictResolutionStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "destinationCommitSpecifier", required: true, type: .string), 
            AWSShapeMember(label: "email", required: false, type: .string), 
            AWSShapeMember(label: "keepEmptyFolders", required: false, type: .boolean), 
            AWSShapeMember(label: "mergeOption", required: true, type: .enum), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "sourceCommitSpecifier", required: true, type: .string)
        ]
        /// The name of the author who created the unreferenced commit. This information will be used as both the author and committer for the commit.
        public let authorName: String?
        /// The commit message for the unreferenced commit.
        public let commitMessage: String?
        /// The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.
        public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
        /// A list of inputs to use when resolving conflicts during a merge if AUTOMERGE is chosen as the conflict resolution strategy.
        public let conflictResolution: ConflictResolution?
        /// Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.
        public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let destinationCommitSpecifier: String
        /// The email address for the person who created the unreferenced commit.
        public let email: String?
        /// If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file will be created for empty folders. The default is false.
        public let keepEmptyFolders: Bool?
        /// The merge option or strategy you want to use to merge the code.
        public let mergeOption: MergeOptionTypeEnum
        /// The name of the repository where you want to create the unreferenced merge commit.
        public let repositoryName: String
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let sourceCommitSpecifier: String

        public init(authorName: String? = nil, commitMessage: String? = nil, conflictDetailLevel: ConflictDetailLevelTypeEnum? = nil, conflictResolution: ConflictResolution? = nil, conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum? = nil, destinationCommitSpecifier: String, email: String? = nil, keepEmptyFolders: Bool? = nil, mergeOption: MergeOptionTypeEnum, repositoryName: String, sourceCommitSpecifier: String) {
            self.authorName = authorName
            self.commitMessage = commitMessage
            self.conflictDetailLevel = conflictDetailLevel
            self.conflictResolution = conflictResolution
            self.conflictResolutionStrategy = conflictResolutionStrategy
            self.destinationCommitSpecifier = destinationCommitSpecifier
            self.email = email
            self.keepEmptyFolders = keepEmptyFolders
            self.mergeOption = mergeOption
            self.repositoryName = repositoryName
            self.sourceCommitSpecifier = sourceCommitSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case authorName = "authorName"
            case commitMessage = "commitMessage"
            case conflictDetailLevel = "conflictDetailLevel"
            case conflictResolution = "conflictResolution"
            case conflictResolutionStrategy = "conflictResolutionStrategy"
            case destinationCommitSpecifier = "destinationCommitSpecifier"
            case email = "email"
            case keepEmptyFolders = "keepEmptyFolders"
            case mergeOption = "mergeOption"
            case repositoryName = "repositoryName"
            case sourceCommitSpecifier = "sourceCommitSpecifier"
        }
    }

    public struct CreateUnreferencedMergeCommitOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commitId", required: false, type: .string), 
            AWSShapeMember(label: "treeId", required: false, type: .string)
        ]
        /// The full commit ID of the commit that contains your merge results.
        public let commitId: String?
        /// The full SHA-1 pointer of the tree information for the commit that contains the merge results.
        public let treeId: String?

        public init(commitId: String? = nil, treeId: String? = nil) {
            self.commitId = commitId
            self.treeId = treeId
        }

        private enum CodingKeys: String, CodingKey {
            case commitId = "commitId"
            case treeId = "treeId"
        }
    }

    public struct DeleteBranchInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "branchName", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// The name of the branch to delete.
        public let branchName: String
        /// The name of the repository that contains the branch to be deleted.
        public let repositoryName: String

        public init(branchName: String, repositoryName: String) {
            self.branchName = branchName
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case branchName = "branchName"
            case repositoryName = "repositoryName"
        }
    }

    public struct DeleteBranchOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deletedBranch", required: false, type: .structure)
        ]
        /// Information about the branch deleted by the operation, including the branch name and the commit ID that was the tip of the branch.
        public let deletedBranch: BranchInfo?

        public init(deletedBranch: BranchInfo? = nil) {
            self.deletedBranch = deletedBranch
        }

        private enum CodingKeys: String, CodingKey {
            case deletedBranch = "deletedBranch"
        }
    }

    public struct DeleteCommentContentInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commentId", required: true, type: .string)
        ]
        /// The unique, system-generated ID of the comment. To get this ID, use GetCommentsForComparedCommit or GetCommentsForPullRequest.
        public let commentId: String

        public init(commentId: String) {
            self.commentId = commentId
        }

        private enum CodingKeys: String, CodingKey {
            case commentId = "commentId"
        }
    }

    public struct DeleteCommentContentOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "comment", required: false, type: .structure)
        ]
        /// Information about the comment you just deleted.
        public let comment: Comment?

        public init(comment: Comment? = nil) {
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "comment"
        }
    }

    public struct DeleteFileEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "filePath", required: true, type: .string)
        ]
        /// The full path of the file that will be deleted, including the name of the file.
        public let filePath: String

        public init(filePath: String) {
            self.filePath = filePath
        }

        private enum CodingKeys: String, CodingKey {
            case filePath = "filePath"
        }
    }

    public struct DeleteFileInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "branchName", required: true, type: .string), 
            AWSShapeMember(label: "commitMessage", required: false, type: .string), 
            AWSShapeMember(label: "email", required: false, type: .string), 
            AWSShapeMember(label: "filePath", required: true, type: .string), 
            AWSShapeMember(label: "keepEmptyFolders", required: false, type: .boolean), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "parentCommitId", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// The name of the branch where the commit will be made deleting the file.
        public let branchName: String
        /// The commit message you want to include as part of deleting the file. Commit messages are limited to 256 KB. If no message is specified, a default message will be used.
        public let commitMessage: String?
        /// The email address for the commit that deletes the file. If no email address is specified, the email address will be left blank.
        public let email: String?
        /// The fully-qualified path to the file that will be deleted, including the full name and extension of that file. For example, /examples/file.md is a fully qualified path to a file named file.md in a folder named examples.
        public let filePath: String
        /// Specifies whether to delete the folder or directory that contains the file you want to delete if that file is the only object in the folder or directory. By default, empty folders will be deleted. This includes empty folders that are part of the directory structure. For example, if the path to a file is dir1/dir2/dir3/dir4, and dir2 and dir3 are empty, deleting the last file in dir4 will also delete the empty folders dir4, dir3, and dir2.
        public let keepEmptyFolders: Bool?
        /// The name of the author of the commit that deletes the file. If no name is specified, the user's ARN will be used as the author name and committer name.
        public let name: String?
        /// The ID of the commit that is the tip of the branch where you want to create the commit that will delete the file. This must be the HEAD commit for the branch. The commit that deletes the file will be created from this commit ID.
        public let parentCommitId: String
        /// The name of the repository that contains the file to delete.
        public let repositoryName: String

        public init(branchName: String, commitMessage: String? = nil, email: String? = nil, filePath: String, keepEmptyFolders: Bool? = nil, name: String? = nil, parentCommitId: String, repositoryName: String) {
            self.branchName = branchName
            self.commitMessage = commitMessage
            self.email = email
            self.filePath = filePath
            self.keepEmptyFolders = keepEmptyFolders
            self.name = name
            self.parentCommitId = parentCommitId
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case branchName = "branchName"
            case commitMessage = "commitMessage"
            case email = "email"
            case filePath = "filePath"
            case keepEmptyFolders = "keepEmptyFolders"
            case name = "name"
            case parentCommitId = "parentCommitId"
            case repositoryName = "repositoryName"
        }
    }

    public struct DeleteFileOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "blobId", required: true, type: .string), 
            AWSShapeMember(label: "commitId", required: true, type: .string), 
            AWSShapeMember(label: "filePath", required: true, type: .string), 
            AWSShapeMember(label: "treeId", required: true, type: .string)
        ]
        /// The blob ID removed from the tree as part of deleting the file.
        public let blobId: String
        /// The full commit ID of the commit that contains the change that deletes the file.
        public let commitId: String
        /// The fully-qualified path to the file that will be deleted, including the full name and extension of that file.
        public let filePath: String
        /// The full SHA-1 pointer of the tree information for the commit that contains the delete file change.
        public let treeId: String

        public init(blobId: String, commitId: String, filePath: String, treeId: String) {
            self.blobId = blobId
            self.commitId = commitId
            self.filePath = filePath
            self.treeId = treeId
        }

        private enum CodingKeys: String, CodingKey {
            case blobId = "blobId"
            case commitId = "commitId"
            case filePath = "filePath"
            case treeId = "treeId"
        }
    }

    public struct DeleteRepositoryInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// The name of the repository to delete.
        public let repositoryName: String

        public init(repositoryName: String) {
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case repositoryName = "repositoryName"
        }
    }

    public struct DeleteRepositoryOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "repositoryId", required: false, type: .string)
        ]
        /// The ID of the repository that was deleted.
        public let repositoryId: String?

        public init(repositoryId: String? = nil) {
            self.repositoryId = repositoryId
        }

        private enum CodingKeys: String, CodingKey {
            case repositoryId = "repositoryId"
        }
    }

    public struct DescribeMergeConflictsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "conflictDetailLevel", required: false, type: .enum), 
            AWSShapeMember(label: "conflictResolutionStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "destinationCommitSpecifier", required: true, type: .string), 
            AWSShapeMember(label: "filePath", required: true, type: .string), 
            AWSShapeMember(label: "maxMergeHunks", required: false, type: .integer), 
            AWSShapeMember(label: "mergeOption", required: true, type: .enum), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "sourceCommitSpecifier", required: true, type: .string)
        ]
        /// The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.
        public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
        /// Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.
        public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let destinationCommitSpecifier: String
        /// The path of the target files used to describe the conflicts. 
        public let filePath: String
        /// The maximum number of merge hunks to include in the output.
        public let maxMergeHunks: Int32?
        /// The merge option or strategy you want to use to merge the code.
        public let mergeOption: MergeOptionTypeEnum
        /// An enumeration token that when provided in a request, returns the next batch of the results.
        public let nextToken: String?
        /// The name of the repository where you want to get information about a merge conflict.
        public let repositoryName: String
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let sourceCommitSpecifier: String

        public init(conflictDetailLevel: ConflictDetailLevelTypeEnum? = nil, conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum? = nil, destinationCommitSpecifier: String, filePath: String, maxMergeHunks: Int32? = nil, mergeOption: MergeOptionTypeEnum, nextToken: String? = nil, repositoryName: String, sourceCommitSpecifier: String) {
            self.conflictDetailLevel = conflictDetailLevel
            self.conflictResolutionStrategy = conflictResolutionStrategy
            self.destinationCommitSpecifier = destinationCommitSpecifier
            self.filePath = filePath
            self.maxMergeHunks = maxMergeHunks
            self.mergeOption = mergeOption
            self.nextToken = nextToken
            self.repositoryName = repositoryName
            self.sourceCommitSpecifier = sourceCommitSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case conflictDetailLevel = "conflictDetailLevel"
            case conflictResolutionStrategy = "conflictResolutionStrategy"
            case destinationCommitSpecifier = "destinationCommitSpecifier"
            case filePath = "filePath"
            case maxMergeHunks = "maxMergeHunks"
            case mergeOption = "mergeOption"
            case nextToken = "nextToken"
            case repositoryName = "repositoryName"
            case sourceCommitSpecifier = "sourceCommitSpecifier"
        }
    }

    public struct DescribeMergeConflictsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "baseCommitId", required: false, type: .string), 
            AWSShapeMember(label: "conflictMetadata", required: true, type: .structure), 
            AWSShapeMember(label: "destinationCommitId", required: true, type: .string), 
            AWSShapeMember(label: "mergeHunks", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "sourceCommitId", required: true, type: .string)
        ]
        /// The commit ID of the merge base.
        public let baseCommitId: String?
        /// Contains metadata about the conflicts found in the merge.
        public let conflictMetadata: ConflictMetadata
        /// The commit ID of the destination commit specifier that was used in the merge evaluation.
        public let destinationCommitId: String
        /// A list of merge hunks of the differences between the files or lines.
        public let mergeHunks: [MergeHunk]
        /// An enumeration token that can be used in a request to return the next batch of the results.
        public let nextToken: String?
        /// The commit ID of the source commit specifier that was used in the merge evaluation.
        public let sourceCommitId: String

        public init(baseCommitId: String? = nil, conflictMetadata: ConflictMetadata, destinationCommitId: String, mergeHunks: [MergeHunk], nextToken: String? = nil, sourceCommitId: String) {
            self.baseCommitId = baseCommitId
            self.conflictMetadata = conflictMetadata
            self.destinationCommitId = destinationCommitId
            self.mergeHunks = mergeHunks
            self.nextToken = nextToken
            self.sourceCommitId = sourceCommitId
        }

        private enum CodingKeys: String, CodingKey {
            case baseCommitId = "baseCommitId"
            case conflictMetadata = "conflictMetadata"
            case destinationCommitId = "destinationCommitId"
            case mergeHunks = "mergeHunks"
            case nextToken = "nextToken"
            case sourceCommitId = "sourceCommitId"
        }
    }

    public struct DescribePullRequestEventsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actorArn", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "pullRequestEventType", required: false, type: .enum), 
            AWSShapeMember(label: "pullRequestId", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include updating the pull request with additional commits or changing the status of a pull request.
        public let actorArn: String?
        /// A non-negative integer used to limit the number of returned results. The default is 100 events, which is also the maximum number of events that can be returned in a result.
        public let maxResults: Int32?
        /// An enumeration token that when provided in a request, returns the next batch of the results.
        public let nextToken: String?
        /// Optional. The pull request event type about which you want to return information.
        public let pullRequestEventType: PullRequestEventType?
        /// The system-generated ID of the pull request. To get this ID, use ListPullRequests.
        public let pullRequestId: String

        public init(actorArn: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil, pullRequestEventType: PullRequestEventType? = nil, pullRequestId: String) {
            self.actorArn = actorArn
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.pullRequestEventType = pullRequestEventType
            self.pullRequestId = pullRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case actorArn = "actorArn"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case pullRequestEventType = "pullRequestEventType"
            case pullRequestId = "pullRequestId"
        }
    }

    public struct DescribePullRequestEventsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "pullRequestEvents", required: true, type: .list)
        ]
        /// An enumeration token that can be used in a request to return the next batch of the results.
        public let nextToken: String?
        /// Information about the pull request events.
        public let pullRequestEvents: [PullRequestEvent]

        public init(nextToken: String? = nil, pullRequestEvents: [PullRequestEvent]) {
            self.nextToken = nextToken
            self.pullRequestEvents = pullRequestEvents
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case pullRequestEvents = "pullRequestEvents"
        }
    }

    public struct Difference: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "afterBlob", required: false, type: .structure), 
            AWSShapeMember(label: "beforeBlob", required: false, type: .structure), 
            AWSShapeMember(label: "changeType", required: false, type: .enum)
        ]
        /// Information about an afterBlob data type object, including the ID, the file mode permission code, and the path.
        public let afterBlob: BlobMetadata?
        /// Information about a beforeBlob data type object, including the ID, the file mode permission code, and the path.
        public let beforeBlob: BlobMetadata?
        /// Whether the change type of the difference is an addition (A), deletion (D), or modification (M).
        public let changeType: ChangeTypeEnum?

        public init(afterBlob: BlobMetadata? = nil, beforeBlob: BlobMetadata? = nil, changeType: ChangeTypeEnum? = nil) {
            self.afterBlob = afterBlob
            self.beforeBlob = beforeBlob
            self.changeType = changeType
        }

        private enum CodingKeys: String, CodingKey {
            case afterBlob = "afterBlob"
            case beforeBlob = "beforeBlob"
            case changeType = "changeType"
        }
    }

    public struct File: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "absolutePath", required: false, type: .string), 
            AWSShapeMember(label: "blobId", required: false, type: .string), 
            AWSShapeMember(label: "fileMode", required: false, type: .enum), 
            AWSShapeMember(label: "relativePath", required: false, type: .string)
        ]
        /// The fully-qualified path to the file in the repository.
        public let absolutePath: String?
        /// The blob ID that contains the file information.
        public let blobId: String?
        /// The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.
        public let fileMode: FileModeTypeEnum?
        /// The relative path of the file from the folder where the query originated.
        public let relativePath: String?

        public init(absolutePath: String? = nil, blobId: String? = nil, fileMode: FileModeTypeEnum? = nil, relativePath: String? = nil) {
            self.absolutePath = absolutePath
            self.blobId = blobId
            self.fileMode = fileMode
            self.relativePath = relativePath
        }

        private enum CodingKeys: String, CodingKey {
            case absolutePath = "absolutePath"
            case blobId = "blobId"
            case fileMode = "fileMode"
            case relativePath = "relativePath"
        }
    }

    public struct FileMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "absolutePath", required: false, type: .string), 
            AWSShapeMember(label: "blobId", required: false, type: .string), 
            AWSShapeMember(label: "fileMode", required: false, type: .enum)
        ]
        /// The full path to the file that will be added or updated, including the name of the file.
        public let absolutePath: String?
        /// The blob ID that contains the file information.
        public let blobId: String?
        /// The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.
        public let fileMode: FileModeTypeEnum?

        public init(absolutePath: String? = nil, blobId: String? = nil, fileMode: FileModeTypeEnum? = nil) {
            self.absolutePath = absolutePath
            self.blobId = blobId
            self.fileMode = fileMode
        }

        private enum CodingKeys: String, CodingKey {
            case absolutePath = "absolutePath"
            case blobId = "blobId"
            case fileMode = "fileMode"
        }
    }

    public enum FileModeTypeEnum: String, CustomStringConvertible, Codable {
        case executable = "EXECUTABLE"
        case normal = "NORMAL"
        case symlink = "SYMLINK"
        public var description: String { return self.rawValue }
    }

    public struct FileModes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "base", required: false, type: .enum), 
            AWSShapeMember(label: "destination", required: false, type: .enum), 
            AWSShapeMember(label: "source", required: false, type: .enum)
        ]
        /// The file mode of a file in the base of a merge or pull request.
        public let base: FileModeTypeEnum?
        /// The file mode of a file in the destination of a merge or pull request.
        public let destination: FileModeTypeEnum?
        /// The file mode of a file in the source of a merge or pull request.
        public let source: FileModeTypeEnum?

        public init(base: FileModeTypeEnum? = nil, destination: FileModeTypeEnum? = nil, source: FileModeTypeEnum? = nil) {
            self.base = base
            self.destination = destination
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case base = "base"
            case destination = "destination"
            case source = "source"
        }
    }

    public struct FileSizes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "base", required: false, type: .long), 
            AWSShapeMember(label: "destination", required: false, type: .long), 
            AWSShapeMember(label: "source", required: false, type: .long)
        ]
        /// The size of a file in the base of a merge or pull request.
        public let base: Int64?
        /// The size of a file in the destination of a merge or pull request.
        public let destination: Int64?
        /// The size of a file in the source of a merge or pull request.
        public let source: Int64?

        public init(base: Int64? = nil, destination: Int64? = nil, source: Int64? = nil) {
            self.base = base
            self.destination = destination
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case base = "base"
            case destination = "destination"
            case source = "source"
        }
    }

    public struct Folder: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "absolutePath", required: false, type: .string), 
            AWSShapeMember(label: "relativePath", required: false, type: .string), 
            AWSShapeMember(label: "treeId", required: false, type: .string)
        ]
        /// The fully-qualified path of the folder in the repository.
        public let absolutePath: String?
        /// The relative path of the specified folder from the folder where the query originated.
        public let relativePath: String?
        /// The full SHA-1 pointer of the tree information for the commit that contains the folder.
        public let treeId: String?

        public init(absolutePath: String? = nil, relativePath: String? = nil, treeId: String? = nil) {
            self.absolutePath = absolutePath
            self.relativePath = relativePath
            self.treeId = treeId
        }

        private enum CodingKeys: String, CodingKey {
            case absolutePath = "absolutePath"
            case relativePath = "relativePath"
            case treeId = "treeId"
        }
    }

    public struct GetBlobInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "blobId", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// The ID of the blob, which is its SHA-1 pointer.
        public let blobId: String
        /// The name of the repository that contains the blob.
        public let repositoryName: String

        public init(blobId: String, repositoryName: String) {
            self.blobId = blobId
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case blobId = "blobId"
            case repositoryName = "repositoryName"
        }
    }

    public struct GetBlobOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "content", required: true, type: .blob)
        ]
        /// The content of the blob, usually a file.
        public let content: Data

        public init(content: Data) {
            self.content = content
        }

        private enum CodingKeys: String, CodingKey {
            case content = "content"
        }
    }

    public struct GetBranchInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "branchName", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: false, type: .string)
        ]
        /// The name of the branch for which you want to retrieve information.
        public let branchName: String?
        /// The name of the repository that contains the branch for which you want to retrieve information.
        public let repositoryName: String?

        public init(branchName: String? = nil, repositoryName: String? = nil) {
            self.branchName = branchName
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case branchName = "branchName"
            case repositoryName = "repositoryName"
        }
    }

    public struct GetBranchOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "branch", required: false, type: .structure)
        ]
        /// The name of the branch.
        public let branch: BranchInfo?

        public init(branch: BranchInfo? = nil) {
            self.branch = branch
        }

        private enum CodingKeys: String, CodingKey {
            case branch = "branch"
        }
    }

    public struct GetCommentInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commentId", required: true, type: .string)
        ]
        /// The unique, system-generated ID of the comment. To get this ID, use GetCommentsForComparedCommit or GetCommentsForPullRequest.
        public let commentId: String

        public init(commentId: String) {
            self.commentId = commentId
        }

        private enum CodingKeys: String, CodingKey {
            case commentId = "commentId"
        }
    }

    public struct GetCommentOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "comment", required: false, type: .structure)
        ]
        /// The contents of the comment.
        public let comment: Comment?

        public init(comment: Comment? = nil) {
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "comment"
        }
    }

    public struct GetCommentsForComparedCommitInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "afterCommitId", required: true, type: .string), 
            AWSShapeMember(label: "beforeCommitId", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// To establish the directionality of the comparison, the full commit ID of the 'after' commit.
        public let afterCommitId: String
        /// To establish the directionality of the comparison, the full commit ID of the 'before' commit.
        public let beforeCommitId: String?
        /// A non-negative integer used to limit the number of returned results. The default is 100 comments, and is configurable up to 500.
        public let maxResults: Int32?
        /// An enumeration token that when provided in a request, returns the next batch of the results. 
        public let nextToken: String?
        /// The name of the repository where you want to compare commits.
        public let repositoryName: String

        public init(afterCommitId: String, beforeCommitId: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil, repositoryName: String) {
            self.afterCommitId = afterCommitId
            self.beforeCommitId = beforeCommitId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case afterCommitId = "afterCommitId"
            case beforeCommitId = "beforeCommitId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case repositoryName = "repositoryName"
        }
    }

    public struct GetCommentsForComparedCommitOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commentsForComparedCommitData", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of comment objects on the compared commit.
        public let commentsForComparedCommitData: [CommentsForComparedCommit]?
        /// An enumeration token that can be used in a request to return the next batch of the results.
        public let nextToken: String?

        public init(commentsForComparedCommitData: [CommentsForComparedCommit]? = nil, nextToken: String? = nil) {
            self.commentsForComparedCommitData = commentsForComparedCommitData
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case commentsForComparedCommitData = "commentsForComparedCommitData"
            case nextToken = "nextToken"
        }
    }

    public struct GetCommentsForPullRequestInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "afterCommitId", required: false, type: .string), 
            AWSShapeMember(label: "beforeCommitId", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "pullRequestId", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: false, type: .string)
        ]
        /// The full commit ID of the commit in the source branch that was the tip of the branch at the time the comment was made.
        public let afterCommitId: String?
        /// The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.
        public let beforeCommitId: String?
        /// A non-negative integer used to limit the number of returned results. The default is 100 comments. You can return up to 500 comments with a single request.
        public let maxResults: Int32?
        /// An enumeration token that when provided in a request, returns the next batch of the results.
        public let nextToken: String?
        /// The system-generated ID of the pull request. To get this ID, use ListPullRequests.
        public let pullRequestId: String
        /// The name of the repository that contains the pull request.
        public let repositoryName: String?

        public init(afterCommitId: String? = nil, beforeCommitId: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil, pullRequestId: String, repositoryName: String? = nil) {
            self.afterCommitId = afterCommitId
            self.beforeCommitId = beforeCommitId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.pullRequestId = pullRequestId
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case afterCommitId = "afterCommitId"
            case beforeCommitId = "beforeCommitId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case pullRequestId = "pullRequestId"
            case repositoryName = "repositoryName"
        }
    }

    public struct GetCommentsForPullRequestOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commentsForPullRequestData", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An array of comment objects on the pull request.
        public let commentsForPullRequestData: [CommentsForPullRequest]?
        /// An enumeration token that can be used in a request to return the next batch of the results.
        public let nextToken: String?

        public init(commentsForPullRequestData: [CommentsForPullRequest]? = nil, nextToken: String? = nil) {
            self.commentsForPullRequestData = commentsForPullRequestData
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case commentsForPullRequestData = "commentsForPullRequestData"
            case nextToken = "nextToken"
        }
    }

    public struct GetCommitInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commitId", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// The commit ID. Commit IDs are the full SHA of the commit.
        public let commitId: String
        /// The name of the repository to which the commit was made.
        public let repositoryName: String

        public init(commitId: String, repositoryName: String) {
            self.commitId = commitId
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case commitId = "commitId"
            case repositoryName = "repositoryName"
        }
    }

    public struct GetCommitOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commit", required: true, type: .structure)
        ]
        /// A commit data type object that contains information about the specified commit.
        public let commit: Commit

        public init(commit: Commit) {
            self.commit = commit
        }

        private enum CodingKeys: String, CodingKey {
            case commit = "commit"
        }
    }

    public struct GetDifferencesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "afterCommitSpecifier", required: true, type: .string), 
            AWSShapeMember(label: "afterPath", required: false, type: .string), 
            AWSShapeMember(label: "beforeCommitSpecifier", required: false, type: .string), 
            AWSShapeMember(label: "beforePath", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// A non-negative integer used to limit the number of returned results.
        public let maxResults: Int32?
        /// An enumeration token that when provided in a request, returns the next batch of the results.
        public let nextToken: String?
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit.
        public let afterCommitSpecifier: String
        /// The file path in which to check differences. Limits the results to this path. Can also be used to specify the changed name of a directory or folder, if it has changed. If not specified, differences will be shown for all paths.
        public let afterPath: String?
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, the full commit ID. Optional. If not specified, all changes prior to the afterCommitSpecifier value will be shown. If you do not use beforeCommitSpecifier in your request, consider limiting the results with maxResults.
        public let beforeCommitSpecifier: String?
        /// The file path in which to check for differences. Limits the results to this path. Can also be used to specify the previous name of a directory or folder. If beforePath and afterPath are not specified, differences will be shown for all paths.
        public let beforePath: String?
        /// The name of the repository where you want to get differences.
        public let repositoryName: String

        public init(afterCommitSpecifier: String, afterPath: String? = nil, beforeCommitSpecifier: String? = nil, beforePath: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil, repositoryName: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.afterCommitSpecifier = afterCommitSpecifier
            self.afterPath = afterPath
            self.beforeCommitSpecifier = beforeCommitSpecifier
            self.beforePath = beforePath
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case afterCommitSpecifier = "afterCommitSpecifier"
            case afterPath = "afterPath"
            case beforeCommitSpecifier = "beforeCommitSpecifier"
            case beforePath = "beforePath"
            case repositoryName = "repositoryName"
        }
    }

    public struct GetDifferencesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "differences", required: false, type: .list)
        ]
        /// An enumeration token that can be used in a request to return the next batch of the results.
        public let nextToken: String?
        /// A differences data type object that contains information about the differences, including whether the difference is added, modified, or deleted (A, D, M).
        public let differences: [Difference]?

        public init(differences: [Difference]? = nil, nextToken: String? = nil) {
            self.nextToken = nextToken
            self.differences = differences
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case differences = "differences"
        }
    }

    public struct GetFileInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commitSpecifier", required: false, type: .string), 
            AWSShapeMember(label: "filePath", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// The fully-quaified reference that identifies the commit that contains the file. For example, you could specify a full commit ID, a tag, a branch name, or a reference such as refs/heads/master. If none is provided, then the head commit will be used.
        public let commitSpecifier: String?
        /// The fully-qualified path to the file, including the full name and extension of the file. For example, /examples/file.md is the fully-qualified path to a file named file.md in a folder named examples.
        public let filePath: String
        /// The name of the repository that contains the file.
        public let repositoryName: String

        public init(commitSpecifier: String? = nil, filePath: String, repositoryName: String) {
            self.commitSpecifier = commitSpecifier
            self.filePath = filePath
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case commitSpecifier = "commitSpecifier"
            case filePath = "filePath"
            case repositoryName = "repositoryName"
        }
    }

    public struct GetFileOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "blobId", required: true, type: .string), 
            AWSShapeMember(label: "commitId", required: true, type: .string), 
            AWSShapeMember(label: "fileContent", required: true, type: .blob), 
            AWSShapeMember(label: "fileMode", required: true, type: .enum), 
            AWSShapeMember(label: "filePath", required: true, type: .string), 
            AWSShapeMember(label: "fileSize", required: true, type: .long)
        ]
        /// The blob ID of the object that represents the file content.
        public let blobId: String
        /// The full commit ID of the commit that contains the content returned by GetFile.
        public let commitId: String
        /// The base-64 encoded binary data object that represents the content of the file.
        public let fileContent: Data
        /// The extrapolated file mode permissions of the blob. Valid values include strings such as EXECUTABLE and not numeric values.  The file mode permissions returned by this API are not the standard file mode permission values, such as 100644, but rather extrapolated values. See below for a full list of supported return values. 
        public let fileMode: FileModeTypeEnum
        /// The fully qualified path to the specified file. This returns the name and extension of the file.
        public let filePath: String
        /// The size of the contents of the file, in bytes.
        public let fileSize: Int64

        public init(blobId: String, commitId: String, fileContent: Data, fileMode: FileModeTypeEnum, filePath: String, fileSize: Int64) {
            self.blobId = blobId
            self.commitId = commitId
            self.fileContent = fileContent
            self.fileMode = fileMode
            self.filePath = filePath
            self.fileSize = fileSize
        }

        private enum CodingKeys: String, CodingKey {
            case blobId = "blobId"
            case commitId = "commitId"
            case fileContent = "fileContent"
            case fileMode = "fileMode"
            case filePath = "filePath"
            case fileSize = "fileSize"
        }
    }

    public struct GetFolderInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commitSpecifier", required: false, type: .string), 
            AWSShapeMember(label: "folderPath", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// A fully-qualified reference used to identify a commit that contains the version of the folder's content to return. A fully-qualified reference can be a commit ID, branch name, tag, or reference such as HEAD. If no specifier is provided, the folder content will be returned as it exists in the HEAD commit.
        public let commitSpecifier: String?
        /// The fully-qualified path to the folder whose contents will be returned, including the folder name. For example, /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository. 
        public let folderPath: String
        /// The name of the repository.
        public let repositoryName: String

        public init(commitSpecifier: String? = nil, folderPath: String, repositoryName: String) {
            self.commitSpecifier = commitSpecifier
            self.folderPath = folderPath
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case commitSpecifier = "commitSpecifier"
            case folderPath = "folderPath"
            case repositoryName = "repositoryName"
        }
    }

    public struct GetFolderOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commitId", required: true, type: .string), 
            AWSShapeMember(label: "files", required: false, type: .list), 
            AWSShapeMember(label: "folderPath", required: true, type: .string), 
            AWSShapeMember(label: "subFolders", required: false, type: .list), 
            AWSShapeMember(label: "subModules", required: false, type: .list), 
            AWSShapeMember(label: "symbolicLinks", required: false, type: .list), 
            AWSShapeMember(label: "treeId", required: false, type: .string)
        ]
        /// The full commit ID used as a reference for which version of the folder content is returned.
        public let commitId: String
        /// The list of files that exist in the specified folder, if any.
        public let files: [File]?
        /// The fully-qualified path of the folder whose contents are returned.
        public let folderPath: String
        /// The list of folders that exist beneath the specified folder, if any.
        public let subFolders: [Folder]?
        /// The list of submodules that exist in the specified folder, if any.
        public let subModules: [SubModule]?
        /// The list of symbolic links to other files and folders that exist in the specified folder, if any.
        public let symbolicLinks: [SymbolicLink]?
        /// The full SHA-1 pointer of the tree information for the commit that contains the folder.
        public let treeId: String?

        public init(commitId: String, files: [File]? = nil, folderPath: String, subFolders: [Folder]? = nil, subModules: [SubModule]? = nil, symbolicLinks: [SymbolicLink]? = nil, treeId: String? = nil) {
            self.commitId = commitId
            self.files = files
            self.folderPath = folderPath
            self.subFolders = subFolders
            self.subModules = subModules
            self.symbolicLinks = symbolicLinks
            self.treeId = treeId
        }

        private enum CodingKeys: String, CodingKey {
            case commitId = "commitId"
            case files = "files"
            case folderPath = "folderPath"
            case subFolders = "subFolders"
            case subModules = "subModules"
            case symbolicLinks = "symbolicLinks"
            case treeId = "treeId"
        }
    }

    public struct GetMergeCommitInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "conflictDetailLevel", required: false, type: .enum), 
            AWSShapeMember(label: "conflictResolutionStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "destinationCommitSpecifier", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "sourceCommitSpecifier", required: true, type: .string)
        ]
        /// The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.
        public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
        /// Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.
        public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let destinationCommitSpecifier: String
        /// The name of the repository that contains the merge commit about which you want to get information.
        public let repositoryName: String
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let sourceCommitSpecifier: String

        public init(conflictDetailLevel: ConflictDetailLevelTypeEnum? = nil, conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum? = nil, destinationCommitSpecifier: String, repositoryName: String, sourceCommitSpecifier: String) {
            self.conflictDetailLevel = conflictDetailLevel
            self.conflictResolutionStrategy = conflictResolutionStrategy
            self.destinationCommitSpecifier = destinationCommitSpecifier
            self.repositoryName = repositoryName
            self.sourceCommitSpecifier = sourceCommitSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case conflictDetailLevel = "conflictDetailLevel"
            case conflictResolutionStrategy = "conflictResolutionStrategy"
            case destinationCommitSpecifier = "destinationCommitSpecifier"
            case repositoryName = "repositoryName"
            case sourceCommitSpecifier = "sourceCommitSpecifier"
        }
    }

    public struct GetMergeCommitOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "baseCommitId", required: false, type: .string), 
            AWSShapeMember(label: "destinationCommitId", required: false, type: .string), 
            AWSShapeMember(label: "mergedCommitId", required: false, type: .string), 
            AWSShapeMember(label: "sourceCommitId", required: false, type: .string)
        ]
        /// The commit ID of the merge base.
        public let baseCommitId: String?
        /// The commit ID of the destination commit specifier that was used in the merge evaluation.
        public let destinationCommitId: String?
        /// The commit ID for the merge commit created when the source branch was merged into the destination branch. If the fast-forward merge strategy was used, no merge commit exists.
        public let mergedCommitId: String?
        /// The commit ID of the source commit specifier that was used in the merge evaluation.
        public let sourceCommitId: String?

        public init(baseCommitId: String? = nil, destinationCommitId: String? = nil, mergedCommitId: String? = nil, sourceCommitId: String? = nil) {
            self.baseCommitId = baseCommitId
            self.destinationCommitId = destinationCommitId
            self.mergedCommitId = mergedCommitId
            self.sourceCommitId = sourceCommitId
        }

        private enum CodingKeys: String, CodingKey {
            case baseCommitId = "baseCommitId"
            case destinationCommitId = "destinationCommitId"
            case mergedCommitId = "mergedCommitId"
            case sourceCommitId = "sourceCommitId"
        }
    }

    public struct GetMergeConflictsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "conflictDetailLevel", required: false, type: .enum), 
            AWSShapeMember(label: "conflictResolutionStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "destinationCommitSpecifier", required: true, type: .string), 
            AWSShapeMember(label: "maxConflictFiles", required: false, type: .integer), 
            AWSShapeMember(label: "mergeOption", required: true, type: .enum), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "sourceCommitSpecifier", required: true, type: .string)
        ]
        /// The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.
        public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
        /// Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.
        public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let destinationCommitSpecifier: String
        /// The maximum number of files to include in the output.
        public let maxConflictFiles: Int32?
        /// The merge option or strategy you want to use to merge the code. 
        public let mergeOption: MergeOptionTypeEnum
        /// An enumeration token that when provided in a request, returns the next batch of the results.
        public let nextToken: String?
        /// The name of the repository where the pull request was created.
        public let repositoryName: String
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let sourceCommitSpecifier: String

        public init(conflictDetailLevel: ConflictDetailLevelTypeEnum? = nil, conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum? = nil, destinationCommitSpecifier: String, maxConflictFiles: Int32? = nil, mergeOption: MergeOptionTypeEnum, nextToken: String? = nil, repositoryName: String, sourceCommitSpecifier: String) {
            self.conflictDetailLevel = conflictDetailLevel
            self.conflictResolutionStrategy = conflictResolutionStrategy
            self.destinationCommitSpecifier = destinationCommitSpecifier
            self.maxConflictFiles = maxConflictFiles
            self.mergeOption = mergeOption
            self.nextToken = nextToken
            self.repositoryName = repositoryName
            self.sourceCommitSpecifier = sourceCommitSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case conflictDetailLevel = "conflictDetailLevel"
            case conflictResolutionStrategy = "conflictResolutionStrategy"
            case destinationCommitSpecifier = "destinationCommitSpecifier"
            case maxConflictFiles = "maxConflictFiles"
            case mergeOption = "mergeOption"
            case nextToken = "nextToken"
            case repositoryName = "repositoryName"
            case sourceCommitSpecifier = "sourceCommitSpecifier"
        }
    }

    public struct GetMergeConflictsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "baseCommitId", required: false, type: .string), 
            AWSShapeMember(label: "conflictMetadataList", required: true, type: .list), 
            AWSShapeMember(label: "destinationCommitId", required: true, type: .string), 
            AWSShapeMember(label: "mergeable", required: true, type: .boolean), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "sourceCommitId", required: true, type: .string)
        ]
        /// The commit ID of the merge base.
        public let baseCommitId: String?
        /// A list of metadata for any conflicting files. If the specified merge strategy is FAST_FORWARD_MERGE, this list will always be empty.
        public let conflictMetadataList: [ConflictMetadata]
        /// The commit ID of the destination commit specifier that was used in the merge evaluation.
        public let destinationCommitId: String
        /// A Boolean value that indicates whether the code is mergeable by the specified merge option.
        public let mergeable: Bool
        /// An enumeration token that can be used in a request to return the next batch of the results.
        public let nextToken: String?
        /// The commit ID of the source commit specifier that was used in the merge evaluation.
        public let sourceCommitId: String

        public init(baseCommitId: String? = nil, conflictMetadataList: [ConflictMetadata], destinationCommitId: String, mergeable: Bool, nextToken: String? = nil, sourceCommitId: String) {
            self.baseCommitId = baseCommitId
            self.conflictMetadataList = conflictMetadataList
            self.destinationCommitId = destinationCommitId
            self.mergeable = mergeable
            self.nextToken = nextToken
            self.sourceCommitId = sourceCommitId
        }

        private enum CodingKeys: String, CodingKey {
            case baseCommitId = "baseCommitId"
            case conflictMetadataList = "conflictMetadataList"
            case destinationCommitId = "destinationCommitId"
            case mergeable = "mergeable"
            case nextToken = "nextToken"
            case sourceCommitId = "sourceCommitId"
        }
    }

    public struct GetMergeOptionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "conflictDetailLevel", required: false, type: .enum), 
            AWSShapeMember(label: "conflictResolutionStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "destinationCommitSpecifier", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "sourceCommitSpecifier", required: true, type: .string)
        ]
        /// The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.
        public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
        /// Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.
        public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let destinationCommitSpecifier: String
        /// The name of the repository that contains the commits about which you want to get merge options.
        public let repositoryName: String
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let sourceCommitSpecifier: String

        public init(conflictDetailLevel: ConflictDetailLevelTypeEnum? = nil, conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum? = nil, destinationCommitSpecifier: String, repositoryName: String, sourceCommitSpecifier: String) {
            self.conflictDetailLevel = conflictDetailLevel
            self.conflictResolutionStrategy = conflictResolutionStrategy
            self.destinationCommitSpecifier = destinationCommitSpecifier
            self.repositoryName = repositoryName
            self.sourceCommitSpecifier = sourceCommitSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case conflictDetailLevel = "conflictDetailLevel"
            case conflictResolutionStrategy = "conflictResolutionStrategy"
            case destinationCommitSpecifier = "destinationCommitSpecifier"
            case repositoryName = "repositoryName"
            case sourceCommitSpecifier = "sourceCommitSpecifier"
        }
    }

    public struct GetMergeOptionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "baseCommitId", required: true, type: .string), 
            AWSShapeMember(label: "destinationCommitId", required: true, type: .string), 
            AWSShapeMember(label: "mergeOptions", required: true, type: .list), 
            AWSShapeMember(label: "sourceCommitId", required: true, type: .string)
        ]
        /// The commit ID of the merge base.
        public let baseCommitId: String
        /// The commit ID of the destination commit specifier that was used in the merge evaluation.
        public let destinationCommitId: String
        /// The merge option or strategy used to merge the code.
        public let mergeOptions: [MergeOptionTypeEnum]
        /// The commit ID of the source commit specifier that was used in the merge evaluation.
        public let sourceCommitId: String

        public init(baseCommitId: String, destinationCommitId: String, mergeOptions: [MergeOptionTypeEnum], sourceCommitId: String) {
            self.baseCommitId = baseCommitId
            self.destinationCommitId = destinationCommitId
            self.mergeOptions = mergeOptions
            self.sourceCommitId = sourceCommitId
        }

        private enum CodingKeys: String, CodingKey {
            case baseCommitId = "baseCommitId"
            case destinationCommitId = "destinationCommitId"
            case mergeOptions = "mergeOptions"
            case sourceCommitId = "sourceCommitId"
        }
    }

    public struct GetPullRequestInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pullRequestId", required: true, type: .string)
        ]
        /// The system-generated ID of the pull request. To get this ID, use ListPullRequests.
        public let pullRequestId: String

        public init(pullRequestId: String) {
            self.pullRequestId = pullRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case pullRequestId = "pullRequestId"
        }
    }

    public struct GetPullRequestOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pullRequest", required: true, type: .structure)
        ]
        /// Information about the specified pull request.
        public let pullRequest: PullRequest

        public init(pullRequest: PullRequest) {
            self.pullRequest = pullRequest
        }

        private enum CodingKeys: String, CodingKey {
            case pullRequest = "pullRequest"
        }
    }

    public struct GetRepositoryInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// The name of the repository to get information about.
        public let repositoryName: String

        public init(repositoryName: String) {
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case repositoryName = "repositoryName"
        }
    }

    public struct GetRepositoryOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "repositoryMetadata", required: false, type: .structure)
        ]
        /// Information about the repository.
        public let repositoryMetadata: RepositoryMetadata?

        public init(repositoryMetadata: RepositoryMetadata? = nil) {
            self.repositoryMetadata = repositoryMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case repositoryMetadata = "repositoryMetadata"
        }
    }

    public struct GetRepositoryTriggersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// The name of the repository for which the trigger is configured.
        public let repositoryName: String

        public init(repositoryName: String) {
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case repositoryName = "repositoryName"
        }
    }

    public struct GetRepositoryTriggersOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationId", required: false, type: .string), 
            AWSShapeMember(label: "triggers", required: false, type: .list)
        ]
        /// The system-generated unique ID for the trigger.
        public let configurationId: String?
        /// The JSON block of configuration information for each trigger.
        public let triggers: [RepositoryTrigger]?

        public init(configurationId: String? = nil, triggers: [RepositoryTrigger]? = nil) {
            self.configurationId = configurationId
            self.triggers = triggers
        }

        private enum CodingKeys: String, CodingKey {
            case configurationId = "configurationId"
            case triggers = "triggers"
        }
    }

    public struct IsBinaryFile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "base", required: false, type: .boolean), 
            AWSShapeMember(label: "destination", required: false, type: .boolean), 
            AWSShapeMember(label: "source", required: false, type: .boolean)
        ]
        /// The binary or non-binary status of a file in the base of a merge or pull request.
        public let base: Bool?
        /// The binary or non-binary status of a file in the destination of a merge or pull request.
        public let destination: Bool?
        /// The binary or non-binary status of file in the source of a merge or pull request.
        public let source: Bool?

        public init(base: Bool? = nil, destination: Bool? = nil, source: Bool? = nil) {
            self.base = base
            self.destination = destination
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case base = "base"
            case destination = "destination"
            case source = "source"
        }
    }

    public struct ListBranchesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// An enumeration token that allows the operation to batch the results.
        public let nextToken: String?
        /// The name of the repository that contains the branches.
        public let repositoryName: String

        public init(nextToken: String? = nil, repositoryName: String) {
            self.nextToken = nextToken
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case repositoryName = "repositoryName"
        }
    }

    public struct ListBranchesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "branches", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The list of branch names.
        public let branches: [String]?
        /// An enumeration token that returns the batch of the results.
        public let nextToken: String?

        public init(branches: [String]? = nil, nextToken: String? = nil) {
            self.branches = branches
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case branches = "branches"
            case nextToken = "nextToken"
        }
    }

    public struct ListPullRequestsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorArn", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "pullRequestStatus", required: false, type: .enum), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// Optional. The Amazon Resource Name (ARN) of the user who created the pull request. If used, this filters the results to pull requests created by that user.
        public let authorArn: String?
        /// A non-negative integer used to limit the number of returned results.
        public let maxResults: Int32?
        /// An enumeration token that when provided in a request, returns the next batch of the results.
        public let nextToken: String?
        /// Optional. The status of the pull request. If used, this refines the results to the pull requests that match the specified status.
        public let pullRequestStatus: PullRequestStatusEnum?
        /// The name of the repository for which you want to list pull requests.
        public let repositoryName: String

        public init(authorArn: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil, pullRequestStatus: PullRequestStatusEnum? = nil, repositoryName: String) {
            self.authorArn = authorArn
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.pullRequestStatus = pullRequestStatus
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case authorArn = "authorArn"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case pullRequestStatus = "pullRequestStatus"
            case repositoryName = "repositoryName"
        }
    }

    public struct ListPullRequestsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "pullRequestIds", required: true, type: .list)
        ]
        /// An enumeration token that when provided in a request, returns the next batch of the results.
        public let nextToken: String?
        /// The system-generated IDs of the pull requests.
        public let pullRequestIds: [String]

        public init(nextToken: String? = nil, pullRequestIds: [String]) {
            self.nextToken = nextToken
            self.pullRequestIds = pullRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case pullRequestIds = "pullRequestIds"
        }
    }

    public struct ListRepositoriesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "order", required: false, type: .enum), 
            AWSShapeMember(label: "sortBy", required: false, type: .enum)
        ]
        /// An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.
        public let nextToken: String?
        /// The order in which to sort the results of a list repositories operation.
        public let order: OrderEnum?
        /// The criteria used to sort the results of a list repositories operation.
        public let sortBy: SortByEnum?

        public init(nextToken: String? = nil, order: OrderEnum? = nil, sortBy: SortByEnum? = nil) {
            self.nextToken = nextToken
            self.order = order
            self.sortBy = sortBy
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case order = "order"
            case sortBy = "sortBy"
        }
    }

    public struct ListRepositoriesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "repositories", required: false, type: .list)
        ]
        /// An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.
        public let nextToken: String?
        /// Lists the repositories called by the list repositories operation.
        public let repositories: [RepositoryNameIdPair]?

        public init(nextToken: String? = nil, repositories: [RepositoryNameIdPair]? = nil) {
            self.nextToken = nextToken
            self.repositories = repositories
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case repositories = "repositories"
        }
    }

    public struct ListTagsForResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceArn", required: true, type: .string)
        ]
        /// An enumeration token that when provided in a request, returns the next batch of the results.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) of the resource for which you want to get information about tags, if any.
        public let resourceArn: String

        public init(nextToken: String? = nil, resourceArn: String) {
            self.nextToken = nextToken
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resourceArn = "resourceArn"
        }
    }

    public struct ListTagsForResourceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]
        /// An enumeration token that allows the operation to batch the next results of the operation.
        public let nextToken: String?
        /// A list of tag key and value pairs associated with the specified resource.
        public let tags: [String: String]?

        public init(nextToken: String? = nil, tags: [String: String]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case tags = "tags"
        }
    }

    public struct Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "filePath", required: false, type: .string), 
            AWSShapeMember(label: "filePosition", required: false, type: .long), 
            AWSShapeMember(label: "relativeFileVersion", required: false, type: .enum)
        ]
        /// The name of the file being compared, including its extension and subdirectory, if any.
        public let filePath: String?
        /// The position of a change within a compared file, in line number format.
        public let filePosition: Int64?
        /// In a comparison of commits or a pull request, whether the change is in the 'before' or 'after' of that comparison.
        public let relativeFileVersion: RelativeFileVersionEnum?

        public init(filePath: String? = nil, filePosition: Int64? = nil, relativeFileVersion: RelativeFileVersionEnum? = nil) {
            self.filePath = filePath
            self.filePosition = filePosition
            self.relativeFileVersion = relativeFileVersion
        }

        private enum CodingKeys: String, CodingKey {
            case filePath = "filePath"
            case filePosition = "filePosition"
            case relativeFileVersion = "relativeFileVersion"
        }
    }

    public struct MergeBranchesByFastForwardInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destinationCommitSpecifier", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "sourceCommitSpecifier", required: true, type: .string), 
            AWSShapeMember(label: "targetBranch", required: false, type: .string)
        ]
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let destinationCommitSpecifier: String
        /// The name of the repository where you want to merge two branches.
        public let repositoryName: String
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let sourceCommitSpecifier: String
        /// The branch where the merge will be applied.
        public let targetBranch: String?

        public init(destinationCommitSpecifier: String, repositoryName: String, sourceCommitSpecifier: String, targetBranch: String? = nil) {
            self.destinationCommitSpecifier = destinationCommitSpecifier
            self.repositoryName = repositoryName
            self.sourceCommitSpecifier = sourceCommitSpecifier
            self.targetBranch = targetBranch
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCommitSpecifier = "destinationCommitSpecifier"
            case repositoryName = "repositoryName"
            case sourceCommitSpecifier = "sourceCommitSpecifier"
            case targetBranch = "targetBranch"
        }
    }

    public struct MergeBranchesByFastForwardOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commitId", required: false, type: .string), 
            AWSShapeMember(label: "treeId", required: false, type: .string)
        ]
        /// The commit ID of the merge in the destination or target branch.
        public let commitId: String?
        /// The tree ID of the merge in the destination or target branch.
        public let treeId: String?

        public init(commitId: String? = nil, treeId: String? = nil) {
            self.commitId = commitId
            self.treeId = treeId
        }

        private enum CodingKeys: String, CodingKey {
            case commitId = "commitId"
            case treeId = "treeId"
        }
    }

    public struct MergeBranchesBySquashInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorName", required: false, type: .string), 
            AWSShapeMember(label: "commitMessage", required: false, type: .string), 
            AWSShapeMember(label: "conflictDetailLevel", required: false, type: .enum), 
            AWSShapeMember(label: "conflictResolution", required: false, type: .structure), 
            AWSShapeMember(label: "conflictResolutionStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "destinationCommitSpecifier", required: true, type: .string), 
            AWSShapeMember(label: "email", required: false, type: .string), 
            AWSShapeMember(label: "keepEmptyFolders", required: false, type: .boolean), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "sourceCommitSpecifier", required: true, type: .string), 
            AWSShapeMember(label: "targetBranch", required: false, type: .string)
        ]
        /// The name of the author who created the commit. This information will be used as both the author and committer for the commit.
        public let authorName: String?
        /// The commit message for the merge.
        public let commitMessage: String?
        /// The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.
        public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
        /// A list of inputs to use when resolving conflicts during a merge if AUTOMERGE is chosen as the conflict resolution strategy.
        public let conflictResolution: ConflictResolution?
        /// Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.
        public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let destinationCommitSpecifier: String
        /// The email address of the person merging the branches. This information will be used in the commit information for the merge.
        public let email: String?
        /// If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file will be created for empty folders. The default is false.
        public let keepEmptyFolders: Bool?
        /// The name of the repository where you want to merge two branches.
        public let repositoryName: String
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let sourceCommitSpecifier: String
        /// The branch where the merge will be applied. 
        public let targetBranch: String?

        public init(authorName: String? = nil, commitMessage: String? = nil, conflictDetailLevel: ConflictDetailLevelTypeEnum? = nil, conflictResolution: ConflictResolution? = nil, conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum? = nil, destinationCommitSpecifier: String, email: String? = nil, keepEmptyFolders: Bool? = nil, repositoryName: String, sourceCommitSpecifier: String, targetBranch: String? = nil) {
            self.authorName = authorName
            self.commitMessage = commitMessage
            self.conflictDetailLevel = conflictDetailLevel
            self.conflictResolution = conflictResolution
            self.conflictResolutionStrategy = conflictResolutionStrategy
            self.destinationCommitSpecifier = destinationCommitSpecifier
            self.email = email
            self.keepEmptyFolders = keepEmptyFolders
            self.repositoryName = repositoryName
            self.sourceCommitSpecifier = sourceCommitSpecifier
            self.targetBranch = targetBranch
        }

        private enum CodingKeys: String, CodingKey {
            case authorName = "authorName"
            case commitMessage = "commitMessage"
            case conflictDetailLevel = "conflictDetailLevel"
            case conflictResolution = "conflictResolution"
            case conflictResolutionStrategy = "conflictResolutionStrategy"
            case destinationCommitSpecifier = "destinationCommitSpecifier"
            case email = "email"
            case keepEmptyFolders = "keepEmptyFolders"
            case repositoryName = "repositoryName"
            case sourceCommitSpecifier = "sourceCommitSpecifier"
            case targetBranch = "targetBranch"
        }
    }

    public struct MergeBranchesBySquashOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commitId", required: false, type: .string), 
            AWSShapeMember(label: "treeId", required: false, type: .string)
        ]
        /// The commit ID of the merge in the destination or target branch.
        public let commitId: String?
        /// The tree ID of the merge in the destination or target branch.
        public let treeId: String?

        public init(commitId: String? = nil, treeId: String? = nil) {
            self.commitId = commitId
            self.treeId = treeId
        }

        private enum CodingKeys: String, CodingKey {
            case commitId = "commitId"
            case treeId = "treeId"
        }
    }

    public struct MergeBranchesByThreeWayInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorName", required: false, type: .string), 
            AWSShapeMember(label: "commitMessage", required: false, type: .string), 
            AWSShapeMember(label: "conflictDetailLevel", required: false, type: .enum), 
            AWSShapeMember(label: "conflictResolution", required: false, type: .structure), 
            AWSShapeMember(label: "conflictResolutionStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "destinationCommitSpecifier", required: true, type: .string), 
            AWSShapeMember(label: "email", required: false, type: .string), 
            AWSShapeMember(label: "keepEmptyFolders", required: false, type: .boolean), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "sourceCommitSpecifier", required: true, type: .string), 
            AWSShapeMember(label: "targetBranch", required: false, type: .string)
        ]
        /// The name of the author who created the commit. This information will be used as both the author and committer for the commit.
        public let authorName: String?
        /// The commit message to include in the commit information for the merge.
        public let commitMessage: String?
        /// The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.
        public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
        /// A list of inputs to use when resolving conflicts during a merge if AUTOMERGE is chosen as the conflict resolution strategy.
        public let conflictResolution: ConflictResolution?
        /// Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.
        public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let destinationCommitSpecifier: String
        /// The email address of the person merging the branches. This information will be used in the commit information for the merge.
        public let email: String?
        /// If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file will be created for empty folders. The default is false.
        public let keepEmptyFolders: Bool?
        /// The name of the repository where you want to merge two branches.
        public let repositoryName: String
        /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.
        public let sourceCommitSpecifier: String
        /// The branch where the merge will be applied. 
        public let targetBranch: String?

        public init(authorName: String? = nil, commitMessage: String? = nil, conflictDetailLevel: ConflictDetailLevelTypeEnum? = nil, conflictResolution: ConflictResolution? = nil, conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum? = nil, destinationCommitSpecifier: String, email: String? = nil, keepEmptyFolders: Bool? = nil, repositoryName: String, sourceCommitSpecifier: String, targetBranch: String? = nil) {
            self.authorName = authorName
            self.commitMessage = commitMessage
            self.conflictDetailLevel = conflictDetailLevel
            self.conflictResolution = conflictResolution
            self.conflictResolutionStrategy = conflictResolutionStrategy
            self.destinationCommitSpecifier = destinationCommitSpecifier
            self.email = email
            self.keepEmptyFolders = keepEmptyFolders
            self.repositoryName = repositoryName
            self.sourceCommitSpecifier = sourceCommitSpecifier
            self.targetBranch = targetBranch
        }

        private enum CodingKeys: String, CodingKey {
            case authorName = "authorName"
            case commitMessage = "commitMessage"
            case conflictDetailLevel = "conflictDetailLevel"
            case conflictResolution = "conflictResolution"
            case conflictResolutionStrategy = "conflictResolutionStrategy"
            case destinationCommitSpecifier = "destinationCommitSpecifier"
            case email = "email"
            case keepEmptyFolders = "keepEmptyFolders"
            case repositoryName = "repositoryName"
            case sourceCommitSpecifier = "sourceCommitSpecifier"
            case targetBranch = "targetBranch"
        }
    }

    public struct MergeBranchesByThreeWayOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commitId", required: false, type: .string), 
            AWSShapeMember(label: "treeId", required: false, type: .string)
        ]
        /// The commit ID of the merge in the destination or target branch.
        public let commitId: String?
        /// The tree ID of the merge in the destination or target branch.
        public let treeId: String?

        public init(commitId: String? = nil, treeId: String? = nil) {
            self.commitId = commitId
            self.treeId = treeId
        }

        private enum CodingKeys: String, CodingKey {
            case commitId = "commitId"
            case treeId = "treeId"
        }
    }

    public struct MergeHunk: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "base", required: false, type: .structure), 
            AWSShapeMember(label: "destination", required: false, type: .structure), 
            AWSShapeMember(label: "isConflict", required: false, type: .boolean), 
            AWSShapeMember(label: "source", required: false, type: .structure)
        ]
        /// Information about the merge hunk in the base of a merge or pull request.
        public let base: MergeHunkDetail?
        /// Information about the merge hunk in the destination of a merge or pull request.
        public let destination: MergeHunkDetail?
        /// A Boolean value indicating whether a combination of hunks contains a conflict. Conflicts occur when the same file or the same lines in a file were modified in both the source and destination of a merge or pull request. Valid values include true, false, and null. This will be true when the hunk represents a conflict and one or more files contains a line conflict. File mode conflicts in a merge will not set this to be true.
        public let isConflict: Bool?
        /// Information about the merge hunk in the source of a merge or pull request.
        public let source: MergeHunkDetail?

        public init(base: MergeHunkDetail? = nil, destination: MergeHunkDetail? = nil, isConflict: Bool? = nil, source: MergeHunkDetail? = nil) {
            self.base = base
            self.destination = destination
            self.isConflict = isConflict
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case base = "base"
            case destination = "destination"
            case isConflict = "isConflict"
            case source = "source"
        }
    }

    public struct MergeHunkDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endLine", required: false, type: .integer), 
            AWSShapeMember(label: "hunkContent", required: false, type: .string), 
            AWSShapeMember(label: "startLine", required: false, type: .integer)
        ]
        /// The end position of the hunk in the merge result.
        public let endLine: Int32?
        /// The base-64 encoded content of the hunk merged region that might or might not contain a conflict.
        public let hunkContent: String?
        /// The start position of the hunk in the merge result.
        public let startLine: Int32?

        public init(endLine: Int32? = nil, hunkContent: String? = nil, startLine: Int32? = nil) {
            self.endLine = endLine
            self.hunkContent = hunkContent
            self.startLine = startLine
        }

        private enum CodingKeys: String, CodingKey {
            case endLine = "endLine"
            case hunkContent = "hunkContent"
            case startLine = "startLine"
        }
    }

    public struct MergeMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "isMerged", required: false, type: .boolean), 
            AWSShapeMember(label: "mergeCommitId", required: false, type: .string), 
            AWSShapeMember(label: "mergeOption", required: false, type: .enum), 
            AWSShapeMember(label: "mergedBy", required: false, type: .string)
        ]
        /// A Boolean value indicating whether the merge has been made.
        public let isMerged: Bool?
        /// The commit ID for the merge commit, if any.
        public let mergeCommitId: String?
        /// The merge strategy used in the merge.
        public let mergeOption: MergeOptionTypeEnum?
        /// The Amazon Resource Name (ARN) of the user who merged the branches.
        public let mergedBy: String?

        public init(isMerged: Bool? = nil, mergeCommitId: String? = nil, mergeOption: MergeOptionTypeEnum? = nil, mergedBy: String? = nil) {
            self.isMerged = isMerged
            self.mergeCommitId = mergeCommitId
            self.mergeOption = mergeOption
            self.mergedBy = mergedBy
        }

        private enum CodingKeys: String, CodingKey {
            case isMerged = "isMerged"
            case mergeCommitId = "mergeCommitId"
            case mergeOption = "mergeOption"
            case mergedBy = "mergedBy"
        }
    }

    public struct MergeOperations: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destination", required: false, type: .enum), 
            AWSShapeMember(label: "source", required: false, type: .enum)
        ]
        /// The operation on a file in the destination of a merge or pull request.
        public let destination: ChangeTypeEnum?
        /// The operation on a file (add, modify, or delete) of a file in the source of a merge or pull request.
        public let source: ChangeTypeEnum?

        public init(destination: ChangeTypeEnum? = nil, source: ChangeTypeEnum? = nil) {
            self.destination = destination
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "destination"
            case source = "source"
        }
    }

    public enum MergeOptionTypeEnum: String, CustomStringConvertible, Codable {
        case fastForwardMerge = "FAST_FORWARD_MERGE"
        case squashMerge = "SQUASH_MERGE"
        case threeWayMerge = "THREE_WAY_MERGE"
        public var description: String { return self.rawValue }
    }

    public struct MergePullRequestByFastForwardInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pullRequestId", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "sourceCommitId", required: false, type: .string)
        ]
        /// The system-generated ID of the pull request. To get this ID, use ListPullRequests.
        public let pullRequestId: String
        /// The name of the repository where the pull request was created.
        public let repositoryName: String
        /// The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.
        public let sourceCommitId: String?

        public init(pullRequestId: String, repositoryName: String, sourceCommitId: String? = nil) {
            self.pullRequestId = pullRequestId
            self.repositoryName = repositoryName
            self.sourceCommitId = sourceCommitId
        }

        private enum CodingKeys: String, CodingKey {
            case pullRequestId = "pullRequestId"
            case repositoryName = "repositoryName"
            case sourceCommitId = "sourceCommitId"
        }
    }

    public struct MergePullRequestByFastForwardOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pullRequest", required: false, type: .structure)
        ]
        /// Information about the specified pull request, including information about the merge.
        public let pullRequest: PullRequest?

        public init(pullRequest: PullRequest? = nil) {
            self.pullRequest = pullRequest
        }

        private enum CodingKeys: String, CodingKey {
            case pullRequest = "pullRequest"
        }
    }

    public struct MergePullRequestBySquashInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorName", required: false, type: .string), 
            AWSShapeMember(label: "commitMessage", required: false, type: .string), 
            AWSShapeMember(label: "conflictDetailLevel", required: false, type: .enum), 
            AWSShapeMember(label: "conflictResolution", required: false, type: .structure), 
            AWSShapeMember(label: "conflictResolutionStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "email", required: false, type: .string), 
            AWSShapeMember(label: "keepEmptyFolders", required: false, type: .boolean), 
            AWSShapeMember(label: "pullRequestId", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "sourceCommitId", required: false, type: .string)
        ]
        /// The name of the author who created the commit. This information will be used as both the author and committer for the commit.
        public let authorName: String?
        /// The commit message to include in the commit information for the merge.
        public let commitMessage: String?
        /// The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.
        public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
        /// A list of inputs to use when resolving conflicts during a merge if AUTOMERGE is chosen as the conflict resolution strategy.
        public let conflictResolution: ConflictResolution?
        /// Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.
        public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
        /// The email address of the person merging the branches. This information will be used in the commit information for the merge.
        public let email: String?
        /// If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file will be created for empty folders. The default is false.
        public let keepEmptyFolders: Bool?
        /// The system-generated ID of the pull request. To get this ID, use ListPullRequests.
        public let pullRequestId: String
        /// The name of the repository where the pull request was created.
        public let repositoryName: String
        /// The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.
        public let sourceCommitId: String?

        public init(authorName: String? = nil, commitMessage: String? = nil, conflictDetailLevel: ConflictDetailLevelTypeEnum? = nil, conflictResolution: ConflictResolution? = nil, conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum? = nil, email: String? = nil, keepEmptyFolders: Bool? = nil, pullRequestId: String, repositoryName: String, sourceCommitId: String? = nil) {
            self.authorName = authorName
            self.commitMessage = commitMessage
            self.conflictDetailLevel = conflictDetailLevel
            self.conflictResolution = conflictResolution
            self.conflictResolutionStrategy = conflictResolutionStrategy
            self.email = email
            self.keepEmptyFolders = keepEmptyFolders
            self.pullRequestId = pullRequestId
            self.repositoryName = repositoryName
            self.sourceCommitId = sourceCommitId
        }

        private enum CodingKeys: String, CodingKey {
            case authorName = "authorName"
            case commitMessage = "commitMessage"
            case conflictDetailLevel = "conflictDetailLevel"
            case conflictResolution = "conflictResolution"
            case conflictResolutionStrategy = "conflictResolutionStrategy"
            case email = "email"
            case keepEmptyFolders = "keepEmptyFolders"
            case pullRequestId = "pullRequestId"
            case repositoryName = "repositoryName"
            case sourceCommitId = "sourceCommitId"
        }
    }

    public struct MergePullRequestBySquashOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pullRequest", required: false, type: .structure)
        ]
        public let pullRequest: PullRequest?

        public init(pullRequest: PullRequest? = nil) {
            self.pullRequest = pullRequest
        }

        private enum CodingKeys: String, CodingKey {
            case pullRequest = "pullRequest"
        }
    }

    public struct MergePullRequestByThreeWayInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorName", required: false, type: .string), 
            AWSShapeMember(label: "commitMessage", required: false, type: .string), 
            AWSShapeMember(label: "conflictDetailLevel", required: false, type: .enum), 
            AWSShapeMember(label: "conflictResolution", required: false, type: .structure), 
            AWSShapeMember(label: "conflictResolutionStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "email", required: false, type: .string), 
            AWSShapeMember(label: "keepEmptyFolders", required: false, type: .boolean), 
            AWSShapeMember(label: "pullRequestId", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "sourceCommitId", required: false, type: .string)
        ]
        /// The name of the author who created the commit. This information will be used as both the author and committer for the commit.
        public let authorName: String?
        /// The commit message to include in the commit information for the merge.
        public let commitMessage: String?
        /// The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.
        public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
        /// A list of inputs to use when resolving conflicts during a merge if AUTOMERGE is chosen as the conflict resolution strategy.
        public let conflictResolution: ConflictResolution?
        /// Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.
        public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
        /// The email address of the person merging the branches. This information will be used in the commit information for the merge.
        public let email: String?
        /// If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file will be created for empty folders. The default is false.
        public let keepEmptyFolders: Bool?
        /// The system-generated ID of the pull request. To get this ID, use ListPullRequests.
        public let pullRequestId: String
        /// The name of the repository where the pull request was created.
        public let repositoryName: String
        /// The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.
        public let sourceCommitId: String?

        public init(authorName: String? = nil, commitMessage: String? = nil, conflictDetailLevel: ConflictDetailLevelTypeEnum? = nil, conflictResolution: ConflictResolution? = nil, conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum? = nil, email: String? = nil, keepEmptyFolders: Bool? = nil, pullRequestId: String, repositoryName: String, sourceCommitId: String? = nil) {
            self.authorName = authorName
            self.commitMessage = commitMessage
            self.conflictDetailLevel = conflictDetailLevel
            self.conflictResolution = conflictResolution
            self.conflictResolutionStrategy = conflictResolutionStrategy
            self.email = email
            self.keepEmptyFolders = keepEmptyFolders
            self.pullRequestId = pullRequestId
            self.repositoryName = repositoryName
            self.sourceCommitId = sourceCommitId
        }

        private enum CodingKeys: String, CodingKey {
            case authorName = "authorName"
            case commitMessage = "commitMessage"
            case conflictDetailLevel = "conflictDetailLevel"
            case conflictResolution = "conflictResolution"
            case conflictResolutionStrategy = "conflictResolutionStrategy"
            case email = "email"
            case keepEmptyFolders = "keepEmptyFolders"
            case pullRequestId = "pullRequestId"
            case repositoryName = "repositoryName"
            case sourceCommitId = "sourceCommitId"
        }
    }

    public struct MergePullRequestByThreeWayOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pullRequest", required: false, type: .structure)
        ]
        public let pullRequest: PullRequest?

        public init(pullRequest: PullRequest? = nil) {
            self.pullRequest = pullRequest
        }

        private enum CodingKeys: String, CodingKey {
            case pullRequest = "pullRequest"
        }
    }

    public enum ObjectTypeEnum: String, CustomStringConvertible, Codable {
        case file = "FILE"
        case directory = "DIRECTORY"
        case gitLink = "GIT_LINK"
        case symbolicLink = "SYMBOLIC_LINK"
        public var description: String { return self.rawValue }
    }

    public struct ObjectTypes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "base", required: false, type: .enum), 
            AWSShapeMember(label: "destination", required: false, type: .enum), 
            AWSShapeMember(label: "source", required: false, type: .enum)
        ]
        /// The type of the object in the base commit of the merge.
        public let base: ObjectTypeEnum?
        /// The type of the object in the destination branch.
        public let destination: ObjectTypeEnum?
        /// The type of the object in the source branch.
        public let source: ObjectTypeEnum?

        public init(base: ObjectTypeEnum? = nil, destination: ObjectTypeEnum? = nil, source: ObjectTypeEnum? = nil) {
            self.base = base
            self.destination = destination
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case base = "base"
            case destination = "destination"
            case source = "source"
        }
    }

    public enum OrderEnum: String, CustomStringConvertible, Codable {
        case ascending = "ascending"
        case descending = "descending"
        public var description: String { return self.rawValue }
    }

    public struct PostCommentForComparedCommitInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "afterCommitId", required: true, type: .string), 
            AWSShapeMember(label: "beforeCommitId", required: false, type: .string), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "content", required: true, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// To establish the directionality of the comparison, the full commit ID of the 'after' commit.
        public let afterCommitId: String
        /// To establish the directionality of the comparison, the full commit ID of the 'before' commit.  This is required for commenting on any commit unless that commit is the initial commit. 
        public let beforeCommitId: String?
        /// A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request will return information about the initial request that used that token.
        public let clientRequestToken: String?
        /// The content of the comment you want to make.
        public let content: String
        /// The location of the comparison where you want to comment.
        public let location: Location?
        /// The name of the repository where you want to post a comment on the comparison between commits.
        public let repositoryName: String

        public init(afterCommitId: String, beforeCommitId: String? = nil, clientRequestToken: String? = nil, content: String, location: Location? = nil, repositoryName: String) {
            self.afterCommitId = afterCommitId
            self.beforeCommitId = beforeCommitId
            self.clientRequestToken = clientRequestToken
            self.content = content
            self.location = location
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case afterCommitId = "afterCommitId"
            case beforeCommitId = "beforeCommitId"
            case clientRequestToken = "clientRequestToken"
            case content = "content"
            case location = "location"
            case repositoryName = "repositoryName"
        }
    }

    public struct PostCommentForComparedCommitOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "afterBlobId", required: false, type: .string), 
            AWSShapeMember(label: "afterCommitId", required: false, type: .string), 
            AWSShapeMember(label: "beforeBlobId", required: false, type: .string), 
            AWSShapeMember(label: "beforeCommitId", required: false, type: .string), 
            AWSShapeMember(label: "comment", required: false, type: .structure), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "repositoryName", required: false, type: .string)
        ]
        /// In the directionality you established, the blob ID of the 'after' blob.
        public let afterBlobId: String?
        /// In the directionality you established, the full commit ID of the 'after' commit.
        public let afterCommitId: String?
        /// In the directionality you established, the blob ID of the 'before' blob.
        public let beforeBlobId: String?
        /// In the directionality you established, the full commit ID of the 'before' commit.
        public let beforeCommitId: String?
        /// The content of the comment you posted.
        public let comment: Comment?
        /// The location of the comment in the comparison between the two commits.
        public let location: Location?
        /// The name of the repository where you posted a comment on the comparison between commits.
        public let repositoryName: String?

        public init(afterBlobId: String? = nil, afterCommitId: String? = nil, beforeBlobId: String? = nil, beforeCommitId: String? = nil, comment: Comment? = nil, location: Location? = nil, repositoryName: String? = nil) {
            self.afterBlobId = afterBlobId
            self.afterCommitId = afterCommitId
            self.beforeBlobId = beforeBlobId
            self.beforeCommitId = beforeCommitId
            self.comment = comment
            self.location = location
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case afterBlobId = "afterBlobId"
            case afterCommitId = "afterCommitId"
            case beforeBlobId = "beforeBlobId"
            case beforeCommitId = "beforeCommitId"
            case comment = "comment"
            case location = "location"
            case repositoryName = "repositoryName"
        }
    }

    public struct PostCommentForPullRequestInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "afterCommitId", required: true, type: .string), 
            AWSShapeMember(label: "beforeCommitId", required: true, type: .string), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "content", required: true, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "pullRequestId", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// The full commit ID of the commit in the source branch that is the current tip of the branch for the pull request when you post the comment.
        public let afterCommitId: String
        /// The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.
        public let beforeCommitId: String
        /// A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request will return information about the initial request that used that token.
        public let clientRequestToken: String?
        /// The content of your comment on the change.
        public let content: String
        /// The location of the change where you want to post your comment. If no location is provided, the comment will be posted as a general comment on the pull request difference between the before commit ID and the after commit ID.
        public let location: Location?
        /// The system-generated ID of the pull request. To get this ID, use ListPullRequests.
        public let pullRequestId: String
        /// The name of the repository where you want to post a comment on a pull request.
        public let repositoryName: String

        public init(afterCommitId: String, beforeCommitId: String, clientRequestToken: String? = nil, content: String, location: Location? = nil, pullRequestId: String, repositoryName: String) {
            self.afterCommitId = afterCommitId
            self.beforeCommitId = beforeCommitId
            self.clientRequestToken = clientRequestToken
            self.content = content
            self.location = location
            self.pullRequestId = pullRequestId
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case afterCommitId = "afterCommitId"
            case beforeCommitId = "beforeCommitId"
            case clientRequestToken = "clientRequestToken"
            case content = "content"
            case location = "location"
            case pullRequestId = "pullRequestId"
            case repositoryName = "repositoryName"
        }
    }

    public struct PostCommentForPullRequestOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "afterBlobId", required: false, type: .string), 
            AWSShapeMember(label: "afterCommitId", required: false, type: .string), 
            AWSShapeMember(label: "beforeBlobId", required: false, type: .string), 
            AWSShapeMember(label: "beforeCommitId", required: false, type: .string), 
            AWSShapeMember(label: "comment", required: false, type: .structure), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "pullRequestId", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: false, type: .string)
        ]
        /// In the directionality of the pull request, the blob ID of the 'after' blob.
        public let afterBlobId: String?
        /// The full commit ID of the commit in the destination branch where the pull request will be merged.
        public let afterCommitId: String?
        /// In the directionality of the pull request, the blob ID of the 'before' blob.
        public let beforeBlobId: String?
        /// The full commit ID of the commit in the source branch used to create the pull request, or in the case of an updated pull request, the full commit ID of the commit used to update the pull request.
        public let beforeCommitId: String?
        /// The content of the comment you posted.
        public let comment: Comment?
        /// The location of the change where you posted your comment.
        public let location: Location?
        /// The system-generated ID of the pull request. 
        public let pullRequestId: String?
        /// The name of the repository where you posted a comment on a pull request.
        public let repositoryName: String?

        public init(afterBlobId: String? = nil, afterCommitId: String? = nil, beforeBlobId: String? = nil, beforeCommitId: String? = nil, comment: Comment? = nil, location: Location? = nil, pullRequestId: String? = nil, repositoryName: String? = nil) {
            self.afterBlobId = afterBlobId
            self.afterCommitId = afterCommitId
            self.beforeBlobId = beforeBlobId
            self.beforeCommitId = beforeCommitId
            self.comment = comment
            self.location = location
            self.pullRequestId = pullRequestId
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case afterBlobId = "afterBlobId"
            case afterCommitId = "afterCommitId"
            case beforeBlobId = "beforeBlobId"
            case beforeCommitId = "beforeCommitId"
            case comment = "comment"
            case location = "location"
            case pullRequestId = "pullRequestId"
            case repositoryName = "repositoryName"
        }
    }

    public struct PostCommentReplyInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "content", required: true, type: .string), 
            AWSShapeMember(label: "inReplyTo", required: true, type: .string)
        ]
        /// A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request will return information about the initial request that used that token.
        public let clientRequestToken: String?
        /// The contents of your reply to a comment.
        public let content: String
        /// The system-generated ID of the comment to which you want to reply. To get this ID, use GetCommentsForComparedCommit or GetCommentsForPullRequest.
        public let inReplyTo: String

        public init(clientRequestToken: String? = nil, content: String, inReplyTo: String) {
            self.clientRequestToken = clientRequestToken
            self.content = content
            self.inReplyTo = inReplyTo
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case content = "content"
            case inReplyTo = "inReplyTo"
        }
    }

    public struct PostCommentReplyOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "comment", required: false, type: .structure)
        ]
        /// Information about the reply to a comment.
        public let comment: Comment?

        public init(comment: Comment? = nil) {
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "comment"
        }
    }

    public struct PullRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorArn", required: false, type: .string), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "lastActivityDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "pullRequestId", required: false, type: .string), 
            AWSShapeMember(label: "pullRequestStatus", required: false, type: .enum), 
            AWSShapeMember(label: "pullRequestTargets", required: false, type: .list), 
            AWSShapeMember(label: "title", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the user who created the pull request.
        public let authorArn: String?
        /// A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request will return information about the initial request that used that token.
        public let clientRequestToken: String?
        /// The date and time the pull request was originally created, in timestamp format.
        public let creationDate: TimeStamp?
        /// The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.
        public let description: String?
        /// The day and time of the last user or system activity on the pull request, in timestamp format.
        public let lastActivityDate: TimeStamp?
        /// The system-generated ID of the pull request. 
        public let pullRequestId: String?
        /// The status of the pull request. Pull request status can only change from OPEN to CLOSED.
        public let pullRequestStatus: PullRequestStatusEnum?
        /// The targets of the pull request, including the source branch and destination branch for the pull request.
        public let pullRequestTargets: [PullRequestTarget]?
        /// The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.
        public let title: String?

        public init(authorArn: String? = nil, clientRequestToken: String? = nil, creationDate: TimeStamp? = nil, description: String? = nil, lastActivityDate: TimeStamp? = nil, pullRequestId: String? = nil, pullRequestStatus: PullRequestStatusEnum? = nil, pullRequestTargets: [PullRequestTarget]? = nil, title: String? = nil) {
            self.authorArn = authorArn
            self.clientRequestToken = clientRequestToken
            self.creationDate = creationDate
            self.description = description
            self.lastActivityDate = lastActivityDate
            self.pullRequestId = pullRequestId
            self.pullRequestStatus = pullRequestStatus
            self.pullRequestTargets = pullRequestTargets
            self.title = title
        }

        private enum CodingKeys: String, CodingKey {
            case authorArn = "authorArn"
            case clientRequestToken = "clientRequestToken"
            case creationDate = "creationDate"
            case description = "description"
            case lastActivityDate = "lastActivityDate"
            case pullRequestId = "pullRequestId"
            case pullRequestStatus = "pullRequestStatus"
            case pullRequestTargets = "pullRequestTargets"
            case title = "title"
        }
    }

    public struct PullRequestCreatedEventMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destinationCommitId", required: false, type: .string), 
            AWSShapeMember(label: "mergeBase", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: false, type: .string), 
            AWSShapeMember(label: "sourceCommitId", required: false, type: .string)
        ]
        /// The commit ID of the tip of the branch specified as the destination branch when the pull request was created.
        public let destinationCommitId: String?
        /// The commit ID of the most recent commit that the source branch and the destination branch have in common.
        public let mergeBase: String?
        /// The name of the repository where the pull request was created.
        public let repositoryName: String?
        /// The commit ID on the source branch used when the pull request was created.
        public let sourceCommitId: String?

        public init(destinationCommitId: String? = nil, mergeBase: String? = nil, repositoryName: String? = nil, sourceCommitId: String? = nil) {
            self.destinationCommitId = destinationCommitId
            self.mergeBase = mergeBase
            self.repositoryName = repositoryName
            self.sourceCommitId = sourceCommitId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCommitId = "destinationCommitId"
            case mergeBase = "mergeBase"
            case repositoryName = "repositoryName"
            case sourceCommitId = "sourceCommitId"
        }
    }

    public struct PullRequestEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actorArn", required: false, type: .string), 
            AWSShapeMember(label: "eventDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "pullRequestCreatedEventMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "pullRequestEventType", required: false, type: .enum), 
            AWSShapeMember(label: "pullRequestId", required: false, type: .string), 
            AWSShapeMember(label: "pullRequestMergedStateChangedEventMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "pullRequestSourceReferenceUpdatedEventMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "pullRequestStatusChangedEventMetadata", required: false, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include updating the pull request with additional commits or changing the status of a pull request.
        public let actorArn: String?
        /// The day and time of the pull request event, in timestamp format.
        public let eventDate: TimeStamp?
        /// Information about the source and destination branches for the pull request.
        public let pullRequestCreatedEventMetadata: PullRequestCreatedEventMetadata?
        /// The type of the pull request event, for example a status change event (PULL_REQUEST_STATUS_CHANGED) or update event (PULL_REQUEST_SOURCE_REFERENCE_UPDATED).
        public let pullRequestEventType: PullRequestEventType?
        /// The system-generated ID of the pull request.
        public let pullRequestId: String?
        /// Information about the change in mergability state for the pull request event.
        public let pullRequestMergedStateChangedEventMetadata: PullRequestMergedStateChangedEventMetadata?
        /// Information about the updated source branch for the pull request event. 
        public let pullRequestSourceReferenceUpdatedEventMetadata: PullRequestSourceReferenceUpdatedEventMetadata?
        /// Information about the change in status for the pull request event.
        public let pullRequestStatusChangedEventMetadata: PullRequestStatusChangedEventMetadata?

        public init(actorArn: String? = nil, eventDate: TimeStamp? = nil, pullRequestCreatedEventMetadata: PullRequestCreatedEventMetadata? = nil, pullRequestEventType: PullRequestEventType? = nil, pullRequestId: String? = nil, pullRequestMergedStateChangedEventMetadata: PullRequestMergedStateChangedEventMetadata? = nil, pullRequestSourceReferenceUpdatedEventMetadata: PullRequestSourceReferenceUpdatedEventMetadata? = nil, pullRequestStatusChangedEventMetadata: PullRequestStatusChangedEventMetadata? = nil) {
            self.actorArn = actorArn
            self.eventDate = eventDate
            self.pullRequestCreatedEventMetadata = pullRequestCreatedEventMetadata
            self.pullRequestEventType = pullRequestEventType
            self.pullRequestId = pullRequestId
            self.pullRequestMergedStateChangedEventMetadata = pullRequestMergedStateChangedEventMetadata
            self.pullRequestSourceReferenceUpdatedEventMetadata = pullRequestSourceReferenceUpdatedEventMetadata
            self.pullRequestStatusChangedEventMetadata = pullRequestStatusChangedEventMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case actorArn = "actorArn"
            case eventDate = "eventDate"
            case pullRequestCreatedEventMetadata = "pullRequestCreatedEventMetadata"
            case pullRequestEventType = "pullRequestEventType"
            case pullRequestId = "pullRequestId"
            case pullRequestMergedStateChangedEventMetadata = "pullRequestMergedStateChangedEventMetadata"
            case pullRequestSourceReferenceUpdatedEventMetadata = "pullRequestSourceReferenceUpdatedEventMetadata"
            case pullRequestStatusChangedEventMetadata = "pullRequestStatusChangedEventMetadata"
        }
    }

    public enum PullRequestEventType: String, CustomStringConvertible, Codable {
        case pullRequestCreated = "PULL_REQUEST_CREATED"
        case pullRequestStatusChanged = "PULL_REQUEST_STATUS_CHANGED"
        case pullRequestSourceReferenceUpdated = "PULL_REQUEST_SOURCE_REFERENCE_UPDATED"
        case pullRequestMergeStateChanged = "PULL_REQUEST_MERGE_STATE_CHANGED"
        public var description: String { return self.rawValue }
    }

    public struct PullRequestMergedStateChangedEventMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destinationReference", required: false, type: .string), 
            AWSShapeMember(label: "mergeMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "repositoryName", required: false, type: .string)
        ]
        /// The name of the branch that the pull request will be merged into.
        public let destinationReference: String?
        /// Information about the merge state change event.
        public let mergeMetadata: MergeMetadata?
        /// The name of the repository where the pull request was created.
        public let repositoryName: String?

        public init(destinationReference: String? = nil, mergeMetadata: MergeMetadata? = nil, repositoryName: String? = nil) {
            self.destinationReference = destinationReference
            self.mergeMetadata = mergeMetadata
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case destinationReference = "destinationReference"
            case mergeMetadata = "mergeMetadata"
            case repositoryName = "repositoryName"
        }
    }

    public struct PullRequestSourceReferenceUpdatedEventMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "afterCommitId", required: false, type: .string), 
            AWSShapeMember(label: "beforeCommitId", required: false, type: .string), 
            AWSShapeMember(label: "mergeBase", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: false, type: .string)
        ]
        /// The full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated.
        public let afterCommitId: String?
        /// The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated.
        public let beforeCommitId: String?
        /// The commit ID of the most recent commit that the source branch and the destination branch have in common.
        public let mergeBase: String?
        /// The name of the repository where the pull request was updated.
        public let repositoryName: String?

        public init(afterCommitId: String? = nil, beforeCommitId: String? = nil, mergeBase: String? = nil, repositoryName: String? = nil) {
            self.afterCommitId = afterCommitId
            self.beforeCommitId = beforeCommitId
            self.mergeBase = mergeBase
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case afterCommitId = "afterCommitId"
            case beforeCommitId = "beforeCommitId"
            case mergeBase = "mergeBase"
            case repositoryName = "repositoryName"
        }
    }

    public struct PullRequestStatusChangedEventMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pullRequestStatus", required: false, type: .enum)
        ]
        /// The changed status of the pull request.
        public let pullRequestStatus: PullRequestStatusEnum?

        public init(pullRequestStatus: PullRequestStatusEnum? = nil) {
            self.pullRequestStatus = pullRequestStatus
        }

        private enum CodingKeys: String, CodingKey {
            case pullRequestStatus = "pullRequestStatus"
        }
    }

    public enum PullRequestStatusEnum: String, CustomStringConvertible, Codable {
        case open = "OPEN"
        case closed = "CLOSED"
        public var description: String { return self.rawValue }
    }

    public struct PullRequestTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destinationCommit", required: false, type: .string), 
            AWSShapeMember(label: "destinationReference", required: false, type: .string), 
            AWSShapeMember(label: "mergeBase", required: false, type: .string), 
            AWSShapeMember(label: "mergeMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "repositoryName", required: false, type: .string), 
            AWSShapeMember(label: "sourceCommit", required: false, type: .string), 
            AWSShapeMember(label: "sourceReference", required: false, type: .string)
        ]
        /// The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.
        public let destinationCommit: String?
        /// The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. 
        public let destinationReference: String?
        /// The commit ID of the most recent commit that the source branch and the destination branch have in common.
        public let mergeBase: String?
        /// Returns metadata about the state of the merge, including whether the merge has been made.
        public let mergeMetadata: MergeMetadata?
        /// The name of the repository that contains the pull request source and destination branches.
        public let repositoryName: String?
        /// The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID will change to reflect the new tip of the branch.
        public let sourceCommit: String?
        /// The branch of the repository that contains the changes for the pull request. Also known as the source branch.
        public let sourceReference: String?

        public init(destinationCommit: String? = nil, destinationReference: String? = nil, mergeBase: String? = nil, mergeMetadata: MergeMetadata? = nil, repositoryName: String? = nil, sourceCommit: String? = nil, sourceReference: String? = nil) {
            self.destinationCommit = destinationCommit
            self.destinationReference = destinationReference
            self.mergeBase = mergeBase
            self.mergeMetadata = mergeMetadata
            self.repositoryName = repositoryName
            self.sourceCommit = sourceCommit
            self.sourceReference = sourceReference
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCommit = "destinationCommit"
            case destinationReference = "destinationReference"
            case mergeBase = "mergeBase"
            case mergeMetadata = "mergeMetadata"
            case repositoryName = "repositoryName"
            case sourceCommit = "sourceCommit"
            case sourceReference = "sourceReference"
        }
    }

    public struct PutFileEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fileContent", required: false, type: .blob), 
            AWSShapeMember(label: "fileMode", required: false, type: .enum), 
            AWSShapeMember(label: "filePath", required: true, type: .string), 
            AWSShapeMember(label: "sourceFile", required: false, type: .structure)
        ]
        /// The content of the file, if a source file is not specified.
        public let fileContent: Data?
        /// The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.
        public let fileMode: FileModeTypeEnum?
        /// The full path to the file in the repository, including the name of the file.
        public let filePath: String
        /// The name and full path of the file that contains the changes you want to make as part of the commit, if you are not providing the file content directly.
        public let sourceFile: SourceFileSpecifier?

        public init(fileContent: Data? = nil, fileMode: FileModeTypeEnum? = nil, filePath: String, sourceFile: SourceFileSpecifier? = nil) {
            self.fileContent = fileContent
            self.fileMode = fileMode
            self.filePath = filePath
            self.sourceFile = sourceFile
        }

        private enum CodingKeys: String, CodingKey {
            case fileContent = "fileContent"
            case fileMode = "fileMode"
            case filePath = "filePath"
            case sourceFile = "sourceFile"
        }
    }

    public struct PutFileInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "branchName", required: true, type: .string), 
            AWSShapeMember(label: "commitMessage", required: false, type: .string), 
            AWSShapeMember(label: "email", required: false, type: .string), 
            AWSShapeMember(label: "fileContent", required: true, type: .blob), 
            AWSShapeMember(label: "fileMode", required: false, type: .enum), 
            AWSShapeMember(label: "filePath", required: true, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "parentCommitId", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// The name of the branch where you want to add or update the file. If this is an empty repository, this branch will be created.
        public let branchName: String
        /// A message about why this file was added or updated. While optional, adding a message is strongly encouraged in order to provide a more useful commit history for your repository.
        public let commitMessage: String?
        /// An email address for the person adding or updating the file.
        public let email: String?
        /// The content of the file, in binary object format. 
        public let fileContent: Data
        /// The file mode permissions of the blob. Valid file mode permissions are listed below.
        public let fileMode: FileModeTypeEnum?
        /// The name of the file you want to add or update, including the relative path to the file in the repository.  If the path does not currently exist in the repository, the path will be created as part of adding the file. 
        public let filePath: String
        /// The name of the person adding or updating the file. While optional, adding a name is strongly encouraged in order to provide a more useful commit history for your repository.
        public let name: String?
        /// The full commit ID of the head commit in the branch where you want to add or update the file. If this is an empty repository, no commit ID is required. If this is not an empty repository, a commit ID is required.  The commit ID must match the ID of the head commit at the time of the operation, or an error will occur, and the file will not be added or updated.
        public let parentCommitId: String?
        /// The name of the repository where you want to add or update the file.
        public let repositoryName: String

        public init(branchName: String, commitMessage: String? = nil, email: String? = nil, fileContent: Data, fileMode: FileModeTypeEnum? = nil, filePath: String, name: String? = nil, parentCommitId: String? = nil, repositoryName: String) {
            self.branchName = branchName
            self.commitMessage = commitMessage
            self.email = email
            self.fileContent = fileContent
            self.fileMode = fileMode
            self.filePath = filePath
            self.name = name
            self.parentCommitId = parentCommitId
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case branchName = "branchName"
            case commitMessage = "commitMessage"
            case email = "email"
            case fileContent = "fileContent"
            case fileMode = "fileMode"
            case filePath = "filePath"
            case name = "name"
            case parentCommitId = "parentCommitId"
            case repositoryName = "repositoryName"
        }
    }

    public struct PutFileOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "blobId", required: true, type: .string), 
            AWSShapeMember(label: "commitId", required: true, type: .string), 
            AWSShapeMember(label: "treeId", required: true, type: .string)
        ]
        /// The ID of the blob, which is its SHA-1 pointer.
        public let blobId: String
        /// The full SHA of the commit that contains this file change.
        public let commitId: String
        /// The full SHA-1 pointer of the tree information for the commit that contains this file change.
        public let treeId: String

        public init(blobId: String, commitId: String, treeId: String) {
            self.blobId = blobId
            self.commitId = commitId
            self.treeId = treeId
        }

        private enum CodingKeys: String, CodingKey {
            case blobId = "blobId"
            case commitId = "commitId"
            case treeId = "treeId"
        }
    }

    public struct PutRepositoryTriggersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "triggers", required: true, type: .list)
        ]
        /// The name of the repository where you want to create or update the trigger.
        public let repositoryName: String
        /// The JSON block of configuration information for each trigger.
        public let triggers: [RepositoryTrigger]

        public init(repositoryName: String, triggers: [RepositoryTrigger]) {
            self.repositoryName = repositoryName
            self.triggers = triggers
        }

        private enum CodingKeys: String, CodingKey {
            case repositoryName = "repositoryName"
            case triggers = "triggers"
        }
    }

    public struct PutRepositoryTriggersOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "configurationId", required: false, type: .string)
        ]
        /// The system-generated unique ID for the create or update operation.
        public let configurationId: String?

        public init(configurationId: String? = nil) {
            self.configurationId = configurationId
        }

        private enum CodingKeys: String, CodingKey {
            case configurationId = "configurationId"
        }
    }

    public enum RelativeFileVersionEnum: String, CustomStringConvertible, Codable {
        case before = "BEFORE"
        case after = "AFTER"
        public var description: String { return self.rawValue }
    }

    public struct ReplaceContentEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "content", required: false, type: .blob), 
            AWSShapeMember(label: "fileMode", required: false, type: .enum), 
            AWSShapeMember(label: "filePath", required: true, type: .string), 
            AWSShapeMember(label: "replacementType", required: true, type: .enum)
        ]
        /// The base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.
        public let content: Data?
        /// The file mode to apply during conflict resoltion.
        public let fileMode: FileModeTypeEnum?
        /// The path of the conflicting file.
        public let filePath: String
        /// The replacement type to use when determining how to resolve the conflict.
        public let replacementType: ReplacementTypeEnum

        public init(content: Data? = nil, fileMode: FileModeTypeEnum? = nil, filePath: String, replacementType: ReplacementTypeEnum) {
            self.content = content
            self.fileMode = fileMode
            self.filePath = filePath
            self.replacementType = replacementType
        }

        private enum CodingKeys: String, CodingKey {
            case content = "content"
            case fileMode = "fileMode"
            case filePath = "filePath"
            case replacementType = "replacementType"
        }
    }

    public enum ReplacementTypeEnum: String, CustomStringConvertible, Codable {
        case keepBase = "KEEP_BASE"
        case keepSource = "KEEP_SOURCE"
        case keepDestination = "KEEP_DESTINATION"
        case useNewContent = "USE_NEW_CONTENT"
        public var description: String { return self.rawValue }
    }

    public struct RepositoryMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "accountId", required: false, type: .string), 
            AWSShapeMember(label: "cloneUrlHttp", required: false, type: .string), 
            AWSShapeMember(label: "cloneUrlSsh", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "defaultBranch", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "repositoryDescription", required: false, type: .string), 
            AWSShapeMember(label: "repositoryId", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the repository.
        public let arn: String?
        /// The ID of the AWS account associated with the repository.
        public let accountId: String?
        /// The URL to use for cloning the repository over HTTPS.
        public let cloneUrlHttp: String?
        /// The URL to use for cloning the repository over SSH.
        public let cloneUrlSsh: String?
        /// The date and time the repository was created, in timestamp format.
        public let creationDate: TimeStamp?
        /// The repository's default branch name.
        public let defaultBranch: String?
        /// The date and time the repository was last modified, in timestamp format.
        public let lastModifiedDate: TimeStamp?
        /// A comment or description about the repository.
        public let repositoryDescription: String?
        /// The ID of the repository.
        public let repositoryId: String?
        /// The repository's name.
        public let repositoryName: String?

        public init(accountId: String? = nil, arn: String? = nil, cloneUrlHttp: String? = nil, cloneUrlSsh: String? = nil, creationDate: TimeStamp? = nil, defaultBranch: String? = nil, lastModifiedDate: TimeStamp? = nil, repositoryDescription: String? = nil, repositoryId: String? = nil, repositoryName: String? = nil) {
            self.arn = arn
            self.accountId = accountId
            self.cloneUrlHttp = cloneUrlHttp
            self.cloneUrlSsh = cloneUrlSsh
            self.creationDate = creationDate
            self.defaultBranch = defaultBranch
            self.lastModifiedDate = lastModifiedDate
            self.repositoryDescription = repositoryDescription
            self.repositoryId = repositoryId
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case accountId = "accountId"
            case cloneUrlHttp = "cloneUrlHttp"
            case cloneUrlSsh = "cloneUrlSsh"
            case creationDate = "creationDate"
            case defaultBranch = "defaultBranch"
            case lastModifiedDate = "lastModifiedDate"
            case repositoryDescription = "repositoryDescription"
            case repositoryId = "repositoryId"
            case repositoryName = "repositoryName"
        }
    }

    public struct RepositoryNameIdPair: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "repositoryId", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: false, type: .string)
        ]
        /// The ID associated with the repository.
        public let repositoryId: String?
        /// The name associated with the repository.
        public let repositoryName: String?

        public init(repositoryId: String? = nil, repositoryName: String? = nil) {
            self.repositoryId = repositoryId
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case repositoryId = "repositoryId"
            case repositoryName = "repositoryName"
        }
    }

    public struct RepositoryTrigger: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "branches", required: false, type: .list), 
            AWSShapeMember(label: "customData", required: false, type: .string), 
            AWSShapeMember(label: "destinationArn", required: true, type: .string), 
            AWSShapeMember(label: "events", required: true, type: .list), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The branches that will be included in the trigger configuration. If you specify an empty array, the trigger will apply to all branches.  While no content is required in the array, you must include the array itself. 
        public let branches: [String]?
        /// Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.
        public let customData: String?
        /// The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).
        public let destinationArn: String
        /// The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS).   The valid value "all" cannot be used with any other values. 
        public let events: [RepositoryTriggerEventEnum]
        /// The name of the trigger.
        public let name: String

        public init(branches: [String]? = nil, customData: String? = nil, destinationArn: String, events: [RepositoryTriggerEventEnum], name: String) {
            self.branches = branches
            self.customData = customData
            self.destinationArn = destinationArn
            self.events = events
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case branches = "branches"
            case customData = "customData"
            case destinationArn = "destinationArn"
            case events = "events"
            case name = "name"
        }
    }

    public enum RepositoryTriggerEventEnum: String, CustomStringConvertible, Codable {
        case all = "all"
        case updatereference = "updateReference"
        case createreference = "createReference"
        case deletereference = "deleteReference"
        public var description: String { return self.rawValue }
    }

    public struct RepositoryTriggerExecutionFailure: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failureMessage", required: false, type: .string), 
            AWSShapeMember(label: "trigger", required: false, type: .string)
        ]
        /// Additional message information about the trigger that did not run.
        public let failureMessage: String?
        /// The name of the trigger that did not run.
        public let trigger: String?

        public init(failureMessage: String? = nil, trigger: String? = nil) {
            self.failureMessage = failureMessage
            self.trigger = trigger
        }

        private enum CodingKeys: String, CodingKey {
            case failureMessage = "failureMessage"
            case trigger = "trigger"
        }
    }

    public struct SetFileModeEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fileMode", required: true, type: .enum), 
            AWSShapeMember(label: "filePath", required: true, type: .string)
        ]
        /// The file mode for the file.
        public let fileMode: FileModeTypeEnum
        /// The full path to the file, including the name of the file.
        public let filePath: String

        public init(fileMode: FileModeTypeEnum, filePath: String) {
            self.fileMode = fileMode
            self.filePath = filePath
        }

        private enum CodingKeys: String, CodingKey {
            case fileMode = "fileMode"
            case filePath = "filePath"
        }
    }

    public enum SortByEnum: String, CustomStringConvertible, Codable {
        case repositoryname = "repositoryName"
        case lastmodifieddate = "lastModifiedDate"
        public var description: String { return self.rawValue }
    }

    public struct SourceFileSpecifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "filePath", required: true, type: .string), 
            AWSShapeMember(label: "isMove", required: false, type: .boolean)
        ]
        /// The full path to the file, including the name of the file.
        public let filePath: String
        /// Whether to remove the source file from the parent commit.
        public let isMove: Bool?

        public init(filePath: String, isMove: Bool? = nil) {
            self.filePath = filePath
            self.isMove = isMove
        }

        private enum CodingKeys: String, CodingKey {
            case filePath = "filePath"
            case isMove = "isMove"
        }
    }

    public struct SubModule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "absolutePath", required: false, type: .string), 
            AWSShapeMember(label: "commitId", required: false, type: .string), 
            AWSShapeMember(label: "relativePath", required: false, type: .string)
        ]
        /// The fully qualified path to the folder that contains the reference to the submodule.
        public let absolutePath: String?
        /// The commit ID that contains the reference to the submodule.
        public let commitId: String?
        /// The relative path of the submodule from the folder where the query originated.
        public let relativePath: String?

        public init(absolutePath: String? = nil, commitId: String? = nil, relativePath: String? = nil) {
            self.absolutePath = absolutePath
            self.commitId = commitId
            self.relativePath = relativePath
        }

        private enum CodingKeys: String, CodingKey {
            case absolutePath = "absolutePath"
            case commitId = "commitId"
            case relativePath = "relativePath"
        }
    }

    public struct SymbolicLink: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "absolutePath", required: false, type: .string), 
            AWSShapeMember(label: "blobId", required: false, type: .string), 
            AWSShapeMember(label: "fileMode", required: false, type: .enum), 
            AWSShapeMember(label: "relativePath", required: false, type: .string)
        ]
        /// The fully-qualified path to the folder that contains the symbolic link.
        public let absolutePath: String?
        /// The blob ID that contains the information about the symbolic link.
        public let blobId: String?
        /// The file mode permissions of the blob that cotains information about the symbolic link.
        public let fileMode: FileModeTypeEnum?
        /// The relative path of the symbolic link from the folder where the query originated.
        public let relativePath: String?

        public init(absolutePath: String? = nil, blobId: String? = nil, fileMode: FileModeTypeEnum? = nil, relativePath: String? = nil) {
            self.absolutePath = absolutePath
            self.blobId = blobId
            self.fileMode = fileMode
            self.relativePath = relativePath
        }

        private enum CodingKeys: String, CodingKey {
            case absolutePath = "absolutePath"
            case blobId = "blobId"
            case fileMode = "fileMode"
            case relativePath = "relativePath"
        }
    }

    public struct TagResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .map)
        ]
        /// The Amazon Resource Name (ARN) of the resource to which you want to add or update tags.
        public let resourceArn: String
        /// The key-value pair to use when tagging this repository.
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct Target: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destinationReference", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "sourceReference", required: true, type: .string)
        ]
        /// The branch of the repository where the pull request changes will be merged into. Also known as the destination branch.
        public let destinationReference: String?
        /// The name of the repository that contains the pull request.
        public let repositoryName: String
        /// The branch of the repository that contains the changes for the pull request. Also known as the source branch.
        public let sourceReference: String

        public init(destinationReference: String? = nil, repositoryName: String, sourceReference: String) {
            self.destinationReference = destinationReference
            self.repositoryName = repositoryName
            self.sourceReference = sourceReference
        }

        private enum CodingKeys: String, CodingKey {
            case destinationReference = "destinationReference"
            case repositoryName = "repositoryName"
            case sourceReference = "sourceReference"
        }
    }

    public struct TestRepositoryTriggersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "repositoryName", required: true, type: .string), 
            AWSShapeMember(label: "triggers", required: true, type: .list)
        ]
        /// The name of the repository in which to test the triggers.
        public let repositoryName: String
        /// The list of triggers to test.
        public let triggers: [RepositoryTrigger]

        public init(repositoryName: String, triggers: [RepositoryTrigger]) {
            self.repositoryName = repositoryName
            self.triggers = triggers
        }

        private enum CodingKeys: String, CodingKey {
            case repositoryName = "repositoryName"
            case triggers = "triggers"
        }
    }

    public struct TestRepositoryTriggersOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedExecutions", required: false, type: .list), 
            AWSShapeMember(label: "successfulExecutions", required: false, type: .list)
        ]
        /// The list of triggers that were not able to be tested. This list provides the names of the triggers that could not be tested, separated by commas.
        public let failedExecutions: [RepositoryTriggerExecutionFailure]?
        /// The list of triggers that were successfully tested. This list provides the names of the triggers that were successfully tested, separated by commas.
        public let successfulExecutions: [String]?

        public init(failedExecutions: [RepositoryTriggerExecutionFailure]? = nil, successfulExecutions: [String]? = nil) {
            self.failedExecutions = failedExecutions
            self.successfulExecutions = successfulExecutions
        }

        private enum CodingKeys: String, CodingKey {
            case failedExecutions = "failedExecutions"
            case successfulExecutions = "successfulExecutions"
        }
    }

    public struct UntagResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "tagKeys", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource to which you want to remove tags.
        public let resourceArn: String
        /// The tag key for each tag that you want to remove from the resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UpdateCommentInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "commentId", required: true, type: .string), 
            AWSShapeMember(label: "content", required: true, type: .string)
        ]
        /// The system-generated ID of the comment you want to update. To get this ID, use GetCommentsForComparedCommit or GetCommentsForPullRequest.
        public let commentId: String
        /// The updated content with which you want to replace the existing content of the comment.
        public let content: String

        public init(commentId: String, content: String) {
            self.commentId = commentId
            self.content = content
        }

        private enum CodingKeys: String, CodingKey {
            case commentId = "commentId"
            case content = "content"
        }
    }

    public struct UpdateCommentOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "comment", required: false, type: .structure)
        ]
        /// Information about the updated comment.
        public let comment: Comment?

        public init(comment: Comment? = nil) {
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "comment"
        }
    }

    public struct UpdateDefaultBranchInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "defaultBranchName", required: true, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// The name of the branch to set as the default.
        public let defaultBranchName: String
        /// The name of the repository to set or change the default branch for.
        public let repositoryName: String

        public init(defaultBranchName: String, repositoryName: String) {
            self.defaultBranchName = defaultBranchName
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case defaultBranchName = "defaultBranchName"
            case repositoryName = "repositoryName"
        }
    }

    public struct UpdatePullRequestDescriptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: true, type: .string), 
            AWSShapeMember(label: "pullRequestId", required: true, type: .string)
        ]
        /// The updated content of the description for the pull request. This content will replace the existing description.
        public let description: String
        /// The system-generated ID of the pull request. To get this ID, use ListPullRequests.
        public let pullRequestId: String

        public init(description: String, pullRequestId: String) {
            self.description = description
            self.pullRequestId = pullRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case pullRequestId = "pullRequestId"
        }
    }

    public struct UpdatePullRequestDescriptionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pullRequest", required: true, type: .structure)
        ]
        /// Information about the updated pull request.
        public let pullRequest: PullRequest

        public init(pullRequest: PullRequest) {
            self.pullRequest = pullRequest
        }

        private enum CodingKeys: String, CodingKey {
            case pullRequest = "pullRequest"
        }
    }

    public struct UpdatePullRequestStatusInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pullRequestId", required: true, type: .string), 
            AWSShapeMember(label: "pullRequestStatus", required: true, type: .enum)
        ]
        /// The system-generated ID of the pull request. To get this ID, use ListPullRequests.
        public let pullRequestId: String
        /// The status of the pull request. The only valid operations are to update the status from OPEN to OPEN, OPEN to CLOSED or from from CLOSED to CLOSED.
        public let pullRequestStatus: PullRequestStatusEnum

        public init(pullRequestId: String, pullRequestStatus: PullRequestStatusEnum) {
            self.pullRequestId = pullRequestId
            self.pullRequestStatus = pullRequestStatus
        }

        private enum CodingKeys: String, CodingKey {
            case pullRequestId = "pullRequestId"
            case pullRequestStatus = "pullRequestStatus"
        }
    }

    public struct UpdatePullRequestStatusOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pullRequest", required: true, type: .structure)
        ]
        /// Information about the pull request.
        public let pullRequest: PullRequest

        public init(pullRequest: PullRequest) {
            self.pullRequest = pullRequest
        }

        private enum CodingKeys: String, CodingKey {
            case pullRequest = "pullRequest"
        }
    }

    public struct UpdatePullRequestTitleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pullRequestId", required: true, type: .string), 
            AWSShapeMember(label: "title", required: true, type: .string)
        ]
        /// The system-generated ID of the pull request. To get this ID, use ListPullRequests.
        public let pullRequestId: String
        /// The updated title of the pull request. This will replace the existing title.
        public let title: String

        public init(pullRequestId: String, title: String) {
            self.pullRequestId = pullRequestId
            self.title = title
        }

        private enum CodingKeys: String, CodingKey {
            case pullRequestId = "pullRequestId"
            case title = "title"
        }
    }

    public struct UpdatePullRequestTitleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pullRequest", required: true, type: .structure)
        ]
        /// Information about the updated pull request.
        public let pullRequest: PullRequest

        public init(pullRequest: PullRequest) {
            self.pullRequest = pullRequest
        }

        private enum CodingKeys: String, CodingKey {
            case pullRequest = "pullRequest"
        }
    }

    public struct UpdateRepositoryDescriptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "repositoryDescription", required: false, type: .string), 
            AWSShapeMember(label: "repositoryName", required: true, type: .string)
        ]
        /// The new comment or description for the specified repository. Repository descriptions are limited to 1,000 characters.
        public let repositoryDescription: String?
        /// The name of the repository to set or change the comment or description for.
        public let repositoryName: String

        public init(repositoryDescription: String? = nil, repositoryName: String) {
            self.repositoryDescription = repositoryDescription
            self.repositoryName = repositoryName
        }

        private enum CodingKeys: String, CodingKey {
            case repositoryDescription = "repositoryDescription"
            case repositoryName = "repositoryName"
        }
    }

    public struct UpdateRepositoryNameInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "newName", required: true, type: .string), 
            AWSShapeMember(label: "oldName", required: true, type: .string)
        ]
        /// The new name for the repository.
        public let newName: String
        /// The existing name of the repository.
        public let oldName: String

        public init(newName: String, oldName: String) {
            self.newName = newName
            self.oldName = oldName
        }

        private enum CodingKeys: String, CodingKey {
            case newName = "newName"
            case oldName = "oldName"
        }
    }

    public struct UserInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "date", required: false, type: .string), 
            AWSShapeMember(label: "email", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The date when the specified commit was commited, in timestamp format with GMT offset.
        public let date: String?
        /// The email address associated with the user who made the commit, if any.
        public let email: String?
        /// The name of the user who made the specified commit.
        public let name: String?

        public init(date: String? = nil, email: String? = nil, name: String? = nil) {
            self.date = date
            self.email = email
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case date = "date"
            case email = "email"
            case name = "name"
        }
    }

}