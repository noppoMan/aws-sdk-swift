// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore
import NIO

/**
AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. AWS IoT Events Data API commands enable you to send inputs to detectors, list detectors, and view or update a detector's status.
*/
public struct IoTEventsData {

    let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            service: "data.iotevents",
            serviceProtocol: ServiceProtocol(type: .restjson),
            apiVersion: "2018-10-23",
            endpoint: endpoint,
            middlewares: [],
            possibleErrorTypes: [IoTEventsDataErrorType.self]
        )
    }

    ///  Sends a set of messages to the AWS IoT Events system. Each message payload is transformed into the input you specify ("inputName") and ingested into any detectors that monitor that input. If multiple messages are sent, the order in which the messages are processed isn't guaranteed. To guarantee ordering, you must send messages one at a time and wait for a successful response.
    public func batchPutMessage(_ input: BatchPutMessageRequest) throws -> Future<BatchPutMessageResponse> {
        return try client.send(operation: "BatchPutMessage", path: "/inputs/messages", httpMethod: "POST", input: input)
    }

    ///  Updates the state, variable values, and timer settings of one or more detectors (instances) of a specified detector model.
    public func batchUpdateDetector(_ input: BatchUpdateDetectorRequest) throws -> Future<BatchUpdateDetectorResponse> {
        return try client.send(operation: "BatchUpdateDetector", path: "/detectors", httpMethod: "POST", input: input)
    }

    ///  Returns information about the specified detector (instance).
    public func describeDetector(_ input: DescribeDetectorRequest) throws -> Future<DescribeDetectorResponse> {
        return try client.send(operation: "DescribeDetector", path: "/detectors/{detectorModelName}/keyValues/", httpMethod: "GET", input: input)
    }

    ///  Lists detectors (the instances of a detector model).
    public func listDetectors(_ input: ListDetectorsRequest) throws -> Future<ListDetectorsResponse> {
        return try client.send(operation: "ListDetectors", path: "/detectors/{detectorModelName}", httpMethod: "GET", input: input)
    }


}