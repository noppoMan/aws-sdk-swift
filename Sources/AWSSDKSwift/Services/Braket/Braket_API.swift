// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

@_exported import AWSSDKSwiftCore
import Foundation
import NIO

/**
Client object for interacting with AWS Braket service.

The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.
*/
public struct Braket {

    //MARK: Member variables

    public let client: AWSClient

    //MARK: Initialization

    /// Initialize the Braket client
    /// - parameters:
    ///     - accessKeyId: Public access key provided by AWS
    ///     - secretAccessKey: Private access key provided by AWS
    ///     - sessionToken: Token provided by STS.AssumeRole() which allows access to another AWS account
    ///     - region: Region of server you want to communicate with
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middlewares: Array of middlewares to apply to requests and responses
    ///     - eventLoopGroupProvider: EventLoopGroup to use. Use `useAWSClientShared` if the client shall manage its own EventLoopGroup.
    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil, middlewares: [AWSServiceMiddleware] = [], eventLoopGroupProvider: AWSClient.EventLoopGroupProvider = .useAWSClientShared) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            sessionToken: sessionToken,
            region: region,
            service: "braket",
            serviceProtocol: ServiceProtocol(type: .restjson, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2019-09-01",
            endpoint: endpoint,
            middlewares: middlewares,
            possibleErrorTypes: [BraketErrorType.self],
            eventLoopGroupProvider: eventLoopGroupProvider
        )
    }
    
    //MARK: API Calls

    ///  Cancels the specified task.
    public func cancelQuantumTask(_ input: CancelQuantumTaskRequest) -> EventLoopFuture<CancelQuantumTaskResponse> {
        return client.send(operation: "CancelQuantumTask", path: "/quantum-task/{quantumTaskArn}/cancel", httpMethod: "PUT", input: input)
    }

    ///  Creates a quantum task.
    public func createQuantumTask(_ input: CreateQuantumTaskRequest) -> EventLoopFuture<CreateQuantumTaskResponse> {
        return client.send(operation: "CreateQuantumTask", path: "/quantum-task", httpMethod: "POST", input: input)
    }

    ///  Retrieves the devices available in Amazon Braket.
    public func getDevice(_ input: GetDeviceRequest) -> EventLoopFuture<GetDeviceResponse> {
        return client.send(operation: "GetDevice", path: "/device/{deviceArn}", httpMethod: "GET", input: input)
    }

    ///  Retrieves the specified quantum task.
    public func getQuantumTask(_ input: GetQuantumTaskRequest) -> EventLoopFuture<GetQuantumTaskResponse> {
        return client.send(operation: "GetQuantumTask", path: "/quantum-task/{quantumTaskArn}", httpMethod: "GET", input: input)
    }

    ///  Searches for devices using the specified filters.
    public func searchDevices(_ input: SearchDevicesRequest) -> EventLoopFuture<SearchDevicesResponse> {
        return client.send(operation: "SearchDevices", path: "/devices", httpMethod: "POST", input: input)
    }

    ///  Searches for tasks that match the specified filter values.
    public func searchQuantumTasks(_ input: SearchQuantumTasksRequest) -> EventLoopFuture<SearchQuantumTasksResponse> {
        return client.send(operation: "SearchQuantumTasks", path: "/quantum-tasks", httpMethod: "POST", input: input)
    }
}
