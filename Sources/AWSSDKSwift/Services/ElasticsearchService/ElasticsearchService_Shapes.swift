// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension ElasticsearchService {
    //MARK: Enums

    public enum DeploymentStatus: String, CustomStringConvertible, Codable {
        case pendingUpdate = "PENDING_UPDATE"
        case inProgress = "IN_PROGRESS"
        case completed = "COMPLETED"
        case notEligible = "NOT_ELIGIBLE"
        case eligible = "ELIGIBLE"
        public var description: String { return self.rawValue }
    }

    public enum ESPartitionInstanceType: String, CustomStringConvertible, Codable {
        case m3MediumElasticsearch = "m3.medium.elasticsearch"
        case m3LargeElasticsearch = "m3.large.elasticsearch"
        case m3XlargeElasticsearch = "m3.xlarge.elasticsearch"
        case m32XlargeElasticsearch = "m3.2xlarge.elasticsearch"
        case m4LargeElasticsearch = "m4.large.elasticsearch"
        case m4XlargeElasticsearch = "m4.xlarge.elasticsearch"
        case m42XlargeElasticsearch = "m4.2xlarge.elasticsearch"
        case m44XlargeElasticsearch = "m4.4xlarge.elasticsearch"
        case m410XlargeElasticsearch = "m4.10xlarge.elasticsearch"
        case m5LargeElasticsearch = "m5.large.elasticsearch"
        case m5XlargeElasticsearch = "m5.xlarge.elasticsearch"
        case m52XlargeElasticsearch = "m5.2xlarge.elasticsearch"
        case m54XlargeElasticsearch = "m5.4xlarge.elasticsearch"
        case m512XlargeElasticsearch = "m5.12xlarge.elasticsearch"
        case r5LargeElasticsearch = "r5.large.elasticsearch"
        case r5XlargeElasticsearch = "r5.xlarge.elasticsearch"
        case r52XlargeElasticsearch = "r5.2xlarge.elasticsearch"
        case r54XlargeElasticsearch = "r5.4xlarge.elasticsearch"
        case r512XlargeElasticsearch = "r5.12xlarge.elasticsearch"
        case c5LargeElasticsearch = "c5.large.elasticsearch"
        case c5XlargeElasticsearch = "c5.xlarge.elasticsearch"
        case c52XlargeElasticsearch = "c5.2xlarge.elasticsearch"
        case c54XlargeElasticsearch = "c5.4xlarge.elasticsearch"
        case c59XlargeElasticsearch = "c5.9xlarge.elasticsearch"
        case c518XlargeElasticsearch = "c5.18xlarge.elasticsearch"
        case ultrawarm1MediumElasticsearch = "ultrawarm1.medium.elasticsearch"
        case ultrawarm1LargeElasticsearch = "ultrawarm1.large.elasticsearch"
        case t2MicroElasticsearch = "t2.micro.elasticsearch"
        case t2SmallElasticsearch = "t2.small.elasticsearch"
        case t2MediumElasticsearch = "t2.medium.elasticsearch"
        case r3LargeElasticsearch = "r3.large.elasticsearch"
        case r3XlargeElasticsearch = "r3.xlarge.elasticsearch"
        case r32XlargeElasticsearch = "r3.2xlarge.elasticsearch"
        case r34XlargeElasticsearch = "r3.4xlarge.elasticsearch"
        case r38XlargeElasticsearch = "r3.8xlarge.elasticsearch"
        case i2XlargeElasticsearch = "i2.xlarge.elasticsearch"
        case i22XlargeElasticsearch = "i2.2xlarge.elasticsearch"
        case d2XlargeElasticsearch = "d2.xlarge.elasticsearch"
        case d22XlargeElasticsearch = "d2.2xlarge.elasticsearch"
        case d24XlargeElasticsearch = "d2.4xlarge.elasticsearch"
        case d28XlargeElasticsearch = "d2.8xlarge.elasticsearch"
        case c4LargeElasticsearch = "c4.large.elasticsearch"
        case c4XlargeElasticsearch = "c4.xlarge.elasticsearch"
        case c42XlargeElasticsearch = "c4.2xlarge.elasticsearch"
        case c44XlargeElasticsearch = "c4.4xlarge.elasticsearch"
        case c48XlargeElasticsearch = "c4.8xlarge.elasticsearch"
        case r4LargeElasticsearch = "r4.large.elasticsearch"
        case r4XlargeElasticsearch = "r4.xlarge.elasticsearch"
        case r42XlargeElasticsearch = "r4.2xlarge.elasticsearch"
        case r44XlargeElasticsearch = "r4.4xlarge.elasticsearch"
        case r48XlargeElasticsearch = "r4.8xlarge.elasticsearch"
        case r416XlargeElasticsearch = "r4.16xlarge.elasticsearch"
        case i3LargeElasticsearch = "i3.large.elasticsearch"
        case i3XlargeElasticsearch = "i3.xlarge.elasticsearch"
        case i32XlargeElasticsearch = "i3.2xlarge.elasticsearch"
        case i34XlargeElasticsearch = "i3.4xlarge.elasticsearch"
        case i38XlargeElasticsearch = "i3.8xlarge.elasticsearch"
        case i316XlargeElasticsearch = "i3.16xlarge.elasticsearch"
        public var description: String { return self.rawValue }
    }

    public enum ESWarmPartitionInstanceType: String, CustomStringConvertible, Codable {
        case ultrawarm1MediumElasticsearch = "ultrawarm1.medium.elasticsearch"
        case ultrawarm1LargeElasticsearch = "ultrawarm1.large.elasticsearch"
        public var description: String { return self.rawValue }
    }

    public enum LogType: String, CustomStringConvertible, Codable {
        case indexSlowLogs = "INDEX_SLOW_LOGS"
        case searchSlowLogs = "SEARCH_SLOW_LOGS"
        case esApplicationLogs = "ES_APPLICATION_LOGS"
        public var description: String { return self.rawValue }
    }

    public enum OptionState: String, CustomStringConvertible, Codable {
        case requiresindexdocuments = "RequiresIndexDocuments"
        case processing = "Processing"
        case active = "Active"
        public var description: String { return self.rawValue }
    }

    public enum ReservedElasticsearchInstancePaymentOption: String, CustomStringConvertible, Codable {
        case allUpfront = "ALL_UPFRONT"
        case partialUpfront = "PARTIAL_UPFRONT"
        case noUpfront = "NO_UPFRONT"
        public var description: String { return self.rawValue }
    }

    public enum TLSSecurityPolicy: String, CustomStringConvertible, Codable {
        case policyMinTls10201907 = "Policy-Min-TLS-1-0-2019-07"
        case policyMinTls12201907 = "Policy-Min-TLS-1-2-2019-07"
        public var description: String { return self.rawValue }
    }

    public enum UpgradeStatus: String, CustomStringConvertible, Codable {
        case inProgress = "IN_PROGRESS"
        case succeeded = "SUCCEEDED"
        case succeededWithIssues = "SUCCEEDED_WITH_ISSUES"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum UpgradeStep: String, CustomStringConvertible, Codable {
        case preUpgradeCheck = "PRE_UPGRADE_CHECK"
        case snapshot = "SNAPSHOT"
        case upgrade = "UPGRADE"
        public var description: String { return self.rawValue }
    }

    public enum VolumeType: String, CustomStringConvertible, Codable {
        case standard = "standard"
        case gp2 = "gp2"
        case io1 = "io1"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AccessPoliciesStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .string), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]

        /// The access policy configured for the Elasticsearch domain. Access policies may be resource-based, IP-based, or IAM-based. See  Configuring Access Policiesfor more information.
        public let options: String
        /// The status of the access policy for the Elasticsearch domain. See OptionStatus for the status information that's included. 
        public let status: OptionStatus

        public init(options: String, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct AddTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "TagList", required: true, type: .list)
        ]

        ///  Specify the ARN for which you want to add the tags.
        public let arn: String
        ///  List of Tag that need to be added for the Elasticsearch domain. 
        public let tagList: [Tag]

        public init(arn: String, tagList: [Tag]) {
            self.arn = arn
            self.tagList = tagList
        }

        public func validate(name: String) throws {
            try self.tagList.forEach {
                try $0.validate(name: "\(name).tagList[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case tagList = "TagList"
        }
    }

    public struct AdditionalLimit: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LimitName", required: false, type: .string), 
            AWSShapeMember(label: "LimitValues", required: false, type: .list)
        ]

        ///  Name of Additional Limit is specific to a given InstanceType and for each of it's  InstanceRole  etc.  Attributes and their details:   MaximumNumberOfDataNodesSupported This attribute will be present in Master node only to specify how much data nodes upto which given  ESPartitionInstanceType  can support as master node. MaximumNumberOfDataNodesWithoutMasterNode This attribute will be present in Data node only to specify how much data nodes of given  ESPartitionInstanceType  upto which you don't need any master nodes to govern them.  
        public let limitName: String?
        ///  Value for given  AdditionalLimit$LimitName  . 
        public let limitValues: [String]?

        public init(limitName: String? = nil, limitValues: [String]? = nil) {
            self.limitName = limitName
            self.limitValues = limitValues
        }

        private enum CodingKeys: String, CodingKey {
            case limitName = "LimitName"
            case limitValues = "LimitValues"
        }
    }

    public struct AdvancedOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .map), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]

        ///  Specifies the status of advanced options for the specified Elasticsearch domain.
        public let options: [String: String]
        ///  Specifies the status of OptionStatus for advanced options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: [String: String], status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct AdvancedSecurityOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "InternalUserDatabaseEnabled", required: false, type: .boolean)
        ]

        /// True if advanced security is enabled.
        public let enabled: Bool?
        /// True if the internal user database is enabled.
        public let internalUserDatabaseEnabled: Bool?

        public init(enabled: Bool? = nil, internalUserDatabaseEnabled: Bool? = nil) {
            self.enabled = enabled
            self.internalUserDatabaseEnabled = internalUserDatabaseEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case internalUserDatabaseEnabled = "InternalUserDatabaseEnabled"
        }
    }

    public struct AdvancedSecurityOptionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "InternalUserDatabaseEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "MasterUserOptions", required: false, type: .structure)
        ]

        /// True if advanced security is enabled.
        public let enabled: Bool?
        /// True if the internal user database is enabled.
        public let internalUserDatabaseEnabled: Bool?
        /// Credentials for the master user: username and password, ARN, or both.
        public let masterUserOptions: MasterUserOptions?

        public init(enabled: Bool? = nil, internalUserDatabaseEnabled: Bool? = nil, masterUserOptions: MasterUserOptions? = nil) {
            self.enabled = enabled
            self.internalUserDatabaseEnabled = internalUserDatabaseEnabled
            self.masterUserOptions = masterUserOptions
        }

        public func validate(name: String) throws {
            try self.masterUserOptions?.validate(name: "\(name).masterUserOptions")
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case internalUserDatabaseEnabled = "InternalUserDatabaseEnabled"
            case masterUserOptions = "MasterUserOptions"
        }
    }

    public struct AdvancedSecurityOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]

        ///  Specifies advanced security options for the specified Elasticsearch domain.
        public let options: AdvancedSecurityOptions
        ///  Status of the advanced security options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: AdvancedSecurityOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct CancelElasticsearchServiceSoftwareUpdateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: true, type: .string)
        ]

        /// The name of the domain that you want to stop the latest service software update on.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        public func validate(name: String) throws {
            try validate(self.domainName, name:"domainName", parent: name, max: 28)
            try validate(self.domainName, name:"domainName", parent: name, min: 3)
            try validate(self.domainName, name:"domainName", parent: name, pattern: "[a-z][a-z0-9\\-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct CancelElasticsearchServiceSoftwareUpdateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceSoftwareOptions", required: false, type: .structure)
        ]

        /// The current status of the Elasticsearch service software update.
        public let serviceSoftwareOptions: ServiceSoftwareOptions?

        public init(serviceSoftwareOptions: ServiceSoftwareOptions? = nil) {
            self.serviceSoftwareOptions = serviceSoftwareOptions
        }

        private enum CodingKeys: String, CodingKey {
            case serviceSoftwareOptions = "ServiceSoftwareOptions"
        }
    }

    public struct CognitoOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "IdentityPoolId", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]

        /// Specifies the option to enable Cognito for Kibana authentication.
        public let enabled: Bool?
        /// Specifies the Cognito identity pool ID for Kibana authentication.
        public let identityPoolId: String?
        /// Specifies the role ARN that provides Elasticsearch permissions for accessing Cognito resources.
        public let roleArn: String?
        /// Specifies the Cognito user pool ID for Kibana authentication.
        public let userPoolId: String?

        public init(enabled: Bool? = nil, identityPoolId: String? = nil, roleArn: String? = nil, userPoolId: String? = nil) {
            self.enabled = enabled
            self.identityPoolId = identityPoolId
            self.roleArn = roleArn
            self.userPoolId = userPoolId
        }

        public func validate(name: String) throws {
            try validate(self.identityPoolId, name:"identityPoolId", parent: name, max: 55)
            try validate(self.identityPoolId, name:"identityPoolId", parent: name, min: 1)
            try validate(self.identityPoolId, name:"identityPoolId", parent: name, pattern: "[\\w-]+:[0-9a-f-]+")
            try validate(self.roleArn, name:"roleArn", parent: name, max: 2048)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 20)
            try validate(self.userPoolId, name:"userPoolId", parent: name, max: 55)
            try validate(self.userPoolId, name:"userPoolId", parent: name, min: 1)
            try validate(self.userPoolId, name:"userPoolId", parent: name, pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case identityPoolId = "IdentityPoolId"
            case roleArn = "RoleArn"
            case userPoolId = "UserPoolId"
        }
    }

    public struct CognitoOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]

        /// Specifies the Cognito options for the specified Elasticsearch domain.
        public let options: CognitoOptions
        /// Specifies the status of the Cognito options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: CognitoOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct CompatibleVersionsMap: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceVersion", required: false, type: .string), 
            AWSShapeMember(label: "TargetVersions", required: false, type: .list)
        ]

        /// The current version of Elasticsearch on which a domain is.
        public let sourceVersion: String?
        public let targetVersions: [String]?

        public init(sourceVersion: String? = nil, targetVersions: [String]? = nil) {
            self.sourceVersion = sourceVersion
            self.targetVersions = targetVersions
        }

        private enum CodingKeys: String, CodingKey {
            case sourceVersion = "SourceVersion"
            case targetVersions = "TargetVersions"
        }
    }

    public struct CreateElasticsearchDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessPolicies", required: false, type: .string), 
            AWSShapeMember(label: "AdvancedOptions", required: false, type: .map), 
            AWSShapeMember(label: "AdvancedSecurityOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CognitoOptions", required: false, type: .structure), 
            AWSShapeMember(label: "DomainEndpointOptions", required: false, type: .structure), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "EBSOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchClusterConfig", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchVersion", required: false, type: .string), 
            AWSShapeMember(label: "EncryptionAtRestOptions", required: false, type: .structure), 
            AWSShapeMember(label: "LogPublishingOptions", required: false, type: .map), 
            AWSShapeMember(label: "NodeToNodeEncryptionOptions", required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotOptions", required: false, type: .structure), 
            AWSShapeMember(label: "VPCOptions", required: false, type: .structure)
        ]

        ///  IAM access policy as a JSON-formatted string.
        public let accessPolicies: String?
        ///  Option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See Configuration Advanced Options for more information.
        public let advancedOptions: [String: String]?
        /// Specifies advanced security options.
        public let advancedSecurityOptions: AdvancedSecurityOptionsInput?
        /// Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see Amazon Cognito Authentication for Kibana.
        public let cognitoOptions: CognitoOptions?
        /// Options to specify configuration that will be applied to the domain endpoint.
        public let domainEndpointOptions: DomainEndpointOptions?
        /// The name of the Elasticsearch domain that you are creating. Domain names are unique across the domains owned by an account within an AWS region. Domain names must start with a lowercase letter and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        public let domainName: String
        /// Options to enable, disable and specify the type and size of EBS storage volumes. 
        public let eBSOptions: EBSOptions?
        /// Configuration options for an Elasticsearch domain. Specifies the instance type and number of instances in the domain cluster. 
        public let elasticsearchClusterConfig: ElasticsearchClusterConfig?
        /// String of format X.Y to specify version for the Elasticsearch domain eg. "1.5" or "2.3". For more information, see Creating Elasticsearch Domains in the Amazon Elasticsearch Service Developer Guide.
        public let elasticsearchVersion: String?
        /// Specifies the Encryption At Rest Options.
        public let encryptionAtRestOptions: EncryptionAtRestOptions?
        /// Map of LogType and LogPublishingOption, each containing options to publish a given type of Elasticsearch log.
        public let logPublishingOptions: [LogType: LogPublishingOption]?
        /// Specifies the NodeToNodeEncryptionOptions.
        public let nodeToNodeEncryptionOptions: NodeToNodeEncryptionOptions?
        /// Option to set time, in UTC format, of the daily automated snapshot. Default value is 0 hours. 
        public let snapshotOptions: SnapshotOptions?
        /// Options to specify the subnets and security groups for VPC endpoint. For more information, see Creating a VPC in VPC Endpoints for Amazon Elasticsearch Service Domains
        public let vPCOptions: VPCOptions?

        public init(accessPolicies: String? = nil, advancedOptions: [String: String]? = nil, advancedSecurityOptions: AdvancedSecurityOptionsInput? = nil, cognitoOptions: CognitoOptions? = nil, domainEndpointOptions: DomainEndpointOptions? = nil, domainName: String, eBSOptions: EBSOptions? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfig? = nil, elasticsearchVersion: String? = nil, encryptionAtRestOptions: EncryptionAtRestOptions? = nil, logPublishingOptions: [LogType: LogPublishingOption]? = nil, nodeToNodeEncryptionOptions: NodeToNodeEncryptionOptions? = nil, snapshotOptions: SnapshotOptions? = nil, vPCOptions: VPCOptions? = nil) {
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.advancedSecurityOptions = advancedSecurityOptions
            self.cognitoOptions = cognitoOptions
            self.domainEndpointOptions = domainEndpointOptions
            self.domainName = domainName
            self.eBSOptions = eBSOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.elasticsearchVersion = elasticsearchVersion
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.logPublishingOptions = logPublishingOptions
            self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
            self.snapshotOptions = snapshotOptions
            self.vPCOptions = vPCOptions
        }

        public func validate(name: String) throws {
            try self.advancedSecurityOptions?.validate(name: "\(name).advancedSecurityOptions")
            try self.cognitoOptions?.validate(name: "\(name).cognitoOptions")
            try validate(self.domainName, name:"domainName", parent: name, max: 28)
            try validate(self.domainName, name:"domainName", parent: name, min: 3)
            try validate(self.domainName, name:"domainName", parent: name, pattern: "[a-z][a-z0-9\\-]+")
            try self.encryptionAtRestOptions?.validate(name: "\(name).encryptionAtRestOptions")
        }

        private enum CodingKeys: String, CodingKey {
            case accessPolicies = "AccessPolicies"
            case advancedOptions = "AdvancedOptions"
            case advancedSecurityOptions = "AdvancedSecurityOptions"
            case cognitoOptions = "CognitoOptions"
            case domainEndpointOptions = "DomainEndpointOptions"
            case domainName = "DomainName"
            case eBSOptions = "EBSOptions"
            case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
            case elasticsearchVersion = "ElasticsearchVersion"
            case encryptionAtRestOptions = "EncryptionAtRestOptions"
            case logPublishingOptions = "LogPublishingOptions"
            case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
            case snapshotOptions = "SnapshotOptions"
            case vPCOptions = "VPCOptions"
        }
    }

    public struct CreateElasticsearchDomainResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainStatus", required: false, type: .structure)
        ]

        /// The status of the newly created Elasticsearch domain. 
        public let domainStatus: ElasticsearchDomainStatus?

        public init(domainStatus: ElasticsearchDomainStatus? = nil) {
            self.domainStatus = domainStatus
        }

        private enum CodingKeys: String, CodingKey {
            case domainStatus = "DomainStatus"
        }
    }

    public struct DeleteElasticsearchDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "DomainName"), required: true, type: .string)
        ]

        /// The name of the Elasticsearch domain that you want to permanently delete.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        public func validate(name: String) throws {
            try validate(self.domainName, name:"domainName", parent: name, max: 28)
            try validate(self.domainName, name:"domainName", parent: name, min: 3)
            try validate(self.domainName, name:"domainName", parent: name, pattern: "[a-z][a-z0-9\\-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct DeleteElasticsearchDomainResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainStatus", required: false, type: .structure)
        ]

        /// The status of the Elasticsearch domain being deleted.
        public let domainStatus: ElasticsearchDomainStatus?

        public init(domainStatus: ElasticsearchDomainStatus? = nil) {
            self.domainStatus = domainStatus
        }

        private enum CodingKeys: String, CodingKey {
            case domainStatus = "DomainStatus"
        }
    }

    public struct DescribeElasticsearchDomainConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "DomainName"), required: true, type: .string)
        ]

        /// The Elasticsearch domain that you want to get information about.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        public func validate(name: String) throws {
            try validate(self.domainName, name:"domainName", parent: name, max: 28)
            try validate(self.domainName, name:"domainName", parent: name, min: 3)
            try validate(self.domainName, name:"domainName", parent: name, pattern: "[a-z][a-z0-9\\-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct DescribeElasticsearchDomainConfigResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainConfig", required: true, type: .structure)
        ]

        /// The configuration information of the domain requested in the DescribeElasticsearchDomainConfig request.
        public let domainConfig: ElasticsearchDomainConfig

        public init(domainConfig: ElasticsearchDomainConfig) {
            self.domainConfig = domainConfig
        }

        private enum CodingKeys: String, CodingKey {
            case domainConfig = "DomainConfig"
        }
    }

    public struct DescribeElasticsearchDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "DomainName"), required: true, type: .string)
        ]

        /// The name of the Elasticsearch domain for which you want information.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        public func validate(name: String) throws {
            try validate(self.domainName, name:"domainName", parent: name, max: 28)
            try validate(self.domainName, name:"domainName", parent: name, min: 3)
            try validate(self.domainName, name:"domainName", parent: name, pattern: "[a-z][a-z0-9\\-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct DescribeElasticsearchDomainResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainStatus", required: true, type: .structure)
        ]

        /// The current status of the Elasticsearch domain.
        public let domainStatus: ElasticsearchDomainStatus

        public init(domainStatus: ElasticsearchDomainStatus) {
            self.domainStatus = domainStatus
        }

        private enum CodingKeys: String, CodingKey {
            case domainStatus = "DomainStatus"
        }
    }

    public struct DescribeElasticsearchDomainsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainNames", required: true, type: .list)
        ]

        /// The Elasticsearch domains for which you want information.
        public let domainNames: [String]

        public init(domainNames: [String]) {
            self.domainNames = domainNames
        }

        public func validate(name: String) throws {
            try self.domainNames.forEach {
                try validate($0, name: "domainNames[]", parent: name, max: 28)
                try validate($0, name: "domainNames[]", parent: name, min: 3)
                try validate($0, name: "domainNames[]", parent: name, pattern: "[a-z][a-z0-9\\-]+")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case domainNames = "DomainNames"
        }
    }

    public struct DescribeElasticsearchDomainsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainStatusList", required: true, type: .list)
        ]

        /// The status of the domains requested in the DescribeElasticsearchDomains request.
        public let domainStatusList: [ElasticsearchDomainStatus]

        public init(domainStatusList: [ElasticsearchDomainStatus]) {
            self.domainStatusList = domainStatusList
        }

        private enum CodingKeys: String, CodingKey {
            case domainStatusList = "DomainStatusList"
        }
    }

    public struct DescribeElasticsearchInstanceTypeLimitsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .querystring(locationName: "domainName"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticsearchVersion", location: .uri(locationName: "ElasticsearchVersion"), required: true, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .uri(locationName: "InstanceType"), required: true, type: .enum)
        ]

        ///  DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for Elasticsearch  Limits  for existing domain. 
        public let domainName: String?
        ///  Version of Elasticsearch for which  Limits  are needed. 
        public let elasticsearchVersion: String
        ///  The instance type for an Elasticsearch cluster for which Elasticsearch  Limits  are needed. 
        public let instanceType: ESPartitionInstanceType

        public init(domainName: String? = nil, elasticsearchVersion: String, instanceType: ESPartitionInstanceType) {
            self.domainName = domainName
            self.elasticsearchVersion = elasticsearchVersion
            self.instanceType = instanceType
        }

        public func validate(name: String) throws {
            try validate(self.domainName, name:"domainName", parent: name, max: 28)
            try validate(self.domainName, name:"domainName", parent: name, min: 3)
            try validate(self.domainName, name:"domainName", parent: name, pattern: "[a-z][a-z0-9\\-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case elasticsearchVersion = "ElasticsearchVersion"
            case instanceType = "InstanceType"
        }
    }

    public struct DescribeElasticsearchInstanceTypeLimitsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LimitsByRole", required: false, type: .map)
        ]

        public let limitsByRole: [String: Limits]?

        public init(limitsByRole: [String: Limits]? = nil) {
            self.limitsByRole = limitsByRole
        }

        private enum CodingKeys: String, CodingKey {
            case limitsByRole = "LimitsByRole"
        }
    }

    public struct DescribeReservedElasticsearchInstanceOfferingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedElasticsearchInstanceOfferingId", location: .querystring(locationName: "offeringId"), required: false, type: .string)
        ]

        /// Set this value to limit the number of results returned. If not specified, defaults to 100.
        public let maxResults: Int?
        /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.
        public let nextToken: String?
        /// The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.
        public let reservedElasticsearchInstanceOfferingId: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, reservedElasticsearchInstanceOfferingId: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.reservedElasticsearchInstanceOfferingId, name:"reservedElasticsearchInstanceOfferingId", parent: name, pattern: "\\p{XDigit}{8}-\\p{XDigit}{4}-\\p{XDigit}{4}-\\p{XDigit}{4}-\\p{XDigit}{12}")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case reservedElasticsearchInstanceOfferingId = "offeringId"
        }
    }

    public struct DescribeReservedElasticsearchInstanceOfferingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ReservedElasticsearchInstanceOfferings", required: false, type: .list)
        ]

        /// Provides an identifier to allow retrieval of paginated results.
        public let nextToken: String?
        /// List of reserved Elasticsearch instance offerings
        public let reservedElasticsearchInstanceOfferings: [ReservedElasticsearchInstanceOffering]?

        public init(nextToken: String? = nil, reservedElasticsearchInstanceOfferings: [ReservedElasticsearchInstanceOffering]? = nil) {
            self.nextToken = nextToken
            self.reservedElasticsearchInstanceOfferings = reservedElasticsearchInstanceOfferings
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case reservedElasticsearchInstanceOfferings = "ReservedElasticsearchInstanceOfferings"
        }
    }

    public struct DescribeReservedElasticsearchInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedElasticsearchInstanceId", location: .querystring(locationName: "reservationId"), required: false, type: .string)
        ]

        /// Set this value to limit the number of results returned. If not specified, defaults to 100.
        public let maxResults: Int?
        /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.
        public let nextToken: String?
        /// The reserved instance identifier filter value. Use this parameter to show only the reservation that matches the specified reserved Elasticsearch instance ID.
        public let reservedElasticsearchInstanceId: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, reservedElasticsearchInstanceId: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.reservedElasticsearchInstanceId, name:"reservedElasticsearchInstanceId", parent: name, pattern: "\\p{XDigit}{8}-\\p{XDigit}{4}-\\p{XDigit}{4}-\\p{XDigit}{4}-\\p{XDigit}{12}")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case reservedElasticsearchInstanceId = "reservationId"
        }
    }

    public struct DescribeReservedElasticsearchInstancesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ReservedElasticsearchInstances", required: false, type: .list)
        ]

        /// Provides an identifier to allow retrieval of paginated results.
        public let nextToken: String?
        /// List of reserved Elasticsearch instances.
        public let reservedElasticsearchInstances: [ReservedElasticsearchInstance]?

        public init(nextToken: String? = nil, reservedElasticsearchInstances: [ReservedElasticsearchInstance]? = nil) {
            self.nextToken = nextToken
            self.reservedElasticsearchInstances = reservedElasticsearchInstances
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case reservedElasticsearchInstances = "ReservedElasticsearchInstances"
        }
    }

    public struct DomainEndpointOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnforceHTTPS", required: false, type: .boolean), 
            AWSShapeMember(label: "TLSSecurityPolicy", required: false, type: .enum)
        ]

        /// Specify if only HTTPS endpoint should be enabled for the Elasticsearch domain.
        public let enforceHTTPS: Bool?
        /// Specify the TLS security policy that needs to be applied to the HTTPS endpoint of Elasticsearch domain.  It can be one of the following values:  Policy-Min-TLS-1-0-2019-07:  TLS security policy which supports TLSv1.0 and higher. Policy-Min-TLS-1-2-2019-07:  TLS security policy which supports only TLSv1.2  
        public let tLSSecurityPolicy: TLSSecurityPolicy?

        public init(enforceHTTPS: Bool? = nil, tLSSecurityPolicy: TLSSecurityPolicy? = nil) {
            self.enforceHTTPS = enforceHTTPS
            self.tLSSecurityPolicy = tLSSecurityPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case enforceHTTPS = "EnforceHTTPS"
            case tLSSecurityPolicy = "TLSSecurityPolicy"
        }
    }

    public struct DomainEndpointOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]

        /// Options to configure endpoint for the Elasticsearch domain.
        public let options: DomainEndpointOptions
        /// The status of the endpoint options for the Elasticsearch domain. See OptionStatus for the status information that's included. 
        public let status: OptionStatus

        public init(options: DomainEndpointOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct DomainInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: false, type: .string)
        ]

        ///  Specifies the DomainName.
        public let domainName: String?

        public init(domainName: String? = nil) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct EBSOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EBSEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "VolumeSize", required: false, type: .integer), 
            AWSShapeMember(label: "VolumeType", required: false, type: .enum)
        ]

        /// Specifies whether EBS-based storage is enabled.
        public let eBSEnabled: Bool?
        /// Specifies the IOPD for a Provisioned IOPS EBS volume (SSD).
        public let iops: Int?
        ///  Integer to specify the size of an EBS volume.
        public let volumeSize: Int?
        ///  Specifies the volume type for EBS-based storage.
        public let volumeType: VolumeType?

        public init(eBSEnabled: Bool? = nil, iops: Int? = nil, volumeSize: Int? = nil, volumeType: VolumeType? = nil) {
            self.eBSEnabled = eBSEnabled
            self.iops = iops
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case eBSEnabled = "EBSEnabled"
            case iops = "Iops"
            case volumeSize = "VolumeSize"
            case volumeType = "VolumeType"
        }
    }

    public struct EBSOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]

        ///  Specifies the EBS options for the specified Elasticsearch domain.
        public let options: EBSOptions
        ///  Specifies the status of the EBS options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: EBSOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct ElasticsearchClusterConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DedicatedMasterCount", required: false, type: .integer), 
            AWSShapeMember(label: "DedicatedMasterEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "DedicatedMasterType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "WarmCount", required: false, type: .integer), 
            AWSShapeMember(label: "WarmEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "WarmType", required: false, type: .enum), 
            AWSShapeMember(label: "ZoneAwarenessConfig", required: false, type: .structure), 
            AWSShapeMember(label: "ZoneAwarenessEnabled", required: false, type: .boolean)
        ]

        /// Total number of dedicated master nodes, active and on standby, for the cluster.
        public let dedicatedMasterCount: Int?
        /// A boolean value to indicate whether a dedicated master node is enabled. See About Dedicated Master Nodes for more information.
        public let dedicatedMasterEnabled: Bool?
        /// The instance type for a dedicated master node.
        public let dedicatedMasterType: ESPartitionInstanceType?
        /// The number of instances in the specified domain cluster.
        public let instanceCount: Int?
        /// The instance type for an Elasticsearch cluster. UltraWarm instance types are not supported for data instances.
        public let instanceType: ESPartitionInstanceType?
        /// The number of warm nodes in the cluster.
        public let warmCount: Int?
        /// True to enable warm storage.
        public let warmEnabled: Bool?
        /// The instance type for the Elasticsearch cluster's warm nodes.
        public let warmType: ESWarmPartitionInstanceType?
        /// Specifies the zone awareness configuration for a domain when zone awareness is enabled.
        public let zoneAwarenessConfig: ZoneAwarenessConfig?
        /// A boolean value to indicate whether zone awareness is enabled. See About Zone Awareness for more information.
        public let zoneAwarenessEnabled: Bool?

        public init(dedicatedMasterCount: Int? = nil, dedicatedMasterEnabled: Bool? = nil, dedicatedMasterType: ESPartitionInstanceType? = nil, instanceCount: Int? = nil, instanceType: ESPartitionInstanceType? = nil, warmCount: Int? = nil, warmEnabled: Bool? = nil, warmType: ESWarmPartitionInstanceType? = nil, zoneAwarenessConfig: ZoneAwarenessConfig? = nil, zoneAwarenessEnabled: Bool? = nil) {
            self.dedicatedMasterCount = dedicatedMasterCount
            self.dedicatedMasterEnabled = dedicatedMasterEnabled
            self.dedicatedMasterType = dedicatedMasterType
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.warmCount = warmCount
            self.warmEnabled = warmEnabled
            self.warmType = warmType
            self.zoneAwarenessConfig = zoneAwarenessConfig
            self.zoneAwarenessEnabled = zoneAwarenessEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case dedicatedMasterCount = "DedicatedMasterCount"
            case dedicatedMasterEnabled = "DedicatedMasterEnabled"
            case dedicatedMasterType = "DedicatedMasterType"
            case instanceCount = "InstanceCount"
            case instanceType = "InstanceType"
            case warmCount = "WarmCount"
            case warmEnabled = "WarmEnabled"
            case warmType = "WarmType"
            case zoneAwarenessConfig = "ZoneAwarenessConfig"
            case zoneAwarenessEnabled = "ZoneAwarenessEnabled"
        }
    }

    public struct ElasticsearchClusterConfigStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]

        ///  Specifies the cluster configuration for the specified Elasticsearch domain.
        public let options: ElasticsearchClusterConfig
        ///  Specifies the status of the configuration for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: ElasticsearchClusterConfig, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct ElasticsearchDomainConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessPolicies", required: false, type: .structure), 
            AWSShapeMember(label: "AdvancedOptions", required: false, type: .structure), 
            AWSShapeMember(label: "AdvancedSecurityOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CognitoOptions", required: false, type: .structure), 
            AWSShapeMember(label: "DomainEndpointOptions", required: false, type: .structure), 
            AWSShapeMember(label: "EBSOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchClusterConfig", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchVersion", required: false, type: .structure), 
            AWSShapeMember(label: "EncryptionAtRestOptions", required: false, type: .structure), 
            AWSShapeMember(label: "LogPublishingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "NodeToNodeEncryptionOptions", required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotOptions", required: false, type: .structure), 
            AWSShapeMember(label: "VPCOptions", required: false, type: .structure)
        ]

        /// IAM access policy as a JSON-formatted string.
        public let accessPolicies: AccessPoliciesStatus?
        /// Specifies the AdvancedOptions for the domain. See Configuring Advanced Options for more information.
        public let advancedOptions: AdvancedOptionsStatus?
        /// Specifies AdvancedSecurityOptions for the domain. 
        public let advancedSecurityOptions: AdvancedSecurityOptionsStatus?
        /// The CognitoOptions for the specified domain. For more information, see Amazon Cognito Authentication for Kibana.
        public let cognitoOptions: CognitoOptionsStatus?
        /// Specifies the DomainEndpointOptions for the Elasticsearch domain.
        public let domainEndpointOptions: DomainEndpointOptionsStatus?
        /// Specifies the EBSOptions for the Elasticsearch domain.
        public let eBSOptions: EBSOptionsStatus?
        /// Specifies the ElasticsearchClusterConfig for the Elasticsearch domain.
        public let elasticsearchClusterConfig: ElasticsearchClusterConfigStatus?
        /// String of format X.Y to specify version for the Elasticsearch domain.
        public let elasticsearchVersion: ElasticsearchVersionStatus?
        /// Specifies the EncryptionAtRestOptions for the Elasticsearch domain.
        public let encryptionAtRestOptions: EncryptionAtRestOptionsStatus?
        /// Log publishing options for the given domain.
        public let logPublishingOptions: LogPublishingOptionsStatus?
        /// Specifies the NodeToNodeEncryptionOptions for the Elasticsearch domain.
        public let nodeToNodeEncryptionOptions: NodeToNodeEncryptionOptionsStatus?
        /// Specifies the SnapshotOptions for the Elasticsearch domain.
        public let snapshotOptions: SnapshotOptionsStatus?
        /// The VPCOptions for the specified domain. For more information, see VPC Endpoints for Amazon Elasticsearch Service Domains.
        public let vPCOptions: VPCDerivedInfoStatus?

        public init(accessPolicies: AccessPoliciesStatus? = nil, advancedOptions: AdvancedOptionsStatus? = nil, advancedSecurityOptions: AdvancedSecurityOptionsStatus? = nil, cognitoOptions: CognitoOptionsStatus? = nil, domainEndpointOptions: DomainEndpointOptionsStatus? = nil, eBSOptions: EBSOptionsStatus? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfigStatus? = nil, elasticsearchVersion: ElasticsearchVersionStatus? = nil, encryptionAtRestOptions: EncryptionAtRestOptionsStatus? = nil, logPublishingOptions: LogPublishingOptionsStatus? = nil, nodeToNodeEncryptionOptions: NodeToNodeEncryptionOptionsStatus? = nil, snapshotOptions: SnapshotOptionsStatus? = nil, vPCOptions: VPCDerivedInfoStatus? = nil) {
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.advancedSecurityOptions = advancedSecurityOptions
            self.cognitoOptions = cognitoOptions
            self.domainEndpointOptions = domainEndpointOptions
            self.eBSOptions = eBSOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.elasticsearchVersion = elasticsearchVersion
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.logPublishingOptions = logPublishingOptions
            self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
            self.snapshotOptions = snapshotOptions
            self.vPCOptions = vPCOptions
        }

        private enum CodingKeys: String, CodingKey {
            case accessPolicies = "AccessPolicies"
            case advancedOptions = "AdvancedOptions"
            case advancedSecurityOptions = "AdvancedSecurityOptions"
            case cognitoOptions = "CognitoOptions"
            case domainEndpointOptions = "DomainEndpointOptions"
            case eBSOptions = "EBSOptions"
            case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
            case elasticsearchVersion = "ElasticsearchVersion"
            case encryptionAtRestOptions = "EncryptionAtRestOptions"
            case logPublishingOptions = "LogPublishingOptions"
            case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
            case snapshotOptions = "SnapshotOptions"
            case vPCOptions = "VPCOptions"
        }
    }

    public struct ElasticsearchDomainStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessPolicies", required: false, type: .string), 
            AWSShapeMember(label: "AdvancedOptions", required: false, type: .map), 
            AWSShapeMember(label: "AdvancedSecurityOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "CognitoOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Created", required: false, type: .boolean), 
            AWSShapeMember(label: "Deleted", required: false, type: .boolean), 
            AWSShapeMember(label: "DomainEndpointOptions", required: false, type: .structure), 
            AWSShapeMember(label: "DomainId", required: true, type: .string), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "EBSOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchClusterConfig", required: true, type: .structure), 
            AWSShapeMember(label: "ElasticsearchVersion", required: false, type: .string), 
            AWSShapeMember(label: "EncryptionAtRestOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Endpoint", required: false, type: .string), 
            AWSShapeMember(label: "Endpoints", required: false, type: .map), 
            AWSShapeMember(label: "LogPublishingOptions", required: false, type: .map), 
            AWSShapeMember(label: "NodeToNodeEncryptionOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Processing", required: false, type: .boolean), 
            AWSShapeMember(label: "ServiceSoftwareOptions", required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotOptions", required: false, type: .structure), 
            AWSShapeMember(label: "UpgradeProcessing", required: false, type: .boolean), 
            AWSShapeMember(label: "VPCOptions", required: false, type: .structure)
        ]

        ///  IAM access policy as a JSON-formatted string.
        public let accessPolicies: String?
        /// Specifies the status of the AdvancedOptions
        public let advancedOptions: [String: String]?
        /// The current status of the Elasticsearch domain's advanced security options.
        public let advancedSecurityOptions: AdvancedSecurityOptions?
        /// The Amazon resource name (ARN) of an Elasticsearch domain. See Identifiers for IAM Entities in Using AWS Identity and Access Management for more information.
        public let arn: String
        /// The CognitoOptions for the specified domain. For more information, see Amazon Cognito Authentication for Kibana.
        public let cognitoOptions: CognitoOptions?
        /// The domain creation status. True if the creation of an Elasticsearch domain is complete. False if domain creation is still in progress.
        public let created: Bool?
        /// The domain deletion status. True if a delete request has been received for the domain but resource cleanup is still in progress. False if the domain has not been deleted. Once domain deletion is complete, the status of the domain is no longer returned.
        public let deleted: Bool?
        /// The current status of the Elasticsearch domain's endpoint options.
        public let domainEndpointOptions: DomainEndpointOptions?
        /// The unique identifier for the specified Elasticsearch domain.
        public let domainId: String
        /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        public let domainName: String
        /// The EBSOptions for the specified domain. See Configuring EBS-based Storage for more information.
        public let eBSOptions: EBSOptions?
        /// The type and number of instances in the domain cluster.
        public let elasticsearchClusterConfig: ElasticsearchClusterConfig
        public let elasticsearchVersion: String?
        ///  Specifies the status of the EncryptionAtRestOptions.
        public let encryptionAtRestOptions: EncryptionAtRestOptions?
        /// The Elasticsearch domain endpoint that you use to submit index and search requests.
        public let endpoint: String?
        /// Map containing the Elasticsearch domain endpoints used to submit index and search requests. Example key, value: 'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'.
        public let endpoints: [String: String]?
        /// Log publishing options for the given domain.
        public let logPublishingOptions: [LogType: LogPublishingOption]?
        /// Specifies the status of the NodeToNodeEncryptionOptions.
        public let nodeToNodeEncryptionOptions: NodeToNodeEncryptionOptions?
        /// The status of the Elasticsearch domain configuration. True if Amazon Elasticsearch Service is processing configuration changes. False if the configuration is active.
        public let processing: Bool?
        /// The current status of the Elasticsearch domain's service software.
        public let serviceSoftwareOptions: ServiceSoftwareOptions?
        /// Specifies the status of the SnapshotOptions
        public let snapshotOptions: SnapshotOptions?
        /// The status of an Elasticsearch domain version upgrade. True if Amazon Elasticsearch Service is undergoing a version upgrade. False if the configuration is active.
        public let upgradeProcessing: Bool?
        /// The VPCOptions for the specified domain. For more information, see VPC Endpoints for Amazon Elasticsearch Service Domains.
        public let vPCOptions: VPCDerivedInfo?

        public init(accessPolicies: String? = nil, advancedOptions: [String: String]? = nil, advancedSecurityOptions: AdvancedSecurityOptions? = nil, arn: String, cognitoOptions: CognitoOptions? = nil, created: Bool? = nil, deleted: Bool? = nil, domainEndpointOptions: DomainEndpointOptions? = nil, domainId: String, domainName: String, eBSOptions: EBSOptions? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfig, elasticsearchVersion: String? = nil, encryptionAtRestOptions: EncryptionAtRestOptions? = nil, endpoint: String? = nil, endpoints: [String: String]? = nil, logPublishingOptions: [LogType: LogPublishingOption]? = nil, nodeToNodeEncryptionOptions: NodeToNodeEncryptionOptions? = nil, processing: Bool? = nil, serviceSoftwareOptions: ServiceSoftwareOptions? = nil, snapshotOptions: SnapshotOptions? = nil, upgradeProcessing: Bool? = nil, vPCOptions: VPCDerivedInfo? = nil) {
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.advancedSecurityOptions = advancedSecurityOptions
            self.arn = arn
            self.cognitoOptions = cognitoOptions
            self.created = created
            self.deleted = deleted
            self.domainEndpointOptions = domainEndpointOptions
            self.domainId = domainId
            self.domainName = domainName
            self.eBSOptions = eBSOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.elasticsearchVersion = elasticsearchVersion
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.endpoint = endpoint
            self.endpoints = endpoints
            self.logPublishingOptions = logPublishingOptions
            self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
            self.processing = processing
            self.serviceSoftwareOptions = serviceSoftwareOptions
            self.snapshotOptions = snapshotOptions
            self.upgradeProcessing = upgradeProcessing
            self.vPCOptions = vPCOptions
        }

        private enum CodingKeys: String, CodingKey {
            case accessPolicies = "AccessPolicies"
            case advancedOptions = "AdvancedOptions"
            case advancedSecurityOptions = "AdvancedSecurityOptions"
            case arn = "ARN"
            case cognitoOptions = "CognitoOptions"
            case created = "Created"
            case deleted = "Deleted"
            case domainEndpointOptions = "DomainEndpointOptions"
            case domainId = "DomainId"
            case domainName = "DomainName"
            case eBSOptions = "EBSOptions"
            case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
            case elasticsearchVersion = "ElasticsearchVersion"
            case encryptionAtRestOptions = "EncryptionAtRestOptions"
            case endpoint = "Endpoint"
            case endpoints = "Endpoints"
            case logPublishingOptions = "LogPublishingOptions"
            case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
            case processing = "Processing"
            case serviceSoftwareOptions = "ServiceSoftwareOptions"
            case snapshotOptions = "SnapshotOptions"
            case upgradeProcessing = "UpgradeProcessing"
            case vPCOptions = "VPCOptions"
        }
    }

    public struct ElasticsearchVersionStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .string), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]

        ///  Specifies the Elasticsearch version for the specified Elasticsearch domain.
        public let options: String
        ///  Specifies the status of the Elasticsearch version options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: String, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct EncryptionAtRestOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string)
        ]

        /// Specifies the option to enable Encryption At Rest.
        public let enabled: Bool?
        ///  Specifies the KMS Key ID for Encryption At Rest options.
        public let kmsKeyId: String?

        public init(enabled: Bool? = nil, kmsKeyId: String? = nil) {
            self.enabled = enabled
            self.kmsKeyId = kmsKeyId
        }

        public func validate(name: String) throws {
            try validate(self.kmsKeyId, name:"kmsKeyId", parent: name, max: 500)
            try validate(self.kmsKeyId, name:"kmsKeyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case kmsKeyId = "KmsKeyId"
        }
    }

    public struct EncryptionAtRestOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]

        ///  Specifies the Encryption At Rest options for the specified Elasticsearch domain.
        public let options: EncryptionAtRestOptions
        ///  Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: EncryptionAtRestOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct GetCompatibleElasticsearchVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .querystring(locationName: "domainName"), required: false, type: .string)
        ]

        public let domainName: String?

        public init(domainName: String? = nil) {
            self.domainName = domainName
        }

        public func validate(name: String) throws {
            try validate(self.domainName, name:"domainName", parent: name, max: 28)
            try validate(self.domainName, name:"domainName", parent: name, min: 3)
            try validate(self.domainName, name:"domainName", parent: name, pattern: "[a-z][a-z0-9\\-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

    public struct GetCompatibleElasticsearchVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompatibleElasticsearchVersions", required: false, type: .list)
        ]

        ///  A map of compatible Elasticsearch versions returned as part of the  GetCompatibleElasticsearchVersions  operation. 
        public let compatibleElasticsearchVersions: [CompatibleVersionsMap]?

        public init(compatibleElasticsearchVersions: [CompatibleVersionsMap]? = nil) {
            self.compatibleElasticsearchVersions = compatibleElasticsearchVersions
        }

        private enum CodingKeys: String, CodingKey {
            case compatibleElasticsearchVersions = "CompatibleElasticsearchVersions"
        }
    }

    public struct GetUpgradeHistoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "DomainName"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let domainName: String
        public let maxResults: Int?
        public let nextToken: String?

        public init(domainName: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.domainName = domainName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.domainName, name:"domainName", parent: name, max: 28)
            try validate(self.domainName, name:"domainName", parent: name, min: 3)
            try validate(self.domainName, name:"domainName", parent: name, pattern: "[a-z][a-z0-9\\-]+")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetUpgradeHistoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "UpgradeHistories", required: false, type: .list)
        ]

        /// Pagination token that needs to be supplied to the next call to get the next page of results
        public let nextToken: String?
        ///  A list of  UpgradeHistory  objects corresponding to each Upgrade or Upgrade Eligibility Check performed on a domain returned as part of  GetUpgradeHistoryResponse  object. 
        public let upgradeHistories: [UpgradeHistory]?

        public init(nextToken: String? = nil, upgradeHistories: [UpgradeHistory]? = nil) {
            self.nextToken = nextToken
            self.upgradeHistories = upgradeHistories
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case upgradeHistories = "UpgradeHistories"
        }
    }

    public struct GetUpgradeStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "DomainName"), required: true, type: .string)
        ]

        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        public func validate(name: String) throws {
            try validate(self.domainName, name:"domainName", parent: name, max: 28)
            try validate(self.domainName, name:"domainName", parent: name, min: 3)
            try validate(self.domainName, name:"domainName", parent: name, pattern: "[a-z][a-z0-9\\-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct GetUpgradeStatusResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StepStatus", required: false, type: .enum), 
            AWSShapeMember(label: "UpgradeName", required: false, type: .string), 
            AWSShapeMember(label: "UpgradeStep", required: false, type: .enum)
        ]

        ///  One of 4 statuses that a step can go through returned as part of the  GetUpgradeStatusResponse  object. The status can take one of the following values:  In Progress Succeeded Succeeded with Issues Failed  
        public let stepStatus: UpgradeStatus?
        /// A string that describes the update briefly
        public let upgradeName: String?
        ///  Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through:  PreUpgradeCheck Snapshot Upgrade  
        public let upgradeStep: UpgradeStep?

        public init(stepStatus: UpgradeStatus? = nil, upgradeName: String? = nil, upgradeStep: UpgradeStep? = nil) {
            self.stepStatus = stepStatus
            self.upgradeName = upgradeName
            self.upgradeStep = upgradeStep
        }

        private enum CodingKeys: String, CodingKey {
            case stepStatus = "StepStatus"
            case upgradeName = "UpgradeName"
            case upgradeStep = "UpgradeStep"
        }
    }

    public struct InstanceCountLimits: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaximumInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "MinimumInstanceCount", required: false, type: .integer)
        ]

        public let maximumInstanceCount: Int?
        public let minimumInstanceCount: Int?

        public init(maximumInstanceCount: Int? = nil, minimumInstanceCount: Int? = nil) {
            self.maximumInstanceCount = maximumInstanceCount
            self.minimumInstanceCount = minimumInstanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case maximumInstanceCount = "MaximumInstanceCount"
            case minimumInstanceCount = "MinimumInstanceCount"
        }
    }

    public struct InstanceLimits: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceCountLimits", required: false, type: .structure)
        ]

        public let instanceCountLimits: InstanceCountLimits?

        public init(instanceCountLimits: InstanceCountLimits? = nil) {
            self.instanceCountLimits = instanceCountLimits
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCountLimits = "InstanceCountLimits"
        }
    }

    public struct Limits: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalLimits", required: false, type: .list), 
            AWSShapeMember(label: "InstanceLimits", required: false, type: .structure), 
            AWSShapeMember(label: "StorageTypes", required: false, type: .list)
        ]

        ///  List of additional limits that are specific to a given InstanceType and for each of it's  InstanceRole  . 
        public let additionalLimits: [AdditionalLimit]?
        public let instanceLimits: InstanceLimits?
        /// StorageType represents the list of storage related types and attributes that are available for given InstanceType. 
        public let storageTypes: [StorageType]?

        public init(additionalLimits: [AdditionalLimit]? = nil, instanceLimits: InstanceLimits? = nil, storageTypes: [StorageType]? = nil) {
            self.additionalLimits = additionalLimits
            self.instanceLimits = instanceLimits
            self.storageTypes = storageTypes
        }

        private enum CodingKeys: String, CodingKey {
            case additionalLimits = "AdditionalLimits"
            case instanceLimits = "InstanceLimits"
            case storageTypes = "StorageTypes"
        }
    }

    public struct ListDomainNamesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainNames", required: false, type: .list)
        ]

        /// List of Elasticsearch domain names.
        public let domainNames: [DomainInfo]?

        public init(domainNames: [DomainInfo]? = nil) {
            self.domainNames = domainNames
        }

        private enum CodingKeys: String, CodingKey {
            case domainNames = "DomainNames"
        }
    }

    public struct ListElasticsearchInstanceTypesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .querystring(locationName: "domainName"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticsearchVersion", location: .uri(locationName: "ElasticsearchVersion"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        /// DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for list of available Elasticsearch instance types when modifying existing domain. 
        public let domainName: String?
        /// Version of Elasticsearch for which list of supported elasticsearch instance types are needed. 
        public let elasticsearchVersion: String
        ///  Set this value to limit the number of results returned. Value provided must be greater than 30 else it wont be honored. 
        public let maxResults: Int?
        /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination. 
        public let nextToken: String?

        public init(domainName: String? = nil, elasticsearchVersion: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.domainName = domainName
            self.elasticsearchVersion = elasticsearchVersion
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.domainName, name:"domainName", parent: name, max: 28)
            try validate(self.domainName, name:"domainName", parent: name, min: 3)
            try validate(self.domainName, name:"domainName", parent: name, pattern: "[a-z][a-z0-9\\-]+")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case elasticsearchVersion = "ElasticsearchVersion"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListElasticsearchInstanceTypesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticsearchInstanceTypes", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        ///  List of instance types supported by Amazon Elasticsearch service for given  ElasticsearchVersion  
        public let elasticsearchInstanceTypes: [ESPartitionInstanceType]?
        /// In case if there are more results available NextToken would be present, make further request to the same API with received NextToken to paginate remaining results. 
        public let nextToken: String?

        public init(elasticsearchInstanceTypes: [ESPartitionInstanceType]? = nil, nextToken: String? = nil) {
            self.elasticsearchInstanceTypes = elasticsearchInstanceTypes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case elasticsearchInstanceTypes = "ElasticsearchInstanceTypes"
            case nextToken = "NextToken"
        }
    }

    public struct ListElasticsearchVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        ///  Set this value to limit the number of results returned. Value provided must be greater than 10 else it wont be honored. 
        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListElasticsearchVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticsearchVersions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        public let elasticsearchVersions: [String]?
        public let nextToken: String?

        public init(elasticsearchVersions: [String]? = nil, nextToken: String? = nil) {
            self.elasticsearchVersions = elasticsearchVersions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case elasticsearchVersions = "ElasticsearchVersions"
            case nextToken = "NextToken"
        }
    }

    public struct ListTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", location: .querystring(locationName: "arn"), required: true, type: .string)
        ]

        ///  Specify the ARN for the Elasticsearch domain to which the tags are attached that you want to view.
        public let arn: String

        public init(arn: String) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public struct ListTagsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", required: false, type: .list)
        ]

        ///  List of Tag for the requested Elasticsearch domain.
        public let tagList: [Tag]?

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public struct LogPublishingOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchLogsLogGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]

        public let cloudWatchLogsLogGroupArn: String?
        ///  Specifies whether given log publishing option is enabled or not.
        public let enabled: Bool?

        public init(cloudWatchLogsLogGroupArn: String? = nil, enabled: Bool? = nil) {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
            case enabled = "Enabled"
        }
    }

    public struct LogPublishingOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: false, type: .map), 
            AWSShapeMember(label: "Status", required: false, type: .structure)
        ]

        /// The log publishing options configured for the Elasticsearch domain.
        public let options: [LogType: LogPublishingOption]?
        /// The status of the log publishing options for the Elasticsearch domain. See OptionStatus for the status information that's included. 
        public let status: OptionStatus?

        public init(options: [LogType: LogPublishingOption]? = nil, status: OptionStatus? = nil) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct MasterUserOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MasterUserARN", required: false, type: .string), 
            AWSShapeMember(label: "MasterUserName", required: false, type: .string), 
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string)
        ]

        /// ARN for the master user (if IAM is enabled).
        public let masterUserARN: String?
        /// The master user's username, which is stored in the Amazon Elasticsearch Service domain's internal database.
        public let masterUserName: String?
        /// The master user's password, which is stored in the Amazon Elasticsearch Service domain's internal database.
        public let masterUserPassword: String?

        public init(masterUserARN: String? = nil, masterUserName: String? = nil, masterUserPassword: String? = nil) {
            self.masterUserARN = masterUserARN
            self.masterUserName = masterUserName
            self.masterUserPassword = masterUserPassword
        }

        public func validate(name: String) throws {
            try validate(self.masterUserName, name:"masterUserName", parent: name, min: 1)
            try validate(self.masterUserPassword, name:"masterUserPassword", parent: name, min: 8)
        }

        private enum CodingKeys: String, CodingKey {
            case masterUserARN = "MasterUserARN"
            case masterUserName = "MasterUserName"
            case masterUserPassword = "MasterUserPassword"
        }
    }

    public struct NodeToNodeEncryptionOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]

        /// Specify true to enable node-to-node encryption.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct NodeToNodeEncryptionOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]

        /// Specifies the node-to-node encryption options for the specified Elasticsearch domain.
        public let options: NodeToNodeEncryptionOptions
        /// Specifies the status of the node-to-node encryption options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: NodeToNodeEncryptionOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct OptionStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationDate", required: true, type: .timestamp), 
            AWSShapeMember(label: "PendingDeletion", required: false, type: .boolean), 
            AWSShapeMember(label: "State", required: true, type: .enum), 
            AWSShapeMember(label: "UpdateDate", required: true, type: .timestamp), 
            AWSShapeMember(label: "UpdateVersion", required: false, type: .integer)
        ]

        /// Timestamp which tells the creation date for the entity.
        public let creationDate: TimeStamp
        /// Indicates whether the Elasticsearch domain is being deleted.
        public let pendingDeletion: Bool?
        /// Provides the OptionState for the Elasticsearch domain.
        public let state: OptionState
        /// Timestamp which tells the last updated time for the entity.
        public let updateDate: TimeStamp
        /// Specifies the latest version for the entity.
        public let updateVersion: Int?

        public init(creationDate: TimeStamp, pendingDeletion: Bool? = nil, state: OptionState, updateDate: TimeStamp, updateVersion: Int? = nil) {
            self.creationDate = creationDate
            self.pendingDeletion = pendingDeletion
            self.state = state
            self.updateDate = updateDate
            self.updateVersion = updateVersion
        }

        private enum CodingKeys: String, CodingKey {
            case creationDate = "CreationDate"
            case pendingDeletion = "PendingDeletion"
            case state = "State"
            case updateDate = "UpdateDate"
            case updateVersion = "UpdateVersion"
        }
    }

    public struct PurchaseReservedElasticsearchInstanceOfferingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "ReservationName", required: true, type: .string), 
            AWSShapeMember(label: "ReservedElasticsearchInstanceOfferingId", required: true, type: .string)
        ]

        /// The number of Elasticsearch instances to reserve.
        public let instanceCount: Int?
        /// A customer-specified identifier to track this reservation.
        public let reservationName: String
        /// The ID of the reserved Elasticsearch instance offering to purchase.
        public let reservedElasticsearchInstanceOfferingId: String

        public init(instanceCount: Int? = nil, reservationName: String, reservedElasticsearchInstanceOfferingId: String) {
            self.instanceCount = instanceCount
            self.reservationName = reservationName
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
        }

        public func validate(name: String) throws {
            try validate(self.instanceCount, name:"instanceCount", parent: name, min: 1)
            try validate(self.reservationName, name:"reservationName", parent: name, max: 64)
            try validate(self.reservationName, name:"reservationName", parent: name, min: 5)
            try validate(self.reservedElasticsearchInstanceOfferingId, name:"reservedElasticsearchInstanceOfferingId", parent: name, pattern: "\\p{XDigit}{8}-\\p{XDigit}{4}-\\p{XDigit}{4}-\\p{XDigit}{4}-\\p{XDigit}{12}")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "InstanceCount"
            case reservationName = "ReservationName"
            case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
        }
    }

    public struct PurchaseReservedElasticsearchInstanceOfferingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservationName", required: false, type: .string), 
            AWSShapeMember(label: "ReservedElasticsearchInstanceId", required: false, type: .string)
        ]

        /// The customer-specified identifier used to track this reservation.
        public let reservationName: String?
        /// Details of the reserved Elasticsearch instance which was purchased.
        public let reservedElasticsearchInstanceId: String?

        public init(reservationName: String? = nil, reservedElasticsearchInstanceId: String? = nil) {
            self.reservationName = reservationName
            self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case reservationName = "ReservationName"
            case reservedElasticsearchInstanceId = "ReservedElasticsearchInstanceId"
        }
    }

    public struct RecurringCharge: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurringChargeAmount", required: false, type: .double), 
            AWSShapeMember(label: "RecurringChargeFrequency", required: false, type: .string)
        ]

        /// The monetary amount of the recurring charge.
        public let recurringChargeAmount: Double?
        /// The frequency of the recurring charge.
        public let recurringChargeFrequency: String?

        public init(recurringChargeAmount: Double? = nil, recurringChargeFrequency: String? = nil) {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }

        private enum CodingKeys: String, CodingKey {
            case recurringChargeAmount = "RecurringChargeAmount"
            case recurringChargeFrequency = "RecurringChargeFrequency"
        }
    }

    public struct RemoveTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]

        /// Specifies the ARN for the Elasticsearch domain from which you want to delete the specified tags.
        public let arn: String
        /// Specifies the TagKey list which you want to remove from the Elasticsearch domain.
        public let tagKeys: [String]

        public init(arn: String, tagKeys: [String]) {
            self.arn = arn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case tagKeys = "TagKeys"
        }
    }

    public struct ReservedElasticsearchInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "ElasticsearchInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "ElasticsearchInstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "FixedPrice", required: false, type: .double), 
            AWSShapeMember(label: "PaymentOption", required: false, type: .enum), 
            AWSShapeMember(label: "RecurringCharges", required: false, type: .list), 
            AWSShapeMember(label: "ReservationName", required: false, type: .string), 
            AWSShapeMember(label: "ReservedElasticsearchInstanceId", required: false, type: .string), 
            AWSShapeMember(label: "ReservedElasticsearchInstanceOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: false, type: .string), 
            AWSShapeMember(label: "UsagePrice", required: false, type: .double)
        ]

        /// The currency code for the reserved Elasticsearch instance offering.
        public let currencyCode: String?
        /// The duration, in seconds, for which the Elasticsearch instance is reserved.
        public let duration: Int?
        /// The number of Elasticsearch instances that have been reserved.
        public let elasticsearchInstanceCount: Int?
        /// The Elasticsearch instance type offered by the reserved instance offering.
        public let elasticsearchInstanceType: ESPartitionInstanceType?
        /// The upfront fixed charge you will paid to purchase the specific reserved Elasticsearch instance offering. 
        public let fixedPrice: Double?
        /// The payment option as defined in the reserved Elasticsearch instance offering.
        public let paymentOption: ReservedElasticsearchInstancePaymentOption?
        /// The charge to your account regardless of whether you are creating any domains using the instance offering.
        public let recurringCharges: [RecurringCharge]?
        /// The customer-specified identifier to track this reservation.
        public let reservationName: String?
        /// The unique identifier for the reservation.
        public let reservedElasticsearchInstanceId: String?
        /// The offering identifier.
        public let reservedElasticsearchInstanceOfferingId: String?
        /// The time the reservation started.
        public let startTime: TimeStamp?
        /// The state of the reserved Elasticsearch instance.
        public let state: String?
        /// The rate you are charged for each hour for the domain that is using this reserved instance.
        public let usagePrice: Double?

        public init(currencyCode: String? = nil, duration: Int? = nil, elasticsearchInstanceCount: Int? = nil, elasticsearchInstanceType: ESPartitionInstanceType? = nil, fixedPrice: Double? = nil, paymentOption: ReservedElasticsearchInstancePaymentOption? = nil, recurringCharges: [RecurringCharge]? = nil, reservationName: String? = nil, reservedElasticsearchInstanceId: String? = nil, reservedElasticsearchInstanceOfferingId: String? = nil, startTime: TimeStamp? = nil, state: String? = nil, usagePrice: Double? = nil) {
            self.currencyCode = currencyCode
            self.duration = duration
            self.elasticsearchInstanceCount = elasticsearchInstanceCount
            self.elasticsearchInstanceType = elasticsearchInstanceType
            self.fixedPrice = fixedPrice
            self.paymentOption = paymentOption
            self.recurringCharges = recurringCharges
            self.reservationName = reservationName
            self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
            self.startTime = startTime
            self.state = state
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "CurrencyCode"
            case duration = "Duration"
            case elasticsearchInstanceCount = "ElasticsearchInstanceCount"
            case elasticsearchInstanceType = "ElasticsearchInstanceType"
            case fixedPrice = "FixedPrice"
            case paymentOption = "PaymentOption"
            case recurringCharges = "RecurringCharges"
            case reservationName = "ReservationName"
            case reservedElasticsearchInstanceId = "ReservedElasticsearchInstanceId"
            case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
            case startTime = "StartTime"
            case state = "State"
            case usagePrice = "UsagePrice"
        }
    }

    public struct ReservedElasticsearchInstanceOffering: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "ElasticsearchInstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "FixedPrice", required: false, type: .double), 
            AWSShapeMember(label: "PaymentOption", required: false, type: .enum), 
            AWSShapeMember(label: "RecurringCharges", required: false, type: .list), 
            AWSShapeMember(label: "ReservedElasticsearchInstanceOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "UsagePrice", required: false, type: .double)
        ]

        /// The currency code for the reserved Elasticsearch instance offering.
        public let currencyCode: String?
        /// The duration, in seconds, for which the offering will reserve the Elasticsearch instance.
        public let duration: Int?
        /// The Elasticsearch instance type offered by the reserved instance offering.
        public let elasticsearchInstanceType: ESPartitionInstanceType?
        /// The upfront fixed charge you will pay to purchase the specific reserved Elasticsearch instance offering. 
        public let fixedPrice: Double?
        /// Payment option for the reserved Elasticsearch instance offering
        public let paymentOption: ReservedElasticsearchInstancePaymentOption?
        /// The charge to your account regardless of whether you are creating any domains using the instance offering.
        public let recurringCharges: [RecurringCharge]?
        /// The Elasticsearch reserved instance offering identifier.
        public let reservedElasticsearchInstanceOfferingId: String?
        /// The rate you are charged for each hour the domain that is using the offering is running.
        public let usagePrice: Double?

        public init(currencyCode: String? = nil, duration: Int? = nil, elasticsearchInstanceType: ESPartitionInstanceType? = nil, fixedPrice: Double? = nil, paymentOption: ReservedElasticsearchInstancePaymentOption? = nil, recurringCharges: [RecurringCharge]? = nil, reservedElasticsearchInstanceOfferingId: String? = nil, usagePrice: Double? = nil) {
            self.currencyCode = currencyCode
            self.duration = duration
            self.elasticsearchInstanceType = elasticsearchInstanceType
            self.fixedPrice = fixedPrice
            self.paymentOption = paymentOption
            self.recurringCharges = recurringCharges
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "CurrencyCode"
            case duration = "Duration"
            case elasticsearchInstanceType = "ElasticsearchInstanceType"
            case fixedPrice = "FixedPrice"
            case paymentOption = "PaymentOption"
            case recurringCharges = "RecurringCharges"
            case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
            case usagePrice = "UsagePrice"
        }
    }

    public struct ServiceSoftwareOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomatedUpdateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Cancellable", required: false, type: .boolean), 
            AWSShapeMember(label: "CurrentVersion", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "NewVersion", required: false, type: .string), 
            AWSShapeMember(label: "UpdateAvailable", required: false, type: .boolean), 
            AWSShapeMember(label: "UpdateStatus", required: false, type: .enum)
        ]

        /// Timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.
        public let automatedUpdateDate: TimeStamp?
        /// True if you are able to cancel your service software version update. False if you are not able to cancel your service software version. 
        public let cancellable: Bool?
        /// The current service software version that is present on the domain.
        public let currentVersion: String?
        /// The description of the UpdateStatus.
        public let description: String?
        /// The new service software version if one is available.
        public let newVersion: String?
        /// True if you are able to update you service software version. False if you are not able to update your service software version. 
        public let updateAvailable: Bool?
        /// The status of your service software update. This field can take the following values: ELIGIBLE, PENDING_UPDATE, IN_PROGRESS, COMPLETED, and NOT_ELIGIBLE.
        public let updateStatus: DeploymentStatus?

        public init(automatedUpdateDate: TimeStamp? = nil, cancellable: Bool? = nil, currentVersion: String? = nil, description: String? = nil, newVersion: String? = nil, updateAvailable: Bool? = nil, updateStatus: DeploymentStatus? = nil) {
            self.automatedUpdateDate = automatedUpdateDate
            self.cancellable = cancellable
            self.currentVersion = currentVersion
            self.description = description
            self.newVersion = newVersion
            self.updateAvailable = updateAvailable
            self.updateStatus = updateStatus
        }

        private enum CodingKeys: String, CodingKey {
            case automatedUpdateDate = "AutomatedUpdateDate"
            case cancellable = "Cancellable"
            case currentVersion = "CurrentVersion"
            case description = "Description"
            case newVersion = "NewVersion"
            case updateAvailable = "UpdateAvailable"
            case updateStatus = "UpdateStatus"
        }
    }

    public struct SnapshotOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomatedSnapshotStartHour", required: false, type: .integer)
        ]

        /// Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
        public let automatedSnapshotStartHour: Int?

        public init(automatedSnapshotStartHour: Int? = nil) {
            self.automatedSnapshotStartHour = automatedSnapshotStartHour
        }

        private enum CodingKeys: String, CodingKey {
            case automatedSnapshotStartHour = "AutomatedSnapshotStartHour"
        }
    }

    public struct SnapshotOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]

        /// Specifies the daily snapshot options specified for the Elasticsearch domain.
        public let options: SnapshotOptions
        /// Specifies the status of a daily automated snapshot.
        public let status: OptionStatus

        public init(options: SnapshotOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct StartElasticsearchServiceSoftwareUpdateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: true, type: .string)
        ]

        /// The name of the domain that you want to update to the latest service software.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        public func validate(name: String) throws {
            try validate(self.domainName, name:"domainName", parent: name, max: 28)
            try validate(self.domainName, name:"domainName", parent: name, min: 3)
            try validate(self.domainName, name:"domainName", parent: name, pattern: "[a-z][a-z0-9\\-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct StartElasticsearchServiceSoftwareUpdateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceSoftwareOptions", required: false, type: .structure)
        ]

        /// The current status of the Elasticsearch service software update.
        public let serviceSoftwareOptions: ServiceSoftwareOptions?

        public init(serviceSoftwareOptions: ServiceSoftwareOptions? = nil) {
            self.serviceSoftwareOptions = serviceSoftwareOptions
        }

        private enum CodingKeys: String, CodingKey {
            case serviceSoftwareOptions = "ServiceSoftwareOptions"
        }
    }

    public struct StorageType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageSubTypeName", required: false, type: .string), 
            AWSShapeMember(label: "StorageTypeLimits", required: false, type: .list), 
            AWSShapeMember(label: "StorageTypeName", required: false, type: .string)
        ]

        public let storageSubTypeName: String?
        /// List of limits that are applicable for given storage type. 
        public let storageTypeLimits: [StorageTypeLimit]?
        public let storageTypeName: String?

        public init(storageSubTypeName: String? = nil, storageTypeLimits: [StorageTypeLimit]? = nil, storageTypeName: String? = nil) {
            self.storageSubTypeName = storageSubTypeName
            self.storageTypeLimits = storageTypeLimits
            self.storageTypeName = storageTypeName
        }

        private enum CodingKeys: String, CodingKey {
            case storageSubTypeName = "StorageSubTypeName"
            case storageTypeLimits = "StorageTypeLimits"
            case storageTypeName = "StorageTypeName"
        }
    }

    public struct StorageTypeLimit: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LimitName", required: false, type: .string), 
            AWSShapeMember(label: "LimitValues", required: false, type: .list)
        ]

        ///  Name of storage limits that are applicable for given storage type. If  StorageType  is ebs, following storage options are applicable  MinimumVolumeSize Minimum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable. MaximumVolumeSize Maximum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable. MaximumIops Maximum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable. MinimumIops Minimum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable.  
        public let limitName: String?
        ///  Values for the  StorageTypeLimit$LimitName  . 
        public let limitValues: [String]?

        public init(limitName: String? = nil, limitValues: [String]? = nil) {
            self.limitName = limitName
            self.limitValues = limitValues
        }

        private enum CodingKeys: String, CodingKey {
            case limitName = "LimitName"
            case limitValues = "LimitValues"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]

        /// Specifies the TagKey, the name of the tag. Tag keys must be unique for the Elasticsearch domain to which they are attached.
        public let key: String
        /// Specifies the TagValue, the value assigned to the corresponding tag key. Tag values can be null and do not have to be unique in a tag set. For example, you can have a key value pair in a tag set of project : Trinity and cost-center : Trinity
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.key, name:"key", parent: name, max: 128)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.value, name:"value", parent: name, max: 256)
            try validate(self.value, name:"value", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct UpdateElasticsearchDomainConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessPolicies", required: false, type: .string), 
            AWSShapeMember(label: "AdvancedOptions", required: false, type: .map), 
            AWSShapeMember(label: "AdvancedSecurityOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CognitoOptions", required: false, type: .structure), 
            AWSShapeMember(label: "DomainEndpointOptions", required: false, type: .structure), 
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "DomainName"), required: true, type: .string), 
            AWSShapeMember(label: "EBSOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchClusterConfig", required: false, type: .structure), 
            AWSShapeMember(label: "LogPublishingOptions", required: false, type: .map), 
            AWSShapeMember(label: "SnapshotOptions", required: false, type: .structure), 
            AWSShapeMember(label: "VPCOptions", required: false, type: .structure)
        ]

        /// IAM access policy as a JSON-formatted string.
        public let accessPolicies: String?
        /// Modifies the advanced option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See Configuration Advanced Options for more information.
        public let advancedOptions: [String: String]?
        /// Specifies advanced security options.
        public let advancedSecurityOptions: AdvancedSecurityOptionsInput?
        /// Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see Amazon Cognito Authentication for Kibana.
        public let cognitoOptions: CognitoOptions?
        /// Options to specify configuration that will be applied to the domain endpoint.
        public let domainEndpointOptions: DomainEndpointOptions?
        /// The name of the Elasticsearch domain that you are updating. 
        public let domainName: String
        /// Specify the type and size of the EBS volume that you want to use. 
        public let eBSOptions: EBSOptions?
        /// The type and number of instances to instantiate for the domain cluster.
        public let elasticsearchClusterConfig: ElasticsearchClusterConfig?
        /// Map of LogType and LogPublishingOption, each containing options to publish a given type of Elasticsearch log.
        public let logPublishingOptions: [LogType: LogPublishingOption]?
        /// Option to set the time, in UTC format, for the daily automated snapshot. Default value is 0 hours. 
        public let snapshotOptions: SnapshotOptions?
        /// Options to specify the subnets and security groups for VPC endpoint. For more information, see Creating a VPC in VPC Endpoints for Amazon Elasticsearch Service Domains
        public let vPCOptions: VPCOptions?

        public init(accessPolicies: String? = nil, advancedOptions: [String: String]? = nil, advancedSecurityOptions: AdvancedSecurityOptionsInput? = nil, cognitoOptions: CognitoOptions? = nil, domainEndpointOptions: DomainEndpointOptions? = nil, domainName: String, eBSOptions: EBSOptions? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfig? = nil, logPublishingOptions: [LogType: LogPublishingOption]? = nil, snapshotOptions: SnapshotOptions? = nil, vPCOptions: VPCOptions? = nil) {
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.advancedSecurityOptions = advancedSecurityOptions
            self.cognitoOptions = cognitoOptions
            self.domainEndpointOptions = domainEndpointOptions
            self.domainName = domainName
            self.eBSOptions = eBSOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.logPublishingOptions = logPublishingOptions
            self.snapshotOptions = snapshotOptions
            self.vPCOptions = vPCOptions
        }

        public func validate(name: String) throws {
            try self.advancedSecurityOptions?.validate(name: "\(name).advancedSecurityOptions")
            try self.cognitoOptions?.validate(name: "\(name).cognitoOptions")
            try validate(self.domainName, name:"domainName", parent: name, max: 28)
            try validate(self.domainName, name:"domainName", parent: name, min: 3)
            try validate(self.domainName, name:"domainName", parent: name, pattern: "[a-z][a-z0-9\\-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accessPolicies = "AccessPolicies"
            case advancedOptions = "AdvancedOptions"
            case advancedSecurityOptions = "AdvancedSecurityOptions"
            case cognitoOptions = "CognitoOptions"
            case domainEndpointOptions = "DomainEndpointOptions"
            case domainName = "DomainName"
            case eBSOptions = "EBSOptions"
            case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
            case logPublishingOptions = "LogPublishingOptions"
            case snapshotOptions = "SnapshotOptions"
            case vPCOptions = "VPCOptions"
        }
    }

    public struct UpdateElasticsearchDomainConfigResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainConfig", required: true, type: .structure)
        ]

        /// The status of the updated Elasticsearch domain. 
        public let domainConfig: ElasticsearchDomainConfig

        public init(domainConfig: ElasticsearchDomainConfig) {
            self.domainConfig = domainConfig
        }

        private enum CodingKeys: String, CodingKey {
            case domainConfig = "DomainConfig"
        }
    }

    public struct UpgradeElasticsearchDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "PerformCheckOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "TargetVersion", required: true, type: .string)
        ]

        public let domainName: String
        ///  This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. 
        public let performCheckOnly: Bool?
        /// The version of Elasticsearch that you intend to upgrade the domain to.
        public let targetVersion: String

        public init(domainName: String, performCheckOnly: Bool? = nil, targetVersion: String) {
            self.domainName = domainName
            self.performCheckOnly = performCheckOnly
            self.targetVersion = targetVersion
        }

        public func validate(name: String) throws {
            try validate(self.domainName, name:"domainName", parent: name, max: 28)
            try validate(self.domainName, name:"domainName", parent: name, min: 3)
            try validate(self.domainName, name:"domainName", parent: name, pattern: "[a-z][a-z0-9\\-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case performCheckOnly = "PerformCheckOnly"
            case targetVersion = "TargetVersion"
        }
    }

    public struct UpgradeElasticsearchDomainResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: false, type: .string), 
            AWSShapeMember(label: "PerformCheckOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "TargetVersion", required: false, type: .string)
        ]

        public let domainName: String?
        ///  This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. 
        public let performCheckOnly: Bool?
        /// The version of Elasticsearch that you intend to upgrade the domain to.
        public let targetVersion: String?

        public init(domainName: String? = nil, performCheckOnly: Bool? = nil, targetVersion: String? = nil) {
            self.domainName = domainName
            self.performCheckOnly = performCheckOnly
            self.targetVersion = targetVersion
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case performCheckOnly = "PerformCheckOnly"
            case targetVersion = "TargetVersion"
        }
    }

    public struct UpgradeHistory: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "StepsList", required: false, type: .list), 
            AWSShapeMember(label: "UpgradeName", required: false, type: .string), 
            AWSShapeMember(label: "UpgradeStatus", required: false, type: .enum)
        ]

        /// UTC Timestamp at which the Upgrade API call was made in "yyyy-MM-ddTHH:mm:ssZ" format.
        public let startTimestamp: TimeStamp?
        ///  A list of  UpgradeStepItem  s representing information about each step performed as pard of a specific Upgrade or Upgrade Eligibility Check. 
        public let stepsList: [UpgradeStepItem]?
        /// A string that describes the update briefly
        public let upgradeName: String?
        ///  The overall status of the update. The status can take one of the following values:  In Progress Succeeded Succeeded with Issues Failed  
        public let upgradeStatus: UpgradeStatus?

        public init(startTimestamp: TimeStamp? = nil, stepsList: [UpgradeStepItem]? = nil, upgradeName: String? = nil, upgradeStatus: UpgradeStatus? = nil) {
            self.startTimestamp = startTimestamp
            self.stepsList = stepsList
            self.upgradeName = upgradeName
            self.upgradeStatus = upgradeStatus
        }

        private enum CodingKeys: String, CodingKey {
            case startTimestamp = "StartTimestamp"
            case stepsList = "StepsList"
            case upgradeName = "UpgradeName"
            case upgradeStatus = "UpgradeStatus"
        }
    }

    public struct UpgradeStepItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Issues", required: false, type: .list), 
            AWSShapeMember(label: "ProgressPercent", required: false, type: .double), 
            AWSShapeMember(label: "UpgradeStep", required: false, type: .enum), 
            AWSShapeMember(label: "UpgradeStepStatus", required: false, type: .enum)
        ]

        /// A list of strings containing detailed information about the errors encountered in a particular step.
        public let issues: [String]?
        /// The Floating point value representing progress percentage of a particular step.
        public let progressPercent: Double?
        ///  Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through:  PreUpgradeCheck Snapshot Upgrade  
        public let upgradeStep: UpgradeStep?
        ///  The status of a particular step during an upgrade. The status can take one of the following values:  In Progress Succeeded Succeeded with Issues Failed  
        public let upgradeStepStatus: UpgradeStatus?

        public init(issues: [String]? = nil, progressPercent: Double? = nil, upgradeStep: UpgradeStep? = nil, upgradeStepStatus: UpgradeStatus? = nil) {
            self.issues = issues
            self.progressPercent = progressPercent
            self.upgradeStep = upgradeStep
            self.upgradeStepStatus = upgradeStepStatus
        }

        private enum CodingKeys: String, CodingKey {
            case issues = "Issues"
            case progressPercent = "ProgressPercent"
            case upgradeStep = "UpgradeStep"
            case upgradeStepStatus = "UpgradeStepStatus"
        }
    }

    public struct VPCDerivedInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "VPCId", required: false, type: .string)
        ]

        /// The availability zones for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
        public let availabilityZones: [String]?
        /// Specifies the security groups for VPC endpoint.
        public let securityGroupIds: [String]?
        /// Specifies the subnets for VPC endpoint.
        public let subnetIds: [String]?
        /// The VPC Id for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
        public let vPCId: String?

        public init(availabilityZones: [String]? = nil, securityGroupIds: [String]? = nil, subnetIds: [String]? = nil, vPCId: String? = nil) {
            self.availabilityZones = availabilityZones
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vPCId = vPCId
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case securityGroupIds = "SecurityGroupIds"
            case subnetIds = "SubnetIds"
            case vPCId = "VPCId"
        }
    }

    public struct VPCDerivedInfoStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]

        ///  Specifies the VPC options for the specified Elasticsearch domain.
        public let options: VPCDerivedInfo
        ///  Specifies the status of the VPC options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: VPCDerivedInfo, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct VPCOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "SubnetIds", required: false, type: .list)
        ]

        /// Specifies the security groups for VPC endpoint.
        public let securityGroupIds: [String]?
        /// Specifies the subnets for VPC endpoint.
        public let subnetIds: [String]?

        public init(securityGroupIds: [String]? = nil, subnetIds: [String]? = nil) {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds = "SecurityGroupIds"
            case subnetIds = "SubnetIds"
        }
    }

    public struct ZoneAwarenessConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZoneCount", required: false, type: .integer)
        ]

        /// An integer value to indicate the number of availability zones for a domain when zone awareness is enabled. This should be equal to number of subnets if VPC endpoints is enabled
        public let availabilityZoneCount: Int?

        public init(availabilityZoneCount: Int? = nil) {
            self.availabilityZoneCount = availabilityZoneCount
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZoneCount = "AvailabilityZoneCount"
        }
    }
}
