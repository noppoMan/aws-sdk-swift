//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

@_exported import AWSSDKSwiftCore
import NIO

/**
Client object for interacting with AWS TranscribeService service.

Operations and objects for transcribing speech to text.
*/
public struct TranscribeService {

    //MARK: Member variables

    public let client: AWSClient

    //MARK: Initialization

    /// Initialize the TranscribeService client
    /// - parameters:
    ///     - accessKeyId: Public access key provided by AWS
    ///     - secretAccessKey: Private access key provided by AWS
    ///     - sessionToken: Token provided by STS.AssumeRole() which allows access to another AWS account
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - retryController: Object returning whether retries should be attempted. Possible options are NoRetry(), ExponentialRetry() or JitterRetry()
    ///     - middlewares: Array of middlewares to apply to requests and responses
    ///     - httpClientProvider: HTTPClient to use. Use `createNew` if the client should manage its own HTTPClient.
    public init(
        accessKeyId: String? = nil,
        secretAccessKey: String? = nil,
        sessionToken: String? = nil,
        region: AWSSDKSwiftCore.Region? = nil,
        partition: AWSSDKSwiftCore.Partition = .aws,
        endpoint: String? = nil,
        retryController: RetryController = JitterRetry(),
        middlewares: [AWSServiceMiddleware] = [],
        httpClientProvider: AWSClient.HTTPClientProvider = .createNew
    ) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            sessionToken: sessionToken,
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "Transcribe",
            service: "transcribe",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2017-10-26",
            endpoint: endpoint,
            serviceEndpoints: ["cn-north-1": "cn.transcribe.cn-north-1.amazonaws.com.cn", "cn-northwest-1": "cn.transcribe.cn-northwest-1.amazonaws.com.cn"],
            retryController: retryController,
            middlewares: middlewares,
            possibleErrorTypes: [TranscribeServiceErrorType.self],
            httpClientProvider: httpClientProvider
        )
    }
    
    //MARK: API Calls

    ///  Creates a new custom vocabulary that you can use to change how Amazon Transcribe Medical transcribes your audio file.
    public func createMedicalVocabulary(_ input: CreateMedicalVocabularyRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateMedicalVocabularyResponse> {
        return client.send(operation: "CreateMedicalVocabulary", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Creates a new custom vocabulary that you can use to change the way Amazon Transcribe handles transcription of an audio file. 
    public func createVocabulary(_ input: CreateVocabularyRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateVocabularyResponse> {
        return client.send(operation: "CreateVocabulary", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Creates a new vocabulary filter that you can use to filter words, such as profane words, from the output of a transcription job.
    public func createVocabularyFilter(_ input: CreateVocabularyFilterRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateVocabularyFilterResponse> {
        return client.send(operation: "CreateVocabularyFilter", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Deletes a transcription job generated by Amazon Transcribe Medical and any related information.
    @discardableResult public func deleteMedicalTranscriptionJob(_ input: DeleteMedicalTranscriptionJobRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteMedicalTranscriptionJob", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Deletes a vocabulary from Amazon Transcribe Medical.
    @discardableResult public func deleteMedicalVocabulary(_ input: DeleteMedicalVocabularyRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteMedicalVocabulary", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Deletes a previously submitted transcription job along with any other generated results such as the transcription, models, and so on.
    @discardableResult public func deleteTranscriptionJob(_ input: DeleteTranscriptionJobRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteTranscriptionJob", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Deletes a vocabulary from Amazon Transcribe. 
    @discardableResult public func deleteVocabulary(_ input: DeleteVocabularyRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteVocabulary", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Removes a vocabulary filter.
    @discardableResult public func deleteVocabularyFilter(_ input: DeleteVocabularyFilterRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return client.send(operation: "DeleteVocabularyFilter", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Returns information about a transcription job from Amazon Transcribe Medical. To see the status of the job, check the TranscriptionJobStatus field. If the status is COMPLETED, the job is finished. You find the results of the completed job in the TranscriptFileUri field.
    public func getMedicalTranscriptionJob(_ input: GetMedicalTranscriptionJobRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetMedicalTranscriptionJobResponse> {
        return client.send(operation: "GetMedicalTranscriptionJob", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Retrieve information about a medical vocabulary.
    public func getMedicalVocabulary(_ input: GetMedicalVocabularyRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetMedicalVocabularyResponse> {
        return client.send(operation: "GetMedicalVocabulary", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Returns information about a transcription job. To see the status of the job, check the TranscriptionJobStatus field. If the status is COMPLETED, the job is finished and you can find the results at the location specified in the TranscriptFileUri field. If you enable content redaction, the redacted transcript appears in RedactedTranscriptFileUri.
    public func getTranscriptionJob(_ input: GetTranscriptionJobRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetTranscriptionJobResponse> {
        return client.send(operation: "GetTranscriptionJob", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Gets information about a vocabulary. 
    public func getVocabulary(_ input: GetVocabularyRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetVocabularyResponse> {
        return client.send(operation: "GetVocabulary", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Returns information about a vocabulary filter.
    public func getVocabularyFilter(_ input: GetVocabularyFilterRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetVocabularyFilterResponse> {
        return client.send(operation: "GetVocabularyFilter", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Lists medical transcription jobs with a specified status or substring that matches their names.
    public func listMedicalTranscriptionJobs(_ input: ListMedicalTranscriptionJobsRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListMedicalTranscriptionJobsResponse> {
        return client.send(operation: "ListMedicalTranscriptionJobs", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Returns a list of vocabularies that match the specified criteria. You get the entire list of vocabularies if you don't enter a value in any of the request parameters.
    public func listMedicalVocabularies(_ input: ListMedicalVocabulariesRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListMedicalVocabulariesResponse> {
        return client.send(operation: "ListMedicalVocabularies", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Lists transcription jobs with the specified status.
    public func listTranscriptionJobs(_ input: ListTranscriptionJobsRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListTranscriptionJobsResponse> {
        return client.send(operation: "ListTranscriptionJobs", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Returns a list of vocabularies that match the specified criteria. If no criteria are specified, returns the entire list of vocabularies.
    public func listVocabularies(_ input: ListVocabulariesRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListVocabulariesResponse> {
        return client.send(operation: "ListVocabularies", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Gets information about vocabulary filters.
    public func listVocabularyFilters(_ input: ListVocabularyFiltersRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListVocabularyFiltersResponse> {
        return client.send(operation: "ListVocabularyFilters", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Start a batch job to transcribe medical speech to text.
    public func startMedicalTranscriptionJob(_ input: StartMedicalTranscriptionJobRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartMedicalTranscriptionJobResponse> {
        return client.send(operation: "StartMedicalTranscriptionJob", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Starts an asynchronous job to transcribe speech to text. 
    public func startTranscriptionJob(_ input: StartTranscriptionJobRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartTranscriptionJobResponse> {
        return client.send(operation: "StartTranscriptionJob", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Updates an existing vocabulary with new values in a different text file. The UpdateMedicalVocabulary operation overwrites all of the existing information with the values that you provide in the request.
    public func updateMedicalVocabulary(_ input: UpdateMedicalVocabularyRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateMedicalVocabularyResponse> {
        return client.send(operation: "UpdateMedicalVocabulary", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Updates an existing vocabulary with new values. The UpdateVocabulary operation overwrites all of the existing information with the values that you provide in the request. 
    public func updateVocabulary(_ input: UpdateVocabularyRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateVocabularyResponse> {
        return client.send(operation: "UpdateVocabulary", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Updates a vocabulary filter with a new list of filtered words.
    public func updateVocabularyFilter(_ input: UpdateVocabularyFilterRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateVocabularyFilterResponse> {
        return client.send(operation: "UpdateVocabularyFilter", path: "/", httpMethod: "POST", input: input, on: eventLoop)
    }
}
