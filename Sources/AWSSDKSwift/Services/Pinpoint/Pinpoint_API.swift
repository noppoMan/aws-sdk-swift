// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore
import NIO

/**
Doc Engage API - Amazon Pinpoint API
*/
public struct Pinpoint {

    public let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil, middlewares: [AWSServiceMiddleware] = []) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            sessionToken: sessionToken,
            region: region,
            service: "pinpoint",
            signingName: "mobiletargeting",
            serviceProtocol: ServiceProtocol(type: .restjson, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2016-12-01",
            endpoint: endpoint,
            middlewares: middlewares,
            possibleErrorTypes: [PinpointErrorType.self]
        )
    }

    ///   Creates an application.
    public func createApp(_ input: CreateAppRequest) -> Future<CreateAppResponse> {
        return client.send(operation: "CreateApp", path: "/v1/apps", httpMethod: "POST", input: input)
    }

    ///  Creates a new campaign for an application or updates the settings of an existing campaign for an application.
    public func createCampaign(_ input: CreateCampaignRequest) -> Future<CreateCampaignResponse> {
        return client.send(operation: "CreateCampaign", path: "/v1/apps/{application-id}/campaigns", httpMethod: "POST", input: input)
    }

    ///  Creates a new export job for an application.
    public func createExportJob(_ input: CreateExportJobRequest) -> Future<CreateExportJobResponse> {
        return client.send(operation: "CreateExportJob", path: "/v1/apps/{application-id}/jobs/export", httpMethod: "POST", input: input)
    }

    ///  Creates a new import job for an application.
    public func createImportJob(_ input: CreateImportJobRequest) -> Future<CreateImportJobResponse> {
        return client.send(operation: "CreateImportJob", path: "/v1/apps/{application-id}/jobs/import", httpMethod: "POST", input: input)
    }

    ///  Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.
    public func createSegment(_ input: CreateSegmentRequest) -> Future<CreateSegmentResponse> {
        return client.send(operation: "CreateSegment", path: "/v1/apps/{application-id}/segments", httpMethod: "POST", input: input)
    }

    ///  Disables the ADM channel for an application and deletes any existing settings for the channel.
    public func deleteAdmChannel(_ input: DeleteAdmChannelRequest) -> Future<DeleteAdmChannelResponse> {
        return client.send(operation: "DeleteAdmChannel", path: "/v1/apps/{application-id}/channels/adm", httpMethod: "DELETE", input: input)
    }

    ///  Disables the APNs channel for an application and deletes any existing settings for the channel.
    public func deleteApnsChannel(_ input: DeleteApnsChannelRequest) -> Future<DeleteApnsChannelResponse> {
        return client.send(operation: "DeleteApnsChannel", path: "/v1/apps/{application-id}/channels/apns", httpMethod: "DELETE", input: input)
    }

    ///  Disables the APNs sandbox channel for an application and deletes any existing settings for the channel.
    public func deleteApnsSandboxChannel(_ input: DeleteApnsSandboxChannelRequest) -> Future<DeleteApnsSandboxChannelResponse> {
        return client.send(operation: "DeleteApnsSandboxChannel", path: "/v1/apps/{application-id}/channels/apns_sandbox", httpMethod: "DELETE", input: input)
    }

    ///  Disables the APNs VoIP channel for an application and deletes any existing settings for the channel.
    public func deleteApnsVoipChannel(_ input: DeleteApnsVoipChannelRequest) -> Future<DeleteApnsVoipChannelResponse> {
        return client.send(operation: "DeleteApnsVoipChannel", path: "/v1/apps/{application-id}/channels/apns_voip", httpMethod: "DELETE", input: input)
    }

    ///  Disables the APNs VoIP sandbox channel for an application and deletes any existing settings for the channel.
    public func deleteApnsVoipSandboxChannel(_ input: DeleteApnsVoipSandboxChannelRequest) -> Future<DeleteApnsVoipSandboxChannelResponse> {
        return client.send(operation: "DeleteApnsVoipSandboxChannel", path: "/v1/apps/{application-id}/channels/apns_voip_sandbox", httpMethod: "DELETE", input: input)
    }

    ///  Deletes an application.
    public func deleteApp(_ input: DeleteAppRequest) -> Future<DeleteAppResponse> {
        return client.send(operation: "DeleteApp", path: "/v1/apps/{application-id}", httpMethod: "DELETE", input: input)
    }

    ///  Disables the Baidu channel for an application and deletes any existing settings for the channel.
    public func deleteBaiduChannel(_ input: DeleteBaiduChannelRequest) -> Future<DeleteBaiduChannelResponse> {
        return client.send(operation: "DeleteBaiduChannel", path: "/v1/apps/{application-id}/channels/baidu", httpMethod: "DELETE", input: input)
    }

    ///  Deletes a campaign from an application.
    public func deleteCampaign(_ input: DeleteCampaignRequest) -> Future<DeleteCampaignResponse> {
        return client.send(operation: "DeleteCampaign", path: "/v1/apps/{application-id}/campaigns/{campaign-id}", httpMethod: "DELETE", input: input)
    }

    ///  Disables the email channel for an application and deletes any existing settings for the channel.
    public func deleteEmailChannel(_ input: DeleteEmailChannelRequest) -> Future<DeleteEmailChannelResponse> {
        return client.send(operation: "DeleteEmailChannel", path: "/v1/apps/{application-id}/channels/email", httpMethod: "DELETE", input: input)
    }

    ///  Deletes an endpoint from an application.
    public func deleteEndpoint(_ input: DeleteEndpointRequest) -> Future<DeleteEndpointResponse> {
        return client.send(operation: "DeleteEndpoint", path: "/v1/apps/{application-id}/endpoints/{endpoint-id}", httpMethod: "DELETE", input: input)
    }

    ///  Deletes the event stream for an application.
    public func deleteEventStream(_ input: DeleteEventStreamRequest) -> Future<DeleteEventStreamResponse> {
        return client.send(operation: "DeleteEventStream", path: "/v1/apps/{application-id}/eventstream", httpMethod: "DELETE", input: input)
    }

    ///  Disables the GCM channel for an application and deletes any existing settings for the channel.
    public func deleteGcmChannel(_ input: DeleteGcmChannelRequest) -> Future<DeleteGcmChannelResponse> {
        return client.send(operation: "DeleteGcmChannel", path: "/v1/apps/{application-id}/channels/gcm", httpMethod: "DELETE", input: input)
    }

    ///  Deletes a segment from an application.
    public func deleteSegment(_ input: DeleteSegmentRequest) -> Future<DeleteSegmentResponse> {
        return client.send(operation: "DeleteSegment", path: "/v1/apps/{application-id}/segments/{segment-id}", httpMethod: "DELETE", input: input)
    }

    ///  Disables the SMS channel for an application and deletes any existing settings for the channel.
    public func deleteSmsChannel(_ input: DeleteSmsChannelRequest) -> Future<DeleteSmsChannelResponse> {
        return client.send(operation: "DeleteSmsChannel", path: "/v1/apps/{application-id}/channels/sms", httpMethod: "DELETE", input: input)
    }

    ///  Deletes all the endpoints that are associated with a specific user ID.
    public func deleteUserEndpoints(_ input: DeleteUserEndpointsRequest) -> Future<DeleteUserEndpointsResponse> {
        return client.send(operation: "DeleteUserEndpoints", path: "/v1/apps/{application-id}/users/{user-id}", httpMethod: "DELETE", input: input)
    }

    ///  Disables the voice channel for an application and deletes any existing settings for the channel.
    public func deleteVoiceChannel(_ input: DeleteVoiceChannelRequest) -> Future<DeleteVoiceChannelResponse> {
        return client.send(operation: "DeleteVoiceChannel", path: "/v1/apps/{application-id}/channels/voice", httpMethod: "DELETE", input: input)
    }

    ///  Retrieves information about the status and settings of the ADM channel for an application.
    public func getAdmChannel(_ input: GetAdmChannelRequest) -> Future<GetAdmChannelResponse> {
        return client.send(operation: "GetAdmChannel", path: "/v1/apps/{application-id}/channels/adm", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of the APNs channel for an application.
    public func getApnsChannel(_ input: GetApnsChannelRequest) -> Future<GetApnsChannelResponse> {
        return client.send(operation: "GetApnsChannel", path: "/v1/apps/{application-id}/channels/apns", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of the APNs sandbox channel for an application.
    public func getApnsSandboxChannel(_ input: GetApnsSandboxChannelRequest) -> Future<GetApnsSandboxChannelResponse> {
        return client.send(operation: "GetApnsSandboxChannel", path: "/v1/apps/{application-id}/channels/apns_sandbox", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of the APNs VoIP channel for an application.
    public func getApnsVoipChannel(_ input: GetApnsVoipChannelRequest) -> Future<GetApnsVoipChannelResponse> {
        return client.send(operation: "GetApnsVoipChannel", path: "/v1/apps/{application-id}/channels/apns_voip", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of the APNs VoIP sandbox channel for an application.
    public func getApnsVoipSandboxChannel(_ input: GetApnsVoipSandboxChannelRequest) -> Future<GetApnsVoipSandboxChannelResponse> {
        return client.send(operation: "GetApnsVoipSandboxChannel", path: "/v1/apps/{application-id}/channels/apns_voip_sandbox", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about an application.
    public func getApp(_ input: GetAppRequest) -> Future<GetAppResponse> {
        return client.send(operation: "GetApp", path: "/v1/apps/{application-id}", httpMethod: "GET", input: input)
    }

    ///   Retrieves (queries) pre-aggregated data for a standard metric that applies to an application.
    public func getApplicationDateRangeKpi(_ input: GetApplicationDateRangeKpiRequest) -> Future<GetApplicationDateRangeKpiResponse> {
        return client.send(operation: "GetApplicationDateRangeKpi", path: "/v1/apps/{application-id}/kpis/daterange/{kpi-name}", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the settings for an application.
    public func getApplicationSettings(_ input: GetApplicationSettingsRequest) -> Future<GetApplicationSettingsResponse> {
        return client.send(operation: "GetApplicationSettings", path: "/v1/apps/{application-id}/settings", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about all of your applications.
    public func getApps(_ input: GetAppsRequest) -> Future<GetAppsResponse> {
        return client.send(operation: "GetApps", path: "/v1/apps", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of the Baidu Cloud Push channel for an application.
    public func getBaiduChannel(_ input: GetBaiduChannelRequest) -> Future<GetBaiduChannelResponse> {
        return client.send(operation: "GetBaiduChannel", path: "/v1/apps/{application-id}/channels/baidu", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status, configuration, and other settings for a campaign.
    public func getCampaign(_ input: GetCampaignRequest) -> Future<GetCampaignResponse> {
        return client.send(operation: "GetCampaign", path: "/v1/apps/{application-id}/campaigns/{campaign-id}", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the activity performed by a campaign.
    public func getCampaignActivities(_ input: GetCampaignActivitiesRequest) -> Future<GetCampaignActivitiesResponse> {
        return client.send(operation: "GetCampaignActivities", path: "/v1/apps/{application-id}/campaigns/{campaign-id}/activities", httpMethod: "GET", input: input)
    }

    ///   Retrieves (queries) pre-aggregated data for a standard metric that applies to a campaign.
    public func getCampaignDateRangeKpi(_ input: GetCampaignDateRangeKpiRequest) -> Future<GetCampaignDateRangeKpiResponse> {
        return client.send(operation: "GetCampaignDateRangeKpi", path: "/v1/apps/{application-id}/campaigns/{campaign-id}/kpis/daterange/{kpi-name}", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status, configuration, and other settings for a specific version of a campaign.
    public func getCampaignVersion(_ input: GetCampaignVersionRequest) -> Future<GetCampaignVersionResponse> {
        return client.send(operation: "GetCampaignVersion", path: "/v1/apps/{application-id}/campaigns/{campaign-id}/versions/{version}", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status, configuration, and other settings for all versions of a specific campaign.
    public func getCampaignVersions(_ input: GetCampaignVersionsRequest) -> Future<GetCampaignVersionsResponse> {
        return client.send(operation: "GetCampaignVersions", path: "/v1/apps/{application-id}/campaigns/{campaign-id}/versions", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status, configuration, and other settings for all the campaigns that are associated with an application.
    public func getCampaigns(_ input: GetCampaignsRequest) -> Future<GetCampaignsResponse> {
        return client.send(operation: "GetCampaigns", path: "/v1/apps/{application-id}/campaigns", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the history and status of each channel for an application.
    public func getChannels(_ input: GetChannelsRequest) -> Future<GetChannelsResponse> {
        return client.send(operation: "GetChannels", path: "/v1/apps/{application-id}/channels", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of the email channel for an application.
    public func getEmailChannel(_ input: GetEmailChannelRequest) -> Future<GetEmailChannelResponse> {
        return client.send(operation: "GetEmailChannel", path: "/v1/apps/{application-id}/channels/email", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the settings and attributes of a specific endpoint for an application.
    public func getEndpoint(_ input: GetEndpointRequest) -> Future<GetEndpointResponse> {
        return client.send(operation: "GetEndpoint", path: "/v1/apps/{application-id}/endpoints/{endpoint-id}", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the event stream settings for an application.
    public func getEventStream(_ input: GetEventStreamRequest) -> Future<GetEventStreamResponse> {
        return client.send(operation: "GetEventStream", path: "/v1/apps/{application-id}/eventstream", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of a specific export job for an application.
    public func getExportJob(_ input: GetExportJobRequest) -> Future<GetExportJobResponse> {
        return client.send(operation: "GetExportJob", path: "/v1/apps/{application-id}/jobs/export/{job-id}", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of all the export jobs for an application.
    public func getExportJobs(_ input: GetExportJobsRequest) -> Future<GetExportJobsResponse> {
        return client.send(operation: "GetExportJobs", path: "/v1/apps/{application-id}/jobs/export", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of the GCM channel for an application.
    public func getGcmChannel(_ input: GetGcmChannelRequest) -> Future<GetGcmChannelResponse> {
        return client.send(operation: "GetGcmChannel", path: "/v1/apps/{application-id}/channels/gcm", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of a specific import job for an application.
    public func getImportJob(_ input: GetImportJobRequest) -> Future<GetImportJobResponse> {
        return client.send(operation: "GetImportJob", path: "/v1/apps/{application-id}/jobs/import/{job-id}", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of all the import jobs for an application.
    public func getImportJobs(_ input: GetImportJobsRequest) -> Future<GetImportJobsResponse> {
        return client.send(operation: "GetImportJobs", path: "/v1/apps/{application-id}/jobs/import", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the configuration, dimension, and other settings for a specific segment that's associated with an application.
    public func getSegment(_ input: GetSegmentRequest) -> Future<GetSegmentResponse> {
        return client.send(operation: "GetSegment", path: "/v1/apps/{application-id}/segments/{segment-id}", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of the export jobs for a segment.
    public func getSegmentExportJobs(_ input: GetSegmentExportJobsRequest) -> Future<GetSegmentExportJobsResponse> {
        return client.send(operation: "GetSegmentExportJobs", path: "/v1/apps/{application-id}/segments/{segment-id}/jobs/export", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of the import jobs for a segment.
    public func getSegmentImportJobs(_ input: GetSegmentImportJobsRequest) -> Future<GetSegmentImportJobsResponse> {
        return client.send(operation: "GetSegmentImportJobs", path: "/v1/apps/{application-id}/segments/{segment-id}/jobs/import", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the configuration, dimension, and other settings for a specific version of a segment that's associated with an application.
    public func getSegmentVersion(_ input: GetSegmentVersionRequest) -> Future<GetSegmentVersionResponse> {
        return client.send(operation: "GetSegmentVersion", path: "/v1/apps/{application-id}/segments/{segment-id}/versions/{version}", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the configuration, dimension, and other settings for all versions of a specific segment that's associated with an application.
    public func getSegmentVersions(_ input: GetSegmentVersionsRequest) -> Future<GetSegmentVersionsResponse> {
        return client.send(operation: "GetSegmentVersions", path: "/v1/apps/{application-id}/segments/{segment-id}/versions", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the configuration, dimension, and other settings for all the segments that are associated with an application.
    public func getSegments(_ input: GetSegmentsRequest) -> Future<GetSegmentsResponse> {
        return client.send(operation: "GetSegments", path: "/v1/apps/{application-id}/segments", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of the SMS channel for an application.
    public func getSmsChannel(_ input: GetSmsChannelRequest) -> Future<GetSmsChannelResponse> {
        return client.send(operation: "GetSmsChannel", path: "/v1/apps/{application-id}/channels/sms", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about all the endpoints that are associated with a specific user ID.
    public func getUserEndpoints(_ input: GetUserEndpointsRequest) -> Future<GetUserEndpointsResponse> {
        return client.send(operation: "GetUserEndpoints", path: "/v1/apps/{application-id}/users/{user-id}", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about the status and settings of the voice channel for an application.
    public func getVoiceChannel(_ input: GetVoiceChannelRequest) -> Future<GetVoiceChannelResponse> {
        return client.send(operation: "GetVoiceChannel", path: "/v1/apps/{application-id}/channels/voice", httpMethod: "GET", input: input)
    }

    ///  Retrieves all the tags (keys and values) that are associated with an application, campaign, or segment.
    public func listTagsForResource(_ input: ListTagsForResourceRequest) -> Future<ListTagsForResourceResponse> {
        return client.send(operation: "ListTagsForResource", path: "/v1/tags/{resource-arn}", httpMethod: "GET", input: input)
    }

    ///  Retrieves information about a phone number.
    public func phoneNumberValidate(_ input: PhoneNumberValidateRequest) -> Future<PhoneNumberValidateResponse> {
        return client.send(operation: "PhoneNumberValidate", path: "/v1/phone/number/validate", httpMethod: "POST", input: input)
    }

    ///  Creates a new event stream for an application or updates the settings of an existing event stream for an application.
    public func putEventStream(_ input: PutEventStreamRequest) -> Future<PutEventStreamResponse> {
        return client.send(operation: "PutEventStream", path: "/v1/apps/{application-id}/eventstream", httpMethod: "POST", input: input)
    }

    ///  Creates a new event to record for endpoints, or creates or updates endpoint data that existing events are associated with.
    public func putEvents(_ input: PutEventsRequest) -> Future<PutEventsResponse> {
        return client.send(operation: "PutEvents", path: "/v1/apps/{application-id}/events", httpMethod: "POST", input: input)
    }

    ///  Removes one or more attributes, of the same attribute type, from all the endpoints that are associated with an application.
    public func removeAttributes(_ input: RemoveAttributesRequest) -> Future<RemoveAttributesResponse> {
        return client.send(operation: "RemoveAttributes", path: "/v1/apps/{application-id}/attributes/{attribute-type}", httpMethod: "PUT", input: input)
    }

    ///  Creates and sends a direct message.
    public func sendMessages(_ input: SendMessagesRequest) -> Future<SendMessagesResponse> {
        return client.send(operation: "SendMessages", path: "/v1/apps/{application-id}/messages", httpMethod: "POST", input: input)
    }

    ///  Creates and sends a message to a list of users.
    public func sendUsersMessages(_ input: SendUsersMessagesRequest) -> Future<SendUsersMessagesResponse> {
        return client.send(operation: "SendUsersMessages", path: "/v1/apps/{application-id}/users-messages", httpMethod: "POST", input: input)
    }

    ///  Adds one or more tags (keys and values) to an application, campaign, or segment.
    @discardableResult public func tagResource(_ input: TagResourceRequest) -> Future<Void> {
        return client.send(operation: "TagResource", path: "/v1/tags/{resource-arn}", httpMethod: "POST", input: input)
    }

    ///  Removes one or more tags (keys and values) from an application, campaign, or segment.
    @discardableResult public func untagResource(_ input: UntagResourceRequest) -> Future<Void> {
        return client.send(operation: "UntagResource", path: "/v1/tags/{resource-arn}", httpMethod: "DELETE", input: input)
    }

    ///  Updates the ADM channel settings for an application.
    public func updateAdmChannel(_ input: UpdateAdmChannelRequest) -> Future<UpdateAdmChannelResponse> {
        return client.send(operation: "UpdateAdmChannel", path: "/v1/apps/{application-id}/channels/adm", httpMethod: "PUT", input: input)
    }

    ///  Updates the APNs channel settings for an application.
    public func updateApnsChannel(_ input: UpdateApnsChannelRequest) -> Future<UpdateApnsChannelResponse> {
        return client.send(operation: "UpdateApnsChannel", path: "/v1/apps/{application-id}/channels/apns", httpMethod: "PUT", input: input)
    }

    ///  Updates the APNs sandbox channel settings for an application.
    public func updateApnsSandboxChannel(_ input: UpdateApnsSandboxChannelRequest) -> Future<UpdateApnsSandboxChannelResponse> {
        return client.send(operation: "UpdateApnsSandboxChannel", path: "/v1/apps/{application-id}/channels/apns_sandbox", httpMethod: "PUT", input: input)
    }

    ///  Updates the APNs VoIP channel settings for an application.
    public func updateApnsVoipChannel(_ input: UpdateApnsVoipChannelRequest) -> Future<UpdateApnsVoipChannelResponse> {
        return client.send(operation: "UpdateApnsVoipChannel", path: "/v1/apps/{application-id}/channels/apns_voip", httpMethod: "PUT", input: input)
    }

    ///  Updates the settings for the APNs VoIP sandbox channel for an application.
    public func updateApnsVoipSandboxChannel(_ input: UpdateApnsVoipSandboxChannelRequest) -> Future<UpdateApnsVoipSandboxChannelResponse> {
        return client.send(operation: "UpdateApnsVoipSandboxChannel", path: "/v1/apps/{application-id}/channels/apns_voip_sandbox", httpMethod: "PUT", input: input)
    }

    ///  Updates the settings for an application.
    public func updateApplicationSettings(_ input: UpdateApplicationSettingsRequest) -> Future<UpdateApplicationSettingsResponse> {
        return client.send(operation: "UpdateApplicationSettings", path: "/v1/apps/{application-id}/settings", httpMethod: "PUT", input: input)
    }

    ///  Updates the settings of the Baidu channel for an application.
    public func updateBaiduChannel(_ input: UpdateBaiduChannelRequest) -> Future<UpdateBaiduChannelResponse> {
        return client.send(operation: "UpdateBaiduChannel", path: "/v1/apps/{application-id}/channels/baidu", httpMethod: "PUT", input: input)
    }

    ///  Updates the settings for a campaign.
    public func updateCampaign(_ input: UpdateCampaignRequest) -> Future<UpdateCampaignResponse> {
        return client.send(operation: "UpdateCampaign", path: "/v1/apps/{application-id}/campaigns/{campaign-id}", httpMethod: "PUT", input: input)
    }

    ///  Updates the status and settings of the email channel for an application.
    public func updateEmailChannel(_ input: UpdateEmailChannelRequest) -> Future<UpdateEmailChannelResponse> {
        return client.send(operation: "UpdateEmailChannel", path: "/v1/apps/{application-id}/channels/email", httpMethod: "PUT", input: input)
    }

    ///  Creates a new endpoint for an application or updates the settings and attributes of an existing endpoint for an application. You can also use this operation to define custom attributes (Attributes, Metrics, and UserAttributes properties) for an endpoint.
    public func updateEndpoint(_ input: UpdateEndpointRequest) -> Future<UpdateEndpointResponse> {
        return client.send(operation: "UpdateEndpoint", path: "/v1/apps/{application-id}/endpoints/{endpoint-id}", httpMethod: "PUT", input: input)
    }

    ///   Creates a new batch of endpoints for an application or updates the settings and attributes of a batch of existing endpoints for an application. You can also use this operation to define custom attributes (Attributes, Metrics, and UserAttributes properties) for a batch of endpoints.
    public func updateEndpointsBatch(_ input: UpdateEndpointsBatchRequest) -> Future<UpdateEndpointsBatchResponse> {
        return client.send(operation: "UpdateEndpointsBatch", path: "/v1/apps/{application-id}/endpoints", httpMethod: "PUT", input: input)
    }

    ///  Updates the status and settings of the GCM channel for an application.
    public func updateGcmChannel(_ input: UpdateGcmChannelRequest) -> Future<UpdateGcmChannelResponse> {
        return client.send(operation: "UpdateGcmChannel", path: "/v1/apps/{application-id}/channels/gcm", httpMethod: "PUT", input: input)
    }

    ///  Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.
    public func updateSegment(_ input: UpdateSegmentRequest) -> Future<UpdateSegmentResponse> {
        return client.send(operation: "UpdateSegment", path: "/v1/apps/{application-id}/segments/{segment-id}", httpMethod: "PUT", input: input)
    }

    ///  Updates the status and settings of the SMS channel for an application.
    public func updateSmsChannel(_ input: UpdateSmsChannelRequest) -> Future<UpdateSmsChannelResponse> {
        return client.send(operation: "UpdateSmsChannel", path: "/v1/apps/{application-id}/channels/sms", httpMethod: "PUT", input: input)
    }

    ///  Updates the status and settings of the voice channel for an application.
    public func updateVoiceChannel(_ input: UpdateVoiceChannelRequest) -> Future<UpdateVoiceChannelResponse> {
        return client.send(operation: "UpdateVoiceChannel", path: "/v1/apps/{application-id}/channels/voice", httpMethod: "PUT", input: input)
    }
}
