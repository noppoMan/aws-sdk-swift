// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension DataExchange {
    //MARK: Enums

    public enum AssetType: String, CustomStringConvertible, Codable {
        case s3Snapshot = "S3_SNAPSHOT"
        public var description: String { return self.rawValue }
    }

    public enum Code: String, CustomStringConvertible, Codable {
        case accessDeniedException = "ACCESS_DENIED_EXCEPTION"
        case internalServerException = "INTERNAL_SERVER_EXCEPTION"
        case malwareDetected = "MALWARE_DETECTED"
        case resourceNotFoundException = "RESOURCE_NOT_FOUND_EXCEPTION"
        case serviceQuotaExceededException = "SERVICE_QUOTA_EXCEEDED_EXCEPTION"
        case validationException = "VALIDATION_EXCEPTION"
        case malwareScanEncryptedFile = "MALWARE_SCAN_ENCRYPTED_FILE"
        public var description: String { return self.rawValue }
    }

    public enum JobErrorLimitName: String, CustomStringConvertible, Codable {
        case assetsPerRevision = "Assets per revision"
        case assetSizeInGb = "Asset size in GB"
        public var description: String { return self.rawValue }
    }

    public enum JobErrorResourceTypes: String, CustomStringConvertible, Codable {
        case revision = "REVISION"
        case asset = "ASSET"
        public var description: String { return self.rawValue }
    }

    public enum Origin: String, CustomStringConvertible, Codable {
        case owned = "OWNED"
        case entitled = "ENTITLED"
        public var description: String { return self.rawValue }
    }

    public enum ServerSideEncryptionTypes: String, CustomStringConvertible, Codable {
        case awsKms = "aws:kms"
        case aes256 = "AES256"
        public var description: String { return self.rawValue }
    }

    public enum State: String, CustomStringConvertible, Codable {
        case waiting = "WAITING"
        case inProgress = "IN_PROGRESS"
        case error = "ERROR"
        case completed = "COMPLETED"
        case cancelled = "CANCELLED"
        case timedOut = "TIMED_OUT"
        public var description: String { return self.rawValue }
    }

    public enum `Type`: String, CustomStringConvertible, Codable {
        case importAssetsFromS3 = "IMPORT_ASSETS_FROM_S3"
        case importAssetFromSignedUrl = "IMPORT_ASSET_FROM_SIGNED_URL"
        case exportAssetsToS3 = "EXPORT_ASSETS_TO_S3"
        case exportAssetToSignedUrl = "EXPORT_ASSET_TO_SIGNED_URL"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AssetDestinationEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetId", required: true, type: .string), 
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]

        /// The unique identifier for the asset.
        public let assetId: String
        /// The S3 bucket that is the destination for the asset.
        public let bucket: String
        /// The name of the object in Amazon S3 for the asset.
        public let key: String?

        public init(assetId: String, bucket: String, key: String? = nil) {
            self.assetId = assetId
            self.bucket = bucket
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case assetId = "AssetId"
            case bucket = "Bucket"
            case key = "Key"
        }
    }

    public struct AssetDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3SnapshotAsset", required: false, type: .structure)
        ]

        public let s3SnapshotAsset: S3SnapshotAsset?

        public init(s3SnapshotAsset: S3SnapshotAsset? = nil) {
            self.s3SnapshotAsset = s3SnapshotAsset
        }

        private enum CodingKeys: String, CodingKey {
            case s3SnapshotAsset = "S3SnapshotAsset"
        }
    }

    public struct AssetEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: true, type: .string), 
            AWSShapeMember(label: "AssetDetails", required: true, type: .structure), 
            AWSShapeMember(label: "AssetType", required: true, type: .enum), 
            AWSShapeMember(label: "CreatedAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "DataSetId", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "RevisionId", required: true, type: .string), 
            AWSShapeMember(label: "SourceId", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedAt", required: true, type: .timestamp)
        ]

        /// The ARN for the asset.
        public let arn: String
        /// Information about the asset, including its size.
        public let assetDetails: AssetDetails
        /// The type of file your data is stored in. Currently, the supported asset type is S3_SNAPSHOT.
        public let assetType: AssetType
        /// The date and time that the asset was created, in ISO 8601 format.
        public let createdAt: TimeStamp
        /// The unique identifier for the data set associated with this asset.
        public let dataSetId: String
        /// The unique identifier for the asset.
        public let id: String
        /// The name of the asset. When importing from Amazon S3, the S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target S3 object key.
        public let name: String
        /// The unique identifier for the revision associated with this asset.
        public let revisionId: String
        /// The asset ID of the owned asset corresponding to the entitled asset being viewed. This parameter is returned when an asset owner is viewing the entitled copy of its owned asset.
        public let sourceId: String?
        /// The date and time that the asset was last updated, in ISO 8601 format.
        public let updatedAt: TimeStamp

        public init(arn: String, assetDetails: AssetDetails, assetType: AssetType, createdAt: TimeStamp, dataSetId: String, id: String, name: String, revisionId: String, sourceId: String? = nil, updatedAt: TimeStamp) {
            self.arn = arn
            self.assetDetails = assetDetails
            self.assetType = assetType
            self.createdAt = createdAt
            self.dataSetId = dataSetId
            self.id = id
            self.name = name
            self.revisionId = revisionId
            self.sourceId = sourceId
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case assetDetails = "AssetDetails"
            case assetType = "AssetType"
            case createdAt = "CreatedAt"
            case dataSetId = "DataSetId"
            case id = "Id"
            case name = "Name"
            case revisionId = "RevisionId"
            case sourceId = "SourceId"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct AssetSourceEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]

        /// The S3 bucket that's part of the source of the asset.
        public let bucket: String
        /// The name of the object in Amazon S3 for the asset.
        public let key: String

        public init(bucket: String, key: String) {
            self.bucket = bucket
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
        }
    }

    public struct CancelJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", location: .uri(locationName: "JobId"), required: true, type: .string)
        ]

        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct CreateDataSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetType", required: true, type: .enum), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .map)
        ]

        /// The type of file your data is stored in. Currently, the supported asset type is S3_SNAPSHOT.
        public let assetType: AssetType
        /// A description for the data set. This value can be up to 16,348 characters long.
        public let description: String
        /// The name of the data set.
        public let name: String
        /// A data set tag is an optional label that you can assign to a data set when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.
        public let tags: [String: String]?

        public init(assetType: AssetType, description: String, name: String, tags: [String: String]? = nil) {
            self.assetType = assetType
            self.description = description
            self.name = name
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case assetType = "AssetType"
            case description = "Description"
            case name = "Name"
            case tags = "Tags"
        }
    }

    public struct CreateDataSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "AssetType", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Origin", required: false, type: .enum), 
            AWSShapeMember(label: "OriginDetails", required: false, type: .structure), 
            AWSShapeMember(label: "SourceId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .map), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .timestamp)
        ]

        public let arn: String?
        public let assetType: AssetType?
        public let createdAt: TimeStamp?
        public let description: String?
        public let id: String?
        public let name: String?
        public let origin: Origin?
        public let originDetails: OriginDetails?
        public let sourceId: String?
        public let tags: [String: String]?
        public let updatedAt: TimeStamp?

        public init(arn: String? = nil, assetType: AssetType? = nil, createdAt: TimeStamp? = nil, description: String? = nil, id: String? = nil, name: String? = nil, origin: Origin? = nil, originDetails: OriginDetails? = nil, sourceId: String? = nil, tags: [String: String]? = nil, updatedAt: TimeStamp? = nil) {
            self.arn = arn
            self.assetType = assetType
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.name = name
            self.origin = origin
            self.originDetails = originDetails
            self.sourceId = sourceId
            self.tags = tags
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case assetType = "AssetType"
            case createdAt = "CreatedAt"
            case description = "Description"
            case id = "Id"
            case name = "Name"
            case origin = "Origin"
            case originDetails = "OriginDetails"
            case sourceId = "SourceId"
            case tags = "Tags"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct CreateJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", required: true, type: .structure), 
            AWSShapeMember(label: "Type", required: true, type: .enum)
        ]

        /// The details for the CreateJob request.
        public let details: RequestDetails
        /// The type of job to be created.
        public let `type`: `Type`

        public init(details: RequestDetails, type: `Type`) {
            self.details = details
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try self.details.validate(name: "\(name).details")
        }

        private enum CodingKeys: String, CodingKey {
            case details = "Details"
            case `type` = "Type"
        }
    }

    public struct CreateJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "Details", required: false, type: .structure), 
            AWSShapeMember(label: "Errors", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .timestamp)
        ]

        public let arn: String?
        public let createdAt: TimeStamp?
        public let details: ResponseDetails?
        public let errors: [JobError]?
        public let id: String?
        public let state: State?
        public let `type`: `Type`?
        public let updatedAt: TimeStamp?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, details: ResponseDetails? = nil, errors: [JobError]? = nil, id: String? = nil, state: State? = nil, type: `Type`? = nil, updatedAt: TimeStamp? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.details = details
            self.errors = errors
            self.id = id
            self.state = state
            self.`type` = `type`
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case createdAt = "CreatedAt"
            case details = "Details"
            case errors = "Errors"
            case id = "Id"
            case state = "State"
            case `type` = "Type"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct CreateRevisionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "DataSetId", location: .uri(locationName: "DataSetId"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .map)
        ]

        /// An optional comment about the revision.
        public let comment: String?
        public let dataSetId: String
        /// A revision tag is an optional label that you can assign to a revision when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.
        public let tags: [String: String]?

        public init(comment: String? = nil, dataSetId: String, tags: [String: String]? = nil) {
            self.comment = comment
            self.dataSetId = dataSetId
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.comment, name:"comment", parent: name, max: 16384)
            try validate(self.comment, name:"comment", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case dataSetId = "DataSetId"
            case tags = "Tags"
        }
    }

    public struct CreateRevisionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "DataSetId", required: false, type: .string), 
            AWSShapeMember(label: "Finalized", required: false, type: .boolean), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "SourceId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .map), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .timestamp)
        ]

        public let arn: String?
        public let comment: String?
        public let createdAt: TimeStamp?
        public let dataSetId: String?
        public let finalized: Bool?
        public let id: String?
        public let sourceId: String?
        public let tags: [String: String]?
        public let updatedAt: TimeStamp?

        public init(arn: String? = nil, comment: String? = nil, createdAt: TimeStamp? = nil, dataSetId: String? = nil, finalized: Bool? = nil, id: String? = nil, sourceId: String? = nil, tags: [String: String]? = nil, updatedAt: TimeStamp? = nil) {
            self.arn = arn
            self.comment = comment
            self.createdAt = createdAt
            self.dataSetId = dataSetId
            self.finalized = finalized
            self.id = id
            self.sourceId = sourceId
            self.tags = tags
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case comment = "Comment"
            case createdAt = "CreatedAt"
            case dataSetId = "DataSetId"
            case finalized = "Finalized"
            case id = "Id"
            case sourceId = "SourceId"
            case tags = "Tags"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct DataSetEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: true, type: .string), 
            AWSShapeMember(label: "AssetType", required: true, type: .enum), 
            AWSShapeMember(label: "CreatedAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Origin", required: true, type: .enum), 
            AWSShapeMember(label: "OriginDetails", required: false, type: .structure), 
            AWSShapeMember(label: "SourceId", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedAt", required: true, type: .timestamp)
        ]

        /// The ARN for the data set.
        public let arn: String
        /// The type of file your data is stored in. Currently, the supported asset type is S3_SNAPSHOT.
        public let assetType: AssetType
        /// The date and time that the data set was created, in ISO 8601 format.
        public let createdAt: TimeStamp
        /// The description for the data set.
        public let description: String
        /// The unique identifier for the data set.
        public let id: String
        /// The name of the data set.
        public let name: String
        /// A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers).
        public let origin: Origin
        /// If the origin of this data set is ENTITLED, includes the details for the product on AWS Marketplace.
        public let originDetails: OriginDetails?
        /// The data set ID of the owned data set corresponding to the entitled data set being viewed. This parameter is returned when a data set owner is viewing the entitled copy of its owned data set.
        public let sourceId: String?
        /// The date and time that the data set was last updated, in ISO 8601 format.
        public let updatedAt: TimeStamp

        public init(arn: String, assetType: AssetType, createdAt: TimeStamp, description: String, id: String, name: String, origin: Origin, originDetails: OriginDetails? = nil, sourceId: String? = nil, updatedAt: TimeStamp) {
            self.arn = arn
            self.assetType = assetType
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.name = name
            self.origin = origin
            self.originDetails = originDetails
            self.sourceId = sourceId
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case assetType = "AssetType"
            case createdAt = "CreatedAt"
            case description = "Description"
            case id = "Id"
            case name = "Name"
            case origin = "Origin"
            case originDetails = "OriginDetails"
            case sourceId = "SourceId"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct DeleteAssetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetId", location: .uri(locationName: "AssetId"), required: true, type: .string), 
            AWSShapeMember(label: "DataSetId", location: .uri(locationName: "DataSetId"), required: true, type: .string), 
            AWSShapeMember(label: "RevisionId", location: .uri(locationName: "RevisionId"), required: true, type: .string)
        ]

        public let assetId: String
        public let dataSetId: String
        public let revisionId: String

        public init(assetId: String, dataSetId: String, revisionId: String) {
            self.assetId = assetId
            self.dataSetId = dataSetId
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case assetId = "AssetId"
            case dataSetId = "DataSetId"
            case revisionId = "RevisionId"
        }
    }

    public struct DeleteDataSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataSetId", location: .uri(locationName: "DataSetId"), required: true, type: .string)
        ]

        public let dataSetId: String

        public init(dataSetId: String) {
            self.dataSetId = dataSetId
        }

        private enum CodingKeys: String, CodingKey {
            case dataSetId = "DataSetId"
        }
    }

    public struct DeleteRevisionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataSetId", location: .uri(locationName: "DataSetId"), required: true, type: .string), 
            AWSShapeMember(label: "RevisionId", location: .uri(locationName: "RevisionId"), required: true, type: .string)
        ]

        public let dataSetId: String
        public let revisionId: String

        public init(dataSetId: String, revisionId: String) {
            self.dataSetId = dataSetId
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case dataSetId = "DataSetId"
            case revisionId = "RevisionId"
        }
    }

    public struct Details: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportAssetFromSignedUrlJobErrorDetails", required: false, type: .structure), 
            AWSShapeMember(label: "ImportAssetsFromS3JobErrorDetails", required: false, type: .list)
        ]

        public let importAssetFromSignedUrlJobErrorDetails: ImportAssetFromSignedUrlJobErrorDetails?
        public let importAssetsFromS3JobErrorDetails: [AssetSourceEntry]?

        public init(importAssetFromSignedUrlJobErrorDetails: ImportAssetFromSignedUrlJobErrorDetails? = nil, importAssetsFromS3JobErrorDetails: [AssetSourceEntry]? = nil) {
            self.importAssetFromSignedUrlJobErrorDetails = importAssetFromSignedUrlJobErrorDetails
            self.importAssetsFromS3JobErrorDetails = importAssetsFromS3JobErrorDetails
        }

        private enum CodingKeys: String, CodingKey {
            case importAssetFromSignedUrlJobErrorDetails = "ImportAssetFromSignedUrlJobErrorDetails"
            case importAssetsFromS3JobErrorDetails = "ImportAssetsFromS3JobErrorDetails"
        }
    }

    public struct ExportAssetToSignedUrlRequestDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetId", required: true, type: .string), 
            AWSShapeMember(label: "DataSetId", required: true, type: .string), 
            AWSShapeMember(label: "RevisionId", required: true, type: .string)
        ]

        /// The unique identifier for the asset that is exported to a signed URL.
        public let assetId: String
        /// The unique identifier for the data set associated with this export job.
        public let dataSetId: String
        /// The unique identifier for the revision associated with this export request.
        public let revisionId: String

        public init(assetId: String, dataSetId: String, revisionId: String) {
            self.assetId = assetId
            self.dataSetId = dataSetId
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case assetId = "AssetId"
            case dataSetId = "DataSetId"
            case revisionId = "RevisionId"
        }
    }

    public struct ExportAssetToSignedUrlResponseDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetId", required: true, type: .string), 
            AWSShapeMember(label: "DataSetId", required: true, type: .string), 
            AWSShapeMember(label: "RevisionId", required: true, type: .string), 
            AWSShapeMember(label: "SignedUrl", required: false, type: .string), 
            AWSShapeMember(label: "SignedUrlExpiresAt", required: false, type: .timestamp)
        ]

        /// The unique identifier for the asset associated with this export job.
        public let assetId: String
        /// The unique identifier for the data set associated with this export job.
        public let dataSetId: String
        /// The unique identifier for the revision associated with this export response.
        public let revisionId: String
        /// The signed URL for the export request.
        public let signedUrl: String?
        /// The date and time that the signed URL expires, in ISO 8601 format.
        public let signedUrlExpiresAt: TimeStamp?

        public init(assetId: String, dataSetId: String, revisionId: String, signedUrl: String? = nil, signedUrlExpiresAt: TimeStamp? = nil) {
            self.assetId = assetId
            self.dataSetId = dataSetId
            self.revisionId = revisionId
            self.signedUrl = signedUrl
            self.signedUrlExpiresAt = signedUrlExpiresAt
        }

        private enum CodingKeys: String, CodingKey {
            case assetId = "AssetId"
            case dataSetId = "DataSetId"
            case revisionId = "RevisionId"
            case signedUrl = "SignedUrl"
            case signedUrlExpiresAt = "SignedUrlExpiresAt"
        }
    }

    public struct ExportAssetsToS3RequestDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetDestinations", required: true, type: .list), 
            AWSShapeMember(label: "DataSetId", required: true, type: .string), 
            AWSShapeMember(label: "Encryption", required: false, type: .structure), 
            AWSShapeMember(label: "RevisionId", required: true, type: .string)
        ]

        /// The destination for the asset.
        public let assetDestinations: [AssetDestinationEntry]
        /// The unique identifier for the data set associated with this export job.
        public let dataSetId: String
        /// Encryption configuration for the export job.
        public let encryption: ExportServerSideEncryption?
        /// The unique identifier for the revision associated with this export request.
        public let revisionId: String

        public init(assetDestinations: [AssetDestinationEntry], dataSetId: String, encryption: ExportServerSideEncryption? = nil, revisionId: String) {
            self.assetDestinations = assetDestinations
            self.dataSetId = dataSetId
            self.encryption = encryption
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case assetDestinations = "AssetDestinations"
            case dataSetId = "DataSetId"
            case encryption = "Encryption"
            case revisionId = "RevisionId"
        }
    }

    public struct ExportAssetsToS3ResponseDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetDestinations", required: true, type: .list), 
            AWSShapeMember(label: "DataSetId", required: true, type: .string), 
            AWSShapeMember(label: "Encryption", required: false, type: .structure), 
            AWSShapeMember(label: "RevisionId", required: true, type: .string)
        ]

        /// The destination in Amazon S3 where the asset is exported.
        public let assetDestinations: [AssetDestinationEntry]
        /// The unique identifier for the data set associated with this export job.
        public let dataSetId: String
        /// Encryption configuration of the export job.
        public let encryption: ExportServerSideEncryption?
        /// The unique identifier for the revision associated with this export response.
        public let revisionId: String

        public init(assetDestinations: [AssetDestinationEntry], dataSetId: String, encryption: ExportServerSideEncryption? = nil, revisionId: String) {
            self.assetDestinations = assetDestinations
            self.dataSetId = dataSetId
            self.encryption = encryption
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case assetDestinations = "AssetDestinations"
            case dataSetId = "DataSetId"
            case encryption = "Encryption"
            case revisionId = "RevisionId"
        }
    }

    public struct ExportServerSideEncryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyArn", required: true, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .enum)
        ]

        /// The Amazon Resource Name (ARN) of the the AWS KMS key you want to use to encrypt the Amazon S3 objects. This parameter is required if you choose aws:kms as an encryption type.
        public let kmsKeyArn: String
        /// The type of server side encryption used for encrypting the objects in Amazon S3.
        public let `type`: ServerSideEncryptionTypes

        public init(kmsKeyArn: String, type: ServerSideEncryptionTypes) {
            self.kmsKeyArn = kmsKeyArn
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyArn = "KmsKeyArn"
            case `type` = "Type"
        }
    }

    public struct GetAssetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetId", location: .uri(locationName: "AssetId"), required: true, type: .string), 
            AWSShapeMember(label: "DataSetId", location: .uri(locationName: "DataSetId"), required: true, type: .string), 
            AWSShapeMember(label: "RevisionId", location: .uri(locationName: "RevisionId"), required: true, type: .string)
        ]

        public let assetId: String
        public let dataSetId: String
        public let revisionId: String

        public init(assetId: String, dataSetId: String, revisionId: String) {
            self.assetId = assetId
            self.dataSetId = dataSetId
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case assetId = "AssetId"
            case dataSetId = "DataSetId"
            case revisionId = "RevisionId"
        }
    }

    public struct GetAssetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "AssetDetails", required: false, type: .structure), 
            AWSShapeMember(label: "AssetType", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "DataSetId", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "RevisionId", required: false, type: .string), 
            AWSShapeMember(label: "SourceId", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .timestamp)
        ]

        public let arn: String?
        public let assetDetails: AssetDetails?
        public let assetType: AssetType?
        public let createdAt: TimeStamp?
        public let dataSetId: String?
        public let id: String?
        public let name: String?
        public let revisionId: String?
        public let sourceId: String?
        public let updatedAt: TimeStamp?

        public init(arn: String? = nil, assetDetails: AssetDetails? = nil, assetType: AssetType? = nil, createdAt: TimeStamp? = nil, dataSetId: String? = nil, id: String? = nil, name: String? = nil, revisionId: String? = nil, sourceId: String? = nil, updatedAt: TimeStamp? = nil) {
            self.arn = arn
            self.assetDetails = assetDetails
            self.assetType = assetType
            self.createdAt = createdAt
            self.dataSetId = dataSetId
            self.id = id
            self.name = name
            self.revisionId = revisionId
            self.sourceId = sourceId
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case assetDetails = "AssetDetails"
            case assetType = "AssetType"
            case createdAt = "CreatedAt"
            case dataSetId = "DataSetId"
            case id = "Id"
            case name = "Name"
            case revisionId = "RevisionId"
            case sourceId = "SourceId"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct GetDataSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataSetId", location: .uri(locationName: "DataSetId"), required: true, type: .string)
        ]

        public let dataSetId: String

        public init(dataSetId: String) {
            self.dataSetId = dataSetId
        }

        private enum CodingKeys: String, CodingKey {
            case dataSetId = "DataSetId"
        }
    }

    public struct GetDataSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "AssetType", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Origin", required: false, type: .enum), 
            AWSShapeMember(label: "OriginDetails", required: false, type: .structure), 
            AWSShapeMember(label: "SourceId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .map), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .timestamp)
        ]

        public let arn: String?
        public let assetType: AssetType?
        public let createdAt: TimeStamp?
        public let description: String?
        public let id: String?
        public let name: String?
        public let origin: Origin?
        public let originDetails: OriginDetails?
        public let sourceId: String?
        public let tags: [String: String]?
        public let updatedAt: TimeStamp?

        public init(arn: String? = nil, assetType: AssetType? = nil, createdAt: TimeStamp? = nil, description: String? = nil, id: String? = nil, name: String? = nil, origin: Origin? = nil, originDetails: OriginDetails? = nil, sourceId: String? = nil, tags: [String: String]? = nil, updatedAt: TimeStamp? = nil) {
            self.arn = arn
            self.assetType = assetType
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.name = name
            self.origin = origin
            self.originDetails = originDetails
            self.sourceId = sourceId
            self.tags = tags
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case assetType = "AssetType"
            case createdAt = "CreatedAt"
            case description = "Description"
            case id = "Id"
            case name = "Name"
            case origin = "Origin"
            case originDetails = "OriginDetails"
            case sourceId = "SourceId"
            case tags = "Tags"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct GetJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", location: .uri(locationName: "JobId"), required: true, type: .string)
        ]

        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct GetJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "Details", required: false, type: .structure), 
            AWSShapeMember(label: "Errors", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .timestamp)
        ]

        public let arn: String?
        public let createdAt: TimeStamp?
        public let details: ResponseDetails?
        public let errors: [JobError]?
        public let id: String?
        public let state: State?
        public let `type`: `Type`?
        public let updatedAt: TimeStamp?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, details: ResponseDetails? = nil, errors: [JobError]? = nil, id: String? = nil, state: State? = nil, type: `Type`? = nil, updatedAt: TimeStamp? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.details = details
            self.errors = errors
            self.id = id
            self.state = state
            self.`type` = `type`
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case createdAt = "CreatedAt"
            case details = "Details"
            case errors = "Errors"
            case id = "Id"
            case state = "State"
            case `type` = "Type"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct GetRevisionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataSetId", location: .uri(locationName: "DataSetId"), required: true, type: .string), 
            AWSShapeMember(label: "RevisionId", location: .uri(locationName: "RevisionId"), required: true, type: .string)
        ]

        public let dataSetId: String
        public let revisionId: String

        public init(dataSetId: String, revisionId: String) {
            self.dataSetId = dataSetId
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case dataSetId = "DataSetId"
            case revisionId = "RevisionId"
        }
    }

    public struct GetRevisionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "DataSetId", required: false, type: .string), 
            AWSShapeMember(label: "Finalized", required: false, type: .boolean), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "SourceId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .map), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .timestamp)
        ]

        public let arn: String?
        public let comment: String?
        public let createdAt: TimeStamp?
        public let dataSetId: String?
        public let finalized: Bool?
        public let id: String?
        public let sourceId: String?
        public let tags: [String: String]?
        public let updatedAt: TimeStamp?

        public init(arn: String? = nil, comment: String? = nil, createdAt: TimeStamp? = nil, dataSetId: String? = nil, finalized: Bool? = nil, id: String? = nil, sourceId: String? = nil, tags: [String: String]? = nil, updatedAt: TimeStamp? = nil) {
            self.arn = arn
            self.comment = comment
            self.createdAt = createdAt
            self.dataSetId = dataSetId
            self.finalized = finalized
            self.id = id
            self.sourceId = sourceId
            self.tags = tags
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case comment = "Comment"
            case createdAt = "CreatedAt"
            case dataSetId = "DataSetId"
            case finalized = "Finalized"
            case id = "Id"
            case sourceId = "SourceId"
            case tags = "Tags"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct ImportAssetFromSignedUrlJobErrorDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetName", required: true, type: .string)
        ]

        public let assetName: String

        public init(assetName: String) {
            self.assetName = assetName
        }

        private enum CodingKeys: String, CodingKey {
            case assetName = "AssetName"
        }
    }

    public struct ImportAssetFromSignedUrlRequestDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetName", required: true, type: .string), 
            AWSShapeMember(label: "DataSetId", required: true, type: .string), 
            AWSShapeMember(label: "Md5Hash", required: true, type: .string), 
            AWSShapeMember(label: "RevisionId", required: true, type: .string)
        ]

        /// The name of the asset. When importing from Amazon S3, the S3 object key is used as the asset name.
        public let assetName: String
        /// The unique identifier for the data set associated with this import job.
        public let dataSetId: String
        /// The Base64-encoded Md5 hash for the asset, used to ensure the integrity of the file at that location.
        public let md5Hash: String
        /// The unique identifier for the revision associated with this import request.
        public let revisionId: String

        public init(assetName: String, dataSetId: String, md5Hash: String, revisionId: String) {
            self.assetName = assetName
            self.dataSetId = dataSetId
            self.md5Hash = md5Hash
            self.revisionId = revisionId
        }

        public func validate(name: String) throws {
            try validate(self.md5Hash, name:"md5Hash", parent: name, max: 24)
            try validate(self.md5Hash, name:"md5Hash", parent: name, min: 24)
            try validate(self.md5Hash, name:"md5Hash", parent: name, pattern: "/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/")
        }

        private enum CodingKeys: String, CodingKey {
            case assetName = "AssetName"
            case dataSetId = "DataSetId"
            case md5Hash = "Md5Hash"
            case revisionId = "RevisionId"
        }
    }

    public struct ImportAssetFromSignedUrlResponseDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetName", required: true, type: .string), 
            AWSShapeMember(label: "DataSetId", required: true, type: .string), 
            AWSShapeMember(label: "Md5Hash", required: false, type: .string), 
            AWSShapeMember(label: "RevisionId", required: true, type: .string), 
            AWSShapeMember(label: "SignedUrl", required: false, type: .string), 
            AWSShapeMember(label: "SignedUrlExpiresAt", required: false, type: .timestamp)
        ]

        /// The name for the asset associated with this import response.
        public let assetName: String
        /// The unique identifier for the data set associated with this import job.
        public let dataSetId: String
        /// The Base64-encoded Md5 hash for the asset, used to ensure the integrity of the file at that location.
        public let md5Hash: String?
        /// The unique identifier for the revision associated with this import response.
        public let revisionId: String
        /// The signed URL.
        public let signedUrl: String?
        /// The time and date at which the signed URL expires, in ISO 8601 format.
        public let signedUrlExpiresAt: TimeStamp?

        public init(assetName: String, dataSetId: String, md5Hash: String? = nil, revisionId: String, signedUrl: String? = nil, signedUrlExpiresAt: TimeStamp? = nil) {
            self.assetName = assetName
            self.dataSetId = dataSetId
            self.md5Hash = md5Hash
            self.revisionId = revisionId
            self.signedUrl = signedUrl
            self.signedUrlExpiresAt = signedUrlExpiresAt
        }

        private enum CodingKeys: String, CodingKey {
            case assetName = "AssetName"
            case dataSetId = "DataSetId"
            case md5Hash = "Md5Hash"
            case revisionId = "RevisionId"
            case signedUrl = "SignedUrl"
            case signedUrlExpiresAt = "SignedUrlExpiresAt"
        }
    }

    public struct ImportAssetsFromS3RequestDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetSources", required: true, type: .list), 
            AWSShapeMember(label: "DataSetId", required: true, type: .string), 
            AWSShapeMember(label: "RevisionId", required: true, type: .string)
        ]

        /// Is a list of S3 bucket and object key pairs.
        public let assetSources: [AssetSourceEntry]
        /// The unique identifier for the data set associated with this import job.
        public let dataSetId: String
        /// The unique identifier for the revision associated with this import request.
        public let revisionId: String

        public init(assetSources: [AssetSourceEntry], dataSetId: String, revisionId: String) {
            self.assetSources = assetSources
            self.dataSetId = dataSetId
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case assetSources = "AssetSources"
            case dataSetId = "DataSetId"
            case revisionId = "RevisionId"
        }
    }

    public struct ImportAssetsFromS3ResponseDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetSources", required: true, type: .list), 
            AWSShapeMember(label: "DataSetId", required: true, type: .string), 
            AWSShapeMember(label: "RevisionId", required: true, type: .string)
        ]

        /// Is a list of Amazon S3 bucket and object key pairs.
        public let assetSources: [AssetSourceEntry]
        /// The unique identifier for the data set associated with this import job.
        public let dataSetId: String
        /// The unique identifier for the revision associated with this import response.
        public let revisionId: String

        public init(assetSources: [AssetSourceEntry], dataSetId: String, revisionId: String) {
            self.assetSources = assetSources
            self.dataSetId = dataSetId
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case assetSources = "AssetSources"
            case dataSetId = "DataSetId"
            case revisionId = "RevisionId"
        }
    }

    public struct JobEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: true, type: .string), 
            AWSShapeMember(label: "CreatedAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "Details", required: true, type: .structure), 
            AWSShapeMember(label: "Errors", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "State", required: true, type: .enum), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "UpdatedAt", required: true, type: .timestamp)
        ]

        /// The ARN for the job.
        public let arn: String
        /// The date and time that the job was created, in ISO 8601 format.
        public let createdAt: TimeStamp
        /// Details of the operation to be performed by the job, such as export destination details or import source details.
        public let details: ResponseDetails
        /// Errors for jobs.
        public let errors: [JobError]?
        /// The unique identifier for the job.
        public let id: String
        /// The state of the job.
        public let state: State
        /// The job type.
        public let `type`: `Type`
        /// The date and time that the job was last updated, in ISO 8601 format.
        public let updatedAt: TimeStamp

        public init(arn: String, createdAt: TimeStamp, details: ResponseDetails, errors: [JobError]? = nil, id: String, state: State, type: `Type`, updatedAt: TimeStamp) {
            self.arn = arn
            self.createdAt = createdAt
            self.details = details
            self.errors = errors
            self.id = id
            self.state = state
            self.`type` = `type`
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case createdAt = "CreatedAt"
            case details = "Details"
            case errors = "Errors"
            case id = "Id"
            case state = "State"
            case `type` = "Type"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct JobError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: true, type: .enum), 
            AWSShapeMember(label: "Details", required: false, type: .structure), 
            AWSShapeMember(label: "LimitName", required: false, type: .enum), 
            AWSShapeMember(label: "LimitValue", required: false, type: .double), 
            AWSShapeMember(label: "Message", required: true, type: .string), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: false, type: .enum)
        ]

        /// The code for the job error.
        public let code: Code
        public let details: Details?
        /// The name of the limit that was reached.
        public let limitName: JobErrorLimitName?
        /// The value of the exceeded limit.
        public let limitValue: Double?
        /// The message related to the job error.
        public let message: String
        /// The unique identifier for the resource related to the error.
        public let resourceId: String?
        /// The type of resource related to the error.
        public let resourceType: JobErrorResourceTypes?

        public init(code: Code, details: Details? = nil, limitName: JobErrorLimitName? = nil, limitValue: Double? = nil, message: String, resourceId: String? = nil, resourceType: JobErrorResourceTypes? = nil) {
            self.code = code
            self.details = details
            self.limitName = limitName
            self.limitValue = limitValue
            self.message = message
            self.resourceId = resourceId
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case details = "Details"
            case limitName = "LimitName"
            case limitValue = "LimitValue"
            case message = "Message"
            case resourceId = "ResourceId"
            case resourceType = "ResourceType"
        }
    }

    public struct ListDataSetRevisionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataSetId", location: .uri(locationName: "DataSetId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let dataSetId: String
        public let maxResults: Int?
        public let nextToken: String?

        public init(dataSetId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dataSetId = dataSetId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 25)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dataSetId = "DataSetId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListDataSetRevisionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Revisions", required: false, type: .list)
        ]

        public let nextToken: String?
        public let revisions: [RevisionEntry]?

        public init(nextToken: String? = nil, revisions: [RevisionEntry]? = nil) {
            self.nextToken = nextToken
            self.revisions = revisions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case revisions = "Revisions"
        }
    }

    public struct ListDataSetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Origin", location: .querystring(locationName: "origin"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?
        public let origin: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, origin: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.origin = origin
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 25)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case origin = "origin"
        }
    }

    public struct ListDataSetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataSets", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        public let dataSets: [DataSetEntry]?
        public let nextToken: String?

        public init(dataSets: [DataSetEntry]? = nil, nextToken: String? = nil) {
            self.dataSets = dataSets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dataSets = "DataSets"
            case nextToken = "NextToken"
        }
    }

    public struct ListJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataSetId", location: .querystring(locationName: "dataSetId"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "RevisionId", location: .querystring(locationName: "revisionId"), required: false, type: .string)
        ]

        public let dataSetId: String?
        public let maxResults: Int?
        public let nextToken: String?
        public let revisionId: String?

        public init(dataSetId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, revisionId: String? = nil) {
            self.dataSetId = dataSetId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.revisionId = revisionId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 25)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dataSetId = "dataSetId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case revisionId = "revisionId"
        }
    }

    public struct ListJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Jobs", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        public let jobs: [JobEntry]?
        public let nextToken: String?

        public init(jobs: [JobEntry]? = nil, nextToken: String? = nil) {
            self.jobs = jobs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case jobs = "Jobs"
            case nextToken = "NextToken"
        }
    }

    public struct ListRevisionAssetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataSetId", location: .uri(locationName: "DataSetId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "RevisionId", location: .uri(locationName: "RevisionId"), required: true, type: .string)
        ]

        public let dataSetId: String
        public let maxResults: Int?
        public let nextToken: String?
        public let revisionId: String

        public init(dataSetId: String, maxResults: Int? = nil, nextToken: String? = nil, revisionId: String) {
            self.dataSetId = dataSetId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.revisionId = revisionId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 25)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dataSetId = "DataSetId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case revisionId = "RevisionId"
        }
    }

    public struct ListRevisionAssetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Assets", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        public let assets: [AssetEntry]?
        public let nextToken: String?

        public init(assets: [AssetEntry]? = nil, nextToken: String? = nil) {
            self.assets = assets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case assets = "Assets"
            case nextToken = "NextToken"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string)
        ]

        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct OriginDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]

        public let productId: String

        public init(productId: String) {
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
        }
    }

    public struct RequestDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportAssetsToS3", required: false, type: .structure), 
            AWSShapeMember(label: "ExportAssetToSignedUrl", required: false, type: .structure), 
            AWSShapeMember(label: "ImportAssetFromSignedUrl", required: false, type: .structure), 
            AWSShapeMember(label: "ImportAssetsFromS3", required: false, type: .structure)
        ]

        /// Details about the export to Amazon S3 request.
        public let exportAssetsToS3: ExportAssetsToS3RequestDetails?
        /// Details about the export to signed URL request.
        public let exportAssetToSignedUrl: ExportAssetToSignedUrlRequestDetails?
        /// Details about the import from signed URL request.
        public let importAssetFromSignedUrl: ImportAssetFromSignedUrlRequestDetails?
        /// Details about the import from Amazon S3 request.
        public let importAssetsFromS3: ImportAssetsFromS3RequestDetails?

        public init(exportAssetsToS3: ExportAssetsToS3RequestDetails? = nil, exportAssetToSignedUrl: ExportAssetToSignedUrlRequestDetails? = nil, importAssetFromSignedUrl: ImportAssetFromSignedUrlRequestDetails? = nil, importAssetsFromS3: ImportAssetsFromS3RequestDetails? = nil) {
            self.exportAssetsToS3 = exportAssetsToS3
            self.exportAssetToSignedUrl = exportAssetToSignedUrl
            self.importAssetFromSignedUrl = importAssetFromSignedUrl
            self.importAssetsFromS3 = importAssetsFromS3
        }

        public func validate(name: String) throws {
            try self.importAssetFromSignedUrl?.validate(name: "\(name).importAssetFromSignedUrl")
        }

        private enum CodingKeys: String, CodingKey {
            case exportAssetsToS3 = "ExportAssetsToS3"
            case exportAssetToSignedUrl = "ExportAssetToSignedUrl"
            case importAssetFromSignedUrl = "ImportAssetFromSignedUrl"
            case importAssetsFromS3 = "ImportAssetsFromS3"
        }
    }

    public struct ResponseDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportAssetsToS3", required: false, type: .structure), 
            AWSShapeMember(label: "ExportAssetToSignedUrl", required: false, type: .structure), 
            AWSShapeMember(label: "ImportAssetFromSignedUrl", required: false, type: .structure), 
            AWSShapeMember(label: "ImportAssetsFromS3", required: false, type: .structure)
        ]

        /// Details for the export to Amazon S3 response.
        public let exportAssetsToS3: ExportAssetsToS3ResponseDetails?
        /// Details for the export to signed URL response.
        public let exportAssetToSignedUrl: ExportAssetToSignedUrlResponseDetails?
        /// Details for the import from signed URL response.
        public let importAssetFromSignedUrl: ImportAssetFromSignedUrlResponseDetails?
        /// Details for the import from Amazon S3 response.
        public let importAssetsFromS3: ImportAssetsFromS3ResponseDetails?

        public init(exportAssetsToS3: ExportAssetsToS3ResponseDetails? = nil, exportAssetToSignedUrl: ExportAssetToSignedUrlResponseDetails? = nil, importAssetFromSignedUrl: ImportAssetFromSignedUrlResponseDetails? = nil, importAssetsFromS3: ImportAssetsFromS3ResponseDetails? = nil) {
            self.exportAssetsToS3 = exportAssetsToS3
            self.exportAssetToSignedUrl = exportAssetToSignedUrl
            self.importAssetFromSignedUrl = importAssetFromSignedUrl
            self.importAssetsFromS3 = importAssetsFromS3
        }

        private enum CodingKeys: String, CodingKey {
            case exportAssetsToS3 = "ExportAssetsToS3"
            case exportAssetToSignedUrl = "ExportAssetToSignedUrl"
            case importAssetFromSignedUrl = "ImportAssetFromSignedUrl"
            case importAssetsFromS3 = "ImportAssetsFromS3"
        }
    }

    public struct RevisionEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: true, type: .string), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "CreatedAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "DataSetId", required: true, type: .string), 
            AWSShapeMember(label: "Finalized", required: false, type: .boolean), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "SourceId", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedAt", required: true, type: .timestamp)
        ]

        /// The ARN for the revision.
        public let arn: String
        /// An optional comment about the revision.
        public let comment: String?
        /// The date and time that the revision was created, in ISO 8601 format.
        public let createdAt: TimeStamp
        /// The unique identifier for the data set associated with this revision.
        public let dataSetId: String
        /// To publish a revision to a data set in a product, the revision must first be finalized. Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products. Finalized revisions can be published through the AWS Data Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace Catalog API action. When using the API, revisions are uniquely identified by their ARN.
        public let finalized: Bool?
        /// The unique identifier for the revision.
        public let id: String
        /// The revision ID of the owned revision corresponding to the entitled revision being viewed. This parameter is returned when a revision owner is viewing the entitled copy of its owned revision.
        public let sourceId: String?
        /// The date and time that the revision was last updated, in ISO 8601 format.
        public let updatedAt: TimeStamp

        public init(arn: String, comment: String? = nil, createdAt: TimeStamp, dataSetId: String, finalized: Bool? = nil, id: String, sourceId: String? = nil, updatedAt: TimeStamp) {
            self.arn = arn
            self.comment = comment
            self.createdAt = createdAt
            self.dataSetId = dataSetId
            self.finalized = finalized
            self.id = id
            self.sourceId = sourceId
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case comment = "Comment"
            case createdAt = "CreatedAt"
            case dataSetId = "DataSetId"
            case finalized = "Finalized"
            case id = "Id"
            case sourceId = "SourceId"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct S3SnapshotAsset: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Size", required: true, type: .double)
        ]

        /// The size of the S3 object that is the object.
        public let size: Double

        public init(size: Double) {
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case size = "Size"
        }
    }

    public struct StartJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", location: .uri(locationName: "JobId"), required: true, type: .string)
        ]

        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct StartJobResponse: AWSShape {


        public init() {
        }

    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: true, type: .map)
        ]

        public let resourceArn: String
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
            case tags = "tags"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list)
        ]

        public let resourceArn: String
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UpdateAssetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssetId", location: .uri(locationName: "AssetId"), required: true, type: .string), 
            AWSShapeMember(label: "DataSetId", location: .uri(locationName: "DataSetId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "RevisionId", location: .uri(locationName: "RevisionId"), required: true, type: .string)
        ]

        public let assetId: String
        public let dataSetId: String
        /// The name of the asset. When importing from Amazon S3, the S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target S3 object key.
        public let name: String
        public let revisionId: String

        public init(assetId: String, dataSetId: String, name: String, revisionId: String) {
            self.assetId = assetId
            self.dataSetId = dataSetId
            self.name = name
            self.revisionId = revisionId
        }

        private enum CodingKeys: String, CodingKey {
            case assetId = "AssetId"
            case dataSetId = "DataSetId"
            case name = "Name"
            case revisionId = "RevisionId"
        }
    }

    public struct UpdateAssetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "AssetDetails", required: false, type: .structure), 
            AWSShapeMember(label: "AssetType", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "DataSetId", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "RevisionId", required: false, type: .string), 
            AWSShapeMember(label: "SourceId", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .timestamp)
        ]

        public let arn: String?
        public let assetDetails: AssetDetails?
        public let assetType: AssetType?
        public let createdAt: TimeStamp?
        public let dataSetId: String?
        public let id: String?
        public let name: String?
        public let revisionId: String?
        public let sourceId: String?
        public let updatedAt: TimeStamp?

        public init(arn: String? = nil, assetDetails: AssetDetails? = nil, assetType: AssetType? = nil, createdAt: TimeStamp? = nil, dataSetId: String? = nil, id: String? = nil, name: String? = nil, revisionId: String? = nil, sourceId: String? = nil, updatedAt: TimeStamp? = nil) {
            self.arn = arn
            self.assetDetails = assetDetails
            self.assetType = assetType
            self.createdAt = createdAt
            self.dataSetId = dataSetId
            self.id = id
            self.name = name
            self.revisionId = revisionId
            self.sourceId = sourceId
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case assetDetails = "AssetDetails"
            case assetType = "AssetType"
            case createdAt = "CreatedAt"
            case dataSetId = "DataSetId"
            case id = "Id"
            case name = "Name"
            case revisionId = "RevisionId"
            case sourceId = "SourceId"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct UpdateDataSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataSetId", location: .uri(locationName: "DataSetId"), required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]

        public let dataSetId: String
        /// The description for the data set.
        public let description: String?
        /// The name of the data set.
        public let name: String?

        public init(dataSetId: String, description: String? = nil, name: String? = nil) {
            self.dataSetId = dataSetId
            self.description = description
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case dataSetId = "DataSetId"
            case description = "Description"
            case name = "Name"
        }
    }

    public struct UpdateDataSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "AssetType", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Origin", required: false, type: .enum), 
            AWSShapeMember(label: "OriginDetails", required: false, type: .structure), 
            AWSShapeMember(label: "SourceId", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .timestamp)
        ]

        public let arn: String?
        public let assetType: AssetType?
        public let createdAt: TimeStamp?
        public let description: String?
        public let id: String?
        public let name: String?
        public let origin: Origin?
        public let originDetails: OriginDetails?
        public let sourceId: String?
        public let updatedAt: TimeStamp?

        public init(arn: String? = nil, assetType: AssetType? = nil, createdAt: TimeStamp? = nil, description: String? = nil, id: String? = nil, name: String? = nil, origin: Origin? = nil, originDetails: OriginDetails? = nil, sourceId: String? = nil, updatedAt: TimeStamp? = nil) {
            self.arn = arn
            self.assetType = assetType
            self.createdAt = createdAt
            self.description = description
            self.id = id
            self.name = name
            self.origin = origin
            self.originDetails = originDetails
            self.sourceId = sourceId
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case assetType = "AssetType"
            case createdAt = "CreatedAt"
            case description = "Description"
            case id = "Id"
            case name = "Name"
            case origin = "Origin"
            case originDetails = "OriginDetails"
            case sourceId = "SourceId"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct UpdateRevisionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "DataSetId", location: .uri(locationName: "DataSetId"), required: true, type: .string), 
            AWSShapeMember(label: "Finalized", required: false, type: .boolean), 
            AWSShapeMember(label: "RevisionId", location: .uri(locationName: "RevisionId"), required: true, type: .string)
        ]

        /// An optional comment about the revision.
        public let comment: String?
        public let dataSetId: String
        /// Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products.
        public let finalized: Bool?
        public let revisionId: String

        public init(comment: String? = nil, dataSetId: String, finalized: Bool? = nil, revisionId: String) {
            self.comment = comment
            self.dataSetId = dataSetId
            self.finalized = finalized
            self.revisionId = revisionId
        }

        public func validate(name: String) throws {
            try validate(self.comment, name:"comment", parent: name, max: 16384)
            try validate(self.comment, name:"comment", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case dataSetId = "DataSetId"
            case finalized = "Finalized"
            case revisionId = "RevisionId"
        }
    }

    public struct UpdateRevisionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "DataSetId", required: false, type: .string), 
            AWSShapeMember(label: "Finalized", required: false, type: .boolean), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "SourceId", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .timestamp)
        ]

        public let arn: String?
        public let comment: String?
        public let createdAt: TimeStamp?
        public let dataSetId: String?
        public let finalized: Bool?
        public let id: String?
        public let sourceId: String?
        public let updatedAt: TimeStamp?

        public init(arn: String? = nil, comment: String? = nil, createdAt: TimeStamp? = nil, dataSetId: String? = nil, finalized: Bool? = nil, id: String? = nil, sourceId: String? = nil, updatedAt: TimeStamp? = nil) {
            self.arn = arn
            self.comment = comment
            self.createdAt = createdAt
            self.dataSetId = dataSetId
            self.finalized = finalized
            self.id = id
            self.sourceId = sourceId
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case comment = "Comment"
            case createdAt = "CreatedAt"
            case dataSetId = "DataSetId"
            case finalized = "Finalized"
            case id = "Id"
            case sourceId = "SourceId"
            case updatedAt = "UpdatedAt"
        }
    }
}
