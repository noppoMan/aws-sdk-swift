//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

@_exported import AWSSDKSwiftCore
import NIO

/**
Client object for interacting with AWS CodeStarNotifications service.

This AWS CodeStar Notifications API Reference provides descriptions and usage examples of the operations and data types for the AWS CodeStar Notifications API. You can use the AWS CodeStar Notifications API to work with the following objects: Notification rules, by calling the following:     CreateNotificationRule, which creates a notification rule for a resource in your account.     DeleteNotificationRule, which deletes a notification rule.     DescribeNotificationRule, which provides information about a notification rule.     ListNotificationRules, which lists the notification rules associated with your account.     UpdateNotificationRule, which changes the name, events, or targets associated with a notification rule.     Subscribe, which subscribes a target to a notification rule.     Unsubscribe, which removes a target from a notification rule.    Targets, by calling the following:     DeleteTarget, which removes a notification rule target (SNS topic) from a notification rule.     ListTargets, which lists the targets associated with a notification rule.    Events, by calling the following:     ListEventTypes, which lists the event types you can include in a notification rule.    Tags, by calling the following:     ListTagsForResource, which lists the tags already associated with a notification rule in your account.     TagResource, which associates a tag you provide with a notification rule in your account.     UntagResource, which removes a tag from a notification rule in your account.     For information about how to use AWS CodeStar Notifications, see link in the CodeStarNotifications User Guide. 
*/
public struct CodeStarNotifications {

    //MARK: Member variables

    public let client: AWSClient

    //MARK: Initialization

    /// Initialize the CodeStarNotifications client
    /// - parameters:
    ///     - accessKeyId: Public access key provided by AWS
    ///     - secretAccessKey: Private access key provided by AWS
    ///     - sessionToken: Token provided by STS.AssumeRole() which allows access to another AWS account
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middlewares: Array of middlewares to apply to requests and responses
    ///     - httpClientProvider: HTTPClient to use. Use `createNew` if the client should manage its own HTTPClient.
    public init(
        accessKeyId: String? = nil,
        secretAccessKey: String? = nil,
        sessionToken: String? = nil,
        region: AWSSDKSwiftCore.Region? = nil,
        partition: AWSSDKSwiftCore.Partition = .aws,
        endpoint: String? = nil,
        middlewares: [AWSServiceMiddleware] = [],
        httpClientProvider: AWSClient.HTTPClientProvider = .createNew
    ) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            sessionToken: sessionToken,
            region: region,
            partition: region?.partition ?? partition,
            service: "codestar-notifications",
            serviceProtocol: .restjson,
            apiVersion: "2019-10-15",
            endpoint: endpoint,
            middlewares: middlewares,
            possibleErrorTypes: [CodeStarNotificationsErrorType.self],
            httpClientProvider: httpClientProvider
        )
    }
    
    //MARK: API Calls

    ///  Creates a notification rule for a resource. The rule specifies the events you want notifications about and the targets (such as SNS topics) where you want to receive them.
    public func createNotificationRule(_ input: CreateNotificationRuleRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateNotificationRuleResult> {
        return client.send(operation: "CreateNotificationRule", path: "/createNotificationRule", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Deletes a notification rule for a resource.
    public func deleteNotificationRule(_ input: DeleteNotificationRuleRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteNotificationRuleResult> {
        return client.send(operation: "DeleteNotificationRule", path: "/deleteNotificationRule", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Deletes a specified target for notifications.
    public func deleteTarget(_ input: DeleteTargetRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteTargetResult> {
        return client.send(operation: "DeleteTarget", path: "/deleteTarget", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Returns information about a specified notification rule.
    public func describeNotificationRule(_ input: DescribeNotificationRuleRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeNotificationRuleResult> {
        return client.send(operation: "DescribeNotificationRule", path: "/describeNotificationRule", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Returns information about the event types available for configuring notifications.
    public func listEventTypes(_ input: ListEventTypesRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListEventTypesResult> {
        return client.send(operation: "ListEventTypes", path: "/listEventTypes", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Returns a list of the notification rules for an AWS account.
    public func listNotificationRules(_ input: ListNotificationRulesRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListNotificationRulesResult> {
        return client.send(operation: "ListNotificationRules", path: "/listNotificationRules", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Returns a list of the tags associated with a notification rule.
    public func listTagsForResource(_ input: ListTagsForResourceRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListTagsForResourceResult> {
        return client.send(operation: "ListTagsForResource", path: "/listTagsForResource", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Returns a list of the notification rule targets for an AWS account.
    public func listTargets(_ input: ListTargetsRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListTargetsResult> {
        return client.send(operation: "ListTargets", path: "/listTargets", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Creates an association between a notification rule and an SNS topic so that the associated target can receive notifications when the events described in the rule are triggered.
    public func subscribe(_ input: SubscribeRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<SubscribeResult> {
        return client.send(operation: "Subscribe", path: "/subscribe", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Associates a set of provided tags with a notification rule.
    public func tagResource(_ input: TagResourceRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TagResourceResult> {
        return client.send(operation: "TagResource", path: "/tagResource", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Removes an association between a notification rule and an Amazon SNS topic so that subscribers to that topic stop receiving notifications when the events described in the rule are triggered.
    public func unsubscribe(_ input: UnsubscribeRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UnsubscribeResult> {
        return client.send(operation: "Unsubscribe", path: "/unsubscribe", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Removes the association between one or more provided tags and a notification rule.
    public func untagResource(_ input: UntagResourceRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UntagResourceResult> {
        return client.send(operation: "UntagResource", path: "/untagResource", httpMethod: "POST", input: input, on: eventLoop)
    }

    ///  Updates a notification rule for a resource. You can change the events that trigger the notification rule, the status of the rule, and the targets that receive the notifications.  To add or remove tags for a notification rule, you must use TagResource and UntagResource. 
    public func updateNotificationRule(_ input: UpdateNotificationRuleRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateNotificationRuleResult> {
        return client.send(operation: "UpdateNotificationRule", path: "/updateNotificationRule", httpMethod: "POST", input: input, on: eventLoop)
    }
}
