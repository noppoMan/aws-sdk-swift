// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore
import NIO

/**
AWS Glue Defines the public endpoint for the AWS Glue service.
*/
public struct Glue {

    let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            amzTarget: "AWSGlue",
            service: "glue",
            serviceProtocol: ServiceProtocol(type: .json, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2017-03-31",
            endpoint: endpoint,
            middlewares: [],
            possibleErrorTypes: [GlueErrorType.self]
        )
    }

    ///  Creates one or more partitions in a batch operation.
    public func batchCreatePartition(_ input: BatchCreatePartitionRequest) throws -> Future<BatchCreatePartitionResponse> {
        return try client.send(operation: "BatchCreatePartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a list of connection definitions from the Data Catalog.
    public func batchDeleteConnection(_ input: BatchDeleteConnectionRequest) throws -> Future<BatchDeleteConnectionResponse> {
        return try client.send(operation: "BatchDeleteConnection", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes one or more partitions in a batch operation.
    public func batchDeletePartition(_ input: BatchDeletePartitionRequest) throws -> Future<BatchDeletePartitionResponse> {
        return try client.send(operation: "BatchDeletePartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes multiple tables at once.  After completing this operation, you will no longer have access to the table versions and partitions that belong to the deleted table. AWS Glue deletes these "orphaned" resources asynchronously in a timely manner, at the discretion of the service. To ensure immediate deletion of all related resources, before calling BatchDeleteTable, use DeleteTableVersion or BatchDeleteTableVersion, and DeletePartition or BatchDeletePartition, to delete any resources that belong to the table. 
    public func batchDeleteTable(_ input: BatchDeleteTableRequest) throws -> Future<BatchDeleteTableResponse> {
        return try client.send(operation: "BatchDeleteTable", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified batch of versions of a table.
    public func batchDeleteTableVersion(_ input: BatchDeleteTableVersionRequest) throws -> Future<BatchDeleteTableVersionResponse> {
        return try client.send(operation: "BatchDeleteTableVersion", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns a list of resource metadata for a given list of crawler names. After calling the ListCrawlers operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.
    public func batchGetCrawlers(_ input: BatchGetCrawlersRequest) throws -> Future<BatchGetCrawlersResponse> {
        return try client.send(operation: "BatchGetCrawlers", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns a list of resource metadata for a given list of DevEndpoint names. After calling the ListDevEndpoints operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.
    public func batchGetDevEndpoints(_ input: BatchGetDevEndpointsRequest) throws -> Future<BatchGetDevEndpointsResponse> {
        return try client.send(operation: "BatchGetDevEndpoints", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns a list of resource metadata for a given list of job names. After calling the ListJobs operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags. 
    public func batchGetJobs(_ input: BatchGetJobsRequest) throws -> Future<BatchGetJobsResponse> {
        return try client.send(operation: "BatchGetJobs", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves partitions in a batch request.
    public func batchGetPartition(_ input: BatchGetPartitionRequest) throws -> Future<BatchGetPartitionResponse> {
        return try client.send(operation: "BatchGetPartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns a list of resource metadata for a given list of trigger names. After calling the ListTriggers operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.
    public func batchGetTriggers(_ input: BatchGetTriggersRequest) throws -> Future<BatchGetTriggersResponse> {
        return try client.send(operation: "BatchGetTriggers", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns a list of resource metadata for a given list of workflow names. After calling the ListWorkflows operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.
    public func batchGetWorkflows(_ input: BatchGetWorkflowsRequest) throws -> Future<BatchGetWorkflowsResponse> {
        return try client.send(operation: "BatchGetWorkflows", path: "/", httpMethod: "POST", input: input)
    }

    ///  Stops one or more job runs for a specified job definition.
    public func batchStopJobRun(_ input: BatchStopJobRunRequest) throws -> Future<BatchStopJobRunResponse> {
        return try client.send(operation: "BatchStopJobRun", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a classifier in the user's account. This can be a GrokClassifier, an XMLClassifier, a JsonClassifier, or a CsvClassifier, depending on which field of the request is present.
    public func createClassifier(_ input: CreateClassifierRequest) throws -> Future<CreateClassifierResponse> {
        return try client.send(operation: "CreateClassifier", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a connection definition in the Data Catalog.
    public func createConnection(_ input: CreateConnectionRequest) throws -> Future<CreateConnectionResponse> {
        return try client.send(operation: "CreateConnection", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new crawler with specified targets, role, configuration, and optional schedule. At least one crawl target must be specified, in the s3Targets field, the jdbcTargets field, or the DynamoDBTargets field.
    public func createCrawler(_ input: CreateCrawlerRequest) throws -> Future<CreateCrawlerResponse> {
        return try client.send(operation: "CreateCrawler", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new database in a Data Catalog.
    public func createDatabase(_ input: CreateDatabaseRequest) throws -> Future<CreateDatabaseResponse> {
        return try client.send(operation: "CreateDatabase", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new DevEndpoint.
    public func createDevEndpoint(_ input: CreateDevEndpointRequest) throws -> Future<CreateDevEndpointResponse> {
        return try client.send(operation: "CreateDevEndpoint", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new job definition.
    public func createJob(_ input: CreateJobRequest) throws -> Future<CreateJobResponse> {
        return try client.send(operation: "CreateJob", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new partition.
    public func createPartition(_ input: CreatePartitionRequest) throws -> Future<CreatePartitionResponse> {
        return try client.send(operation: "CreatePartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Transforms a directed acyclic graph (DAG) into code.
    public func createScript(_ input: CreateScriptRequest) throws -> Future<CreateScriptResponse> {
        return try client.send(operation: "CreateScript", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new security configuration.
    public func createSecurityConfiguration(_ input: CreateSecurityConfigurationRequest) throws -> Future<CreateSecurityConfigurationResponse> {
        return try client.send(operation: "CreateSecurityConfiguration", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new table definition in the Data Catalog.
    public func createTable(_ input: CreateTableRequest) throws -> Future<CreateTableResponse> {
        return try client.send(operation: "CreateTable", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new trigger.
    public func createTrigger(_ input: CreateTriggerRequest) throws -> Future<CreateTriggerResponse> {
        return try client.send(operation: "CreateTrigger", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new function definition in the Data Catalog.
    public func createUserDefinedFunction(_ input: CreateUserDefinedFunctionRequest) throws -> Future<CreateUserDefinedFunctionResponse> {
        return try client.send(operation: "CreateUserDefinedFunction", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new workflow.
    public func createWorkflow(_ input: CreateWorkflowRequest) throws -> Future<CreateWorkflowResponse> {
        return try client.send(operation: "CreateWorkflow", path: "/", httpMethod: "POST", input: input)
    }

    ///  Removes a classifier from the Data Catalog.
    public func deleteClassifier(_ input: DeleteClassifierRequest) throws -> Future<DeleteClassifierResponse> {
        return try client.send(operation: "DeleteClassifier", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a connection from the Data Catalog.
    public func deleteConnection(_ input: DeleteConnectionRequest) throws -> Future<DeleteConnectionResponse> {
        return try client.send(operation: "DeleteConnection", path: "/", httpMethod: "POST", input: input)
    }

    ///  Removes a specified crawler from the AWS Glue Data Catalog, unless the crawler state is RUNNING.
    public func deleteCrawler(_ input: DeleteCrawlerRequest) throws -> Future<DeleteCrawlerResponse> {
        return try client.send(operation: "DeleteCrawler", path: "/", httpMethod: "POST", input: input)
    }

    ///  Removes a specified Database from a Data Catalog.  After completing this operation, you will no longer have access to the tables (and all table versions and partitions that might belong to the tables) and the user-defined functions in the deleted database. AWS Glue deletes these "orphaned" resources asynchronously in a timely manner, at the discretion of the service. To ensure immediate deletion of all related resources, before calling DeleteDatabase, use DeleteTableVersion or BatchDeleteTableVersion, DeletePartition or BatchDeletePartition, DeleteUserDefinedFunction, and DeleteTable or BatchDeleteTable, to delete any resources that belong to the database. 
    public func deleteDatabase(_ input: DeleteDatabaseRequest) throws -> Future<DeleteDatabaseResponse> {
        return try client.send(operation: "DeleteDatabase", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified DevEndpoint.
    public func deleteDevEndpoint(_ input: DeleteDevEndpointRequest) throws -> Future<DeleteDevEndpointResponse> {
        return try client.send(operation: "DeleteDevEndpoint", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified job definition. If the job definition is not found, no exception is thrown.
    public func deleteJob(_ input: DeleteJobRequest) throws -> Future<DeleteJobResponse> {
        return try client.send(operation: "DeleteJob", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified partition.
    public func deletePartition(_ input: DeletePartitionRequest) throws -> Future<DeletePartitionResponse> {
        return try client.send(operation: "DeletePartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified policy.
    public func deleteResourcePolicy(_ input: DeleteResourcePolicyRequest) throws -> Future<DeleteResourcePolicyResponse> {
        return try client.send(operation: "DeleteResourcePolicy", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified security configuration.
    public func deleteSecurityConfiguration(_ input: DeleteSecurityConfigurationRequest) throws -> Future<DeleteSecurityConfigurationResponse> {
        return try client.send(operation: "DeleteSecurityConfiguration", path: "/", httpMethod: "POST", input: input)
    }

    ///  Removes a table definition from the Data Catalog.  After completing this operation, you will no longer have access to the table versions and partitions that belong to the deleted table. AWS Glue deletes these "orphaned" resources asynchronously in a timely manner, at the discretion of the service. To ensure immediate deletion of all related resources, before calling DeleteTable, use DeleteTableVersion or BatchDeleteTableVersion, and DeletePartition or BatchDeletePartition, to delete any resources that belong to the table. 
    public func deleteTable(_ input: DeleteTableRequest) throws -> Future<DeleteTableResponse> {
        return try client.send(operation: "DeleteTable", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified version of a table.
    public func deleteTableVersion(_ input: DeleteTableVersionRequest) throws -> Future<DeleteTableVersionResponse> {
        return try client.send(operation: "DeleteTableVersion", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified trigger. If the trigger is not found, no exception is thrown.
    public func deleteTrigger(_ input: DeleteTriggerRequest) throws -> Future<DeleteTriggerResponse> {
        return try client.send(operation: "DeleteTrigger", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes an existing function definition from the Data Catalog.
    public func deleteUserDefinedFunction(_ input: DeleteUserDefinedFunctionRequest) throws -> Future<DeleteUserDefinedFunctionResponse> {
        return try client.send(operation: "DeleteUserDefinedFunction", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a workflow.
    public func deleteWorkflow(_ input: DeleteWorkflowRequest) throws -> Future<DeleteWorkflowResponse> {
        return try client.send(operation: "DeleteWorkflow", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the status of a migration operation.
    public func getCatalogImportStatus(_ input: GetCatalogImportStatusRequest) throws -> Future<GetCatalogImportStatusResponse> {
        return try client.send(operation: "GetCatalogImportStatus", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieve a classifier by name.
    public func getClassifier(_ input: GetClassifierRequest) throws -> Future<GetClassifierResponse> {
        return try client.send(operation: "GetClassifier", path: "/", httpMethod: "POST", input: input)
    }

    ///  Lists all classifier objects in the Data Catalog.
    public func getClassifiers(_ input: GetClassifiersRequest) throws -> Future<GetClassifiersResponse> {
        return try client.send(operation: "GetClassifiers", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a connection definition from the Data Catalog.
    public func getConnection(_ input: GetConnectionRequest) throws -> Future<GetConnectionResponse> {
        return try client.send(operation: "GetConnection", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a list of connection definitions from the Data Catalog.
    public func getConnections(_ input: GetConnectionsRequest) throws -> Future<GetConnectionsResponse> {
        return try client.send(operation: "GetConnections", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves metadata for a specified crawler.
    public func getCrawler(_ input: GetCrawlerRequest) throws -> Future<GetCrawlerResponse> {
        return try client.send(operation: "GetCrawler", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves metrics about specified crawlers.
    public func getCrawlerMetrics(_ input: GetCrawlerMetricsRequest) throws -> Future<GetCrawlerMetricsResponse> {
        return try client.send(operation: "GetCrawlerMetrics", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves metadata for all crawlers defined in the customer account.
    public func getCrawlers(_ input: GetCrawlersRequest) throws -> Future<GetCrawlersResponse> {
        return try client.send(operation: "GetCrawlers", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the security configuration for a specified catalog.
    public func getDataCatalogEncryptionSettings(_ input: GetDataCatalogEncryptionSettingsRequest) throws -> Future<GetDataCatalogEncryptionSettingsResponse> {
        return try client.send(operation: "GetDataCatalogEncryptionSettings", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the definition of a specified database.
    public func getDatabase(_ input: GetDatabaseRequest) throws -> Future<GetDatabaseResponse> {
        return try client.send(operation: "GetDatabase", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves all Databases defined in a given Data Catalog.
    public func getDatabases(_ input: GetDatabasesRequest) throws -> Future<GetDatabasesResponse> {
        return try client.send(operation: "GetDatabases", path: "/", httpMethod: "POST", input: input)
    }

    ///  Transforms a Python script into a directed acyclic graph (DAG). 
    public func getDataflowGraph(_ input: GetDataflowGraphRequest) throws -> Future<GetDataflowGraphResponse> {
        return try client.send(operation: "GetDataflowGraph", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves information about a specified DevEndpoint.  When you create a development endpoint in a virtual private cloud (VPC), AWS Glue returns only a private IP address, and the public IP address field is not populated. When you create a non-VPC development endpoint, AWS Glue returns only a public IP address. 
    public func getDevEndpoint(_ input: GetDevEndpointRequest) throws -> Future<GetDevEndpointResponse> {
        return try client.send(operation: "GetDevEndpoint", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves all the DevEndpoints in this AWS account.  When you create a development endpoint in a virtual private cloud (VPC), AWS Glue returns only a private IP address and the public IP address field is not populated. When you create a non-VPC development endpoint, AWS Glue returns only a public IP address. 
    public func getDevEndpoints(_ input: GetDevEndpointsRequest) throws -> Future<GetDevEndpointsResponse> {
        return try client.send(operation: "GetDevEndpoints", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves an existing job definition.
    public func getJob(_ input: GetJobRequest) throws -> Future<GetJobResponse> {
        return try client.send(operation: "GetJob", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the metadata for a given job run.
    public func getJobRun(_ input: GetJobRunRequest) throws -> Future<GetJobRunResponse> {
        return try client.send(operation: "GetJobRun", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves metadata for all runs of a given job definition.
    public func getJobRuns(_ input: GetJobRunsRequest) throws -> Future<GetJobRunsResponse> {
        return try client.send(operation: "GetJobRuns", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves all current job definitions.
    public func getJobs(_ input: GetJobsRequest) throws -> Future<GetJobsResponse> {
        return try client.send(operation: "GetJobs", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates mappings.
    public func getMapping(_ input: GetMappingRequest) throws -> Future<GetMappingResponse> {
        return try client.send(operation: "GetMapping", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves information about a specified partition.
    public func getPartition(_ input: GetPartitionRequest) throws -> Future<GetPartitionResponse> {
        return try client.send(operation: "GetPartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves information about the partitions in a table.
    public func getPartitions(_ input: GetPartitionsRequest) throws -> Future<GetPartitionsResponse> {
        return try client.send(operation: "GetPartitions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Gets code to perform a specified mapping.
    public func getPlan(_ input: GetPlanRequest) throws -> Future<GetPlanResponse> {
        return try client.send(operation: "GetPlan", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a specified resource policy.
    public func getResourcePolicy(_ input: GetResourcePolicyRequest) throws -> Future<GetResourcePolicyResponse> {
        return try client.send(operation: "GetResourcePolicy", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a specified security configuration.
    public func getSecurityConfiguration(_ input: GetSecurityConfigurationRequest) throws -> Future<GetSecurityConfigurationResponse> {
        return try client.send(operation: "GetSecurityConfiguration", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a list of all security configurations.
    public func getSecurityConfigurations(_ input: GetSecurityConfigurationsRequest) throws -> Future<GetSecurityConfigurationsResponse> {
        return try client.send(operation: "GetSecurityConfigurations", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the Table definition in a Data Catalog for a specified table.
    public func getTable(_ input: GetTableRequest) throws -> Future<GetTableResponse> {
        return try client.send(operation: "GetTable", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a specified version of a table.
    public func getTableVersion(_ input: GetTableVersionRequest) throws -> Future<GetTableVersionResponse> {
        return try client.send(operation: "GetTableVersion", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a list of strings that identify available versions of a specified table.
    public func getTableVersions(_ input: GetTableVersionsRequest) throws -> Future<GetTableVersionsResponse> {
        return try client.send(operation: "GetTableVersions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the definitions of some or all of the tables in a given Database.
    public func getTables(_ input: GetTablesRequest) throws -> Future<GetTablesResponse> {
        return try client.send(operation: "GetTables", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a list of tags associated with a resource.
    public func getTags(_ input: GetTagsRequest) throws -> Future<GetTagsResponse> {
        return try client.send(operation: "GetTags", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the definition of a trigger.
    public func getTrigger(_ input: GetTriggerRequest) throws -> Future<GetTriggerResponse> {
        return try client.send(operation: "GetTrigger", path: "/", httpMethod: "POST", input: input)
    }

    ///  Gets all the triggers associated with a job.
    public func getTriggers(_ input: GetTriggersRequest) throws -> Future<GetTriggersResponse> {
        return try client.send(operation: "GetTriggers", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a specified function definition from the Data Catalog.
    public func getUserDefinedFunction(_ input: GetUserDefinedFunctionRequest) throws -> Future<GetUserDefinedFunctionResponse> {
        return try client.send(operation: "GetUserDefinedFunction", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a multiple function definitions from the Data Catalog.
    public func getUserDefinedFunctions(_ input: GetUserDefinedFunctionsRequest) throws -> Future<GetUserDefinedFunctionsResponse> {
        return try client.send(operation: "GetUserDefinedFunctions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves resource metadata for a workflow.
    public func getWorkflow(_ input: GetWorkflowRequest) throws -> Future<GetWorkflowResponse> {
        return try client.send(operation: "GetWorkflow", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the metadata for a given workflow run. 
    public func getWorkflowRun(_ input: GetWorkflowRunRequest) throws -> Future<GetWorkflowRunResponse> {
        return try client.send(operation: "GetWorkflowRun", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the workflow run properties which were set during the run.
    public func getWorkflowRunProperties(_ input: GetWorkflowRunPropertiesRequest) throws -> Future<GetWorkflowRunPropertiesResponse> {
        return try client.send(operation: "GetWorkflowRunProperties", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves metadata for all runs of a given workflow.
    public func getWorkflowRuns(_ input: GetWorkflowRunsRequest) throws -> Future<GetWorkflowRunsResponse> {
        return try client.send(operation: "GetWorkflowRuns", path: "/", httpMethod: "POST", input: input)
    }

    ///  Imports an existing Athena Data Catalog to AWS Glue
    public func importCatalogToGlue(_ input: ImportCatalogToGlueRequest) throws -> Future<ImportCatalogToGlueResponse> {
        return try client.send(operation: "ImportCatalogToGlue", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the names of all crawler resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names. This operation takes the optional Tags field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.
    public func listCrawlers(_ input: ListCrawlersRequest) throws -> Future<ListCrawlersResponse> {
        return try client.send(operation: "ListCrawlers", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the names of all DevEndpoint resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names. This operation takes the optional Tags field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.
    public func listDevEndpoints(_ input: ListDevEndpointsRequest) throws -> Future<ListDevEndpointsResponse> {
        return try client.send(operation: "ListDevEndpoints", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the names of all job resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names. This operation takes the optional Tags field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.
    public func listJobs(_ input: ListJobsRequest) throws -> Future<ListJobsResponse> {
        return try client.send(operation: "ListJobs", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the names of all trigger resources in this AWS account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names. This operation takes the optional Tags field, which you can use as a filter on the response so that tagged resources can be retrieved as a group. If you choose to use tags filtering, only resources with the tag are retrieved.
    public func listTriggers(_ input: ListTriggersRequest) throws -> Future<ListTriggersResponse> {
        return try client.send(operation: "ListTriggers", path: "/", httpMethod: "POST", input: input)
    }

    ///  Lists names of workflows created in the account.
    public func listWorkflows(_ input: ListWorkflowsRequest) throws -> Future<ListWorkflowsResponse> {
        return try client.send(operation: "ListWorkflows", path: "/", httpMethod: "POST", input: input)
    }

    ///  Sets the security configuration for a specified catalog. After the configuration has been set, the specified encryption is applied to every catalog write thereafter.
    public func putDataCatalogEncryptionSettings(_ input: PutDataCatalogEncryptionSettingsRequest) throws -> Future<PutDataCatalogEncryptionSettingsResponse> {
        return try client.send(operation: "PutDataCatalogEncryptionSettings", path: "/", httpMethod: "POST", input: input)
    }

    ///  Sets the Data Catalog resource policy for access control.
    public func putResourcePolicy(_ input: PutResourcePolicyRequest) throws -> Future<PutResourcePolicyResponse> {
        return try client.send(operation: "PutResourcePolicy", path: "/", httpMethod: "POST", input: input)
    }

    ///  Puts the specified workflow run properties for the given workflow run. If a property already exists for the specified run, then it overrides the value otherwise adds the property to existing properties.
    public func putWorkflowRunProperties(_ input: PutWorkflowRunPropertiesRequest) throws -> Future<PutWorkflowRunPropertiesResponse> {
        return try client.send(operation: "PutWorkflowRunProperties", path: "/", httpMethod: "POST", input: input)
    }

    ///  Resets a bookmark entry.
    public func resetJobBookmark(_ input: ResetJobBookmarkRequest) throws -> Future<ResetJobBookmarkResponse> {
        return try client.send(operation: "ResetJobBookmark", path: "/", httpMethod: "POST", input: input)
    }

    ///  Starts a crawl using the specified crawler, regardless of what is scheduled. If the crawler is already running, returns a CrawlerRunningException.
    public func startCrawler(_ input: StartCrawlerRequest) throws -> Future<StartCrawlerResponse> {
        return try client.send(operation: "StartCrawler", path: "/", httpMethod: "POST", input: input)
    }

    ///  Changes the schedule state of the specified crawler to SCHEDULED, unless the crawler is already running or the schedule state is already SCHEDULED.
    public func startCrawlerSchedule(_ input: StartCrawlerScheduleRequest) throws -> Future<StartCrawlerScheduleResponse> {
        return try client.send(operation: "StartCrawlerSchedule", path: "/", httpMethod: "POST", input: input)
    }

    ///  Starts a job run using a job definition.
    public func startJobRun(_ input: StartJobRunRequest) throws -> Future<StartJobRunResponse> {
        return try client.send(operation: "StartJobRun", path: "/", httpMethod: "POST", input: input)
    }

    ///  Starts an existing trigger. See Triggering Jobs for information about how different types of trigger are started.
    public func startTrigger(_ input: StartTriggerRequest) throws -> Future<StartTriggerResponse> {
        return try client.send(operation: "StartTrigger", path: "/", httpMethod: "POST", input: input)
    }

    ///  Starts a new run of the specified workflow.
    public func startWorkflowRun(_ input: StartWorkflowRunRequest) throws -> Future<StartWorkflowRunResponse> {
        return try client.send(operation: "StartWorkflowRun", path: "/", httpMethod: "POST", input: input)
    }

    ///  If the specified crawler is running, stops the crawl.
    public func stopCrawler(_ input: StopCrawlerRequest) throws -> Future<StopCrawlerResponse> {
        return try client.send(operation: "StopCrawler", path: "/", httpMethod: "POST", input: input)
    }

    ///  Sets the schedule state of the specified crawler to NOT_SCHEDULED, but does not stop the crawler if it is already running.
    public func stopCrawlerSchedule(_ input: StopCrawlerScheduleRequest) throws -> Future<StopCrawlerScheduleResponse> {
        return try client.send(operation: "StopCrawlerSchedule", path: "/", httpMethod: "POST", input: input)
    }

    ///  Stops a specified trigger.
    public func stopTrigger(_ input: StopTriggerRequest) throws -> Future<StopTriggerResponse> {
        return try client.send(operation: "StopTrigger", path: "/", httpMethod: "POST", input: input)
    }

    ///  Adds tags to a resource. A tag is a label you can assign to an AWS resource. In AWS Glue, you can tag only certain resources. For information about what resources you can tag, see AWS Tags in AWS Glue.
    public func tagResource(_ input: TagResourceRequest) throws -> Future<TagResourceResponse> {
        return try client.send(operation: "TagResource", path: "/", httpMethod: "POST", input: input)
    }

    ///  Removes tags from a resource.
    public func untagResource(_ input: UntagResourceRequest) throws -> Future<UntagResourceResponse> {
        return try client.send(operation: "UntagResource", path: "/", httpMethod: "POST", input: input)
    }

    ///  Modifies an existing classifier (a GrokClassifier, an XMLClassifier, a JsonClassifier, or a CsvClassifier, depending on which field is present).
    public func updateClassifier(_ input: UpdateClassifierRequest) throws -> Future<UpdateClassifierResponse> {
        return try client.send(operation: "UpdateClassifier", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates a connection definition in the Data Catalog.
    public func updateConnection(_ input: UpdateConnectionRequest) throws -> Future<UpdateConnectionResponse> {
        return try client.send(operation: "UpdateConnection", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates a crawler. If a crawler is running, you must stop it using StopCrawler before updating it.
    public func updateCrawler(_ input: UpdateCrawlerRequest) throws -> Future<UpdateCrawlerResponse> {
        return try client.send(operation: "UpdateCrawler", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates the schedule of a crawler using a cron expression. 
    public func updateCrawlerSchedule(_ input: UpdateCrawlerScheduleRequest) throws -> Future<UpdateCrawlerScheduleResponse> {
        return try client.send(operation: "UpdateCrawlerSchedule", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates an existing database definition in a Data Catalog.
    public func updateDatabase(_ input: UpdateDatabaseRequest) throws -> Future<UpdateDatabaseResponse> {
        return try client.send(operation: "UpdateDatabase", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates a specified DevEndpoint.
    public func updateDevEndpoint(_ input: UpdateDevEndpointRequest) throws -> Future<UpdateDevEndpointResponse> {
        return try client.send(operation: "UpdateDevEndpoint", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates an existing job definition.
    public func updateJob(_ input: UpdateJobRequest) throws -> Future<UpdateJobResponse> {
        return try client.send(operation: "UpdateJob", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates a partition.
    public func updatePartition(_ input: UpdatePartitionRequest) throws -> Future<UpdatePartitionResponse> {
        return try client.send(operation: "UpdatePartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates a metadata table in the Data Catalog.
    public func updateTable(_ input: UpdateTableRequest) throws -> Future<UpdateTableResponse> {
        return try client.send(operation: "UpdateTable", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates a trigger definition.
    public func updateTrigger(_ input: UpdateTriggerRequest) throws -> Future<UpdateTriggerResponse> {
        return try client.send(operation: "UpdateTrigger", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates an existing function definition in the Data Catalog.
    public func updateUserDefinedFunction(_ input: UpdateUserDefinedFunctionRequest) throws -> Future<UpdateUserDefinedFunctionResponse> {
        return try client.send(operation: "UpdateUserDefinedFunction", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates an existing workflow.
    public func updateWorkflow(_ input: UpdateWorkflowRequest) throws -> Future<UpdateWorkflowResponse> {
        return try client.send(operation: "UpdateWorkflow", path: "/", httpMethod: "POST", input: input)
    }


}