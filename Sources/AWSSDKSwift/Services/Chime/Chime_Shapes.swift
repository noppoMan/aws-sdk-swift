// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Chime {
    //MARK: Enums

    public enum AccountType: String, CustomStringConvertible, Codable {
        case team = "Team"
        case enterprisedirectory = "EnterpriseDirectory"
        case enterpriselwa = "EnterpriseLWA"
        case enterpriseoidc = "EnterpriseOIDC"
        public var description: String { return self.rawValue }
    }

    public enum BotType: String, CustomStringConvertible, Codable {
        case chatbot = "ChatBot"
        public var description: String { return self.rawValue }
    }

    public enum CallingNameStatus: String, CustomStringConvertible, Codable {
        case unassigned = "Unassigned"
        case updateinprogress = "UpdateInProgress"
        case updatesucceeded = "UpdateSucceeded"
        case updatefailed = "UpdateFailed"
        public var description: String { return self.rawValue }
    }

    public enum EmailStatus: String, CustomStringConvertible, Codable {
        case notsent = "NotSent"
        case sent = "Sent"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum ErrorCode: String, CustomStringConvertible, Codable {
        case badrequest = "BadRequest"
        case conflict = "Conflict"
        case forbidden = "Forbidden"
        case notfound = "NotFound"
        case preconditionfailed = "PreconditionFailed"
        case resourcelimitexceeded = "ResourceLimitExceeded"
        case servicefailure = "ServiceFailure"
        case accessdenied = "AccessDenied"
        case serviceunavailable = "ServiceUnavailable"
        case throttled = "Throttled"
        case unauthorized = "Unauthorized"
        case unprocessable = "Unprocessable"
        case voiceconnectorgroupassociationsexist = "VoiceConnectorGroupAssociationsExist"
        case phonenumberassociationsexist = "PhoneNumberAssociationsExist"
        public var description: String { return self.rawValue }
    }

    public enum InviteStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case accepted = "Accepted"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum License: String, CustomStringConvertible, Codable {
        case basic = "Basic"
        case plus = "Plus"
        case pro = "Pro"
        case protrial = "ProTrial"
        public var description: String { return self.rawValue }
    }

    public enum MemberType: String, CustomStringConvertible, Codable {
        case user = "User"
        case bot = "Bot"
        case webhook = "Webhook"
        public var description: String { return self.rawValue }
    }

    public enum OrderedPhoneNumberStatus: String, CustomStringConvertible, Codable {
        case processing = "Processing"
        case acquired = "Acquired"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum OriginationRouteProtocol: String, CustomStringConvertible, Codable {
        case tcp = "TCP"
        case udp = "UDP"
        public var description: String { return self.rawValue }
    }

    public enum PhoneNumberAssociationName: String, CustomStringConvertible, Codable {
        case accountid = "AccountId"
        case userid = "UserId"
        case voiceconnectorid = "VoiceConnectorId"
        case voiceconnectorgroupid = "VoiceConnectorGroupId"
        public var description: String { return self.rawValue }
    }

    public enum PhoneNumberOrderStatus: String, CustomStringConvertible, Codable {
        case processing = "Processing"
        case successful = "Successful"
        case failed = "Failed"
        case partial = "Partial"
        public var description: String { return self.rawValue }
    }

    public enum PhoneNumberProductType: String, CustomStringConvertible, Codable {
        case businesscalling = "BusinessCalling"
        case voiceconnector = "VoiceConnector"
        public var description: String { return self.rawValue }
    }

    public enum PhoneNumberStatus: String, CustomStringConvertible, Codable {
        case acquireinprogress = "AcquireInProgress"
        case acquirefailed = "AcquireFailed"
        case unassigned = "Unassigned"
        case assigned = "Assigned"
        case releaseinprogress = "ReleaseInProgress"
        case deleteinprogress = "DeleteInProgress"
        case releasefailed = "ReleaseFailed"
        case deletefailed = "DeleteFailed"
        public var description: String { return self.rawValue }
    }

    public enum PhoneNumberType: String, CustomStringConvertible, Codable {
        case local = "Local"
        case tollfree = "TollFree"
        public var description: String { return self.rawValue }
    }

    public enum RegistrationStatus: String, CustomStringConvertible, Codable {
        case unregistered = "Unregistered"
        case registered = "Registered"
        case suspended = "Suspended"
        public var description: String { return self.rawValue }
    }

    public enum RoomMembershipRole: String, CustomStringConvertible, Codable {
        case administrator = "Administrator"
        case member = "Member"
        public var description: String { return self.rawValue }
    }

    public enum UserType: String, CustomStringConvertible, Codable {
        case privateuser = "PrivateUser"
        case shareddevice = "SharedDevice"
        public var description: String { return self.rawValue }
    }

    public enum VoiceConnectorAwsRegion: String, CustomStringConvertible, Codable {
        case usEast1 = "us-east-1"
        case usWest2 = "us-west-2"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct Account: AWSShape {

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The Amazon Chime account type. For more information about different account types, see Managing Your Amazon Chime Accounts in the Amazon Chime Administration Guide.
        public let accountType: AccountType?
        /// The AWS account ID.
        public let awsAccountId: String
        /// The Amazon Chime account creation timestamp, in ISO 8601 format.
        public let createdTimestamp: TimeStamp?
        /// The default license for the Amazon Chime account.
        public let defaultLicense: License?
        /// The Amazon Chime account name.
        public let name: String
        /// The sign-in delegate groups associated with the account.
        public let signinDelegateGroups: [SigninDelegateGroup]?
        /// Supported licenses for the Amazon Chime account.
        public let supportedLicenses: [License]?

        public init(accountId: String, accountType: AccountType? = nil, awsAccountId: String, createdTimestamp: TimeStamp? = nil, defaultLicense: License? = nil, name: String, signinDelegateGroups: [SigninDelegateGroup]? = nil, supportedLicenses: [License]? = nil) {
            self.accountId = accountId
            self.accountType = accountType
            self.awsAccountId = awsAccountId
            self.createdTimestamp = createdTimestamp
            self.defaultLicense = defaultLicense
            self.name = name
            self.signinDelegateGroups = signinDelegateGroups
            self.supportedLicenses = supportedLicenses
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case accountType = "AccountType"
            case awsAccountId = "AwsAccountId"
            case createdTimestamp = "CreatedTimestamp"
            case defaultLicense = "DefaultLicense"
            case name = "Name"
            case signinDelegateGroups = "SigninDelegateGroups"
            case supportedLicenses = "SupportedLicenses"
        }
    }

    public struct AccountSettings: AWSShape {

        /// Setting that stops or starts remote control of shared screens during meetings.
        public let disableRemoteControl: Bool?
        /// Setting that allows meeting participants to choose the Call me at a phone number option. For more information, see Join a Meeting without the Amazon Chime App.
        public let enableDialOut: Bool?

        public init(disableRemoteControl: Bool? = nil, enableDialOut: Bool? = nil) {
            self.disableRemoteControl = disableRemoteControl
            self.enableDialOut = enableDialOut
        }

        private enum CodingKeys: String, CodingKey {
            case disableRemoteControl = "DisableRemoteControl"
            case enableDialOut = "EnableDialOut"
        }
    }

    public struct AlexaForBusinessMetadata: AWSShape {

        /// The ARN of the room resource.
        public let alexaForBusinessRoomArn: String?
        /// Starts or stops Alexa for Business.
        public let isAlexaForBusinessEnabled: Bool?

        public init(alexaForBusinessRoomArn: String? = nil, isAlexaForBusinessEnabled: Bool? = nil) {
            self.alexaForBusinessRoomArn = alexaForBusinessRoomArn
            self.isAlexaForBusinessEnabled = isAlexaForBusinessEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case alexaForBusinessRoomArn = "AlexaForBusinessRoomArn"
            case isAlexaForBusinessEnabled = "IsAlexaForBusinessEnabled"
        }
    }

    public struct AssociatePhoneNumberWithUserRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "userId", location: .uri(locationName: "userId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The phone number, in E.164 format.
        public let e164PhoneNumber: String
        /// The user ID.
        public let userId: String

        public init(accountId: String, e164PhoneNumber: String, userId: String) {
            self.accountId = accountId
            self.e164PhoneNumber = e164PhoneNumber
            self.userId = userId
        }

        public func validate(name: String) throws {
            try validate(self.e164PhoneNumber, name:"e164PhoneNumber", parent: name, pattern: "^\\+?[1-9]\\d{1,14}$")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case e164PhoneNumber = "E164PhoneNumber"
            case userId = "userId"
        }
    }

    public struct AssociatePhoneNumberWithUserResponse: AWSShape {


        public init() {
        }

    }

    public struct AssociatePhoneNumbersWithVoiceConnectorGroupRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorGroupId", location: .uri(locationName: "voiceConnectorGroupId"))
        ]

        /// List of phone numbers, in E.164 format.
        public let e164PhoneNumbers: [String]?
        /// If true, associates the provided phone numbers with the provided Amazon Chime Voice Connector Group and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.
        public let forceAssociate: Bool?
        /// The Amazon Chime Voice Connector group ID.
        public let voiceConnectorGroupId: String

        public init(e164PhoneNumbers: [String]? = nil, forceAssociate: Bool? = nil, voiceConnectorGroupId: String) {
            self.e164PhoneNumbers = e164PhoneNumbers
            self.forceAssociate = forceAssociate
            self.voiceConnectorGroupId = voiceConnectorGroupId
        }

        public func validate(name: String) throws {
            try self.e164PhoneNumbers?.forEach {
                try validate($0, name: "e164PhoneNumbers[]", parent: name, pattern: "^\\+?[1-9]\\d{1,14}$")
            }
            try validate(self.voiceConnectorGroupId, name:"voiceConnectorGroupId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case e164PhoneNumbers = "E164PhoneNumbers"
            case forceAssociate = "ForceAssociate"
            case voiceConnectorGroupId = "voiceConnectorGroupId"
        }
    }

    public struct AssociatePhoneNumbersWithVoiceConnectorGroupResponse: AWSShape {

        /// If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
        public let phoneNumberErrors: [PhoneNumberError]?

        public init(phoneNumberErrors: [PhoneNumberError]? = nil) {
            self.phoneNumberErrors = phoneNumberErrors
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumberErrors = "PhoneNumberErrors"
        }
    }

    public struct AssociatePhoneNumbersWithVoiceConnectorRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// List of phone numbers, in E.164 format.
        public let e164PhoneNumbers: [String]?
        /// If true, associates the provided phone numbers with the provided Amazon Chime Voice Connector and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.
        public let forceAssociate: Bool?
        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(e164PhoneNumbers: [String]? = nil, forceAssociate: Bool? = nil, voiceConnectorId: String) {
            self.e164PhoneNumbers = e164PhoneNumbers
            self.forceAssociate = forceAssociate
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try self.e164PhoneNumbers?.forEach {
                try validate($0, name: "e164PhoneNumbers[]", parent: name, pattern: "^\\+?[1-9]\\d{1,14}$")
            }
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case e164PhoneNumbers = "E164PhoneNumbers"
            case forceAssociate = "ForceAssociate"
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct AssociatePhoneNumbersWithVoiceConnectorResponse: AWSShape {

        /// If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
        public let phoneNumberErrors: [PhoneNumberError]?

        public init(phoneNumberErrors: [PhoneNumberError]? = nil) {
            self.phoneNumberErrors = phoneNumberErrors
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumberErrors = "PhoneNumberErrors"
        }
    }

    public struct AssociateSigninDelegateGroupsWithAccountRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The sign-in delegate groups.
        public let signinDelegateGroups: [SigninDelegateGroup]

        public init(accountId: String, signinDelegateGroups: [SigninDelegateGroup]) {
            self.accountId = accountId
            self.signinDelegateGroups = signinDelegateGroups
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try self.signinDelegateGroups.forEach {
                try $0.validate(name: "\(name).signinDelegateGroups[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case signinDelegateGroups = "SigninDelegateGroups"
        }
    }

    public struct AssociateSigninDelegateGroupsWithAccountResponse: AWSShape {


        public init() {
        }

    }

    public struct Attendee: AWSShape {

        /// The Amazon Chime SDK attendee ID.
        public let attendeeId: String?
        /// The Amazon Chime SDK external user ID. Links the attendee to an identity managed by a builder application.
        public let externalUserId: String?
        /// The join token used by the Amazon Chime SDK attendee.
        public let joinToken: String?

        public init(attendeeId: String? = nil, externalUserId: String? = nil, joinToken: String? = nil) {
            self.attendeeId = attendeeId
            self.externalUserId = externalUserId
            self.joinToken = joinToken
        }

        private enum CodingKeys: String, CodingKey {
            case attendeeId = "AttendeeId"
            case externalUserId = "ExternalUserId"
            case joinToken = "JoinToken"
        }
    }

    public struct BatchCreateAttendeeRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "meetingId", location: .uri(locationName: "meetingId"))
        ]

        /// The request containing the attendees to create.
        public let attendees: [CreateAttendeeRequestItem]
        /// The Amazon Chime SDK meeting ID.
        public let meetingId: String

        public init(attendees: [CreateAttendeeRequestItem], meetingId: String) {
            self.attendees = attendees
            self.meetingId = meetingId
        }

        public func validate(name: String) throws {
            try self.attendees.forEach {
                try $0.validate(name: "\(name).attendees[]")
            }
            try validate(self.meetingId, name:"meetingId", parent: name, pattern: "[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}")
        }

        private enum CodingKeys: String, CodingKey {
            case attendees = "Attendees"
            case meetingId = "meetingId"
        }
    }

    public struct BatchCreateAttendeeResponse: AWSShape {

        /// The attendee information, including attendees IDs and join tokens.
        public let attendees: [Attendee]?
        /// If the action fails for one or more of the attendees in the request, a list of the attendees is returned, along with error codes and error messages.
        public let errors: [CreateAttendeeError]?

        public init(attendees: [Attendee]? = nil, errors: [CreateAttendeeError]? = nil) {
            self.attendees = attendees
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case attendees = "Attendees"
            case errors = "Errors"
        }
    }

    public struct BatchCreateRoomMembershipRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "roomId", location: .uri(locationName: "roomId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The list of membership items.
        public let membershipItemList: [MembershipItem]
        /// The room ID.
        public let roomId: String

        public init(accountId: String, membershipItemList: [MembershipItem], roomId: String) {
            self.accountId = accountId
            self.membershipItemList = membershipItemList
            self.roomId = roomId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try self.membershipItemList.forEach {
                try $0.validate(name: "\(name).membershipItemList[]")
            }
            try validate(self.membershipItemList, name:"membershipItemList", parent: name, max: 50)
            try validate(self.roomId, name:"roomId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case membershipItemList = "MembershipItemList"
            case roomId = "roomId"
        }
    }

    public struct BatchCreateRoomMembershipResponse: AWSShape {

        /// If the action fails for one or more of the member IDs in the request, a list of the member IDs is returned, along with error codes and error messages.
        public let errors: [MemberError]?

        public init(errors: [MemberError]? = nil) {
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "Errors"
        }
    }

    public struct BatchDeletePhoneNumberRequest: AWSShape {

        /// List of phone number IDs.
        public let phoneNumberIds: [String]

        public init(phoneNumberIds: [String]) {
            self.phoneNumberIds = phoneNumberIds
        }

        public func validate(name: String) throws {
            try validate(self.phoneNumberIds, name:"phoneNumberIds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumberIds = "PhoneNumberIds"
        }
    }

    public struct BatchDeletePhoneNumberResponse: AWSShape {

        /// If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
        public let phoneNumberErrors: [PhoneNumberError]?

        public init(phoneNumberErrors: [PhoneNumberError]? = nil) {
            self.phoneNumberErrors = phoneNumberErrors
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumberErrors = "PhoneNumberErrors"
        }
    }

    public struct BatchSuspendUserRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The request containing the user IDs to suspend.
        public let userIdList: [String]

        public init(accountId: String, userIdList: [String]) {
            self.accountId = accountId
            self.userIdList = userIdList
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try self.userIdList.forEach {
                try validate($0, name: "userIdList[]", parent: name, pattern: ".*\\S.*")
            }
            try validate(self.userIdList, name:"userIdList", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case userIdList = "UserIdList"
        }
    }

    public struct BatchSuspendUserResponse: AWSShape {

        /// If the BatchSuspendUser action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.
        public let userErrors: [UserError]?

        public init(userErrors: [UserError]? = nil) {
            self.userErrors = userErrors
        }

        private enum CodingKeys: String, CodingKey {
            case userErrors = "UserErrors"
        }
    }

    public struct BatchUnsuspendUserRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The request containing the user IDs to unsuspend.
        public let userIdList: [String]

        public init(accountId: String, userIdList: [String]) {
            self.accountId = accountId
            self.userIdList = userIdList
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try self.userIdList.forEach {
                try validate($0, name: "userIdList[]", parent: name, pattern: ".*\\S.*")
            }
            try validate(self.userIdList, name:"userIdList", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case userIdList = "UserIdList"
        }
    }

    public struct BatchUnsuspendUserResponse: AWSShape {

        /// If the BatchUnsuspendUser action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.
        public let userErrors: [UserError]?

        public init(userErrors: [UserError]? = nil) {
            self.userErrors = userErrors
        }

        private enum CodingKeys: String, CodingKey {
            case userErrors = "UserErrors"
        }
    }

    public struct BatchUpdatePhoneNumberRequest: AWSShape {

        /// The request containing the phone number IDs and product types or calling names to update.
        public let updatePhoneNumberRequestItems: [UpdatePhoneNumberRequestItem]

        public init(updatePhoneNumberRequestItems: [UpdatePhoneNumberRequestItem]) {
            self.updatePhoneNumberRequestItems = updatePhoneNumberRequestItems
        }

        public func validate(name: String) throws {
            try self.updatePhoneNumberRequestItems.forEach {
                try $0.validate(name: "\(name).updatePhoneNumberRequestItems[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case updatePhoneNumberRequestItems = "UpdatePhoneNumberRequestItems"
        }
    }

    public struct BatchUpdatePhoneNumberResponse: AWSShape {

        /// If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
        public let phoneNumberErrors: [PhoneNumberError]?

        public init(phoneNumberErrors: [PhoneNumberError]? = nil) {
            self.phoneNumberErrors = phoneNumberErrors
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumberErrors = "PhoneNumberErrors"
        }
    }

    public struct BatchUpdateUserRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The request containing the user IDs and details to update.
        public let updateUserRequestItems: [UpdateUserRequestItem]

        public init(accountId: String, updateUserRequestItems: [UpdateUserRequestItem]) {
            self.accountId = accountId
            self.updateUserRequestItems = updateUserRequestItems
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try self.updateUserRequestItems.forEach {
                try $0.validate(name: "\(name).updateUserRequestItems[]")
            }
            try validate(self.updateUserRequestItems, name:"updateUserRequestItems", parent: name, max: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case updateUserRequestItems = "UpdateUserRequestItems"
        }
    }

    public struct BatchUpdateUserResponse: AWSShape {

        /// If the BatchUpdateUser action fails for one or more of the user IDs in the request, a list of the user IDs is returned, along with error codes and error messages.
        public let userErrors: [UserError]?

        public init(userErrors: [UserError]? = nil) {
            self.userErrors = userErrors
        }

        private enum CodingKeys: String, CodingKey {
            case userErrors = "UserErrors"
        }
    }

    public struct Bot: AWSShape {

        /// The bot email address.
        public let botEmail: String?
        /// The bot ID.
        public let botId: String?
        /// The bot type.
        public let botType: BotType?
        /// The bot creation timestamp, in ISO 8601 format.
        public let createdTimestamp: TimeStamp?
        /// When true, the bot is stopped from running in your account.
        public let disabled: Bool?
        /// The bot display name.
        public let displayName: String?
        /// The security token used to authenticate Amazon Chime with the outgoing event endpoint.
        public let securityToken: String?
        /// The updated bot timestamp, in ISO 8601 format.
        public let updatedTimestamp: TimeStamp?
        /// The unique ID for the bot user.
        public let userId: String?

        public init(botEmail: String? = nil, botId: String? = nil, botType: BotType? = nil, createdTimestamp: TimeStamp? = nil, disabled: Bool? = nil, displayName: String? = nil, securityToken: String? = nil, updatedTimestamp: TimeStamp? = nil, userId: String? = nil) {
            self.botEmail = botEmail
            self.botId = botId
            self.botType = botType
            self.createdTimestamp = createdTimestamp
            self.disabled = disabled
            self.displayName = displayName
            self.securityToken = securityToken
            self.updatedTimestamp = updatedTimestamp
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case botEmail = "BotEmail"
            case botId = "BotId"
            case botType = "BotType"
            case createdTimestamp = "CreatedTimestamp"
            case disabled = "Disabled"
            case displayName = "DisplayName"
            case securityToken = "SecurityToken"
            case updatedTimestamp = "UpdatedTimestamp"
            case userId = "UserId"
        }
    }

    public struct BusinessCallingSettings: AWSShape {

        /// The Amazon S3 bucket designated for call detail record storage.
        public let cdrBucket: String?

        public init(cdrBucket: String? = nil) {
            self.cdrBucket = cdrBucket
        }

        private enum CodingKeys: String, CodingKey {
            case cdrBucket = "CdrBucket"
        }
    }

    public struct CreateAccountRequest: AWSShape {

        /// The name of the Amazon Chime account.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 100)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct CreateAccountResponse: AWSShape {

        /// The Amazon Chime account details.
        public let account: Account?

        public init(account: Account? = nil) {
            self.account = account
        }

        private enum CodingKeys: String, CodingKey {
            case account = "Account"
        }
    }

    public struct CreateAttendeeError: AWSShape {

        /// The error code.
        public let errorCode: String?
        /// The error message.
        public let errorMessage: String?
        /// The Amazon Chime SDK external user ID. Links the attendee to an identity managed by a builder application.
        public let externalUserId: String?

        public init(errorCode: String? = nil, errorMessage: String? = nil, externalUserId: String? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.externalUserId = externalUserId
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "ErrorCode"
            case errorMessage = "ErrorMessage"
            case externalUserId = "ExternalUserId"
        }
    }

    public struct CreateAttendeeRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "meetingId", location: .uri(locationName: "meetingId"))
        ]

        /// The Amazon Chime SDK external user ID. Links the attendee to an identity managed by a builder application.
        public let externalUserId: String
        /// The Amazon Chime SDK meeting ID.
        public let meetingId: String

        public init(externalUserId: String, meetingId: String) {
            self.externalUserId = externalUserId
            self.meetingId = meetingId
        }

        public func validate(name: String) throws {
            try validate(self.externalUserId, name:"externalUserId", parent: name, max: 64)
            try validate(self.externalUserId, name:"externalUserId", parent: name, min: 2)
            try validate(self.meetingId, name:"meetingId", parent: name, pattern: "[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}")
        }

        private enum CodingKeys: String, CodingKey {
            case externalUserId = "ExternalUserId"
            case meetingId = "meetingId"
        }
    }

    public struct CreateAttendeeRequestItem: AWSShape {

        /// The Amazon Chime SDK external user ID. Links the attendee to an identity managed by a builder application.
        public let externalUserId: String

        public init(externalUserId: String) {
            self.externalUserId = externalUserId
        }

        public func validate(name: String) throws {
            try validate(self.externalUserId, name:"externalUserId", parent: name, max: 64)
            try validate(self.externalUserId, name:"externalUserId", parent: name, min: 2)
        }

        private enum CodingKeys: String, CodingKey {
            case externalUserId = "ExternalUserId"
        }
    }

    public struct CreateAttendeeResponse: AWSShape {

        /// The attendee information, including attendee ID and join token.
        public let attendee: Attendee?

        public init(attendee: Attendee? = nil) {
            self.attendee = attendee
        }

        private enum CodingKeys: String, CodingKey {
            case attendee = "Attendee"
        }
    }

    public struct CreateBotRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The bot display name.
        public let displayName: String
        /// The domain of the Amazon Chime Enterprise account.
        public let domain: String?

        public init(accountId: String, displayName: String, domain: String? = nil) {
            self.accountId = accountId
            self.displayName = displayName
            self.domain = domain
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.domain, name:"domain", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case displayName = "DisplayName"
            case domain = "Domain"
        }
    }

    public struct CreateBotResponse: AWSShape {

        /// The bot details.
        public let bot: Bot?

        public init(bot: Bot? = nil) {
            self.bot = bot
        }

        private enum CodingKeys: String, CodingKey {
            case bot = "Bot"
        }
    }

    public struct CreateMeetingRequest: AWSShape {

        /// The unique identifier for the client request. Use a different token for different meetings.
        public let clientRequestToken: String
        /// The Region in which to create the meeting. Available values: ap-northeast-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2.
        public let mediaRegion: String?
        /// Reserved.
        public let meetingHostId: String?
        /// The configuration for resource targets to receive notifications when meeting and attendee events occur.
        public let notificationsConfiguration: MeetingNotificationConfiguration?

        public init(clientRequestToken: String = CreateMeetingRequest.idempotencyToken(), mediaRegion: String? = nil, meetingHostId: String? = nil, notificationsConfiguration: MeetingNotificationConfiguration? = nil) {
            self.clientRequestToken = clientRequestToken
            self.mediaRegion = mediaRegion
            self.meetingHostId = meetingHostId
            self.notificationsConfiguration = notificationsConfiguration
        }

        public func validate(name: String) throws {
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, max: 64)
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, min: 2)
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, pattern: "[-_a-zA-Z0-9]*")
            try validate(self.meetingHostId, name:"meetingHostId", parent: name, max: 64)
            try validate(self.meetingHostId, name:"meetingHostId", parent: name, min: 2)
            try self.notificationsConfiguration?.validate(name: "\(name).notificationsConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case mediaRegion = "MediaRegion"
            case meetingHostId = "MeetingHostId"
            case notificationsConfiguration = "NotificationsConfiguration"
        }
    }

    public struct CreateMeetingResponse: AWSShape {

        /// The meeting information, including the meeting ID and MediaPlacement.
        public let meeting: Meeting?

        public init(meeting: Meeting? = nil) {
            self.meeting = meeting
        }

        private enum CodingKeys: String, CodingKey {
            case meeting = "Meeting"
        }
    }

    public struct CreatePhoneNumberOrderRequest: AWSShape {

        /// List of phone numbers, in E.164 format.
        public let e164PhoneNumbers: [String]
        /// The phone number product type.
        public let productType: PhoneNumberProductType

        public init(e164PhoneNumbers: [String], productType: PhoneNumberProductType) {
            self.e164PhoneNumbers = e164PhoneNumbers
            self.productType = productType
        }

        public func validate(name: String) throws {
            try self.e164PhoneNumbers.forEach {
                try validate($0, name: "e164PhoneNumbers[]", parent: name, pattern: "^\\+?[1-9]\\d{1,14}$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case e164PhoneNumbers = "E164PhoneNumbers"
            case productType = "ProductType"
        }
    }

    public struct CreatePhoneNumberOrderResponse: AWSShape {

        /// The phone number order details.
        public let phoneNumberOrder: PhoneNumberOrder?

        public init(phoneNumberOrder: PhoneNumberOrder? = nil) {
            self.phoneNumberOrder = phoneNumberOrder
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumberOrder = "PhoneNumberOrder"
        }
    }

    public struct CreateRoomMembershipRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "roomId", location: .uri(locationName: "roomId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The Amazon Chime member ID (user ID or bot ID).
        public let memberId: String
        /// The role of the member.
        public let role: RoomMembershipRole?
        /// The room ID.
        public let roomId: String

        public init(accountId: String, memberId: String, role: RoomMembershipRole? = nil, roomId: String) {
            self.accountId = accountId
            self.memberId = memberId
            self.role = role
            self.roomId = roomId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.memberId, name:"memberId", parent: name, pattern: ".*\\S.*")
            try validate(self.roomId, name:"roomId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case memberId = "MemberId"
            case role = "Role"
            case roomId = "roomId"
        }
    }

    public struct CreateRoomMembershipResponse: AWSShape {

        /// The room membership details.
        public let roomMembership: RoomMembership?

        public init(roomMembership: RoomMembership? = nil) {
            self.roomMembership = roomMembership
        }

        private enum CodingKeys: String, CodingKey {
            case roomMembership = "RoomMembership"
        }
    }

    public struct CreateRoomRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The idempotency token for the request.
        public let clientRequestToken: String?
        /// The room name.
        public let name: String

        public init(accountId: String, clientRequestToken: String? = CreateRoomRequest.idempotencyToken(), name: String) {
            self.accountId = accountId
            self.clientRequestToken = clientRequestToken
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, max: 64)
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, min: 2)
            try validate(self.clientRequestToken, name:"clientRequestToken", parent: name, pattern: "[-_a-zA-Z0-9]*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case clientRequestToken = "ClientRequestToken"
            case name = "Name"
        }
    }

    public struct CreateRoomResponse: AWSShape {

        /// The room details.
        public let room: Room?

        public init(room: Room? = nil) {
            self.room = room
        }

        private enum CodingKeys: String, CodingKey {
            case room = "Room"
        }
    }

    public struct CreateUserRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The user's email address.
        public let email: String?
        /// The user name.
        public let username: String?
        /// The user type.
        public let userType: UserType?

        public init(accountId: String, email: String? = nil, username: String? = nil, userType: UserType? = nil) {
            self.accountId = accountId
            self.email = email
            self.username = username
            self.userType = userType
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.email, name:"email", parent: name, pattern: ".+@.+\\..+")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case email = "Email"
            case username = "Username"
            case userType = "UserType"
        }
    }

    public struct CreateUserResponse: AWSShape {

        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct CreateVoiceConnectorGroupRequest: AWSShape {

        /// The name of the Amazon Chime Voice Connector group.
        public let name: String
        /// The Amazon Chime Voice Connectors to route inbound calls to.
        public let voiceConnectorItems: [VoiceConnectorItem]?

        public init(name: String, voiceConnectorItems: [VoiceConnectorItem]? = nil) {
            self.name = name
            self.voiceConnectorItems = voiceConnectorItems
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 1)
            try self.voiceConnectorItems?.forEach {
                try $0.validate(name: "\(name).voiceConnectorItems[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case voiceConnectorItems = "VoiceConnectorItems"
        }
    }

    public struct CreateVoiceConnectorGroupResponse: AWSShape {

        /// The Amazon Chime Voice Connector group details.
        public let voiceConnectorGroup: VoiceConnectorGroup?

        public init(voiceConnectorGroup: VoiceConnectorGroup? = nil) {
            self.voiceConnectorGroup = voiceConnectorGroup
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorGroup = "VoiceConnectorGroup"
        }
    }

    public struct CreateVoiceConnectorRequest: AWSShape {

        /// The AWS Region in which the Amazon Chime Voice Connector is created. Default value: us-east-1.
        public let awsRegion: VoiceConnectorAwsRegion?
        /// The name of the Amazon Chime Voice Connector.
        public let name: String
        /// When enabled, requires encryption for the Amazon Chime Voice Connector.
        public let requireEncryption: Bool

        public init(awsRegion: VoiceConnectorAwsRegion? = nil, name: String, requireEncryption: Bool) {
            self.awsRegion = awsRegion
            self.name = name
            self.requireEncryption = requireEncryption
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case awsRegion = "AwsRegion"
            case name = "Name"
            case requireEncryption = "RequireEncryption"
        }
    }

    public struct CreateVoiceConnectorResponse: AWSShape {

        /// The Amazon Chime Voice Connector details.
        public let voiceConnector: VoiceConnector?

        public init(voiceConnector: VoiceConnector? = nil) {
            self.voiceConnector = voiceConnector
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnector = "VoiceConnector"
        }
    }

    public struct Credential: AWSShape {

        /// The RFC2617 compliant password associated with the SIP credentials, in US-ASCII format.
        public let password: String?
        /// The RFC2617 compliant user name associated with the SIP credentials, in US-ASCII format.
        public let username: String?

        public init(password: String? = nil, username: String? = nil) {
            self.password = password
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case password = "Password"
            case username = "Username"
        }
    }

    public struct DeleteAccountRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String

        public init(accountId: String) {
            self.accountId = accountId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
        }
    }

    public struct DeleteAccountResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteAttendeeRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "attendeeId", location: .uri(locationName: "attendeeId")), 
            AWSMemberEncoding(label: "meetingId", location: .uri(locationName: "meetingId"))
        ]

        /// The Amazon Chime SDK attendee ID.
        public let attendeeId: String
        /// The Amazon Chime SDK meeting ID.
        public let meetingId: String

        public init(attendeeId: String, meetingId: String) {
            self.attendeeId = attendeeId
            self.meetingId = meetingId
        }

        public func validate(name: String) throws {
            try validate(self.attendeeId, name:"attendeeId", parent: name, pattern: "[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}")
            try validate(self.meetingId, name:"meetingId", parent: name, pattern: "[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}")
        }

        private enum CodingKeys: String, CodingKey {
            case attendeeId = "attendeeId"
            case meetingId = "meetingId"
        }
    }

    public struct DeleteEventsConfigurationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "botId", location: .uri(locationName: "botId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The bot ID.
        public let botId: String

        public init(accountId: String, botId: String) {
            self.accountId = accountId
            self.botId = botId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.botId, name:"botId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case botId = "botId"
        }
    }

    public struct DeleteMeetingRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "meetingId", location: .uri(locationName: "meetingId"))
        ]

        /// The Amazon Chime SDK meeting ID.
        public let meetingId: String

        public init(meetingId: String) {
            self.meetingId = meetingId
        }

        public func validate(name: String) throws {
            try validate(self.meetingId, name:"meetingId", parent: name, pattern: "[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}")
        }

        private enum CodingKeys: String, CodingKey {
            case meetingId = "meetingId"
        }
    }

    public struct DeletePhoneNumberRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "phoneNumberId", location: .uri(locationName: "phoneNumberId"))
        ]

        /// The phone number ID.
        public let phoneNumberId: String

        public init(phoneNumberId: String) {
            self.phoneNumberId = phoneNumberId
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumberId = "phoneNumberId"
        }
    }

    public struct DeleteRoomMembershipRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "memberId", location: .uri(locationName: "memberId")), 
            AWSMemberEncoding(label: "roomId", location: .uri(locationName: "roomId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The member ID (user ID or bot ID).
        public let memberId: String
        /// The room ID.
        public let roomId: String

        public init(accountId: String, memberId: String, roomId: String) {
            self.accountId = accountId
            self.memberId = memberId
            self.roomId = roomId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.memberId, name:"memberId", parent: name, pattern: ".*\\S.*")
            try validate(self.roomId, name:"roomId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case memberId = "memberId"
            case roomId = "roomId"
        }
    }

    public struct DeleteRoomRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "roomId", location: .uri(locationName: "roomId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The chat room ID.
        public let roomId: String

        public init(accountId: String, roomId: String) {
            self.accountId = accountId
            self.roomId = roomId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.roomId, name:"roomId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case roomId = "roomId"
        }
    }

    public struct DeleteVoiceConnectorGroupRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorGroupId", location: .uri(locationName: "voiceConnectorGroupId"))
        ]

        /// The Amazon Chime Voice Connector group ID.
        public let voiceConnectorGroupId: String

        public init(voiceConnectorGroupId: String) {
            self.voiceConnectorGroupId = voiceConnectorGroupId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorGroupId, name:"voiceConnectorGroupId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorGroupId = "voiceConnectorGroupId"
        }
    }

    public struct DeleteVoiceConnectorOriginationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(voiceConnectorId: String) {
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct DeleteVoiceConnectorRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(voiceConnectorId: String) {
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct DeleteVoiceConnectorStreamingConfigurationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(voiceConnectorId: String) {
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct DeleteVoiceConnectorTerminationCredentialsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The RFC2617 compliant username associated with the SIP credentials, in US-ASCII format.
        public let usernames: [String]?
        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(usernames: [String]? = nil, voiceConnectorId: String) {
            self.usernames = usernames
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case usernames = "Usernames"
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct DeleteVoiceConnectorTerminationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(voiceConnectorId: String) {
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct DisassociatePhoneNumberFromUserRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "userId", location: .uri(locationName: "userId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The user ID.
        public let userId: String

        public init(accountId: String, userId: String) {
            self.accountId = accountId
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case userId = "userId"
        }
    }

    public struct DisassociatePhoneNumberFromUserResponse: AWSShape {


        public init() {
        }

    }

    public struct DisassociatePhoneNumbersFromVoiceConnectorGroupRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorGroupId", location: .uri(locationName: "voiceConnectorGroupId"))
        ]

        /// List of phone numbers, in E.164 format.
        public let e164PhoneNumbers: [String]?
        /// The Amazon Chime Voice Connector group ID.
        public let voiceConnectorGroupId: String

        public init(e164PhoneNumbers: [String]? = nil, voiceConnectorGroupId: String) {
            self.e164PhoneNumbers = e164PhoneNumbers
            self.voiceConnectorGroupId = voiceConnectorGroupId
        }

        public func validate(name: String) throws {
            try self.e164PhoneNumbers?.forEach {
                try validate($0, name: "e164PhoneNumbers[]", parent: name, pattern: "^\\+?[1-9]\\d{1,14}$")
            }
            try validate(self.voiceConnectorGroupId, name:"voiceConnectorGroupId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case e164PhoneNumbers = "E164PhoneNumbers"
            case voiceConnectorGroupId = "voiceConnectorGroupId"
        }
    }

    public struct DisassociatePhoneNumbersFromVoiceConnectorGroupResponse: AWSShape {

        /// If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
        public let phoneNumberErrors: [PhoneNumberError]?

        public init(phoneNumberErrors: [PhoneNumberError]? = nil) {
            self.phoneNumberErrors = phoneNumberErrors
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumberErrors = "PhoneNumberErrors"
        }
    }

    public struct DisassociatePhoneNumbersFromVoiceConnectorRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// List of phone numbers, in E.164 format.
        public let e164PhoneNumbers: [String]?
        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(e164PhoneNumbers: [String]? = nil, voiceConnectorId: String) {
            self.e164PhoneNumbers = e164PhoneNumbers
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try self.e164PhoneNumbers?.forEach {
                try validate($0, name: "e164PhoneNumbers[]", parent: name, pattern: "^\\+?[1-9]\\d{1,14}$")
            }
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case e164PhoneNumbers = "E164PhoneNumbers"
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct DisassociatePhoneNumbersFromVoiceConnectorResponse: AWSShape {

        /// If the action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
        public let phoneNumberErrors: [PhoneNumberError]?

        public init(phoneNumberErrors: [PhoneNumberError]? = nil) {
            self.phoneNumberErrors = phoneNumberErrors
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumberErrors = "PhoneNumberErrors"
        }
    }

    public struct DisassociateSigninDelegateGroupsFromAccountRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The sign-in delegate group names.
        public let groupNames: [String]

        public init(accountId: String, groupNames: [String]) {
            self.accountId = accountId
            self.groupNames = groupNames
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.groupNames, name:"groupNames", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case groupNames = "GroupNames"
        }
    }

    public struct DisassociateSigninDelegateGroupsFromAccountResponse: AWSShape {


        public init() {
        }

    }

    public struct EventsConfiguration: AWSShape {

        /// The bot ID.
        public let botId: String?
        /// Lambda function ARN that allows a bot to receive outgoing events.
        public let lambdaFunctionArn: String?
        /// HTTPS endpoint that allows a bot to receive outgoing events.
        public let outboundEventsHTTPSEndpoint: String?

        public init(botId: String? = nil, lambdaFunctionArn: String? = nil, outboundEventsHTTPSEndpoint: String? = nil) {
            self.botId = botId
            self.lambdaFunctionArn = lambdaFunctionArn
            self.outboundEventsHTTPSEndpoint = outboundEventsHTTPSEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case botId = "BotId"
            case lambdaFunctionArn = "LambdaFunctionArn"
            case outboundEventsHTTPSEndpoint = "OutboundEventsHTTPSEndpoint"
        }
    }

    public struct GetAccountRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String

        public init(accountId: String) {
            self.accountId = accountId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
        }
    }

    public struct GetAccountResponse: AWSShape {

        /// The Amazon Chime account details.
        public let account: Account?

        public init(account: Account? = nil) {
            self.account = account
        }

        private enum CodingKeys: String, CodingKey {
            case account = "Account"
        }
    }

    public struct GetAccountSettingsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String

        public init(accountId: String) {
            self.accountId = accountId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
        }
    }

    public struct GetAccountSettingsResponse: AWSShape {

        /// The Amazon Chime account settings.
        public let accountSettings: AccountSettings?

        public init(accountSettings: AccountSettings? = nil) {
            self.accountSettings = accountSettings
        }

        private enum CodingKeys: String, CodingKey {
            case accountSettings = "AccountSettings"
        }
    }

    public struct GetAttendeeRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "attendeeId", location: .uri(locationName: "attendeeId")), 
            AWSMemberEncoding(label: "meetingId", location: .uri(locationName: "meetingId"))
        ]

        /// The Amazon Chime SDK attendee ID.
        public let attendeeId: String
        /// The Amazon Chime SDK meeting ID.
        public let meetingId: String

        public init(attendeeId: String, meetingId: String) {
            self.attendeeId = attendeeId
            self.meetingId = meetingId
        }

        public func validate(name: String) throws {
            try validate(self.attendeeId, name:"attendeeId", parent: name, pattern: "[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}")
            try validate(self.meetingId, name:"meetingId", parent: name, pattern: "[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}")
        }

        private enum CodingKeys: String, CodingKey {
            case attendeeId = "attendeeId"
            case meetingId = "meetingId"
        }
    }

    public struct GetAttendeeResponse: AWSShape {

        /// The Amazon Chime SDK attendee information.
        public let attendee: Attendee?

        public init(attendee: Attendee? = nil) {
            self.attendee = attendee
        }

        private enum CodingKeys: String, CodingKey {
            case attendee = "Attendee"
        }
    }

    public struct GetBotRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "botId", location: .uri(locationName: "botId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The bot ID.
        public let botId: String

        public init(accountId: String, botId: String) {
            self.accountId = accountId
            self.botId = botId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.botId, name:"botId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case botId = "botId"
        }
    }

    public struct GetBotResponse: AWSShape {

        /// The chat bot details.
        public let bot: Bot?

        public init(bot: Bot? = nil) {
            self.bot = bot
        }

        private enum CodingKeys: String, CodingKey {
            case bot = "Bot"
        }
    }

    public struct GetEventsConfigurationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "botId", location: .uri(locationName: "botId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The bot ID.
        public let botId: String

        public init(accountId: String, botId: String) {
            self.accountId = accountId
            self.botId = botId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.botId, name:"botId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case botId = "botId"
        }
    }

    public struct GetEventsConfigurationResponse: AWSShape {

        /// The events configuration details.
        public let eventsConfiguration: EventsConfiguration?

        public init(eventsConfiguration: EventsConfiguration? = nil) {
            self.eventsConfiguration = eventsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case eventsConfiguration = "EventsConfiguration"
        }
    }

    public struct GetGlobalSettingsResponse: AWSShape {

        /// The Amazon Chime Business Calling settings.
        public let businessCalling: BusinessCallingSettings?
        /// The Amazon Chime Voice Connector settings.
        public let voiceConnector: VoiceConnectorSettings?

        public init(businessCalling: BusinessCallingSettings? = nil, voiceConnector: VoiceConnectorSettings? = nil) {
            self.businessCalling = businessCalling
            self.voiceConnector = voiceConnector
        }

        private enum CodingKeys: String, CodingKey {
            case businessCalling = "BusinessCalling"
            case voiceConnector = "VoiceConnector"
        }
    }

    public struct GetMeetingRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "meetingId", location: .uri(locationName: "meetingId"))
        ]

        /// The Amazon Chime SDK meeting ID.
        public let meetingId: String

        public init(meetingId: String) {
            self.meetingId = meetingId
        }

        public func validate(name: String) throws {
            try validate(self.meetingId, name:"meetingId", parent: name, pattern: "[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}")
        }

        private enum CodingKeys: String, CodingKey {
            case meetingId = "meetingId"
        }
    }

    public struct GetMeetingResponse: AWSShape {

        /// The Amazon Chime SDK meeting information.
        public let meeting: Meeting?

        public init(meeting: Meeting? = nil) {
            self.meeting = meeting
        }

        private enum CodingKeys: String, CodingKey {
            case meeting = "Meeting"
        }
    }

    public struct GetPhoneNumberOrderRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "phoneNumberOrderId", location: .uri(locationName: "phoneNumberOrderId"))
        ]

        /// The ID for the phone number order.
        public let phoneNumberOrderId: String

        public init(phoneNumberOrderId: String) {
            self.phoneNumberOrderId = phoneNumberOrderId
        }

        public func validate(name: String) throws {
            try validate(self.phoneNumberOrderId, name:"phoneNumberOrderId", parent: name, pattern: "[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}")
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumberOrderId = "phoneNumberOrderId"
        }
    }

    public struct GetPhoneNumberOrderResponse: AWSShape {

        /// The phone number order details.
        public let phoneNumberOrder: PhoneNumberOrder?

        public init(phoneNumberOrder: PhoneNumberOrder? = nil) {
            self.phoneNumberOrder = phoneNumberOrder
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumberOrder = "PhoneNumberOrder"
        }
    }

    public struct GetPhoneNumberRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "phoneNumberId", location: .uri(locationName: "phoneNumberId"))
        ]

        /// The phone number ID.
        public let phoneNumberId: String

        public init(phoneNumberId: String) {
            self.phoneNumberId = phoneNumberId
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumberId = "phoneNumberId"
        }
    }

    public struct GetPhoneNumberResponse: AWSShape {

        /// The phone number details.
        public let phoneNumber: PhoneNumber?

        public init(phoneNumber: PhoneNumber? = nil) {
            self.phoneNumber = phoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumber = "PhoneNumber"
        }
    }

    public struct GetPhoneNumberSettingsResponse: AWSShape {

        /// The default outbound calling name for the account.
        public let callingName: String?
        /// The updated outbound calling name timestamp, in ISO 8601 format.
        public let callingNameUpdatedTimestamp: TimeStamp?

        public init(callingName: String? = nil, callingNameUpdatedTimestamp: TimeStamp? = nil) {
            self.callingName = callingName
            self.callingNameUpdatedTimestamp = callingNameUpdatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case callingName = "CallingName"
            case callingNameUpdatedTimestamp = "CallingNameUpdatedTimestamp"
        }
    }

    public struct GetRoomRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "roomId", location: .uri(locationName: "roomId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The room ID.
        public let roomId: String

        public init(accountId: String, roomId: String) {
            self.accountId = accountId
            self.roomId = roomId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.roomId, name:"roomId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case roomId = "roomId"
        }
    }

    public struct GetRoomResponse: AWSShape {

        /// The room details.
        public let room: Room?

        public init(room: Room? = nil) {
            self.room = room
        }

        private enum CodingKeys: String, CodingKey {
            case room = "Room"
        }
    }

    public struct GetUserRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "userId", location: .uri(locationName: "userId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The user ID.
        public let userId: String

        public init(accountId: String, userId: String) {
            self.accountId = accountId
            self.userId = userId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.userId, name:"userId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case userId = "userId"
        }
    }

    public struct GetUserResponse: AWSShape {

        /// The user details.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct GetUserSettingsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "userId", location: .uri(locationName: "userId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The user ID.
        public let userId: String

        public init(accountId: String, userId: String) {
            self.accountId = accountId
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case userId = "userId"
        }
    }

    public struct GetUserSettingsResponse: AWSShape {

        /// The user settings.
        public let userSettings: UserSettings?

        public init(userSettings: UserSettings? = nil) {
            self.userSettings = userSettings
        }

        private enum CodingKeys: String, CodingKey {
            case userSettings = "UserSettings"
        }
    }

    public struct GetVoiceConnectorGroupRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorGroupId", location: .uri(locationName: "voiceConnectorGroupId"))
        ]

        /// The Amazon Chime Voice Connector group ID.
        public let voiceConnectorGroupId: String

        public init(voiceConnectorGroupId: String) {
            self.voiceConnectorGroupId = voiceConnectorGroupId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorGroupId, name:"voiceConnectorGroupId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorGroupId = "voiceConnectorGroupId"
        }
    }

    public struct GetVoiceConnectorGroupResponse: AWSShape {

        /// The Amazon Chime Voice Connector group details.
        public let voiceConnectorGroup: VoiceConnectorGroup?

        public init(voiceConnectorGroup: VoiceConnectorGroup? = nil) {
            self.voiceConnectorGroup = voiceConnectorGroup
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorGroup = "VoiceConnectorGroup"
        }
    }

    public struct GetVoiceConnectorLoggingConfigurationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(voiceConnectorId: String) {
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct GetVoiceConnectorLoggingConfigurationResponse: AWSShape {

        /// The logging configuration details.
        public let loggingConfiguration: LoggingConfiguration?

        public init(loggingConfiguration: LoggingConfiguration? = nil) {
            self.loggingConfiguration = loggingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case loggingConfiguration = "LoggingConfiguration"
        }
    }

    public struct GetVoiceConnectorOriginationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(voiceConnectorId: String) {
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct GetVoiceConnectorOriginationResponse: AWSShape {

        /// The origination setting details.
        public let origination: Origination?

        public init(origination: Origination? = nil) {
            self.origination = origination
        }

        private enum CodingKeys: String, CodingKey {
            case origination = "Origination"
        }
    }

    public struct GetVoiceConnectorRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(voiceConnectorId: String) {
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct GetVoiceConnectorResponse: AWSShape {

        /// The Amazon Chime Voice Connector details.
        public let voiceConnector: VoiceConnector?

        public init(voiceConnector: VoiceConnector? = nil) {
            self.voiceConnector = voiceConnector
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnector = "VoiceConnector"
        }
    }

    public struct GetVoiceConnectorStreamingConfigurationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(voiceConnectorId: String) {
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct GetVoiceConnectorStreamingConfigurationResponse: AWSShape {

        /// The streaming configuration details.
        public let streamingConfiguration: StreamingConfiguration?

        public init(streamingConfiguration: StreamingConfiguration? = nil) {
            self.streamingConfiguration = streamingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case streamingConfiguration = "StreamingConfiguration"
        }
    }

    public struct GetVoiceConnectorTerminationHealthRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(voiceConnectorId: String) {
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct GetVoiceConnectorTerminationHealthResponse: AWSShape {

        /// The termination health details.
        public let terminationHealth: TerminationHealth?

        public init(terminationHealth: TerminationHealth? = nil) {
            self.terminationHealth = terminationHealth
        }

        private enum CodingKeys: String, CodingKey {
            case terminationHealth = "TerminationHealth"
        }
    }

    public struct GetVoiceConnectorTerminationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(voiceConnectorId: String) {
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct GetVoiceConnectorTerminationResponse: AWSShape {

        /// The termination setting details.
        public let termination: Termination?

        public init(termination: Termination? = nil) {
            self.termination = termination
        }

        private enum CodingKeys: String, CodingKey {
            case termination = "Termination"
        }
    }

    public struct Invite: AWSShape {

        /// The email address to which the invite is sent.
        public let emailAddress: String?
        /// The status of the invite email.
        public let emailStatus: EmailStatus?
        /// The invite ID.
        public let inviteId: String?
        /// The status of the invite.
        public let status: InviteStatus?

        public init(emailAddress: String? = nil, emailStatus: EmailStatus? = nil, inviteId: String? = nil, status: InviteStatus? = nil) {
            self.emailAddress = emailAddress
            self.emailStatus = emailStatus
            self.inviteId = inviteId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case emailAddress = "EmailAddress"
            case emailStatus = "EmailStatus"
            case inviteId = "InviteId"
            case status = "Status"
        }
    }

    public struct InviteUsersRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The user email addresses to which to send the email invitation.
        public let userEmailList: [String]
        /// The user type.
        public let userType: UserType?

        public init(accountId: String, userEmailList: [String], userType: UserType? = nil) {
            self.accountId = accountId
            self.userEmailList = userEmailList
            self.userType = userType
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try self.userEmailList.forEach {
                try validate($0, name: "userEmailList[]", parent: name, pattern: ".+@.+\\..+")
            }
            try validate(self.userEmailList, name:"userEmailList", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case userEmailList = "UserEmailList"
            case userType = "UserType"
        }
    }

    public struct InviteUsersResponse: AWSShape {

        /// The email invitation details.
        public let invites: [Invite]?

        public init(invites: [Invite]? = nil) {
            self.invites = invites
        }

        private enum CodingKeys: String, CodingKey {
            case invites = "Invites"
        }
    }

    public struct ListAccountsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "max-results")), 
            AWSMemberEncoding(label: "name", location: .querystring(locationName: "name")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "next-token")), 
            AWSMemberEncoding(label: "userEmail", location: .querystring(locationName: "user-email"))
        ]

        /// The maximum number of results to return in a single call. Defaults to 100.
        public let maxResults: Int?
        /// Amazon Chime account name prefix with which to filter results.
        public let name: String?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// User email address with which to filter results.
        public let userEmail: String?

        public init(maxResults: Int? = nil, name: String? = nil, nextToken: String? = nil, userEmail: String? = nil) {
            self.maxResults = maxResults
            self.name = name
            self.nextToken = nextToken
            self.userEmail = userEmail
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 200)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, max: 100)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: ".*\\S.*")
            try validate(self.userEmail, name:"userEmail", parent: name, pattern: ".+@.+\\..+")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "max-results"
            case name = "name"
            case nextToken = "next-token"
            case userEmail = "user-email"
        }
    }

    public struct ListAccountsResponse: AWSShape {

        /// List of Amazon Chime accounts and account details.
        public let accounts: [Account]?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(accounts: [Account]? = nil, nextToken: String? = nil) {
            self.accounts = accounts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case accounts = "Accounts"
            case nextToken = "NextToken"
        }
    }

    public struct ListAttendeesRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "max-results")), 
            AWSMemberEncoding(label: "meetingId", location: .uri(locationName: "meetingId")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "next-token"))
        ]

        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// The Amazon Chime SDK meeting ID.
        public let meetingId: String
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, meetingId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.meetingId = meetingId
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 99)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.meetingId, name:"meetingId", parent: name, pattern: "[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "max-results"
            case meetingId = "meetingId"
            case nextToken = "next-token"
        }
    }

    public struct ListAttendeesResponse: AWSShape {

        /// The Amazon Chime SDK attendee information.
        public let attendees: [Attendee]?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(attendees: [Attendee]? = nil, nextToken: String? = nil) {
            self.attendees = attendees
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case attendees = "Attendees"
            case nextToken = "NextToken"
        }
    }

    public struct ListBotsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "max-results")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "next-token"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The maximum number of results to return in a single call. The default is 10.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(accountId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.accountId = accountId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 99)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case maxResults = "max-results"
            case nextToken = "next-token"
        }
    }

    public struct ListBotsResponse: AWSShape {

        /// List of bots and bot details.
        public let bots: [Bot]?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(bots: [Bot]? = nil, nextToken: String? = nil) {
            self.bots = bots
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case bots = "Bots"
            case nextToken = "NextToken"
        }
    }

    public struct ListMeetingsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "max-results")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "next-token"))
        ]

        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 99)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "max-results"
            case nextToken = "next-token"
        }
    }

    public struct ListMeetingsResponse: AWSShape {

        /// The Amazon Chime SDK meeting information.
        public let meetings: [Meeting]?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(meetings: [Meeting]? = nil, nextToken: String? = nil) {
            self.meetings = meetings
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case meetings = "Meetings"
            case nextToken = "NextToken"
        }
    }

    public struct ListPhoneNumberOrdersRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "max-results")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "next-token"))
        ]

        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 99)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "max-results"
            case nextToken = "next-token"
        }
    }

    public struct ListPhoneNumberOrdersResponse: AWSShape {

        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The phone number order details.
        public let phoneNumberOrders: [PhoneNumberOrder]?

        public init(nextToken: String? = nil, phoneNumberOrders: [PhoneNumberOrder]? = nil) {
            self.nextToken = nextToken
            self.phoneNumberOrders = phoneNumberOrders
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case phoneNumberOrders = "PhoneNumberOrders"
        }
    }

    public struct ListPhoneNumbersRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "filterName", location: .querystring(locationName: "filter-name")), 
            AWSMemberEncoding(label: "filterValue", location: .querystring(locationName: "filter-value")), 
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "max-results")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "next-token")), 
            AWSMemberEncoding(label: "productType", location: .querystring(locationName: "product-type")), 
            AWSMemberEncoding(label: "status", location: .querystring(locationName: "status"))
        ]

        /// The filter to use to limit the number of results.
        public let filterName: PhoneNumberAssociationName?
        /// The value to use for the filter.
        public let filterValue: String?
        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The phone number product type.
        public let productType: PhoneNumberProductType?
        /// The phone number status.
        public let status: PhoneNumberStatus?

        public init(filterName: PhoneNumberAssociationName? = nil, filterValue: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, productType: PhoneNumberProductType? = nil, status: PhoneNumberStatus? = nil) {
            self.filterName = filterName
            self.filterValue = filterValue
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.productType = productType
            self.status = status
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 99)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filterName = "filter-name"
            case filterValue = "filter-value"
            case maxResults = "max-results"
            case nextToken = "next-token"
            case productType = "product-type"
            case status = "status"
        }
    }

    public struct ListPhoneNumbersResponse: AWSShape {

        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The phone number details.
        public let phoneNumbers: [PhoneNumber]?

        public init(nextToken: String? = nil, phoneNumbers: [PhoneNumber]? = nil) {
            self.nextToken = nextToken
            self.phoneNumbers = phoneNumbers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case phoneNumbers = "PhoneNumbers"
        }
    }

    public struct ListRoomMembershipsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "max-results")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "next-token")), 
            AWSMemberEncoding(label: "roomId", location: .uri(locationName: "roomId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The room ID.
        public let roomId: String

        public init(accountId: String, maxResults: Int? = nil, nextToken: String? = nil, roomId: String) {
            self.accountId = accountId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.roomId = roomId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 99)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.roomId, name:"roomId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case maxResults = "max-results"
            case nextToken = "next-token"
            case roomId = "roomId"
        }
    }

    public struct ListRoomMembershipsResponse: AWSShape {

        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The room membership details.
        public let roomMemberships: [RoomMembership]?

        public init(nextToken: String? = nil, roomMemberships: [RoomMembership]? = nil) {
            self.nextToken = nextToken
            self.roomMemberships = roomMemberships
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case roomMemberships = "RoomMemberships"
        }
    }

    public struct ListRoomsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "max-results")), 
            AWSMemberEncoding(label: "memberId", location: .querystring(locationName: "member-id")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "next-token"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// The member ID (user ID or bot ID).
        public let memberId: String?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(accountId: String, maxResults: Int? = nil, memberId: String? = nil, nextToken: String? = nil) {
            self.accountId = accountId
            self.maxResults = maxResults
            self.memberId = memberId
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 99)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case maxResults = "max-results"
            case memberId = "member-id"
            case nextToken = "next-token"
        }
    }

    public struct ListRoomsResponse: AWSShape {

        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The room details.
        public let rooms: [Room]?

        public init(nextToken: String? = nil, rooms: [Room]? = nil) {
            self.nextToken = nextToken
            self.rooms = rooms
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case rooms = "Rooms"
        }
    }

    public struct ListUsersRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "max-results")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "next-token")), 
            AWSMemberEncoding(label: "userEmail", location: .querystring(locationName: "user-email")), 
            AWSMemberEncoding(label: "userType", location: .querystring(locationName: "user-type"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The maximum number of results to return in a single call. Defaults to 100.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// Optional. The user email address used to filter results. Maximum 1.
        public let userEmail: String?
        /// The user type.
        public let userType: UserType?

        public init(accountId: String, maxResults: Int? = nil, nextToken: String? = nil, userEmail: String? = nil, userType: UserType? = nil) {
            self.accountId = accountId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.userEmail = userEmail
            self.userType = userType
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 200)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.userEmail, name:"userEmail", parent: name, pattern: ".+@.+\\..+")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case maxResults = "max-results"
            case nextToken = "next-token"
            case userEmail = "user-email"
            case userType = "user-type"
        }
    }

    public struct ListUsersResponse: AWSShape {

        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// List of users and user details.
        public let users: [User]?

        public init(nextToken: String? = nil, users: [User]? = nil) {
            self.nextToken = nextToken
            self.users = users
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case users = "Users"
        }
    }

    public struct ListVoiceConnectorGroupsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "max-results")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "next-token"))
        ]

        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 99)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "max-results"
            case nextToken = "next-token"
        }
    }

    public struct ListVoiceConnectorGroupsResponse: AWSShape {

        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The details of the Amazon Chime Voice Connector groups.
        public let voiceConnectorGroups: [VoiceConnectorGroup]?

        public init(nextToken: String? = nil, voiceConnectorGroups: [VoiceConnectorGroup]? = nil) {
            self.nextToken = nextToken
            self.voiceConnectorGroups = voiceConnectorGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case voiceConnectorGroups = "VoiceConnectorGroups"
        }
    }

    public struct ListVoiceConnectorTerminationCredentialsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(voiceConnectorId: String) {
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct ListVoiceConnectorTerminationCredentialsResponse: AWSShape {

        /// A list of user names.
        public let usernames: [String]?

        public init(usernames: [String]? = nil) {
            self.usernames = usernames
        }

        private enum CodingKeys: String, CodingKey {
            case usernames = "Usernames"
        }
    }

    public struct ListVoiceConnectorsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "max-results")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "next-token"))
        ]

        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 99)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "max-results"
            case nextToken = "next-token"
        }
    }

    public struct ListVoiceConnectorsResponse: AWSShape {

        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The details of the Amazon Chime Voice Connectors.
        public let voiceConnectors: [VoiceConnector]?

        public init(nextToken: String? = nil, voiceConnectors: [VoiceConnector]? = nil) {
            self.nextToken = nextToken
            self.voiceConnectors = voiceConnectors
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case voiceConnectors = "VoiceConnectors"
        }
    }

    public struct LoggingConfiguration: AWSShape {

        /// When true, enables SIP message logs for sending to Amazon CloudWatch Logs.
        public let enableSIPLogs: Bool?

        public init(enableSIPLogs: Bool? = nil) {
            self.enableSIPLogs = enableSIPLogs
        }

        private enum CodingKeys: String, CodingKey {
            case enableSIPLogs = "EnableSIPLogs"
        }
    }

    public struct LogoutUserRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "userId", location: .uri(locationName: "userId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The user ID.
        public let userId: String

        public init(accountId: String, userId: String) {
            self.accountId = accountId
            self.userId = userId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.userId, name:"userId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case userId = "userId"
        }
    }

    public struct LogoutUserResponse: AWSShape {


        public init() {
        }

    }

    public struct MediaPlacement: AWSShape {

        /// The audio fallback URL.
        public let audioFallbackUrl: String?
        /// The audio host URL.
        public let audioHostUrl: String?
        /// The screen data URL.
        public let screenDataUrl: String?
        /// The screen sharing URL.
        public let screenSharingUrl: String?
        /// The screen viewing URL.
        public let screenViewingUrl: String?
        /// The signaling URL.
        public let signalingUrl: String?
        /// The turn control URL.
        public let turnControlUrl: String?

        public init(audioFallbackUrl: String? = nil, audioHostUrl: String? = nil, screenDataUrl: String? = nil, screenSharingUrl: String? = nil, screenViewingUrl: String? = nil, signalingUrl: String? = nil, turnControlUrl: String? = nil) {
            self.audioFallbackUrl = audioFallbackUrl
            self.audioHostUrl = audioHostUrl
            self.screenDataUrl = screenDataUrl
            self.screenSharingUrl = screenSharingUrl
            self.screenViewingUrl = screenViewingUrl
            self.signalingUrl = signalingUrl
            self.turnControlUrl = turnControlUrl
        }

        private enum CodingKeys: String, CodingKey {
            case audioFallbackUrl = "AudioFallbackUrl"
            case audioHostUrl = "AudioHostUrl"
            case screenDataUrl = "ScreenDataUrl"
            case screenSharingUrl = "ScreenSharingUrl"
            case screenViewingUrl = "ScreenViewingUrl"
            case signalingUrl = "SignalingUrl"
            case turnControlUrl = "TurnControlUrl"
        }
    }

    public struct Meeting: AWSShape {

        /// The media placement for the meeting.
        public let mediaPlacement: MediaPlacement?
        /// The Region in which to create the meeting. Available values: ap-northeast-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2.
        public let mediaRegion: String?
        /// The Amazon Chime SDK meeting ID.
        public let meetingId: String?

        public init(mediaPlacement: MediaPlacement? = nil, mediaRegion: String? = nil, meetingId: String? = nil) {
            self.mediaPlacement = mediaPlacement
            self.mediaRegion = mediaRegion
            self.meetingId = meetingId
        }

        private enum CodingKeys: String, CodingKey {
            case mediaPlacement = "MediaPlacement"
            case mediaRegion = "MediaRegion"
            case meetingId = "MeetingId"
        }
    }

    public struct MeetingNotificationConfiguration: AWSShape {

        /// The SNS topic ARN.
        public let snsTopicArn: String?
        /// The SQS queue ARN.
        public let sqsQueueArn: String?

        public init(snsTopicArn: String? = nil, sqsQueueArn: String? = nil) {
            self.snsTopicArn = snsTopicArn
            self.sqsQueueArn = sqsQueueArn
        }

        public func validate(name: String) throws {
            try validate(self.snsTopicArn, name:"snsTopicArn", parent: name, max: 1024)
            try validate(self.snsTopicArn, name:"snsTopicArn", parent: name, min: 1)
            try validate(self.snsTopicArn, name:"snsTopicArn", parent: name, pattern: "^arn[\\/\\:\\-\\_\\.a-zA-Z0-9]+$")
            try validate(self.sqsQueueArn, name:"sqsQueueArn", parent: name, max: 1024)
            try validate(self.sqsQueueArn, name:"sqsQueueArn", parent: name, min: 1)
            try validate(self.sqsQueueArn, name:"sqsQueueArn", parent: name, pattern: "^arn[\\/\\:\\-\\_\\.a-zA-Z0-9]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case snsTopicArn = "SnsTopicArn"
            case sqsQueueArn = "SqsQueueArn"
        }
    }

    public struct Member: AWSShape {

        /// The Amazon Chime account ID.
        public let accountId: String?
        /// The member email address.
        public let email: String?
        /// The member name.
        public let fullName: String?
        /// The member ID (user ID or bot ID).
        public let memberId: String?
        /// The member type.
        public let memberType: MemberType?

        public init(accountId: String? = nil, email: String? = nil, fullName: String? = nil, memberId: String? = nil, memberType: MemberType? = nil) {
            self.accountId = accountId
            self.email = email
            self.fullName = fullName
            self.memberId = memberId
            self.memberType = memberType
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case email = "Email"
            case fullName = "FullName"
            case memberId = "MemberId"
            case memberType = "MemberType"
        }
    }

    public struct MemberError: AWSShape {

        /// The error code.
        public let errorCode: ErrorCode?
        /// The error message.
        public let errorMessage: String?
        /// The member ID.
        public let memberId: String?

        public init(errorCode: ErrorCode? = nil, errorMessage: String? = nil, memberId: String? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.memberId = memberId
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "ErrorCode"
            case errorMessage = "ErrorMessage"
            case memberId = "MemberId"
        }
    }

    public struct MembershipItem: AWSShape {

        /// The member ID.
        public let memberId: String?
        /// The member role.
        public let role: RoomMembershipRole?

        public init(memberId: String? = nil, role: RoomMembershipRole? = nil) {
            self.memberId = memberId
            self.role = role
        }

        public func validate(name: String) throws {
            try validate(self.memberId, name:"memberId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case memberId = "MemberId"
            case role = "Role"
        }
    }

    public struct OrderedPhoneNumber: AWSShape {

        /// The phone number, in E.164 format.
        public let e164PhoneNumber: String?
        /// The phone number status.
        public let status: OrderedPhoneNumberStatus?

        public init(e164PhoneNumber: String? = nil, status: OrderedPhoneNumberStatus? = nil) {
            self.e164PhoneNumber = e164PhoneNumber
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case e164PhoneNumber = "E164PhoneNumber"
            case status = "Status"
        }
    }

    public struct Origination: AWSShape {

        /// When origination settings are disabled, inbound calls are not enabled for your Amazon Chime Voice Connector.
        public let disabled: Bool?
        /// The call distribution properties defined for your SIP hosts. Valid range: Minimum value of 1. Maximum value of 20.
        public let routes: [OriginationRoute]?

        public init(disabled: Bool? = nil, routes: [OriginationRoute]? = nil) {
            self.disabled = disabled
            self.routes = routes
        }

        public func validate(name: String) throws {
            try self.routes?.forEach {
                try $0.validate(name: "\(name).routes[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case disabled = "Disabled"
            case routes = "Routes"
        }
    }

    public struct OriginationRoute: AWSShape {

        /// The FQDN or IP address to contact for origination traffic.
        public let host: String?
        /// The designated origination route port. Defaults to 5060.
        public let port: Int?
        /// The priority associated with the host, with 1 being the highest priority. Higher priority hosts are attempted first.
        public let priority: Int?
        /// The protocol to use for the origination route. Encryption-enabled Amazon Chime Voice Connectors use TCP protocol by default.
        public let `protocol`: OriginationRouteProtocol?
        /// The weight associated with the host. If hosts are equal in priority, calls are distributed among them based on their relative weight.
        public let weight: Int?

        public init(host: String? = nil, port: Int? = nil, priority: Int? = nil, protocol: OriginationRouteProtocol? = nil, weight: Int? = nil) {
            self.host = host
            self.port = port
            self.priority = priority
            self.`protocol` = `protocol`
            self.weight = weight
        }

        public func validate(name: String) throws {
            try validate(self.port, name:"port", parent: name, max: 65535)
            try validate(self.port, name:"port", parent: name, min: 0)
            try validate(self.priority, name:"priority", parent: name, max: 100)
            try validate(self.priority, name:"priority", parent: name, min: 1)
            try validate(self.weight, name:"weight", parent: name, max: 100)
            try validate(self.weight, name:"weight", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case host = "Host"
            case port = "Port"
            case priority = "Priority"
            case `protocol` = "Protocol"
            case weight = "Weight"
        }
    }

    public struct PhoneNumber: AWSShape {

        /// The phone number associations.
        public let associations: [PhoneNumberAssociation]?
        /// The outbound calling name associated with the phone number.
        public let callingName: String?
        /// The outbound calling name status.
        public let callingNameStatus: CallingNameStatus?
        /// The phone number capabilities.
        public let capabilities: PhoneNumberCapabilities?
        /// The phone number creation timestamp, in ISO 8601 format.
        public let createdTimestamp: TimeStamp?
        /// The deleted phone number timestamp, in ISO 8601 format.
        public let deletionTimestamp: TimeStamp?
        /// The phone number, in E.164 format.
        public let e164PhoneNumber: String?
        /// The phone number ID.
        public let phoneNumberId: String?
        /// The phone number product type.
        public let productType: PhoneNumberProductType?
        /// The phone number status.
        public let status: PhoneNumberStatus?
        /// The phone number type.
        public let `type`: PhoneNumberType?
        /// The updated phone number timestamp, in ISO 8601 format.
        public let updatedTimestamp: TimeStamp?

        public init(associations: [PhoneNumberAssociation]? = nil, callingName: String? = nil, callingNameStatus: CallingNameStatus? = nil, capabilities: PhoneNumberCapabilities? = nil, createdTimestamp: TimeStamp? = nil, deletionTimestamp: TimeStamp? = nil, e164PhoneNumber: String? = nil, phoneNumberId: String? = nil, productType: PhoneNumberProductType? = nil, status: PhoneNumberStatus? = nil, type: PhoneNumberType? = nil, updatedTimestamp: TimeStamp? = nil) {
            self.associations = associations
            self.callingName = callingName
            self.callingNameStatus = callingNameStatus
            self.capabilities = capabilities
            self.createdTimestamp = createdTimestamp
            self.deletionTimestamp = deletionTimestamp
            self.e164PhoneNumber = e164PhoneNumber
            self.phoneNumberId = phoneNumberId
            self.productType = productType
            self.status = status
            self.`type` = `type`
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "Associations"
            case callingName = "CallingName"
            case callingNameStatus = "CallingNameStatus"
            case capabilities = "Capabilities"
            case createdTimestamp = "CreatedTimestamp"
            case deletionTimestamp = "DeletionTimestamp"
            case e164PhoneNumber = "E164PhoneNumber"
            case phoneNumberId = "PhoneNumberId"
            case productType = "ProductType"
            case status = "Status"
            case `type` = "Type"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct PhoneNumberAssociation: AWSShape {

        /// The timestamp of the phone number association, in ISO 8601 format.
        public let associatedTimestamp: TimeStamp?
        /// Defines the association with an Amazon Chime account ID, user ID, Amazon Chime Voice Connector ID, or Amazon Chime Voice Connector group ID.
        public let name: PhoneNumberAssociationName?
        /// Contains the ID for the entity specified in Name.
        public let value: String?

        public init(associatedTimestamp: TimeStamp? = nil, name: PhoneNumberAssociationName? = nil, value: String? = nil) {
            self.associatedTimestamp = associatedTimestamp
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case associatedTimestamp = "AssociatedTimestamp"
            case name = "Name"
            case value = "Value"
        }
    }

    public struct PhoneNumberCapabilities: AWSShape {

        /// Allows or denies inbound calling for the specified phone number.
        public let inboundCall: Bool?
        /// Allows or denies inbound MMS messaging for the specified phone number.
        public let inboundMMS: Bool?
        /// Allows or denies inbound SMS messaging for the specified phone number.
        public let inboundSMS: Bool?
        /// Allows or denies outbound calling for the specified phone number.
        public let outboundCall: Bool?
        /// Allows or denies outbound MMS messaging for the specified phone number.
        public let outboundMMS: Bool?
        /// Allows or denies outbound SMS messaging for the specified phone number.
        public let outboundSMS: Bool?

        public init(inboundCall: Bool? = nil, inboundMMS: Bool? = nil, inboundSMS: Bool? = nil, outboundCall: Bool? = nil, outboundMMS: Bool? = nil, outboundSMS: Bool? = nil) {
            self.inboundCall = inboundCall
            self.inboundMMS = inboundMMS
            self.inboundSMS = inboundSMS
            self.outboundCall = outboundCall
            self.outboundMMS = outboundMMS
            self.outboundSMS = outboundSMS
        }

        private enum CodingKeys: String, CodingKey {
            case inboundCall = "InboundCall"
            case inboundMMS = "InboundMMS"
            case inboundSMS = "InboundSMS"
            case outboundCall = "OutboundCall"
            case outboundMMS = "OutboundMMS"
            case outboundSMS = "OutboundSMS"
        }
    }

    public struct PhoneNumberError: AWSShape {

        /// The error code.
        public let errorCode: ErrorCode?
        /// The error message.
        public let errorMessage: String?
        /// The phone number ID for which the action failed.
        public let phoneNumberId: String?

        public init(errorCode: ErrorCode? = nil, errorMessage: String? = nil, phoneNumberId: String? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.phoneNumberId = phoneNumberId
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "ErrorCode"
            case errorMessage = "ErrorMessage"
            case phoneNumberId = "PhoneNumberId"
        }
    }

    public struct PhoneNumberOrder: AWSShape {

        /// The phone number order creation timestamp, in ISO 8601 format.
        public let createdTimestamp: TimeStamp?
        /// The ordered phone number details, such as the phone number in E.164 format and the phone number status.
        public let orderedPhoneNumbers: [OrderedPhoneNumber]?
        /// The phone number order ID.
        public let phoneNumberOrderId: String?
        /// The phone number order product type.
        public let productType: PhoneNumberProductType?
        /// The status of the phone number order.
        public let status: PhoneNumberOrderStatus?
        /// The updated phone number order timestamp, in ISO 8601 format.
        public let updatedTimestamp: TimeStamp?

        public init(createdTimestamp: TimeStamp? = nil, orderedPhoneNumbers: [OrderedPhoneNumber]? = nil, phoneNumberOrderId: String? = nil, productType: PhoneNumberProductType? = nil, status: PhoneNumberOrderStatus? = nil, updatedTimestamp: TimeStamp? = nil) {
            self.createdTimestamp = createdTimestamp
            self.orderedPhoneNumbers = orderedPhoneNumbers
            self.phoneNumberOrderId = phoneNumberOrderId
            self.productType = productType
            self.status = status
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "CreatedTimestamp"
            case orderedPhoneNumbers = "OrderedPhoneNumbers"
            case phoneNumberOrderId = "PhoneNumberOrderId"
            case productType = "ProductType"
            case status = "Status"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct PutEventsConfigurationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "botId", location: .uri(locationName: "botId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The bot ID.
        public let botId: String
        /// Lambda function ARN that allows the bot to receive outgoing events.
        public let lambdaFunctionArn: String?
        /// HTTPS endpoint that allows the bot to receive outgoing events.
        public let outboundEventsHTTPSEndpoint: String?

        public init(accountId: String, botId: String, lambdaFunctionArn: String? = nil, outboundEventsHTTPSEndpoint: String? = nil) {
            self.accountId = accountId
            self.botId = botId
            self.lambdaFunctionArn = lambdaFunctionArn
            self.outboundEventsHTTPSEndpoint = outboundEventsHTTPSEndpoint
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.botId, name:"botId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case botId = "botId"
            case lambdaFunctionArn = "LambdaFunctionArn"
            case outboundEventsHTTPSEndpoint = "OutboundEventsHTTPSEndpoint"
        }
    }

    public struct PutEventsConfigurationResponse: AWSShape {

        public let eventsConfiguration: EventsConfiguration?

        public init(eventsConfiguration: EventsConfiguration? = nil) {
            self.eventsConfiguration = eventsConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case eventsConfiguration = "EventsConfiguration"
        }
    }

    public struct PutVoiceConnectorLoggingConfigurationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The logging configuration details to add.
        public let loggingConfiguration: LoggingConfiguration
        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(loggingConfiguration: LoggingConfiguration, voiceConnectorId: String) {
            self.loggingConfiguration = loggingConfiguration
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case loggingConfiguration = "LoggingConfiguration"
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct PutVoiceConnectorLoggingConfigurationResponse: AWSShape {

        /// The updated logging configuration details.
        public let loggingConfiguration: LoggingConfiguration?

        public init(loggingConfiguration: LoggingConfiguration? = nil) {
            self.loggingConfiguration = loggingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case loggingConfiguration = "LoggingConfiguration"
        }
    }

    public struct PutVoiceConnectorOriginationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The origination setting details to add.
        public let origination: Origination
        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(origination: Origination, voiceConnectorId: String) {
            self.origination = origination
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try self.origination.validate(name: "\(name).origination")
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case origination = "Origination"
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct PutVoiceConnectorOriginationResponse: AWSShape {

        /// The updated origination setting details.
        public let origination: Origination?

        public init(origination: Origination? = nil) {
            self.origination = origination
        }

        private enum CodingKeys: String, CodingKey {
            case origination = "Origination"
        }
    }

    public struct PutVoiceConnectorStreamingConfigurationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The streaming configuration details to add.
        public let streamingConfiguration: StreamingConfiguration
        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(streamingConfiguration: StreamingConfiguration, voiceConnectorId: String) {
            self.streamingConfiguration = streamingConfiguration
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try self.streamingConfiguration.validate(name: "\(name).streamingConfiguration")
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case streamingConfiguration = "StreamingConfiguration"
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct PutVoiceConnectorStreamingConfigurationResponse: AWSShape {

        /// The updated streaming configuration details.
        public let streamingConfiguration: StreamingConfiguration?

        public init(streamingConfiguration: StreamingConfiguration? = nil) {
            self.streamingConfiguration = streamingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case streamingConfiguration = "StreamingConfiguration"
        }
    }

    public struct PutVoiceConnectorTerminationCredentialsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The termination SIP credentials.
        public let credentials: [Credential]?
        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(credentials: [Credential]? = nil, voiceConnectorId: String) {
            self.credentials = credentials
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case credentials = "Credentials"
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct PutVoiceConnectorTerminationRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The termination setting details to add.
        public let termination: Termination
        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(termination: Termination, voiceConnectorId: String) {
            self.termination = termination
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try self.termination.validate(name: "\(name).termination")
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case termination = "Termination"
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct PutVoiceConnectorTerminationResponse: AWSShape {

        /// The updated termination setting details.
        public let termination: Termination?

        public init(termination: Termination? = nil) {
            self.termination = termination
        }

        private enum CodingKeys: String, CodingKey {
            case termination = "Termination"
        }
    }

    public struct RegenerateSecurityTokenRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "botId", location: .uri(locationName: "botId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The bot ID.
        public let botId: String

        public init(accountId: String, botId: String) {
            self.accountId = accountId
            self.botId = botId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.botId, name:"botId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case botId = "botId"
        }
    }

    public struct RegenerateSecurityTokenResponse: AWSShape {

        public let bot: Bot?

        public init(bot: Bot? = nil) {
            self.bot = bot
        }

        private enum CodingKeys: String, CodingKey {
            case bot = "Bot"
        }
    }

    public struct ResetPersonalPINRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "userId", location: .uri(locationName: "userId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The user ID.
        public let userId: String

        public init(accountId: String, userId: String) {
            self.accountId = accountId
            self.userId = userId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.userId, name:"userId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case userId = "userId"
        }
    }

    public struct ResetPersonalPINResponse: AWSShape {

        /// The user details and new personal meeting PIN.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct RestorePhoneNumberRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "phoneNumberId", location: .uri(locationName: "phoneNumberId"))
        ]

        /// The phone number.
        public let phoneNumberId: String

        public init(phoneNumberId: String) {
            self.phoneNumberId = phoneNumberId
        }

        public func validate(name: String) throws {
            try validate(self.phoneNumberId, name:"phoneNumberId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumberId = "phoneNumberId"
        }
    }

    public struct RestorePhoneNumberResponse: AWSShape {

        /// The phone number details.
        public let phoneNumber: PhoneNumber?

        public init(phoneNumber: PhoneNumber? = nil) {
            self.phoneNumber = phoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumber = "PhoneNumber"
        }
    }

    public struct Room: AWSShape {

        /// The Amazon Chime account ID.
        public let accountId: String?
        /// The identifier of the room creator.
        public let createdBy: String?
        /// The room creation timestamp, in ISO 8601 format.
        public let createdTimestamp: TimeStamp?
        /// The room name.
        public let name: String?
        /// The room ID.
        public let roomId: String?
        /// The room update timestamp, in ISO 8601 format.
        public let updatedTimestamp: TimeStamp?

        public init(accountId: String? = nil, createdBy: String? = nil, createdTimestamp: TimeStamp? = nil, name: String? = nil, roomId: String? = nil, updatedTimestamp: TimeStamp? = nil) {
            self.accountId = accountId
            self.createdBy = createdBy
            self.createdTimestamp = createdTimestamp
            self.name = name
            self.roomId = roomId
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case createdBy = "CreatedBy"
            case createdTimestamp = "CreatedTimestamp"
            case name = "Name"
            case roomId = "RoomId"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct RoomMembership: AWSShape {

        /// The identifier of the user that invited the room member.
        public let invitedBy: String?
        public let member: Member?
        /// The membership role.
        public let role: RoomMembershipRole?
        /// The room ID.
        public let roomId: String?
        /// The room membership update timestamp, in ISO 8601 format.
        public let updatedTimestamp: TimeStamp?

        public init(invitedBy: String? = nil, member: Member? = nil, role: RoomMembershipRole? = nil, roomId: String? = nil, updatedTimestamp: TimeStamp? = nil) {
            self.invitedBy = invitedBy
            self.member = member
            self.role = role
            self.roomId = roomId
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case invitedBy = "InvitedBy"
            case member = "Member"
            case role = "Role"
            case roomId = "RoomId"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct SearchAvailablePhoneNumbersRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "areaCode", location: .querystring(locationName: "area-code")), 
            AWSMemberEncoding(label: "city", location: .querystring(locationName: "city")), 
            AWSMemberEncoding(label: "country", location: .querystring(locationName: "country")), 
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "max-results")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "next-token")), 
            AWSMemberEncoding(label: "state", location: .querystring(locationName: "state")), 
            AWSMemberEncoding(label: "tollFreePrefix", location: .querystring(locationName: "toll-free-prefix"))
        ]

        /// The area code used to filter results.
        public let areaCode: String?
        /// The city used to filter results.
        public let city: String?
        /// The country used to filter results.
        public let country: String?
        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The state used to filter results.
        public let state: String?
        /// The toll-free prefix that you use to filter results.
        public let tollFreePrefix: String?

        public init(areaCode: String? = nil, city: String? = nil, country: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, state: String? = nil, tollFreePrefix: String? = nil) {
            self.areaCode = areaCode
            self.city = city
            self.country = country
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.state = state
            self.tollFreePrefix = tollFreePrefix
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.tollFreePrefix, name:"tollFreePrefix", parent: name, max: 3)
            try validate(self.tollFreePrefix, name:"tollFreePrefix", parent: name, min: 3)
            try validate(self.tollFreePrefix, name:"tollFreePrefix", parent: name, pattern: "^8(00|33|44|55|66|77|88)$")
        }

        private enum CodingKeys: String, CodingKey {
            case areaCode = "area-code"
            case city = "city"
            case country = "country"
            case maxResults = "max-results"
            case nextToken = "next-token"
            case state = "state"
            case tollFreePrefix = "toll-free-prefix"
        }
    }

    public struct SearchAvailablePhoneNumbersResponse: AWSShape {

        /// List of phone numbers, in E.164 format.
        public let e164PhoneNumbers: [String]?

        public init(e164PhoneNumbers: [String]? = nil) {
            self.e164PhoneNumbers = e164PhoneNumbers
        }

        private enum CodingKeys: String, CodingKey {
            case e164PhoneNumbers = "E164PhoneNumbers"
        }
    }

    public struct SigninDelegateGroup: AWSShape {

        /// The group name.
        public let groupName: String?

        public init(groupName: String? = nil) {
            self.groupName = groupName
        }

        public func validate(name: String) throws {
            try validate(self.groupName, name:"groupName", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
        }
    }

    public struct StreamingConfiguration: AWSShape {

        /// The retention period, in hours, for the Amazon Kinesis data.
        public let dataRetentionInHours: Int
        /// When true, media streaming to Amazon Kinesis is turned off.
        public let disabled: Bool?

        public init(dataRetentionInHours: Int, disabled: Bool? = nil) {
            self.dataRetentionInHours = dataRetentionInHours
            self.disabled = disabled
        }

        public func validate(name: String) throws {
            try validate(self.dataRetentionInHours, name:"dataRetentionInHours", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case dataRetentionInHours = "DataRetentionInHours"
            case disabled = "Disabled"
        }
    }

    public struct TelephonySettings: AWSShape {

        /// Allows or denies inbound calling.
        public let inboundCalling: Bool
        /// Allows or denies outbound calling.
        public let outboundCalling: Bool
        /// Allows or denies SMS messaging.
        public let sms: Bool

        public init(inboundCalling: Bool, outboundCalling: Bool, sms: Bool) {
            self.inboundCalling = inboundCalling
            self.outboundCalling = outboundCalling
            self.sms = sms
        }

        private enum CodingKeys: String, CodingKey {
            case inboundCalling = "InboundCalling"
            case outboundCalling = "OutboundCalling"
            case sms = "SMS"
        }
    }

    public struct Termination: AWSShape {

        /// The countries to which calls are allowed, in ISO 3166-1 alpha-2 format. Required.
        public let callingRegions: [String]?
        /// The IP addresses allowed to make calls, in CIDR format. Required.
        public let cidrAllowedList: [String]?
        /// The limit on calls per second. Max value based on account service quota. Default value of 1.
        public let cpsLimit: Int?
        /// The default caller ID phone number.
        public let defaultPhoneNumber: String?
        /// When termination settings are disabled, outbound calls can not be made.
        public let disabled: Bool?

        public init(callingRegions: [String]? = nil, cidrAllowedList: [String]? = nil, cpsLimit: Int? = nil, defaultPhoneNumber: String? = nil, disabled: Bool? = nil) {
            self.callingRegions = callingRegions
            self.cidrAllowedList = cidrAllowedList
            self.cpsLimit = cpsLimit
            self.defaultPhoneNumber = defaultPhoneNumber
            self.disabled = disabled
        }

        public func validate(name: String) throws {
            try validate(self.cpsLimit, name:"cpsLimit", parent: name, min: 1)
            try validate(self.defaultPhoneNumber, name:"defaultPhoneNumber", parent: name, pattern: "^\\+?[1-9]\\d{1,14}$")
        }

        private enum CodingKeys: String, CodingKey {
            case callingRegions = "CallingRegions"
            case cidrAllowedList = "CidrAllowedList"
            case cpsLimit = "CpsLimit"
            case defaultPhoneNumber = "DefaultPhoneNumber"
            case disabled = "Disabled"
        }
    }

    public struct TerminationHealth: AWSShape {

        /// The source IP address.
        public let source: String?
        /// The timestamp, in ISO 8601 format.
        public let timestamp: TimeStamp?

        public init(source: String? = nil, timestamp: TimeStamp? = nil) {
            self.source = source
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case source = "Source"
            case timestamp = "Timestamp"
        }
    }

    public struct UpdateAccountRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The new name for the specified Amazon Chime account.
        public let name: String?

        public init(accountId: String, name: String? = nil) {
            self.accountId = accountId
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.name, name:"name", parent: name, max: 100)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case name = "Name"
        }
    }

    public struct UpdateAccountResponse: AWSShape {

        /// The updated Amazon Chime account details.
        public let account: Account?

        public init(account: Account? = nil) {
            self.account = account
        }

        private enum CodingKeys: String, CodingKey {
            case account = "Account"
        }
    }

    public struct UpdateAccountSettingsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The Amazon Chime account settings to update.
        public let accountSettings: AccountSettings

        public init(accountId: String, accountSettings: AccountSettings) {
            self.accountId = accountId
            self.accountSettings = accountSettings
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case accountSettings = "AccountSettings"
        }
    }

    public struct UpdateAccountSettingsResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateBotRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "botId", location: .uri(locationName: "botId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The bot ID.
        public let botId: String
        /// When true, stops the specified bot from running in your account.
        public let disabled: Bool?

        public init(accountId: String, botId: String, disabled: Bool? = nil) {
            self.accountId = accountId
            self.botId = botId
            self.disabled = disabled
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.botId, name:"botId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case botId = "botId"
            case disabled = "Disabled"
        }
    }

    public struct UpdateBotResponse: AWSShape {

        /// The updated bot details.
        public let bot: Bot?

        public init(bot: Bot? = nil) {
            self.bot = bot
        }

        private enum CodingKeys: String, CodingKey {
            case bot = "Bot"
        }
    }

    public struct UpdateGlobalSettingsRequest: AWSShape {

        /// The Amazon Chime Business Calling settings.
        public let businessCalling: BusinessCallingSettings
        /// The Amazon Chime Voice Connector settings.
        public let voiceConnector: VoiceConnectorSettings

        public init(businessCalling: BusinessCallingSettings, voiceConnector: VoiceConnectorSettings) {
            self.businessCalling = businessCalling
            self.voiceConnector = voiceConnector
        }

        private enum CodingKeys: String, CodingKey {
            case businessCalling = "BusinessCalling"
            case voiceConnector = "VoiceConnector"
        }
    }

    public struct UpdatePhoneNumberRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "phoneNumberId", location: .uri(locationName: "phoneNumberId"))
        ]

        /// The outbound calling name associated with the phone number.
        public let callingName: String?
        /// The phone number ID.
        public let phoneNumberId: String
        /// The product type.
        public let productType: PhoneNumberProductType?

        public init(callingName: String? = nil, phoneNumberId: String, productType: PhoneNumberProductType? = nil) {
            self.callingName = callingName
            self.phoneNumberId = phoneNumberId
            self.productType = productType
        }

        public func validate(name: String) throws {
            try validate(self.callingName, name:"callingName", parent: name, pattern: "^$|^[a-zA-Z0-9 ]{2,15}$")
        }

        private enum CodingKeys: String, CodingKey {
            case callingName = "CallingName"
            case phoneNumberId = "phoneNumberId"
            case productType = "ProductType"
        }
    }

    public struct UpdatePhoneNumberRequestItem: AWSShape {

        /// The outbound calling name to update.
        public let callingName: String?
        /// The phone number ID to update.
        public let phoneNumberId: String
        /// The product type to update.
        public let productType: PhoneNumberProductType?

        public init(callingName: String? = nil, phoneNumberId: String, productType: PhoneNumberProductType? = nil) {
            self.callingName = callingName
            self.phoneNumberId = phoneNumberId
            self.productType = productType
        }

        public func validate(name: String) throws {
            try validate(self.callingName, name:"callingName", parent: name, pattern: "^$|^[a-zA-Z0-9 ]{2,15}$")
            try validate(self.phoneNumberId, name:"phoneNumberId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case callingName = "CallingName"
            case phoneNumberId = "PhoneNumberId"
            case productType = "ProductType"
        }
    }

    public struct UpdatePhoneNumberResponse: AWSShape {

        /// The updated phone number details.
        public let phoneNumber: PhoneNumber?

        public init(phoneNumber: PhoneNumber? = nil) {
            self.phoneNumber = phoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumber = "PhoneNumber"
        }
    }

    public struct UpdatePhoneNumberSettingsRequest: AWSShape {

        /// The default outbound calling name for the account.
        public let callingName: String

        public init(callingName: String) {
            self.callingName = callingName
        }

        public func validate(name: String) throws {
            try validate(self.callingName, name:"callingName", parent: name, pattern: "^$|^[a-zA-Z0-9 ]{2,15}$")
        }

        private enum CodingKeys: String, CodingKey {
            case callingName = "CallingName"
        }
    }

    public struct UpdateRoomMembershipRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "memberId", location: .uri(locationName: "memberId")), 
            AWSMemberEncoding(label: "roomId", location: .uri(locationName: "roomId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The member ID.
        public let memberId: String
        /// The role of the member.
        public let role: RoomMembershipRole?
        /// The room ID.
        public let roomId: String

        public init(accountId: String, memberId: String, role: RoomMembershipRole? = nil, roomId: String) {
            self.accountId = accountId
            self.memberId = memberId
            self.role = role
            self.roomId = roomId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.memberId, name:"memberId", parent: name, pattern: ".*\\S.*")
            try validate(self.roomId, name:"roomId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case memberId = "memberId"
            case role = "Role"
            case roomId = "roomId"
        }
    }

    public struct UpdateRoomMembershipResponse: AWSShape {

        /// The room membership details.
        public let roomMembership: RoomMembership?

        public init(roomMembership: RoomMembership? = nil) {
            self.roomMembership = roomMembership
        }

        private enum CodingKeys: String, CodingKey {
            case roomMembership = "RoomMembership"
        }
    }

    public struct UpdateRoomRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "roomId", location: .uri(locationName: "roomId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The room name.
        public let name: String?
        /// The room ID.
        public let roomId: String

        public init(accountId: String, name: String? = nil, roomId: String) {
            self.accountId = accountId
            self.name = name
            self.roomId = roomId
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.roomId, name:"roomId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case name = "Name"
            case roomId = "roomId"
        }
    }

    public struct UpdateRoomResponse: AWSShape {

        /// The room details.
        public let room: Room?

        public init(room: Room? = nil) {
            self.room = room
        }

        private enum CodingKeys: String, CodingKey {
            case room = "Room"
        }
    }

    public struct UpdateUserRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "userId", location: .uri(locationName: "userId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The Alexa for Business metadata.
        public let alexaForBusinessMetadata: AlexaForBusinessMetadata?
        /// The user license type to update. This must be a supported license type for the Amazon Chime account that the user belongs to.
        public let licenseType: License?
        /// The user ID.
        public let userId: String
        /// The user type.
        public let userType: UserType?

        public init(accountId: String, alexaForBusinessMetadata: AlexaForBusinessMetadata? = nil, licenseType: License? = nil, userId: String, userType: UserType? = nil) {
            self.accountId = accountId
            self.alexaForBusinessMetadata = alexaForBusinessMetadata
            self.licenseType = licenseType
            self.userId = userId
            self.userType = userType
        }

        public func validate(name: String) throws {
            try validate(self.accountId, name:"accountId", parent: name, pattern: ".*\\S.*")
            try validate(self.userId, name:"userId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case alexaForBusinessMetadata = "AlexaForBusinessMetadata"
            case licenseType = "LicenseType"
            case userId = "userId"
            case userType = "UserType"
        }
    }

    public struct UpdateUserRequestItem: AWSShape {

        /// The Alexa for Business metadata.
        public let alexaForBusinessMetadata: AlexaForBusinessMetadata?
        /// The user license type.
        public let licenseType: License?
        /// The user ID.
        public let userId: String
        /// The user type.
        public let userType: UserType?

        public init(alexaForBusinessMetadata: AlexaForBusinessMetadata? = nil, licenseType: License? = nil, userId: String, userType: UserType? = nil) {
            self.alexaForBusinessMetadata = alexaForBusinessMetadata
            self.licenseType = licenseType
            self.userId = userId
            self.userType = userType
        }

        public func validate(name: String) throws {
            try validate(self.userId, name:"userId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case alexaForBusinessMetadata = "AlexaForBusinessMetadata"
            case licenseType = "LicenseType"
            case userId = "UserId"
            case userType = "UserType"
        }
    }

    public struct UpdateUserResponse: AWSShape {

        /// The updated user details.
        public let user: User?

        public init(user: User? = nil) {
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
        }
    }

    public struct UpdateUserSettingsRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "accountId", location: .uri(locationName: "accountId")), 
            AWSMemberEncoding(label: "userId", location: .uri(locationName: "userId"))
        ]

        /// The Amazon Chime account ID.
        public let accountId: String
        /// The user ID.
        public let userId: String
        /// The user settings to update.
        public let userSettings: UserSettings

        public init(accountId: String, userId: String, userSettings: UserSettings) {
            self.accountId = accountId
            self.userId = userId
            self.userSettings = userSettings
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case userId = "userId"
            case userSettings = "UserSettings"
        }
    }

    public struct UpdateVoiceConnectorGroupRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorGroupId", location: .uri(locationName: "voiceConnectorGroupId"))
        ]

        /// The name of the Amazon Chime Voice Connector group.
        public let name: String
        /// The Amazon Chime Voice Connector group ID.
        public let voiceConnectorGroupId: String
        /// The VoiceConnectorItems to associate with the group.
        public let voiceConnectorItems: [VoiceConnectorItem]

        public init(name: String, voiceConnectorGroupId: String, voiceConnectorItems: [VoiceConnectorItem]) {
            self.name = name
            self.voiceConnectorGroupId = voiceConnectorGroupId
            self.voiceConnectorItems = voiceConnectorItems
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.voiceConnectorGroupId, name:"voiceConnectorGroupId", parent: name, pattern: ".*\\S.*")
            try self.voiceConnectorItems.forEach {
                try $0.validate(name: "\(name).voiceConnectorItems[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case voiceConnectorGroupId = "voiceConnectorGroupId"
            case voiceConnectorItems = "VoiceConnectorItems"
        }
    }

    public struct UpdateVoiceConnectorGroupResponse: AWSShape {

        /// The updated Amazon Chime Voice Connector group details.
        public let voiceConnectorGroup: VoiceConnectorGroup?

        public init(voiceConnectorGroup: VoiceConnectorGroup? = nil) {
            self.voiceConnectorGroup = voiceConnectorGroup
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnectorGroup = "VoiceConnectorGroup"
        }
    }

    public struct UpdateVoiceConnectorRequest: AWSShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "voiceConnectorId", location: .uri(locationName: "voiceConnectorId"))
        ]

        /// The name of the Amazon Chime Voice Connector.
        public let name: String
        /// When enabled, requires encryption for the Amazon Chime Voice Connector.
        public let requireEncryption: Bool
        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(name: String, requireEncryption: Bool, voiceConnectorId: String) {
            self.name = name
            self.requireEncryption = requireEncryption
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 256)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case requireEncryption = "RequireEncryption"
            case voiceConnectorId = "voiceConnectorId"
        }
    }

    public struct UpdateVoiceConnectorResponse: AWSShape {

        /// The updated Amazon Chime Voice Connector details.
        public let voiceConnector: VoiceConnector?

        public init(voiceConnector: VoiceConnector? = nil) {
            self.voiceConnector = voiceConnector
        }

        private enum CodingKeys: String, CodingKey {
            case voiceConnector = "VoiceConnector"
        }
    }

    public struct User: AWSShape {

        /// The Amazon Chime account ID.
        public let accountId: String?
        /// The Alexa for Business metadata.
        public let alexaForBusinessMetadata: AlexaForBusinessMetadata?
        /// The display name of the user.
        public let displayName: String?
        /// Date and time when the user is invited to the Amazon Chime account, in ISO 8601 format.
        public let invitedOn: TimeStamp?
        /// The license type for the user.
        public let licenseType: License?
        /// The user's personal meeting PIN.
        public let personalPIN: String?
        /// The primary email address of the user.
        public let primaryEmail: String?
        /// The primary phone number associated with the user.
        public let primaryProvisionedNumber: String?
        /// Date and time when the user is registered, in ISO 8601 format.
        public let registeredOn: TimeStamp?
        /// The user ID.
        public let userId: String
        /// The user invite status.
        public let userInvitationStatus: InviteStatus?
        /// The user registration status.
        public let userRegistrationStatus: RegistrationStatus?
        /// The user type.
        public let userType: UserType?

        public init(accountId: String? = nil, alexaForBusinessMetadata: AlexaForBusinessMetadata? = nil, displayName: String? = nil, invitedOn: TimeStamp? = nil, licenseType: License? = nil, personalPIN: String? = nil, primaryEmail: String? = nil, primaryProvisionedNumber: String? = nil, registeredOn: TimeStamp? = nil, userId: String, userInvitationStatus: InviteStatus? = nil, userRegistrationStatus: RegistrationStatus? = nil, userType: UserType? = nil) {
            self.accountId = accountId
            self.alexaForBusinessMetadata = alexaForBusinessMetadata
            self.displayName = displayName
            self.invitedOn = invitedOn
            self.licenseType = licenseType
            self.personalPIN = personalPIN
            self.primaryEmail = primaryEmail
            self.primaryProvisionedNumber = primaryProvisionedNumber
            self.registeredOn = registeredOn
            self.userId = userId
            self.userInvitationStatus = userInvitationStatus
            self.userRegistrationStatus = userRegistrationStatus
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case alexaForBusinessMetadata = "AlexaForBusinessMetadata"
            case displayName = "DisplayName"
            case invitedOn = "InvitedOn"
            case licenseType = "LicenseType"
            case personalPIN = "PersonalPIN"
            case primaryEmail = "PrimaryEmail"
            case primaryProvisionedNumber = "PrimaryProvisionedNumber"
            case registeredOn = "RegisteredOn"
            case userId = "UserId"
            case userInvitationStatus = "UserInvitationStatus"
            case userRegistrationStatus = "UserRegistrationStatus"
            case userType = "UserType"
        }
    }

    public struct UserError: AWSShape {

        /// The error code.
        public let errorCode: ErrorCode?
        /// The error message.
        public let errorMessage: String?
        /// The user ID for which the action failed.
        public let userId: String?

        public init(errorCode: ErrorCode? = nil, errorMessage: String? = nil, userId: String? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "ErrorCode"
            case errorMessage = "ErrorMessage"
            case userId = "UserId"
        }
    }

    public struct UserSettings: AWSShape {

        /// The telephony settings associated with the user.
        public let telephony: TelephonySettings

        public init(telephony: TelephonySettings) {
            self.telephony = telephony
        }

        private enum CodingKeys: String, CodingKey {
            case telephony = "Telephony"
        }
    }

    public struct VoiceConnector: AWSShape {

        /// The AWS Region in which the Amazon Chime Voice Connector is created. Default: us-east-1.
        public let awsRegion: VoiceConnectorAwsRegion?
        /// The Amazon Chime Voice Connector creation timestamp, in ISO 8601 format.
        public let createdTimestamp: TimeStamp?
        /// The name of the Amazon Chime Voice Connector.
        public let name: String?
        /// The outbound host name for the Amazon Chime Voice Connector.
        public let outboundHostName: String?
        /// Designates whether encryption is required for the Amazon Chime Voice Connector.
        public let requireEncryption: Bool?
        /// The updated Amazon Chime Voice Connector timestamp, in ISO 8601 format.
        public let updatedTimestamp: TimeStamp?
        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String?

        public init(awsRegion: VoiceConnectorAwsRegion? = nil, createdTimestamp: TimeStamp? = nil, name: String? = nil, outboundHostName: String? = nil, requireEncryption: Bool? = nil, updatedTimestamp: TimeStamp? = nil, voiceConnectorId: String? = nil) {
            self.awsRegion = awsRegion
            self.createdTimestamp = createdTimestamp
            self.name = name
            self.outboundHostName = outboundHostName
            self.requireEncryption = requireEncryption
            self.updatedTimestamp = updatedTimestamp
            self.voiceConnectorId = voiceConnectorId
        }

        private enum CodingKeys: String, CodingKey {
            case awsRegion = "AwsRegion"
            case createdTimestamp = "CreatedTimestamp"
            case name = "Name"
            case outboundHostName = "OutboundHostName"
            case requireEncryption = "RequireEncryption"
            case updatedTimestamp = "UpdatedTimestamp"
            case voiceConnectorId = "VoiceConnectorId"
        }
    }

    public struct VoiceConnectorGroup: AWSShape {

        /// The Amazon Chime Voice Connector group creation timestamp, in ISO 8601 format.
        public let createdTimestamp: TimeStamp?
        /// The name of the Amazon Chime Voice Connector group.
        public let name: String?
        /// The updated Amazon Chime Voice Connector group timestamp, in ISO 8601 format.
        public let updatedTimestamp: TimeStamp?
        /// The Amazon Chime Voice Connector group ID.
        public let voiceConnectorGroupId: String?
        /// The Amazon Chime Voice Connectors to which to route inbound calls.
        public let voiceConnectorItems: [VoiceConnectorItem]?

        public init(createdTimestamp: TimeStamp? = nil, name: String? = nil, updatedTimestamp: TimeStamp? = nil, voiceConnectorGroupId: String? = nil, voiceConnectorItems: [VoiceConnectorItem]? = nil) {
            self.createdTimestamp = createdTimestamp
            self.name = name
            self.updatedTimestamp = updatedTimestamp
            self.voiceConnectorGroupId = voiceConnectorGroupId
            self.voiceConnectorItems = voiceConnectorItems
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "CreatedTimestamp"
            case name = "Name"
            case updatedTimestamp = "UpdatedTimestamp"
            case voiceConnectorGroupId = "VoiceConnectorGroupId"
            case voiceConnectorItems = "VoiceConnectorItems"
        }
    }

    public struct VoiceConnectorItem: AWSShape {

        /// The priority associated with the Amazon Chime Voice Connector, with 1 being the highest priority. Higher priority Amazon Chime Voice Connectors are attempted first. 
        public let priority: Int
        /// The Amazon Chime Voice Connector ID.
        public let voiceConnectorId: String

        public init(priority: Int, voiceConnectorId: String) {
            self.priority = priority
            self.voiceConnectorId = voiceConnectorId
        }

        public func validate(name: String) throws {
            try validate(self.priority, name:"priority", parent: name, max: 99)
            try validate(self.priority, name:"priority", parent: name, min: 1)
            try validate(self.voiceConnectorId, name:"voiceConnectorId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case priority = "Priority"
            case voiceConnectorId = "VoiceConnectorId"
        }
    }

    public struct VoiceConnectorSettings: AWSShape {

        /// The Amazon S3 bucket designated for call detail record storage.
        public let cdrBucket: String?

        public init(cdrBucket: String? = nil) {
            self.cdrBucket = cdrBucket
        }

        private enum CodingKeys: String, CodingKey {
            case cdrBucket = "CdrBucket"
        }
    }
}
