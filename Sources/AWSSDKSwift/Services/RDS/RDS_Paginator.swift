//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import AWSSDKSwiftCore

//MARK: Paginators

extension RDS {

    ///  Lists the set of CA certificates provided by Amazon RDS for this AWS account.
    public func describeCertificatesPaginator(
        _ input: DescribeCertificatesMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (CertificateMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeCertificates, tokenKey: \CertificateMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns information about custom Availability Zones (AZs). A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster. For more information about RDS on VMware, see the  RDS on VMware User Guide.  
    public func describeCustomAvailabilityZonesPaginator(
        _ input: DescribeCustomAvailabilityZonesMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (CustomAvailabilityZoneMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeCustomAvailabilityZones, tokenKey: \CustomAvailabilityZoneMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns information about backtracks for a DB cluster. For more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User Guide.   This action only applies to Aurora MySQL DB clusters. 
    public func describeDBClusterBacktracksPaginator(
        _ input: DescribeDBClusterBacktracksMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBClusterBacktrackMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBClusterBacktracks, tokenKey: \DBClusterBacktrackMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns information about endpoints for an Amazon Aurora DB cluster.  This action only applies to Aurora DB clusters. 
    public func describeDBClusterEndpointsPaginator(
        _ input: DescribeDBClusterEndpointsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBClusterEndpointMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBClusterEndpoints, tokenKey: \DBClusterEndpointMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///   Returns a list of DBClusterParameterGroup descriptions. If a DBClusterParameterGroupName parameter is specified, the list will contain only the description of the specified DB cluster parameter group.  For more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User Guide.   This action only applies to Aurora DB clusters. 
    public func describeDBClusterParameterGroupsPaginator(
        _ input: DescribeDBClusterParameterGroupsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBClusterParameterGroupsMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBClusterParameterGroups, tokenKey: \DBClusterParameterGroupsMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns the detailed parameter list for a particular DB cluster parameter group. For more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User Guide.   This action only applies to Aurora DB clusters. 
    public func describeDBClusterParametersPaginator(
        _ input: DescribeDBClusterParametersMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBClusterParameterGroupDetails, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBClusterParameters, tokenKey: \DBClusterParameterGroupDetails.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns information about DB cluster snapshots. This API action supports pagination. For more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User Guide.   This action only applies to Aurora DB clusters. 
    public func describeDBClusterSnapshotsPaginator(
        _ input: DescribeDBClusterSnapshotsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBClusterSnapshotMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBClusterSnapshots, tokenKey: \DBClusterSnapshotMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns information about provisioned Aurora DB clusters. This API supports pagination. For more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User Guide.   This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances. 
    public func describeDBClustersPaginator(
        _ input: DescribeDBClustersMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBClusterMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBClusters, tokenKey: \DBClusterMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns a list of the available DB engines.
    public func describeDBEngineVersionsPaginator(
        _ input: DescribeDBEngineVersionsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBEngineVersionMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBEngineVersions, tokenKey: \DBEngineVersionMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the DescribeDBInstanceAutomatedBackups and DescribeDBInstances operations. All parameters are optional.
    public func describeDBInstanceAutomatedBackupsPaginator(
        _ input: DescribeDBInstanceAutomatedBackupsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBInstanceAutomatedBackupMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBInstanceAutomatedBackups, tokenKey: \DBInstanceAutomatedBackupMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns information about provisioned RDS instances. This API supports pagination.  This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances. 
    public func describeDBInstancesPaginator(
        _ input: DescribeDBInstancesMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBInstanceMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBInstances, tokenKey: \DBInstanceMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns a list of DB log files for the DB instance.
    public func describeDBLogFilesPaginator(
        _ input: DescribeDBLogFilesMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DescribeDBLogFilesResponse, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBLogFiles, tokenKey: \DescribeDBLogFilesResponse.marker, on: eventLoop, onPage: onPage)
    }

    ///   Returns a list of DBParameterGroup descriptions. If a DBParameterGroupName is specified, the list will contain only the description of the specified DB parameter group. 
    public func describeDBParameterGroupsPaginator(
        _ input: DescribeDBParameterGroupsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBParameterGroupsMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBParameterGroups, tokenKey: \DBParameterGroupsMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns the detailed parameter list for a particular DB parameter group.
    public func describeDBParametersPaginator(
        _ input: DescribeDBParametersMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBParameterGroupDetails, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBParameters, tokenKey: \DBParameterGroupDetails.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns information about DB proxies.
    public func describeDBProxiesPaginator(
        _ input: DescribeDBProxiesRequest,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DescribeDBProxiesResponse, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBProxies, tokenKey: \DescribeDBProxiesResponse.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns information about DB proxy target groups, represented by DBProxyTargetGroup data structures.
    public func describeDBProxyTargetGroupsPaginator(
        _ input: DescribeDBProxyTargetGroupsRequest,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DescribeDBProxyTargetGroupsResponse, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBProxyTargetGroups, tokenKey: \DescribeDBProxyTargetGroupsResponse.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns information about DBProxyTarget objects. This API supports pagination.
    public func describeDBProxyTargetsPaginator(
        _ input: DescribeDBProxyTargetsRequest,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DescribeDBProxyTargetsResponse, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBProxyTargets, tokenKey: \DescribeDBProxyTargetsResponse.marker, on: eventLoop, onPage: onPage)
    }

    ///   Returns a list of DBSecurityGroup descriptions. If a DBSecurityGroupName is specified, the list will contain only the descriptions of the specified DB security group. 
    public func describeDBSecurityGroupsPaginator(
        _ input: DescribeDBSecurityGroupsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBSecurityGroupMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBSecurityGroups, tokenKey: \DBSecurityGroupMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns information about DB snapshots. This API action supports pagination.
    public func describeDBSnapshotsPaginator(
        _ input: DescribeDBSnapshotsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBSnapshotMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBSnapshots, tokenKey: \DBSnapshotMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup. For an overview of CIDR ranges, go to the Wikipedia Tutorial. 
    public func describeDBSubnetGroupsPaginator(
        _ input: DescribeDBSubnetGroupsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DBSubnetGroupMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeDBSubnetGroups, tokenKey: \DBSubnetGroupMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns the default engine and system parameter information for the specified database engine.
    public func describeEngineDefaultParametersPaginator(
        _ input: DescribeEngineDefaultParametersMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DescribeEngineDefaultParametersResult, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeEngineDefaultParameters, tokenKey: \DescribeEngineDefaultParametersResult.engineDefaults?.marker, on: eventLoop, onPage: onPage)
    }

    ///  Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status. If you specify a SubscriptionName, lists the description for that subscription.
    public func describeEventSubscriptionsPaginator(
        _ input: DescribeEventSubscriptionsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (EventSubscriptionsMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeEventSubscriptions, tokenKey: \EventSubscriptionsMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns events related to DB instances, DB clusters, DB parameter groups, DB security groups, DB snapshots, and DB cluster snapshots for the past 14 days. Events specific to a particular DB instances, DB clusters, DB parameter groups, DB security groups, DB snapshots, and DB cluster snapshots group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
    public func describeEventsPaginator(
        _ input: DescribeEventsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (EventsMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeEvents, tokenKey: \EventsMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
    public func describeExportTasksPaginator(
        _ input: DescribeExportTasksMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (ExportTasksMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeExportTasks, tokenKey: \ExportTasksMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///   Returns information about Aurora global database clusters. This API supports pagination.   For more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User Guide.   This action only applies to Aurora DB clusters. 
    public func describeGlobalClustersPaginator(
        _ input: DescribeGlobalClustersMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (GlobalClustersMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeGlobalClusters, tokenKey: \GlobalClustersMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
    public func describeInstallationMediaPaginator(
        _ input: DescribeInstallationMediaMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (InstallationMediaMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeInstallationMedia, tokenKey: \InstallationMediaMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Describes all available options.
    public func describeOptionGroupOptionsPaginator(
        _ input: DescribeOptionGroupOptionsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (OptionGroupOptionsMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeOptionGroupOptions, tokenKey: \OptionGroupOptionsMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Describes the available option groups.
    public func describeOptionGroupsPaginator(
        _ input: DescribeOptionGroupsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (OptionGroups, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeOptionGroups, tokenKey: \OptionGroups.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns a list of orderable DB instance options for the specified engine.
    public func describeOrderableDBInstanceOptionsPaginator(
        _ input: DescribeOrderableDBInstanceOptionsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (OrderableDBInstanceOptionsMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeOrderableDBInstanceOptions, tokenKey: \OrderableDBInstanceOptionsMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
    public func describePendingMaintenanceActionsPaginator(
        _ input: DescribePendingMaintenanceActionsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (PendingMaintenanceActionsMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describePendingMaintenanceActions, tokenKey: \PendingMaintenanceActionsMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
    public func describeReservedDBInstancesPaginator(
        _ input: DescribeReservedDBInstancesMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (ReservedDBInstanceMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeReservedDBInstances, tokenKey: \ReservedDBInstanceMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Lists available reserved DB instance offerings.
    public func describeReservedDBInstancesOfferingsPaginator(
        _ input: DescribeReservedDBInstancesOfferingsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (ReservedDBInstancesOfferingMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeReservedDBInstancesOfferings, tokenKey: \ReservedDBInstancesOfferingMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Returns a list of the source AWS Regions where the current AWS Region can create a read replica or copy a DB snapshot from. This API action supports pagination.
    public func describeSourceRegionsPaginator(
        _ input: DescribeSourceRegionsMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (SourceRegionMessage, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeSourceRegions, tokenKey: \SourceRegionMessage.marker, on: eventLoop, onPage: onPage)
    }

    ///  Downloads all or a portion of the specified log file, up to 1 MB in size.
    public func downloadDBLogFilePortionPaginator(
        _ input: DownloadDBLogFilePortionMessage,
        on eventLoop: EventLoop? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        onPage: @escaping (DownloadDBLogFilePortionDetails, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: downloadDBLogFilePortion, tokenKey: \DownloadDBLogFilePortionDetails.marker, on: eventLoop, onPage: onPage)
    }

}

extension RDS.DescribeCertificatesMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeCertificatesMessage {
        return .init(
            certificateIdentifier: self.certificateIdentifier,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeCustomAvailabilityZonesMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeCustomAvailabilityZonesMessage {
        return .init(
            customAvailabilityZoneId: self.customAvailabilityZoneId,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeDBClusterBacktracksMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBClusterBacktracksMessage {
        return .init(
            backtrackIdentifier: self.backtrackIdentifier,
            dBClusterIdentifier: self.dBClusterIdentifier,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeDBClusterEndpointsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBClusterEndpointsMessage {
        return .init(
            dBClusterEndpointIdentifier: self.dBClusterEndpointIdentifier,
            dBClusterIdentifier: self.dBClusterIdentifier,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeDBClusterParameterGroupsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBClusterParameterGroupsMessage {
        return .init(
            dBClusterParameterGroupName: self.dBClusterParameterGroupName,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeDBClusterParametersMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBClusterParametersMessage {
        return .init(
            dBClusterParameterGroupName: self.dBClusterParameterGroupName,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            source: self.source
        )

    }
}

extension RDS.DescribeDBClusterSnapshotsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBClusterSnapshotsMessage {
        return .init(
            dBClusterIdentifier: self.dBClusterIdentifier,
            dBClusterSnapshotIdentifier: self.dBClusterSnapshotIdentifier,
            filters: self.filters,
            includePublic: self.includePublic,
            includeShared: self.includeShared,
            marker: token,
            maxRecords: self.maxRecords,
            snapshotType: self.snapshotType
        )

    }
}

extension RDS.DescribeDBClustersMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBClustersMessage {
        return .init(
            dBClusterIdentifier: self.dBClusterIdentifier,
            filters: self.filters,
            includeShared: self.includeShared,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeDBEngineVersionsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBEngineVersionsMessage {
        return .init(
            dBParameterGroupFamily: self.dBParameterGroupFamily,
            defaultOnly: self.defaultOnly,
            engine: self.engine,
            engineVersion: self.engineVersion,
            filters: self.filters,
            includeAll: self.includeAll,
            listSupportedCharacterSets: self.listSupportedCharacterSets,
            listSupportedTimezones: self.listSupportedTimezones,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeDBInstanceAutomatedBackupsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBInstanceAutomatedBackupsMessage {
        return .init(
            dBInstanceIdentifier: self.dBInstanceIdentifier,
            dbiResourceId: self.dbiResourceId,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeDBInstancesMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBInstancesMessage {
        return .init(
            dBInstanceIdentifier: self.dBInstanceIdentifier,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeDBLogFilesMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBLogFilesMessage {
        return .init(
            dBInstanceIdentifier: self.dBInstanceIdentifier,
            fileLastWritten: self.fileLastWritten,
            filenameContains: self.filenameContains,
            fileSize: self.fileSize,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeDBParameterGroupsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBParameterGroupsMessage {
        return .init(
            dBParameterGroupName: self.dBParameterGroupName,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeDBParametersMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBParametersMessage {
        return .init(
            dBParameterGroupName: self.dBParameterGroupName,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            source: self.source
        )

    }
}

extension RDS.DescribeDBProxiesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBProxiesRequest {
        return .init(
            dBProxyName: self.dBProxyName,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeDBProxyTargetGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBProxyTargetGroupsRequest {
        return .init(
            dBProxyName: self.dBProxyName,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            targetGroupName: self.targetGroupName
        )

    }
}

extension RDS.DescribeDBProxyTargetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBProxyTargetsRequest {
        return .init(
            dBProxyName: self.dBProxyName,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            targetGroupName: self.targetGroupName
        )

    }
}

extension RDS.DescribeDBSecurityGroupsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBSecurityGroupsMessage {
        return .init(
            dBSecurityGroupName: self.dBSecurityGroupName,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeDBSnapshotsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBSnapshotsMessage {
        return .init(
            dBInstanceIdentifier: self.dBInstanceIdentifier,
            dbiResourceId: self.dbiResourceId,
            dBSnapshotIdentifier: self.dBSnapshotIdentifier,
            filters: self.filters,
            includePublic: self.includePublic,
            includeShared: self.includeShared,
            marker: token,
            maxRecords: self.maxRecords,
            snapshotType: self.snapshotType
        )

    }
}

extension RDS.DescribeDBSubnetGroupsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeDBSubnetGroupsMessage {
        return .init(
            dBSubnetGroupName: self.dBSubnetGroupName,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeEngineDefaultParametersMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeEngineDefaultParametersMessage {
        return .init(
            dBParameterGroupFamily: self.dBParameterGroupFamily,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeEventSubscriptionsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeEventSubscriptionsMessage {
        return .init(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            subscriptionName: self.subscriptionName
        )

    }
}

extension RDS.DescribeEventsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeEventsMessage {
        return .init(
            duration: self.duration,
            endTime: self.endTime,
            eventCategories: self.eventCategories,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            sourceIdentifier: self.sourceIdentifier,
            sourceType: self.sourceType,
            startTime: self.startTime
        )

    }
}

extension RDS.DescribeExportTasksMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeExportTasksMessage {
        return .init(
            exportTaskIdentifier: self.exportTaskIdentifier,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            sourceArn: self.sourceArn
        )

    }
}

extension RDS.DescribeGlobalClustersMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeGlobalClustersMessage {
        return .init(
            filters: self.filters,
            globalClusterIdentifier: self.globalClusterIdentifier,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeInstallationMediaMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeInstallationMediaMessage {
        return .init(
            filters: self.filters,
            installationMediaId: self.installationMediaId,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeOptionGroupOptionsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeOptionGroupOptionsMessage {
        return .init(
            engineName: self.engineName,
            filters: self.filters,
            majorEngineVersion: self.majorEngineVersion,
            marker: token,
            maxRecords: self.maxRecords
        )

    }
}

extension RDS.DescribeOptionGroupsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeOptionGroupsMessage {
        return .init(
            engineName: self.engineName,
            filters: self.filters,
            majorEngineVersion: self.majorEngineVersion,
            marker: token,
            maxRecords: self.maxRecords,
            optionGroupName: self.optionGroupName
        )

    }
}

extension RDS.DescribeOrderableDBInstanceOptionsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeOrderableDBInstanceOptionsMessage {
        return .init(
            availabilityZoneGroup: self.availabilityZoneGroup,
            dBInstanceClass: self.dBInstanceClass,
            engine: self.engine,
            engineVersion: self.engineVersion,
            filters: self.filters,
            licenseModel: self.licenseModel,
            marker: token,
            maxRecords: self.maxRecords,
            vpc: self.vpc
        )

    }
}

extension RDS.DescribePendingMaintenanceActionsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribePendingMaintenanceActionsMessage {
        return .init(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            resourceIdentifier: self.resourceIdentifier
        )

    }
}

extension RDS.DescribeReservedDBInstancesMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeReservedDBInstancesMessage {
        return .init(
            dBInstanceClass: self.dBInstanceClass,
            duration: self.duration,
            filters: self.filters,
            leaseId: self.leaseId,
            marker: token,
            maxRecords: self.maxRecords,
            multiAZ: self.multiAZ,
            offeringType: self.offeringType,
            productDescription: self.productDescription,
            reservedDBInstanceId: self.reservedDBInstanceId,
            reservedDBInstancesOfferingId: self.reservedDBInstancesOfferingId
        )

    }
}

extension RDS.DescribeReservedDBInstancesOfferingsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeReservedDBInstancesOfferingsMessage {
        return .init(
            dBInstanceClass: self.dBInstanceClass,
            duration: self.duration,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            multiAZ: self.multiAZ,
            offeringType: self.offeringType,
            productDescription: self.productDescription,
            reservedDBInstancesOfferingId: self.reservedDBInstancesOfferingId
        )

    }
}

extension RDS.DescribeSourceRegionsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DescribeSourceRegionsMessage {
        return .init(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            regionName: self.regionName
        )

    }
}

extension RDS.DownloadDBLogFilePortionMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> RDS.DownloadDBLogFilePortionMessage {
        return .init(
            dBInstanceIdentifier: self.dBInstanceIdentifier,
            logFileName: self.logFileName,
            marker: token,
            numberOfLines: self.numberOfLines
        )

    }
}


