// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

//MARK: Paginators

extension ElastiCache {

    ///  Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied. By default, abbreviated information about the clusters is returned. You can use the optional ShowCacheNodeInfo flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint. If the cluster is in the creating state, only cluster-level information is displayed until all of the nodes are successfully provisioned. If the cluster is in the deleting state, only cluster-level information is displayed. If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is available, the cluster is ready for use. If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.
    public func describeCacheClustersPaginator(_ input: DescribeCacheClustersMessage, onPage: @escaping (CacheClusterMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeCacheClusters, tokenKey: \CacheClusterMessage.marker, onPage: onPage)
    }

    ///  Returns a list of the available cache engines and their versions.
    public func describeCacheEngineVersionsPaginator(_ input: DescribeCacheEngineVersionsMessage, onPage: @escaping (CacheEngineVersionMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeCacheEngineVersions, tokenKey: \CacheEngineVersionMessage.marker, onPage: onPage)
    }

    ///  Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
    public func describeCacheParameterGroupsPaginator(_ input: DescribeCacheParameterGroupsMessage, onPage: @escaping (CacheParameterGroupsMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeCacheParameterGroups, tokenKey: \CacheParameterGroupsMessage.marker, onPage: onPage)
    }

    ///  Returns the detailed parameter list for a particular cache parameter group.
    public func describeCacheParametersPaginator(_ input: DescribeCacheParametersMessage, onPage: @escaping (CacheParameterGroupDetails, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeCacheParameters, tokenKey: \CacheParameterGroupDetails.marker, onPage: onPage)
    }

    ///  Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
    public func describeCacheSecurityGroupsPaginator(_ input: DescribeCacheSecurityGroupsMessage, onPage: @escaping (CacheSecurityGroupMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeCacheSecurityGroups, tokenKey: \CacheSecurityGroupMessage.marker, onPage: onPage)
    }

    ///  Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
    public func describeCacheSubnetGroupsPaginator(_ input: DescribeCacheSubnetGroupsMessage, onPage: @escaping (CacheSubnetGroupMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeCacheSubnetGroups, tokenKey: \CacheSubnetGroupMessage.marker, onPage: onPage)
    }

    ///  Returns the default engine and system parameter information for the specified cache engine.
    public func describeEngineDefaultParametersPaginator(_ input: DescribeEngineDefaultParametersMessage, onPage: @escaping (DescribeEngineDefaultParametersResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeEngineDefaultParameters, tokenKey: \DescribeEngineDefaultParametersResult.engineDefaults?.marker, onPage: onPage)
    }

    ///  Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter. By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.
    public func describeEventsPaginator(_ input: DescribeEventsMessage, onPage: @escaping (EventsMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeEvents, tokenKey: \EventsMessage.marker, onPage: onPage)
    }

    ///  Returns information about a particular global replication group. If no identifier is specified, returns information about all Global Datastores. 
    public func describeGlobalReplicationGroupsPaginator(_ input: DescribeGlobalReplicationGroupsMessage, onPage: @escaping (DescribeGlobalReplicationGroupsResult, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeGlobalReplicationGroups, tokenKey: \DescribeGlobalReplicationGroupsResult.marker, onPage: onPage)
    }

    ///  Returns information about a particular replication group. If no identifier is specified, DescribeReplicationGroups returns information about all replication groups.  This operation is valid for Redis only. 
    public func describeReplicationGroupsPaginator(_ input: DescribeReplicationGroupsMessage, onPage: @escaping (ReplicationGroupMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeReplicationGroups, tokenKey: \ReplicationGroupMessage.marker, onPage: onPage)
    }

    ///  Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
    public func describeReservedCacheNodesPaginator(_ input: DescribeReservedCacheNodesMessage, onPage: @escaping (ReservedCacheNodeMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeReservedCacheNodes, tokenKey: \ReservedCacheNodeMessage.marker, onPage: onPage)
    }

    ///  Lists available reserved cache node offerings.
    public func describeReservedCacheNodesOfferingsPaginator(_ input: DescribeReservedCacheNodesOfferingsMessage, onPage: @escaping (ReservedCacheNodesOfferingMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeReservedCacheNodesOfferings, tokenKey: \ReservedCacheNodesOfferingMessage.marker, onPage: onPage)
    }

    ///  Returns details of the service updates
    public func describeServiceUpdatesPaginator(_ input: DescribeServiceUpdatesMessage, onPage: @escaping (ServiceUpdatesMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeServiceUpdates, tokenKey: \ServiceUpdatesMessage.marker, onPage: onPage)
    }

    ///  Returns information about cluster or replication group snapshots. By default, DescribeSnapshots lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.  This operation is valid for Redis only. 
    public func describeSnapshotsPaginator(_ input: DescribeSnapshotsMessage, onPage: @escaping (DescribeSnapshotsListMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeSnapshots, tokenKey: \DescribeSnapshotsListMessage.marker, onPage: onPage)
    }

    ///  Returns details of the update actions 
    public func describeUpdateActionsPaginator(_ input: DescribeUpdateActionsMessage, onPage: @escaping (UpdateActionsMessage, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: describeUpdateActions, tokenKey: \UpdateActionsMessage.marker, onPage: onPage)
    }

}

extension ElastiCache.DescribeCacheClustersMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeCacheClustersMessage {
        return .init(
            cacheClusterId: self.cacheClusterId, 
            marker: token, 
            maxRecords: self.maxRecords, 
            showCacheClustersNotInReplicationGroups: self.showCacheClustersNotInReplicationGroups, 
            showCacheNodeInfo: self.showCacheNodeInfo
        )

    }
}

extension ElastiCache.DescribeCacheEngineVersionsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeCacheEngineVersionsMessage {
        return .init(
            cacheParameterGroupFamily: self.cacheParameterGroupFamily, 
            defaultOnly: self.defaultOnly, 
            engine: self.engine, 
            engineVersion: self.engineVersion, 
            marker: token, 
            maxRecords: self.maxRecords
        )

    }
}

extension ElastiCache.DescribeCacheParameterGroupsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeCacheParameterGroupsMessage {
        return .init(
            cacheParameterGroupName: self.cacheParameterGroupName, 
            marker: token, 
            maxRecords: self.maxRecords
        )

    }
}

extension ElastiCache.DescribeCacheParametersMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeCacheParametersMessage {
        return .init(
            cacheParameterGroupName: self.cacheParameterGroupName, 
            marker: token, 
            maxRecords: self.maxRecords, 
            source: self.source
        )

    }
}

extension ElastiCache.DescribeCacheSecurityGroupsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeCacheSecurityGroupsMessage {
        return .init(
            cacheSecurityGroupName: self.cacheSecurityGroupName, 
            marker: token, 
            maxRecords: self.maxRecords
        )

    }
}

extension ElastiCache.DescribeCacheSubnetGroupsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeCacheSubnetGroupsMessage {
        return .init(
            cacheSubnetGroupName: self.cacheSubnetGroupName, 
            marker: token, 
            maxRecords: self.maxRecords
        )

    }
}

extension ElastiCache.DescribeEngineDefaultParametersMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeEngineDefaultParametersMessage {
        return .init(
            cacheParameterGroupFamily: self.cacheParameterGroupFamily, 
            marker: token, 
            maxRecords: self.maxRecords
        )

    }
}

extension ElastiCache.DescribeEventsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeEventsMessage {
        return .init(
            duration: self.duration, 
            endTime: self.endTime, 
            marker: token, 
            maxRecords: self.maxRecords, 
            sourceIdentifier: self.sourceIdentifier, 
            sourceType: self.sourceType, 
            startTime: self.startTime
        )

    }
}

extension ElastiCache.DescribeGlobalReplicationGroupsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeGlobalReplicationGroupsMessage {
        return .init(
            globalReplicationGroupId: self.globalReplicationGroupId, 
            marker: token, 
            maxRecords: self.maxRecords, 
            showMemberInfo: self.showMemberInfo
        )

    }
}

extension ElastiCache.DescribeReplicationGroupsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeReplicationGroupsMessage {
        return .init(
            marker: token, 
            maxRecords: self.maxRecords, 
            replicationGroupId: self.replicationGroupId
        )

    }
}

extension ElastiCache.DescribeReservedCacheNodesMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeReservedCacheNodesMessage {
        return .init(
            cacheNodeType: self.cacheNodeType, 
            duration: self.duration, 
            marker: token, 
            maxRecords: self.maxRecords, 
            offeringType: self.offeringType, 
            productDescription: self.productDescription, 
            reservedCacheNodeId: self.reservedCacheNodeId, 
            reservedCacheNodesOfferingId: self.reservedCacheNodesOfferingId
        )

    }
}

extension ElastiCache.DescribeReservedCacheNodesOfferingsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeReservedCacheNodesOfferingsMessage {
        return .init(
            cacheNodeType: self.cacheNodeType, 
            duration: self.duration, 
            marker: token, 
            maxRecords: self.maxRecords, 
            offeringType: self.offeringType, 
            productDescription: self.productDescription, 
            reservedCacheNodesOfferingId: self.reservedCacheNodesOfferingId
        )

    }
}

extension ElastiCache.DescribeServiceUpdatesMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeServiceUpdatesMessage {
        return .init(
            marker: token, 
            maxRecords: self.maxRecords, 
            serviceUpdateName: self.serviceUpdateName, 
            serviceUpdateStatus: self.serviceUpdateStatus
        )

    }
}

extension ElastiCache.DescribeSnapshotsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeSnapshotsMessage {
        return .init(
            cacheClusterId: self.cacheClusterId, 
            marker: token, 
            maxRecords: self.maxRecords, 
            replicationGroupId: self.replicationGroupId, 
            showNodeGroupConfig: self.showNodeGroupConfig, 
            snapshotName: self.snapshotName, 
            snapshotSource: self.snapshotSource
        )

    }
}

extension ElastiCache.DescribeUpdateActionsMessage: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeUpdateActionsMessage {
        return .init(
            cacheClusterIds: self.cacheClusterIds, 
            engine: self.engine, 
            marker: token, 
            maxRecords: self.maxRecords, 
            replicationGroupIds: self.replicationGroupIds, 
            serviceUpdateName: self.serviceUpdateName, 
            serviceUpdateStatus: self.serviceUpdateStatus, 
            serviceUpdateTimeRange: self.serviceUpdateTimeRange, 
            showNodeLevelUpdateStatus: self.showNodeLevelUpdateStatus, 
            updateActionStatus: self.updateActionStatus
        )

    }
}


