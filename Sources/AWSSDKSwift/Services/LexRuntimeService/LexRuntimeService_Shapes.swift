// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension LexRuntimeService {
    //MARK: Enums

    public enum ConfirmationStatus: String, CustomStringConvertible, Codable {
        case none = "None"
        case confirmed = "Confirmed"
        case denied = "Denied"
        public var description: String { return self.rawValue }
    }

    public enum ContentType: String, CustomStringConvertible, Codable {
        case applicationVndAmazonawsCardGeneric = "application/vnd.amazonaws.card.generic"
        public var description: String { return self.rawValue }
    }

    public enum DialogActionType: String, CustomStringConvertible, Codable {
        case elicitintent = "ElicitIntent"
        case confirmintent = "ConfirmIntent"
        case elicitslot = "ElicitSlot"
        case close = "Close"
        case delegate = "Delegate"
        public var description: String { return self.rawValue }
    }

    public enum DialogState: String, CustomStringConvertible, Codable {
        case elicitintent = "ElicitIntent"
        case confirmintent = "ConfirmIntent"
        case elicitslot = "ElicitSlot"
        case fulfilled = "Fulfilled"
        case readyforfulfillment = "ReadyForFulfillment"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum FulfillmentState: String, CustomStringConvertible, Codable {
        case fulfilled = "Fulfilled"
        case failed = "Failed"
        case readyforfulfillment = "ReadyForFulfillment"
        public var description: String { return self.rawValue }
    }

    public enum MessageFormatType: String, CustomStringConvertible, Codable {
        case plaintext = "PlainText"
        case custompayload = "CustomPayload"
        case ssml = "SSML"
        case composite = "Composite"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct Button: AWSShape {

        /// Text that is visible to the user on the button.
        public let text: String
        /// The value sent to Amazon Lex when a user chooses the button. For example, consider button text "NYC." When the user chooses the button, the value sent can be "New York City."
        public let value: String

        public init(text: String, value: String) {
            self.text = text
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case text = "text"
            case value = "value"
        }
    }

    public struct DeleteSessionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "botAlias", location: .uri(locationName: "botAlias")), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botName")), 
            AWSShapeMember(label: "userId", location: .uri(locationName: "userId"))
        ]

        /// The alias in use for the bot that contains the session data.
        public let botAlias: String
        /// The name of the bot that contains the session data.
        public let botName: String
        /// The identifier of the user associated with the session data.
        public let userId: String

        public init(botAlias: String, botName: String, userId: String) {
            self.botAlias = botAlias
            self.botName = botName
            self.userId = userId
        }

        public func validate(name: String) throws {
            try validate(self.userId, name:"userId", parent: name, max: 100)
            try validate(self.userId, name:"userId", parent: name, min: 2)
            try validate(self.userId, name:"userId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case botAlias = "botAlias"
            case botName = "botName"
            case userId = "userId"
        }
    }

    public struct DeleteSessionResponse: AWSShape {

        /// The alias in use for the bot associated with the session data.
        public let botAlias: String?
        /// The name of the bot associated with the session data.
        public let botName: String?
        /// The unique identifier for the session.
        public let sessionId: String?
        /// The ID of the client application user.
        public let userId: String?

        public init(botAlias: String? = nil, botName: String? = nil, sessionId: String? = nil, userId: String? = nil) {
            self.botAlias = botAlias
            self.botName = botName
            self.sessionId = sessionId
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case botAlias = "botAlias"
            case botName = "botName"
            case sessionId = "sessionId"
            case userId = "userId"
        }
    }

    public struct DialogAction: AWSShape {

        /// The fulfillment state of the intent. The possible values are:    Failed - The Lambda function associated with the intent failed to fulfill the intent.    Fulfilled - The intent has fulfilled by the Lambda function associated with the intent.     ReadyForFulfillment - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.  
        public let fulfillmentState: FulfillmentState?
        /// The name of the intent.
        public let intentName: String?
        /// The message that should be shown to the user. If you don't specify a message, Amazon Lex will use the message configured for the intent.
        public let message: String?
        ///    PlainText - The message contains plain UTF-8 text.    CustomPayload - The message is a custom format for the client.    SSML - The message contains text formatted for voice output.    Composite - The message contains an escaped JSON object containing one or more messages. For more information, see Message Groups.   
        public let messageFormat: MessageFormatType?
        /// Map of the slots that have been gathered and their values. 
        public let slots: [String: String]?
        /// The name of the slot that should be elicited from the user.
        public let slotToElicit: String?
        /// The next action that the bot should take in its interaction with the user. The possible values are:    ConfirmIntent - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as "Place the order?"    Close - Indicates that the there will not be a response from the user. For example, the statement "Your order has been placed" does not require a response.    Delegate - The next action is determined by Amazon Lex.    ElicitIntent - The next action is to determine the intent that the user wants to fulfill.    ElicitSlot - The next action is to elicit a slot value from the user.  
        public let `type`: DialogActionType

        public init(fulfillmentState: FulfillmentState? = nil, intentName: String? = nil, message: String? = nil, messageFormat: MessageFormatType? = nil, slots: [String: String]? = nil, slotToElicit: String? = nil, type: DialogActionType) {
            self.fulfillmentState = fulfillmentState
            self.intentName = intentName
            self.message = message
            self.messageFormat = messageFormat
            self.slots = slots
            self.slotToElicit = slotToElicit
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try validate(self.message, name:"message", parent: name, max: 1024)
            try validate(self.message, name:"message", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fulfillmentState = "fulfillmentState"
            case intentName = "intentName"
            case message = "message"
            case messageFormat = "messageFormat"
            case slots = "slots"
            case slotToElicit = "slotToElicit"
            case `type` = "type"
        }
    }

    public struct GenericAttachment: AWSShape {

        /// The URL of an attachment to the response card.
        public let attachmentLinkUrl: String?
        /// The list of options to show to the user.
        public let buttons: [Button]?
        /// The URL of an image that is displayed to the user.
        public let imageUrl: String?
        /// The subtitle shown below the title.
        public let subTitle: String?
        /// The title of the option.
        public let title: String?

        public init(attachmentLinkUrl: String? = nil, buttons: [Button]? = nil, imageUrl: String? = nil, subTitle: String? = nil, title: String? = nil) {
            self.attachmentLinkUrl = attachmentLinkUrl
            self.buttons = buttons
            self.imageUrl = imageUrl
            self.subTitle = subTitle
            self.title = title
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentLinkUrl = "attachmentLinkUrl"
            case buttons = "buttons"
            case imageUrl = "imageUrl"
            case subTitle = "subTitle"
            case title = "title"
        }
    }

    public struct GetSessionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "botAlias", location: .uri(locationName: "botAlias")), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botName")), 
            AWSShapeMember(label: "checkpointLabelFilter", location: .querystring(locationName: "checkpointLabelFilter")), 
            AWSShapeMember(label: "userId", location: .uri(locationName: "userId"))
        ]

        /// The alias in use for the bot that contains the session data.
        public let botAlias: String
        /// The name of the bot that contains the session data.
        public let botName: String
        /// A string used to filter the intents returned in the recentIntentSummaryView structure.  When you specify a filter, only intents with their checkpointLabel field set to that string are returned.
        public let checkpointLabelFilter: String?
        /// The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. 
        public let userId: String

        public init(botAlias: String, botName: String, checkpointLabelFilter: String? = nil, userId: String) {
            self.botAlias = botAlias
            self.botName = botName
            self.checkpointLabelFilter = checkpointLabelFilter
            self.userId = userId
        }

        public func validate(name: String) throws {
            try validate(self.checkpointLabelFilter, name:"checkpointLabelFilter", parent: name, max: 255)
            try validate(self.checkpointLabelFilter, name:"checkpointLabelFilter", parent: name, min: 1)
            try validate(self.checkpointLabelFilter, name:"checkpointLabelFilter", parent: name, pattern: "[a-zA-Z0-9-]+")
            try validate(self.userId, name:"userId", parent: name, max: 100)
            try validate(self.userId, name:"userId", parent: name, min: 2)
            try validate(self.userId, name:"userId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case botAlias = "botAlias"
            case botName = "botName"
            case checkpointLabelFilter = "checkpointLabelFilter"
            case userId = "userId"
        }
    }

    public struct GetSessionResponse: AWSShape {

        /// Describes the current state of the bot.
        public let dialogAction: DialogAction?
        /// An array of information about the intents used in the session. The array can contain a maximum of three summaries. If more than three intents are used in the session, the recentIntentSummaryView operation contains information about the last three intents used. If you set the checkpointLabelFilter parameter in the request, the array contains only the intents with the specified label.
        public let recentIntentSummaryView: [IntentSummary]?
        /// Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.
        public let sessionAttributes: [String: String]?
        /// A unique identifier for the session.
        public let sessionId: String?

        public init(dialogAction: DialogAction? = nil, recentIntentSummaryView: [IntentSummary]? = nil, sessionAttributes: [String: String]? = nil, sessionId: String? = nil) {
            self.dialogAction = dialogAction
            self.recentIntentSummaryView = recentIntentSummaryView
            self.sessionAttributes = sessionAttributes
            self.sessionId = sessionId
        }

        private enum CodingKeys: String, CodingKey {
            case dialogAction = "dialogAction"
            case recentIntentSummaryView = "recentIntentSummaryView"
            case sessionAttributes = "sessionAttributes"
            case sessionId = "sessionId"
        }
    }

    public struct IntentSummary: AWSShape {

        /// A user-defined label that identifies a particular intent. You can use this label to return to a previous intent.  Use the checkpointLabelFilter parameter of the GetSessionRequest operation to filter the intents returned by the operation to those with only the specified label.
        public let checkpointLabel: String?
        /// The status of the intent after the user responds to the confirmation prompt. If the user confirms the intent, Amazon Lex sets this field to Confirmed. If the user denies the intent, Amazon Lex sets this value to Denied. The possible values are:    Confirmed - The user has responded "Yes" to the confirmation prompt, confirming that the intent is complete and that it is ready to be fulfilled.    Denied - The user has responded "No" to the confirmation prompt.    None - The user has never been prompted for confirmation; or, the user was prompted but did not confirm or deny the prompt.  
        public let confirmationStatus: ConfirmationStatus?
        /// The next action that the bot should take in its interaction with the user. The possible values are:    ConfirmIntent - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as "Place the order?"    Close - Indicates that the there will not be a response from the user. For example, the statement "Your order has been placed" does not require a response.    ElicitIntent - The next action is to determine the intent that the user wants to fulfill.    ElicitSlot - The next action is to elicit a slot value from the user.  
        public let dialogActionType: DialogActionType
        /// The fulfillment state of the intent. The possible values are:    Failed - The Lambda function associated with the intent failed to fulfill the intent.    Fulfilled - The intent has fulfilled by the Lambda function associated with the intent.     ReadyForFulfillment - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.  
        public let fulfillmentState: FulfillmentState?
        /// The name of the intent.
        public let intentName: String?
        /// Map of the slots that have been gathered and their values. 
        public let slots: [String: String]?
        /// The next slot to elicit from the user. If there is not slot to elicit, the field is blank.
        public let slotToElicit: String?

        public init(checkpointLabel: String? = nil, confirmationStatus: ConfirmationStatus? = nil, dialogActionType: DialogActionType, fulfillmentState: FulfillmentState? = nil, intentName: String? = nil, slots: [String: String]? = nil, slotToElicit: String? = nil) {
            self.checkpointLabel = checkpointLabel
            self.confirmationStatus = confirmationStatus
            self.dialogActionType = dialogActionType
            self.fulfillmentState = fulfillmentState
            self.intentName = intentName
            self.slots = slots
            self.slotToElicit = slotToElicit
        }

        public func validate(name: String) throws {
            try validate(self.checkpointLabel, name:"checkpointLabel", parent: name, max: 255)
            try validate(self.checkpointLabel, name:"checkpointLabel", parent: name, min: 1)
            try validate(self.checkpointLabel, name:"checkpointLabel", parent: name, pattern: "[a-zA-Z0-9-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case checkpointLabel = "checkpointLabel"
            case confirmationStatus = "confirmationStatus"
            case dialogActionType = "dialogActionType"
            case fulfillmentState = "fulfillmentState"
            case intentName = "intentName"
            case slots = "slots"
            case slotToElicit = "slotToElicit"
        }
    }

    public struct PostContentRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "inputStream"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accept", location: .header(locationName: "Accept")), 
            AWSShapeMember(label: "botAlias", location: .uri(locationName: "botAlias")), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botName")), 
            AWSShapeMember(label: "contentType", location: .header(locationName: "Content-Type")), 
            AWSShapeMember(label: "inputStream", encoding: .blob), 
            AWSShapeMember(label: "requestAttributes", location: .header(locationName: "x-amz-lex-request-attributes")), 
            AWSShapeMember(label: "sessionAttributes", location: .header(locationName: "x-amz-lex-session-attributes")), 
            AWSShapeMember(label: "userId", location: .uri(locationName: "userId"))
        ]

        ///  You pass this value as the Accept HTTP header.   The message Amazon Lex returns in the response can be either text or speech based on the Accept HTTP header value in the request.     If the value is text/plain; charset=utf-8, Amazon Lex returns text in the response.     If the value begins with audio/, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech (using the configuration you specified in the Accept header). For example, if you specify audio/mpeg as the value, Amazon Lex returns speech in the MPEG format.   If the value is audio/pcm, the speech returned is audio/pcm in 16-bit, little endian format.    The following are the accepted values:   audio/mpeg   audio/ogg   audio/pcm   text/plain; charset=utf-8   audio/* (defaults to mpeg)    
        public let accept: String?
        /// Alias of the Amazon Lex bot.
        public let botAlias: String
        /// Name of the Amazon Lex bot.
        public let botName: String
        ///  You pass this value as the Content-Type HTTP header.   Indicates the audio format or text. The header value must start with one of the following prefixes:    PCM format, audio data must be in little-endian byte order.   audio/l16; rate=16000; channels=1   audio/x-l16; sample-rate=16000; channel-count=1   audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false      Opus format   audio/x-cbr-opus-with-preamble; preamble-size=0; bit-rate=256000; frame-size-milliseconds=4     Text format   text/plain; charset=utf-8    
        public let contentType: String
        ///  User input in PCM or Opus audio format or text format as described in the Content-Type HTTP header.  You can stream audio data to Amazon Lex or you can create a local buffer that captures all of the audio data before sending. In general, you get better performance if you stream audio data rather than buffering the data locally.
        public let inputStream: Data
        /// You pass this value as the x-amz-lex-request-attributes HTTP header. Request-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the requestAttributes and sessionAttributes headers is limited to 12 KB. The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes with the prefix x-amz-lex:. For more information, see Setting Request Attributes.
        public let requestAttributes: String?
        /// You pass this value as the x-amz-lex-session-attributes HTTP header. Application-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the sessionAttributes and requestAttributes headers is limited to 12 KB. For more information, see Setting Session Attributes.
        public let sessionAttributes: String?
        /// The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. At runtime, each request must contain the userID field. To decide the user ID to use for your application, consider the following factors.   The userID field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.   If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.   If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.   A user can't have two independent conversations with two different versions of the same bot. For example, a user can't have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.  
        public let userId: String

        public init(accept: String? = nil, botAlias: String, botName: String, contentType: String, inputStream: Data, requestAttributes: String? = nil, sessionAttributes: String? = nil, userId: String) {
            self.accept = accept
            self.botAlias = botAlias
            self.botName = botName
            self.contentType = contentType
            self.inputStream = inputStream
            self.requestAttributes = requestAttributes
            self.sessionAttributes = sessionAttributes
            self.userId = userId
        }

        public func validate(name: String) throws {
            try validate(self.userId, name:"userId", parent: name, max: 100)
            try validate(self.userId, name:"userId", parent: name, min: 2)
            try validate(self.userId, name:"userId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accept = "Accept"
            case botAlias = "botAlias"
            case botName = "botName"
            case contentType = "Content-Type"
            case inputStream = "inputStream"
            case requestAttributes = "x-amz-lex-request-attributes"
            case sessionAttributes = "x-amz-lex-session-attributes"
            case userId = "userId"
        }
    }

    public struct PostContentResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "audioStream"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "audioStream", encoding: .blob), 
            AWSShapeMember(label: "contentType", location: .header(locationName: "Content-Type")), 
            AWSShapeMember(label: "dialogState", location: .header(locationName: "x-amz-lex-dialog-state")), 
            AWSShapeMember(label: "inputTranscript", location: .header(locationName: "x-amz-lex-input-transcript")), 
            AWSShapeMember(label: "intentName", location: .header(locationName: "x-amz-lex-intent-name")), 
            AWSShapeMember(label: "message", location: .header(locationName: "x-amz-lex-message")), 
            AWSShapeMember(label: "messageFormat", location: .header(locationName: "x-amz-lex-message-format")), 
            AWSShapeMember(label: "sentimentResponse", location: .header(locationName: "x-amz-lex-sentiment")), 
            AWSShapeMember(label: "sessionAttributes", location: .header(locationName: "x-amz-lex-session-attributes")), 
            AWSShapeMember(label: "sessionId", location: .header(locationName: "x-amz-lex-session-id")), 
            AWSShapeMember(label: "slots", location: .header(locationName: "x-amz-lex-slots")), 
            AWSShapeMember(label: "slotToElicit", location: .header(locationName: "x-amz-lex-slot-to-elicit"))
        ]

        /// The prompt (or statement) to convey to the user. This is based on the bot configuration and context. For example, if Amazon Lex did not understand the user intent, it sends the clarificationPrompt configured for the bot. If the intent requires confirmation before taking the fulfillment action, it sends the confirmationPrompt. Another example: Suppose that the Lambda function successfully fulfilled the intent, and sent a message to convey to the user. Then Amazon Lex sends that message in the response. 
        public let audioStream: Data?
        /// Content type as specified in the Accept HTTP header in the request.
        public let contentType: String?
        /// Identifies the current state of the user interaction. Amazon Lex returns one of the following values as dialogState. The client can optionally use this information to customize the user interface.     ElicitIntent - Amazon Lex wants to elicit the user's intent. Consider the following examples:   For example, a user might utter an intent ("I want to order a pizza"). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialog state.     ConfirmIntent - Amazon Lex is expecting a "yes" or "no" response.  For example, Amazon Lex wants user confirmation before fulfilling an intent. Instead of a simple "yes" or "no" response, a user might respond with additional information. For example, "yes, but make it a thick crust pizza" or "no, I want to order a drink." Amazon Lex can process such additional information (in these examples, update the crust type slot or change the intent from OrderPizza to OrderDrink).     ElicitSlot - Amazon Lex is expecting the value of a slot for the current intent.   For example, suppose that in the response Amazon Lex sends this message: "What size pizza would you like?". A user might reply with the slot value (e.g., "medium"). The user might also provide additional information in the response (e.g., "medium thick crust pizza"). Amazon Lex can process such additional information appropriately.     Fulfilled - Conveys that the Lambda function has successfully fulfilled the intent.     ReadyForFulfillment - Conveys that the client has to fulfill the request.     Failed - Conveys that the conversation with the user failed.   This can happen for various reasons, including that the user does not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or if the Lambda function fails to fulfill the intent.   
        public let dialogState: DialogState?
        /// The text used to process the request. If the input was an audio stream, the inputTranscript field contains the text extracted from the audio stream. This is the text that is actually processed to recognize intents and slot values. You can use this information to determine if Amazon Lex is correctly processing the audio that you send.
        public let inputTranscript: String?
        /// Current user intent that Amazon Lex is aware of.
        public let intentName: String?
        /// The message to convey to the user. The message can come from the bot's configuration or from a Lambda function. If the intent is not configured with a Lambda function, or if the Lambda function returned Delegate as the dialogAction.type in its response, Amazon Lex decides on the next course of action and selects an appropriate message from the bot's configuration based on the current interaction context. For example, if Amazon Lex isn't able to understand user input, it uses a clarification prompt message. When you create an intent you can assign messages to groups. When messages are assigned to groups Amazon Lex returns one message from each group in the response. The message field is an escaped JSON string containing the messages. For more information about the structure of the JSON string returned, see msg-prompts-formats. If the Lambda function returns a message, Amazon Lex passes it to the client in its response.
        public let message: String?
        /// The format of the response message. One of the following values:    PlainText - The message contains plain UTF-8 text.    CustomPayload - The message is a custom format for the client.    SSML - The message contains text formatted for voice output.    Composite - The message contains an escaped JSON object containing one or more messages from the groups that messages were assigned to when the intent was created.  
        public let messageFormat: MessageFormatType?
        /// The sentiment expressed in and utterance. When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.
        public let sentimentResponse: String?
        ///  Map of key/value pairs representing the session-specific context information. 
        public let sessionAttributes: String?
        /// The unique identifier for the session.
        public let sessionId: String?
        /// Map of zero or more intent slots (name/value pairs) Amazon Lex detected from the user input during the conversation. The field is base-64 encoded. Amazon Lex creates a resolution list containing likely values for a slot. The value that it returns is determined by the valueSelectionStrategy selected when the slot type was created or updated. If valueSelectionStrategy is set to ORIGINAL_VALUE, the value provided by the user is returned, if the user value is similar to the slot values. If valueSelectionStrategy is set to TOP_RESOLUTION Amazon Lex returns the first value in the resolution list or, if there is no resolution list, null. If you don't specify a valueSelectionStrategy, the default is ORIGINAL_VALUE.
        public let slots: String?
        ///  If the dialogState value is ElicitSlot, returns the name of the slot for which Amazon Lex is eliciting a value. 
        public let slotToElicit: String?

        public init(audioStream: Data? = nil, contentType: String? = nil, dialogState: DialogState? = nil, inputTranscript: String? = nil, intentName: String? = nil, message: String? = nil, messageFormat: MessageFormatType? = nil, sentimentResponse: String? = nil, sessionAttributes: String? = nil, sessionId: String? = nil, slots: String? = nil, slotToElicit: String? = nil) {
            self.audioStream = audioStream
            self.contentType = contentType
            self.dialogState = dialogState
            self.inputTranscript = inputTranscript
            self.intentName = intentName
            self.message = message
            self.messageFormat = messageFormat
            self.sentimentResponse = sentimentResponse
            self.sessionAttributes = sessionAttributes
            self.sessionId = sessionId
            self.slots = slots
            self.slotToElicit = slotToElicit
        }

        private enum CodingKeys: String, CodingKey {
            case audioStream = "audioStream"
            case contentType = "Content-Type"
            case dialogState = "x-amz-lex-dialog-state"
            case inputTranscript = "x-amz-lex-input-transcript"
            case intentName = "x-amz-lex-intent-name"
            case message = "x-amz-lex-message"
            case messageFormat = "x-amz-lex-message-format"
            case sentimentResponse = "x-amz-lex-sentiment"
            case sessionAttributes = "x-amz-lex-session-attributes"
            case sessionId = "x-amz-lex-session-id"
            case slots = "x-amz-lex-slots"
            case slotToElicit = "x-amz-lex-slot-to-elicit"
        }
    }

    public struct PostTextRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "botAlias", location: .uri(locationName: "botAlias")), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botName")), 
            AWSShapeMember(label: "userId", location: .uri(locationName: "userId"))
        ]

        /// The alias of the Amazon Lex bot.
        public let botAlias: String
        /// The name of the Amazon Lex bot.
        public let botName: String
        /// The text that the user entered (Amazon Lex interprets this text).
        public let inputText: String
        /// Request-specific information passed between Amazon Lex and a client application. The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes with the prefix x-amz-lex:. For more information, see Setting Request Attributes.
        public let requestAttributes: [String: String]?
        /// Application-specific information passed between Amazon Lex and a client application. For more information, see Setting Session Attributes.
        public let sessionAttributes: [String: String]?
        /// The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. At runtime, each request must contain the userID field. To decide the user ID to use for your application, consider the following factors.   The userID field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.   If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.   If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.   A user can't have two independent conversations with two different versions of the same bot. For example, a user can't have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.  
        public let userId: String

        public init(botAlias: String, botName: String, inputText: String, requestAttributes: [String: String]? = nil, sessionAttributes: [String: String]? = nil, userId: String) {
            self.botAlias = botAlias
            self.botName = botName
            self.inputText = inputText
            self.requestAttributes = requestAttributes
            self.sessionAttributes = sessionAttributes
            self.userId = userId
        }

        public func validate(name: String) throws {
            try validate(self.inputText, name:"inputText", parent: name, max: 1024)
            try validate(self.inputText, name:"inputText", parent: name, min: 1)
            try validate(self.userId, name:"userId", parent: name, max: 100)
            try validate(self.userId, name:"userId", parent: name, min: 2)
            try validate(self.userId, name:"userId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case botAlias = "botAlias"
            case botName = "botName"
            case inputText = "inputText"
            case requestAttributes = "requestAttributes"
            case sessionAttributes = "sessionAttributes"
            case userId = "userId"
        }
    }

    public struct PostTextResponse: AWSShape {

        ///  Identifies the current state of the user interaction. Amazon Lex returns one of the following values as dialogState. The client can optionally use this information to customize the user interface.     ElicitIntent - Amazon Lex wants to elicit user intent.  For example, a user might utter an intent ("I want to order a pizza"). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialogState.    ConfirmIntent - Amazon Lex is expecting a "yes" or "no" response.   For example, Amazon Lex wants user confirmation before fulfilling an intent.  Instead of a simple "yes" or "no," a user might respond with additional information. For example, "yes, but make it thick crust pizza" or "no, I want to order a drink". Amazon Lex can process such additional information (in these examples, update the crust type slot value, or change intent from OrderPizza to OrderDrink).    ElicitSlot - Amazon Lex is expecting a slot value for the current intent.  For example, suppose that in the response Amazon Lex sends this message: "What size pizza would you like?". A user might reply with the slot value (e.g., "medium"). The user might also provide additional information in the response (e.g., "medium thick crust pizza"). Amazon Lex can process such additional information appropriately.     Fulfilled - Conveys that the Lambda function configured for the intent has successfully fulfilled the intent.     ReadyForFulfillment - Conveys that the client has to fulfill the intent.     Failed - Conveys that the conversation with the user failed.   This can happen for various reasons including that the user did not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or the Lambda function failed to fulfill the intent.   
        public let dialogState: DialogState?
        /// The current user intent that Amazon Lex is aware of.
        public let intentName: String?
        /// The message to convey to the user. The message can come from the bot's configuration or from a Lambda function. If the intent is not configured with a Lambda function, or if the Lambda function returned Delegate as the dialogAction.type its response, Amazon Lex decides on the next course of action and selects an appropriate message from the bot's configuration based on the current interaction context. For example, if Amazon Lex isn't able to understand user input, it uses a clarification prompt message. When you create an intent you can assign messages to groups. When messages are assigned to groups Amazon Lex returns one message from each group in the response. The message field is an escaped JSON string containing the messages. For more information about the structure of the JSON string returned, see msg-prompts-formats. If the Lambda function returns a message, Amazon Lex passes it to the client in its response.
        public let message: String?
        /// The format of the response message. One of the following values:    PlainText - The message contains plain UTF-8 text.    CustomPayload - The message is a custom format defined by the Lambda function.    SSML - The message contains text formatted for voice output.    Composite - The message contains an escaped JSON object containing one or more messages from the groups that messages were assigned to when the intent was created.  
        public let messageFormat: MessageFormatType?
        /// Represents the options that the user has to respond to the current prompt. Response Card can come from the bot configuration (in the Amazon Lex console, choose the settings button next to a slot) or from a code hook (Lambda function). 
        public let responseCard: ResponseCard?
        /// The sentiment expressed in and utterance. When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.
        public let sentimentResponse: SentimentResponse?
        /// A map of key-value pairs representing the session-specific context information.
        public let sessionAttributes: [String: String]?
        /// A unique identifier for the session.
        public let sessionId: String?
        ///  The intent slots that Amazon Lex detected from the user input in the conversation.  Amazon Lex creates a resolution list containing likely values for a slot. The value that it returns is determined by the valueSelectionStrategy selected when the slot type was created or updated. If valueSelectionStrategy is set to ORIGINAL_VALUE, the value provided by the user is returned, if the user value is similar to the slot values. If valueSelectionStrategy is set to TOP_RESOLUTION Amazon Lex returns the first value in the resolution list or, if there is no resolution list, null. If you don't specify a valueSelectionStrategy, the default is ORIGINAL_VALUE.
        public let slots: [String: String]?
        /// If the dialogState value is ElicitSlot, returns the name of the slot for which Amazon Lex is eliciting a value. 
        public let slotToElicit: String?

        public init(dialogState: DialogState? = nil, intentName: String? = nil, message: String? = nil, messageFormat: MessageFormatType? = nil, responseCard: ResponseCard? = nil, sentimentResponse: SentimentResponse? = nil, sessionAttributes: [String: String]? = nil, sessionId: String? = nil, slots: [String: String]? = nil, slotToElicit: String? = nil) {
            self.dialogState = dialogState
            self.intentName = intentName
            self.message = message
            self.messageFormat = messageFormat
            self.responseCard = responseCard
            self.sentimentResponse = sentimentResponse
            self.sessionAttributes = sessionAttributes
            self.sessionId = sessionId
            self.slots = slots
            self.slotToElicit = slotToElicit
        }

        private enum CodingKeys: String, CodingKey {
            case dialogState = "dialogState"
            case intentName = "intentName"
            case message = "message"
            case messageFormat = "messageFormat"
            case responseCard = "responseCard"
            case sentimentResponse = "sentimentResponse"
            case sessionAttributes = "sessionAttributes"
            case sessionId = "sessionId"
            case slots = "slots"
            case slotToElicit = "slotToElicit"
        }
    }

    public struct PutSessionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accept", location: .header(locationName: "Accept")), 
            AWSShapeMember(label: "botAlias", location: .uri(locationName: "botAlias")), 
            AWSShapeMember(label: "botName", location: .uri(locationName: "botName")), 
            AWSShapeMember(label: "userId", location: .uri(locationName: "userId"))
        ]

        /// The message that Amazon Lex returns in the response can be either text or speech based depending on the value of this field.   If the value is text/plain; charset=utf-8, Amazon Lex returns text in the response.   If the value begins with audio/, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech in the configuration that you specify. For example, if you specify audio/mpeg as the value, Amazon Lex returns speech in the MPEG format.   If the value is audio/pcm, the speech is returned as audio/pcm in 16-bit, little endian format.   The following are the accepted values:    audio/mpeg     audio/ogg     audio/pcm     audio/* (defaults to mpeg)    text/plain; charset=utf-8     
        public let accept: String?
        /// The alias in use for the bot that contains the session data.
        public let botAlias: String
        /// The name of the bot that contains the session data.
        public let botName: String
        /// Sets the next action that the bot should take to fulfill the conversation.
        public let dialogAction: DialogAction?
        /// A summary of the recent intents for the bot. You can use the intent summary view to set a checkpoint label on an intent and modify attributes of intents. You can also use it to remove or add intent summary objects to the list. An intent that you modify or add to the list must make sense for the bot. For example, the intent name must be valid for the bot. You must provide valid values for:    intentName    slot names    slotToElict    If you send the recentIntentSummaryView parameter in a PutSession request, the contents of the new summary view replaces the old summary view. For example, if a GetSession request returns three intents in the summary view and you call PutSession with one intent in the summary view, the next call to GetSession will only return one intent.
        public let recentIntentSummaryView: [IntentSummary]?
        /// Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.
        public let sessionAttributes: [String: String]?
        /// The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. 
        public let userId: String

        public init(accept: String? = nil, botAlias: String, botName: String, dialogAction: DialogAction? = nil, recentIntentSummaryView: [IntentSummary]? = nil, sessionAttributes: [String: String]? = nil, userId: String) {
            self.accept = accept
            self.botAlias = botAlias
            self.botName = botName
            self.dialogAction = dialogAction
            self.recentIntentSummaryView = recentIntentSummaryView
            self.sessionAttributes = sessionAttributes
            self.userId = userId
        }

        public func validate(name: String) throws {
            try self.dialogAction?.validate(name: "\(name).dialogAction")
            try self.recentIntentSummaryView?.forEach {
                try $0.validate(name: "\(name).recentIntentSummaryView[]")
            }
            try validate(self.recentIntentSummaryView, name:"recentIntentSummaryView", parent: name, max: 3)
            try validate(self.recentIntentSummaryView, name:"recentIntentSummaryView", parent: name, min: 0)
            try validate(self.userId, name:"userId", parent: name, max: 100)
            try validate(self.userId, name:"userId", parent: name, min: 2)
            try validate(self.userId, name:"userId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case accept = "Accept"
            case botAlias = "botAlias"
            case botName = "botName"
            case dialogAction = "dialogAction"
            case recentIntentSummaryView = "recentIntentSummaryView"
            case sessionAttributes = "sessionAttributes"
            case userId = "userId"
        }
    }

    public struct PutSessionResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "audioStream"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "audioStream", encoding: .blob), 
            AWSShapeMember(label: "contentType", location: .header(locationName: "Content-Type")), 
            AWSShapeMember(label: "dialogState", location: .header(locationName: "x-amz-lex-dialog-state")), 
            AWSShapeMember(label: "intentName", location: .header(locationName: "x-amz-lex-intent-name")), 
            AWSShapeMember(label: "message", location: .header(locationName: "x-amz-lex-message")), 
            AWSShapeMember(label: "messageFormat", location: .header(locationName: "x-amz-lex-message-format")), 
            AWSShapeMember(label: "sessionAttributes", location: .header(locationName: "x-amz-lex-session-attributes")), 
            AWSShapeMember(label: "sessionId", location: .header(locationName: "x-amz-lex-session-id")), 
            AWSShapeMember(label: "slots", location: .header(locationName: "x-amz-lex-slots")), 
            AWSShapeMember(label: "slotToElicit", location: .header(locationName: "x-amz-lex-slot-to-elicit"))
        ]

        /// The audio version of the message to convey to the user.
        public let audioStream: Data?
        /// Content type as specified in the Accept HTTP header in the request.
        public let contentType: String?
        ///     ConfirmIntent - Amazon Lex is expecting a "yes" or "no" response to confirm the intent before fulfilling an intent.    ElicitIntent - Amazon Lex wants to elicit the user's intent.    ElicitSlot - Amazon Lex is expecting the value of a slot for the current intent.    Failed - Conveys that the conversation with the user has failed. This can happen for various reasons, including the user does not provide an appropriate response to prompts from the service, or if the Lambda function fails to fulfill the intent.    Fulfilled - Conveys that the Lambda function has sucessfully fulfilled the intent.    ReadyForFulfillment - Conveys that the client has to fulfill the intent.  
        public let dialogState: DialogState?
        /// The name of the current intent.
        public let intentName: String?
        /// The next message that should be presented to the user.
        public let message: String?
        /// The format of the response message. One of the following values:    PlainText - The message contains plain UTF-8 text.    CustomPayload - The message is a custom format for the client.    SSML - The message contains text formatted for voice output.    Composite - The message contains an escaped JSON object containing one or more messages from the groups that messages were assigned to when the intent was created.  
        public let messageFormat: MessageFormatType?
        /// Map of key/value pairs representing session-specific context information.
        public let sessionAttributes: String?
        /// A unique identifier for the session.
        public let sessionId: String?
        /// Map of zero or more intent slots Amazon Lex detected from the user input during the conversation. Amazon Lex creates a resolution list containing likely values for a slot. The value that it returns is determined by the valueSelectionStrategy selected when the slot type was created or updated. If valueSelectionStrategy is set to ORIGINAL_VALUE, the value provided by the user is returned, if the user value is similar to the slot values. If valueSelectionStrategy is set to TOP_RESOLUTION Amazon Lex returns the first value in the resolution list or, if there is no resolution list, null. If you don't specify a valueSelectionStrategy the default is ORIGINAL_VALUE. 
        public let slots: String?
        /// If the dialogState is ElicitSlot, returns the name of the slot for which Amazon Lex is eliciting a value.
        public let slotToElicit: String?

        public init(audioStream: Data? = nil, contentType: String? = nil, dialogState: DialogState? = nil, intentName: String? = nil, message: String? = nil, messageFormat: MessageFormatType? = nil, sessionAttributes: String? = nil, sessionId: String? = nil, slots: String? = nil, slotToElicit: String? = nil) {
            self.audioStream = audioStream
            self.contentType = contentType
            self.dialogState = dialogState
            self.intentName = intentName
            self.message = message
            self.messageFormat = messageFormat
            self.sessionAttributes = sessionAttributes
            self.sessionId = sessionId
            self.slots = slots
            self.slotToElicit = slotToElicit
        }

        private enum CodingKeys: String, CodingKey {
            case audioStream = "audioStream"
            case contentType = "Content-Type"
            case dialogState = "x-amz-lex-dialog-state"
            case intentName = "x-amz-lex-intent-name"
            case message = "x-amz-lex-message"
            case messageFormat = "x-amz-lex-message-format"
            case sessionAttributes = "x-amz-lex-session-attributes"
            case sessionId = "x-amz-lex-session-id"
            case slots = "x-amz-lex-slots"
            case slotToElicit = "x-amz-lex-slot-to-elicit"
        }
    }

    public struct ResponseCard: AWSShape {

        /// The content type of the response.
        public let contentType: ContentType?
        /// An array of attachment objects representing options.
        public let genericAttachments: [GenericAttachment]?
        /// The version of the response card format.
        public let version: String?

        public init(contentType: ContentType? = nil, genericAttachments: [GenericAttachment]? = nil, version: String? = nil) {
            self.contentType = contentType
            self.genericAttachments = genericAttachments
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "contentType"
            case genericAttachments = "genericAttachments"
            case version = "version"
        }
    }

    public struct SentimentResponse: AWSShape {

        /// The inferred sentiment that Amazon Comprehend has the highest confidence in.
        public let sentimentLabel: String?
        /// The likelihood that the sentiment was correctly inferred.
        public let sentimentScore: String?

        public init(sentimentLabel: String? = nil, sentimentScore: String? = nil) {
            self.sentimentLabel = sentimentLabel
            self.sentimentScore = sentimentScore
        }

        private enum CodingKeys: String, CodingKey {
            case sentimentLabel = "sentimentLabel"
            case sentimentScore = "sentimentScore"
        }
    }
}
