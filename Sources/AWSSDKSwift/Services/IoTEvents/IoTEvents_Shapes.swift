//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension IoTEvents {
    //MARK: Enums

    public enum DetectorModelVersionStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case activating = "ACTIVATING"
        case inactive = "INACTIVE"
        case deprecated = "DEPRECATED"
        case draft = "DRAFT"
        case paused = "PAUSED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum EvaluationMethod: String, CustomStringConvertible, Codable {
        case batch = "BATCH"
        case serial = "SERIAL"
        public var description: String { return self.rawValue }
    }

    public enum InputStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case updating = "UPDATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public enum LoggingLevel: String, CustomStringConvertible, Codable {
        case error = "ERROR"
        case info = "INFO"
        case debug = "DEBUG"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct Action: AWSEncodableShape & AWSDecodableShape {

        /// Information needed to clear the timer.
        public let clearTimer: ClearTimerAction?
        /// Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
        public let firehose: FirehoseAction?
        /// Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.
        public let iotEvents: IotEventsAction?
        /// Publishes an MQTT message with the given topic to the AWS IoT message broker.
        public let iotTopicPublish: IotTopicPublishAction?
        /// Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.
        public let lambda: LambdaAction?
        /// Information needed to reset the timer.
        public let resetTimer: ResetTimerAction?
        /// Information needed to set the timer.
        public let setTimer: SetTimerAction?
        /// Sets a variable to a specified value.
        public let setVariable: SetVariableAction?
        /// Sends an Amazon SNS message.
        public let sns: SNSTopicPublishAction?
        /// Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue.
        public let sqs: SqsAction?

        public init(clearTimer: ClearTimerAction? = nil, firehose: FirehoseAction? = nil, iotEvents: IotEventsAction? = nil, iotTopicPublish: IotTopicPublishAction? = nil, lambda: LambdaAction? = nil, resetTimer: ResetTimerAction? = nil, setTimer: SetTimerAction? = nil, setVariable: SetVariableAction? = nil, sns: SNSTopicPublishAction? = nil, sqs: SqsAction? = nil) {
            self.clearTimer = clearTimer
            self.firehose = firehose
            self.iotEvents = iotEvents
            self.iotTopicPublish = iotTopicPublish
            self.lambda = lambda
            self.resetTimer = resetTimer
            self.setTimer = setTimer
            self.setVariable = setVariable
            self.sns = sns
            self.sqs = sqs
        }

        public func validate(name: String) throws {
            try self.clearTimer?.validate(name: "\(name).clearTimer")
            try self.firehose?.validate(name: "\(name).firehose")
            try self.iotEvents?.validate(name: "\(name).iotEvents")
            try self.iotTopicPublish?.validate(name: "\(name).iotTopicPublish")
            try self.lambda?.validate(name: "\(name).lambda")
            try self.resetTimer?.validate(name: "\(name).resetTimer")
            try self.setTimer?.validate(name: "\(name).setTimer")
            try self.setVariable?.validate(name: "\(name).setVariable")
            try self.sns?.validate(name: "\(name).sns")
        }

        private enum CodingKeys: String, CodingKey {
            case clearTimer = "clearTimer"
            case firehose = "firehose"
            case iotEvents = "iotEvents"
            case iotTopicPublish = "iotTopicPublish"
            case lambda = "lambda"
            case resetTimer = "resetTimer"
            case setTimer = "setTimer"
            case setVariable = "setVariable"
            case sns = "sns"
            case sqs = "sqs"
        }
    }

    public struct Attribute: AWSEncodableShape & AWSDecodableShape {

        /// An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to AWS IoT Events (BatchPutMessage). Each such message contains a JSON payload. The attribute (and its paired value) specified here are available for use in the condition expressions used by detectors.  Syntax: &lt;field-name&gt;.&lt;field-name&gt;... 
        public let jsonPath: String

        public init(jsonPath: String) {
            self.jsonPath = jsonPath
        }

        public func validate(name: String) throws {
            try validate(self.jsonPath, name:"jsonPath", parent: name, max: 128)
            try validate(self.jsonPath, name:"jsonPath", parent: name, min: 1)
            try validate(self.jsonPath, name:"jsonPath", parent: name, pattern: "^((`[\\w\\- ]+`)|([\\w\\-]+))(\\.((`[\\w- ]+`)|([\\w\\-]+)))*$")
        }

        private enum CodingKeys: String, CodingKey {
            case jsonPath = "jsonPath"
        }
    }

    public struct ClearTimerAction: AWSEncodableShape & AWSDecodableShape {

        /// The name of the timer to clear.
        public let timerName: String

        public init(timerName: String) {
            self.timerName = timerName
        }

        public func validate(name: String) throws {
            try validate(self.timerName, name:"timerName", parent: name, max: 128)
            try validate(self.timerName, name:"timerName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case timerName = "timerName"
        }
    }

    public struct CreateDetectorModelRequest: AWSEncodableShape {

        /// Information that defines how the detectors operate.
        public let detectorModelDefinition: DetectorModelDefinition
        /// A brief description of the detector model.
        public let detectorModelDescription: String?
        /// The name of the detector model.
        public let detectorModelName: String
        /// Information about the order in which events are evaluated and how actions are executed. 
        public let evaluationMethod: EvaluationMethod?
        /// The input attribute key used to identify a device or system to create a detector (an instance of the detector model) and then to route each input received to the appropriate detector (instance). This parameter uses a JSON-path expression in the message payload of each input to specify the attribute-value pair that is used to identify the device associated with the input.
        public let key: String?
        /// The ARN of the role that grants permission to AWS IoT Events to perform its operations.
        public let roleArn: String
        /// Metadata that can be used to manage the detector model.
        public let tags: [Tag]?

        public init(detectorModelDefinition: DetectorModelDefinition, detectorModelDescription: String? = nil, detectorModelName: String, evaluationMethod: EvaluationMethod? = nil, key: String? = nil, roleArn: String, tags: [Tag]? = nil) {
            self.detectorModelDefinition = detectorModelDefinition
            self.detectorModelDescription = detectorModelDescription
            self.detectorModelName = detectorModelName
            self.evaluationMethod = evaluationMethod
            self.key = key
            self.roleArn = roleArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.detectorModelDefinition.validate(name: "\(name).detectorModelDefinition")
            try validate(self.detectorModelDescription, name:"detectorModelDescription", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, min: 1)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, pattern: "^[a-zA-Z0-9_-]+$")
            try validate(self.key, name:"key", parent: name, max: 128)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.key, name:"key", parent: name, pattern: "^((`[\\w\\- ]+`)|([\\w\\-]+))(\\.((`[\\w- ]+`)|([\\w\\-]+)))*$")
            try validate(self.roleArn, name:"roleArn", parent: name, max: 2048)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 1)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelDefinition = "detectorModelDefinition"
            case detectorModelDescription = "detectorModelDescription"
            case detectorModelName = "detectorModelName"
            case evaluationMethod = "evaluationMethod"
            case key = "key"
            case roleArn = "roleArn"
            case tags = "tags"
        }
    }

    public struct CreateDetectorModelResponse: AWSDecodableShape {

        /// Information about how the detector model is configured.
        public let detectorModelConfiguration: DetectorModelConfiguration?

        public init(detectorModelConfiguration: DetectorModelConfiguration? = nil) {
            self.detectorModelConfiguration = detectorModelConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelConfiguration = "detectorModelConfiguration"
        }
    }

    public struct CreateInputRequest: AWSEncodableShape {

        /// The definition of the input.
        public let inputDefinition: InputDefinition
        /// A brief description of the input.
        public let inputDescription: String?
        /// The name you want to give to the input.
        public let inputName: String
        /// Metadata that can be used to manage the input.
        public let tags: [Tag]?

        public init(inputDefinition: InputDefinition, inputDescription: String? = nil, inputName: String, tags: [Tag]? = nil) {
            self.inputDefinition = inputDefinition
            self.inputDescription = inputDescription
            self.inputName = inputName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.inputDefinition.validate(name: "\(name).inputDefinition")
            try validate(self.inputDescription, name:"inputDescription", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, min: 1)
            try validate(self.inputName, name:"inputName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case inputDefinition = "inputDefinition"
            case inputDescription = "inputDescription"
            case inputName = "inputName"
            case tags = "tags"
        }
    }

    public struct CreateInputResponse: AWSDecodableShape {

        /// Information about the configuration of the input.
        public let inputConfiguration: InputConfiguration?

        public init(inputConfiguration: InputConfiguration? = nil) {
            self.inputConfiguration = inputConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case inputConfiguration = "inputConfiguration"
        }
    }

    public struct DeleteDetectorModelRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "detectorModelName", location: .uri(locationName: "detectorModelName"))
        ]

        /// The name of the detector model to be deleted.
        public let detectorModelName: String

        public init(detectorModelName: String) {
            self.detectorModelName = detectorModelName
        }

        public func validate(name: String) throws {
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, min: 1)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, pattern: "^[a-zA-Z0-9_-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteDetectorModelResponse: AWSDecodableShape {


        public init() {
        }

    }

    public struct DeleteInputRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "inputName", location: .uri(locationName: "inputName"))
        ]

        /// The name of the input to delete.
        public let inputName: String

        public init(inputName: String) {
            self.inputName = inputName
        }

        public func validate(name: String) throws {
            try validate(self.inputName, name:"inputName", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, min: 1)
            try validate(self.inputName, name:"inputName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteInputResponse: AWSDecodableShape {


        public init() {
        }

    }

    public struct DescribeDetectorModelRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "detectorModelName", location: .uri(locationName: "detectorModelName")), 
            AWSMemberEncoding(label: "detectorModelVersion", location: .querystring(locationName: "version"))
        ]

        /// The name of the detector model.
        public let detectorModelName: String
        /// The version of the detector model.
        public let detectorModelVersion: String?

        public init(detectorModelName: String, detectorModelVersion: String? = nil) {
            self.detectorModelName = detectorModelName
            self.detectorModelVersion = detectorModelVersion
        }

        public func validate(name: String) throws {
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, min: 1)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, pattern: "^[a-zA-Z0-9_-]+$")
            try validate(self.detectorModelVersion, name:"detectorModelVersion", parent: name, max: 128)
            try validate(self.detectorModelVersion, name:"detectorModelVersion", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeDetectorModelResponse: AWSDecodableShape {

        /// Information about the detector model.
        public let detectorModel: DetectorModel?

        public init(detectorModel: DetectorModel? = nil) {
            self.detectorModel = detectorModel
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModel = "detectorModel"
        }
    }

    public struct DescribeInputRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "inputName", location: .uri(locationName: "inputName"))
        ]

        /// The name of the input.
        public let inputName: String

        public init(inputName: String) {
            self.inputName = inputName
        }

        public func validate(name: String) throws {
            try validate(self.inputName, name:"inputName", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, min: 1)
            try validate(self.inputName, name:"inputName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeInputResponse: AWSDecodableShape {

        /// Information about the input.
        public let input: Input?

        public init(input: Input? = nil) {
            self.input = input
        }

        private enum CodingKeys: String, CodingKey {
            case input = "input"
        }
    }

    public struct DescribeLoggingOptionsRequest: AWSEncodableShape {


        public init() {
        }

    }

    public struct DescribeLoggingOptionsResponse: AWSDecodableShape {

        /// The current settings of the AWS IoT Events logging options.
        public let loggingOptions: LoggingOptions?

        public init(loggingOptions: LoggingOptions? = nil) {
            self.loggingOptions = loggingOptions
        }

        private enum CodingKeys: String, CodingKey {
            case loggingOptions = "loggingOptions"
        }
    }

    public struct DetectorDebugOption: AWSEncodableShape & AWSDecodableShape {

        /// The name of the detector model.
        public let detectorModelName: String
        /// The value of the input attribute key used to create the detector (the instance of the detector model).
        public let keyValue: String?

        public init(detectorModelName: String, keyValue: String? = nil) {
            self.detectorModelName = detectorModelName
            self.keyValue = keyValue
        }

        public func validate(name: String) throws {
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, min: 1)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, pattern: "^[a-zA-Z0-9_-]+$")
            try validate(self.keyValue, name:"keyValue", parent: name, max: 128)
            try validate(self.keyValue, name:"keyValue", parent: name, min: 1)
            try validate(self.keyValue, name:"keyValue", parent: name, pattern: "^[a-zA-Z0-9\\-_:]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelName = "detectorModelName"
            case keyValue = "keyValue"
        }
    }

    public struct DetectorModel: AWSDecodableShape {

        /// Information about how the detector is configured.
        public let detectorModelConfiguration: DetectorModelConfiguration?
        /// Information that defines how a detector operates.
        public let detectorModelDefinition: DetectorModelDefinition?

        public init(detectorModelConfiguration: DetectorModelConfiguration? = nil, detectorModelDefinition: DetectorModelDefinition? = nil) {
            self.detectorModelConfiguration = detectorModelConfiguration
            self.detectorModelDefinition = detectorModelDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelConfiguration = "detectorModelConfiguration"
            case detectorModelDefinition = "detectorModelDefinition"
        }
    }

    public struct DetectorModelConfiguration: AWSDecodableShape {

        /// The time the detector model was created.
        public let creationTime: TimeStamp?
        /// The ARN of the detector model.
        public let detectorModelArn: String?
        /// A brief description of the detector model.
        public let detectorModelDescription: String?
        /// The name of the detector model.
        public let detectorModelName: String?
        /// The version of the detector model.
        public let detectorModelVersion: String?
        /// Information about the order in which events are evaluated and how actions are executed. 
        public let evaluationMethod: EvaluationMethod?
        /// The input attribute key used to identify a device or system to create a detector (an instance of the detector model) and then to route each input received to the appropriate detector (instance). This parameter uses a JSON-path expression in the message payload of each input to specify the attribute-value pair that is used to identify the device associated with the input.
        public let key: String?
        /// The time the detector model was last updated.
        public let lastUpdateTime: TimeStamp?
        /// The ARN of the role that grants permission to AWS IoT Events to perform its operations.
        public let roleArn: String?
        /// The status of the detector model.
        public let status: DetectorModelVersionStatus?

        public init(creationTime: TimeStamp? = nil, detectorModelArn: String? = nil, detectorModelDescription: String? = nil, detectorModelName: String? = nil, detectorModelVersion: String? = nil, evaluationMethod: EvaluationMethod? = nil, key: String? = nil, lastUpdateTime: TimeStamp? = nil, roleArn: String? = nil, status: DetectorModelVersionStatus? = nil) {
            self.creationTime = creationTime
            self.detectorModelArn = detectorModelArn
            self.detectorModelDescription = detectorModelDescription
            self.detectorModelName = detectorModelName
            self.detectorModelVersion = detectorModelVersion
            self.evaluationMethod = evaluationMethod
            self.key = key
            self.lastUpdateTime = lastUpdateTime
            self.roleArn = roleArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case detectorModelArn = "detectorModelArn"
            case detectorModelDescription = "detectorModelDescription"
            case detectorModelName = "detectorModelName"
            case detectorModelVersion = "detectorModelVersion"
            case evaluationMethod = "evaluationMethod"
            case key = "key"
            case lastUpdateTime = "lastUpdateTime"
            case roleArn = "roleArn"
            case status = "status"
        }
    }

    public struct DetectorModelDefinition: AWSEncodableShape & AWSDecodableShape {

        /// The state that is entered at the creation of each detector (instance).
        public let initialStateName: String
        /// Information about the states of the detector.
        public let states: [State]

        public init(initialStateName: String, states: [State]) {
            self.initialStateName = initialStateName
            self.states = states
        }

        public func validate(name: String) throws {
            try validate(self.initialStateName, name:"initialStateName", parent: name, max: 128)
            try validate(self.initialStateName, name:"initialStateName", parent: name, min: 1)
            try self.states.forEach {
                try $0.validate(name: "\(name).states[]")
            }
            try validate(self.states, name:"states", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case initialStateName = "initialStateName"
            case states = "states"
        }
    }

    public struct DetectorModelSummary: AWSDecodableShape {

        /// The time the detector model was created.
        public let creationTime: TimeStamp?
        /// A brief description of the detector model.
        public let detectorModelDescription: String?
        /// The name of the detector model.
        public let detectorModelName: String?

        public init(creationTime: TimeStamp? = nil, detectorModelDescription: String? = nil, detectorModelName: String? = nil) {
            self.creationTime = creationTime
            self.detectorModelDescription = detectorModelDescription
            self.detectorModelName = detectorModelName
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case detectorModelDescription = "detectorModelDescription"
            case detectorModelName = "detectorModelName"
        }
    }

    public struct DetectorModelVersionSummary: AWSDecodableShape {

        /// The time the detector model version was created.
        public let creationTime: TimeStamp?
        /// The ARN of the detector model version.
        public let detectorModelArn: String?
        /// The name of the detector model.
        public let detectorModelName: String?
        /// The ID of the detector model version.
        public let detectorModelVersion: String?
        /// Information about the order in which events are evaluated and how actions are executed. 
        public let evaluationMethod: EvaluationMethod?
        /// The last time the detector model version was updated.
        public let lastUpdateTime: TimeStamp?
        /// The ARN of the role that grants the detector model permission to perform its tasks.
        public let roleArn: String?
        /// The status of the detector model version.
        public let status: DetectorModelVersionStatus?

        public init(creationTime: TimeStamp? = nil, detectorModelArn: String? = nil, detectorModelName: String? = nil, detectorModelVersion: String? = nil, evaluationMethod: EvaluationMethod? = nil, lastUpdateTime: TimeStamp? = nil, roleArn: String? = nil, status: DetectorModelVersionStatus? = nil) {
            self.creationTime = creationTime
            self.detectorModelArn = detectorModelArn
            self.detectorModelName = detectorModelName
            self.detectorModelVersion = detectorModelVersion
            self.evaluationMethod = evaluationMethod
            self.lastUpdateTime = lastUpdateTime
            self.roleArn = roleArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case detectorModelArn = "detectorModelArn"
            case detectorModelName = "detectorModelName"
            case detectorModelVersion = "detectorModelVersion"
            case evaluationMethod = "evaluationMethod"
            case lastUpdateTime = "lastUpdateTime"
            case roleArn = "roleArn"
            case status = "status"
        }
    }

    public struct Event: AWSEncodableShape & AWSDecodableShape {

        /// The actions to be performed.
        public let actions: [Action]?
        /// Optional. The Boolean expression that, when TRUE, causes the actions to be performed. If not present, the actions are performed (=TRUE). If the expression result is not a Boolean value, the actions are not performed (=FALSE).
        public let condition: String?
        /// The name of the event.
        public let eventName: String

        public init(actions: [Action]? = nil, condition: String? = nil, eventName: String) {
            self.actions = actions
            self.condition = condition
            self.eventName = eventName
        }

        public func validate(name: String) throws {
            try self.actions?.forEach {
                try $0.validate(name: "\(name).actions[]")
            }
            try validate(self.condition, name:"condition", parent: name, max: 512)
            try validate(self.eventName, name:"eventName", parent: name, max: 128)
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "actions"
            case condition = "condition"
            case eventName = "eventName"
        }
    }

    public struct FirehoseAction: AWSEncodableShape & AWSDecodableShape {

        /// The name of the Kinesis Data Firehose delivery stream where the data is written.
        public let deliveryStreamName: String
        /// A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
        public let separator: String?

        public init(deliveryStreamName: String, separator: String? = nil) {
            self.deliveryStreamName = deliveryStreamName
            self.separator = separator
        }

        public func validate(name: String) throws {
            try validate(self.separator, name:"separator", parent: name, pattern: "([\\n\\t])|(\\r\\n)|(,)")
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamName = "deliveryStreamName"
            case separator = "separator"
        }
    }

    public struct Input: AWSDecodableShape {

        /// Information about the configuration of an input.
        public let inputConfiguration: InputConfiguration?
        /// The definition of the input.
        public let inputDefinition: InputDefinition?

        public init(inputConfiguration: InputConfiguration? = nil, inputDefinition: InputDefinition? = nil) {
            self.inputConfiguration = inputConfiguration
            self.inputDefinition = inputDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case inputConfiguration = "inputConfiguration"
            case inputDefinition = "inputDefinition"
        }
    }

    public struct InputConfiguration: AWSDecodableShape {

        /// The time the input was created.
        public let creationTime: TimeStamp
        /// The ARN of the input.
        public let inputArn: String
        /// A brief description of the input.
        public let inputDescription: String?
        /// The name of the input.
        public let inputName: String
        /// The last time the input was updated.
        public let lastUpdateTime: TimeStamp
        /// The status of the input.
        public let status: InputStatus

        public init(creationTime: TimeStamp, inputArn: String, inputDescription: String? = nil, inputName: String, lastUpdateTime: TimeStamp, status: InputStatus) {
            self.creationTime = creationTime
            self.inputArn = inputArn
            self.inputDescription = inputDescription
            self.inputName = inputName
            self.lastUpdateTime = lastUpdateTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case inputArn = "inputArn"
            case inputDescription = "inputDescription"
            case inputName = "inputName"
            case lastUpdateTime = "lastUpdateTime"
            case status = "status"
        }
    }

    public struct InputDefinition: AWSEncodableShape & AWSDecodableShape {

        /// The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using BatchPutMessage. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the condition expressions used by detectors that monitor this input. 
        public let attributes: [Attribute]

        public init(attributes: [Attribute]) {
            self.attributes = attributes
        }

        public func validate(name: String) throws {
            try self.attributes.forEach {
                try $0.validate(name: "\(name).attributes[]")
            }
            try validate(self.attributes, name:"attributes", parent: name, max: 200)
            try validate(self.attributes, name:"attributes", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct InputSummary: AWSDecodableShape {

        /// The time the input was created.
        public let creationTime: TimeStamp?
        /// The ARN of the input.
        public let inputArn: String?
        /// A brief description of the input.
        public let inputDescription: String?
        /// The name of the input.
        public let inputName: String?
        /// The last time the input was updated.
        public let lastUpdateTime: TimeStamp?
        /// The status of the input.
        public let status: InputStatus?

        public init(creationTime: TimeStamp? = nil, inputArn: String? = nil, inputDescription: String? = nil, inputName: String? = nil, lastUpdateTime: TimeStamp? = nil, status: InputStatus? = nil) {
            self.creationTime = creationTime
            self.inputArn = inputArn
            self.inputDescription = inputDescription
            self.inputName = inputName
            self.lastUpdateTime = lastUpdateTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case inputArn = "inputArn"
            case inputDescription = "inputDescription"
            case inputName = "inputName"
            case lastUpdateTime = "lastUpdateTime"
            case status = "status"
        }
    }

    public struct IotEventsAction: AWSEncodableShape & AWSDecodableShape {

        /// The name of the AWS IoT Events input where the data is sent.
        public let inputName: String

        public init(inputName: String) {
            self.inputName = inputName
        }

        public func validate(name: String) throws {
            try validate(self.inputName, name:"inputName", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, min: 1)
            try validate(self.inputName, name:"inputName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case inputName = "inputName"
        }
    }

    public struct IotTopicPublishAction: AWSEncodableShape & AWSDecodableShape {

        /// The MQTT topic of the message. You can use a string expression that includes variables ($variable.&lt;variable-name&gt;) and input values ($input.&lt;input-name&gt;.&lt;path-to-datum&gt;) as the topic string.
        public let mqttTopic: String

        public init(mqttTopic: String) {
            self.mqttTopic = mqttTopic
        }

        public func validate(name: String) throws {
            try validate(self.mqttTopic, name:"mqttTopic", parent: name, max: 128)
            try validate(self.mqttTopic, name:"mqttTopic", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case mqttTopic = "mqttTopic"
        }
    }

    public struct LambdaAction: AWSEncodableShape & AWSDecodableShape {

        /// The ARN of the Lambda function that is executed.
        public let functionArn: String

        public init(functionArn: String) {
            self.functionArn = functionArn
        }

        public func validate(name: String) throws {
            try validate(self.functionArn, name:"functionArn", parent: name, max: 2048)
            try validate(self.functionArn, name:"functionArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case functionArn = "functionArn"
        }
    }

    public struct ListDetectorModelVersionsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "detectorModelName", location: .uri(locationName: "detectorModelName")), 
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken"))
        ]

        /// The name of the detector model whose versions are returned.
        public let detectorModelName: String
        /// The maximum number of results to return at one time.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(detectorModelName: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.detectorModelName = detectorModelName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, min: 1)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, pattern: "^[a-zA-Z0-9_-]+$")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 250)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDetectorModelVersionsResponse: AWSDecodableShape {

        /// Summary information about the detector model versions.
        public let detectorModelVersionSummaries: [DetectorModelVersionSummary]?
        /// A token to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(detectorModelVersionSummaries: [DetectorModelVersionSummary]? = nil, nextToken: String? = nil) {
            self.detectorModelVersionSummaries = detectorModelVersionSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelVersionSummaries = "detectorModelVersionSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListDetectorModelsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken"))
        ]

        /// The maximum number of results to return at one time.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 250)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDetectorModelsResponse: AWSDecodableShape {

        /// Summary information about the detector models.
        public let detectorModelSummaries: [DetectorModelSummary]?
        /// A token to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(detectorModelSummaries: [DetectorModelSummary]? = nil, nextToken: String? = nil) {
            self.detectorModelSummaries = detectorModelSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelSummaries = "detectorModelSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListInputsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")), 
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken"))
        ]

        /// The maximum number of results to return at one time.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 250)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListInputsResponse: AWSDecodableShape {

        /// Summary information about the inputs.
        public let inputSummaries: [InputSummary]?
        /// A token to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(inputSummaries: [InputSummary]? = nil, nextToken: String? = nil) {
            self.inputSummaries = inputSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case inputSummaries = "inputSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .querystring(locationName: "resourceArn"))
        ]

        /// The ARN of the resource.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, max: 2048)
            try validate(self.resourceArn, name:"resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {

        /// The list of tags assigned to the resource.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct LoggingOptions: AWSEncodableShape & AWSDecodableShape {

        /// Information that identifies those detector models and their detectors (instances) for which the logging level is given.
        public let detectorDebugOptions: [DetectorDebugOption]?
        /// If TRUE, logging is enabled for AWS IoT Events.
        public let enabled: Bool
        /// The logging level.
        public let level: LoggingLevel
        /// The ARN of the role that grants permission to AWS IoT Events to perform logging.
        public let roleArn: String

        public init(detectorDebugOptions: [DetectorDebugOption]? = nil, enabled: Bool, level: LoggingLevel, roleArn: String) {
            self.detectorDebugOptions = detectorDebugOptions
            self.enabled = enabled
            self.level = level
            self.roleArn = roleArn
        }

        public func validate(name: String) throws {
            try self.detectorDebugOptions?.forEach {
                try $0.validate(name: "\(name).detectorDebugOptions[]")
            }
            try validate(self.detectorDebugOptions, name:"detectorDebugOptions", parent: name, min: 1)
            try validate(self.roleArn, name:"roleArn", parent: name, max: 2048)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case detectorDebugOptions = "detectorDebugOptions"
            case enabled = "enabled"
            case level = "level"
            case roleArn = "roleArn"
        }
    }

    public struct OnEnterLifecycle: AWSEncodableShape & AWSDecodableShape {

        /// Specifies the actions that are performed when the state is entered and the condition is TRUE.
        public let events: [Event]?

        public init(events: [Event]? = nil) {
            self.events = events
        }

        public func validate(name: String) throws {
            try self.events?.forEach {
                try $0.validate(name: "\(name).events[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case events = "events"
        }
    }

    public struct OnExitLifecycle: AWSEncodableShape & AWSDecodableShape {

        /// Specifies the actions that are performed when the state is exited and the condition is TRUE.
        public let events: [Event]?

        public init(events: [Event]? = nil) {
            self.events = events
        }

        public func validate(name: String) throws {
            try self.events?.forEach {
                try $0.validate(name: "\(name).events[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case events = "events"
        }
    }

    public struct OnInputLifecycle: AWSEncodableShape & AWSDecodableShape {

        /// Specifies the actions performed when the condition evaluates to TRUE.
        public let events: [Event]?
        /// Specifies the actions performed, and the next state entered, when a condition evaluates to TRUE.
        public let transitionEvents: [TransitionEvent]?

        public init(events: [Event]? = nil, transitionEvents: [TransitionEvent]? = nil) {
            self.events = events
            self.transitionEvents = transitionEvents
        }

        public func validate(name: String) throws {
            try self.events?.forEach {
                try $0.validate(name: "\(name).events[]")
            }
            try self.transitionEvents?.forEach {
                try $0.validate(name: "\(name).transitionEvents[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case events = "events"
            case transitionEvents = "transitionEvents"
        }
    }

    public struct PutLoggingOptionsRequest: AWSEncodableShape {

        /// The new values of the AWS IoT Events logging options.
        public let loggingOptions: LoggingOptions

        public init(loggingOptions: LoggingOptions) {
            self.loggingOptions = loggingOptions
        }

        public func validate(name: String) throws {
            try self.loggingOptions.validate(name: "\(name).loggingOptions")
        }

        private enum CodingKeys: String, CodingKey {
            case loggingOptions = "loggingOptions"
        }
    }

    public struct ResetTimerAction: AWSEncodableShape & AWSDecodableShape {

        /// The name of the timer to reset.
        public let timerName: String

        public init(timerName: String) {
            self.timerName = timerName
        }

        public func validate(name: String) throws {
            try validate(self.timerName, name:"timerName", parent: name, max: 128)
            try validate(self.timerName, name:"timerName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case timerName = "timerName"
        }
    }

    public struct SNSTopicPublishAction: AWSEncodableShape & AWSDecodableShape {

        /// The ARN of the Amazon SNS target where the message is sent.
        public let targetArn: String

        public init(targetArn: String) {
            self.targetArn = targetArn
        }

        public func validate(name: String) throws {
            try validate(self.targetArn, name:"targetArn", parent: name, max: 2048)
            try validate(self.targetArn, name:"targetArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case targetArn = "targetArn"
        }
    }

    public struct SetTimerAction: AWSEncodableShape & AWSDecodableShape {

        /// The duration of the timer, in seconds. You can use a string expression that includes numbers, variables ($variable.&lt;variable-name&gt;), and input values ($input.&lt;input-name&gt;.&lt;path-to-datum&gt;) as the duration. The range of the duration is 1-31622400 seconds. To ensure accuracy, the minimum duration is 60 seconds. The evaluated result of the duration is rounded down to the nearest whole number. 
        public let durationExpression: String?
        /// The name of the timer.
        public let timerName: String

        public init(durationExpression: String? = nil, timerName: String) {
            self.durationExpression = durationExpression
            self.timerName = timerName
        }

        public func validate(name: String) throws {
            try validate(self.durationExpression, name:"durationExpression", parent: name, max: 1024)
            try validate(self.durationExpression, name:"durationExpression", parent: name, min: 1)
            try validate(self.timerName, name:"timerName", parent: name, max: 128)
            try validate(self.timerName, name:"timerName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case durationExpression = "durationExpression"
            case timerName = "timerName"
        }
    }

    public struct SetVariableAction: AWSEncodableShape & AWSDecodableShape {

        /// The new value of the variable.
        public let value: String
        /// The name of the variable.
        public let variableName: String

        public init(value: String, variableName: String) {
            self.value = value
            self.variableName = variableName
        }

        public func validate(name: String) throws {
            try validate(self.value, name:"value", parent: name, max: 1024)
            try validate(self.value, name:"value", parent: name, min: 1)
            try validate(self.variableName, name:"variableName", parent: name, max: 128)
            try validate(self.variableName, name:"variableName", parent: name, min: 1)
            try validate(self.variableName, name:"variableName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
            case variableName = "variableName"
        }
    }

    public struct SqsAction: AWSEncodableShape & AWSDecodableShape {

        /// The URL of the SQS queue where the data is written.
        public let queueUrl: String
        /// Set this to TRUE if you want the data to be base-64 encoded before it is written to the queue.
        public let useBase64: Bool?

        public init(queueUrl: String, useBase64: Bool? = nil) {
            self.queueUrl = queueUrl
            self.useBase64 = useBase64
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "queueUrl"
            case useBase64 = "useBase64"
        }
    }

    public struct State: AWSEncodableShape & AWSDecodableShape {

        /// When entering this state, perform these actions if the condition is TRUE.
        public let onEnter: OnEnterLifecycle?
        /// When exiting this state, perform these actions if the specified condition is TRUE.
        public let onExit: OnExitLifecycle?
        /// When an input is received and the condition is TRUE, perform the specified actions.
        public let onInput: OnInputLifecycle?
        /// The name of the state.
        public let stateName: String

        public init(onEnter: OnEnterLifecycle? = nil, onExit: OnExitLifecycle? = nil, onInput: OnInputLifecycle? = nil, stateName: String) {
            self.onEnter = onEnter
            self.onExit = onExit
            self.onInput = onInput
            self.stateName = stateName
        }

        public func validate(name: String) throws {
            try self.onEnter?.validate(name: "\(name).onEnter")
            try self.onExit?.validate(name: "\(name).onExit")
            try self.onInput?.validate(name: "\(name).onInput")
            try validate(self.stateName, name:"stateName", parent: name, max: 128)
            try validate(self.stateName, name:"stateName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case onEnter = "onEnter"
            case onExit = "onExit"
            case onInput = "onInput"
            case stateName = "stateName"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {

        /// The tag's key.
        public let key: String
        /// The tag's value.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.key, name:"key", parent: name, max: 128)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.value, name:"value", parent: name, max: 256)
            try validate(self.value, name:"value", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .querystring(locationName: "resourceArn"))
        ]

        /// The ARN of the resource.
        public let resourceArn: String
        /// The new or modified tags for the resource.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, max: 2048)
            try validate(self.resourceArn, name:"resourceArn", parent: name, min: 1)
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {


        public init() {
        }

    }

    public struct TransitionEvent: AWSEncodableShape & AWSDecodableShape {

        /// The actions to be performed.
        public let actions: [Action]?
        /// Required. A Boolean expression that when TRUE causes the actions to be performed and the nextState to be entered.
        public let condition: String
        /// The name of the transition event.
        public let eventName: String
        /// The next state to enter.
        public let nextState: String

        public init(actions: [Action]? = nil, condition: String, eventName: String, nextState: String) {
            self.actions = actions
            self.condition = condition
            self.eventName = eventName
            self.nextState = nextState
        }

        public func validate(name: String) throws {
            try self.actions?.forEach {
                try $0.validate(name: "\(name).actions[]")
            }
            try validate(self.condition, name:"condition", parent: name, max: 512)
            try validate(self.eventName, name:"eventName", parent: name, max: 128)
            try validate(self.nextState, name:"nextState", parent: name, max: 128)
            try validate(self.nextState, name:"nextState", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "actions"
            case condition = "condition"
            case eventName = "eventName"
            case nextState = "nextState"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .querystring(locationName: "resourceArn")), 
            AWSMemberEncoding(label: "tagKeys", location: .querystring(locationName: "tagKeys"))
        ]

        /// The ARN of the resource.
        public let resourceArn: String
        /// A list of the keys of the tags to be removed from the resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, max: 2048)
            try validate(self.resourceArn, name:"resourceArn", parent: name, min: 1)
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UntagResourceResponse: AWSDecodableShape {


        public init() {
        }

    }

    public struct UpdateDetectorModelRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "detectorModelName", location: .uri(locationName: "detectorModelName"))
        ]

        /// Information that defines how a detector operates.
        public let detectorModelDefinition: DetectorModelDefinition
        /// A brief description of the detector model.
        public let detectorModelDescription: String?
        /// The name of the detector model that is updated.
        public let detectorModelName: String
        /// Information about the order in which events are evaluated and how actions are executed. 
        public let evaluationMethod: EvaluationMethod?
        /// The ARN of the role that grants permission to AWS IoT Events to perform its operations.
        public let roleArn: String

        public init(detectorModelDefinition: DetectorModelDefinition, detectorModelDescription: String? = nil, detectorModelName: String, evaluationMethod: EvaluationMethod? = nil, roleArn: String) {
            self.detectorModelDefinition = detectorModelDefinition
            self.detectorModelDescription = detectorModelDescription
            self.detectorModelName = detectorModelName
            self.evaluationMethod = evaluationMethod
            self.roleArn = roleArn
        }

        public func validate(name: String) throws {
            try self.detectorModelDefinition.validate(name: "\(name).detectorModelDefinition")
            try validate(self.detectorModelDescription, name:"detectorModelDescription", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, min: 1)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, pattern: "^[a-zA-Z0-9_-]+$")
            try validate(self.roleArn, name:"roleArn", parent: name, max: 2048)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelDefinition = "detectorModelDefinition"
            case detectorModelDescription = "detectorModelDescription"
            case evaluationMethod = "evaluationMethod"
            case roleArn = "roleArn"
        }
    }

    public struct UpdateDetectorModelResponse: AWSDecodableShape {

        /// Information about how the detector model is configured.
        public let detectorModelConfiguration: DetectorModelConfiguration?

        public init(detectorModelConfiguration: DetectorModelConfiguration? = nil) {
            self.detectorModelConfiguration = detectorModelConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelConfiguration = "detectorModelConfiguration"
        }
    }

    public struct UpdateInputRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "inputName", location: .uri(locationName: "inputName"))
        ]

        /// The definition of the input.
        public let inputDefinition: InputDefinition
        /// A brief description of the input.
        public let inputDescription: String?
        /// The name of the input you want to update.
        public let inputName: String

        public init(inputDefinition: InputDefinition, inputDescription: String? = nil, inputName: String) {
            self.inputDefinition = inputDefinition
            self.inputDescription = inputDescription
            self.inputName = inputName
        }

        public func validate(name: String) throws {
            try self.inputDefinition.validate(name: "\(name).inputDefinition")
            try validate(self.inputDescription, name:"inputDescription", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, min: 1)
            try validate(self.inputName, name:"inputName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case inputDefinition = "inputDefinition"
            case inputDescription = "inputDescription"
        }
    }

    public struct UpdateInputResponse: AWSDecodableShape {

        /// Information about the configuration of the input.
        public let inputConfiguration: InputConfiguration?

        public init(inputConfiguration: InputConfiguration? = nil) {
            self.inputConfiguration = inputConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case inputConfiguration = "inputConfiguration"
        }
    }
}
