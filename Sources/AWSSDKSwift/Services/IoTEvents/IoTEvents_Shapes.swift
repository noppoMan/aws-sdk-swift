// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension IoTEvents {
    //MARK: Enums

    public enum DetectorModelVersionStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case activating = "ACTIVATING"
        case inactive = "INACTIVE"
        case deprecated = "DEPRECATED"
        case draft = "DRAFT"
        case paused = "PAUSED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum EvaluationMethod: String, CustomStringConvertible, Codable {
        case batch = "BATCH"
        case serial = "SERIAL"
        public var description: String { return self.rawValue }
    }

    public enum InputStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case updating = "UPDATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public enum LoggingLevel: String, CustomStringConvertible, Codable {
        case error = "ERROR"
        case info = "INFO"
        case debug = "DEBUG"
        public var description: String { return self.rawValue }
    }

    public enum PayloadType: String, CustomStringConvertible, Codable {
        case string = "STRING"
        case json = "JSON"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clearTimer", required: false, type: .structure), 
            AWSShapeMember(label: "dynamoDB", required: false, type: .structure), 
            AWSShapeMember(label: "dynamoDBv2", required: false, type: .structure), 
            AWSShapeMember(label: "firehose", required: false, type: .structure), 
            AWSShapeMember(label: "iotEvents", required: false, type: .structure), 
            AWSShapeMember(label: "iotSiteWise", required: false, type: .structure), 
            AWSShapeMember(label: "iotTopicPublish", required: false, type: .structure), 
            AWSShapeMember(label: "lambda", required: false, type: .structure), 
            AWSShapeMember(label: "resetTimer", required: false, type: .structure), 
            AWSShapeMember(label: "setTimer", required: false, type: .structure), 
            AWSShapeMember(label: "setVariable", required: false, type: .structure), 
            AWSShapeMember(label: "sns", required: false, type: .structure), 
            AWSShapeMember(label: "sqs", required: false, type: .structure)
        ]

        /// Information needed to clear the timer.
        public let clearTimer: ClearTimerAction?
        /// Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the payload. One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see Actions in AWS IoT Events Developer Guide.
        public let dynamoDB: DynamoDBAction?
        /// Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the payload. A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify. For more information, see Actions in AWS IoT Events Developer Guide.
        public let dynamoDBv2: DynamoDBv2Action?
        /// Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
        public let firehose: FirehoseAction?
        /// Sends AWS IoT Events input, which passes information about the detector model instance and the event that triggered the action.
        public let iotEvents: IotEventsAction?
        /// Sends information about the detector model instance and the event that triggered the action to an asset property in AWS IoT SiteWise .
        public let iotSiteWise: IotSiteWiseAction?
        /// Publishes an MQTT message with the given topic to the AWS IoT message broker.
        public let iotTopicPublish: IotTopicPublishAction?
        /// Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.
        public let lambda: LambdaAction?
        /// Information needed to reset the timer.
        public let resetTimer: ResetTimerAction?
        /// Information needed to set the timer.
        public let setTimer: SetTimerAction?
        /// Sets a variable to a specified value.
        public let setVariable: SetVariableAction?
        /// Sends an Amazon SNS message.
        public let sns: SNSTopicPublishAction?
        /// Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue.
        public let sqs: SqsAction?

        public init(clearTimer: ClearTimerAction? = nil, dynamoDB: DynamoDBAction? = nil, dynamoDBv2: DynamoDBv2Action? = nil, firehose: FirehoseAction? = nil, iotEvents: IotEventsAction? = nil, iotSiteWise: IotSiteWiseAction? = nil, iotTopicPublish: IotTopicPublishAction? = nil, lambda: LambdaAction? = nil, resetTimer: ResetTimerAction? = nil, setTimer: SetTimerAction? = nil, setVariable: SetVariableAction? = nil, sns: SNSTopicPublishAction? = nil, sqs: SqsAction? = nil) {
            self.clearTimer = clearTimer
            self.dynamoDB = dynamoDB
            self.dynamoDBv2 = dynamoDBv2
            self.firehose = firehose
            self.iotEvents = iotEvents
            self.iotSiteWise = iotSiteWise
            self.iotTopicPublish = iotTopicPublish
            self.lambda = lambda
            self.resetTimer = resetTimer
            self.setTimer = setTimer
            self.setVariable = setVariable
            self.sns = sns
            self.sqs = sqs
        }

        public func validate(name: String) throws {
            try self.clearTimer?.validate(name: "\(name).clearTimer")
            try self.dynamoDB?.validate(name: "\(name).dynamoDB")
            try self.dynamoDBv2?.validate(name: "\(name).dynamoDBv2")
            try self.firehose?.validate(name: "\(name).firehose")
            try self.iotEvents?.validate(name: "\(name).iotEvents")
            try self.iotTopicPublish?.validate(name: "\(name).iotTopicPublish")
            try self.lambda?.validate(name: "\(name).lambda")
            try self.resetTimer?.validate(name: "\(name).resetTimer")
            try self.setTimer?.validate(name: "\(name).setTimer")
            try self.setVariable?.validate(name: "\(name).setVariable")
            try self.sns?.validate(name: "\(name).sns")
            try self.sqs?.validate(name: "\(name).sqs")
        }

        private enum CodingKeys: String, CodingKey {
            case clearTimer = "clearTimer"
            case dynamoDB = "dynamoDB"
            case dynamoDBv2 = "dynamoDBv2"
            case firehose = "firehose"
            case iotEvents = "iotEvents"
            case iotSiteWise = "iotSiteWise"
            case iotTopicPublish = "iotTopicPublish"
            case lambda = "lambda"
            case resetTimer = "resetTimer"
            case setTimer = "setTimer"
            case setVariable = "setVariable"
            case sns = "sns"
            case sqs = "sqs"
        }
    }

    public struct AssetPropertyTimestamp: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "offsetInNanos", required: false, type: .string), 
            AWSShapeMember(label: "timeInSeconds", required: true, type: .string)
        ]

        /// The nanosecond offset converted from timeInSeconds. The valid range is between 0-999999999. You can also specify an expression.
        public let offsetInNanos: String?
        /// The timestamp, in seconds, in the Unix epoch format. The valid range is between 1-31556889864403199. You can also specify an expression.
        public let timeInSeconds: String

        public init(offsetInNanos: String? = nil, timeInSeconds: String) {
            self.offsetInNanos = offsetInNanos
            self.timeInSeconds = timeInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case offsetInNanos = "offsetInNanos"
            case timeInSeconds = "timeInSeconds"
        }
    }

    public struct AssetPropertyValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "quality", required: false, type: .string), 
            AWSShapeMember(label: "timestamp", required: false, type: .structure), 
            AWSShapeMember(label: "value", required: true, type: .structure)
        ]

        /// The quality of the asset property value. The value must be GOOD, BAD, or UNCERTAIN. You can also specify an expression.
        public let quality: String?
        /// The timestamp associated with the asset property value. The default is the current event time.
        public let timestamp: AssetPropertyTimestamp?
        /// The value to send to an asset property.
        public let value: AssetPropertyVariant

        public init(quality: String? = nil, timestamp: AssetPropertyTimestamp? = nil, value: AssetPropertyVariant) {
            self.quality = quality
            self.timestamp = timestamp
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case quality = "quality"
            case timestamp = "timestamp"
            case value = "value"
        }
    }

    public struct AssetPropertyVariant: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "booleanValue", required: false, type: .string), 
            AWSShapeMember(label: "doubleValue", required: false, type: .string), 
            AWSShapeMember(label: "integerValue", required: false, type: .string), 
            AWSShapeMember(label: "stringValue", required: false, type: .string)
        ]

        /// The asset property value is a Boolean value that must be TRUE or FALSE. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.
        public let booleanValue: String?
        /// The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.
        public let doubleValue: String?
        /// The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.
        public let integerValue: String?
        /// The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.
        public let stringValue: String?

        public init(booleanValue: String? = nil, doubleValue: String? = nil, integerValue: String? = nil, stringValue: String? = nil) {
            self.booleanValue = booleanValue
            self.doubleValue = doubleValue
            self.integerValue = integerValue
            self.stringValue = stringValue
        }

        private enum CodingKeys: String, CodingKey {
            case booleanValue = "booleanValue"
            case doubleValue = "doubleValue"
            case integerValue = "integerValue"
            case stringValue = "stringValue"
        }
    }

    public struct Attribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jsonPath", required: true, type: .string)
        ]

        /// An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to AWS IoT Events (BatchPutMessage). Each such message contains a JSON payload. The attribute (and its paired value) specified here are available for use in the condition expressions used by detectors.  Syntax: &lt;field-name&gt;.&lt;field-name&gt;... 
        public let jsonPath: String

        public init(jsonPath: String) {
            self.jsonPath = jsonPath
        }

        public func validate(name: String) throws {
            try validate(self.jsonPath, name:"jsonPath", parent: name, max: 128)
            try validate(self.jsonPath, name:"jsonPath", parent: name, min: 1)
            try validate(self.jsonPath, name:"jsonPath", parent: name, pattern: "^((`[\\w\\- ]+`)|([\\w\\-]+))(\\.((`[\\w- ]+`)|([\\w\\-]+)))*$")
        }

        private enum CodingKeys: String, CodingKey {
            case jsonPath = "jsonPath"
        }
    }

    public struct ClearTimerAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timerName", required: true, type: .string)
        ]

        /// The name of the timer to clear.
        public let timerName: String

        public init(timerName: String) {
            self.timerName = timerName
        }

        public func validate(name: String) throws {
            try validate(self.timerName, name:"timerName", parent: name, max: 128)
            try validate(self.timerName, name:"timerName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case timerName = "timerName"
        }
    }

    public struct CreateDetectorModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorModelDefinition", required: true, type: .structure), 
            AWSShapeMember(label: "detectorModelDescription", required: false, type: .string), 
            AWSShapeMember(label: "detectorModelName", required: true, type: .string), 
            AWSShapeMember(label: "evaluationMethod", required: false, type: .enum), 
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// Information that defines how the detectors operate.
        public let detectorModelDefinition: DetectorModelDefinition
        /// A brief description of the detector model.
        public let detectorModelDescription: String?
        /// The name of the detector model.
        public let detectorModelName: String
        /// Information about the order in which events are evaluated and how actions are executed. 
        public let evaluationMethod: EvaluationMethod?
        /// The input attribute key used to identify a device or system to create a detector (an instance of the detector model) and then to route each input received to the appropriate detector (instance). This parameter uses a JSON-path expression in the message payload of each input to specify the attribute-value pair that is used to identify the device associated with the input.
        public let key: String?
        /// The ARN of the role that grants permission to AWS IoT Events to perform its operations.
        public let roleArn: String
        /// Metadata that can be used to manage the detector model.
        public let tags: [Tag]?

        public init(detectorModelDefinition: DetectorModelDefinition, detectorModelDescription: String? = nil, detectorModelName: String, evaluationMethod: EvaluationMethod? = nil, key: String? = nil, roleArn: String, tags: [Tag]? = nil) {
            self.detectorModelDefinition = detectorModelDefinition
            self.detectorModelDescription = detectorModelDescription
            self.detectorModelName = detectorModelName
            self.evaluationMethod = evaluationMethod
            self.key = key
            self.roleArn = roleArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.detectorModelDefinition.validate(name: "\(name).detectorModelDefinition")
            try validate(self.detectorModelDescription, name:"detectorModelDescription", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, min: 1)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, pattern: "^[a-zA-Z0-9_-]+$")
            try validate(self.key, name:"key", parent: name, max: 128)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.key, name:"key", parent: name, pattern: "^((`[\\w\\- ]+`)|([\\w\\-]+))(\\.((`[\\w- ]+`)|([\\w\\-]+)))*$")
            try validate(self.roleArn, name:"roleArn", parent: name, max: 2048)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 1)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelDefinition = "detectorModelDefinition"
            case detectorModelDescription = "detectorModelDescription"
            case detectorModelName = "detectorModelName"
            case evaluationMethod = "evaluationMethod"
            case key = "key"
            case roleArn = "roleArn"
            case tags = "tags"
        }
    }

    public struct CreateDetectorModelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorModelConfiguration", required: false, type: .structure)
        ]

        /// Information about how the detector model is configured.
        public let detectorModelConfiguration: DetectorModelConfiguration?

        public init(detectorModelConfiguration: DetectorModelConfiguration? = nil) {
            self.detectorModelConfiguration = detectorModelConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelConfiguration = "detectorModelConfiguration"
        }
    }

    public struct CreateInputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inputDefinition", required: true, type: .structure), 
            AWSShapeMember(label: "inputDescription", required: false, type: .string), 
            AWSShapeMember(label: "inputName", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The definition of the input.
        public let inputDefinition: InputDefinition
        /// A brief description of the input.
        public let inputDescription: String?
        /// The name you want to give to the input.
        public let inputName: String
        /// Metadata that can be used to manage the input.
        public let tags: [Tag]?

        public init(inputDefinition: InputDefinition, inputDescription: String? = nil, inputName: String, tags: [Tag]? = nil) {
            self.inputDefinition = inputDefinition
            self.inputDescription = inputDescription
            self.inputName = inputName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.inputDefinition.validate(name: "\(name).inputDefinition")
            try validate(self.inputDescription, name:"inputDescription", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, min: 1)
            try validate(self.inputName, name:"inputName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case inputDefinition = "inputDefinition"
            case inputDescription = "inputDescription"
            case inputName = "inputName"
            case tags = "tags"
        }
    }

    public struct CreateInputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inputConfiguration", required: false, type: .structure)
        ]

        /// Information about the configuration of the input.
        public let inputConfiguration: InputConfiguration?

        public init(inputConfiguration: InputConfiguration? = nil) {
            self.inputConfiguration = inputConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case inputConfiguration = "inputConfiguration"
        }
    }

    public struct DeleteDetectorModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorModelName", location: .uri(locationName: "detectorModelName"), required: true, type: .string)
        ]

        /// The name of the detector model to be deleted.
        public let detectorModelName: String

        public init(detectorModelName: String) {
            self.detectorModelName = detectorModelName
        }

        public func validate(name: String) throws {
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, min: 1)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, pattern: "^[a-zA-Z0-9_-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelName = "detectorModelName"
        }
    }

    public struct DeleteDetectorModelResponse: AWSShape {


        public init() {
        }

    }

    public struct DeleteInputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inputName", location: .uri(locationName: "inputName"), required: true, type: .string)
        ]

        /// The name of the input to delete.
        public let inputName: String

        public init(inputName: String) {
            self.inputName = inputName
        }

        public func validate(name: String) throws {
            try validate(self.inputName, name:"inputName", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, min: 1)
            try validate(self.inputName, name:"inputName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case inputName = "inputName"
        }
    }

    public struct DeleteInputResponse: AWSShape {


        public init() {
        }

    }

    public struct DescribeDetectorModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorModelName", location: .uri(locationName: "detectorModelName"), required: true, type: .string), 
            AWSShapeMember(label: "detectorModelVersion", location: .querystring(locationName: "version"), required: false, type: .string)
        ]

        /// The name of the detector model.
        public let detectorModelName: String
        /// The version of the detector model.
        public let detectorModelVersion: String?

        public init(detectorModelName: String, detectorModelVersion: String? = nil) {
            self.detectorModelName = detectorModelName
            self.detectorModelVersion = detectorModelVersion
        }

        public func validate(name: String) throws {
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, min: 1)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, pattern: "^[a-zA-Z0-9_-]+$")
            try validate(self.detectorModelVersion, name:"detectorModelVersion", parent: name, max: 128)
            try validate(self.detectorModelVersion, name:"detectorModelVersion", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelName = "detectorModelName"
            case detectorModelVersion = "version"
        }
    }

    public struct DescribeDetectorModelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorModel", required: false, type: .structure)
        ]

        /// Information about the detector model.
        public let detectorModel: DetectorModel?

        public init(detectorModel: DetectorModel? = nil) {
            self.detectorModel = detectorModel
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModel = "detectorModel"
        }
    }

    public struct DescribeInputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inputName", location: .uri(locationName: "inputName"), required: true, type: .string)
        ]

        /// The name of the input.
        public let inputName: String

        public init(inputName: String) {
            self.inputName = inputName
        }

        public func validate(name: String) throws {
            try validate(self.inputName, name:"inputName", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, min: 1)
            try validate(self.inputName, name:"inputName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case inputName = "inputName"
        }
    }

    public struct DescribeInputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "input", required: false, type: .structure)
        ]

        /// Information about the input.
        public let input: Input?

        public init(input: Input? = nil) {
            self.input = input
        }

        private enum CodingKeys: String, CodingKey {
            case input = "input"
        }
    }

    public struct DescribeLoggingOptionsRequest: AWSShape {


        public init() {
        }

    }

    public struct DescribeLoggingOptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loggingOptions", required: false, type: .structure)
        ]

        /// The current settings of the AWS IoT Events logging options.
        public let loggingOptions: LoggingOptions?

        public init(loggingOptions: LoggingOptions? = nil) {
            self.loggingOptions = loggingOptions
        }

        private enum CodingKeys: String, CodingKey {
            case loggingOptions = "loggingOptions"
        }
    }

    public struct DetectorDebugOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorModelName", required: true, type: .string), 
            AWSShapeMember(label: "keyValue", required: false, type: .string)
        ]

        /// The name of the detector model.
        public let detectorModelName: String
        /// The value of the input attribute key used to create the detector (the instance of the detector model).
        public let keyValue: String?

        public init(detectorModelName: String, keyValue: String? = nil) {
            self.detectorModelName = detectorModelName
            self.keyValue = keyValue
        }

        public func validate(name: String) throws {
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, min: 1)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, pattern: "^[a-zA-Z0-9_-]+$")
            try validate(self.keyValue, name:"keyValue", parent: name, max: 128)
            try validate(self.keyValue, name:"keyValue", parent: name, min: 1)
            try validate(self.keyValue, name:"keyValue", parent: name, pattern: "^[a-zA-Z0-9\\-_:]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelName = "detectorModelName"
            case keyValue = "keyValue"
        }
    }

    public struct DetectorModel: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorModelConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "detectorModelDefinition", required: false, type: .structure)
        ]

        /// Information about how the detector is configured.
        public let detectorModelConfiguration: DetectorModelConfiguration?
        /// Information that defines how a detector operates.
        public let detectorModelDefinition: DetectorModelDefinition?

        public init(detectorModelConfiguration: DetectorModelConfiguration? = nil, detectorModelDefinition: DetectorModelDefinition? = nil) {
            self.detectorModelConfiguration = detectorModelConfiguration
            self.detectorModelDefinition = detectorModelDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelConfiguration = "detectorModelConfiguration"
            case detectorModelDefinition = "detectorModelDefinition"
        }
    }

    public struct DetectorModelConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "detectorModelArn", required: false, type: .string), 
            AWSShapeMember(label: "detectorModelDescription", required: false, type: .string), 
            AWSShapeMember(label: "detectorModelName", required: false, type: .string), 
            AWSShapeMember(label: "detectorModelVersion", required: false, type: .string), 
            AWSShapeMember(label: "evaluationMethod", required: false, type: .enum), 
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]

        /// The time the detector model was created.
        public let creationTime: TimeStamp?
        /// The ARN of the detector model.
        public let detectorModelArn: String?
        /// A brief description of the detector model.
        public let detectorModelDescription: String?
        /// The name of the detector model.
        public let detectorModelName: String?
        /// The version of the detector model.
        public let detectorModelVersion: String?
        /// Information about the order in which events are evaluated and how actions are executed. 
        public let evaluationMethod: EvaluationMethod?
        /// The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. AWS IoT Events can continue to route input to its corresponding detector instance based on this identifying information.  This parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.
        public let key: String?
        /// The time the detector model was last updated.
        public let lastUpdateTime: TimeStamp?
        /// The ARN of the role that grants permission to AWS IoT Events to perform its operations.
        public let roleArn: String?
        /// The status of the detector model.
        public let status: DetectorModelVersionStatus?

        public init(creationTime: TimeStamp? = nil, detectorModelArn: String? = nil, detectorModelDescription: String? = nil, detectorModelName: String? = nil, detectorModelVersion: String? = nil, evaluationMethod: EvaluationMethod? = nil, key: String? = nil, lastUpdateTime: TimeStamp? = nil, roleArn: String? = nil, status: DetectorModelVersionStatus? = nil) {
            self.creationTime = creationTime
            self.detectorModelArn = detectorModelArn
            self.detectorModelDescription = detectorModelDescription
            self.detectorModelName = detectorModelName
            self.detectorModelVersion = detectorModelVersion
            self.evaluationMethod = evaluationMethod
            self.key = key
            self.lastUpdateTime = lastUpdateTime
            self.roleArn = roleArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case detectorModelArn = "detectorModelArn"
            case detectorModelDescription = "detectorModelDescription"
            case detectorModelName = "detectorModelName"
            case detectorModelVersion = "detectorModelVersion"
            case evaluationMethod = "evaluationMethod"
            case key = "key"
            case lastUpdateTime = "lastUpdateTime"
            case roleArn = "roleArn"
            case status = "status"
        }
    }

    public struct DetectorModelDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "initialStateName", required: true, type: .string), 
            AWSShapeMember(label: "states", required: true, type: .list)
        ]

        /// The state that is entered at the creation of each detector (instance).
        public let initialStateName: String
        /// Information about the states of the detector.
        public let states: [State]

        public init(initialStateName: String, states: [State]) {
            self.initialStateName = initialStateName
            self.states = states
        }

        public func validate(name: String) throws {
            try validate(self.initialStateName, name:"initialStateName", parent: name, max: 128)
            try validate(self.initialStateName, name:"initialStateName", parent: name, min: 1)
            try self.states.forEach {
                try $0.validate(name: "\(name).states[]")
            }
            try validate(self.states, name:"states", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case initialStateName = "initialStateName"
            case states = "states"
        }
    }

    public struct DetectorModelSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "detectorModelDescription", required: false, type: .string), 
            AWSShapeMember(label: "detectorModelName", required: false, type: .string)
        ]

        /// The time the detector model was created.
        public let creationTime: TimeStamp?
        /// A brief description of the detector model.
        public let detectorModelDescription: String?
        /// The name of the detector model.
        public let detectorModelName: String?

        public init(creationTime: TimeStamp? = nil, detectorModelDescription: String? = nil, detectorModelName: String? = nil) {
            self.creationTime = creationTime
            self.detectorModelDescription = detectorModelDescription
            self.detectorModelName = detectorModelName
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case detectorModelDescription = "detectorModelDescription"
            case detectorModelName = "detectorModelName"
        }
    }

    public struct DetectorModelVersionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "detectorModelArn", required: false, type: .string), 
            AWSShapeMember(label: "detectorModelName", required: false, type: .string), 
            AWSShapeMember(label: "detectorModelVersion", required: false, type: .string), 
            AWSShapeMember(label: "evaluationMethod", required: false, type: .enum), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]

        /// The time the detector model version was created.
        public let creationTime: TimeStamp?
        /// The ARN of the detector model version.
        public let detectorModelArn: String?
        /// The name of the detector model.
        public let detectorModelName: String?
        /// The ID of the detector model version.
        public let detectorModelVersion: String?
        /// Information about the order in which events are evaluated and how actions are executed. 
        public let evaluationMethod: EvaluationMethod?
        /// The last time the detector model version was updated.
        public let lastUpdateTime: TimeStamp?
        /// The ARN of the role that grants the detector model permission to perform its tasks.
        public let roleArn: String?
        /// The status of the detector model version.
        public let status: DetectorModelVersionStatus?

        public init(creationTime: TimeStamp? = nil, detectorModelArn: String? = nil, detectorModelName: String? = nil, detectorModelVersion: String? = nil, evaluationMethod: EvaluationMethod? = nil, lastUpdateTime: TimeStamp? = nil, roleArn: String? = nil, status: DetectorModelVersionStatus? = nil) {
            self.creationTime = creationTime
            self.detectorModelArn = detectorModelArn
            self.detectorModelName = detectorModelName
            self.detectorModelVersion = detectorModelVersion
            self.evaluationMethod = evaluationMethod
            self.lastUpdateTime = lastUpdateTime
            self.roleArn = roleArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case detectorModelArn = "detectorModelArn"
            case detectorModelName = "detectorModelName"
            case detectorModelVersion = "detectorModelVersion"
            case evaluationMethod = "evaluationMethod"
            case lastUpdateTime = "lastUpdateTime"
            case roleArn = "roleArn"
            case status = "status"
        }
    }

    public struct DynamoDBAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "hashKeyField", required: true, type: .string), 
            AWSShapeMember(label: "hashKeyType", required: false, type: .string), 
            AWSShapeMember(label: "hashKeyValue", required: true, type: .string), 
            AWSShapeMember(label: "operation", required: false, type: .string), 
            AWSShapeMember(label: "payload", required: false, type: .structure), 
            AWSShapeMember(label: "payloadField", required: false, type: .string), 
            AWSShapeMember(label: "rangeKeyField", required: false, type: .string), 
            AWSShapeMember(label: "rangeKeyType", required: false, type: .string), 
            AWSShapeMember(label: "rangeKeyValue", required: false, type: .string), 
            AWSShapeMember(label: "tableName", required: true, type: .string)
        ]

        /// The name of the hash key (also called the partition key).
        public let hashKeyField: String
        /// The data type for the hash key (also called the partition key). You can specify the following values:    STRING - The hash key is a string.    NUMBER - The hash key is a number.   If you don't specify hashKeyType, the default value is STRING.
        public let hashKeyType: String?
        /// The value of the hash key (also called the partition key).
        public let hashKeyValue: String
        /// The type of operation to perform. You can specify the following values:     INSERT - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.    UPDATE - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.    DELETE - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.   If you don't specify this parameter, AWS IoT Events triggers the INSERT operation.
        public let operation: String?
        public let payload: Payload?
        /// The name of the DynamoDB column that receives the action payload. If you don't specify this parameter, the name of the DynamoDB column is payload.
        public let payloadField: String?
        /// The name of the range key (also called the sort key).
        public let rangeKeyField: String?
        /// The data type for the range key (also called the sort key), You can specify the following values:    STRING - The range key is a string.    NUMBER - The range key is number.   If you don't specify rangeKeyField, the default value is STRING.
        public let rangeKeyType: String?
        /// The value of the range key (also called the sort key).
        public let rangeKeyValue: String?
        /// The name of the DynamoDB table.
        public let tableName: String

        public init(hashKeyField: String, hashKeyType: String? = nil, hashKeyValue: String, operation: String? = nil, payload: Payload? = nil, payloadField: String? = nil, rangeKeyField: String? = nil, rangeKeyType: String? = nil, rangeKeyValue: String? = nil, tableName: String) {
            self.hashKeyField = hashKeyField
            self.hashKeyType = hashKeyType
            self.hashKeyValue = hashKeyValue
            self.operation = operation
            self.payload = payload
            self.payloadField = payloadField
            self.rangeKeyField = rangeKeyField
            self.rangeKeyType = rangeKeyType
            self.rangeKeyValue = rangeKeyValue
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.payload?.validate(name: "\(name).payload")
        }

        private enum CodingKeys: String, CodingKey {
            case hashKeyField = "hashKeyField"
            case hashKeyType = "hashKeyType"
            case hashKeyValue = "hashKeyValue"
            case operation = "operation"
            case payload = "payload"
            case payloadField = "payloadField"
            case rangeKeyField = "rangeKeyField"
            case rangeKeyType = "rangeKeyType"
            case rangeKeyValue = "rangeKeyValue"
            case tableName = "tableName"
        }
    }

    public struct DynamoDBv2Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payload", required: false, type: .structure), 
            AWSShapeMember(label: "tableName", required: true, type: .string)
        ]

        public let payload: Payload?
        /// The name of the DynamoDB table.
        public let tableName: String

        public init(payload: Payload? = nil, tableName: String) {
            self.payload = payload
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.payload?.validate(name: "\(name).payload")
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "payload"
            case tableName = "tableName"
        }
    }

    public struct Event: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actions", required: false, type: .list), 
            AWSShapeMember(label: "condition", required: false, type: .string), 
            AWSShapeMember(label: "eventName", required: true, type: .string)
        ]

        /// The actions to be performed.
        public let actions: [Action]?
        /// Optional. The Boolean expression that, when TRUE, causes the actions to be performed. If not present, the actions are performed (=TRUE). If the expression result is not a Boolean value, the actions are not performed (=FALSE).
        public let condition: String?
        /// The name of the event.
        public let eventName: String

        public init(actions: [Action]? = nil, condition: String? = nil, eventName: String) {
            self.actions = actions
            self.condition = condition
            self.eventName = eventName
        }

        public func validate(name: String) throws {
            try self.actions?.forEach {
                try $0.validate(name: "\(name).actions[]")
            }
            try validate(self.condition, name:"condition", parent: name, max: 512)
            try validate(self.eventName, name:"eventName", parent: name, max: 128)
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "actions"
            case condition = "condition"
            case eventName = "eventName"
        }
    }

    public struct FirehoseAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deliveryStreamName", required: true, type: .string), 
            AWSShapeMember(label: "payload", required: false, type: .structure), 
            AWSShapeMember(label: "separator", required: false, type: .string)
        ]

        /// The name of the Kinesis Data Firehose delivery stream where the data is written.
        public let deliveryStreamName: String
        /// You can configure the action payload when you send a message to an Amazon Kinesis Data Firehose delivery stream.
        public let payload: Payload?
        /// A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
        public let separator: String?

        public init(deliveryStreamName: String, payload: Payload? = nil, separator: String? = nil) {
            self.deliveryStreamName = deliveryStreamName
            self.payload = payload
            self.separator = separator
        }

        public func validate(name: String) throws {
            try self.payload?.validate(name: "\(name).payload")
            try validate(self.separator, name:"separator", parent: name, pattern: "([\\n\\t])|(\\r\\n)|(,)")
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamName = "deliveryStreamName"
            case payload = "payload"
            case separator = "separator"
        }
    }

    public struct Input: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inputConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "inputDefinition", required: false, type: .structure)
        ]

        /// Information about the configuration of an input.
        public let inputConfiguration: InputConfiguration?
        /// The definition of the input.
        public let inputDefinition: InputDefinition?

        public init(inputConfiguration: InputConfiguration? = nil, inputDefinition: InputDefinition? = nil) {
            self.inputConfiguration = inputConfiguration
            self.inputDefinition = inputDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case inputConfiguration = "inputConfiguration"
            case inputDefinition = "inputDefinition"
        }
    }

    public struct InputConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "inputArn", required: true, type: .string), 
            AWSShapeMember(label: "inputDescription", required: false, type: .string), 
            AWSShapeMember(label: "inputName", required: true, type: .string), 
            AWSShapeMember(label: "lastUpdateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "status", required: true, type: .enum)
        ]

        /// The time the input was created.
        public let creationTime: TimeStamp
        /// The ARN of the input.
        public let inputArn: String
        /// A brief description of the input.
        public let inputDescription: String?
        /// The name of the input.
        public let inputName: String
        /// The last time the input was updated.
        public let lastUpdateTime: TimeStamp
        /// The status of the input.
        public let status: InputStatus

        public init(creationTime: TimeStamp, inputArn: String, inputDescription: String? = nil, inputName: String, lastUpdateTime: TimeStamp, status: InputStatus) {
            self.creationTime = creationTime
            self.inputArn = inputArn
            self.inputDescription = inputDescription
            self.inputName = inputName
            self.lastUpdateTime = lastUpdateTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case inputArn = "inputArn"
            case inputDescription = "inputDescription"
            case inputName = "inputName"
            case lastUpdateTime = "lastUpdateTime"
            case status = "status"
        }
    }

    public struct InputDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: true, type: .list)
        ]

        /// The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using BatchPutMessage. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the condition expressions used by detectors that monitor this input. 
        public let attributes: [Attribute]

        public init(attributes: [Attribute]) {
            self.attributes = attributes
        }

        public func validate(name: String) throws {
            try self.attributes.forEach {
                try $0.validate(name: "\(name).attributes[]")
            }
            try validate(self.attributes, name:"attributes", parent: name, max: 200)
            try validate(self.attributes, name:"attributes", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct InputSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "inputArn", required: false, type: .string), 
            AWSShapeMember(label: "inputDescription", required: false, type: .string), 
            AWSShapeMember(label: "inputName", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]

        /// The time the input was created.
        public let creationTime: TimeStamp?
        /// The ARN of the input.
        public let inputArn: String?
        /// A brief description of the input.
        public let inputDescription: String?
        /// The name of the input.
        public let inputName: String?
        /// The last time the input was updated.
        public let lastUpdateTime: TimeStamp?
        /// The status of the input.
        public let status: InputStatus?

        public init(creationTime: TimeStamp? = nil, inputArn: String? = nil, inputDescription: String? = nil, inputName: String? = nil, lastUpdateTime: TimeStamp? = nil, status: InputStatus? = nil) {
            self.creationTime = creationTime
            self.inputArn = inputArn
            self.inputDescription = inputDescription
            self.inputName = inputName
            self.lastUpdateTime = lastUpdateTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case inputArn = "inputArn"
            case inputDescription = "inputDescription"
            case inputName = "inputName"
            case lastUpdateTime = "lastUpdateTime"
            case status = "status"
        }
    }

    public struct IotEventsAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inputName", required: true, type: .string), 
            AWSShapeMember(label: "payload", required: false, type: .structure)
        ]

        /// The name of the AWS IoT Events input where the data is sent.
        public let inputName: String
        /// You can configure the action payload when you send a message to an AWS IoT Events input.
        public let payload: Payload?

        public init(inputName: String, payload: Payload? = nil) {
            self.inputName = inputName
            self.payload = payload
        }

        public func validate(name: String) throws {
            try validate(self.inputName, name:"inputName", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, min: 1)
            try validate(self.inputName, name:"inputName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
            try self.payload?.validate(name: "\(name).payload")
        }

        private enum CodingKeys: String, CodingKey {
            case inputName = "inputName"
            case payload = "payload"
        }
    }

    public struct IotSiteWiseAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assetId", required: false, type: .string), 
            AWSShapeMember(label: "entryId", required: false, type: .string), 
            AWSShapeMember(label: "propertyAlias", required: false, type: .string), 
            AWSShapeMember(label: "propertyId", required: false, type: .string), 
            AWSShapeMember(label: "propertyValue", required: true, type: .structure)
        ]

        /// The ID of the asset that has the specified property. You can specify an expression.
        public let assetId: String?
        /// A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.
        public let entryId: String?
        /// The alias of the asset property. You can also specify an expression.
        public let propertyAlias: String?
        /// The ID of the asset property. You can specify an expression.
        public let propertyId: String?
        /// The value to send to the asset property. This value contains timestamp, quality, and value (TQV) information. 
        public let propertyValue: AssetPropertyValue

        public init(assetId: String? = nil, entryId: String? = nil, propertyAlias: String? = nil, propertyId: String? = nil, propertyValue: AssetPropertyValue) {
            self.assetId = assetId
            self.entryId = entryId
            self.propertyAlias = propertyAlias
            self.propertyId = propertyId
            self.propertyValue = propertyValue
        }

        private enum CodingKeys: String, CodingKey {
            case assetId = "assetId"
            case entryId = "entryId"
            case propertyAlias = "propertyAlias"
            case propertyId = "propertyId"
            case propertyValue = "propertyValue"
        }
    }

    public struct IotTopicPublishAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "mqttTopic", required: true, type: .string), 
            AWSShapeMember(label: "payload", required: false, type: .structure)
        ]

        /// The MQTT topic of the message. You can use a string expression that includes variables ($variable.&lt;variable-name&gt;) and input values ($input.&lt;input-name&gt;.&lt;path-to-datum&gt;) as the topic string.
        public let mqttTopic: String
        /// You can configure the action payload when you publish a message to an AWS IoT Core topic.
        public let payload: Payload?

        public init(mqttTopic: String, payload: Payload? = nil) {
            self.mqttTopic = mqttTopic
            self.payload = payload
        }

        public func validate(name: String) throws {
            try validate(self.mqttTopic, name:"mqttTopic", parent: name, max: 128)
            try validate(self.mqttTopic, name:"mqttTopic", parent: name, min: 1)
            try self.payload?.validate(name: "\(name).payload")
        }

        private enum CodingKeys: String, CodingKey {
            case mqttTopic = "mqttTopic"
            case payload = "payload"
        }
    }

    public struct LambdaAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "functionArn", required: true, type: .string), 
            AWSShapeMember(label: "payload", required: false, type: .structure)
        ]

        /// The ARN of the Lambda function that is executed.
        public let functionArn: String
        /// You can configure the action payload when you send a message to a Lambda function.
        public let payload: Payload?

        public init(functionArn: String, payload: Payload? = nil) {
            self.functionArn = functionArn
            self.payload = payload
        }

        public func validate(name: String) throws {
            try validate(self.functionArn, name:"functionArn", parent: name, max: 2048)
            try validate(self.functionArn, name:"functionArn", parent: name, min: 1)
            try self.payload?.validate(name: "\(name).payload")
        }

        private enum CodingKeys: String, CodingKey {
            case functionArn = "functionArn"
            case payload = "payload"
        }
    }

    public struct ListDetectorModelVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorModelName", location: .uri(locationName: "detectorModelName"), required: true, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        /// The name of the detector model whose versions are returned.
        public let detectorModelName: String
        /// The maximum number of results to return at one time.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(detectorModelName: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.detectorModelName = detectorModelName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, min: 1)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, pattern: "^[a-zA-Z0-9_-]+$")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 250)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelName = "detectorModelName"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListDetectorModelVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorModelVersionSummaries", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// Summary information about the detector model versions.
        public let detectorModelVersionSummaries: [DetectorModelVersionSummary]?
        /// A token to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(detectorModelVersionSummaries: [DetectorModelVersionSummary]? = nil, nextToken: String? = nil) {
            self.detectorModelVersionSummaries = detectorModelVersionSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelVersionSummaries = "detectorModelVersionSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListDetectorModelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        /// The maximum number of results to return at one time.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 250)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListDetectorModelsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorModelSummaries", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// Summary information about the detector models.
        public let detectorModelSummaries: [DetectorModelSummary]?
        /// A token to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(detectorModelSummaries: [DetectorModelSummary]? = nil, nextToken: String? = nil) {
            self.detectorModelSummaries = detectorModelSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelSummaries = "detectorModelSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListInputsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        /// The maximum number of results to return at one time.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 250)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListInputsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inputSummaries", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// Summary information about the inputs.
        public let inputSummaries: [InputSummary]?
        /// A token to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(inputSummaries: [InputSummary]? = nil, nextToken: String? = nil) {
            self.inputSummaries = inputSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case inputSummaries = "inputSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .querystring(locationName: "resourceArn"), required: true, type: .string)
        ]

        /// The ARN of the resource.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, max: 2048)
            try validate(self.resourceArn, name:"resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The list of tags assigned to the resource.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct LoggingOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorDebugOptions", required: false, type: .list), 
            AWSShapeMember(label: "enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "level", required: true, type: .enum), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]

        /// Information that identifies those detector models and their detectors (instances) for which the logging level is given.
        public let detectorDebugOptions: [DetectorDebugOption]?
        /// If TRUE, logging is enabled for AWS IoT Events.
        public let enabled: Bool
        /// The logging level.
        public let level: LoggingLevel
        /// The ARN of the role that grants permission to AWS IoT Events to perform logging.
        public let roleArn: String

        public init(detectorDebugOptions: [DetectorDebugOption]? = nil, enabled: Bool, level: LoggingLevel, roleArn: String) {
            self.detectorDebugOptions = detectorDebugOptions
            self.enabled = enabled
            self.level = level
            self.roleArn = roleArn
        }

        public func validate(name: String) throws {
            try self.detectorDebugOptions?.forEach {
                try $0.validate(name: "\(name).detectorDebugOptions[]")
            }
            try validate(self.detectorDebugOptions, name:"detectorDebugOptions", parent: name, min: 1)
            try validate(self.roleArn, name:"roleArn", parent: name, max: 2048)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case detectorDebugOptions = "detectorDebugOptions"
            case enabled = "enabled"
            case level = "level"
            case roleArn = "roleArn"
        }
    }

    public struct OnEnterLifecycle: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "events", required: false, type: .list)
        ]

        /// Specifies the actions that are performed when the state is entered and the condition is TRUE.
        public let events: [Event]?

        public init(events: [Event]? = nil) {
            self.events = events
        }

        public func validate(name: String) throws {
            try self.events?.forEach {
                try $0.validate(name: "\(name).events[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case events = "events"
        }
    }

    public struct OnExitLifecycle: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "events", required: false, type: .list)
        ]

        /// Specifies the actions that are performed when the state is exited and the condition is TRUE.
        public let events: [Event]?

        public init(events: [Event]? = nil) {
            self.events = events
        }

        public func validate(name: String) throws {
            try self.events?.forEach {
                try $0.validate(name: "\(name).events[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case events = "events"
        }
    }

    public struct OnInputLifecycle: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "events", required: false, type: .list), 
            AWSShapeMember(label: "transitionEvents", required: false, type: .list)
        ]

        /// Specifies the actions performed when the condition evaluates to TRUE.
        public let events: [Event]?
        /// Specifies the actions performed, and the next state entered, when a condition evaluates to TRUE.
        public let transitionEvents: [TransitionEvent]?

        public init(events: [Event]? = nil, transitionEvents: [TransitionEvent]? = nil) {
            self.events = events
            self.transitionEvents = transitionEvents
        }

        public func validate(name: String) throws {
            try self.events?.forEach {
                try $0.validate(name: "\(name).events[]")
            }
            try self.transitionEvents?.forEach {
                try $0.validate(name: "\(name).transitionEvents[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case events = "events"
            case transitionEvents = "transitionEvents"
        }
    }

    public struct Payload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "contentExpression", required: true, type: .string), 
            AWSShapeMember(label: "type", required: true, type: .enum)
        ]

        /// The content of the payload. You can use a string expression that includes quoted strings ('&lt;string&gt;'), variables ($variable.&lt;variable-name&gt;), input values ($input.&lt;input-name&gt;.&lt;path-to-datum&gt;), string concatenations, and quoted strings that contain ${} as the content. The recommended maximum size of a content expression is 1 KB.
        public let contentExpression: String
        /// The value of the payload type can be either STRING or JSON.
        public let `type`: PayloadType

        public init(contentExpression: String, type: PayloadType) {
            self.contentExpression = contentExpression
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try validate(self.contentExpression, name:"contentExpression", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case contentExpression = "contentExpression"
            case `type` = "type"
        }
    }

    public struct PutLoggingOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loggingOptions", required: true, type: .structure)
        ]

        /// The new values of the AWS IoT Events logging options.
        public let loggingOptions: LoggingOptions

        public init(loggingOptions: LoggingOptions) {
            self.loggingOptions = loggingOptions
        }

        public func validate(name: String) throws {
            try self.loggingOptions.validate(name: "\(name).loggingOptions")
        }

        private enum CodingKeys: String, CodingKey {
            case loggingOptions = "loggingOptions"
        }
    }

    public struct ResetTimerAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timerName", required: true, type: .string)
        ]

        /// The name of the timer to reset.
        public let timerName: String

        public init(timerName: String) {
            self.timerName = timerName
        }

        public func validate(name: String) throws {
            try validate(self.timerName, name:"timerName", parent: name, max: 128)
            try validate(self.timerName, name:"timerName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case timerName = "timerName"
        }
    }

    public struct SNSTopicPublishAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payload", required: false, type: .structure), 
            AWSShapeMember(label: "targetArn", required: true, type: .string)
        ]

        /// You can configure the action payload when you send a message as an Amazon SNS push notification.
        public let payload: Payload?
        /// The ARN of the Amazon SNS target where the message is sent.
        public let targetArn: String

        public init(payload: Payload? = nil, targetArn: String) {
            self.payload = payload
            self.targetArn = targetArn
        }

        public func validate(name: String) throws {
            try self.payload?.validate(name: "\(name).payload")
            try validate(self.targetArn, name:"targetArn", parent: name, max: 2048)
            try validate(self.targetArn, name:"targetArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "payload"
            case targetArn = "targetArn"
        }
    }

    public struct SetTimerAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "durationExpression", required: false, type: .string), 
            AWSShapeMember(label: "timerName", required: true, type: .string)
        ]

        /// The duration of the timer, in seconds. You can use a string expression that includes numbers, variables ($variable.&lt;variable-name&gt;), and input values ($input.&lt;input-name&gt;.&lt;path-to-datum&gt;) as the duration. The range of the duration is 1-31622400 seconds. To ensure accuracy, the minimum duration is 60 seconds. The evaluated result of the duration is rounded down to the nearest whole number. 
        public let durationExpression: String?
        /// The name of the timer.
        public let timerName: String

        public init(durationExpression: String? = nil, timerName: String) {
            self.durationExpression = durationExpression
            self.timerName = timerName
        }

        public func validate(name: String) throws {
            try validate(self.durationExpression, name:"durationExpression", parent: name, max: 1024)
            try validate(self.durationExpression, name:"durationExpression", parent: name, min: 1)
            try validate(self.timerName, name:"timerName", parent: name, max: 128)
            try validate(self.timerName, name:"timerName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case durationExpression = "durationExpression"
            case timerName = "timerName"
        }
    }

    public struct SetVariableAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "value", required: true, type: .string), 
            AWSShapeMember(label: "variableName", required: true, type: .string)
        ]

        /// The new value of the variable.
        public let value: String
        /// The name of the variable.
        public let variableName: String

        public init(value: String, variableName: String) {
            self.value = value
            self.variableName = variableName
        }

        public func validate(name: String) throws {
            try validate(self.value, name:"value", parent: name, max: 1024)
            try validate(self.value, name:"value", parent: name, min: 1)
            try validate(self.variableName, name:"variableName", parent: name, max: 128)
            try validate(self.variableName, name:"variableName", parent: name, min: 1)
            try validate(self.variableName, name:"variableName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
            case variableName = "variableName"
        }
    }

    public struct SqsAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payload", required: false, type: .structure), 
            AWSShapeMember(label: "queueUrl", required: true, type: .string), 
            AWSShapeMember(label: "useBase64", required: false, type: .boolean)
        ]

        /// You can configure the action payload when you send a message to an Amazon SQS queue.
        public let payload: Payload?
        /// The URL of the SQS queue where the data is written.
        public let queueUrl: String
        /// Set this to TRUE if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to FALSE.
        public let useBase64: Bool?

        public init(payload: Payload? = nil, queueUrl: String, useBase64: Bool? = nil) {
            self.payload = payload
            self.queueUrl = queueUrl
            self.useBase64 = useBase64
        }

        public func validate(name: String) throws {
            try self.payload?.validate(name: "\(name).payload")
        }

        private enum CodingKeys: String, CodingKey {
            case payload = "payload"
            case queueUrl = "queueUrl"
            case useBase64 = "useBase64"
        }
    }

    public struct State: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "onEnter", required: false, type: .structure), 
            AWSShapeMember(label: "onExit", required: false, type: .structure), 
            AWSShapeMember(label: "onInput", required: false, type: .structure), 
            AWSShapeMember(label: "stateName", required: true, type: .string)
        ]

        /// When entering this state, perform these actions if the condition is TRUE.
        public let onEnter: OnEnterLifecycle?
        /// When exiting this state, perform these actions if the specified condition is TRUE.
        public let onExit: OnExitLifecycle?
        /// When an input is received and the condition is TRUE, perform the specified actions.
        public let onInput: OnInputLifecycle?
        /// The name of the state.
        public let stateName: String

        public init(onEnter: OnEnterLifecycle? = nil, onExit: OnExitLifecycle? = nil, onInput: OnInputLifecycle? = nil, stateName: String) {
            self.onEnter = onEnter
            self.onExit = onExit
            self.onInput = onInput
            self.stateName = stateName
        }

        public func validate(name: String) throws {
            try self.onEnter?.validate(name: "\(name).onEnter")
            try self.onExit?.validate(name: "\(name).onExit")
            try self.onInput?.validate(name: "\(name).onInput")
            try validate(self.stateName, name:"stateName", parent: name, max: 128)
            try validate(self.stateName, name:"stateName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case onEnter = "onEnter"
            case onExit = "onExit"
            case onInput = "onInput"
            case stateName = "stateName"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]

        /// The tag's key.
        public let key: String
        /// The tag's value.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.key, name:"key", parent: name, max: 128)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.value, name:"value", parent: name, max: 256)
            try validate(self.value, name:"value", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .querystring(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]

        /// The ARN of the resource.
        public let resourceArn: String
        /// The new or modified tags for the resource.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, max: 2048)
            try validate(self.resourceArn, name:"resourceArn", parent: name, min: 1)
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct TransitionEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actions", required: false, type: .list), 
            AWSShapeMember(label: "condition", required: true, type: .string), 
            AWSShapeMember(label: "eventName", required: true, type: .string), 
            AWSShapeMember(label: "nextState", required: true, type: .string)
        ]

        /// The actions to be performed.
        public let actions: [Action]?
        /// Required. A Boolean expression that when TRUE causes the actions to be performed and the nextState to be entered.
        public let condition: String
        /// The name of the transition event.
        public let eventName: String
        /// The next state to enter.
        public let nextState: String

        public init(actions: [Action]? = nil, condition: String, eventName: String, nextState: String) {
            self.actions = actions
            self.condition = condition
            self.eventName = eventName
            self.nextState = nextState
        }

        public func validate(name: String) throws {
            try self.actions?.forEach {
                try $0.validate(name: "\(name).actions[]")
            }
            try validate(self.condition, name:"condition", parent: name, max: 512)
            try validate(self.eventName, name:"eventName", parent: name, max: 128)
            try validate(self.nextState, name:"nextState", parent: name, max: 128)
            try validate(self.nextState, name:"nextState", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "actions"
            case condition = "condition"
            case eventName = "eventName"
            case nextState = "nextState"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .querystring(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "tagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list)
        ]

        /// The ARN of the resource.
        public let resourceArn: String
        /// A list of the keys of the tags to be removed from the resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, max: 2048)
            try validate(self.resourceArn, name:"resourceArn", parent: name, min: 1)
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UntagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateDetectorModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorModelDefinition", required: true, type: .structure), 
            AWSShapeMember(label: "detectorModelDescription", required: false, type: .string), 
            AWSShapeMember(label: "detectorModelName", location: .uri(locationName: "detectorModelName"), required: true, type: .string), 
            AWSShapeMember(label: "evaluationMethod", required: false, type: .enum), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]

        /// Information that defines how a detector operates.
        public let detectorModelDefinition: DetectorModelDefinition
        /// A brief description of the detector model.
        public let detectorModelDescription: String?
        /// The name of the detector model that is updated.
        public let detectorModelName: String
        /// Information about the order in which events are evaluated and how actions are executed. 
        public let evaluationMethod: EvaluationMethod?
        /// The ARN of the role that grants permission to AWS IoT Events to perform its operations.
        public let roleArn: String

        public init(detectorModelDefinition: DetectorModelDefinition, detectorModelDescription: String? = nil, detectorModelName: String, evaluationMethod: EvaluationMethod? = nil, roleArn: String) {
            self.detectorModelDefinition = detectorModelDefinition
            self.detectorModelDescription = detectorModelDescription
            self.detectorModelName = detectorModelName
            self.evaluationMethod = evaluationMethod
            self.roleArn = roleArn
        }

        public func validate(name: String) throws {
            try self.detectorModelDefinition.validate(name: "\(name).detectorModelDefinition")
            try validate(self.detectorModelDescription, name:"detectorModelDescription", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, max: 128)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, min: 1)
            try validate(self.detectorModelName, name:"detectorModelName", parent: name, pattern: "^[a-zA-Z0-9_-]+$")
            try validate(self.roleArn, name:"roleArn", parent: name, max: 2048)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelDefinition = "detectorModelDefinition"
            case detectorModelDescription = "detectorModelDescription"
            case detectorModelName = "detectorModelName"
            case evaluationMethod = "evaluationMethod"
            case roleArn = "roleArn"
        }
    }

    public struct UpdateDetectorModelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorModelConfiguration", required: false, type: .structure)
        ]

        /// Information about how the detector model is configured.
        public let detectorModelConfiguration: DetectorModelConfiguration?

        public init(detectorModelConfiguration: DetectorModelConfiguration? = nil) {
            self.detectorModelConfiguration = detectorModelConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case detectorModelConfiguration = "detectorModelConfiguration"
        }
    }

    public struct UpdateInputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inputDefinition", required: true, type: .structure), 
            AWSShapeMember(label: "inputDescription", required: false, type: .string), 
            AWSShapeMember(label: "inputName", location: .uri(locationName: "inputName"), required: true, type: .string)
        ]

        /// The definition of the input.
        public let inputDefinition: InputDefinition
        /// A brief description of the input.
        public let inputDescription: String?
        /// The name of the input you want to update.
        public let inputName: String

        public init(inputDefinition: InputDefinition, inputDescription: String? = nil, inputName: String) {
            self.inputDefinition = inputDefinition
            self.inputDescription = inputDescription
            self.inputName = inputName
        }

        public func validate(name: String) throws {
            try self.inputDefinition.validate(name: "\(name).inputDefinition")
            try validate(self.inputDescription, name:"inputDescription", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, max: 128)
            try validate(self.inputName, name:"inputName", parent: name, min: 1)
            try validate(self.inputName, name:"inputName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case inputDefinition = "inputDefinition"
            case inputDescription = "inputDescription"
            case inputName = "inputName"
        }
    }

    public struct UpdateInputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inputConfiguration", required: false, type: .structure)
        ]

        /// Information about the configuration of the input.
        public let inputConfiguration: InputConfiguration?

        public init(inputConfiguration: InputConfiguration? = nil) {
            self.inputConfiguration = inputConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case inputConfiguration = "inputConfiguration"
        }
    }
}
