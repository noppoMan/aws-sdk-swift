//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import AWSSDKSwiftCore
import Logging

//MARK: Paginators

extension MediaPackageVod {

    ///  Returns a collection of MediaPackage VOD Asset resources.
    public func listAssetsPaginator(
        _ input: ListAssetsRequest,
        on eventLoop: EventLoop? = nil,
        logger: Logging.Logger = AWSClient.loggingDisabled,
        onPage: @escaping (ListAssetsResponse, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listAssets, tokenKey: \ListAssetsResponse.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Returns a collection of MediaPackage VOD PackagingConfiguration resources.
    public func listPackagingConfigurationsPaginator(
        _ input: ListPackagingConfigurationsRequest,
        on eventLoop: EventLoop? = nil,
        logger: Logging.Logger = AWSClient.loggingDisabled,
        onPage: @escaping (ListPackagingConfigurationsResponse, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listPackagingConfigurations, tokenKey: \ListPackagingConfigurationsResponse.nextToken, on: eventLoop, onPage: onPage)
    }

    ///  Returns a collection of MediaPackage VOD PackagingGroup resources.
    public func listPackagingGroupsPaginator(
        _ input: ListPackagingGroupsRequest,
        on eventLoop: EventLoop? = nil,
        logger: Logging.Logger = AWSClient.loggingDisabled,
        onPage: @escaping (ListPackagingGroupsResponse, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listPackagingGroups, tokenKey: \ListPackagingGroupsResponse.nextToken, on: eventLoop, onPage: onPage)
    }

}

extension MediaPackageVod.ListAssetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MediaPackageVod.ListAssetsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            packagingGroupId: self.packagingGroupId
        )

    }
}

extension MediaPackageVod.ListPackagingConfigurationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MediaPackageVod.ListPackagingConfigurationsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            packagingGroupId: self.packagingGroupId
        )

    }
}

extension MediaPackageVod.ListPackagingGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MediaPackageVod.ListPackagingGroupsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )

    }
}


