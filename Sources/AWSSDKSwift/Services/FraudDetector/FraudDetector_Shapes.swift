// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension FraudDetector {
    //MARK: Enums

    public enum DataSource: String, CustomStringConvertible, Codable {
        case event = "EVENT"
        case modelScore = "MODEL_SCORE"
        case externalModelScore = "EXTERNAL_MODEL_SCORE"
        public var description: String { return self.rawValue }
    }

    public enum DataType: String, CustomStringConvertible, Codable {
        case string = "STRING"
        case integer = "INTEGER"
        case float = "FLOAT"
        case boolean = "BOOLEAN"
        public var description: String { return self.rawValue }
    }

    public enum DetectorVersionStatus: String, CustomStringConvertible, Codable {
        case draft = "DRAFT"
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum Language: String, CustomStringConvertible, Codable {
        case detectorpl = "DETECTORPL"
        public var description: String { return self.rawValue }
    }

    public enum ModelEndpointStatus: String, CustomStringConvertible, Codable {
        case associated = "ASSOCIATED"
        case dissociated = "DISSOCIATED"
        public var description: String { return self.rawValue }
    }

    public enum ModelInputDataFormat: String, CustomStringConvertible, Codable {
        case textCsv = "TEXT_CSV"
        case applicationJson = "APPLICATION_JSON"
        public var description: String { return self.rawValue }
    }

    public enum ModelOutputDataFormat: String, CustomStringConvertible, Codable {
        case textCsv = "TEXT_CSV"
        case applicationJsonlines = "APPLICATION_JSONLINES"
        public var description: String { return self.rawValue }
    }

    public enum ModelSource: String, CustomStringConvertible, Codable {
        case sagemaker = "SAGEMAKER"
        public var description: String { return self.rawValue }
    }

    public enum ModelTypeEnum: String, CustomStringConvertible, Codable {
        case onlineFraudInsights = "ONLINE_FRAUD_INSIGHTS"
        public var description: String { return self.rawValue }
    }

    public enum ModelVersionStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum RuleExecutionMode: String, CustomStringConvertible, Codable {
        case allMatched = "ALL_MATCHED"
        case firstMatched = "FIRST_MATCHED"
        public var description: String { return self.rawValue }
    }

    public enum TrainingDataSourceEnum: String, CustomStringConvertible, Codable {
        case externalEvents = "EXTERNAL_EVENTS"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct BatchCreateVariableError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "code", required: false, type: .integer), 
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]

        /// The error code. 
        public let code: Int?
        /// The error message.
        public let message: String?
        /// The name.
        public let name: String?

        public init(code: Int? = nil, message: String? = nil, name: String? = nil) {
            self.code = code
            self.message = message
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
            case name = "name"
        }
    }

    public struct BatchCreateVariableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "variableEntries", required: true, type: .list)
        ]

        /// A collection of key and value pairs.
        public let tags: [Tag]?
        /// The list of variables for the batch create variable request.
        public let variableEntries: [VariableEntry]

        public init(tags: [Tag]? = nil, variableEntries: [VariableEntry]) {
            self.tags = tags
            self.variableEntries = variableEntries
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
            try validate(self.variableEntries, name:"variableEntries", parent: name, max: 25)
            try validate(self.variableEntries, name:"variableEntries", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case variableEntries = "variableEntries"
        }
    }

    public struct BatchCreateVariableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "errors", required: false, type: .list)
        ]

        /// Provides the errors for the BatchCreateVariable request.
        public let errors: [BatchCreateVariableError]?

        public init(errors: [BatchCreateVariableError]? = nil) {
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "errors"
        }
    }

    public struct BatchGetVariableError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "code", required: false, type: .integer), 
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]

        /// The error code. 
        public let code: Int?
        /// The error message.
        public let message: String?
        /// The error name. 
        public let name: String?

        public init(code: Int? = nil, message: String? = nil, name: String? = nil) {
            self.code = code
            self.message = message
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
            case name = "name"
        }
    }

    public struct BatchGetVariableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "names", required: true, type: .list)
        ]

        /// The list of variable names to get.
        public let names: [String]

        public init(names: [String]) {
            self.names = names
        }

        public func validate(name: String) throws {
            try validate(self.names, name:"names", parent: name, max: 100)
            try validate(self.names, name:"names", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case names = "names"
        }
    }

    public struct BatchGetVariableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "errors", required: false, type: .list), 
            AWSShapeMember(label: "variables", required: false, type: .list)
        ]

        /// The errors from the request.
        public let errors: [BatchGetVariableError]?
        /// The returned variables.
        public let variables: [Variable]?

        public init(errors: [BatchGetVariableError]? = nil, variables: [Variable]? = nil) {
            self.errors = errors
            self.variables = variables
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "errors"
            case variables = "variables"
        }
    }

    public struct CreateDetectorVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "detectorId", required: true, type: .string), 
            AWSShapeMember(label: "externalModelEndpoints", required: false, type: .list), 
            AWSShapeMember(label: "modelVersions", required: false, type: .list), 
            AWSShapeMember(label: "ruleExecutionMode", required: false, type: .enum), 
            AWSShapeMember(label: "rules", required: true, type: .list), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The description of the detector version.
        public let description: String?
        /// The ID of the detector under which you want to create a new version.
        public let detectorId: String
        /// The Amazon Sagemaker model endpoints to include in the detector version.
        public let externalModelEndpoints: [String]?
        /// The model versions to include in the detector version.
        public let modelVersions: [ModelVersion]?
        /// The rule execution mode for the rules included in the detector version. You can define and edit the rule mode at the detector version level, when it is in draft status. If you specify FIRST_MATCHED, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule. If you specifiy ALL_MATCHED, Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules.  The default behavior is FIRST_MATCHED.
        public let ruleExecutionMode: RuleExecutionMode?
        /// The rules to include in the detector version.
        public let rules: [Rule]
        /// A collection of key and value pairs.
        public let tags: [Tag]?

        public init(description: String? = nil, detectorId: String, externalModelEndpoints: [String]? = nil, modelVersions: [ModelVersion]? = nil, ruleExecutionMode: RuleExecutionMode? = nil, rules: [Rule], tags: [Tag]? = nil) {
            self.description = description
            self.detectorId = detectorId
            self.externalModelEndpoints = externalModelEndpoints
            self.modelVersions = modelVersions
            self.ruleExecutionMode = ruleExecutionMode
            self.rules = rules
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 128)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, max: 64)
            try validate(self.detectorId, name:"detectorId", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, pattern: "^[0-9a-z_-]+$")
            try self.modelVersions?.forEach {
                try $0.validate(name: "\(name).modelVersions[]")
            }
            try self.rules.forEach {
                try $0.validate(name: "\(name).rules[]")
            }
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case detectorId = "detectorId"
            case externalModelEndpoints = "externalModelEndpoints"
            case modelVersions = "modelVersions"
            case ruleExecutionMode = "ruleExecutionMode"
            case rules = "rules"
            case tags = "tags"
        }
    }

    public struct CreateDetectorVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorId", required: false, type: .string), 
            AWSShapeMember(label: "detectorVersionId", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]

        /// The ID for the created version's parent detector.
        public let detectorId: String?
        /// The ID for the created detector. 
        public let detectorVersionId: String?
        /// The status of the detector version.
        public let status: DetectorVersionStatus?

        public init(detectorId: String? = nil, detectorVersionId: String? = nil, status: DetectorVersionStatus? = nil) {
            self.detectorId = detectorId
            self.detectorVersionId = detectorVersionId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case detectorVersionId = "detectorVersionId"
            case status = "status"
        }
    }

    public struct CreateModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "eventTypeName", required: true, type: .string), 
            AWSShapeMember(label: "modelId", required: true, type: .string), 
            AWSShapeMember(label: "modelType", required: true, type: .enum), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The model description. 
        public let description: String?
        /// The name of the event type.
        public let eventTypeName: String
        /// The model ID.
        public let modelId: String
        /// The model type. 
        public let modelType: ModelTypeEnum
        /// A collection of key and value pairs.
        public let tags: [Tag]?

        public init(description: String? = nil, eventTypeName: String, modelId: String, modelType: ModelTypeEnum, tags: [Tag]? = nil) {
            self.description = description
            self.eventTypeName = eventTypeName
            self.modelId = modelId
            self.modelType = modelType
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 128)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.modelId, name:"modelId", parent: name, max: 64)
            try validate(self.modelId, name:"modelId", parent: name, min: 1)
            try validate(self.modelId, name:"modelId", parent: name, pattern: "^[0-9a-z_]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case eventTypeName = "eventTypeName"
            case modelId = "modelId"
            case modelType = "modelType"
            case tags = "tags"
        }
    }

    public struct CreateModelResult: AWSShape {


        public init() {
        }

    }

    public struct CreateModelVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "externalEventsDetail", required: false, type: .structure), 
            AWSShapeMember(label: "modelId", required: true, type: .string), 
            AWSShapeMember(label: "modelType", required: true, type: .enum), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "trainingDataSchema", required: true, type: .structure), 
            AWSShapeMember(label: "trainingDataSource", required: true, type: .enum)
        ]

        /// Details for the external events data used for model version training. Required if trainingDataSource is EXTERNAL_EVENTS.
        public let externalEventsDetail: ExternalEventsDetail?
        /// The model ID. 
        public let modelId: String
        /// The model type.
        public let modelType: ModelTypeEnum
        /// A collection of key and value pairs.
        public let tags: [Tag]?
        /// The training data schema.
        public let trainingDataSchema: TrainingDataSchema
        /// The training data source location in Amazon S3. 
        public let trainingDataSource: TrainingDataSourceEnum

        public init(externalEventsDetail: ExternalEventsDetail? = nil, modelId: String, modelType: ModelTypeEnum, tags: [Tag]? = nil, trainingDataSchema: TrainingDataSchema, trainingDataSource: TrainingDataSourceEnum) {
            self.externalEventsDetail = externalEventsDetail
            self.modelId = modelId
            self.modelType = modelType
            self.tags = tags
            self.trainingDataSchema = trainingDataSchema
            self.trainingDataSource = trainingDataSource
        }

        public func validate(name: String) throws {
            try self.externalEventsDetail?.validate(name: "\(name).externalEventsDetail")
            try validate(self.modelId, name:"modelId", parent: name, max: 64)
            try validate(self.modelId, name:"modelId", parent: name, min: 1)
            try validate(self.modelId, name:"modelId", parent: name, pattern: "^[0-9a-z_]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case externalEventsDetail = "externalEventsDetail"
            case modelId = "modelId"
            case modelType = "modelType"
            case tags = "tags"
            case trainingDataSchema = "trainingDataSchema"
            case trainingDataSource = "trainingDataSource"
        }
    }

    public struct CreateModelVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "modelId", required: false, type: .string), 
            AWSShapeMember(label: "modelType", required: false, type: .enum), 
            AWSShapeMember(label: "modelVersionNumber", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .string)
        ]

        /// The model ID.
        public let modelId: String?
        /// The model type.
        public let modelType: ModelTypeEnum?
        /// The model version number of the model version created.
        public let modelVersionNumber: String?
        /// The model version status. 
        public let status: String?

        public init(modelId: String? = nil, modelType: ModelTypeEnum? = nil, modelVersionNumber: String? = nil, status: String? = nil) {
            self.modelId = modelId
            self.modelType = modelType
            self.modelVersionNumber = modelVersionNumber
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case modelId = "modelId"
            case modelType = "modelType"
            case modelVersionNumber = "modelVersionNumber"
            case status = "status"
        }
    }

    public struct CreateRuleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "detectorId", required: true, type: .string), 
            AWSShapeMember(label: "expression", required: true, type: .string), 
            AWSShapeMember(label: "language", required: true, type: .enum), 
            AWSShapeMember(label: "outcomes", required: true, type: .list), 
            AWSShapeMember(label: "ruleId", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The rule description.
        public let description: String?
        /// The detector ID for the rule's parent detector.
        public let detectorId: String
        /// The rule expression.
        public let expression: String
        /// The language of the rule.
        public let language: Language
        /// The outcome or outcomes returned when the rule expression matches.
        public let outcomes: [String]
        /// The rule ID.
        public let ruleId: String
        /// A collection of key and value pairs.
        public let tags: [Tag]?

        public init(description: String? = nil, detectorId: String, expression: String, language: Language, outcomes: [String], ruleId: String, tags: [Tag]? = nil) {
            self.description = description
            self.detectorId = detectorId
            self.expression = expression
            self.language = language
            self.outcomes = outcomes
            self.ruleId = ruleId
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 128)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, max: 64)
            try validate(self.detectorId, name:"detectorId", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, pattern: "^[0-9a-z_-]+$")
            try validate(self.expression, name:"expression", parent: name, max: 4096)
            try validate(self.expression, name:"expression", parent: name, min: 1)
            try validate(self.outcomes, name:"outcomes", parent: name, min: 1)
            try validate(self.ruleId, name:"ruleId", parent: name, max: 64)
            try validate(self.ruleId, name:"ruleId", parent: name, min: 1)
            try validate(self.ruleId, name:"ruleId", parent: name, pattern: "^[0-9a-z_-]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case detectorId = "detectorId"
            case expression = "expression"
            case language = "language"
            case outcomes = "outcomes"
            case ruleId = "ruleId"
            case tags = "tags"
        }
    }

    public struct CreateRuleResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rule", required: false, type: .structure)
        ]

        /// The created rule.
        public let rule: Rule?

        public init(rule: Rule? = nil) {
            self.rule = rule
        }

        private enum CodingKeys: String, CodingKey {
            case rule = "rule"
        }
    }

    public struct CreateVariableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataSource", required: true, type: .enum), 
            AWSShapeMember(label: "dataType", required: true, type: .enum), 
            AWSShapeMember(label: "defaultValue", required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "variableType", required: false, type: .string)
        ]

        /// The source of the data.
        public let dataSource: DataSource
        /// The data type.
        public let dataType: DataType
        /// The default value for the variable when no value is received.
        public let defaultValue: String
        /// The description.
        public let description: String?
        /// The name of the variable.
        public let name: String
        /// A collection of key and value pairs.
        public let tags: [Tag]?
        /// The variable type. For more information see Variable types.  Valid Values: AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT 
        public let variableType: String?

        public init(dataSource: DataSource, dataType: DataType, defaultValue: String, description: String? = nil, name: String, tags: [Tag]? = nil, variableType: String? = nil) {
            self.dataSource = dataSource
            self.dataType = dataType
            self.defaultValue = defaultValue
            self.description = description
            self.name = name
            self.tags = tags
            self.variableType = variableType
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case dataSource = "dataSource"
            case dataType = "dataType"
            case defaultValue = "defaultValue"
            case description = "description"
            case name = "name"
            case tags = "tags"
            case variableType = "variableType"
        }
    }

    public struct CreateVariableResult: AWSShape {


        public init() {
        }

    }

    public struct DataValidationMetrics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fieldLevelMessages", required: false, type: .list), 
            AWSShapeMember(label: "fileLevelMessages", required: false, type: .list)
        ]

        /// The field-specific model training validation messages.
        public let fieldLevelMessages: [FieldValidationMessage]?
        /// The file-specific model training validation messages.
        public let fileLevelMessages: [FileValidationMessage]?

        public init(fieldLevelMessages: [FieldValidationMessage]? = nil, fileLevelMessages: [FileValidationMessage]? = nil) {
            self.fieldLevelMessages = fieldLevelMessages
            self.fileLevelMessages = fileLevelMessages
        }

        private enum CodingKeys: String, CodingKey {
            case fieldLevelMessages = "fieldLevelMessages"
            case fileLevelMessages = "fileLevelMessages"
        }
    }

    public struct DeleteDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorId", required: true, type: .string)
        ]

        /// The ID of the detector to delete.
        public let detectorId: String

        public init(detectorId: String) {
            self.detectorId = detectorId
        }

        public func validate(name: String) throws {
            try validate(self.detectorId, name:"detectorId", parent: name, max: 64)
            try validate(self.detectorId, name:"detectorId", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, pattern: "^[0-9a-z_-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct DeleteDetectorResult: AWSShape {


        public init() {
        }

    }

    public struct DeleteDetectorVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorId", required: true, type: .string), 
            AWSShapeMember(label: "detectorVersionId", required: true, type: .string)
        ]

        /// The ID of the parent detector for the detector version to delete.
        public let detectorId: String
        /// The ID of the detector version to delete.
        public let detectorVersionId: String

        public init(detectorId: String, detectorVersionId: String) {
            self.detectorId = detectorId
            self.detectorVersionId = detectorVersionId
        }

        public func validate(name: String) throws {
            try validate(self.detectorId, name:"detectorId", parent: name, max: 64)
            try validate(self.detectorId, name:"detectorId", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, pattern: "^[0-9a-z_-]+$")
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, max: 5)
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, min: 1)
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, pattern: "^([1-9][0-9]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case detectorVersionId = "detectorVersionId"
        }
    }

    public struct DeleteDetectorVersionResult: AWSShape {


        public init() {
        }

    }

    public struct DeleteEventRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventId", required: true, type: .string), 
            AWSShapeMember(label: "eventTypeName", required: true, type: .string)
        ]

        /// The ID of the event to delete.
        public let eventId: String
        /// The name of the event type.
        public let eventTypeName: String

        public init(eventId: String, eventTypeName: String) {
            self.eventId = eventId
            self.eventTypeName = eventTypeName
        }

        private enum CodingKeys: String, CodingKey {
            case eventId = "eventId"
            case eventTypeName = "eventTypeName"
        }
    }

    public struct DeleteEventResult: AWSShape {


        public init() {
        }

    }

    public struct DeleteRuleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rule", required: true, type: .structure)
        ]

        public let rule: Rule

        public init(rule: Rule) {
            self.rule = rule
        }

        public func validate(name: String) throws {
            try self.rule.validate(name: "\(name).rule")
        }

        private enum CodingKeys: String, CodingKey {
            case rule = "rule"
        }
    }

    public struct DeleteRuleResult: AWSShape {


        public init() {
        }

    }

    public struct DescribeDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorId", required: true, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The detector ID.
        public let detectorId: String
        /// The maximum number of results to return for the request.
        public let maxResults: Int?
        /// The next token from the previous response.
        public let nextToken: String?

        public init(detectorId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.detectorId = detectorId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.detectorId, name:"detectorId", parent: name, max: 64)
            try validate(self.detectorId, name:"detectorId", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, pattern: "^[0-9a-z_-]+$")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 2500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1000)
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeDetectorResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "detectorId", required: false, type: .string), 
            AWSShapeMember(label: "detectorVersionSummaries", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The detector ARN.
        public let arn: String?
        /// The detector ID.
        public let detectorId: String?
        /// The status and description for each detector version.
        public let detectorVersionSummaries: [DetectorVersionSummary]?
        /// The next token to be used for subsequent requests.
        public let nextToken: String?

        public init(arn: String? = nil, detectorId: String? = nil, detectorVersionSummaries: [DetectorVersionSummary]? = nil, nextToken: String? = nil) {
            self.arn = arn
            self.detectorId = detectorId
            self.detectorVersionSummaries = detectorVersionSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case detectorId = "detectorId"
            case detectorVersionSummaries = "detectorVersionSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeModelVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "modelId", required: false, type: .string), 
            AWSShapeMember(label: "modelType", required: false, type: .enum), 
            AWSShapeMember(label: "modelVersionNumber", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The maximum number of results to return.
        public let maxResults: Int?
        /// The model ID.
        public let modelId: String?
        /// The model type.
        public let modelType: ModelTypeEnum?
        /// The model version number.
        public let modelVersionNumber: String?
        /// The next token from the previous results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, modelId: String? = nil, modelType: ModelTypeEnum? = nil, modelVersionNumber: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.modelId = modelId
            self.modelType = modelType
            self.modelVersionNumber = modelVersionNumber
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 10)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.modelId, name:"modelId", parent: name, max: 64)
            try validate(self.modelId, name:"modelId", parent: name, min: 1)
            try validate(self.modelId, name:"modelId", parent: name, pattern: "^[0-9a-z_]+$")
            try validate(self.modelVersionNumber, name:"modelVersionNumber", parent: name, max: 7)
            try validate(self.modelVersionNumber, name:"modelVersionNumber", parent: name, min: 3)
            try validate(self.modelVersionNumber, name:"modelVersionNumber", parent: name, pattern: "^[1-9][0-9]{0,3}\\.[0-9]{1,2}$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case modelId = "modelId"
            case modelType = "modelType"
            case modelVersionNumber = "modelVersionNumber"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeModelVersionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "modelVersionDetails", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The model version details.
        public let modelVersionDetails: [ModelVersionDetail]?
        /// The next token.
        public let nextToken: String?

        public init(modelVersionDetails: [ModelVersionDetail]? = nil, nextToken: String? = nil) {
            self.modelVersionDetails = modelVersionDetails
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case modelVersionDetails = "modelVersionDetails"
            case nextToken = "nextToken"
        }
    }

    public struct Detector: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "createdTime", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "detectorId", required: false, type: .string), 
            AWSShapeMember(label: "eventTypeName", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .string)
        ]

        /// The detector ARN.
        public let arn: String?
        /// Timestamp of when the detector was created.
        public let createdTime: String?
        /// The detector description.
        public let description: String?
        /// The detector ID.
        public let detectorId: String?
        /// The name of the event type.
        public let eventTypeName: String?
        /// Timestamp of when the detector was last updated.
        public let lastUpdatedTime: String?

        public init(arn: String? = nil, createdTime: String? = nil, description: String? = nil, detectorId: String? = nil, eventTypeName: String? = nil, lastUpdatedTime: String? = nil) {
            self.arn = arn
            self.createdTime = createdTime
            self.description = description
            self.detectorId = detectorId
            self.eventTypeName = eventTypeName
            self.lastUpdatedTime = lastUpdatedTime
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdTime = "createdTime"
            case description = "description"
            case detectorId = "detectorId"
            case eventTypeName = "eventTypeName"
            case lastUpdatedTime = "lastUpdatedTime"
        }
    }

    public struct DetectorVersionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "detectorVersionId", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]

        /// The detector version description. 
        public let description: String?
        /// The detector version ID. 
        public let detectorVersionId: String?
        /// Timestamp of when the detector version was last updated.
        public let lastUpdatedTime: String?
        /// The detector version status. 
        public let status: DetectorVersionStatus?

        public init(description: String? = nil, detectorVersionId: String? = nil, lastUpdatedTime: String? = nil, status: DetectorVersionStatus? = nil) {
            self.description = description
            self.detectorVersionId = detectorVersionId
            self.lastUpdatedTime = lastUpdatedTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case detectorVersionId = "detectorVersionId"
            case lastUpdatedTime = "lastUpdatedTime"
            case status = "status"
        }
    }

    public struct Entity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "entityId", required: true, type: .string), 
            AWSShapeMember(label: "entityType", required: true, type: .string)
        ]

        /// The entity ID. If you do not know the entityId, you can pass unknown, which is areserved string literal.
        public let entityId: String
        /// The entity type.
        public let entityType: String

        public init(entityId: String, entityType: String) {
            self.entityId = entityId
            self.entityType = entityType
        }

        public func validate(name: String) throws {
            try validate(self.entityId, name:"entityId", parent: name, max: 64)
            try validate(self.entityId, name:"entityId", parent: name, min: 1)
            try validate(self.entityId, name:"entityId", parent: name, pattern: "^[0-9a-z_-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case entityId = "entityId"
            case entityType = "entityType"
        }
    }

    public struct EntityType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "createdTime", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]

        /// The entity type ARN.
        public let arn: String?
        /// Timestamp of when the entity type was created.
        public let createdTime: String?
        /// The entity type description.
        public let description: String?
        /// Timestamp of when the entity type was last updated.
        public let lastUpdatedTime: String?
        /// The entity type name.
        public let name: String?

        public init(arn: String? = nil, createdTime: String? = nil, description: String? = nil, lastUpdatedTime: String? = nil, name: String? = nil) {
            self.arn = arn
            self.createdTime = createdTime
            self.description = description
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdTime = "createdTime"
            case description = "description"
            case lastUpdatedTime = "lastUpdatedTime"
            case name = "name"
        }
    }

    public struct EventType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "createdTime", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "entityTypes", required: false, type: .list), 
            AWSShapeMember(label: "eventVariables", required: false, type: .list), 
            AWSShapeMember(label: "labels", required: false, type: .list), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]

        /// The entity type ARN.
        public let arn: String?
        /// Timestamp of when the event type was created.
        public let createdTime: String?
        /// The event type description.
        public let description: String?
        /// The event type entity types.
        public let entityTypes: [String]?
        /// The event type event variables.
        public let eventVariables: [String]?
        /// The event type labels.
        public let labels: [String]?
        /// Timestamp of when the event type was last updated.
        public let lastUpdatedTime: String?
        /// The event type name.
        public let name: String?

        public init(arn: String? = nil, createdTime: String? = nil, description: String? = nil, entityTypes: [String]? = nil, eventVariables: [String]? = nil, labels: [String]? = nil, lastUpdatedTime: String? = nil, name: String? = nil) {
            self.arn = arn
            self.createdTime = createdTime
            self.description = description
            self.entityTypes = entityTypes
            self.eventVariables = eventVariables
            self.labels = labels
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdTime = "createdTime"
            case description = "description"
            case entityTypes = "entityTypes"
            case eventVariables = "eventVariables"
            case labels = "labels"
            case lastUpdatedTime = "lastUpdatedTime"
            case name = "name"
        }
    }

    public struct ExternalEventsDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "dataLocation", required: true, type: .string)
        ]

        /// The ARN of the role that provides Amazon Fraud Detector access to the data location.
        public let dataAccessRoleArn: String
        /// The Amazon S3 bucket location for the data.
        public let dataLocation: String

        public init(dataAccessRoleArn: String, dataLocation: String) {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.dataLocation = dataLocation
        }

        public func validate(name: String) throws {
            try validate(self.dataAccessRoleArn, name:"dataAccessRoleArn", parent: name, max: 256)
            try validate(self.dataAccessRoleArn, name:"dataAccessRoleArn", parent: name, min: 1)
            try validate(self.dataAccessRoleArn, name:"dataAccessRoleArn", parent: name, pattern: "^arn\\:aws[a-z-]{0,15}\\:iam\\:\\:[0-9]{12}\\:role\\/[^\\s]{2,64}$")
            try validate(self.dataLocation, name:"dataLocation", parent: name, max: 512)
            try validate(self.dataLocation, name:"dataLocation", parent: name, min: 1)
            try validate(self.dataLocation, name:"dataLocation", parent: name, pattern: "^s3:\\/\\/(.+)$")
        }

        private enum CodingKeys: String, CodingKey {
            case dataAccessRoleArn = "dataAccessRoleArn"
            case dataLocation = "dataLocation"
        }
    }

    public struct ExternalModel: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "createdTime", required: false, type: .string), 
            AWSShapeMember(label: "inputConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "invokeModelEndpointRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .string), 
            AWSShapeMember(label: "modelEndpoint", required: false, type: .string), 
            AWSShapeMember(label: "modelEndpointStatus", required: false, type: .enum), 
            AWSShapeMember(label: "modelSource", required: false, type: .enum), 
            AWSShapeMember(label: "outputConfiguration", required: false, type: .structure)
        ]

        /// The model ARN.
        public let arn: String?
        /// Timestamp of when the model was last created.
        public let createdTime: String?
        /// The input configuration.
        public let inputConfiguration: ModelInputConfiguration?
        /// The role used to invoke the model. 
        public let invokeModelEndpointRoleArn: String?
        /// Timestamp of when the model was last updated.
        public let lastUpdatedTime: String?
        /// The Amazon SageMaker model endpoints.
        public let modelEndpoint: String?
        /// The Amazon Fraud Detector status for the external model endpoint
        public let modelEndpointStatus: ModelEndpointStatus?
        /// The source of the model.
        public let modelSource: ModelSource?
        /// The output configuration.
        public let outputConfiguration: ModelOutputConfiguration?

        public init(arn: String? = nil, createdTime: String? = nil, inputConfiguration: ModelInputConfiguration? = nil, invokeModelEndpointRoleArn: String? = nil, lastUpdatedTime: String? = nil, modelEndpoint: String? = nil, modelEndpointStatus: ModelEndpointStatus? = nil, modelSource: ModelSource? = nil, outputConfiguration: ModelOutputConfiguration? = nil) {
            self.arn = arn
            self.createdTime = createdTime
            self.inputConfiguration = inputConfiguration
            self.invokeModelEndpointRoleArn = invokeModelEndpointRoleArn
            self.lastUpdatedTime = lastUpdatedTime
            self.modelEndpoint = modelEndpoint
            self.modelEndpointStatus = modelEndpointStatus
            self.modelSource = modelSource
            self.outputConfiguration = outputConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdTime = "createdTime"
            case inputConfiguration = "inputConfiguration"
            case invokeModelEndpointRoleArn = "invokeModelEndpointRoleArn"
            case lastUpdatedTime = "lastUpdatedTime"
            case modelEndpoint = "modelEndpoint"
            case modelEndpointStatus = "modelEndpointStatus"
            case modelSource = "modelSource"
            case outputConfiguration = "outputConfiguration"
        }
    }

    public struct FieldValidationMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "content", required: false, type: .string), 
            AWSShapeMember(label: "fieldName", required: false, type: .string), 
            AWSShapeMember(label: "identifier", required: false, type: .string), 
            AWSShapeMember(label: "title", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .string)
        ]

        /// The message content.
        public let content: String?
        /// The field name.
        public let fieldName: String?
        /// The message ID.
        public let identifier: String?
        /// The message title.
        public let title: String?
        /// The message type.
        public let `type`: String?

        public init(content: String? = nil, fieldName: String? = nil, identifier: String? = nil, title: String? = nil, type: String? = nil) {
            self.content = content
            self.fieldName = fieldName
            self.identifier = identifier
            self.title = title
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case content = "content"
            case fieldName = "fieldName"
            case identifier = "identifier"
            case title = "title"
            case `type` = "type"
        }
    }

    public struct FileValidationMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "content", required: false, type: .string), 
            AWSShapeMember(label: "title", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .string)
        ]

        /// The message content.
        public let content: String?
        /// The message title.
        public let title: String?
        /// The message type.
        public let `type`: String?

        public init(content: String? = nil, title: String? = nil, type: String? = nil) {
            self.content = content
            self.title = title
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case content = "content"
            case title = "title"
            case `type` = "type"
        }
    }

    public struct GetDetectorVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorId", required: true, type: .string), 
            AWSShapeMember(label: "detectorVersionId", required: true, type: .string)
        ]

        /// The detector ID.
        public let detectorId: String
        /// The detector version ID.
        public let detectorVersionId: String

        public init(detectorId: String, detectorVersionId: String) {
            self.detectorId = detectorId
            self.detectorVersionId = detectorVersionId
        }

        public func validate(name: String) throws {
            try validate(self.detectorId, name:"detectorId", parent: name, max: 64)
            try validate(self.detectorId, name:"detectorId", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, pattern: "^[0-9a-z_-]+$")
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, max: 5)
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, min: 1)
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, pattern: "^([1-9][0-9]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case detectorVersionId = "detectorVersionId"
        }
    }

    public struct GetDetectorVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "createdTime", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "detectorId", required: false, type: .string), 
            AWSShapeMember(label: "detectorVersionId", required: false, type: .string), 
            AWSShapeMember(label: "externalModelEndpoints", required: false, type: .list), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .string), 
            AWSShapeMember(label: "modelVersions", required: false, type: .list), 
            AWSShapeMember(label: "ruleExecutionMode", required: false, type: .enum), 
            AWSShapeMember(label: "rules", required: false, type: .list), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]

        /// The detector version ARN.
        public let arn: String?
        /// The timestamp when the detector version was created. 
        public let createdTime: String?
        /// The detector version description.
        public let description: String?
        /// The detector ID.
        public let detectorId: String?
        /// The detector version ID.
        public let detectorVersionId: String?
        /// The Amazon SageMaker model endpoints included in the detector version.
        public let externalModelEndpoints: [String]?
        /// The timestamp when the detector version was last updated. 
        public let lastUpdatedTime: String?
        /// The model versions included in the detector version. 
        public let modelVersions: [ModelVersion]?
        /// The execution mode of the rule in the dectector  FIRST_MATCHED indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.  ALL_MATCHED indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.
        public let ruleExecutionMode: RuleExecutionMode?
        /// The rules included in the detector version.
        public let rules: [Rule]?
        /// The status of the detector version.
        public let status: DetectorVersionStatus?

        public init(arn: String? = nil, createdTime: String? = nil, description: String? = nil, detectorId: String? = nil, detectorVersionId: String? = nil, externalModelEndpoints: [String]? = nil, lastUpdatedTime: String? = nil, modelVersions: [ModelVersion]? = nil, ruleExecutionMode: RuleExecutionMode? = nil, rules: [Rule]? = nil, status: DetectorVersionStatus? = nil) {
            self.arn = arn
            self.createdTime = createdTime
            self.description = description
            self.detectorId = detectorId
            self.detectorVersionId = detectorVersionId
            self.externalModelEndpoints = externalModelEndpoints
            self.lastUpdatedTime = lastUpdatedTime
            self.modelVersions = modelVersions
            self.ruleExecutionMode = ruleExecutionMode
            self.rules = rules
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdTime = "createdTime"
            case description = "description"
            case detectorId = "detectorId"
            case detectorVersionId = "detectorVersionId"
            case externalModelEndpoints = "externalModelEndpoints"
            case lastUpdatedTime = "lastUpdatedTime"
            case modelVersions = "modelVersions"
            case ruleExecutionMode = "ruleExecutionMode"
            case rules = "rules"
            case status = "status"
        }
    }

    public struct GetDetectorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorId", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The detector ID.
        public let detectorId: String?
        /// The maximum number of objects to return for the request.
        public let maxResults: Int?
        /// The next token for the subsequent request.
        public let nextToken: String?

        public init(detectorId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.detectorId = detectorId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.detectorId, name:"detectorId", parent: name, max: 64)
            try validate(self.detectorId, name:"detectorId", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, pattern: "^[0-9a-z_-]+$")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 10)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetDetectorsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectors", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The detectors.
        public let detectors: [Detector]?
        /// The next page token.
        public let nextToken: String?

        public init(detectors: [Detector]? = nil, nextToken: String? = nil) {
            self.detectors = detectors
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case detectors = "detectors"
            case nextToken = "nextToken"
        }
    }

    public struct GetEntityTypesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The maximum number of objects to return for the request.
        public let maxResults: Int?
        /// The name.
        public let name: String?
        /// The next token for the subsequent request.
        public let nextToken: String?

        public init(maxResults: Int? = nil, name: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.name = name
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 10)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
            try validate(self.name, name:"name", parent: name, max: 64)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case name = "name"
            case nextToken = "nextToken"
        }
    }

    public struct GetEntityTypesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "entityTypes", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// An array of entity types.
        public let entityTypes: [EntityType]?
        /// The next page token.
        public let nextToken: String?

        public init(entityTypes: [EntityType]? = nil, nextToken: String? = nil) {
            self.entityTypes = entityTypes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case entityTypes = "entityTypes"
            case nextToken = "nextToken"
        }
    }

    public struct GetEventPredictionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorId", required: true, type: .string), 
            AWSShapeMember(label: "detectorVersionId", required: false, type: .string), 
            AWSShapeMember(label: "entities", required: true, type: .list), 
            AWSShapeMember(label: "eventId", required: true, type: .string), 
            AWSShapeMember(label: "eventTimestamp", required: true, type: .string), 
            AWSShapeMember(label: "eventTypeName", required: true, type: .string), 
            AWSShapeMember(label: "eventVariables", required: true, type: .map), 
            AWSShapeMember(label: "externalModelEndpointDataBlobs", required: false, type: .map)
        ]

        /// The detector ID.
        public let detectorId: String
        /// The detector version ID.
        public let detectorVersionId: String?
        /// The entity type (associated with the detector's event type) and specific entity ID representing who performed the event. If an entity id is not available, use "UNKNOWN."
        public let entities: [Entity]
        /// The unique ID used to identify the event.
        public let eventId: String
        /// Timestamp that defines when the event under evaluation occurred.
        public let eventTimestamp: String
        /// The event type associated with the detector specified for the prediction.
        public let eventTypeName: String
        /// Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.
        public let eventVariables: [String: String]
        /// The Amazon SageMaker model endpoint input data blobs.
        public let externalModelEndpointDataBlobs: [String: ModelEndpointDataBlob]?

        public init(detectorId: String, detectorVersionId: String? = nil, entities: [Entity], eventId: String, eventTimestamp: String, eventTypeName: String, eventVariables: [String: String], externalModelEndpointDataBlobs: [String: ModelEndpointDataBlob]? = nil) {
            self.detectorId = detectorId
            self.detectorVersionId = detectorVersionId
            self.entities = entities
            self.eventId = eventId
            self.eventTimestamp = eventTimestamp
            self.eventTypeName = eventTypeName
            self.eventVariables = eventVariables
            self.externalModelEndpointDataBlobs = externalModelEndpointDataBlobs
        }

        public func validate(name: String) throws {
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, max: 5)
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, min: 1)
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, pattern: "^([1-9][0-9]*)$")
            try self.entities.forEach {
                try $0.validate(name: "\(name).entities[]")
            }
            try self.eventVariables.forEach {
                try validate($0.key, name:"eventVariables.key", parent: name, max: 64)
                try validate($0.key, name:"eventVariables.key", parent: name, min: 1)
                try validate($0.value, name:"eventVariables[\"\($0.key)\"]", parent: name, max: 1024)
                try validate($0.value, name:"eventVariables[\"\($0.key)\"]", parent: name, min: 1)
            }
            try self.externalModelEndpointDataBlobs?.forEach {
                try $0.value.validate(name: "\(name).externalModelEndpointDataBlobs[\"\($0.key)\"]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case detectorVersionId = "detectorVersionId"
            case entities = "entities"
            case eventId = "eventId"
            case eventTimestamp = "eventTimestamp"
            case eventTypeName = "eventTypeName"
            case eventVariables = "eventVariables"
            case externalModelEndpointDataBlobs = "externalModelEndpointDataBlobs"
        }
    }

    public struct GetEventPredictionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "modelScores", required: false, type: .list), 
            AWSShapeMember(label: "ruleResults", required: false, type: .list)
        ]

        /// The model scores. Amazon Fraud Detector generates model scores between 0 and 1000, where 0 is low fraud risk and 1000 is high fraud risk. Model scores are directly related to the false positive rate (FPR). For example, a score of 600 corresponds to an estimated 10% false positive rate whereas a score of 900 corresponds to an estimated 2% false positive rate.
        public let modelScores: [ModelScores]?
        /// The results.
        public let ruleResults: [RuleResult]?

        public init(modelScores: [ModelScores]? = nil, ruleResults: [RuleResult]? = nil) {
            self.modelScores = modelScores
            self.ruleResults = ruleResults
        }

        private enum CodingKeys: String, CodingKey {
            case modelScores = "modelScores"
            case ruleResults = "ruleResults"
        }
    }

    public struct GetEventTypesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The maximum number of objects to return for the request.
        public let maxResults: Int?
        /// The name.
        public let name: String?
        /// The next token for the subsequent request.
        public let nextToken: String?

        public init(maxResults: Int? = nil, name: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.name = name
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 10)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
            try validate(self.name, name:"name", parent: name, max: 64)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case name = "name"
            case nextToken = "nextToken"
        }
    }

    public struct GetEventTypesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventTypes", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// An array of event types.
        public let eventTypes: [EventType]?
        /// The next page token.
        public let nextToken: String?

        public init(eventTypes: [EventType]? = nil, nextToken: String? = nil) {
            self.eventTypes = eventTypes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case eventTypes = "eventTypes"
            case nextToken = "nextToken"
        }
    }

    public struct GetExternalModelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "modelEndpoint", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The maximum number of objects to return for the request.
        public let maxResults: Int?
        /// The Amazon SageMaker model endpoint.
        public let modelEndpoint: String?
        /// The next page token for the request.
        public let nextToken: String?

        public init(maxResults: Int? = nil, modelEndpoint: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.modelEndpoint = modelEndpoint
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 10)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case modelEndpoint = "modelEndpoint"
            case nextToken = "nextToken"
        }
    }

    public struct GetExternalModelsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "externalModels", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// Gets the Amazon SageMaker models.
        public let externalModels: [ExternalModel]?
        /// The next page token to be used in subsequent requests.
        public let nextToken: String?

        public init(externalModels: [ExternalModel]? = nil, nextToken: String? = nil) {
            self.externalModels = externalModels
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case externalModels = "externalModels"
            case nextToken = "nextToken"
        }
    }

    public struct GetKMSEncryptionKeyResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "kmsKey", required: false, type: .structure)
        ]

        /// The KMS encryption key.
        public let kmsKey: KMSKey?

        public init(kmsKey: KMSKey? = nil) {
            self.kmsKey = kmsKey
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKey = "kmsKey"
        }
    }

    public struct GetLabelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The maximum number of objects to return for the request.
        public let maxResults: Int?
        /// The name of the label or labels to get.
        public let name: String?
        /// The next token for the subsequent request.
        public let nextToken: String?

        public init(maxResults: Int? = nil, name: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.name = name
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 50)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 10)
            try validate(self.name, name:"name", parent: name, max: 64)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case name = "name"
            case nextToken = "nextToken"
        }
    }

    public struct GetLabelsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "labels", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// An array of labels.
        public let labels: [Label]?
        /// The next page token.
        public let nextToken: String?

        public init(labels: [Label]? = nil, nextToken: String? = nil) {
            self.labels = labels
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case labels = "labels"
            case nextToken = "nextToken"
        }
    }

    public struct GetModelVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "modelId", required: true, type: .string), 
            AWSShapeMember(label: "modelType", required: true, type: .enum), 
            AWSShapeMember(label: "modelVersionNumber", required: true, type: .string)
        ]

        /// The model ID.
        public let modelId: String
        /// The model type.
        public let modelType: ModelTypeEnum
        /// The model version number.
        public let modelVersionNumber: String

        public init(modelId: String, modelType: ModelTypeEnum, modelVersionNumber: String) {
            self.modelId = modelId
            self.modelType = modelType
            self.modelVersionNumber = modelVersionNumber
        }

        public func validate(name: String) throws {
            try validate(self.modelId, name:"modelId", parent: name, max: 64)
            try validate(self.modelId, name:"modelId", parent: name, min: 1)
            try validate(self.modelId, name:"modelId", parent: name, pattern: "^[0-9a-z_]+$")
            try validate(self.modelVersionNumber, name:"modelVersionNumber", parent: name, max: 7)
            try validate(self.modelVersionNumber, name:"modelVersionNumber", parent: name, min: 3)
            try validate(self.modelVersionNumber, name:"modelVersionNumber", parent: name, pattern: "^[1-9][0-9]{0,3}\\.[0-9]{1,2}$")
        }

        private enum CodingKeys: String, CodingKey {
            case modelId = "modelId"
            case modelType = "modelType"
            case modelVersionNumber = "modelVersionNumber"
        }
    }

    public struct GetModelVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "externalEventsDetail", required: false, type: .structure), 
            AWSShapeMember(label: "modelId", required: false, type: .string), 
            AWSShapeMember(label: "modelType", required: false, type: .enum), 
            AWSShapeMember(label: "modelVersionNumber", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .string), 
            AWSShapeMember(label: "trainingDataSchema", required: false, type: .structure), 
            AWSShapeMember(label: "trainingDataSource", required: false, type: .enum)
        ]

        /// The model version ARN.
        public let arn: String?
        /// The event details.
        public let externalEventsDetail: ExternalEventsDetail?
        /// The model ID.
        public let modelId: String?
        /// The model type.
        public let modelType: ModelTypeEnum?
        /// The model version number.
        public let modelVersionNumber: String?
        /// The model version status.
        public let status: String?
        /// The training data schema.
        public let trainingDataSchema: TrainingDataSchema?
        /// The training data source.
        public let trainingDataSource: TrainingDataSourceEnum?

        public init(arn: String? = nil, externalEventsDetail: ExternalEventsDetail? = nil, modelId: String? = nil, modelType: ModelTypeEnum? = nil, modelVersionNumber: String? = nil, status: String? = nil, trainingDataSchema: TrainingDataSchema? = nil, trainingDataSource: TrainingDataSourceEnum? = nil) {
            self.arn = arn
            self.externalEventsDetail = externalEventsDetail
            self.modelId = modelId
            self.modelType = modelType
            self.modelVersionNumber = modelVersionNumber
            self.status = status
            self.trainingDataSchema = trainingDataSchema
            self.trainingDataSource = trainingDataSource
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case externalEventsDetail = "externalEventsDetail"
            case modelId = "modelId"
            case modelType = "modelType"
            case modelVersionNumber = "modelVersionNumber"
            case status = "status"
            case trainingDataSchema = "trainingDataSchema"
            case trainingDataSource = "trainingDataSource"
        }
    }

    public struct GetModelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "modelId", required: false, type: .string), 
            AWSShapeMember(label: "modelType", required: false, type: .enum), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The maximum number of objects to return for the request. 
        public let maxResults: Int?
        /// The model ID.
        public let modelId: String?
        /// The model type.
        public let modelType: ModelTypeEnum?
        /// The next token for the subsequent request.
        public let nextToken: String?

        public init(maxResults: Int? = nil, modelId: String? = nil, modelType: ModelTypeEnum? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.modelId = modelId
            self.modelType = modelType
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 10)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.modelId, name:"modelId", parent: name, max: 64)
            try validate(self.modelId, name:"modelId", parent: name, min: 1)
            try validate(self.modelId, name:"modelId", parent: name, pattern: "^[0-9a-z_]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case modelId = "modelId"
            case modelType = "modelType"
            case nextToken = "nextToken"
        }
    }

    public struct GetModelsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "models", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The array of models.
        public let models: [Model]?
        /// The next page token to be used in subsequent requests.
        public let nextToken: String?

        public init(models: [Model]? = nil, nextToken: String? = nil) {
            self.models = models
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case models = "models"
            case nextToken = "nextToken"
        }
    }

    public struct GetOutcomesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The maximum number of objects to return for the request. 
        public let maxResults: Int?
        /// The name of the outcome or outcomes to get.
        public let name: String?
        /// The next page token for the request. 
        public let nextToken: String?

        public init(maxResults: Int? = nil, name: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.name = name
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 50)
            try validate(self.name, name:"name", parent: name, max: 64)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case name = "name"
            case nextToken = "nextToken"
        }
    }

    public struct GetOutcomesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "outcomes", required: false, type: .list)
        ]

        /// The next page token for subsequent requests.
        public let nextToken: String?
        /// The outcomes. 
        public let outcomes: [Outcome]?

        public init(nextToken: String? = nil, outcomes: [Outcome]? = nil) {
            self.nextToken = nextToken
            self.outcomes = outcomes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case outcomes = "outcomes"
        }
    }

    public struct GetRulesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorId", required: true, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "ruleId", required: false, type: .string), 
            AWSShapeMember(label: "ruleVersion", required: false, type: .string)
        ]

        /// The detector ID.
        public let detectorId: String
        /// The maximum number of rules to return for the request.
        public let maxResults: Int?
        /// The next page token.
        public let nextToken: String?
        /// The rule ID.
        public let ruleId: String?
        /// The rule version.
        public let ruleVersion: String?

        public init(detectorId: String, maxResults: Int? = nil, nextToken: String? = nil, ruleId: String? = nil, ruleVersion: String? = nil) {
            self.detectorId = detectorId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.ruleId = ruleId
            self.ruleVersion = ruleVersion
        }

        public func validate(name: String) throws {
            try validate(self.detectorId, name:"detectorId", parent: name, max: 64)
            try validate(self.detectorId, name:"detectorId", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, pattern: "^[0-9a-z_-]+$")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 50)
            try validate(self.ruleId, name:"ruleId", parent: name, max: 64)
            try validate(self.ruleId, name:"ruleId", parent: name, min: 1)
            try validate(self.ruleId, name:"ruleId", parent: name, pattern: "^[0-9a-z_-]+$")
            try validate(self.ruleVersion, name:"ruleVersion", parent: name, max: 5)
            try validate(self.ruleVersion, name:"ruleVersion", parent: name, min: 1)
            try validate(self.ruleVersion, name:"ruleVersion", parent: name, pattern: "^([1-9][0-9]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case ruleId = "ruleId"
            case ruleVersion = "ruleVersion"
        }
    }

    public struct GetRulesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "ruleDetails", required: false, type: .list)
        ]

        /// The next page token to be used in subsequent requests.
        public let nextToken: String?
        /// The details of the requested rule.
        public let ruleDetails: [RuleDetail]?

        public init(nextToken: String? = nil, ruleDetails: [RuleDetail]? = nil) {
            self.nextToken = nextToken
            self.ruleDetails = ruleDetails
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case ruleDetails = "ruleDetails"
        }
    }

    public struct GetVariablesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The max size per page determined for the get variable request. 
        public let maxResults: Int?
        /// The name of the variable. 
        public let name: String?
        /// The next page token of the get variable request. 
        public let nextToken: String?

        public init(maxResults: Int? = nil, name: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.name = name
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case name = "name"
            case nextToken = "nextToken"
        }
    }

    public struct GetVariablesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "variables", required: false, type: .list)
        ]

        /// The next page token to be used in subsequent requests. 
        public let nextToken: String?
        /// The names of the variables returned. 
        public let variables: [Variable]?

        public init(nextToken: String? = nil, variables: [Variable]? = nil) {
            self.nextToken = nextToken
            self.variables = variables
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case variables = "variables"
        }
    }

    public struct KMSKey: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "kmsEncryptionKeyArn", required: false, type: .string)
        ]

        /// The encryption key ARN.
        public let kmsEncryptionKeyArn: String?

        public init(kmsEncryptionKeyArn: String? = nil) {
            self.kmsEncryptionKeyArn = kmsEncryptionKeyArn
        }

        private enum CodingKeys: String, CodingKey {
            case kmsEncryptionKeyArn = "kmsEncryptionKeyArn"
        }
    }

    public struct Label: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "createdTime", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]

        /// The label ARN.
        public let arn: String?
        /// Timestamp of when the event type was created.
        public let createdTime: String?
        /// The label description.
        public let description: String?
        /// Timestamp of when the label was last updated.
        public let lastUpdatedTime: String?
        /// The label name.
        public let name: String?

        public init(arn: String? = nil, createdTime: String? = nil, description: String? = nil, lastUpdatedTime: String? = nil, name: String? = nil) {
            self.arn = arn
            self.createdTime = createdTime
            self.description = description
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdTime = "createdTime"
            case description = "description"
            case lastUpdatedTime = "lastUpdatedTime"
            case name = "name"
        }
    }

    public struct LabelSchema: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "labelMapper", required: true, type: .map)
        ]

        /// The label mapper maps the Amazon Fraud Detector supported model classification labels (FRAUD, LEGIT) to the appropriate event type labels. For example, if "FRAUD" and "LEGIT" are Amazon Fraud Detector supported labels, this mapper could be: {"FRAUD" =&gt; ["0"], "LEGIT" =&gt; ["1"]} or {"FRAUD" =&gt; ["false"], "LEGIT" =&gt; ["true"]} or {"FRAUD" =&gt; ["fraud", "abuse"], "LEGIT" =&gt; ["legit", "safe"]}. The value part of the mapper is a list, because you may have multiple label variants from your event type for a single Amazon Fraud Detector label. 
        public let labelMapper: [String: [String]]

        public init(labelMapper: [String: [String]]) {
            self.labelMapper = labelMapper
        }

        private enum CodingKeys: String, CodingKey {
            case labelMapper = "labelMapper"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceARN", required: true, type: .string)
        ]

        /// The maximum number of objects to return for the request. 
        public let maxResults: Int?
        /// The next token from the previous results.
        public let nextToken: String?
        /// The ARN that specifies the resource whose tags you want to list.
        public let resourceARN: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, resourceARN: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceARN = resourceARN
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 50)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 50)
            try validate(self.resourceARN, name:"resourceARN", parent: name, max: 256)
            try validate(self.resourceARN, name:"resourceARN", parent: name, min: 1)
            try validate(self.resourceARN, name:"resourceARN", parent: name, pattern: "^arn\\:aws[a-z-]{0,15}\\:frauddetector\\:[a-z0-9-]{3,20}\\:[0-9]{12}\\:[^\\s]{2,128}$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case resourceARN = "resourceARN"
        }
    }

    public struct ListTagsForResourceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The next token for subsequent requests. 
        public let nextToken: String?
        /// A collection of key and value pairs.
        public let tags: [Tag]?

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case tags = "tags"
        }
    }

    public struct MetricDataPoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fpr", required: false, type: .float), 
            AWSShapeMember(label: "precision", required: false, type: .float), 
            AWSShapeMember(label: "threshold", required: false, type: .float), 
            AWSShapeMember(label: "tpr", required: false, type: .float)
        ]

        /// The false positive rate. This is the percentage of total legitimate events that are incorrectly predicted as fraud.
        public let fpr: Float?
        /// The percentage of fraud events correctly predicted as fraudulent as compared to all events predicted as fraudulent.
        public let precision: Float?
        /// The model threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud.
        public let threshold: Float?
        /// The true positive rate. This is the percentage of total fraud the model detects. Also known as capture rate.
        public let tpr: Float?

        public init(fpr: Float? = nil, precision: Float? = nil, threshold: Float? = nil, tpr: Float? = nil) {
            self.fpr = fpr
            self.precision = precision
            self.threshold = threshold
            self.tpr = tpr
        }

        private enum CodingKeys: String, CodingKey {
            case fpr = "fpr"
            case precision = "precision"
            case threshold = "threshold"
            case tpr = "tpr"
        }
    }

    public struct Model: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "createdTime", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "eventTypeName", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .string), 
            AWSShapeMember(label: "modelId", required: false, type: .string), 
            AWSShapeMember(label: "modelType", required: false, type: .enum)
        ]

        /// The ARN of the model.
        public let arn: String?
        /// Timestamp of when the model was created.
        public let createdTime: String?
        /// The model description.
        public let description: String?
        /// The name of the event type.
        public let eventTypeName: String?
        /// Timestamp of last time the model was updated.
        public let lastUpdatedTime: String?
        /// The model ID.
        public let modelId: String?
        /// The model type.
        public let modelType: ModelTypeEnum?

        public init(arn: String? = nil, createdTime: String? = nil, description: String? = nil, eventTypeName: String? = nil, lastUpdatedTime: String? = nil, modelId: String? = nil, modelType: ModelTypeEnum? = nil) {
            self.arn = arn
            self.createdTime = createdTime
            self.description = description
            self.eventTypeName = eventTypeName
            self.lastUpdatedTime = lastUpdatedTime
            self.modelId = modelId
            self.modelType = modelType
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdTime = "createdTime"
            case description = "description"
            case eventTypeName = "eventTypeName"
            case lastUpdatedTime = "lastUpdatedTime"
            case modelId = "modelId"
            case modelType = "modelType"
        }
    }

    public struct ModelEndpointDataBlob: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "byteBuffer", required: false, type: .blob), 
            AWSShapeMember(label: "contentType", required: false, type: .string)
        ]

        /// The byte buffer of the Amazon SageMaker model endpoint input data blob.
        public let byteBuffer: Data?
        /// The content type of the Amazon SageMaker model endpoint input data blob. 
        public let contentType: String?

        public init(byteBuffer: Data? = nil, contentType: String? = nil) {
            self.byteBuffer = byteBuffer
            self.contentType = contentType
        }

        public func validate(name: String) throws {
            try validate(self.contentType, name:"contentType", parent: name, max: 1024)
            try validate(self.contentType, name:"contentType", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case byteBuffer = "byteBuffer"
            case contentType = "contentType"
        }
    }

    public struct ModelInputConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "csvInputTemplate", required: false, type: .string), 
            AWSShapeMember(label: "eventTypeName", required: false, type: .string), 
            AWSShapeMember(label: "format", required: false, type: .enum), 
            AWSShapeMember(label: "jsonInputTemplate", required: false, type: .string), 
            AWSShapeMember(label: "useEventVariables", required: true, type: .boolean)
        ]

        ///  Template for constructing the CSV input-data sent to SageMaker. At event-evaluation, the placeholders for variable-names in the template will be replaced with the variable values before being sent to SageMaker. 
        public let csvInputTemplate: String?
        /// The event type name.
        public let eventTypeName: String?
        ///  The format of the model input configuration. The format differs depending on if it is passed through to SageMaker or constructed by Amazon Fraud Detector.
        public let format: ModelInputDataFormat?
        ///  Template for constructing the JSON input-data sent to SageMaker. At event-evaluation, the placeholders for variable names in the template will be replaced with the variable values before being sent to SageMaker. 
        public let jsonInputTemplate: String?
        /// The event variables.
        public let useEventVariables: Bool

        public init(csvInputTemplate: String? = nil, eventTypeName: String? = nil, format: ModelInputDataFormat? = nil, jsonInputTemplate: String? = nil, useEventVariables: Bool) {
            self.csvInputTemplate = csvInputTemplate
            self.eventTypeName = eventTypeName
            self.format = format
            self.jsonInputTemplate = jsonInputTemplate
            self.useEventVariables = useEventVariables
        }

        public func validate(name: String) throws {
            try validate(self.eventTypeName, name:"eventTypeName", parent: name, max: 64)
            try validate(self.eventTypeName, name:"eventTypeName", parent: name, min: 1)
            try validate(self.eventTypeName, name:"eventTypeName", parent: name, pattern: "^[0-9a-z_-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case csvInputTemplate = "csvInputTemplate"
            case eventTypeName = "eventTypeName"
            case format = "format"
            case jsonInputTemplate = "jsonInputTemplate"
            case useEventVariables = "useEventVariables"
        }
    }

    public struct ModelOutputConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "csvIndexToVariableMap", required: false, type: .map), 
            AWSShapeMember(label: "format", required: true, type: .enum), 
            AWSShapeMember(label: "jsonKeyToVariableMap", required: false, type: .map)
        ]

        /// A map of CSV index values in the SageMaker response to the Amazon Fraud Detector variables. 
        public let csvIndexToVariableMap: [String: String]?
        /// The format of the model output configuration.
        public let format: ModelOutputDataFormat
        /// A map of JSON keys in response from SageMaker to the Amazon Fraud Detector variables. 
        public let jsonKeyToVariableMap: [String: String]?

        public init(csvIndexToVariableMap: [String: String]? = nil, format: ModelOutputDataFormat, jsonKeyToVariableMap: [String: String]? = nil) {
            self.csvIndexToVariableMap = csvIndexToVariableMap
            self.format = format
            self.jsonKeyToVariableMap = jsonKeyToVariableMap
        }

        private enum CodingKeys: String, CodingKey {
            case csvIndexToVariableMap = "csvIndexToVariableMap"
            case format = "format"
            case jsonKeyToVariableMap = "jsonKeyToVariableMap"
        }
    }

    public struct ModelScores: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "modelVersion", required: false, type: .structure), 
            AWSShapeMember(label: "scores", required: false, type: .map)
        ]

        /// The model version.
        public let modelVersion: ModelVersion?
        /// The model's fraud prediction scores.
        public let scores: [String: Float]?

        public init(modelVersion: ModelVersion? = nil, scores: [String: Float]? = nil) {
            self.modelVersion = modelVersion
            self.scores = scores
        }

        private enum CodingKeys: String, CodingKey {
            case modelVersion = "modelVersion"
            case scores = "scores"
        }
    }

    public struct ModelVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "modelId", required: true, type: .string), 
            AWSShapeMember(label: "modelType", required: true, type: .enum), 
            AWSShapeMember(label: "modelVersionNumber", required: true, type: .string)
        ]

        /// The model version ARN.
        public let arn: String?
        /// The model ID.
        public let modelId: String
        /// The model type.
        public let modelType: ModelTypeEnum
        /// The model version number.
        public let modelVersionNumber: String

        public init(arn: String? = nil, modelId: String, modelType: ModelTypeEnum, modelVersionNumber: String) {
            self.arn = arn
            self.modelId = modelId
            self.modelType = modelType
            self.modelVersionNumber = modelVersionNumber
        }

        public func validate(name: String) throws {
            try validate(self.arn, name:"arn", parent: name, max: 256)
            try validate(self.arn, name:"arn", parent: name, min: 1)
            try validate(self.arn, name:"arn", parent: name, pattern: "^arn\\:aws[a-z-]{0,15}\\:frauddetector\\:[a-z0-9-]{3,20}\\:[0-9]{12}\\:[^\\s]{2,128}$")
            try validate(self.modelId, name:"modelId", parent: name, max: 64)
            try validate(self.modelId, name:"modelId", parent: name, min: 1)
            try validate(self.modelId, name:"modelId", parent: name, pattern: "^[0-9a-z_]+$")
            try validate(self.modelVersionNumber, name:"modelVersionNumber", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case modelId = "modelId"
            case modelType = "modelType"
            case modelVersionNumber = "modelVersionNumber"
        }
    }

    public struct ModelVersionDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "createdTime", required: false, type: .string), 
            AWSShapeMember(label: "externalEventsDetail", required: false, type: .structure), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .string), 
            AWSShapeMember(label: "modelId", required: false, type: .string), 
            AWSShapeMember(label: "modelType", required: false, type: .enum), 
            AWSShapeMember(label: "modelVersionNumber", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .string), 
            AWSShapeMember(label: "trainingDataSchema", required: false, type: .structure), 
            AWSShapeMember(label: "trainingDataSource", required: false, type: .enum), 
            AWSShapeMember(label: "trainingResult", required: false, type: .structure)
        ]

        /// The model version ARN.
        public let arn: String?
        /// The timestamp when the model was created.
        public let createdTime: String?
        /// The event details.
        public let externalEventsDetail: ExternalEventsDetail?
        /// The timestamp when the model was last updated.
        public let lastUpdatedTime: String?
        /// The model ID.
        public let modelId: String?
        /// The model type.
        public let modelType: ModelTypeEnum?
        /// The model version number.
        public let modelVersionNumber: String?
        /// The status of the model version.
        public let status: String?
        /// The training data schema.
        public let trainingDataSchema: TrainingDataSchema?
        /// The model version training data source.
        public let trainingDataSource: TrainingDataSourceEnum?
        /// The training results.
        public let trainingResult: TrainingResult?

        public init(arn: String? = nil, createdTime: String? = nil, externalEventsDetail: ExternalEventsDetail? = nil, lastUpdatedTime: String? = nil, modelId: String? = nil, modelType: ModelTypeEnum? = nil, modelVersionNumber: String? = nil, status: String? = nil, trainingDataSchema: TrainingDataSchema? = nil, trainingDataSource: TrainingDataSourceEnum? = nil, trainingResult: TrainingResult? = nil) {
            self.arn = arn
            self.createdTime = createdTime
            self.externalEventsDetail = externalEventsDetail
            self.lastUpdatedTime = lastUpdatedTime
            self.modelId = modelId
            self.modelType = modelType
            self.modelVersionNumber = modelVersionNumber
            self.status = status
            self.trainingDataSchema = trainingDataSchema
            self.trainingDataSource = trainingDataSource
            self.trainingResult = trainingResult
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdTime = "createdTime"
            case externalEventsDetail = "externalEventsDetail"
            case lastUpdatedTime = "lastUpdatedTime"
            case modelId = "modelId"
            case modelType = "modelType"
            case modelVersionNumber = "modelVersionNumber"
            case status = "status"
            case trainingDataSchema = "trainingDataSchema"
            case trainingDataSource = "trainingDataSource"
            case trainingResult = "trainingResult"
        }
    }

    public struct Outcome: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "createdTime", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]

        /// The outcome ARN.
        public let arn: String?
        /// The timestamp when the outcome was created.
        public let createdTime: String?
        /// The outcome description.
        public let description: String?
        /// The timestamp when the outcome was last updated.
        public let lastUpdatedTime: String?
        /// The outcome name.
        public let name: String?

        public init(arn: String? = nil, createdTime: String? = nil, description: String? = nil, lastUpdatedTime: String? = nil, name: String? = nil) {
            self.arn = arn
            self.createdTime = createdTime
            self.description = description
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdTime = "createdTime"
            case description = "description"
            case lastUpdatedTime = "lastUpdatedTime"
            case name = "name"
        }
    }

    public struct PutDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "detectorId", required: true, type: .string), 
            AWSShapeMember(label: "eventTypeName", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The description of the detector.
        public let description: String?
        /// The detector ID. 
        public let detectorId: String
        /// The name of the event type.
        public let eventTypeName: String
        /// A collection of key and value pairs.
        public let tags: [Tag]?

        public init(description: String? = nil, detectorId: String, eventTypeName: String, tags: [Tag]? = nil) {
            self.description = description
            self.detectorId = detectorId
            self.eventTypeName = eventTypeName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 128)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, max: 64)
            try validate(self.detectorId, name:"detectorId", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, pattern: "^[0-9a-z_-]+$")
            try validate(self.eventTypeName, name:"eventTypeName", parent: name, max: 64)
            try validate(self.eventTypeName, name:"eventTypeName", parent: name, min: 1)
            try validate(self.eventTypeName, name:"eventTypeName", parent: name, pattern: "^[0-9a-z_-]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case detectorId = "detectorId"
            case eventTypeName = "eventTypeName"
            case tags = "tags"
        }
    }

    public struct PutDetectorResult: AWSShape {


        public init() {
        }

    }

    public struct PutEntityTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The description.
        public let description: String?
        /// The name of the entity type.
        public let name: String
        /// A collection of key and value pairs.
        public let tags: [Tag]?

        public init(description: String? = nil, name: String, tags: [Tag]? = nil) {
            self.description = description
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 128)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, max: 64)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_-]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct PutEntityTypeResult: AWSShape {


        public init() {
        }

    }

    public struct PutEventTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "entityTypes", required: true, type: .list), 
            AWSShapeMember(label: "eventVariables", required: true, type: .list), 
            AWSShapeMember(label: "labels", required: false, type: .list), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The description of the event type.
        public let description: String?
        /// The entity type for the event type. Example entity types: customer, merchant, account.
        public let entityTypes: [String]
        /// The event type variables.
        public let eventVariables: [String]
        /// The event type labels.
        public let labels: [String]?
        /// The name.
        public let name: String
        /// A collection of key and value pairs.
        public let tags: [Tag]?

        public init(description: String? = nil, entityTypes: [String], eventVariables: [String], labels: [String]? = nil, name: String, tags: [Tag]? = nil) {
            self.description = description
            self.entityTypes = entityTypes
            self.eventVariables = eventVariables
            self.labels = labels
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 128)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.entityTypes, name:"entityTypes", parent: name, min: 1)
            try validate(self.eventVariables, name:"eventVariables", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, max: 64)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_-]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case entityTypes = "entityTypes"
            case eventVariables = "eventVariables"
            case labels = "labels"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct PutEventTypeResult: AWSShape {


        public init() {
        }

    }

    public struct PutExternalModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inputConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "invokeModelEndpointRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "modelEndpoint", required: true, type: .string), 
            AWSShapeMember(label: "modelEndpointStatus", required: true, type: .enum), 
            AWSShapeMember(label: "modelSource", required: true, type: .enum), 
            AWSShapeMember(label: "outputConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The model endpoint input configuration.
        public let inputConfiguration: ModelInputConfiguration
        /// The IAM role used to invoke the model endpoint.
        public let invokeModelEndpointRoleArn: String
        /// The model endpoints name.
        public let modelEndpoint: String
        /// The model endpoint’s status in Amazon Fraud Detector.
        public let modelEndpointStatus: ModelEndpointStatus
        /// The source of the model.
        public let modelSource: ModelSource
        /// The model endpoint output configuration.
        public let outputConfiguration: ModelOutputConfiguration
        /// A collection of key and value pairs.
        public let tags: [Tag]?

        public init(inputConfiguration: ModelInputConfiguration, invokeModelEndpointRoleArn: String, modelEndpoint: String, modelEndpointStatus: ModelEndpointStatus, modelSource: ModelSource, outputConfiguration: ModelOutputConfiguration, tags: [Tag]? = nil) {
            self.inputConfiguration = inputConfiguration
            self.invokeModelEndpointRoleArn = invokeModelEndpointRoleArn
            self.modelEndpoint = modelEndpoint
            self.modelEndpointStatus = modelEndpointStatus
            self.modelSource = modelSource
            self.outputConfiguration = outputConfiguration
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.inputConfiguration.validate(name: "\(name).inputConfiguration")
            try validate(self.modelEndpoint, name:"modelEndpoint", parent: name, max: 63)
            try validate(self.modelEndpoint, name:"modelEndpoint", parent: name, min: 1)
            try validate(self.modelEndpoint, name:"modelEndpoint", parent: name, pattern: "^[0-9A-Za-z_-]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case inputConfiguration = "inputConfiguration"
            case invokeModelEndpointRoleArn = "invokeModelEndpointRoleArn"
            case modelEndpoint = "modelEndpoint"
            case modelEndpointStatus = "modelEndpointStatus"
            case modelSource = "modelSource"
            case outputConfiguration = "outputConfiguration"
            case tags = "tags"
        }
    }

    public struct PutExternalModelResult: AWSShape {


        public init() {
        }

    }

    public struct PutKMSEncryptionKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "kmsEncryptionKeyArn", required: true, type: .string)
        ]

        /// The KMS encryption key ARN.
        public let kmsEncryptionKeyArn: String

        public init(kmsEncryptionKeyArn: String) {
            self.kmsEncryptionKeyArn = kmsEncryptionKeyArn
        }

        public func validate(name: String) throws {
            try validate(self.kmsEncryptionKeyArn, name:"kmsEncryptionKeyArn", parent: name, max: 90)
            try validate(self.kmsEncryptionKeyArn, name:"kmsEncryptionKeyArn", parent: name, min: 7)
            try validate(self.kmsEncryptionKeyArn, name:"kmsEncryptionKeyArn", parent: name, pattern: "^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}|DEFAULT|arn:[a-zA-Z0-9-]+:kms:[a-zA-Z0-9-]+:\\d{12}:key\\/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$")
        }

        private enum CodingKeys: String, CodingKey {
            case kmsEncryptionKeyArn = "kmsEncryptionKeyArn"
        }
    }

    public struct PutKMSEncryptionKeyResult: AWSShape {


        public init() {
        }

    }

    public struct PutLabelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The label description.
        public let description: String?
        /// The label name.
        public let name: String
        public let tags: [Tag]?

        public init(description: String? = nil, name: String, tags: [Tag]? = nil) {
            self.description = description
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 128)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, max: 64)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_-]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct PutLabelResult: AWSShape {


        public init() {
        }

    }

    public struct PutOutcomeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The outcome description.
        public let description: String?
        /// The name of the outcome.
        public let name: String
        /// A collection of key and value pairs.
        public let tags: [Tag]?

        public init(description: String? = nil, name: String, tags: [Tag]? = nil) {
            self.description = description
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 128)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, max: 64)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^[0-9a-z_-]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct PutOutcomeResult: AWSShape {


        public init() {
        }

    }

    public struct Rule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorId", required: true, type: .string), 
            AWSShapeMember(label: "ruleId", required: true, type: .string), 
            AWSShapeMember(label: "ruleVersion", required: true, type: .string)
        ]

        /// The detector for which the rule is associated.
        public let detectorId: String
        /// The rule ID.
        public let ruleId: String
        /// The rule version.
        public let ruleVersion: String

        public init(detectorId: String, ruleId: String, ruleVersion: String) {
            self.detectorId = detectorId
            self.ruleId = ruleId
            self.ruleVersion = ruleVersion
        }

        public func validate(name: String) throws {
            try validate(self.detectorId, name:"detectorId", parent: name, max: 64)
            try validate(self.detectorId, name:"detectorId", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, pattern: "^[0-9a-z_-]+$")
            try validate(self.ruleId, name:"ruleId", parent: name, max: 64)
            try validate(self.ruleId, name:"ruleId", parent: name, min: 1)
            try validate(self.ruleId, name:"ruleId", parent: name, pattern: "^[0-9a-z_-]+$")
            try validate(self.ruleVersion, name:"ruleVersion", parent: name, max: 5)
            try validate(self.ruleVersion, name:"ruleVersion", parent: name, min: 1)
            try validate(self.ruleVersion, name:"ruleVersion", parent: name, pattern: "^([1-9][0-9]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case ruleId = "ruleId"
            case ruleVersion = "ruleVersion"
        }
    }

    public struct RuleDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "createdTime", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "detectorId", required: false, type: .string), 
            AWSShapeMember(label: "expression", required: false, type: .string), 
            AWSShapeMember(label: "language", required: false, type: .enum), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .string), 
            AWSShapeMember(label: "outcomes", required: false, type: .list), 
            AWSShapeMember(label: "ruleId", required: false, type: .string), 
            AWSShapeMember(label: "ruleVersion", required: false, type: .string)
        ]

        /// The rule ARN.
        public let arn: String?
        /// The timestamp of when the rule was created.
        public let createdTime: String?
        /// The rule description.
        public let description: String?
        /// The detector for which the rule is associated.
        public let detectorId: String?
        /// The rule expression.
        public let expression: String?
        /// The rule language.
        public let language: Language?
        /// Timestamp of the last time the rule was updated.
        public let lastUpdatedTime: String?
        /// The rule outcomes.
        public let outcomes: [String]?
        /// The rule ID.
        public let ruleId: String?
        /// The rule version.
        public let ruleVersion: String?

        public init(arn: String? = nil, createdTime: String? = nil, description: String? = nil, detectorId: String? = nil, expression: String? = nil, language: Language? = nil, lastUpdatedTime: String? = nil, outcomes: [String]? = nil, ruleId: String? = nil, ruleVersion: String? = nil) {
            self.arn = arn
            self.createdTime = createdTime
            self.description = description
            self.detectorId = detectorId
            self.expression = expression
            self.language = language
            self.lastUpdatedTime = lastUpdatedTime
            self.outcomes = outcomes
            self.ruleId = ruleId
            self.ruleVersion = ruleVersion
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdTime = "createdTime"
            case description = "description"
            case detectorId = "detectorId"
            case expression = "expression"
            case language = "language"
            case lastUpdatedTime = "lastUpdatedTime"
            case outcomes = "outcomes"
            case ruleId = "ruleId"
            case ruleVersion = "ruleVersion"
        }
    }

    public struct RuleResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "outcomes", required: false, type: .list), 
            AWSShapeMember(label: "ruleId", required: false, type: .string)
        ]

        /// The outcomes of the matched rule, based on the rule execution mode.
        public let outcomes: [String]?
        /// The rule ID that was matched, based on the rule execution mode.
        public let ruleId: String?

        public init(outcomes: [String]? = nil, ruleId: String? = nil) {
            self.outcomes = outcomes
            self.ruleId = ruleId
        }

        private enum CodingKeys: String, CodingKey {
            case outcomes = "outcomes"
            case ruleId = "ruleId"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "value", required: true, type: .string)
        ]

        /// A tag key.
        public let key: String
        /// A value assigned to a tag key.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.key, name:"key", parent: name, max: 128)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.key, name:"key", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try validate(self.value, name:"value", parent: name, max: 256)
            try validate(self.value, name:"value", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceARN", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]

        /// The resource ARN.
        public let resourceARN: String
        /// The tags to assign to the resource.
        public let tags: [Tag]

        public init(resourceARN: String, tags: [Tag]) {
            self.resourceARN = resourceARN
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.resourceARN, name:"resourceARN", parent: name, max: 256)
            try validate(self.resourceARN, name:"resourceARN", parent: name, min: 1)
            try validate(self.resourceARN, name:"resourceARN", parent: name, pattern: "^arn\\:aws[a-z-]{0,15}\\:frauddetector\\:[a-z0-9-]{3,20}\\:[0-9]{12}\\:[^\\s]{2,128}$")
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "resourceARN"
            case tags = "tags"
        }
    }

    public struct TagResourceResult: AWSShape {


        public init() {
        }

    }

    public struct TrainingDataSchema: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "labelSchema", required: true, type: .structure), 
            AWSShapeMember(label: "modelVariables", required: true, type: .list)
        ]

        public let labelSchema: LabelSchema
        /// The training data schema variables.
        public let modelVariables: [String]

        public init(labelSchema: LabelSchema, modelVariables: [String]) {
            self.labelSchema = labelSchema
            self.modelVariables = modelVariables
        }

        private enum CodingKeys: String, CodingKey {
            case labelSchema = "labelSchema"
            case modelVariables = "modelVariables"
        }
    }

    public struct TrainingMetrics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "auc", required: false, type: .float), 
            AWSShapeMember(label: "metricDataPoints", required: false, type: .list)
        ]

        /// The area under the curve. This summarizes true positive rate (TPR) and false positive rate (FPR) across all possible model score thresholds. A model with no predictive power has an AUC of 0.5, whereas a perfect model has a score of 1.0.
        public let auc: Float?
        /// The data points details.
        public let metricDataPoints: [MetricDataPoint]?

        public init(auc: Float? = nil, metricDataPoints: [MetricDataPoint]? = nil) {
            self.auc = auc
            self.metricDataPoints = metricDataPoints
        }

        private enum CodingKeys: String, CodingKey {
            case auc = "auc"
            case metricDataPoints = "metricDataPoints"
        }
    }

    public struct TrainingResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataValidationMetrics", required: false, type: .structure), 
            AWSShapeMember(label: "trainingMetrics", required: false, type: .structure)
        ]

        /// The validation metrics.
        public let dataValidationMetrics: DataValidationMetrics?
        /// The training metric details.
        public let trainingMetrics: TrainingMetrics?

        public init(dataValidationMetrics: DataValidationMetrics? = nil, trainingMetrics: TrainingMetrics? = nil) {
            self.dataValidationMetrics = dataValidationMetrics
            self.trainingMetrics = trainingMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case dataValidationMetrics = "dataValidationMetrics"
            case trainingMetrics = "trainingMetrics"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceARN", required: true, type: .string), 
            AWSShapeMember(label: "tagKeys", required: true, type: .list)
        ]

        /// The ARN of the resource from which to remove the tag.
        public let resourceARN: String
        /// The resource ARN.
        public let tagKeys: [String]

        public init(resourceARN: String, tagKeys: [String]) {
            self.resourceARN = resourceARN
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try validate(self.resourceARN, name:"resourceARN", parent: name, max: 256)
            try validate(self.resourceARN, name:"resourceARN", parent: name, min: 1)
            try validate(self.resourceARN, name:"resourceARN", parent: name, pattern: "^arn\\:aws[a-z-]{0,15}\\:frauddetector\\:[a-z0-9-]{3,20}\\:[0-9]{12}\\:[^\\s]{2,128}$")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
                try validate($0, name: "tagKeys[]", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
            try validate(self.tagKeys, name:"tagKeys", parent: name, max: 50)
            try validate(self.tagKeys, name:"tagKeys", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "resourceARN"
            case tagKeys = "tagKeys"
        }
    }

    public struct UntagResourceResult: AWSShape {


        public init() {
        }

    }

    public struct UpdateDetectorVersionMetadataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: true, type: .string), 
            AWSShapeMember(label: "detectorId", required: true, type: .string), 
            AWSShapeMember(label: "detectorVersionId", required: true, type: .string)
        ]

        /// The description.
        public let description: String
        /// The detector ID.
        public let detectorId: String
        /// The detector version ID. 
        public let detectorVersionId: String

        public init(description: String, detectorId: String, detectorVersionId: String) {
            self.description = description
            self.detectorId = detectorId
            self.detectorVersionId = detectorVersionId
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 128)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, max: 64)
            try validate(self.detectorId, name:"detectorId", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, pattern: "^[0-9a-z_-]+$")
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, max: 5)
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, min: 1)
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, pattern: "^([1-9][0-9]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case detectorId = "detectorId"
            case detectorVersionId = "detectorVersionId"
        }
    }

    public struct UpdateDetectorVersionMetadataResult: AWSShape {


        public init() {
        }

    }

    public struct UpdateDetectorVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "detectorId", required: true, type: .string), 
            AWSShapeMember(label: "detectorVersionId", required: true, type: .string), 
            AWSShapeMember(label: "externalModelEndpoints", required: true, type: .list), 
            AWSShapeMember(label: "modelVersions", required: false, type: .list), 
            AWSShapeMember(label: "ruleExecutionMode", required: false, type: .enum), 
            AWSShapeMember(label: "rules", required: true, type: .list)
        ]

        /// The detector version description. 
        public let description: String?
        /// The parent detector ID for the detector version you want to update.
        public let detectorId: String
        /// The detector version ID. 
        public let detectorVersionId: String
        /// The Amazon SageMaker model endpoints to include in the detector version.
        public let externalModelEndpoints: [String]
        /// The model versions to include in the detector version.
        public let modelVersions: [ModelVersion]?
        /// The rule execution mode to add to the detector. If you specify FIRST_MATCHED, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule. If you specifiy ALL_MATCHED, Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status. The default behavior is FIRST_MATCHED.
        public let ruleExecutionMode: RuleExecutionMode?
        /// The rules to include in the detector version.
        public let rules: [Rule]

        public init(description: String? = nil, detectorId: String, detectorVersionId: String, externalModelEndpoints: [String], modelVersions: [ModelVersion]? = nil, ruleExecutionMode: RuleExecutionMode? = nil, rules: [Rule]) {
            self.description = description
            self.detectorId = detectorId
            self.detectorVersionId = detectorVersionId
            self.externalModelEndpoints = externalModelEndpoints
            self.modelVersions = modelVersions
            self.ruleExecutionMode = ruleExecutionMode
            self.rules = rules
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 128)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, max: 64)
            try validate(self.detectorId, name:"detectorId", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, pattern: "^[0-9a-z_-]+$")
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, max: 5)
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, min: 1)
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, pattern: "^([1-9][0-9]*)$")
            try self.modelVersions?.forEach {
                try $0.validate(name: "\(name).modelVersions[]")
            }
            try self.rules.forEach {
                try $0.validate(name: "\(name).rules[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case detectorId = "detectorId"
            case detectorVersionId = "detectorVersionId"
            case externalModelEndpoints = "externalModelEndpoints"
            case modelVersions = "modelVersions"
            case ruleExecutionMode = "ruleExecutionMode"
            case rules = "rules"
        }
    }

    public struct UpdateDetectorVersionResult: AWSShape {


        public init() {
        }

    }

    public struct UpdateDetectorVersionStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detectorId", required: true, type: .string), 
            AWSShapeMember(label: "detectorVersionId", required: true, type: .string), 
            AWSShapeMember(label: "status", required: true, type: .enum)
        ]

        /// The detector ID. 
        public let detectorId: String
        /// The detector version ID. 
        public let detectorVersionId: String
        /// The new status.
        public let status: DetectorVersionStatus

        public init(detectorId: String, detectorVersionId: String, status: DetectorVersionStatus) {
            self.detectorId = detectorId
            self.detectorVersionId = detectorVersionId
            self.status = status
        }

        public func validate(name: String) throws {
            try validate(self.detectorId, name:"detectorId", parent: name, max: 64)
            try validate(self.detectorId, name:"detectorId", parent: name, min: 1)
            try validate(self.detectorId, name:"detectorId", parent: name, pattern: "^[0-9a-z_-]+$")
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, max: 5)
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, min: 1)
            try validate(self.detectorVersionId, name:"detectorVersionId", parent: name, pattern: "^([1-9][0-9]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case detectorVersionId = "detectorVersionId"
            case status = "status"
        }
    }

    public struct UpdateDetectorVersionStatusResult: AWSShape {


        public init() {
        }

    }

    public struct UpdateModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "modelId", required: true, type: .string), 
            AWSShapeMember(label: "modelType", required: true, type: .enum)
        ]

        /// The new model description.
        public let description: String?
        /// The model ID.
        public let modelId: String
        /// The model type.
        public let modelType: ModelTypeEnum

        public init(description: String? = nil, modelId: String, modelType: ModelTypeEnum) {
            self.description = description
            self.modelId = modelId
            self.modelType = modelType
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 128)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.modelId, name:"modelId", parent: name, max: 64)
            try validate(self.modelId, name:"modelId", parent: name, min: 1)
            try validate(self.modelId, name:"modelId", parent: name, pattern: "^[0-9a-z_]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case modelId = "modelId"
            case modelType = "modelType"
        }
    }

    public struct UpdateModelResult: AWSShape {


        public init() {
        }

    }

    public struct UpdateModelVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "externalEventsDetail", required: false, type: .structure), 
            AWSShapeMember(label: "majorVersionNumber", required: true, type: .string), 
            AWSShapeMember(label: "modelId", required: true, type: .string), 
            AWSShapeMember(label: "modelType", required: true, type: .enum), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The event details.
        public let externalEventsDetail: ExternalEventsDetail?
        /// The major version number.
        public let majorVersionNumber: String
        /// The model ID.
        public let modelId: String
        /// The model type.
        public let modelType: ModelTypeEnum
        /// A collection of key and value pairs.
        public let tags: [Tag]?

        public init(externalEventsDetail: ExternalEventsDetail? = nil, majorVersionNumber: String, modelId: String, modelType: ModelTypeEnum, tags: [Tag]? = nil) {
            self.externalEventsDetail = externalEventsDetail
            self.majorVersionNumber = majorVersionNumber
            self.modelId = modelId
            self.modelType = modelType
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.externalEventsDetail?.validate(name: "\(name).externalEventsDetail")
            try validate(self.majorVersionNumber, name:"majorVersionNumber", parent: name, max: 5)
            try validate(self.majorVersionNumber, name:"majorVersionNumber", parent: name, min: 1)
            try validate(self.majorVersionNumber, name:"majorVersionNumber", parent: name, pattern: "^([1-9][0-9]*)$")
            try validate(self.modelId, name:"modelId", parent: name, max: 64)
            try validate(self.modelId, name:"modelId", parent: name, min: 1)
            try validate(self.modelId, name:"modelId", parent: name, pattern: "^[0-9a-z_]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case externalEventsDetail = "externalEventsDetail"
            case majorVersionNumber = "majorVersionNumber"
            case modelId = "modelId"
            case modelType = "modelType"
            case tags = "tags"
        }
    }

    public struct UpdateModelVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "modelId", required: false, type: .string), 
            AWSShapeMember(label: "modelType", required: false, type: .enum), 
            AWSShapeMember(label: "modelVersionNumber", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .string)
        ]

        /// The model ID.
        public let modelId: String?
        /// The model type.
        public let modelType: ModelTypeEnum?
        /// The model version number of the model version updated.
        public let modelVersionNumber: String?
        /// The status of the updated model version.
        public let status: String?

        public init(modelId: String? = nil, modelType: ModelTypeEnum? = nil, modelVersionNumber: String? = nil, status: String? = nil) {
            self.modelId = modelId
            self.modelType = modelType
            self.modelVersionNumber = modelVersionNumber
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case modelId = "modelId"
            case modelType = "modelType"
            case modelVersionNumber = "modelVersionNumber"
            case status = "status"
        }
    }

    public struct UpdateModelVersionStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "modelId", required: true, type: .string), 
            AWSShapeMember(label: "modelType", required: true, type: .enum), 
            AWSShapeMember(label: "modelVersionNumber", required: true, type: .string), 
            AWSShapeMember(label: "status", required: true, type: .enum)
        ]

        /// The model ID of the model version to update.
        public let modelId: String
        /// The model type.
        public let modelType: ModelTypeEnum
        /// The model version number.
        public let modelVersionNumber: String
        /// The model version status.
        public let status: ModelVersionStatus

        public init(modelId: String, modelType: ModelTypeEnum, modelVersionNumber: String, status: ModelVersionStatus) {
            self.modelId = modelId
            self.modelType = modelType
            self.modelVersionNumber = modelVersionNumber
            self.status = status
        }

        public func validate(name: String) throws {
            try validate(self.modelId, name:"modelId", parent: name, max: 64)
            try validate(self.modelId, name:"modelId", parent: name, min: 1)
            try validate(self.modelId, name:"modelId", parent: name, pattern: "^[0-9a-z_]+$")
            try validate(self.modelVersionNumber, name:"modelVersionNumber", parent: name, max: 7)
            try validate(self.modelVersionNumber, name:"modelVersionNumber", parent: name, min: 3)
            try validate(self.modelVersionNumber, name:"modelVersionNumber", parent: name, pattern: "^[1-9][0-9]{0,3}\\.[0-9]{1,2}$")
        }

        private enum CodingKeys: String, CodingKey {
            case modelId = "modelId"
            case modelType = "modelType"
            case modelVersionNumber = "modelVersionNumber"
            case status = "status"
        }
    }

    public struct UpdateModelVersionStatusResult: AWSShape {


        public init() {
        }

    }

    public struct UpdateRuleMetadataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: true, type: .string), 
            AWSShapeMember(label: "rule", required: true, type: .structure)
        ]

        /// The rule description.
        public let description: String
        /// The rule to update.
        public let rule: Rule

        public init(description: String, rule: Rule) {
            self.description = description
            self.rule = rule
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 128)
            try validate(self.description, name:"description", parent: name, min: 1)
            try self.rule.validate(name: "\(name).rule")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case rule = "rule"
        }
    }

    public struct UpdateRuleMetadataResult: AWSShape {


        public init() {
        }

    }

    public struct UpdateRuleVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "expression", required: true, type: .string), 
            AWSShapeMember(label: "language", required: true, type: .enum), 
            AWSShapeMember(label: "outcomes", required: true, type: .list), 
            AWSShapeMember(label: "rule", required: true, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// The description.
        public let description: String?
        /// The rule expression.
        public let expression: String
        /// The language.
        public let language: Language
        /// The outcomes.
        public let outcomes: [String]
        /// The rule to update.
        public let rule: Rule
        /// The tags to assign to the rule version.
        public let tags: [Tag]?

        public init(description: String? = nil, expression: String, language: Language, outcomes: [String], rule: Rule, tags: [Tag]? = nil) {
            self.description = description
            self.expression = expression
            self.language = language
            self.outcomes = outcomes
            self.rule = rule
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 128)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.expression, name:"expression", parent: name, max: 4096)
            try validate(self.expression, name:"expression", parent: name, min: 1)
            try validate(self.outcomes, name:"outcomes", parent: name, min: 1)
            try self.rule.validate(name: "\(name).rule")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 200)
            try validate(self.tags, name:"tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case expression = "expression"
            case language = "language"
            case outcomes = "outcomes"
            case rule = "rule"
            case tags = "tags"
        }
    }

    public struct UpdateRuleVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rule", required: false, type: .structure)
        ]

        /// The new rule version that was created.
        public let rule: Rule?

        public init(rule: Rule? = nil) {
            self.rule = rule
        }

        private enum CodingKeys: String, CodingKey {
            case rule = "rule"
        }
    }

    public struct UpdateVariableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "defaultValue", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "variableType", required: false, type: .string)
        ]

        /// The new default value of the variable.
        public let defaultValue: String?
        /// The new description.
        public let description: String?
        /// The name of the variable.
        public let name: String
        /// The variable type. For more information see Variable types.
        public let variableType: String?

        public init(defaultValue: String? = nil, description: String? = nil, name: String, variableType: String? = nil) {
            self.defaultValue = defaultValue
            self.description = description
            self.name = name
            self.variableType = variableType
        }

        private enum CodingKeys: String, CodingKey {
            case defaultValue = "defaultValue"
            case description = "description"
            case name = "name"
            case variableType = "variableType"
        }
    }

    public struct UpdateVariableResult: AWSShape {


        public init() {
        }

    }

    public struct Variable: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "createdTime", required: false, type: .string), 
            AWSShapeMember(label: "dataSource", required: false, type: .enum), 
            AWSShapeMember(label: "dataType", required: false, type: .enum), 
            AWSShapeMember(label: "defaultValue", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "variableType", required: false, type: .string)
        ]

        /// The ARN of the variable.
        public let arn: String?
        /// The time when the variable was created.
        public let createdTime: String?
        /// The data source of the variable.
        public let dataSource: DataSource?
        /// The data type of the variable. For more information see Variable types.
        public let dataType: DataType?
        /// The default value of the variable.
        public let defaultValue: String?
        /// The description of the variable. 
        public let description: String?
        /// The time when variable was last updated.
        public let lastUpdatedTime: String?
        /// The name of the variable.
        public let name: String?
        /// The variable type of the variable. Valid Values: AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT  
        public let variableType: String?

        public init(arn: String? = nil, createdTime: String? = nil, dataSource: DataSource? = nil, dataType: DataType? = nil, defaultValue: String? = nil, description: String? = nil, lastUpdatedTime: String? = nil, name: String? = nil, variableType: String? = nil) {
            self.arn = arn
            self.createdTime = createdTime
            self.dataSource = dataSource
            self.dataType = dataType
            self.defaultValue = defaultValue
            self.description = description
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.variableType = variableType
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdTime = "createdTime"
            case dataSource = "dataSource"
            case dataType = "dataType"
            case defaultValue = "defaultValue"
            case description = "description"
            case lastUpdatedTime = "lastUpdatedTime"
            case name = "name"
            case variableType = "variableType"
        }
    }

    public struct VariableEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataSource", required: false, type: .string), 
            AWSShapeMember(label: "dataType", required: false, type: .string), 
            AWSShapeMember(label: "defaultValue", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "variableType", required: false, type: .string)
        ]

        /// The data source of the variable.
        public let dataSource: String?
        /// The data type of the variable.
        public let dataType: String?
        /// The default value of the variable.
        public let defaultValue: String?
        /// The description of the variable.
        public let description: String?
        /// The name of the variable.
        public let name: String?
        /// The type of the variable. For more information see Variable types. Valid Values: AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT  
        public let variableType: String?

        public init(dataSource: String? = nil, dataType: String? = nil, defaultValue: String? = nil, description: String? = nil, name: String? = nil, variableType: String? = nil) {
            self.dataSource = dataSource
            self.dataType = dataType
            self.defaultValue = defaultValue
            self.description = description
            self.name = name
            self.variableType = variableType
        }

        private enum CodingKeys: String, CodingKey {
            case dataSource = "dataSource"
            case dataType = "dataType"
            case defaultValue = "defaultValue"
            case description = "description"
            case name = "name"
            case variableType = "variableType"
        }
    }
}
