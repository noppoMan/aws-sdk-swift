// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

@_exported import AWSSDKSwiftCore
import Foundation
import NIO

/**
Client object for interacting with AWS RedshiftDataAPIService service.

You can use the Amazon Redshift Data API to run queries on Amazon Redshift tables. You can run individual SQL statements, which are committed if the statement succeeds. 
*/
public struct RedshiftDataAPIService {

    //MARK: Member variables

    public let client: AWSClient

    //MARK: Initialization

    /// Initialize the RedshiftDataAPIService client
    /// - parameters:
    ///     - accessKeyId: Public access key provided by AWS
    ///     - secretAccessKey: Private access key provided by AWS
    ///     - sessionToken: Token provided by STS.AssumeRole() which allows access to another AWS account
    ///     - region: Region of server you want to communicate with
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middlewares: Array of middlewares to apply to requests and responses
    ///     - eventLoopGroupProvider: EventLoopGroup to use. Use `useAWSClientShared` if the client shall manage its own EventLoopGroup.
    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil, middlewares: [AWSServiceMiddleware] = [], eventLoopGroupProvider: AWSClient.EventLoopGroupProvider = .useAWSClientShared) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            sessionToken: sessionToken,
            region: region,
            amzTarget: "RedshiftData",
            service: "redshift-data",
            serviceProtocol: ServiceProtocol(type: .json, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2019-12-20",
            endpoint: endpoint,
            middlewares: middlewares,
            possibleErrorTypes: [RedshiftDataAPIServiceErrorType.self],
            eventLoopGroupProvider: eventLoopGroupProvider
        )
    }
    
    //MARK: API Calls

    ///  Cancels a running query. To be canceled, a query must be running. 
    public func cancelStatement(_ input: CancelStatementRequest) -> EventLoopFuture<CancelStatementResponse> {
        return client.send(operation: "CancelStatement", path: "/", httpMethod: "POST", input: input)
    }

    ///  Describes the details about a specific instance when a query was run by the Amazon Redshift Data API. The information includes when the query started, when it finished, the query status, the number of rows returned, and the SQL statement. 
    public func describeStatement(_ input: DescribeStatementRequest) -> EventLoopFuture<DescribeStatementResponse> {
        return client.send(operation: "DescribeStatement", path: "/", httpMethod: "POST", input: input)
    }

    ///  Describes the detailed information about a table from metadata in the cluster. The information includes its columns. A token is returned to page through the column list. Depending on the authorization method, use one of the following combinations of request parameters:    AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the cluster identifier that matches the cluster in the secret.    Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the redshift:GetClusterCredentials operation is required to use this method.   
    public func describeTable(_ input: DescribeTableRequest) -> EventLoopFuture<DescribeTableResponse> {
        return client.send(operation: "DescribeTable", path: "/", httpMethod: "POST", input: input)
    }

    ///  Runs an SQL statement, which can be data manipulation language (DML) or data definition language (DDL). This statement must be a single SQL statement. Depending on the authorization method, use one of the following combinations of request parameters:    AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the cluster identifier that matches the cluster in the secret.    Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the redshift:GetClusterCredentials operation is required to use this method.   
    public func executeStatement(_ input: ExecuteStatementInput) -> EventLoopFuture<ExecuteStatementOutput> {
        return client.send(operation: "ExecuteStatement", path: "/", httpMethod: "POST", input: input)
    }

    ///  Fetches the temporarily cached result of an SQL statement. A token is returned to page through the statement results. 
    public func getStatementResult(_ input: GetStatementResultRequest) -> EventLoopFuture<GetStatementResultResponse> {
        return client.send(operation: "GetStatementResult", path: "/", httpMethod: "POST", input: input)
    }

    ///  List the databases in a cluster. A token is returned to page through the database list. Depending on the authorization method, use one of the following combinations of request parameters:    AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the cluster identifier that matches the cluster in the secret.    Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the redshift:GetClusterCredentials operation is required to use this method.   
    public func listDatabases(_ input: ListDatabasesRequest) -> EventLoopFuture<ListDatabasesResponse> {
        return client.send(operation: "ListDatabases", path: "/", httpMethod: "POST", input: input)
    }

    ///  Lists the schemas in a database. A token is returned to page through the schema list. Depending on the authorization method, use one of the following combinations of request parameters:    AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the cluster identifier that matches the cluster in the secret.    Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the redshift:GetClusterCredentials operation is required to use this method.   
    public func listSchemas(_ input: ListSchemasRequest) -> EventLoopFuture<ListSchemasResponse> {
        return client.send(operation: "ListSchemas", path: "/", httpMethod: "POST", input: input)
    }

    ///  List of SQL statements. By default, only finished statements are shown. A token is returned to page through the statement list. 
    public func listStatements(_ input: ListStatementsRequest) -> EventLoopFuture<ListStatementsResponse> {
        return client.send(operation: "ListStatements", path: "/", httpMethod: "POST", input: input)
    }

    ///  List the tables in a database. If neither SchemaPattern nor TablePattern are specified, then all tables in the database are returned. A token is returned to page through the table list. Depending on the authorization method, use one of the following combinations of request parameters:    AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the cluster identifier that matches the cluster in the secret.    Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the redshift:GetClusterCredentials operation is required to use this method.   
    public func listTables(_ input: ListTablesRequest) -> EventLoopFuture<ListTablesResponse> {
        return client.send(operation: "ListTables", path: "/", httpMethod: "POST", input: input)
    }
}
