// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension MediaConnect {
    //MARK: Enums

    public enum Algorithm: String, CustomStringConvertible, Codable {
        case aes128 = "aes128"
        case aes192 = "aes192"
        case aes256 = "aes256"
        public var description: String { return self.rawValue }
    }

    public enum DurationUnits: String, CustomStringConvertible, Codable {
        case months = "MONTHS"
        public var description: String { return self.rawValue }
    }

    public enum EntitlementStatus: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public enum KeyType: String, CustomStringConvertible, Codable {
        case speke = "speke"
        case staticKey = "static-key"
        public var description: String { return self.rawValue }
    }

    public enum PriceUnits: String, CustomStringConvertible, Codable {
        case hourly = "HOURLY"
        public var description: String { return self.rawValue }
    }

    public enum `Protocol`: String, CustomStringConvertible, Codable {
        case zixiPush = "zixi-push"
        case rtpFec = "rtp-fec"
        case rtp = "rtp"
        case zixiPull = "zixi-pull"
        case rist = "rist"
        public var description: String { return self.rawValue }
    }

    public enum ReservationState: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case expired = "EXPIRED"
        case processing = "PROCESSING"
        case canceled = "CANCELED"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case mbpsOutboundBandwidth = "Mbps_Outbound_Bandwidth"
        public var description: String { return self.rawValue }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case owned = "OWNED"
        case entitled = "ENTITLED"
        public var description: String { return self.rawValue }
    }

    public enum State: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case standby = "STANDBY"
        case active = "ACTIVE"
        case updating = "UPDATING"
        case deleting = "DELETING"
        case starting = "STARTING"
        case stopping = "STOPPING"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AddFlowOutputsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "Outputs", location: .body(locationName: "outputs"), required: true, type: .list)
        ]

        public let flowArn: String
        /// A list of outputs that you want to add.
        public let outputs: [AddOutputRequest]

        public init(flowArn: String, outputs: [AddOutputRequest]) {
            self.flowArn = flowArn
            self.outputs = outputs
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case outputs = "outputs"
        }
    }

    public struct AddFlowOutputsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Outputs", location: .body(locationName: "outputs"), required: false, type: .list)
        ]

        /// The ARN of the flow that these outputs were added to.
        public let flowArn: String?
        /// The details of the newly added outputs.
        public let outputs: [Output]?

        public init(flowArn: String? = nil, outputs: [Output]? = nil) {
            self.flowArn = flowArn
            self.outputs = outputs
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case outputs = "outputs"
        }
    }

    public struct AddFlowSourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "Sources", location: .body(locationName: "sources"), required: true, type: .list)
        ]

        public let flowArn: String
        /// A list of sources that you want to add.
        public let sources: [SetSourceRequest]

        public init(flowArn: String, sources: [SetSourceRequest]) {
            self.flowArn = flowArn
            self.sources = sources
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case sources = "sources"
        }
    }

    public struct AddFlowSourcesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Sources", location: .body(locationName: "sources"), required: false, type: .list)
        ]

        /// The ARN of the flow that these sources were added to.
        public let flowArn: String?
        /// The details of the newly added sources.
        public let sources: [Source]?

        public init(flowArn: String? = nil, sources: [Source]? = nil) {
            self.flowArn = flowArn
            self.sources = sources
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case sources = "sources"
        }
    }

    public struct AddFlowVpcInterfacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "VpcInterfaces", location: .body(locationName: "vpcInterfaces"), required: true, type: .list)
        ]

        public let flowArn: String
        /// A list of VPC interfaces that you want to add.
        public let vpcInterfaces: [VpcInterfaceRequest]

        public init(flowArn: String, vpcInterfaces: [VpcInterfaceRequest]) {
            self.flowArn = flowArn
            self.vpcInterfaces = vpcInterfaces
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case vpcInterfaces = "vpcInterfaces"
        }
    }

    public struct AddFlowVpcInterfacesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "VpcInterfaces", location: .body(locationName: "vpcInterfaces"), required: false, type: .list)
        ]

        /// The ARN of the flow that these VPC interfaces were added to.
        public let flowArn: String?
        /// The details of the newly added VPC interfaces.
        public let vpcInterfaces: [VpcInterface]?

        public init(flowArn: String? = nil, vpcInterfaces: [VpcInterface]? = nil) {
            self.flowArn = flowArn
            self.vpcInterfaces = vpcInterfaces
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case vpcInterfaces = "vpcInterfaces"
        }
    }

    public struct AddOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrAllowList", location: .body(locationName: "cidrAllowList"), required: false, type: .list), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: false, type: .string), 
            AWSShapeMember(label: "Encryption", location: .body(locationName: "encryption"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxLatency", location: .body(locationName: "maxLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Port", location: .body(locationName: "port"), required: false, type: .integer), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: true, type: .enum), 
            AWSShapeMember(label: "RemoteId", location: .body(locationName: "remoteId"), required: false, type: .string), 
            AWSShapeMember(label: "SmoothingLatency", location: .body(locationName: "smoothingLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "StreamId", location: .body(locationName: "streamId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcInterfaceAttachment", location: .body(locationName: "vpcInterfaceAttachment"), required: false, type: .structure)
        ]

        /// The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        public let cidrAllowList: [String]?
        /// A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.
        public let description: String?
        /// The IP address from which video will be sent to output destinations.
        public let destination: String?
        /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
        public let encryption: Encryption?
        /// The maximum latency in milliseconds for Zixi-based streams.
        public let maxLatency: Int?
        /// The name of the output. This value must be unique within the current flow.
        public let name: String?
        /// The port to use when content is distributed to this output.
        public let port: Int?
        /// The protocol to use for the output.
        public let `protocol`: Protocol
        /// The remote ID for the Zixi-pull output stream.
        public let remoteId: String?
        /// The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
        public let smoothingLatency: Int?
        /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        public let streamId: String?
        /// The name of the VPC interface attachment to use for this output.
        public let vpcInterfaceAttachment: VpcInterfaceAttachment?

        public init(cidrAllowList: [String]? = nil, description: String? = nil, destination: String? = nil, encryption: Encryption? = nil, maxLatency: Int? = nil, name: String? = nil, port: Int? = nil, protocol: Protocol, remoteId: String? = nil, smoothingLatency: Int? = nil, streamId: String? = nil, vpcInterfaceAttachment: VpcInterfaceAttachment? = nil) {
            self.cidrAllowList = cidrAllowList
            self.description = description
            self.destination = destination
            self.encryption = encryption
            self.maxLatency = maxLatency
            self.name = name
            self.port = port
            self.`protocol` = `protocol`
            self.remoteId = remoteId
            self.smoothingLatency = smoothingLatency
            self.streamId = streamId
            self.vpcInterfaceAttachment = vpcInterfaceAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case cidrAllowList = "cidrAllowList"
            case description = "description"
            case destination = "destination"
            case encryption = "encryption"
            case maxLatency = "maxLatency"
            case name = "name"
            case port = "port"
            case `protocol` = "protocol"
            case remoteId = "remoteId"
            case smoothingLatency = "smoothingLatency"
            case streamId = "streamId"
            case vpcInterfaceAttachment = "vpcInterfaceAttachment"
        }
    }

    public struct CreateFlowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Entitlements", location: .body(locationName: "entitlements"), required: false, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Outputs", location: .body(locationName: "outputs"), required: false, type: .list), 
            AWSShapeMember(label: "Source", location: .body(locationName: "source"), required: false, type: .structure), 
            AWSShapeMember(label: "SourceFailoverConfig", location: .body(locationName: "sourceFailoverConfig"), required: false, type: .structure), 
            AWSShapeMember(label: "Sources", location: .body(locationName: "sources"), required: false, type: .list), 
            AWSShapeMember(label: "VpcInterfaces", location: .body(locationName: "vpcInterfaces"), required: false, type: .list)
        ]

        /// The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.
        public let availabilityZone: String?
        /// The entitlements that you want to grant on a flow.
        public let entitlements: [GrantEntitlementRequest]?
        /// The name of the flow.
        public let name: String
        /// The outputs that you want to add to this flow.
        public let outputs: [AddOutputRequest]?
        public let source: SetSourceRequest?
        public let sourceFailoverConfig: FailoverConfig?
        public let sources: [SetSourceRequest]?
        /// The VPC interfaces you want on the flow.
        public let vpcInterfaces: [VpcInterfaceRequest]?

        public init(availabilityZone: String? = nil, entitlements: [GrantEntitlementRequest]? = nil, name: String, outputs: [AddOutputRequest]? = nil, source: SetSourceRequest? = nil, sourceFailoverConfig: FailoverConfig? = nil, sources: [SetSourceRequest]? = nil, vpcInterfaces: [VpcInterfaceRequest]? = nil) {
            self.availabilityZone = availabilityZone
            self.entitlements = entitlements
            self.name = name
            self.outputs = outputs
            self.source = source
            self.sourceFailoverConfig = sourceFailoverConfig
            self.sources = sources
            self.vpcInterfaces = vpcInterfaces
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case entitlements = "entitlements"
            case name = "name"
            case outputs = "outputs"
            case source = "source"
            case sourceFailoverConfig = "sourceFailoverConfig"
            case sources = "sources"
            case vpcInterfaces = "vpcInterfaces"
        }
    }

    public struct CreateFlowResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Flow", location: .body(locationName: "flow"), required: false, type: .structure)
        ]

        public let flow: Flow?

        public init(flow: Flow? = nil) {
            self.flow = flow
        }

        private enum CodingKeys: String, CodingKey {
            case flow = "flow"
        }
    }

    public struct DeleteFlowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string)
        ]

        public let flowArn: String

        public init(flowArn: String) {
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
        }
    }

    public struct DeleteFlowResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        /// The ARN of the flow that was deleted.
        public let flowArn: String?
        /// The status of the flow when the DeleteFlow process begins.
        public let status: Status?

        public init(flowArn: String? = nil, status: Status? = nil) {
            self.flowArn = flowArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case status = "status"
        }
    }

    public struct DescribeFlowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string)
        ]

        public let flowArn: String

        public init(flowArn: String) {
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
        }
    }

    public struct DescribeFlowResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Flow", location: .body(locationName: "flow"), required: false, type: .structure), 
            AWSShapeMember(label: "Messages", location: .body(locationName: "messages"), required: false, type: .structure)
        ]

        public let flow: Flow?
        public let messages: Messages?

        public init(flow: Flow? = nil, messages: Messages? = nil) {
            self.flow = flow
            self.messages = messages
        }

        private enum CodingKeys: String, CodingKey {
            case flow = "flow"
            case messages = "messages"
        }
    }

    public struct DescribeOfferingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OfferingArn", location: .uri(locationName: "offeringArn"), required: true, type: .string)
        ]

        public let offeringArn: String

        public init(offeringArn: String) {
            self.offeringArn = offeringArn
        }

        private enum CodingKeys: String, CodingKey {
            case offeringArn = "offeringArn"
        }
    }

    public struct DescribeOfferingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Offering", location: .body(locationName: "offering"), required: false, type: .structure)
        ]

        public let offering: Offering?

        public init(offering: Offering? = nil) {
            self.offering = offering
        }

        private enum CodingKeys: String, CodingKey {
            case offering = "offering"
        }
    }

    public struct DescribeReservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservationArn", location: .uri(locationName: "reservationArn"), required: true, type: .string)
        ]

        public let reservationArn: String

        public init(reservationArn: String) {
            self.reservationArn = reservationArn
        }

        private enum CodingKeys: String, CodingKey {
            case reservationArn = "reservationArn"
        }
    }

    public struct DescribeReservationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reservation", location: .body(locationName: "reservation"), required: false, type: .structure)
        ]

        public let reservation: Reservation?

        public init(reservation: Reservation? = nil) {
            self.reservation = reservation
        }

        private enum CodingKeys: String, CodingKey {
            case reservation = "reservation"
        }
    }

    public struct Encryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Algorithm", location: .body(locationName: "algorithm"), required: true, type: .enum), 
            AWSShapeMember(label: "ConstantInitializationVector", location: .body(locationName: "constantInitializationVector"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceId", location: .body(locationName: "deviceId"), required: false, type: .string), 
            AWSShapeMember(label: "KeyType", location: .body(locationName: "keyType"), required: false, type: .enum), 
            AWSShapeMember(label: "Region", location: .body(locationName: "region"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: true, type: .string), 
            AWSShapeMember(label: "SecretArn", location: .body(locationName: "secretArn"), required: false, type: .string), 
            AWSShapeMember(label: "Url", location: .body(locationName: "url"), required: false, type: .string)
        ]

        /// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
        public let algorithm: Algorithm
        /// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
        public let constantInitializationVector: String?
        /// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
        public let deviceId: String?
        /// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
        public let keyType: KeyType?
        /// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
        public let region: String?
        /// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
        public let resourceId: String?
        /// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
        public let roleArn: String
        /// The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
        public let secretArn: String?
        /// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
        public let url: String?

        public init(algorithm: Algorithm, constantInitializationVector: String? = nil, deviceId: String? = nil, keyType: KeyType? = nil, region: String? = nil, resourceId: String? = nil, roleArn: String, secretArn: String? = nil, url: String? = nil) {
            self.algorithm = algorithm
            self.constantInitializationVector = constantInitializationVector
            self.deviceId = deviceId
            self.keyType = keyType
            self.region = region
            self.resourceId = resourceId
            self.roleArn = roleArn
            self.secretArn = secretArn
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case algorithm = "algorithm"
            case constantInitializationVector = "constantInitializationVector"
            case deviceId = "deviceId"
            case keyType = "keyType"
            case region = "region"
            case resourceId = "resourceId"
            case roleArn = "roleArn"
            case secretArn = "secretArn"
            case url = "url"
        }
    }

    public struct Entitlement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataTransferSubscriberFeePercent", location: .body(locationName: "dataTransferSubscriberFeePercent"), required: false, type: .integer), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Encryption", location: .body(locationName: "encryption"), required: false, type: .structure), 
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: true, type: .string), 
            AWSShapeMember(label: "EntitlementStatus", location: .body(locationName: "entitlementStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Subscribers", location: .body(locationName: "subscribers"), required: true, type: .list)
        ]

        /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
        public let dataTransferSubscriberFeePercent: Int?
        /// A description of the entitlement.
        public let description: String?
        /// The type of encryption that will be used on the output that is associated with this entitlement.
        public let encryption: Encryption?
        /// The ARN of the entitlement.
        public let entitlementArn: String
        /// An indication of whether the entitlement is enabled.
        public let entitlementStatus: EntitlementStatus?
        /// The name of the entitlement.
        public let name: String
        /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
        public let subscribers: [String]

        public init(dataTransferSubscriberFeePercent: Int? = nil, description: String? = nil, encryption: Encryption? = nil, entitlementArn: String, entitlementStatus: EntitlementStatus? = nil, name: String, subscribers: [String]) {
            self.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent
            self.description = description
            self.encryption = encryption
            self.entitlementArn = entitlementArn
            self.entitlementStatus = entitlementStatus
            self.name = name
            self.subscribers = subscribers
        }

        private enum CodingKeys: String, CodingKey {
            case dataTransferSubscriberFeePercent = "dataTransferSubscriberFeePercent"
            case description = "description"
            case encryption = "encryption"
            case entitlementArn = "entitlementArn"
            case entitlementStatus = "entitlementStatus"
            case name = "name"
            case subscribers = "subscribers"
        }
    }

    public struct FailoverConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecoveryWindow", location: .body(locationName: "recoveryWindow"), required: false, type: .integer), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]

        /// Search window time to look for dash-7 packets
        public let recoveryWindow: Int?
        public let state: State?

        public init(recoveryWindow: Int? = nil, state: State? = nil) {
            self.recoveryWindow = recoveryWindow
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case recoveryWindow = "recoveryWindow"
            case state = "state"
        }
    }

    public struct Flow: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "EgressIp", location: .body(locationName: "egressIp"), required: false, type: .string), 
            AWSShapeMember(label: "Entitlements", location: .body(locationName: "entitlements"), required: true, type: .list), 
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Outputs", location: .body(locationName: "outputs"), required: true, type: .list), 
            AWSShapeMember(label: "Source", location: .body(locationName: "source"), required: true, type: .structure), 
            AWSShapeMember(label: "SourceFailoverConfig", location: .body(locationName: "sourceFailoverConfig"), required: false, type: .structure), 
            AWSShapeMember(label: "Sources", location: .body(locationName: "sources"), required: false, type: .list), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: true, type: .enum), 
            AWSShapeMember(label: "VpcInterfaces", location: .body(locationName: "vpcInterfaces"), required: false, type: .list)
        ]

        /// The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS.
        public let availabilityZone: String
        /// A description of the flow. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
        public let description: String?
        /// The IP address from which video will be sent to output destinations.
        public let egressIp: String?
        /// The entitlements in this flow.
        public let entitlements: [Entitlement]
        /// The Amazon Resource Name (ARN), a unique identifier for any AWS resource, of the flow.
        public let flowArn: String
        /// The name of the flow.
        public let name: String
        /// The outputs in this flow.
        public let outputs: [Output]
        public let source: Source
        public let sourceFailoverConfig: FailoverConfig?
        public let sources: [Source]?
        /// The current status of the flow.
        public let status: Status
        /// The VPC Interfaces for this flow.
        public let vpcInterfaces: [VpcInterface]?

        public init(availabilityZone: String, description: String? = nil, egressIp: String? = nil, entitlements: [Entitlement], flowArn: String, name: String, outputs: [Output], source: Source, sourceFailoverConfig: FailoverConfig? = nil, sources: [Source]? = nil, status: Status, vpcInterfaces: [VpcInterface]? = nil) {
            self.availabilityZone = availabilityZone
            self.description = description
            self.egressIp = egressIp
            self.entitlements = entitlements
            self.flowArn = flowArn
            self.name = name
            self.outputs = outputs
            self.source = source
            self.sourceFailoverConfig = sourceFailoverConfig
            self.sources = sources
            self.status = status
            self.vpcInterfaces = vpcInterfaces
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case description = "description"
            case egressIp = "egressIp"
            case entitlements = "entitlements"
            case flowArn = "flowArn"
            case name = "name"
            case outputs = "outputs"
            case source = "source"
            case sourceFailoverConfig = "sourceFailoverConfig"
            case sources = "sources"
            case status = "status"
            case vpcInterfaces = "vpcInterfaces"
        }
    }

    public struct GrantEntitlementRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataTransferSubscriberFeePercent", location: .body(locationName: "dataTransferSubscriberFeePercent"), required: false, type: .integer), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Encryption", location: .body(locationName: "encryption"), required: false, type: .structure), 
            AWSShapeMember(label: "EntitlementStatus", location: .body(locationName: "entitlementStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Subscribers", location: .body(locationName: "subscribers"), required: true, type: .list)
        ]

        /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
        public let dataTransferSubscriberFeePercent: Int?
        /// A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
        public let description: String?
        /// The type of encryption that will be used on the output that is associated with this entitlement.
        public let encryption: Encryption?
        /// An indication of whether the new entitlement should be enabled or disabled as soon as it is created. If you don’t specify the entitlementStatus field in your request, MediaConnect sets it to ENABLED.
        public let entitlementStatus: EntitlementStatus?
        /// The name of the entitlement. This value must be unique within the current flow.
        public let name: String?
        /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flows using your content as the source.
        public let subscribers: [String]

        public init(dataTransferSubscriberFeePercent: Int? = nil, description: String? = nil, encryption: Encryption? = nil, entitlementStatus: EntitlementStatus? = nil, name: String? = nil, subscribers: [String]) {
            self.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent
            self.description = description
            self.encryption = encryption
            self.entitlementStatus = entitlementStatus
            self.name = name
            self.subscribers = subscribers
        }

        private enum CodingKeys: String, CodingKey {
            case dataTransferSubscriberFeePercent = "dataTransferSubscriberFeePercent"
            case description = "description"
            case encryption = "encryption"
            case entitlementStatus = "entitlementStatus"
            case name = "name"
            case subscribers = "subscribers"
        }
    }

    public struct GrantFlowEntitlementsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entitlements", location: .body(locationName: "entitlements"), required: true, type: .list), 
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string)
        ]

        /// The list of entitlements that you want to grant.
        public let entitlements: [GrantEntitlementRequest]
        public let flowArn: String

        public init(entitlements: [GrantEntitlementRequest], flowArn: String) {
            self.entitlements = entitlements
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case entitlements = "entitlements"
            case flowArn = "flowArn"
        }
    }

    public struct GrantFlowEntitlementsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entitlements", location: .body(locationName: "entitlements"), required: false, type: .list), 
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string)
        ]

        /// The entitlements that were just granted.
        public let entitlements: [Entitlement]?
        /// The ARN of the flow that these entitlements were granted to.
        public let flowArn: String?

        public init(entitlements: [Entitlement]? = nil, flowArn: String? = nil) {
            self.entitlements = entitlements
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case entitlements = "entitlements"
            case flowArn = "flowArn"
        }
    }

    public struct ListEntitlementsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListEntitlementsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entitlements", location: .body(locationName: "entitlements"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// A list of entitlements that have been granted to you from other AWS accounts.
        public let entitlements: [ListedEntitlement]?
        /// The token that identifies which batch of results that you want to see. For example, you submit a ListEntitlements request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListEntitlements request a second time and specify the NextToken value.
        public let nextToken: String?

        public init(entitlements: [ListedEntitlement]? = nil, nextToken: String? = nil) {
            self.entitlements = entitlements
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case entitlements = "entitlements"
            case nextToken = "nextToken"
        }
    }

    public struct ListFlowsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListFlowsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Flows", location: .body(locationName: "flows"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// A list of flow summaries.
        public let flows: [ListedFlow]?
        /// The token that identifies which batch of results that you want to see. For example, you submit a ListFlows request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListFlows request a second time and specify the NextToken value.
        public let nextToken: String?

        public init(flows: [ListedFlow]? = nil, nextToken: String? = nil) {
            self.flows = flows
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case flows = "flows"
            case nextToken = "nextToken"
        }
    }

    public struct ListOfferingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListOfferingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Offerings", location: .body(locationName: "offerings"), required: false, type: .list)
        ]

        /// The token that identifies which batch of results that you want to see. For example, you submit a ListOfferings request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListOfferings request a second time and specify the NextToken value.
        public let nextToken: String?
        /// A list of offerings that are available to this account in the current AWS Region.
        public let offerings: [Offering]?

        public init(nextToken: String? = nil, offerings: [Offering]? = nil) {
            self.nextToken = nextToken
            self.offerings = offerings
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case offerings = "offerings"
        }
    }

    public struct ListReservationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListReservationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Reservations", location: .body(locationName: "reservations"), required: false, type: .list)
        ]

        /// The token that identifies which batch of results that you want to see. For example, you submit a ListReservations request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListReservations request a second time and specify the NextToken value.
        public let nextToken: String?
        /// A list of all reservations that have been purchased by this account in the current AWS Region.
        public let reservations: [Reservation]?

        public init(nextToken: String? = nil, reservations: [Reservation]? = nil) {
            self.nextToken = nextToken
            self.reservations = reservations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reservations = "reservations"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resourceArn"), required: true, type: .string)
        ]

        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        /// A map from tag keys to values. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct ListedEntitlement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataTransferSubscriberFeePercent", location: .body(locationName: "dataTransferSubscriberFeePercent"), required: false, type: .integer), 
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: true, type: .string), 
            AWSShapeMember(label: "EntitlementName", location: .body(locationName: "entitlementName"), required: true, type: .string)
        ]

        /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
        public let dataTransferSubscriberFeePercent: Int?
        /// The ARN of the entitlement.
        public let entitlementArn: String
        /// The name of the entitlement.
        public let entitlementName: String

        public init(dataTransferSubscriberFeePercent: Int? = nil, entitlementArn: String, entitlementName: String) {
            self.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent
            self.entitlementArn = entitlementArn
            self.entitlementName = entitlementName
        }

        private enum CodingKeys: String, CodingKey {
            case dataTransferSubscriberFeePercent = "dataTransferSubscriberFeePercent"
            case entitlementArn = "entitlementArn"
            case entitlementName = "entitlementName"
        }
    }

    public struct ListedFlow: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: true, type: .string), 
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "SourceType", location: .body(locationName: "sourceType"), required: true, type: .enum), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: true, type: .enum)
        ]

        /// The Availability Zone that the flow was created in.
        public let availabilityZone: String
        /// A description of the flow.
        public let description: String
        /// The ARN of the flow.
        public let flowArn: String
        /// The name of the flow.
        public let name: String
        /// The type of source. This value is either owned (originated somewhere other than an AWS Elemental MediaConnect flow owned by another AWS account) or entitled (originated at an AWS Elemental MediaConnect flow owned by another AWS account).
        public let sourceType: SourceType
        /// The current status of the flow.
        public let status: Status

        public init(availabilityZone: String, description: String, flowArn: String, name: String, sourceType: SourceType, status: Status) {
            self.availabilityZone = availabilityZone
            self.description = description
            self.flowArn = flowArn
            self.name = name
            self.sourceType = sourceType
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case description = "description"
            case flowArn = "flowArn"
            case name = "name"
            case sourceType = "sourceType"
            case status = "status"
        }
    }

    public struct Messages: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Errors", location: .body(locationName: "errors"), required: true, type: .list)
        ]

        /// A list of errors that might have been generated from processes on this flow.
        public let errors: [String]

        public init(errors: [String]) {
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "errors"
        }
    }

    public struct Offering: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: true, type: .string), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: true, type: .integer), 
            AWSShapeMember(label: "DurationUnits", location: .body(locationName: "durationUnits"), required: true, type: .enum), 
            AWSShapeMember(label: "OfferingArn", location: .body(locationName: "offeringArn"), required: true, type: .string), 
            AWSShapeMember(label: "OfferingDescription", location: .body(locationName: "offeringDescription"), required: true, type: .string), 
            AWSShapeMember(label: "PricePerUnit", location: .body(locationName: "pricePerUnit"), required: true, type: .string), 
            AWSShapeMember(label: "PriceUnits", location: .body(locationName: "priceUnits"), required: true, type: .enum), 
            AWSShapeMember(label: "ResourceSpecification", location: .body(locationName: "resourceSpecification"), required: true, type: .structure)
        ]

        /// The type of currency that is used for billing. The currencyCode used for all reservations is US dollars.
        public let currencyCode: String
        /// The length of time that your reservation would be active.
        public let duration: Int
        /// The unit of measurement for the duration of the offering.
        public let durationUnits: DurationUnits
        /// The Amazon Resource Name (ARN) that MediaConnect assigns to the offering.
        public let offeringArn: String
        /// A description of the offering.
        public let offeringDescription: String
        /// The cost of a single unit. This value, in combination with priceUnits, makes up the rate.
        public let pricePerUnit: String
        /// The unit of measurement that is used for billing. This value, in combination with pricePerUnit, makes up the rate.
        public let priceUnits: PriceUnits
        /// A definition of the amount of outbound bandwidth that you would be reserving if you purchase the offering.
        public let resourceSpecification: ResourceSpecification

        public init(currencyCode: String, duration: Int, durationUnits: DurationUnits, offeringArn: String, offeringDescription: String, pricePerUnit: String, priceUnits: PriceUnits, resourceSpecification: ResourceSpecification) {
            self.currencyCode = currencyCode
            self.duration = duration
            self.durationUnits = durationUnits
            self.offeringArn = offeringArn
            self.offeringDescription = offeringDescription
            self.pricePerUnit = pricePerUnit
            self.priceUnits = priceUnits
            self.resourceSpecification = resourceSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case duration = "duration"
            case durationUnits = "durationUnits"
            case offeringArn = "offeringArn"
            case offeringDescription = "offeringDescription"
            case pricePerUnit = "pricePerUnit"
            case priceUnits = "priceUnits"
            case resourceSpecification = "resourceSpecification"
        }
    }

    public struct Output: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataTransferSubscriberFeePercent", location: .body(locationName: "dataTransferSubscriberFeePercent"), required: false, type: .integer), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: false, type: .string), 
            AWSShapeMember(label: "Encryption", location: .body(locationName: "encryption"), required: false, type: .structure), 
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: false, type: .string), 
            AWSShapeMember(label: "MediaLiveInputArn", location: .body(locationName: "mediaLiveInputArn"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "OutputArn", location: .body(locationName: "outputArn"), required: true, type: .string), 
            AWSShapeMember(label: "Port", location: .body(locationName: "port"), required: false, type: .integer), 
            AWSShapeMember(label: "Transport", location: .body(locationName: "transport"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcInterfaceAttachment", location: .body(locationName: "vpcInterfaceAttachment"), required: false, type: .structure)
        ]

        /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
        public let dataTransferSubscriberFeePercent: Int?
        /// A description of the output.
        public let description: String?
        /// The address where you want to send the output.
        public let destination: String?
        /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
        public let encryption: Encryption?
        /// The ARN of the entitlement on the originator''s flow. This value is relevant only on entitled flows.
        public let entitlementArn: String?
        /// The input ARN of the AWS Elemental MediaLive channel. This parameter is relevant only for outputs that were added by creating a MediaLive input.
        public let mediaLiveInputArn: String?
        /// The name of the output. This value must be unique within the current flow.
        public let name: String
        /// The ARN of the output.
        public let outputArn: String
        /// The port to use when content is distributed to this output.
        public let port: Int?
        /// Attributes related to the transport stream that are used in the output.
        public let transport: Transport?
        /// The name of the VPC interface attachment to use for this output.
        public let vpcInterfaceAttachment: VpcInterfaceAttachment?

        public init(dataTransferSubscriberFeePercent: Int? = nil, description: String? = nil, destination: String? = nil, encryption: Encryption? = nil, entitlementArn: String? = nil, mediaLiveInputArn: String? = nil, name: String, outputArn: String, port: Int? = nil, transport: Transport? = nil, vpcInterfaceAttachment: VpcInterfaceAttachment? = nil) {
            self.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent
            self.description = description
            self.destination = destination
            self.encryption = encryption
            self.entitlementArn = entitlementArn
            self.mediaLiveInputArn = mediaLiveInputArn
            self.name = name
            self.outputArn = outputArn
            self.port = port
            self.transport = transport
            self.vpcInterfaceAttachment = vpcInterfaceAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case dataTransferSubscriberFeePercent = "dataTransferSubscriberFeePercent"
            case description = "description"
            case destination = "destination"
            case encryption = "encryption"
            case entitlementArn = "entitlementArn"
            case mediaLiveInputArn = "mediaLiveInputArn"
            case name = "name"
            case outputArn = "outputArn"
            case port = "port"
            case transport = "transport"
            case vpcInterfaceAttachment = "vpcInterfaceAttachment"
        }
    }

    public struct PurchaseOfferingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OfferingArn", location: .uri(locationName: "offeringArn"), required: true, type: .string), 
            AWSShapeMember(label: "ReservationName", location: .body(locationName: "reservationName"), required: true, type: .string), 
            AWSShapeMember(label: "Start", location: .body(locationName: "start"), required: true, type: .string)
        ]

        public let offeringArn: String
        /// The name that you want to use for the reservation.
        public let reservationName: String
        /// The date and time that you want the reservation to begin, in Coordinated Universal Time (UTC). You can specify any date and time between 12:00am on the first day of the current month to the current time on today's date, inclusive. Specify the start in a 24-hour notation. Use the following format: YYYY-MM-DDTHH:mm:SSZ, where T and Z are literal characters. For example, to specify 11:30pm on March 5, 2020, enter 2020-03-05T23:30:00Z.
        public let start: String

        public init(offeringArn: String, reservationName: String, start: String) {
            self.offeringArn = offeringArn
            self.reservationName = reservationName
            self.start = start
        }

        private enum CodingKeys: String, CodingKey {
            case offeringArn = "offeringArn"
            case reservationName = "reservationName"
            case start = "start"
        }
    }

    public struct PurchaseOfferingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reservation", location: .body(locationName: "reservation"), required: false, type: .structure)
        ]

        public let reservation: Reservation?

        public init(reservation: Reservation? = nil) {
            self.reservation = reservation
        }

        private enum CodingKeys: String, CodingKey {
            case reservation = "reservation"
        }
    }

    public struct RemoveFlowOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "OutputArn", location: .uri(locationName: "outputArn"), required: true, type: .string)
        ]

        public let flowArn: String
        public let outputArn: String

        public init(flowArn: String, outputArn: String) {
            self.flowArn = flowArn
            self.outputArn = outputArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case outputArn = "outputArn"
        }
    }

    public struct RemoveFlowOutputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "OutputArn", location: .body(locationName: "outputArn"), required: false, type: .string)
        ]

        /// The ARN of the flow that is associated with the output you removed.
        public let flowArn: String?
        /// The ARN of the output that was removed.
        public let outputArn: String?

        public init(flowArn: String? = nil, outputArn: String? = nil) {
            self.flowArn = flowArn
            self.outputArn = outputArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case outputArn = "outputArn"
        }
    }

    public struct RemoveFlowSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "SourceArn", location: .uri(locationName: "sourceArn"), required: true, type: .string)
        ]

        public let flowArn: String
        public let sourceArn: String

        public init(flowArn: String, sourceArn: String) {
            self.flowArn = flowArn
            self.sourceArn = sourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case sourceArn = "sourceArn"
        }
    }

    public struct RemoveFlowSourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "SourceArn", location: .body(locationName: "sourceArn"), required: false, type: .string)
        ]

        /// The ARN of the flow that is associated with the source you removed.
        public let flowArn: String?
        /// The ARN of the source that was removed.
        public let sourceArn: String?

        public init(flowArn: String? = nil, sourceArn: String? = nil) {
            self.flowArn = flowArn
            self.sourceArn = sourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case sourceArn = "sourceArn"
        }
    }

    public struct RemoveFlowVpcInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "VpcInterfaceName", location: .uri(locationName: "vpcInterfaceName"), required: true, type: .string)
        ]

        public let flowArn: String
        public let vpcInterfaceName: String

        public init(flowArn: String, vpcInterfaceName: String) {
            self.flowArn = flowArn
            self.vpcInterfaceName = vpcInterfaceName
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case vpcInterfaceName = "vpcInterfaceName"
        }
    }

    public struct RemoveFlowVpcInterfaceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "NonDeletedNetworkInterfaceIds", location: .body(locationName: "nonDeletedNetworkInterfaceIds"), required: false, type: .list), 
            AWSShapeMember(label: "VpcInterfaceName", location: .body(locationName: "vpcInterfaceName"), required: false, type: .string)
        ]

        /// The ARN of the flow that is associated with the VPC interface you removed.
        public let flowArn: String?
        /// IDs of network interfaces associated with the removed VPC interface that Media Connect was unable to remove.
        public let nonDeletedNetworkInterfaceIds: [String]?
        /// The name of the VPC interface that was removed.
        public let vpcInterfaceName: String?

        public init(flowArn: String? = nil, nonDeletedNetworkInterfaceIds: [String]? = nil, vpcInterfaceName: String? = nil) {
            self.flowArn = flowArn
            self.nonDeletedNetworkInterfaceIds = nonDeletedNetworkInterfaceIds
            self.vpcInterfaceName = vpcInterfaceName
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case nonDeletedNetworkInterfaceIds = "nonDeletedNetworkInterfaceIds"
            case vpcInterfaceName = "vpcInterfaceName"
        }
    }

    public struct Reservation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: true, type: .string), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: true, type: .integer), 
            AWSShapeMember(label: "DurationUnits", location: .body(locationName: "durationUnits"), required: true, type: .enum), 
            AWSShapeMember(label: "End", location: .body(locationName: "end"), required: true, type: .string), 
            AWSShapeMember(label: "OfferingArn", location: .body(locationName: "offeringArn"), required: true, type: .string), 
            AWSShapeMember(label: "OfferingDescription", location: .body(locationName: "offeringDescription"), required: true, type: .string), 
            AWSShapeMember(label: "PricePerUnit", location: .body(locationName: "pricePerUnit"), required: true, type: .string), 
            AWSShapeMember(label: "PriceUnits", location: .body(locationName: "priceUnits"), required: true, type: .enum), 
            AWSShapeMember(label: "ReservationArn", location: .body(locationName: "reservationArn"), required: true, type: .string), 
            AWSShapeMember(label: "ReservationName", location: .body(locationName: "reservationName"), required: true, type: .string), 
            AWSShapeMember(label: "ReservationState", location: .body(locationName: "reservationState"), required: true, type: .enum), 
            AWSShapeMember(label: "ResourceSpecification", location: .body(locationName: "resourceSpecification"), required: true, type: .structure), 
            AWSShapeMember(label: "Start", location: .body(locationName: "start"), required: true, type: .string)
        ]

        /// The type of currency that is used for billing. The currencyCode used for your reservation is US dollars.
        public let currencyCode: String
        /// The length of time that this reservation is active. MediaConnect defines this value in the offering.
        public let duration: Int
        /// The unit of measurement for the duration of the reservation. MediaConnect defines this value in the offering.
        public let durationUnits: DurationUnits
        /// The day and time that this reservation expires. This value is calculated based on the start date and time that you set and the offering's duration.
        public let end: String
        /// The Amazon Resource Name (ARN) that MediaConnect assigns to the offering.
        public let offeringArn: String
        /// A description of the offering. MediaConnect defines this value in the offering.
        public let offeringDescription: String
        /// The cost of a single unit. This value, in combination with priceUnits, makes up the rate. MediaConnect defines this value in the offering.
        public let pricePerUnit: String
        /// The unit of measurement that is used for billing. This value, in combination with pricePerUnit, makes up the rate. MediaConnect defines this value in the offering.
        public let priceUnits: PriceUnits
        /// The Amazon Resource Name (ARN) that MediaConnect assigns to the reservation when you purchase an offering.
        public let reservationArn: String
        /// The name that you assigned to the reservation when you purchased the offering.
        public let reservationName: String
        /// The status of your reservation.
        public let reservationState: ReservationState
        /// A definition of the amount of outbound bandwidth that you would be reserving if you purchase the offering. MediaConnect defines the values that make up the resourceSpecification in the offering.
        public let resourceSpecification: ResourceSpecification
        /// The day and time that the reservation becomes active. You set this value when you purchase the offering.
        public let start: String

        public init(currencyCode: String, duration: Int, durationUnits: DurationUnits, end: String, offeringArn: String, offeringDescription: String, pricePerUnit: String, priceUnits: PriceUnits, reservationArn: String, reservationName: String, reservationState: ReservationState, resourceSpecification: ResourceSpecification, start: String) {
            self.currencyCode = currencyCode
            self.duration = duration
            self.durationUnits = durationUnits
            self.end = end
            self.offeringArn = offeringArn
            self.offeringDescription = offeringDescription
            self.pricePerUnit = pricePerUnit
            self.priceUnits = priceUnits
            self.reservationArn = reservationArn
            self.reservationName = reservationName
            self.reservationState = reservationState
            self.resourceSpecification = resourceSpecification
            self.start = start
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case duration = "duration"
            case durationUnits = "durationUnits"
            case end = "end"
            case offeringArn = "offeringArn"
            case offeringDescription = "offeringDescription"
            case pricePerUnit = "pricePerUnit"
            case priceUnits = "priceUnits"
            case reservationArn = "reservationArn"
            case reservationName = "reservationName"
            case reservationState = "reservationState"
            case resourceSpecification = "resourceSpecification"
            case start = "start"
        }
    }

    public struct ResourceSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedBitrate", location: .body(locationName: "reservedBitrate"), required: false, type: .integer), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: true, type: .enum)
        ]

        /// The amount of outbound bandwidth that is discounted in the offering.
        public let reservedBitrate: Int?
        /// The type of resource and the unit that is being billed for.
        public let resourceType: ResourceType

        public init(reservedBitrate: Int? = nil, resourceType: ResourceType) {
            self.reservedBitrate = reservedBitrate
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case reservedBitrate = "reservedBitrate"
            case resourceType = "resourceType"
        }
    }

    public struct RevokeFlowEntitlementRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntitlementArn", location: .uri(locationName: "entitlementArn"), required: true, type: .string), 
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string)
        ]

        public let entitlementArn: String
        public let flowArn: String

        public init(entitlementArn: String, flowArn: String) {
            self.entitlementArn = entitlementArn
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case entitlementArn = "entitlementArn"
            case flowArn = "flowArn"
        }
    }

    public struct RevokeFlowEntitlementResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: false, type: .string), 
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string)
        ]

        /// The ARN of the entitlement that was revoked.
        public let entitlementArn: String?
        /// The ARN of the flow that the entitlement was revoked from.
        public let flowArn: String?

        public init(entitlementArn: String? = nil, flowArn: String? = nil) {
            self.entitlementArn = entitlementArn
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case entitlementArn = "entitlementArn"
            case flowArn = "flowArn"
        }
    }

    public struct SetSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Decryption", location: .body(locationName: "decryption"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: false, type: .string), 
            AWSShapeMember(label: "IngestPort", location: .body(locationName: "ingestPort"), required: false, type: .integer), 
            AWSShapeMember(label: "MaxBitrate", location: .body(locationName: "maxBitrate"), required: false, type: .integer), 
            AWSShapeMember(label: "MaxLatency", location: .body(locationName: "maxLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: false, type: .enum), 
            AWSShapeMember(label: "StreamId", location: .body(locationName: "streamId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcInterfaceName", location: .body(locationName: "vpcInterfaceName"), required: false, type: .string), 
            AWSShapeMember(label: "WhitelistCidr", location: .body(locationName: "whitelistCidr"), required: false, type: .string)
        ]

        /// The type of encryption that is used on the content ingested from this source.
        public let decryption: Encryption?
        /// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
        public let description: String?
        /// The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.
        public let entitlementArn: String?
        /// The port that the flow will be listening on for incoming content.
        public let ingestPort: Int?
        /// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
        public let maxBitrate: Int?
        /// The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
        public let maxLatency: Int?
        /// The name of the source.
        public let name: String?
        /// The protocol that is used by the source.
        public let `protocol`: Protocol?
        /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        public let streamId: String?
        /// The name of the VPC interface to use for this source.
        public let vpcInterfaceName: String?
        /// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        public let whitelistCidr: String?

        public init(decryption: Encryption? = nil, description: String? = nil, entitlementArn: String? = nil, ingestPort: Int? = nil, maxBitrate: Int? = nil, maxLatency: Int? = nil, name: String? = nil, protocol: Protocol? = nil, streamId: String? = nil, vpcInterfaceName: String? = nil, whitelistCidr: String? = nil) {
            self.decryption = decryption
            self.description = description
            self.entitlementArn = entitlementArn
            self.ingestPort = ingestPort
            self.maxBitrate = maxBitrate
            self.maxLatency = maxLatency
            self.name = name
            self.`protocol` = `protocol`
            self.streamId = streamId
            self.vpcInterfaceName = vpcInterfaceName
            self.whitelistCidr = whitelistCidr
        }

        private enum CodingKeys: String, CodingKey {
            case decryption = "decryption"
            case description = "description"
            case entitlementArn = "entitlementArn"
            case ingestPort = "ingestPort"
            case maxBitrate = "maxBitrate"
            case maxLatency = "maxLatency"
            case name = "name"
            case `protocol` = "protocol"
            case streamId = "streamId"
            case vpcInterfaceName = "vpcInterfaceName"
            case whitelistCidr = "whitelistCidr"
        }
    }

    public struct Source: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataTransferSubscriberFeePercent", location: .body(locationName: "dataTransferSubscriberFeePercent"), required: false, type: .integer), 
            AWSShapeMember(label: "Decryption", location: .body(locationName: "decryption"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: false, type: .string), 
            AWSShapeMember(label: "IngestIp", location: .body(locationName: "ingestIp"), required: false, type: .string), 
            AWSShapeMember(label: "IngestPort", location: .body(locationName: "ingestPort"), required: false, type: .integer), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "SourceArn", location: .body(locationName: "sourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "Transport", location: .body(locationName: "transport"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcInterfaceName", location: .body(locationName: "vpcInterfaceName"), required: false, type: .string), 
            AWSShapeMember(label: "WhitelistCidr", location: .body(locationName: "whitelistCidr"), required: false, type: .string)
        ]

        /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
        public let dataTransferSubscriberFeePercent: Int?
        /// The type of encryption that is used on the content ingested from this source.
        public let decryption: Encryption?
        /// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
        public let description: String?
        /// The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
        public let entitlementArn: String?
        /// The IP address that the flow will be listening on for incoming content.
        public let ingestIp: String?
        /// The port that the flow will be listening on for incoming content.
        public let ingestPort: Int?
        /// The name of the source.
        public let name: String
        /// The ARN of the source.
        public let sourceArn: String
        /// Attributes related to the transport stream that are used in the source.
        public let transport: Transport?
        /// The name of the VPC Interface this Source is configured with.
        public let vpcInterfaceName: String?
        /// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        public let whitelistCidr: String?

        public init(dataTransferSubscriberFeePercent: Int? = nil, decryption: Encryption? = nil, description: String? = nil, entitlementArn: String? = nil, ingestIp: String? = nil, ingestPort: Int? = nil, name: String, sourceArn: String, transport: Transport? = nil, vpcInterfaceName: String? = nil, whitelistCidr: String? = nil) {
            self.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent
            self.decryption = decryption
            self.description = description
            self.entitlementArn = entitlementArn
            self.ingestIp = ingestIp
            self.ingestPort = ingestPort
            self.name = name
            self.sourceArn = sourceArn
            self.transport = transport
            self.vpcInterfaceName = vpcInterfaceName
            self.whitelistCidr = whitelistCidr
        }

        private enum CodingKeys: String, CodingKey {
            case dataTransferSubscriberFeePercent = "dataTransferSubscriberFeePercent"
            case decryption = "decryption"
            case description = "description"
            case entitlementArn = "entitlementArn"
            case ingestIp = "ingestIp"
            case ingestPort = "ingestPort"
            case name = "name"
            case sourceArn = "sourceArn"
            case transport = "transport"
            case vpcInterfaceName = "vpcInterfaceName"
            case whitelistCidr = "whitelistCidr"
        }
    }

    public struct StartFlowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string)
        ]

        public let flowArn: String

        public init(flowArn: String) {
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
        }
    }

    public struct StartFlowResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        /// The ARN of the flow that you started.
        public let flowArn: String?
        /// The status of the flow when the StartFlow process begins.
        public let status: Status?

        public init(flowArn: String? = nil, status: Status? = nil) {
            self.flowArn = flowArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case status = "status"
        }
    }

    public struct StopFlowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string)
        ]

        public let flowArn: String

        public init(flowArn: String) {
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
        }
    }

    public struct StopFlowResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        /// The ARN of the flow that you stopped.
        public let flowArn: String?
        /// The status of the flow when the StopFlow process begins.
        public let status: Status?

        public init(flowArn: String? = nil, status: Status? = nil) {
            self.flowArn = flowArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case status = "status"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: true, type: .map)
        ]

        public let resourceArn: String
        /// A map from tag keys to values. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct Transport: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrAllowList", location: .body(locationName: "cidrAllowList"), required: false, type: .list), 
            AWSShapeMember(label: "MaxBitrate", location: .body(locationName: "maxBitrate"), required: false, type: .integer), 
            AWSShapeMember(label: "MaxLatency", location: .body(locationName: "maxLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: true, type: .enum), 
            AWSShapeMember(label: "RemoteId", location: .body(locationName: "remoteId"), required: false, type: .string), 
            AWSShapeMember(label: "SmoothingLatency", location: .body(locationName: "smoothingLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "StreamId", location: .body(locationName: "streamId"), required: false, type: .string)
        ]

        /// The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        public let cidrAllowList: [String]?
        /// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
        public let maxBitrate: Int?
        /// The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
        public let maxLatency: Int?
        /// The protocol that is used by the source or output.
        public let `protocol`: Protocol
        /// The remote ID for the Zixi-pull stream.
        public let remoteId: String?
        /// The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
        public let smoothingLatency: Int?
        /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        public let streamId: String?

        public init(cidrAllowList: [String]? = nil, maxBitrate: Int? = nil, maxLatency: Int? = nil, protocol: Protocol, remoteId: String? = nil, smoothingLatency: Int? = nil, streamId: String? = nil) {
            self.cidrAllowList = cidrAllowList
            self.maxBitrate = maxBitrate
            self.maxLatency = maxLatency
            self.`protocol` = `protocol`
            self.remoteId = remoteId
            self.smoothingLatency = smoothingLatency
            self.streamId = streamId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrAllowList = "cidrAllowList"
            case maxBitrate = "maxBitrate"
            case maxLatency = "maxLatency"
            case `protocol` = "protocol"
            case remoteId = "remoteId"
            case smoothingLatency = "smoothingLatency"
            case streamId = "streamId"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list)
        ]

        public let resourceArn: String
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UpdateEncryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Algorithm", location: .body(locationName: "algorithm"), required: false, type: .enum), 
            AWSShapeMember(label: "ConstantInitializationVector", location: .body(locationName: "constantInitializationVector"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceId", location: .body(locationName: "deviceId"), required: false, type: .string), 
            AWSShapeMember(label: "KeyType", location: .body(locationName: "keyType"), required: false, type: .enum), 
            AWSShapeMember(label: "Region", location: .body(locationName: "region"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string), 
            AWSShapeMember(label: "SecretArn", location: .body(locationName: "secretArn"), required: false, type: .string), 
            AWSShapeMember(label: "Url", location: .body(locationName: "url"), required: false, type: .string)
        ]

        /// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
        public let algorithm: Algorithm?
        /// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
        public let constantInitializationVector: String?
        /// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
        public let deviceId: String?
        /// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
        public let keyType: KeyType?
        /// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
        public let region: String?
        /// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
        public let resourceId: String?
        /// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
        public let roleArn: String?
        /// The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
        public let secretArn: String?
        /// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
        public let url: String?

        public init(algorithm: Algorithm? = nil, constantInitializationVector: String? = nil, deviceId: String? = nil, keyType: KeyType? = nil, region: String? = nil, resourceId: String? = nil, roleArn: String? = nil, secretArn: String? = nil, url: String? = nil) {
            self.algorithm = algorithm
            self.constantInitializationVector = constantInitializationVector
            self.deviceId = deviceId
            self.keyType = keyType
            self.region = region
            self.resourceId = resourceId
            self.roleArn = roleArn
            self.secretArn = secretArn
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case algorithm = "algorithm"
            case constantInitializationVector = "constantInitializationVector"
            case deviceId = "deviceId"
            case keyType = "keyType"
            case region = "region"
            case resourceId = "resourceId"
            case roleArn = "roleArn"
            case secretArn = "secretArn"
            case url = "url"
        }
    }

    public struct UpdateFailoverConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecoveryWindow", location: .body(locationName: "recoveryWindow"), required: false, type: .integer), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]

        /// Recovery window time to look for dash-7 packets
        public let recoveryWindow: Int?
        public let state: State?

        public init(recoveryWindow: Int? = nil, state: State? = nil) {
            self.recoveryWindow = recoveryWindow
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case recoveryWindow = "recoveryWindow"
            case state = "state"
        }
    }

    public struct UpdateFlowEntitlementRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Encryption", location: .body(locationName: "encryption"), required: false, type: .structure), 
            AWSShapeMember(label: "EntitlementArn", location: .uri(locationName: "entitlementArn"), required: true, type: .string), 
            AWSShapeMember(label: "EntitlementStatus", location: .body(locationName: "entitlementStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "Subscribers", location: .body(locationName: "subscribers"), required: false, type: .list)
        ]

        /// A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
        public let description: String?
        /// The type of encryption that will be used on the output associated with this entitlement.
        public let encryption: UpdateEncryption?
        public let entitlementArn: String
        /// An indication of whether you want to enable the entitlement to allow access, or disable it to stop streaming content to the subscriber’s flow temporarily. If you don’t specify the entitlementStatus field in your request, MediaConnect leaves the value unchanged.
        public let entitlementStatus: EntitlementStatus?
        public let flowArn: String
        /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
        public let subscribers: [String]?

        public init(description: String? = nil, encryption: UpdateEncryption? = nil, entitlementArn: String, entitlementStatus: EntitlementStatus? = nil, flowArn: String, subscribers: [String]? = nil) {
            self.description = description
            self.encryption = encryption
            self.entitlementArn = entitlementArn
            self.entitlementStatus = entitlementStatus
            self.flowArn = flowArn
            self.subscribers = subscribers
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case encryption = "encryption"
            case entitlementArn = "entitlementArn"
            case entitlementStatus = "entitlementStatus"
            case flowArn = "flowArn"
            case subscribers = "subscribers"
        }
    }

    public struct UpdateFlowEntitlementResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entitlement", location: .body(locationName: "entitlement"), required: false, type: .structure), 
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string)
        ]

        /// The new configuration of the entitlement that you updated.
        public let entitlement: Entitlement?
        /// The ARN of the flow that this entitlement was granted on.
        public let flowArn: String?

        public init(entitlement: Entitlement? = nil, flowArn: String? = nil) {
            self.entitlement = entitlement
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case entitlement = "entitlement"
            case flowArn = "flowArn"
        }
    }

    public struct UpdateFlowOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrAllowList", location: .body(locationName: "cidrAllowList"), required: false, type: .list), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: false, type: .string), 
            AWSShapeMember(label: "Encryption", location: .body(locationName: "encryption"), required: false, type: .structure), 
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "MaxLatency", location: .body(locationName: "maxLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "OutputArn", location: .uri(locationName: "outputArn"), required: true, type: .string), 
            AWSShapeMember(label: "Port", location: .body(locationName: "port"), required: false, type: .integer), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: false, type: .enum), 
            AWSShapeMember(label: "RemoteId", location: .body(locationName: "remoteId"), required: false, type: .string), 
            AWSShapeMember(label: "SmoothingLatency", location: .body(locationName: "smoothingLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "StreamId", location: .body(locationName: "streamId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcInterfaceAttachment", location: .body(locationName: "vpcInterfaceAttachment"), required: false, type: .structure)
        ]

        /// The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        public let cidrAllowList: [String]?
        /// A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.
        public let description: String?
        /// The IP address where you want to send the output.
        public let destination: String?
        /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
        public let encryption: UpdateEncryption?
        public let flowArn: String
        /// The maximum latency in milliseconds for Zixi-based streams.
        public let maxLatency: Int?
        public let outputArn: String
        /// The port to use when content is distributed to this output.
        public let port: Int?
        /// The protocol to use for the output.
        public let `protocol`: Protocol?
        /// The remote ID for the Zixi-pull stream.
        public let remoteId: String?
        /// The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
        public let smoothingLatency: Int?
        /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        public let streamId: String?
        /// The name of the VPC interface attachment to use for this output.
        public let vpcInterfaceAttachment: VpcInterfaceAttachment?

        public init(cidrAllowList: [String]? = nil, description: String? = nil, destination: String? = nil, encryption: UpdateEncryption? = nil, flowArn: String, maxLatency: Int? = nil, outputArn: String, port: Int? = nil, protocol: Protocol? = nil, remoteId: String? = nil, smoothingLatency: Int? = nil, streamId: String? = nil, vpcInterfaceAttachment: VpcInterfaceAttachment? = nil) {
            self.cidrAllowList = cidrAllowList
            self.description = description
            self.destination = destination
            self.encryption = encryption
            self.flowArn = flowArn
            self.maxLatency = maxLatency
            self.outputArn = outputArn
            self.port = port
            self.`protocol` = `protocol`
            self.remoteId = remoteId
            self.smoothingLatency = smoothingLatency
            self.streamId = streamId
            self.vpcInterfaceAttachment = vpcInterfaceAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case cidrAllowList = "cidrAllowList"
            case description = "description"
            case destination = "destination"
            case encryption = "encryption"
            case flowArn = "flowArn"
            case maxLatency = "maxLatency"
            case outputArn = "outputArn"
            case port = "port"
            case `protocol` = "protocol"
            case remoteId = "remoteId"
            case smoothingLatency = "smoothingLatency"
            case streamId = "streamId"
            case vpcInterfaceAttachment = "vpcInterfaceAttachment"
        }
    }

    public struct UpdateFlowOutputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Output", location: .body(locationName: "output"), required: false, type: .structure)
        ]

        /// The ARN of the flow that is associated with the updated output.
        public let flowArn: String?
        /// The new settings of the output that you updated.
        public let output: Output?

        public init(flowArn: String? = nil, output: Output? = nil) {
            self.flowArn = flowArn
            self.output = output
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case output = "output"
        }
    }

    public struct UpdateFlowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "SourceFailoverConfig", location: .body(locationName: "sourceFailoverConfig"), required: false, type: .structure)
        ]

        public let flowArn: String
        public let sourceFailoverConfig: UpdateFailoverConfig?

        public init(flowArn: String, sourceFailoverConfig: UpdateFailoverConfig? = nil) {
            self.flowArn = flowArn
            self.sourceFailoverConfig = sourceFailoverConfig
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case sourceFailoverConfig = "sourceFailoverConfig"
        }
    }

    public struct UpdateFlowResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Flow", location: .body(locationName: "flow"), required: false, type: .structure)
        ]

        public let flow: Flow?

        public init(flow: Flow? = nil) {
            self.flow = flow
        }

        private enum CodingKeys: String, CodingKey {
            case flow = "flow"
        }
    }

    public struct UpdateFlowSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Decryption", location: .body(locationName: "decryption"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: false, type: .string), 
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "IngestPort", location: .body(locationName: "ingestPort"), required: false, type: .integer), 
            AWSShapeMember(label: "MaxBitrate", location: .body(locationName: "maxBitrate"), required: false, type: .integer), 
            AWSShapeMember(label: "MaxLatency", location: .body(locationName: "maxLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: false, type: .enum), 
            AWSShapeMember(label: "SourceArn", location: .uri(locationName: "sourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "StreamId", location: .body(locationName: "streamId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcInterfaceName", location: .body(locationName: "vpcInterfaceName"), required: false, type: .string), 
            AWSShapeMember(label: "WhitelistCidr", location: .body(locationName: "whitelistCidr"), required: false, type: .string)
        ]

        /// The type of encryption used on the content ingested from this source.
        public let decryption: UpdateEncryption?
        /// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
        public let description: String?
        /// The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.
        public let entitlementArn: String?
        public let flowArn: String
        /// The port that the flow will be listening on for incoming content.
        public let ingestPort: Int?
        /// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
        public let maxBitrate: Int?
        /// The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
        public let maxLatency: Int?
        /// The protocol that is used by the source.
        public let `protocol`: Protocol?
        public let sourceArn: String
        /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        public let streamId: String?
        /// The name of the VPC Interface to configure this Source with.
        public let vpcInterfaceName: String?
        /// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        public let whitelistCidr: String?

        public init(decryption: UpdateEncryption? = nil, description: String? = nil, entitlementArn: String? = nil, flowArn: String, ingestPort: Int? = nil, maxBitrate: Int? = nil, maxLatency: Int? = nil, protocol: Protocol? = nil, sourceArn: String, streamId: String? = nil, vpcInterfaceName: String? = nil, whitelistCidr: String? = nil) {
            self.decryption = decryption
            self.description = description
            self.entitlementArn = entitlementArn
            self.flowArn = flowArn
            self.ingestPort = ingestPort
            self.maxBitrate = maxBitrate
            self.maxLatency = maxLatency
            self.`protocol` = `protocol`
            self.sourceArn = sourceArn
            self.streamId = streamId
            self.vpcInterfaceName = vpcInterfaceName
            self.whitelistCidr = whitelistCidr
        }

        private enum CodingKeys: String, CodingKey {
            case decryption = "decryption"
            case description = "description"
            case entitlementArn = "entitlementArn"
            case flowArn = "flowArn"
            case ingestPort = "ingestPort"
            case maxBitrate = "maxBitrate"
            case maxLatency = "maxLatency"
            case `protocol` = "protocol"
            case sourceArn = "sourceArn"
            case streamId = "streamId"
            case vpcInterfaceName = "vpcInterfaceName"
            case whitelistCidr = "whitelistCidr"
        }
    }

    public struct UpdateFlowSourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Source", location: .body(locationName: "source"), required: false, type: .structure)
        ]

        /// The ARN of the flow that you want to update.
        public let flowArn: String?
        /// The settings for the source of the flow.
        public let source: Source?

        public init(flowArn: String? = nil, source: Source? = nil) {
            self.flowArn = flowArn
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case source = "source"
        }
    }

    public struct VpcInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceIds", location: .body(locationName: "networkInterfaceIds"), required: true, type: .list), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: true, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "securityGroupIds"), required: true, type: .list), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: true, type: .string)
        ]

        /// Immutable and has to be a unique against other VpcInterfaces in this Flow
        public let name: String
        /// IDs of the network interfaces created in customer's account by MediaConnect.
        public let networkInterfaceIds: [String]
        /// Role Arn MediaConnect can assumes to create ENIs in customer's account
        public let roleArn: String
        /// Security Group IDs to be used on ENI.
        public let securityGroupIds: [String]
        /// Subnet must be in the AZ of the Flow
        public let subnetId: String

        public init(name: String, networkInterfaceIds: [String], roleArn: String, securityGroupIds: [String], subnetId: String) {
            self.name = name
            self.networkInterfaceIds = networkInterfaceIds
            self.roleArn = roleArn
            self.securityGroupIds = securityGroupIds
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case networkInterfaceIds = "networkInterfaceIds"
            case roleArn = "roleArn"
            case securityGroupIds = "securityGroupIds"
            case subnetId = "subnetId"
        }
    }

    public struct VpcInterfaceAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcInterfaceName", location: .body(locationName: "vpcInterfaceName"), required: false, type: .string)
        ]

        /// The name of the VPC interface to use for this output.
        public let vpcInterfaceName: String?

        public init(vpcInterfaceName: String? = nil) {
            self.vpcInterfaceName = vpcInterfaceName
        }

        private enum CodingKeys: String, CodingKey {
            case vpcInterfaceName = "vpcInterfaceName"
        }
    }

    public struct VpcInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: true, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "securityGroupIds"), required: true, type: .list), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: true, type: .string)
        ]

        /// The name of the VPC Interface. This value must be unique within the current flow.
        public let name: String
        /// Role Arn MediaConnect can assumes to create ENIs in customer's account
        public let roleArn: String
        /// Security Group IDs to be used on ENI.
        public let securityGroupIds: [String]
        /// Subnet must be in the AZ of the Flow
        public let subnetId: String

        public init(name: String, roleArn: String, securityGroupIds: [String], subnetId: String) {
            self.name = name
            self.roleArn = roleArn
            self.securityGroupIds = securityGroupIds
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case roleArn = "roleArn"
            case securityGroupIds = "securityGroupIds"
            case subnetId = "subnetId"
        }
    }
}
