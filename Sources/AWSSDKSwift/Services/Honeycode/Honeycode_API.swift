//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

@_exported import AWSSDKSwiftCore

/**
Client object for interacting with AWS Honeycode service.

 Amazon Honeycode is a fully managed service that allows you to quickly build mobile and web apps for teamsâ€”without programming. Build Honeycode apps for managing almost anything, like projects, customers, operations, approvals, resources, and even your team. 
*/
public struct Honeycode {

    //MARK: Member variables

    public let client: AWSClient
    public let serviceConfig: AWSServiceConfig

    //MARK: Initialization

    /// Initialize the Honeycode client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - timeout: Timeout value for HTTP requests
    public init(
        client: AWSClient,
        region: AWSSDKSwiftCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        timeout: TimeAmount? = nil
    ) {
        self.client = client
        self.serviceConfig = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            service: "honeycode",
            serviceProtocol: .restjson,
            apiVersion: "2020-03-01",
            endpoint: endpoint,
            possibleErrorTypes: [HoneycodeErrorType.self],
            timeout: timeout
        )
    }
    
    //MARK: API Calls

    ///   The GetScreenData API allows retrieval of data from a screen in a Honeycode app. The API allows setting local variables in the screen to filter, sort or otherwise affect what will be displayed on the screen. 
    public func getScreenData(_ input: GetScreenDataRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetScreenDataResult> {
        return client.execute(operation: "GetScreenData", path: "/screendata", httpMethod: .POST, serviceConfig: serviceConfig, input: input, on: eventLoop)
    }

    ///   The InvokeScreenAutomation API allows invoking an action defined in a screen in a Honeycode app. The API allows setting local variables, which can then be used in the automation being invoked. This allows automating the Honeycode app interactions to write, update or delete data in the workbook. 
    public func invokeScreenAutomation(_ input: InvokeScreenAutomationRequest, on eventLoop: EventLoop? = nil) -> EventLoopFuture<InvokeScreenAutomationResult> {
        return client.execute(operation: "InvokeScreenAutomation", path: "/workbooks/{workbookId}/apps/{appId}/screens/{screenId}/automations/{automationId}", httpMethod: .POST, serviceConfig: serviceConfig, input: input, on: eventLoop)
    }
}
