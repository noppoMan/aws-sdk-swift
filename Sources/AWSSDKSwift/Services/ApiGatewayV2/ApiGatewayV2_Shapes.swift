// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension ApiGatewayV2 {
    //MARK: Enums

    public enum AuthorizationType: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case awsIam = "AWS_IAM"
        case custom = "CUSTOM"
        case jwt = "JWT"
        public var description: String { return self.rawValue }
    }

    public enum AuthorizerType: String, CustomStringConvertible, Codable {
        case request = "REQUEST"
        case jwt = "JWT"
        public var description: String { return self.rawValue }
    }

    public enum ConnectionType: String, CustomStringConvertible, Codable {
        case internet = "INTERNET"
        case vpcLink = "VPC_LINK"
        public var description: String { return self.rawValue }
    }

    public enum ContentHandlingStrategy: String, CustomStringConvertible, Codable {
        case convertToBinary = "CONVERT_TO_BINARY"
        case convertToText = "CONVERT_TO_TEXT"
        public var description: String { return self.rawValue }
    }

    public enum DeploymentStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case failed = "FAILED"
        case deployed = "DEPLOYED"
        public var description: String { return self.rawValue }
    }

    public enum DomainNameStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum EndpointType: String, CustomStringConvertible, Codable {
        case regional = "REGIONAL"
        case edge = "EDGE"
        public var description: String { return self.rawValue }
    }

    public enum IntegrationType: String, CustomStringConvertible, Codable {
        case aws = "AWS"
        case http = "HTTP"
        case mock = "MOCK"
        case httpProxy = "HTTP_PROXY"
        case awsProxy = "AWS_PROXY"
        public var description: String { return self.rawValue }
    }

    public enum LoggingLevel: String, CustomStringConvertible, Codable {
        case error = "ERROR"
        case info = "INFO"
        case off = "OFF"
        public var description: String { return self.rawValue }
    }

    public enum PassthroughBehavior: String, CustomStringConvertible, Codable {
        case whenNoMatch = "WHEN_NO_MATCH"
        case never = "NEVER"
        case whenNoTemplates = "WHEN_NO_TEMPLATES"
        public var description: String { return self.rawValue }
    }

    public enum ProtocolType: String, CustomStringConvertible, Codable {
        case websocket = "WEBSOCKET"
        case http = "HTTP"
        public var description: String { return self.rawValue }
    }

    public enum SecurityPolicy: String, CustomStringConvertible, Codable {
        case tls10 = "TLS_1_0"
        case tls12 = "TLS_1_2"
        public var description: String { return self.rawValue }
    }

    public enum VpcLinkStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case available = "AVAILABLE"
        case deleting = "DELETING"
        case failed = "FAILED"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum VpcLinkVersion: String, CustomStringConvertible, Codable {
        case v2 = "V2"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AccessLogSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationArn", location: .body(locationName: "destinationArn"), required: false, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .string)
        ]

        /// The ARN of the CloudWatch Logs log group to receive access logs.
        public let destinationArn: String?
        /// A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.
        public let format: String?

        public init(destinationArn: String? = nil, format: String? = nil) {
            self.destinationArn = destinationArn
            self.format = format
        }

        private enum CodingKeys: String, CodingKey {
            case destinationArn = "destinationArn"
            case format = "format"
        }
    }

    public struct Api: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiEndpoint", location: .body(locationName: "apiEndpoint"), required: false, type: .string), 
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "CorsConfiguration", location: .body(locationName: "corsConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImportInfo", location: .body(locationName: "importInfo"), required: false, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "ProtocolType", location: .body(locationName: "protocolType"), required: true, type: .enum), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string), 
            AWSShapeMember(label: "Warnings", location: .body(locationName: "warnings"), required: false, type: .list)
        ]

        /// The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.
        public let apiEndpoint: String?
        /// Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.
        public let apiGatewayManaged: Bool?
        /// The API ID.
        public let apiId: String?
        /// An API key selection expression. Supported only for WebSocket APIs. See API Key Selection Expressions.
        public let apiKeySelectionExpression: String?
        /// A CORS configuration. Supported only for HTTP APIs.
        public let corsConfiguration: Cors?
        /// The timestamp when the API was created.
        public let createdDate: TimeStamp?
        /// The description of the API.
        public let description: String?
        /// Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        public let disableSchemaValidation: Bool?
        /// The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
        public let importInfo: [String]?
        /// The name of the API.
        public let name: String
        /// The API protocol.
        public let protocolType: ProtocolType
        /// The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.
        public let routeSelectionExpression: String
        /// A collection of tags associated with the API.
        public let tags: [String: String]?
        /// A version identifier for the API.
        public let version: String?
        /// The warning messages reported when failonwarnings is turned on during API import.
        public let warnings: [String]?

        public init(apiEndpoint: String? = nil, apiGatewayManaged: Bool? = nil, apiId: String? = nil, apiKeySelectionExpression: String? = nil, corsConfiguration: Cors? = nil, createdDate: TimeStamp? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, importInfo: [String]? = nil, name: String, protocolType: ProtocolType, routeSelectionExpression: String, tags: [String: String]? = nil, version: String? = nil, warnings: [String]? = nil) {
            self.apiEndpoint = apiEndpoint
            self.apiGatewayManaged = apiGatewayManaged
            self.apiId = apiId
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.corsConfiguration = corsConfiguration
            self.createdDate = createdDate
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.importInfo = importInfo
            self.name = name
            self.protocolType = protocolType
            self.routeSelectionExpression = routeSelectionExpression
            self.tags = tags
            self.version = version
            self.warnings = warnings
        }

        private enum CodingKeys: String, CodingKey {
            case apiEndpoint = "apiEndpoint"
            case apiGatewayManaged = "apiGatewayManaged"
            case apiId = "apiId"
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case corsConfiguration = "corsConfiguration"
            case createdDate = "createdDate"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case importInfo = "importInfo"
            case name = "name"
            case protocolType = "protocolType"
            case routeSelectionExpression = "routeSelectionExpression"
            case tags = "tags"
            case version = "version"
            case warnings = "warnings"
        }
    }

    public struct ApiMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiMappingId", location: .body(locationName: "apiMappingId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingKey", location: .body(locationName: "apiMappingKey"), required: false, type: .string), 
            AWSShapeMember(label: "Stage", location: .body(locationName: "stage"), required: true, type: .string)
        ]

        /// The API identifier.
        public let apiId: String
        /// The API mapping identifier.
        public let apiMappingId: String?
        /// The API mapping key.
        public let apiMappingKey: String?
        /// The API stage.
        public let stage: String

        public init(apiId: String, apiMappingId: String? = nil, apiMappingKey: String? = nil, stage: String) {
            self.apiId = apiId
            self.apiMappingId = apiMappingId
            self.apiMappingKey = apiMappingKey
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiMappingId = "apiMappingId"
            case apiMappingKey = "apiMappingKey"
            case stage = "stage"
        }
    }

    public struct Authorizer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthorizerCredentialsArn", location: .body(locationName: "authorizerCredentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerPayloadFormatVersion", location: .body(locationName: "authorizerPayloadFormatVersion"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerResultTtlInSeconds", location: .body(locationName: "authorizerResultTtlInSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthorizerType", location: .body(locationName: "authorizerType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerUri", location: .body(locationName: "authorizerUri"), required: false, type: .string), 
            AWSShapeMember(label: "EnableSimpleResponses", location: .body(locationName: "enableSimpleResponses"), required: false, type: .boolean), 
            AWSShapeMember(label: "IdentitySource", location: .body(locationName: "identitySource"), required: false, type: .list), 
            AWSShapeMember(label: "IdentityValidationExpression", location: .body(locationName: "identityValidationExpression"), required: false, type: .string), 
            AWSShapeMember(label: "JwtConfiguration", location: .body(locationName: "jwtConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string)
        ]

        /// Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don't specify this parameter. Supported only for REQUEST authorizers.
        public let authorizerCredentialsArn: String?
        /// The authorizer identifier.
        public let authorizerId: String?
        /// Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see Working with AWS Lambda authorizers for HTTP APIs.
        public let authorizerPayloadFormatVersion: String?
        /// The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.
        public let authorizerResultTtlInSeconds: Int?
        /// The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
        public let authorizerType: AuthorizerType?
        /// The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api}
        ///                , where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
        public let authorizerUri: String?
        /// Specifies whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see Working with AWS Lambda authorizers for HTTP APIs
        public let enableSimpleResponses: Bool?
        /// The identity source for which authorization is requested. For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see Working with AWS Lambda authorizers for HTTP APIs. For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.
        public let identitySource: [String]?
        /// The validation expression does not apply to the REQUEST authorizer.
        public let identityValidationExpression: String?
        /// Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
        public let jwtConfiguration: JWTConfiguration?
        /// The name of the authorizer.
        public let name: String

        public init(authorizerCredentialsArn: String? = nil, authorizerId: String? = nil, authorizerPayloadFormatVersion: String? = nil, authorizerResultTtlInSeconds: Int? = nil, authorizerType: AuthorizerType? = nil, authorizerUri: String? = nil, enableSimpleResponses: Bool? = nil, identitySource: [String]? = nil, identityValidationExpression: String? = nil, jwtConfiguration: JWTConfiguration? = nil, name: String) {
            self.authorizerCredentialsArn = authorizerCredentialsArn
            self.authorizerId = authorizerId
            self.authorizerPayloadFormatVersion = authorizerPayloadFormatVersion
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerType = authorizerType
            self.authorizerUri = authorizerUri
            self.enableSimpleResponses = enableSimpleResponses
            self.identitySource = identitySource
            self.identityValidationExpression = identityValidationExpression
            self.jwtConfiguration = jwtConfiguration
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerCredentialsArn = "authorizerCredentialsArn"
            case authorizerId = "authorizerId"
            case authorizerPayloadFormatVersion = "authorizerPayloadFormatVersion"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerType = "authorizerType"
            case authorizerUri = "authorizerUri"
            case enableSimpleResponses = "enableSimpleResponses"
            case identitySource = "identitySource"
            case identityValidationExpression = "identityValidationExpression"
            case jwtConfiguration = "jwtConfiguration"
            case name = "name"
        }
    }

    public struct Cors: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowCredentials", location: .body(locationName: "allowCredentials"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowHeaders", location: .body(locationName: "allowHeaders"), required: false, type: .list), 
            AWSShapeMember(label: "AllowMethods", location: .body(locationName: "allowMethods"), required: false, type: .list), 
            AWSShapeMember(label: "AllowOrigins", location: .body(locationName: "allowOrigins"), required: false, type: .list), 
            AWSShapeMember(label: "ExposeHeaders", location: .body(locationName: "exposeHeaders"), required: false, type: .list), 
            AWSShapeMember(label: "MaxAge", location: .body(locationName: "maxAge"), required: false, type: .integer)
        ]

        /// Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
        public let allowCredentials: Bool?
        /// Represents a collection of allowed headers. Supported only for HTTP APIs.
        public let allowHeaders: [String]?
        /// Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
        public let allowMethods: [String]?
        /// Represents a collection of allowed origins. Supported only for HTTP APIs.
        public let allowOrigins: [String]?
        /// Represents a collection of exposed headers. Supported only for HTTP APIs.
        public let exposeHeaders: [String]?
        /// The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
        public let maxAge: Int?

        public init(allowCredentials: Bool? = nil, allowHeaders: [String]? = nil, allowMethods: [String]? = nil, allowOrigins: [String]? = nil, exposeHeaders: [String]? = nil, maxAge: Int? = nil) {
            self.allowCredentials = allowCredentials
            self.allowHeaders = allowHeaders
            self.allowMethods = allowMethods
            self.allowOrigins = allowOrigins
            self.exposeHeaders = exposeHeaders
            self.maxAge = maxAge
        }

        public func validate(name: String) throws {
            try validate(self.maxAge, name:"maxAge", parent: name, max: 86400)
            try validate(self.maxAge, name:"maxAge", parent: name, min: -1)
        }

        private enum CodingKeys: String, CodingKey {
            case allowCredentials = "allowCredentials"
            case allowHeaders = "allowHeaders"
            case allowMethods = "allowMethods"
            case allowOrigins = "allowOrigins"
            case exposeHeaders = "exposeHeaders"
            case maxAge = "maxAge"
        }
    }

    public struct CreateApiMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiMappingKey", location: .body(locationName: "apiMappingKey"), required: false, type: .string), 
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string), 
            AWSShapeMember(label: "Stage", location: .body(locationName: "stage"), required: true, type: .string)
        ]

        public let apiId: String
        public let apiMappingKey: String?
        public let domainName: String
        public let stage: String

        public init(apiId: String, apiMappingKey: String? = nil, domainName: String, stage: String) {
            self.apiId = apiId
            self.apiMappingKey = apiMappingKey
            self.domainName = domainName
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiMappingKey = "apiMappingKey"
            case domainName = "domainName"
            case stage = "stage"
        }
    }

    public struct CreateApiMappingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingId", location: .body(locationName: "apiMappingId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingKey", location: .body(locationName: "apiMappingKey"), required: false, type: .string), 
            AWSShapeMember(label: "Stage", location: .body(locationName: "stage"), required: false, type: .string)
        ]

        public let apiId: String?
        public let apiMappingId: String?
        public let apiMappingKey: String?
        public let stage: String?

        public init(apiId: String? = nil, apiMappingId: String? = nil, apiMappingKey: String? = nil, stage: String? = nil) {
            self.apiId = apiId
            self.apiMappingId = apiMappingId
            self.apiMappingKey = apiMappingKey
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiMappingId = "apiMappingId"
            case apiMappingKey = "apiMappingKey"
            case stage = "stage"
        }
    }

    public struct CreateApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "CorsConfiguration", location: .body(locationName: "corsConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "ProtocolType", location: .body(locationName: "protocolType"), required: true, type: .enum), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: false, type: .string), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string)
        ]

        public let apiKeySelectionExpression: String?
        public let corsConfiguration: Cors?
        public let credentialsArn: String?
        public let description: String?
        public let disableSchemaValidation: Bool?
        public let name: String
        public let protocolType: ProtocolType
        public let routeKey: String?
        public let routeSelectionExpression: String?
        public let tags: [String: String]?
        public let target: String?
        public let version: String?

        public init(apiKeySelectionExpression: String? = nil, corsConfiguration: Cors? = nil, credentialsArn: String? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, name: String, protocolType: ProtocolType, routeKey: String? = nil, routeSelectionExpression: String? = nil, tags: [String: String]? = nil, target: String? = nil, version: String? = nil) {
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.corsConfiguration = corsConfiguration
            self.credentialsArn = credentialsArn
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.name = name
            self.protocolType = protocolType
            self.routeKey = routeKey
            self.routeSelectionExpression = routeSelectionExpression
            self.tags = tags
            self.target = target
            self.version = version
        }

        public func validate(name: String) throws {
            try self.corsConfiguration?.validate(name: "\(name).corsConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case corsConfiguration = "corsConfiguration"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case name = "name"
            case protocolType = "protocolType"
            case routeKey = "routeKey"
            case routeSelectionExpression = "routeSelectionExpression"
            case tags = "tags"
            case target = "target"
            case version = "version"
        }
    }

    public struct CreateApiResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiEndpoint", location: .body(locationName: "apiEndpoint"), required: false, type: .string), 
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "CorsConfiguration", location: .body(locationName: "corsConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImportInfo", location: .body(locationName: "importInfo"), required: false, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ProtocolType", location: .body(locationName: "protocolType"), required: false, type: .enum), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string), 
            AWSShapeMember(label: "Warnings", location: .body(locationName: "warnings"), required: false, type: .list)
        ]

        public let apiEndpoint: String?
        public let apiGatewayManaged: Bool?
        public let apiId: String?
        public let apiKeySelectionExpression: String?
        public let corsConfiguration: Cors?
        public let createdDate: TimeStamp?
        public let description: String?
        public let disableSchemaValidation: Bool?
        public let importInfo: [String]?
        public let name: String?
        public let protocolType: ProtocolType?
        public let routeSelectionExpression: String?
        public let tags: [String: String]?
        public let version: String?
        public let warnings: [String]?

        public init(apiEndpoint: String? = nil, apiGatewayManaged: Bool? = nil, apiId: String? = nil, apiKeySelectionExpression: String? = nil, corsConfiguration: Cors? = nil, createdDate: TimeStamp? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, importInfo: [String]? = nil, name: String? = nil, protocolType: ProtocolType? = nil, routeSelectionExpression: String? = nil, tags: [String: String]? = nil, version: String? = nil, warnings: [String]? = nil) {
            self.apiEndpoint = apiEndpoint
            self.apiGatewayManaged = apiGatewayManaged
            self.apiId = apiId
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.corsConfiguration = corsConfiguration
            self.createdDate = createdDate
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.importInfo = importInfo
            self.name = name
            self.protocolType = protocolType
            self.routeSelectionExpression = routeSelectionExpression
            self.tags = tags
            self.version = version
            self.warnings = warnings
        }

        private enum CodingKeys: String, CodingKey {
            case apiEndpoint = "apiEndpoint"
            case apiGatewayManaged = "apiGatewayManaged"
            case apiId = "apiId"
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case corsConfiguration = "corsConfiguration"
            case createdDate = "createdDate"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case importInfo = "importInfo"
            case name = "name"
            case protocolType = "protocolType"
            case routeSelectionExpression = "routeSelectionExpression"
            case tags = "tags"
            case version = "version"
            case warnings = "warnings"
        }
    }

    public struct CreateAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthorizerCredentialsArn", location: .body(locationName: "authorizerCredentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerPayloadFormatVersion", location: .body(locationName: "authorizerPayloadFormatVersion"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerResultTtlInSeconds", location: .body(locationName: "authorizerResultTtlInSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthorizerType", location: .body(locationName: "authorizerType"), required: true, type: .enum), 
            AWSShapeMember(label: "AuthorizerUri", location: .body(locationName: "authorizerUri"), required: false, type: .string), 
            AWSShapeMember(label: "EnableSimpleResponses", location: .body(locationName: "enableSimpleResponses"), required: false, type: .boolean), 
            AWSShapeMember(label: "IdentitySource", location: .body(locationName: "identitySource"), required: true, type: .list), 
            AWSShapeMember(label: "IdentityValidationExpression", location: .body(locationName: "identityValidationExpression"), required: false, type: .string), 
            AWSShapeMember(label: "JwtConfiguration", location: .body(locationName: "jwtConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string)
        ]

        public let apiId: String
        public let authorizerCredentialsArn: String?
        public let authorizerPayloadFormatVersion: String?
        public let authorizerResultTtlInSeconds: Int?
        public let authorizerType: AuthorizerType
        public let authorizerUri: String?
        public let enableSimpleResponses: Bool?
        public let identitySource: [String]
        public let identityValidationExpression: String?
        public let jwtConfiguration: JWTConfiguration?
        public let name: String

        public init(apiId: String, authorizerCredentialsArn: String? = nil, authorizerPayloadFormatVersion: String? = nil, authorizerResultTtlInSeconds: Int? = nil, authorizerType: AuthorizerType, authorizerUri: String? = nil, enableSimpleResponses: Bool? = nil, identitySource: [String], identityValidationExpression: String? = nil, jwtConfiguration: JWTConfiguration? = nil, name: String) {
            self.apiId = apiId
            self.authorizerCredentialsArn = authorizerCredentialsArn
            self.authorizerPayloadFormatVersion = authorizerPayloadFormatVersion
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerType = authorizerType
            self.authorizerUri = authorizerUri
            self.enableSimpleResponses = enableSimpleResponses
            self.identitySource = identitySource
            self.identityValidationExpression = identityValidationExpression
            self.jwtConfiguration = jwtConfiguration
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.authorizerResultTtlInSeconds, name:"authorizerResultTtlInSeconds", parent: name, max: 3600)
            try validate(self.authorizerResultTtlInSeconds, name:"authorizerResultTtlInSeconds", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case authorizerCredentialsArn = "authorizerCredentialsArn"
            case authorizerPayloadFormatVersion = "authorizerPayloadFormatVersion"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerType = "authorizerType"
            case authorizerUri = "authorizerUri"
            case enableSimpleResponses = "enableSimpleResponses"
            case identitySource = "identitySource"
            case identityValidationExpression = "identityValidationExpression"
            case jwtConfiguration = "jwtConfiguration"
            case name = "name"
        }
    }

    public struct CreateAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthorizerCredentialsArn", location: .body(locationName: "authorizerCredentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerPayloadFormatVersion", location: .body(locationName: "authorizerPayloadFormatVersion"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerResultTtlInSeconds", location: .body(locationName: "authorizerResultTtlInSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthorizerType", location: .body(locationName: "authorizerType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerUri", location: .body(locationName: "authorizerUri"), required: false, type: .string), 
            AWSShapeMember(label: "EnableSimpleResponses", location: .body(locationName: "enableSimpleResponses"), required: false, type: .boolean), 
            AWSShapeMember(label: "IdentitySource", location: .body(locationName: "identitySource"), required: false, type: .list), 
            AWSShapeMember(label: "IdentityValidationExpression", location: .body(locationName: "identityValidationExpression"), required: false, type: .string), 
            AWSShapeMember(label: "JwtConfiguration", location: .body(locationName: "jwtConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        public let authorizerCredentialsArn: String?
        public let authorizerId: String?
        public let authorizerPayloadFormatVersion: String?
        public let authorizerResultTtlInSeconds: Int?
        public let authorizerType: AuthorizerType?
        public let authorizerUri: String?
        public let enableSimpleResponses: Bool?
        public let identitySource: [String]?
        public let identityValidationExpression: String?
        public let jwtConfiguration: JWTConfiguration?
        public let name: String?

        public init(authorizerCredentialsArn: String? = nil, authorizerId: String? = nil, authorizerPayloadFormatVersion: String? = nil, authorizerResultTtlInSeconds: Int? = nil, authorizerType: AuthorizerType? = nil, authorizerUri: String? = nil, enableSimpleResponses: Bool? = nil, identitySource: [String]? = nil, identityValidationExpression: String? = nil, jwtConfiguration: JWTConfiguration? = nil, name: String? = nil) {
            self.authorizerCredentialsArn = authorizerCredentialsArn
            self.authorizerId = authorizerId
            self.authorizerPayloadFormatVersion = authorizerPayloadFormatVersion
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerType = authorizerType
            self.authorizerUri = authorizerUri
            self.enableSimpleResponses = enableSimpleResponses
            self.identitySource = identitySource
            self.identityValidationExpression = identityValidationExpression
            self.jwtConfiguration = jwtConfiguration
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerCredentialsArn = "authorizerCredentialsArn"
            case authorizerId = "authorizerId"
            case authorizerPayloadFormatVersion = "authorizerPayloadFormatVersion"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerType = "authorizerType"
            case authorizerUri = "authorizerUri"
            case enableSimpleResponses = "enableSimpleResponses"
            case identitySource = "identitySource"
            case identityValidationExpression = "identityValidationExpression"
            case jwtConfiguration = "jwtConfiguration"
            case name = "name"
        }
    }

    public struct CreateDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "StageName", location: .body(locationName: "stageName"), required: false, type: .string)
        ]

        public let apiId: String
        public let description: String?
        public let stageName: String?

        public init(apiId: String, description: String? = nil, stageName: String? = nil) {
            self.apiId = apiId
            self.description = description
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case description = "description"
            case stageName = "stageName"
        }
    }

    public struct CreateDeploymentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoDeployed", location: .body(locationName: "autoDeployed"), required: false, type: .boolean), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "DeploymentStatus", location: .body(locationName: "deploymentStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "DeploymentStatusMessage", location: .body(locationName: "deploymentStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]

        public let autoDeployed: Bool?
        public let createdDate: TimeStamp?
        public let deploymentId: String?
        public let deploymentStatus: DeploymentStatus?
        public let deploymentStatusMessage: String?
        public let description: String?

        public init(autoDeployed: Bool? = nil, createdDate: TimeStamp? = nil, deploymentId: String? = nil, deploymentStatus: DeploymentStatus? = nil, deploymentStatusMessage: String? = nil, description: String? = nil) {
            self.autoDeployed = autoDeployed
            self.createdDate = createdDate
            self.deploymentId = deploymentId
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case autoDeployed = "autoDeployed"
            case createdDate = "createdDate"
            case deploymentId = "deploymentId"
            case deploymentStatus = "deploymentStatus"
            case deploymentStatusMessage = "deploymentStatusMessage"
            case description = "description"
        }
    }

    public struct CreateDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .body(locationName: "domainName"), required: true, type: .string), 
            AWSShapeMember(label: "DomainNameConfigurations", location: .body(locationName: "domainNameConfigurations"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let domainName: String
        public let domainNameConfigurations: [DomainNameConfiguration]?
        public let tags: [String: String]?

        public init(domainName: String, domainNameConfigurations: [DomainNameConfiguration]? = nil, tags: [String: String]? = nil) {
            self.domainName = domainName
            self.domainNameConfigurations = domainNameConfigurations
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case domainNameConfigurations = "domainNameConfigurations"
            case tags = "tags"
        }
    }

    public struct CreateDomainNameResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiMappingSelectionExpression", location: .body(locationName: "apiMappingSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "DomainName", location: .body(locationName: "domainName"), required: false, type: .string), 
            AWSShapeMember(label: "DomainNameConfigurations", location: .body(locationName: "domainNameConfigurations"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let apiMappingSelectionExpression: String?
        public let domainName: String?
        public let domainNameConfigurations: [DomainNameConfiguration]?
        public let tags: [String: String]?

        public init(apiMappingSelectionExpression: String? = nil, domainName: String? = nil, domainNameConfigurations: [DomainNameConfiguration]? = nil, tags: [String: String]? = nil) {
            self.apiMappingSelectionExpression = apiMappingSelectionExpression
            self.domainName = domainName
            self.domainNameConfigurations = domainNameConfigurations
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case apiMappingSelectionExpression = "apiMappingSelectionExpression"
            case domainName = "domainName"
            case domainNameConfigurations = "domainNameConfigurations"
            case tags = "tags"
        }
    }

    public struct CreateIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionType", location: .body(locationName: "connectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationMethod", location: .body(locationName: "integrationMethod"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationSubtype", location: .body(locationName: "integrationSubtype"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationType", location: .body(locationName: "integrationType"), required: true, type: .enum), 
            AWSShapeMember(label: "IntegrationUri", location: .body(locationName: "integrationUri"), required: false, type: .string), 
            AWSShapeMember(label: "PassthroughBehavior", location: .body(locationName: "passthroughBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "PayloadFormatVersion", location: .body(locationName: "payloadFormatVersion"), required: false, type: .string), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RequestTemplates", location: .body(locationName: "requestTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "TimeoutInMillis", location: .body(locationName: "timeoutInMillis"), required: false, type: .integer), 
            AWSShapeMember(label: "TlsConfig", location: .body(locationName: "tlsConfig"), required: false, type: .structure)
        ]

        public let apiId: String
        public let connectionId: String?
        public let connectionType: ConnectionType?
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let credentialsArn: String?
        public let description: String?
        public let integrationMethod: String?
        public let integrationSubtype: String?
        public let integrationType: IntegrationType
        public let integrationUri: String?
        public let passthroughBehavior: PassthroughBehavior?
        public let payloadFormatVersion: String?
        public let requestParameters: [String: String]?
        public let requestTemplates: [String: String]?
        public let templateSelectionExpression: String?
        public let timeoutInMillis: Int?
        public let tlsConfig: TlsConfigInput?

        public init(apiId: String, connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandlingStrategy: ContentHandlingStrategy? = nil, credentialsArn: String? = nil, description: String? = nil, integrationMethod: String? = nil, integrationSubtype: String? = nil, integrationType: IntegrationType, integrationUri: String? = nil, passthroughBehavior: PassthroughBehavior? = nil, payloadFormatVersion: String? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil, timeoutInMillis: Int? = nil, tlsConfig: TlsConfigInput? = nil) {
            self.apiId = apiId
            self.connectionId = connectionId
            self.connectionType = connectionType
            self.contentHandlingStrategy = contentHandlingStrategy
            self.credentialsArn = credentialsArn
            self.description = description
            self.integrationMethod = integrationMethod
            self.integrationSubtype = integrationSubtype
            self.integrationType = integrationType
            self.integrationUri = integrationUri
            self.passthroughBehavior = passthroughBehavior
            self.payloadFormatVersion = payloadFormatVersion
            self.requestParameters = requestParameters
            self.requestTemplates = requestTemplates
            self.templateSelectionExpression = templateSelectionExpression
            self.timeoutInMillis = timeoutInMillis
            self.tlsConfig = tlsConfig
        }

        public func validate(name: String) throws {
            try validate(self.timeoutInMillis, name:"timeoutInMillis", parent: name, max: 30000)
            try validate(self.timeoutInMillis, name:"timeoutInMillis", parent: name, min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case connectionId = "connectionId"
            case connectionType = "connectionType"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case integrationMethod = "integrationMethod"
            case integrationSubtype = "integrationSubtype"
            case integrationType = "integrationType"
            case integrationUri = "integrationUri"
            case passthroughBehavior = "passthroughBehavior"
            case payloadFormatVersion = "payloadFormatVersion"
            case requestParameters = "requestParameters"
            case requestTemplates = "requestTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
            case timeoutInMillis = "timeoutInMillis"
            case tlsConfig = "tlsConfig"
        }
    }

    public struct CreateIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationResponseKey", location: .body(locationName: "integrationResponseKey"), required: true, type: .string), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseTemplates", location: .body(locationName: "responseTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string)
        ]

        public let apiId: String
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let integrationId: String
        public let integrationResponseKey: String
        public let responseParameters: [String: String]?
        public let responseTemplates: [String: String]?
        public let templateSelectionExpression: String?

        public init(apiId: String, contentHandlingStrategy: ContentHandlingStrategy? = nil, integrationId: String, integrationResponseKey: String, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil) {
            self.apiId = apiId
            self.contentHandlingStrategy = contentHandlingStrategy
            self.integrationId = integrationId
            self.integrationResponseKey = integrationResponseKey
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.templateSelectionExpression = templateSelectionExpression
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case integrationId = "integrationId"
            case integrationResponseKey = "integrationResponseKey"
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
        }
    }

    public struct CreateIntegrationResponseResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationResponseId", location: .body(locationName: "integrationResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseKey", location: .body(locationName: "integrationResponseKey"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseTemplates", location: .body(locationName: "responseTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string)
        ]

        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let integrationResponseId: String?
        public let integrationResponseKey: String?
        public let responseParameters: [String: String]?
        public let responseTemplates: [String: String]?
        public let templateSelectionExpression: String?

        public init(contentHandlingStrategy: ContentHandlingStrategy? = nil, integrationResponseId: String? = nil, integrationResponseKey: String? = nil, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil) {
            self.contentHandlingStrategy = contentHandlingStrategy
            self.integrationResponseId = integrationResponseId
            self.integrationResponseKey = integrationResponseKey
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.templateSelectionExpression = templateSelectionExpression
        }

        private enum CodingKeys: String, CodingKey {
            case contentHandlingStrategy = "contentHandlingStrategy"
            case integrationResponseId = "integrationResponseId"
            case integrationResponseKey = "integrationResponseKey"
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
        }
    }

    public struct CreateIntegrationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionType", location: .body(locationName: "connectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .body(locationName: "integrationId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationMethod", location: .body(locationName: "integrationMethod"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseSelectionExpression", location: .body(locationName: "integrationResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationSubtype", location: .body(locationName: "integrationSubtype"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationType", location: .body(locationName: "integrationType"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationUri", location: .body(locationName: "integrationUri"), required: false, type: .string), 
            AWSShapeMember(label: "PassthroughBehavior", location: .body(locationName: "passthroughBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "PayloadFormatVersion", location: .body(locationName: "payloadFormatVersion"), required: false, type: .string), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RequestTemplates", location: .body(locationName: "requestTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "TimeoutInMillis", location: .body(locationName: "timeoutInMillis"), required: false, type: .integer), 
            AWSShapeMember(label: "TlsConfig", location: .body(locationName: "tlsConfig"), required: false, type: .structure)
        ]

        public let apiGatewayManaged: Bool?
        public let connectionId: String?
        public let connectionType: ConnectionType?
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let credentialsArn: String?
        public let description: String?
        public let integrationId: String?
        public let integrationMethod: String?
        public let integrationResponseSelectionExpression: String?
        public let integrationSubtype: String?
        public let integrationType: IntegrationType?
        public let integrationUri: String?
        public let passthroughBehavior: PassthroughBehavior?
        public let payloadFormatVersion: String?
        public let requestParameters: [String: String]?
        public let requestTemplates: [String: String]?
        public let templateSelectionExpression: String?
        public let timeoutInMillis: Int?
        public let tlsConfig: TlsConfig?

        public init(apiGatewayManaged: Bool? = nil, connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandlingStrategy: ContentHandlingStrategy? = nil, credentialsArn: String? = nil, description: String? = nil, integrationId: String? = nil, integrationMethod: String? = nil, integrationResponseSelectionExpression: String? = nil, integrationSubtype: String? = nil, integrationType: IntegrationType? = nil, integrationUri: String? = nil, passthroughBehavior: PassthroughBehavior? = nil, payloadFormatVersion: String? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil, timeoutInMillis: Int? = nil, tlsConfig: TlsConfig? = nil) {
            self.apiGatewayManaged = apiGatewayManaged
            self.connectionId = connectionId
            self.connectionType = connectionType
            self.contentHandlingStrategy = contentHandlingStrategy
            self.credentialsArn = credentialsArn
            self.description = description
            self.integrationId = integrationId
            self.integrationMethod = integrationMethod
            self.integrationResponseSelectionExpression = integrationResponseSelectionExpression
            self.integrationSubtype = integrationSubtype
            self.integrationType = integrationType
            self.integrationUri = integrationUri
            self.passthroughBehavior = passthroughBehavior
            self.payloadFormatVersion = payloadFormatVersion
            self.requestParameters = requestParameters
            self.requestTemplates = requestTemplates
            self.templateSelectionExpression = templateSelectionExpression
            self.timeoutInMillis = timeoutInMillis
            self.tlsConfig = tlsConfig
        }

        private enum CodingKeys: String, CodingKey {
            case apiGatewayManaged = "apiGatewayManaged"
            case connectionId = "connectionId"
            case connectionType = "connectionType"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case integrationId = "integrationId"
            case integrationMethod = "integrationMethod"
            case integrationResponseSelectionExpression = "integrationResponseSelectionExpression"
            case integrationSubtype = "integrationSubtype"
            case integrationType = "integrationType"
            case integrationUri = "integrationUri"
            case passthroughBehavior = "passthroughBehavior"
            case payloadFormatVersion = "payloadFormatVersion"
            case requestParameters = "requestParameters"
            case requestTemplates = "requestTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
            case timeoutInMillis = "timeoutInMillis"
            case tlsConfig = "tlsConfig"
        }
    }

    public struct CreateModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ContentType", location: .body(locationName: "contentType"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Schema", location: .body(locationName: "schema"), required: true, type: .string)
        ]

        public let apiId: String
        public let contentType: String?
        public let description: String?
        public let name: String
        public let schema: String

        public init(apiId: String, contentType: String? = nil, description: String? = nil, name: String, schema: String) {
            self.apiId = apiId
            self.contentType = contentType
            self.description = description
            self.name = name
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case contentType = "contentType"
            case description = "description"
            case name = "name"
            case schema = "schema"
        }
    }

    public struct CreateModelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentType", location: .body(locationName: "contentType"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ModelId", location: .body(locationName: "modelId"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Schema", location: .body(locationName: "schema"), required: false, type: .string)
        ]

        public let contentType: String?
        public let description: String?
        public let modelId: String?
        public let name: String?
        public let schema: String?

        public init(contentType: String? = nil, description: String? = nil, modelId: String? = nil, name: String? = nil, schema: String? = nil) {
            self.contentType = contentType
            self.description = description
            self.modelId = modelId
            self.name = name
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "contentType"
            case description = "description"
            case modelId = "modelId"
            case name = "name"
            case schema = "schema"
        }
    }

    public struct CreateRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiKeyRequired", location: .body(locationName: "apiKeyRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthorizationScopes", location: .body(locationName: "authorizationScopes"), required: false, type: .list), 
            AWSShapeMember(label: "AuthorizationType", location: .body(locationName: "authorizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "OperationName", location: .body(locationName: "operationName"), required: false, type: .string), 
            AWSShapeMember(label: "RequestModels", location: .body(locationName: "requestModels"), required: false, type: .map), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseSelectionExpression", location: .body(locationName: "routeResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string)
        ]

        public let apiId: String
        public let apiKeyRequired: Bool?
        public let authorizationScopes: [String]?
        public let authorizationType: AuthorizationType?
        public let authorizerId: String?
        public let modelSelectionExpression: String?
        public let operationName: String?
        public let requestModels: [String: String]?
        public let requestParameters: [String: ParameterConstraints]?
        public let routeKey: String
        public let routeResponseSelectionExpression: String?
        public let target: String?

        public init(apiId: String, apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: AuthorizationType? = nil, authorizerId: String? = nil, modelSelectionExpression: String? = nil, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: ParameterConstraints]? = nil, routeKey: String, routeResponseSelectionExpression: String? = nil, target: String? = nil) {
            self.apiId = apiId
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.authorizationType = authorizationType
            self.authorizerId = authorizerId
            self.modelSelectionExpression = modelSelectionExpression
            self.operationName = operationName
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.routeKey = routeKey
            self.routeResponseSelectionExpression = routeResponseSelectionExpression
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiKeyRequired = "apiKeyRequired"
            case authorizationScopes = "authorizationScopes"
            case authorizationType = "authorizationType"
            case authorizerId = "authorizerId"
            case modelSelectionExpression = "modelSelectionExpression"
            case operationName = "operationName"
            case requestModels = "requestModels"
            case requestParameters = "requestParameters"
            case routeKey = "routeKey"
            case routeResponseSelectionExpression = "routeResponseSelectionExpression"
            case target = "target"
        }
    }

    public struct CreateRouteResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseModels", location: .body(locationName: "responseModels"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseKey", location: .body(locationName: "routeResponseKey"), required: true, type: .string)
        ]

        public let apiId: String
        public let modelSelectionExpression: String?
        public let responseModels: [String: String]?
        public let responseParameters: [String: ParameterConstraints]?
        public let routeId: String
        public let routeResponseKey: String

        public init(apiId: String, modelSelectionExpression: String? = nil, responseModels: [String: String]? = nil, responseParameters: [String: ParameterConstraints]? = nil, routeId: String, routeResponseKey: String) {
            self.apiId = apiId
            self.modelSelectionExpression = modelSelectionExpression
            self.responseModels = responseModels
            self.responseParameters = responseParameters
            self.routeId = routeId
            self.routeResponseKey = routeResponseKey
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case modelSelectionExpression = "modelSelectionExpression"
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
            case routeId = "routeId"
            case routeResponseKey = "routeResponseKey"
        }
    }

    public struct CreateRouteResponseResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseModels", location: .body(locationName: "responseModels"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteResponseId", location: .body(locationName: "routeResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseKey", location: .body(locationName: "routeResponseKey"), required: false, type: .string)
        ]

        public let modelSelectionExpression: String?
        public let responseModels: [String: String]?
        public let responseParameters: [String: ParameterConstraints]?
        public let routeResponseId: String?
        public let routeResponseKey: String?

        public init(modelSelectionExpression: String? = nil, responseModels: [String: String]? = nil, responseParameters: [String: ParameterConstraints]? = nil, routeResponseId: String? = nil, routeResponseKey: String? = nil) {
            self.modelSelectionExpression = modelSelectionExpression
            self.responseModels = responseModels
            self.responseParameters = responseParameters
            self.routeResponseId = routeResponseId
            self.routeResponseKey = routeResponseKey
        }

        private enum CodingKeys: String, CodingKey {
            case modelSelectionExpression = "modelSelectionExpression"
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
            case routeResponseId = "routeResponseId"
            case routeResponseKey = "routeResponseKey"
        }
    }

    public struct CreateRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ApiKeyRequired", location: .body(locationName: "apiKeyRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthorizationScopes", location: .body(locationName: "authorizationScopes"), required: false, type: .list), 
            AWSShapeMember(label: "AuthorizationType", location: .body(locationName: "authorizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "OperationName", location: .body(locationName: "operationName"), required: false, type: .string), 
            AWSShapeMember(label: "RequestModels", location: .body(locationName: "requestModels"), required: false, type: .map), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .body(locationName: "routeId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseSelectionExpression", location: .body(locationName: "routeResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string)
        ]

        public let apiGatewayManaged: Bool?
        public let apiKeyRequired: Bool?
        public let authorizationScopes: [String]?
        public let authorizationType: AuthorizationType?
        public let authorizerId: String?
        public let modelSelectionExpression: String?
        public let operationName: String?
        public let requestModels: [String: String]?
        public let requestParameters: [String: ParameterConstraints]?
        public let routeId: String?
        public let routeKey: String?
        public let routeResponseSelectionExpression: String?
        public let target: String?

        public init(apiGatewayManaged: Bool? = nil, apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: AuthorizationType? = nil, authorizerId: String? = nil, modelSelectionExpression: String? = nil, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: ParameterConstraints]? = nil, routeId: String? = nil, routeKey: String? = nil, routeResponseSelectionExpression: String? = nil, target: String? = nil) {
            self.apiGatewayManaged = apiGatewayManaged
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.authorizationType = authorizationType
            self.authorizerId = authorizerId
            self.modelSelectionExpression = modelSelectionExpression
            self.operationName = operationName
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.routeId = routeId
            self.routeKey = routeKey
            self.routeResponseSelectionExpression = routeResponseSelectionExpression
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case apiGatewayManaged = "apiGatewayManaged"
            case apiKeyRequired = "apiKeyRequired"
            case authorizationScopes = "authorizationScopes"
            case authorizationType = "authorizationType"
            case authorizerId = "authorizerId"
            case modelSelectionExpression = "modelSelectionExpression"
            case operationName = "operationName"
            case requestModels = "requestModels"
            case requestParameters = "requestParameters"
            case routeId = "routeId"
            case routeKey = "routeKey"
            case routeResponseSelectionExpression = "routeResponseSelectionExpression"
            case target = "target"
        }
    }

    public struct CreateStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessLogSettings", location: .body(locationName: "accessLogSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "AutoDeploy", location: .body(locationName: "autoDeploy"), required: false, type: .boolean), 
            AWSShapeMember(label: "ClientCertificateId", location: .body(locationName: "clientCertificateId"), required: false, type: .string), 
            AWSShapeMember(label: "DefaultRouteSettings", location: .body(locationName: "defaultRouteSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "RouteSettings", location: .body(locationName: "routeSettings"), required: false, type: .map), 
            AWSShapeMember(label: "StageName", location: .body(locationName: "stageName"), required: true, type: .string), 
            AWSShapeMember(label: "StageVariables", location: .body(locationName: "stageVariables"), required: false, type: .map), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let accessLogSettings: AccessLogSettings?
        public let apiId: String
        public let autoDeploy: Bool?
        public let clientCertificateId: String?
        public let defaultRouteSettings: RouteSettings?
        public let deploymentId: String?
        public let description: String?
        public let routeSettings: [String: RouteSettings]?
        public let stageName: String
        public let stageVariables: [String: String]?
        public let tags: [String: String]?

        public init(accessLogSettings: AccessLogSettings? = nil, apiId: String, autoDeploy: Bool? = nil, clientCertificateId: String? = nil, defaultRouteSettings: RouteSettings? = nil, deploymentId: String? = nil, description: String? = nil, routeSettings: [String: RouteSettings]? = nil, stageName: String, stageVariables: [String: String]? = nil, tags: [String: String]? = nil) {
            self.accessLogSettings = accessLogSettings
            self.apiId = apiId
            self.autoDeploy = autoDeploy
            self.clientCertificateId = clientCertificateId
            self.defaultRouteSettings = defaultRouteSettings
            self.deploymentId = deploymentId
            self.description = description
            self.routeSettings = routeSettings
            self.stageName = stageName
            self.stageVariables = stageVariables
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogSettings = "accessLogSettings"
            case apiId = "apiId"
            case autoDeploy = "autoDeploy"
            case clientCertificateId = "clientCertificateId"
            case defaultRouteSettings = "defaultRouteSettings"
            case deploymentId = "deploymentId"
            case description = "description"
            case routeSettings = "routeSettings"
            case stageName = "stageName"
            case stageVariables = "stageVariables"
            case tags = "tags"
        }
    }

    public struct CreateStageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessLogSettings", location: .body(locationName: "accessLogSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "AutoDeploy", location: .body(locationName: "autoDeploy"), required: false, type: .boolean), 
            AWSShapeMember(label: "ClientCertificateId", location: .body(locationName: "clientCertificateId"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultRouteSettings", location: .body(locationName: "defaultRouteSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "LastDeploymentStatusMessage", location: .body(locationName: "lastDeploymentStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedDate", location: .body(locationName: "lastUpdatedDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RouteSettings", location: .body(locationName: "routeSettings"), required: false, type: .map), 
            AWSShapeMember(label: "StageName", location: .body(locationName: "stageName"), required: false, type: .string), 
            AWSShapeMember(label: "StageVariables", location: .body(locationName: "stageVariables"), required: false, type: .map), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let accessLogSettings: AccessLogSettings?
        public let apiGatewayManaged: Bool?
        public let autoDeploy: Bool?
        public let clientCertificateId: String?
        public let createdDate: TimeStamp?
        public let defaultRouteSettings: RouteSettings?
        public let deploymentId: String?
        public let description: String?
        public let lastDeploymentStatusMessage: String?
        public let lastUpdatedDate: TimeStamp?
        public let routeSettings: [String: RouteSettings]?
        public let stageName: String?
        public let stageVariables: [String: String]?
        public let tags: [String: String]?

        public init(accessLogSettings: AccessLogSettings? = nil, apiGatewayManaged: Bool? = nil, autoDeploy: Bool? = nil, clientCertificateId: String? = nil, createdDate: TimeStamp? = nil, defaultRouteSettings: RouteSettings? = nil, deploymentId: String? = nil, description: String? = nil, lastDeploymentStatusMessage: String? = nil, lastUpdatedDate: TimeStamp? = nil, routeSettings: [String: RouteSettings]? = nil, stageName: String? = nil, stageVariables: [String: String]? = nil, tags: [String: String]? = nil) {
            self.accessLogSettings = accessLogSettings
            self.apiGatewayManaged = apiGatewayManaged
            self.autoDeploy = autoDeploy
            self.clientCertificateId = clientCertificateId
            self.createdDate = createdDate
            self.defaultRouteSettings = defaultRouteSettings
            self.deploymentId = deploymentId
            self.description = description
            self.lastDeploymentStatusMessage = lastDeploymentStatusMessage
            self.lastUpdatedDate = lastUpdatedDate
            self.routeSettings = routeSettings
            self.stageName = stageName
            self.stageVariables = stageVariables
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogSettings = "accessLogSettings"
            case apiGatewayManaged = "apiGatewayManaged"
            case autoDeploy = "autoDeploy"
            case clientCertificateId = "clientCertificateId"
            case createdDate = "createdDate"
            case defaultRouteSettings = "defaultRouteSettings"
            case deploymentId = "deploymentId"
            case description = "description"
            case lastDeploymentStatusMessage = "lastDeploymentStatusMessage"
            case lastUpdatedDate = "lastUpdatedDate"
            case routeSettings = "routeSettings"
            case stageName = "stageName"
            case stageVariables = "stageVariables"
            case tags = "tags"
        }
    }

    public struct CreateVpcLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "securityGroupIds"), required: false, type: .list), 
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "subnetIds"), required: true, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let name: String
        public let securityGroupIds: [String]?
        public let subnetIds: [String]
        public let tags: [String: String]?

        public init(name: String, securityGroupIds: [String]? = nil, subnetIds: [String], tags: [String: String]? = nil) {
            self.name = name
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case securityGroupIds = "securityGroupIds"
            case subnetIds = "subnetIds"
            case tags = "tags"
        }
    }

    public struct CreateVpcLinkResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "securityGroupIds"), required: false, type: .list), 
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "subnetIds"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "VpcLinkId", location: .body(locationName: "vpcLinkId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcLinkStatus", location: .body(locationName: "vpcLinkStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcLinkStatusMessage", location: .body(locationName: "vpcLinkStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "VpcLinkVersion", location: .body(locationName: "vpcLinkVersion"), required: false, type: .enum)
        ]

        public let createdDate: TimeStamp?
        public let name: String?
        public let securityGroupIds: [String]?
        public let subnetIds: [String]?
        public let tags: [String: String]?
        public let vpcLinkId: String?
        public let vpcLinkStatus: VpcLinkStatus?
        public let vpcLinkStatusMessage: String?
        public let vpcLinkVersion: VpcLinkVersion?

        public init(createdDate: TimeStamp? = nil, name: String? = nil, securityGroupIds: [String]? = nil, subnetIds: [String]? = nil, tags: [String: String]? = nil, vpcLinkId: String? = nil, vpcLinkStatus: VpcLinkStatus? = nil, vpcLinkStatusMessage: String? = nil, vpcLinkVersion: VpcLinkVersion? = nil) {
            self.createdDate = createdDate
            self.name = name
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcLinkId = vpcLinkId
            self.vpcLinkStatus = vpcLinkStatus
            self.vpcLinkStatusMessage = vpcLinkStatusMessage
            self.vpcLinkVersion = vpcLinkVersion
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "createdDate"
            case name = "name"
            case securityGroupIds = "securityGroupIds"
            case subnetIds = "subnetIds"
            case tags = "tags"
            case vpcLinkId = "vpcLinkId"
            case vpcLinkStatus = "vpcLinkStatus"
            case vpcLinkStatusMessage = "vpcLinkStatusMessage"
            case vpcLinkVersion = "vpcLinkVersion"
        }
    }

    public struct DeleteAccessLogSettingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "StageName", location: .uri(locationName: "stageName"), required: true, type: .string)
        ]

        public let apiId: String
        public let stageName: String

        public init(apiId: String, stageName: String) {
            self.apiId = apiId
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case stageName = "stageName"
        }
    }

    public struct DeleteApiMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiMappingId", location: .uri(locationName: "apiMappingId"), required: true, type: .string), 
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string)
        ]

        public let apiMappingId: String
        public let domainName: String

        public init(apiMappingId: String, domainName: String) {
            self.apiMappingId = apiMappingId
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case apiMappingId = "apiMappingId"
            case domainName = "domainName"
        }
    }

    public struct DeleteApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]

        public let apiId: String

        public init(apiId: String) {
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
        }
    }

    public struct DeleteAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .uri(locationName: "authorizerId"), required: true, type: .string)
        ]

        public let apiId: String
        public let authorizerId: String

        public init(apiId: String, authorizerId: String) {
            self.apiId = apiId
            self.authorizerId = authorizerId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case authorizerId = "authorizerId"
        }
    }

    public struct DeleteCorsConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]

        public let apiId: String

        public init(apiId: String) {
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
        }
    }

    public struct DeleteDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "DeploymentId", location: .uri(locationName: "deploymentId"), required: true, type: .string)
        ]

        public let apiId: String
        public let deploymentId: String

        public init(apiId: String, deploymentId: String) {
            self.apiId = apiId
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case deploymentId = "deploymentId"
        }
    }

    public struct DeleteDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string)
        ]

        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

    public struct DeleteIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string)
        ]

        public let apiId: String
        public let integrationId: String

        public init(apiId: String, integrationId: String) {
            self.apiId = apiId
            self.integrationId = integrationId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case integrationId = "integrationId"
        }
    }

    public struct DeleteIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationResponseId", location: .uri(locationName: "integrationResponseId"), required: true, type: .string)
        ]

        public let apiId: String
        public let integrationId: String
        public let integrationResponseId: String

        public init(apiId: String, integrationId: String, integrationResponseId: String) {
            self.apiId = apiId
            self.integrationId = integrationId
            self.integrationResponseId = integrationResponseId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case integrationId = "integrationId"
            case integrationResponseId = "integrationResponseId"
        }
    }

    public struct DeleteModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ModelId", location: .uri(locationName: "modelId"), required: true, type: .string)
        ]

        public let apiId: String
        public let modelId: String

        public init(apiId: String, modelId: String) {
            self.apiId = apiId
            self.modelId = modelId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case modelId = "modelId"
        }
    }

    public struct DeleteRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string)
        ]

        public let apiId: String
        public let routeId: String

        public init(apiId: String, routeId: String) {
            self.apiId = apiId
            self.routeId = routeId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case routeId = "routeId"
        }
    }

    public struct DeleteRouteRequestParameterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "RequestParameterKey", location: .uri(locationName: "requestParameterKey"), required: true, type: .string), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string)
        ]

        public let apiId: String
        public let requestParameterKey: String
        public let routeId: String

        public init(apiId: String, requestParameterKey: String, routeId: String) {
            self.apiId = apiId
            self.requestParameterKey = requestParameterKey
            self.routeId = routeId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case requestParameterKey = "requestParameterKey"
            case routeId = "routeId"
        }
    }

    public struct DeleteRouteResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseId", location: .uri(locationName: "routeResponseId"), required: true, type: .string)
        ]

        public let apiId: String
        public let routeId: String
        public let routeResponseId: String

        public init(apiId: String, routeId: String, routeResponseId: String) {
            self.apiId = apiId
            self.routeId = routeId
            self.routeResponseId = routeResponseId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case routeId = "routeId"
            case routeResponseId = "routeResponseId"
        }
    }

    public struct DeleteRouteSettingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteKey", location: .uri(locationName: "routeKey"), required: true, type: .string), 
            AWSShapeMember(label: "StageName", location: .uri(locationName: "stageName"), required: true, type: .string)
        ]

        public let apiId: String
        public let routeKey: String
        public let stageName: String

        public init(apiId: String, routeKey: String, stageName: String) {
            self.apiId = apiId
            self.routeKey = routeKey
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case routeKey = "routeKey"
            case stageName = "stageName"
        }
    }

    public struct DeleteStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "StageName", location: .uri(locationName: "stageName"), required: true, type: .string)
        ]

        public let apiId: String
        public let stageName: String

        public init(apiId: String, stageName: String) {
            self.apiId = apiId
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case stageName = "stageName"
        }
    }

    public struct DeleteVpcLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcLinkId", location: .uri(locationName: "vpcLinkId"), required: true, type: .string)
        ]

        public let vpcLinkId: String

        public init(vpcLinkId: String) {
            self.vpcLinkId = vpcLinkId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcLinkId = "vpcLinkId"
        }
    }

    public struct DeleteVpcLinkResponse: AWSShape {


        public init() {
        }

    }

    public struct Deployment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoDeployed", location: .body(locationName: "autoDeployed"), required: false, type: .boolean), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "DeploymentStatus", location: .body(locationName: "deploymentStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "DeploymentStatusMessage", location: .body(locationName: "deploymentStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]

        /// Specifies whether a deployment was automatically released.
        public let autoDeployed: Bool?
        /// The date and time when the Deployment resource was created.
        public let createdDate: TimeStamp?
        /// The identifier for the deployment.
        public let deploymentId: String?
        /// The status of the deployment: PENDING, FAILED, or SUCCEEDED.
        public let deploymentStatus: DeploymentStatus?
        /// May contain additional feedback on the status of an API deployment.
        public let deploymentStatusMessage: String?
        /// The description for the deployment.
        public let description: String?

        public init(autoDeployed: Bool? = nil, createdDate: TimeStamp? = nil, deploymentId: String? = nil, deploymentStatus: DeploymentStatus? = nil, deploymentStatusMessage: String? = nil, description: String? = nil) {
            self.autoDeployed = autoDeployed
            self.createdDate = createdDate
            self.deploymentId = deploymentId
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case autoDeployed = "autoDeployed"
            case createdDate = "createdDate"
            case deploymentId = "deploymentId"
            case deploymentStatus = "deploymentStatus"
            case deploymentStatusMessage = "deploymentStatusMessage"
            case description = "description"
        }
    }

    public struct DomainName: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiMappingSelectionExpression", location: .body(locationName: "apiMappingSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "DomainName", location: .body(locationName: "domainName"), required: true, type: .string), 
            AWSShapeMember(label: "DomainNameConfigurations", location: .body(locationName: "domainNameConfigurations"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        /// The API mapping selection expression.
        public let apiMappingSelectionExpression: String?
        /// The name of the DomainName resource.
        public let domainName: String
        /// The domain name configurations.
        public let domainNameConfigurations: [DomainNameConfiguration]?
        /// The collection of tags associated with a domain name.
        public let tags: [String: String]?

        public init(apiMappingSelectionExpression: String? = nil, domainName: String, domainNameConfigurations: [DomainNameConfiguration]? = nil, tags: [String: String]? = nil) {
            self.apiMappingSelectionExpression = apiMappingSelectionExpression
            self.domainName = domainName
            self.domainNameConfigurations = domainNameConfigurations
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case apiMappingSelectionExpression = "apiMappingSelectionExpression"
            case domainName = "domainName"
            case domainNameConfigurations = "domainNameConfigurations"
            case tags = "tags"
        }
    }

    public struct DomainNameConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiGatewayDomainName", location: .body(locationName: "apiGatewayDomainName"), required: false, type: .string), 
            AWSShapeMember(label: "CertificateArn", location: .body(locationName: "certificateArn"), required: false, type: .string), 
            AWSShapeMember(label: "CertificateName", location: .body(locationName: "certificateName"), required: false, type: .string), 
            AWSShapeMember(label: "CertificateUploadDate", location: .body(locationName: "certificateUploadDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DomainNameStatus", location: .body(locationName: "domainNameStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "DomainNameStatusMessage", location: .body(locationName: "domainNameStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "EndpointType", location: .body(locationName: "endpointType"), required: false, type: .enum), 
            AWSShapeMember(label: "HostedZoneId", location: .body(locationName: "hostedZoneId"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityPolicy", location: .body(locationName: "securityPolicy"), required: false, type: .enum)
        ]

        /// A domain name for the API.
        public let apiGatewayDomainName: String?
        /// An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
        public let certificateArn: String?
        /// The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.
        public let certificateName: String?
        /// The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.
        public let certificateUploadDate: TimeStamp?
        /// The status of the domain name migration. The valid values are AVAILABLE and UPDATING. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.
        public let domainNameStatus: DomainNameStatus?
        /// An optional text message containing detailed information about status of the domain name migration.
        public let domainNameStatusMessage: String?
        /// The endpoint type.
        public let endpointType: EndpointType?
        /// The Amazon Route 53 Hosted Zone ID of the endpoint.
        public let hostedZoneId: String?
        /// The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
        public let securityPolicy: SecurityPolicy?

        public init(apiGatewayDomainName: String? = nil, certificateArn: String? = nil, certificateName: String? = nil, certificateUploadDate: TimeStamp? = nil, domainNameStatus: DomainNameStatus? = nil, domainNameStatusMessage: String? = nil, endpointType: EndpointType? = nil, hostedZoneId: String? = nil, securityPolicy: SecurityPolicy? = nil) {
            self.apiGatewayDomainName = apiGatewayDomainName
            self.certificateArn = certificateArn
            self.certificateName = certificateName
            self.certificateUploadDate = certificateUploadDate
            self.domainNameStatus = domainNameStatus
            self.domainNameStatusMessage = domainNameStatusMessage
            self.endpointType = endpointType
            self.hostedZoneId = hostedZoneId
            self.securityPolicy = securityPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case apiGatewayDomainName = "apiGatewayDomainName"
            case certificateArn = "certificateArn"
            case certificateName = "certificateName"
            case certificateUploadDate = "certificateUploadDate"
            case domainNameStatus = "domainNameStatus"
            case domainNameStatusMessage = "domainNameStatusMessage"
            case endpointType = "endpointType"
            case hostedZoneId = "hostedZoneId"
            case securityPolicy = "securityPolicy"
        }
    }

    public struct ExportApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ExportVersion", location: .querystring(locationName: "exportVersion"), required: false, type: .string), 
            AWSShapeMember(label: "IncludeExtensions", location: .querystring(locationName: "includeExtensions"), required: false, type: .boolean), 
            AWSShapeMember(label: "OutputType", location: .querystring(locationName: "outputType"), required: true, type: .string), 
            AWSShapeMember(label: "Specification", location: .uri(locationName: "specification"), required: true, type: .string), 
            AWSShapeMember(label: "StageName", location: .querystring(locationName: "stageName"), required: false, type: .string)
        ]

        public let apiId: String
        public let exportVersion: String?
        public let includeExtensions: Bool?
        public let outputType: String
        public let specification: String
        public let stageName: String?

        public init(apiId: String, exportVersion: String? = nil, includeExtensions: Bool? = nil, outputType: String, specification: String, stageName: String? = nil) {
            self.apiId = apiId
            self.exportVersion = exportVersion
            self.includeExtensions = includeExtensions
            self.outputType = outputType
            self.specification = specification
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case exportVersion = "exportVersion"
            case includeExtensions = "includeExtensions"
            case outputType = "outputType"
            case specification = "specification"
            case stageName = "stageName"
        }
    }

    public struct ExportApiResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "body"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "body", required: false, type: .blob)
        ]

        public let body: Data?

        public init(body: Data? = nil) {
            self.body = body
        }

        private enum CodingKeys: String, CodingKey {
            case body = "body"
        }
    }

    public struct GetApiMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiMappingId", location: .uri(locationName: "apiMappingId"), required: true, type: .string), 
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string)
        ]

        public let apiMappingId: String
        public let domainName: String

        public init(apiMappingId: String, domainName: String) {
            self.apiMappingId = apiMappingId
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case apiMappingId = "apiMappingId"
            case domainName = "domainName"
        }
    }

    public struct GetApiMappingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingId", location: .body(locationName: "apiMappingId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingKey", location: .body(locationName: "apiMappingKey"), required: false, type: .string), 
            AWSShapeMember(label: "Stage", location: .body(locationName: "stage"), required: false, type: .string)
        ]

        public let apiId: String?
        public let apiMappingId: String?
        public let apiMappingKey: String?
        public let stage: String?

        public init(apiId: String? = nil, apiMappingId: String? = nil, apiMappingKey: String? = nil, stage: String? = nil) {
            self.apiId = apiId
            self.apiMappingId = apiMappingId
            self.apiMappingKey = apiMappingKey
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiMappingId = "apiMappingId"
            case apiMappingKey = "apiMappingKey"
            case stage = "stage"
        }
    }

    public struct GetApiMappingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let domainName: String
        public let maxResults: String?
        public let nextToken: String?

        public init(domainName: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.domainName = domainName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetApiMappingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [ApiMapping]?
        public let nextToken: String?

        public init(items: [ApiMapping]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]

        public let apiId: String

        public init(apiId: String) {
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
        }
    }

    public struct GetApiResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiEndpoint", location: .body(locationName: "apiEndpoint"), required: false, type: .string), 
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "CorsConfiguration", location: .body(locationName: "corsConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImportInfo", location: .body(locationName: "importInfo"), required: false, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ProtocolType", location: .body(locationName: "protocolType"), required: false, type: .enum), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string), 
            AWSShapeMember(label: "Warnings", location: .body(locationName: "warnings"), required: false, type: .list)
        ]

        public let apiEndpoint: String?
        public let apiGatewayManaged: Bool?
        public let apiId: String?
        public let apiKeySelectionExpression: String?
        public let corsConfiguration: Cors?
        public let createdDate: TimeStamp?
        public let description: String?
        public let disableSchemaValidation: Bool?
        public let importInfo: [String]?
        public let name: String?
        public let protocolType: ProtocolType?
        public let routeSelectionExpression: String?
        public let tags: [String: String]?
        public let version: String?
        public let warnings: [String]?

        public init(apiEndpoint: String? = nil, apiGatewayManaged: Bool? = nil, apiId: String? = nil, apiKeySelectionExpression: String? = nil, corsConfiguration: Cors? = nil, createdDate: TimeStamp? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, importInfo: [String]? = nil, name: String? = nil, protocolType: ProtocolType? = nil, routeSelectionExpression: String? = nil, tags: [String: String]? = nil, version: String? = nil, warnings: [String]? = nil) {
            self.apiEndpoint = apiEndpoint
            self.apiGatewayManaged = apiGatewayManaged
            self.apiId = apiId
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.corsConfiguration = corsConfiguration
            self.createdDate = createdDate
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.importInfo = importInfo
            self.name = name
            self.protocolType = protocolType
            self.routeSelectionExpression = routeSelectionExpression
            self.tags = tags
            self.version = version
            self.warnings = warnings
        }

        private enum CodingKeys: String, CodingKey {
            case apiEndpoint = "apiEndpoint"
            case apiGatewayManaged = "apiGatewayManaged"
            case apiId = "apiId"
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case corsConfiguration = "corsConfiguration"
            case createdDate = "createdDate"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case importInfo = "importInfo"
            case name = "name"
            case protocolType = "protocolType"
            case routeSelectionExpression = "routeSelectionExpression"
            case tags = "tags"
            case version = "version"
            case warnings = "warnings"
        }
    }

    public struct GetApisRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetApisResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Api]?
        public let nextToken: String?

        public init(items: [Api]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .uri(locationName: "authorizerId"), required: true, type: .string)
        ]

        public let apiId: String
        public let authorizerId: String

        public init(apiId: String, authorizerId: String) {
            self.apiId = apiId
            self.authorizerId = authorizerId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case authorizerId = "authorizerId"
        }
    }

    public struct GetAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthorizerCredentialsArn", location: .body(locationName: "authorizerCredentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerPayloadFormatVersion", location: .body(locationName: "authorizerPayloadFormatVersion"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerResultTtlInSeconds", location: .body(locationName: "authorizerResultTtlInSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthorizerType", location: .body(locationName: "authorizerType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerUri", location: .body(locationName: "authorizerUri"), required: false, type: .string), 
            AWSShapeMember(label: "EnableSimpleResponses", location: .body(locationName: "enableSimpleResponses"), required: false, type: .boolean), 
            AWSShapeMember(label: "IdentitySource", location: .body(locationName: "identitySource"), required: false, type: .list), 
            AWSShapeMember(label: "IdentityValidationExpression", location: .body(locationName: "identityValidationExpression"), required: false, type: .string), 
            AWSShapeMember(label: "JwtConfiguration", location: .body(locationName: "jwtConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        public let authorizerCredentialsArn: String?
        public let authorizerId: String?
        public let authorizerPayloadFormatVersion: String?
        public let authorizerResultTtlInSeconds: Int?
        public let authorizerType: AuthorizerType?
        public let authorizerUri: String?
        public let enableSimpleResponses: Bool?
        public let identitySource: [String]?
        public let identityValidationExpression: String?
        public let jwtConfiguration: JWTConfiguration?
        public let name: String?

        public init(authorizerCredentialsArn: String? = nil, authorizerId: String? = nil, authorizerPayloadFormatVersion: String? = nil, authorizerResultTtlInSeconds: Int? = nil, authorizerType: AuthorizerType? = nil, authorizerUri: String? = nil, enableSimpleResponses: Bool? = nil, identitySource: [String]? = nil, identityValidationExpression: String? = nil, jwtConfiguration: JWTConfiguration? = nil, name: String? = nil) {
            self.authorizerCredentialsArn = authorizerCredentialsArn
            self.authorizerId = authorizerId
            self.authorizerPayloadFormatVersion = authorizerPayloadFormatVersion
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerType = authorizerType
            self.authorizerUri = authorizerUri
            self.enableSimpleResponses = enableSimpleResponses
            self.identitySource = identitySource
            self.identityValidationExpression = identityValidationExpression
            self.jwtConfiguration = jwtConfiguration
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerCredentialsArn = "authorizerCredentialsArn"
            case authorizerId = "authorizerId"
            case authorizerPayloadFormatVersion = "authorizerPayloadFormatVersion"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerType = "authorizerType"
            case authorizerUri = "authorizerUri"
            case enableSimpleResponses = "enableSimpleResponses"
            case identitySource = "identitySource"
            case identityValidationExpression = "identityValidationExpression"
            case jwtConfiguration = "jwtConfiguration"
            case name = "name"
        }
    }

    public struct GetAuthorizersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetAuthorizersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Authorizer]?
        public let nextToken: String?

        public init(items: [Authorizer]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "DeploymentId", location: .uri(locationName: "deploymentId"), required: true, type: .string)
        ]

        public let apiId: String
        public let deploymentId: String

        public init(apiId: String, deploymentId: String) {
            self.apiId = apiId
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case deploymentId = "deploymentId"
        }
    }

    public struct GetDeploymentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoDeployed", location: .body(locationName: "autoDeployed"), required: false, type: .boolean), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "DeploymentStatus", location: .body(locationName: "deploymentStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "DeploymentStatusMessage", location: .body(locationName: "deploymentStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]

        public let autoDeployed: Bool?
        public let createdDate: TimeStamp?
        public let deploymentId: String?
        public let deploymentStatus: DeploymentStatus?
        public let deploymentStatusMessage: String?
        public let description: String?

        public init(autoDeployed: Bool? = nil, createdDate: TimeStamp? = nil, deploymentId: String? = nil, deploymentStatus: DeploymentStatus? = nil, deploymentStatusMessage: String? = nil, description: String? = nil) {
            self.autoDeployed = autoDeployed
            self.createdDate = createdDate
            self.deploymentId = deploymentId
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case autoDeployed = "autoDeployed"
            case createdDate = "createdDate"
            case deploymentId = "deploymentId"
            case deploymentStatus = "deploymentStatus"
            case deploymentStatusMessage = "deploymentStatusMessage"
            case description = "description"
        }
    }

    public struct GetDeploymentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetDeploymentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Deployment]?
        public let nextToken: String?

        public init(items: [Deployment]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string)
        ]

        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

    public struct GetDomainNameResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiMappingSelectionExpression", location: .body(locationName: "apiMappingSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "DomainName", location: .body(locationName: "domainName"), required: false, type: .string), 
            AWSShapeMember(label: "DomainNameConfigurations", location: .body(locationName: "domainNameConfigurations"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let apiMappingSelectionExpression: String?
        public let domainName: String?
        public let domainNameConfigurations: [DomainNameConfiguration]?
        public let tags: [String: String]?

        public init(apiMappingSelectionExpression: String? = nil, domainName: String? = nil, domainNameConfigurations: [DomainNameConfiguration]? = nil, tags: [String: String]? = nil) {
            self.apiMappingSelectionExpression = apiMappingSelectionExpression
            self.domainName = domainName
            self.domainNameConfigurations = domainNameConfigurations
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case apiMappingSelectionExpression = "apiMappingSelectionExpression"
            case domainName = "domainName"
            case domainNameConfigurations = "domainNameConfigurations"
            case tags = "tags"
        }
    }

    public struct GetDomainNamesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetDomainNamesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [DomainName]?
        public let nextToken: String?

        public init(items: [DomainName]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string)
        ]

        public let apiId: String
        public let integrationId: String

        public init(apiId: String, integrationId: String) {
            self.apiId = apiId
            self.integrationId = integrationId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case integrationId = "integrationId"
        }
    }

    public struct GetIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationResponseId", location: .uri(locationName: "integrationResponseId"), required: true, type: .string)
        ]

        public let apiId: String
        public let integrationId: String
        public let integrationResponseId: String

        public init(apiId: String, integrationId: String, integrationResponseId: String) {
            self.apiId = apiId
            self.integrationId = integrationId
            self.integrationResponseId = integrationResponseId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case integrationId = "integrationId"
            case integrationResponseId = "integrationResponseId"
        }
    }

    public struct GetIntegrationResponseResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationResponseId", location: .body(locationName: "integrationResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseKey", location: .body(locationName: "integrationResponseKey"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseTemplates", location: .body(locationName: "responseTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string)
        ]

        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let integrationResponseId: String?
        public let integrationResponseKey: String?
        public let responseParameters: [String: String]?
        public let responseTemplates: [String: String]?
        public let templateSelectionExpression: String?

        public init(contentHandlingStrategy: ContentHandlingStrategy? = nil, integrationResponseId: String? = nil, integrationResponseKey: String? = nil, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil) {
            self.contentHandlingStrategy = contentHandlingStrategy
            self.integrationResponseId = integrationResponseId
            self.integrationResponseKey = integrationResponseKey
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.templateSelectionExpression = templateSelectionExpression
        }

        private enum CodingKeys: String, CodingKey {
            case contentHandlingStrategy = "contentHandlingStrategy"
            case integrationResponseId = "integrationResponseId"
            case integrationResponseKey = "integrationResponseKey"
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
        }
    }

    public struct GetIntegrationResponsesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let integrationId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, integrationId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.integrationId = integrationId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case integrationId = "integrationId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetIntegrationResponsesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [IntegrationResponse]?
        public let nextToken: String?

        public init(items: [IntegrationResponse]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetIntegrationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionType", location: .body(locationName: "connectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .body(locationName: "integrationId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationMethod", location: .body(locationName: "integrationMethod"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseSelectionExpression", location: .body(locationName: "integrationResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationSubtype", location: .body(locationName: "integrationSubtype"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationType", location: .body(locationName: "integrationType"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationUri", location: .body(locationName: "integrationUri"), required: false, type: .string), 
            AWSShapeMember(label: "PassthroughBehavior", location: .body(locationName: "passthroughBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "PayloadFormatVersion", location: .body(locationName: "payloadFormatVersion"), required: false, type: .string), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RequestTemplates", location: .body(locationName: "requestTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "TimeoutInMillis", location: .body(locationName: "timeoutInMillis"), required: false, type: .integer), 
            AWSShapeMember(label: "TlsConfig", location: .body(locationName: "tlsConfig"), required: false, type: .structure)
        ]

        public let apiGatewayManaged: Bool?
        public let connectionId: String?
        public let connectionType: ConnectionType?
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let credentialsArn: String?
        public let description: String?
        public let integrationId: String?
        public let integrationMethod: String?
        public let integrationResponseSelectionExpression: String?
        public let integrationSubtype: String?
        public let integrationType: IntegrationType?
        public let integrationUri: String?
        public let passthroughBehavior: PassthroughBehavior?
        public let payloadFormatVersion: String?
        public let requestParameters: [String: String]?
        public let requestTemplates: [String: String]?
        public let templateSelectionExpression: String?
        public let timeoutInMillis: Int?
        public let tlsConfig: TlsConfig?

        public init(apiGatewayManaged: Bool? = nil, connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandlingStrategy: ContentHandlingStrategy? = nil, credentialsArn: String? = nil, description: String? = nil, integrationId: String? = nil, integrationMethod: String? = nil, integrationResponseSelectionExpression: String? = nil, integrationSubtype: String? = nil, integrationType: IntegrationType? = nil, integrationUri: String? = nil, passthroughBehavior: PassthroughBehavior? = nil, payloadFormatVersion: String? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil, timeoutInMillis: Int? = nil, tlsConfig: TlsConfig? = nil) {
            self.apiGatewayManaged = apiGatewayManaged
            self.connectionId = connectionId
            self.connectionType = connectionType
            self.contentHandlingStrategy = contentHandlingStrategy
            self.credentialsArn = credentialsArn
            self.description = description
            self.integrationId = integrationId
            self.integrationMethod = integrationMethod
            self.integrationResponseSelectionExpression = integrationResponseSelectionExpression
            self.integrationSubtype = integrationSubtype
            self.integrationType = integrationType
            self.integrationUri = integrationUri
            self.passthroughBehavior = passthroughBehavior
            self.payloadFormatVersion = payloadFormatVersion
            self.requestParameters = requestParameters
            self.requestTemplates = requestTemplates
            self.templateSelectionExpression = templateSelectionExpression
            self.timeoutInMillis = timeoutInMillis
            self.tlsConfig = tlsConfig
        }

        private enum CodingKeys: String, CodingKey {
            case apiGatewayManaged = "apiGatewayManaged"
            case connectionId = "connectionId"
            case connectionType = "connectionType"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case integrationId = "integrationId"
            case integrationMethod = "integrationMethod"
            case integrationResponseSelectionExpression = "integrationResponseSelectionExpression"
            case integrationSubtype = "integrationSubtype"
            case integrationType = "integrationType"
            case integrationUri = "integrationUri"
            case passthroughBehavior = "passthroughBehavior"
            case payloadFormatVersion = "payloadFormatVersion"
            case requestParameters = "requestParameters"
            case requestTemplates = "requestTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
            case timeoutInMillis = "timeoutInMillis"
            case tlsConfig = "tlsConfig"
        }
    }

    public struct GetIntegrationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetIntegrationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Integration]?
        public let nextToken: String?

        public init(items: [Integration]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ModelId", location: .uri(locationName: "modelId"), required: true, type: .string)
        ]

        public let apiId: String
        public let modelId: String

        public init(apiId: String, modelId: String) {
            self.apiId = apiId
            self.modelId = modelId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case modelId = "modelId"
        }
    }

    public struct GetModelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentType", location: .body(locationName: "contentType"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ModelId", location: .body(locationName: "modelId"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Schema", location: .body(locationName: "schema"), required: false, type: .string)
        ]

        public let contentType: String?
        public let description: String?
        public let modelId: String?
        public let name: String?
        public let schema: String?

        public init(contentType: String? = nil, description: String? = nil, modelId: String? = nil, name: String? = nil, schema: String? = nil) {
            self.contentType = contentType
            self.description = description
            self.modelId = modelId
            self.name = name
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "contentType"
            case description = "description"
            case modelId = "modelId"
            case name = "name"
            case schema = "schema"
        }
    }

    public struct GetModelTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ModelId", location: .uri(locationName: "modelId"), required: true, type: .string)
        ]

        public let apiId: String
        public let modelId: String

        public init(apiId: String, modelId: String) {
            self.apiId = apiId
            self.modelId = modelId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case modelId = "modelId"
        }
    }

    public struct GetModelTemplateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct GetModelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetModelsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Model]?
        public let nextToken: String?

        public init(items: [Model]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string)
        ]

        public let apiId: String
        public let routeId: String

        public init(apiId: String, routeId: String) {
            self.apiId = apiId
            self.routeId = routeId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case routeId = "routeId"
        }
    }

    public struct GetRouteResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseId", location: .uri(locationName: "routeResponseId"), required: true, type: .string)
        ]

        public let apiId: String
        public let routeId: String
        public let routeResponseId: String

        public init(apiId: String, routeId: String, routeResponseId: String) {
            self.apiId = apiId
            self.routeId = routeId
            self.routeResponseId = routeResponseId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case routeId = "routeId"
            case routeResponseId = "routeResponseId"
        }
    }

    public struct GetRouteResponseResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseModels", location: .body(locationName: "responseModels"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteResponseId", location: .body(locationName: "routeResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseKey", location: .body(locationName: "routeResponseKey"), required: false, type: .string)
        ]

        public let modelSelectionExpression: String?
        public let responseModels: [String: String]?
        public let responseParameters: [String: ParameterConstraints]?
        public let routeResponseId: String?
        public let routeResponseKey: String?

        public init(modelSelectionExpression: String? = nil, responseModels: [String: String]? = nil, responseParameters: [String: ParameterConstraints]? = nil, routeResponseId: String? = nil, routeResponseKey: String? = nil) {
            self.modelSelectionExpression = modelSelectionExpression
            self.responseModels = responseModels
            self.responseParameters = responseParameters
            self.routeResponseId = routeResponseId
            self.routeResponseKey = routeResponseKey
        }

        private enum CodingKeys: String, CodingKey {
            case modelSelectionExpression = "modelSelectionExpression"
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
            case routeResponseId = "routeResponseId"
            case routeResponseKey = "routeResponseKey"
        }
    }

    public struct GetRouteResponsesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?
        public let routeId: String

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil, routeId: String) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.routeId = routeId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case routeId = "routeId"
        }
    }

    public struct GetRouteResponsesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [RouteResponse]?
        public let nextToken: String?

        public init(items: [RouteResponse]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ApiKeyRequired", location: .body(locationName: "apiKeyRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthorizationScopes", location: .body(locationName: "authorizationScopes"), required: false, type: .list), 
            AWSShapeMember(label: "AuthorizationType", location: .body(locationName: "authorizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "OperationName", location: .body(locationName: "operationName"), required: false, type: .string), 
            AWSShapeMember(label: "RequestModels", location: .body(locationName: "requestModels"), required: false, type: .map), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .body(locationName: "routeId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseSelectionExpression", location: .body(locationName: "routeResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string)
        ]

        public let apiGatewayManaged: Bool?
        public let apiKeyRequired: Bool?
        public let authorizationScopes: [String]?
        public let authorizationType: AuthorizationType?
        public let authorizerId: String?
        public let modelSelectionExpression: String?
        public let operationName: String?
        public let requestModels: [String: String]?
        public let requestParameters: [String: ParameterConstraints]?
        public let routeId: String?
        public let routeKey: String?
        public let routeResponseSelectionExpression: String?
        public let target: String?

        public init(apiGatewayManaged: Bool? = nil, apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: AuthorizationType? = nil, authorizerId: String? = nil, modelSelectionExpression: String? = nil, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: ParameterConstraints]? = nil, routeId: String? = nil, routeKey: String? = nil, routeResponseSelectionExpression: String? = nil, target: String? = nil) {
            self.apiGatewayManaged = apiGatewayManaged
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.authorizationType = authorizationType
            self.authorizerId = authorizerId
            self.modelSelectionExpression = modelSelectionExpression
            self.operationName = operationName
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.routeId = routeId
            self.routeKey = routeKey
            self.routeResponseSelectionExpression = routeResponseSelectionExpression
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case apiGatewayManaged = "apiGatewayManaged"
            case apiKeyRequired = "apiKeyRequired"
            case authorizationScopes = "authorizationScopes"
            case authorizationType = "authorizationType"
            case authorizerId = "authorizerId"
            case modelSelectionExpression = "modelSelectionExpression"
            case operationName = "operationName"
            case requestModels = "requestModels"
            case requestParameters = "requestParameters"
            case routeId = "routeId"
            case routeKey = "routeKey"
            case routeResponseSelectionExpression = "routeResponseSelectionExpression"
            case target = "target"
        }
    }

    public struct GetRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetRoutesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Route]?
        public let nextToken: String?

        public init(items: [Route]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "StageName", location: .uri(locationName: "stageName"), required: true, type: .string)
        ]

        public let apiId: String
        public let stageName: String

        public init(apiId: String, stageName: String) {
            self.apiId = apiId
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case stageName = "stageName"
        }
    }

    public struct GetStageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessLogSettings", location: .body(locationName: "accessLogSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "AutoDeploy", location: .body(locationName: "autoDeploy"), required: false, type: .boolean), 
            AWSShapeMember(label: "ClientCertificateId", location: .body(locationName: "clientCertificateId"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultRouteSettings", location: .body(locationName: "defaultRouteSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "LastDeploymentStatusMessage", location: .body(locationName: "lastDeploymentStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedDate", location: .body(locationName: "lastUpdatedDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RouteSettings", location: .body(locationName: "routeSettings"), required: false, type: .map), 
            AWSShapeMember(label: "StageName", location: .body(locationName: "stageName"), required: false, type: .string), 
            AWSShapeMember(label: "StageVariables", location: .body(locationName: "stageVariables"), required: false, type: .map), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let accessLogSettings: AccessLogSettings?
        public let apiGatewayManaged: Bool?
        public let autoDeploy: Bool?
        public let clientCertificateId: String?
        public let createdDate: TimeStamp?
        public let defaultRouteSettings: RouteSettings?
        public let deploymentId: String?
        public let description: String?
        public let lastDeploymentStatusMessage: String?
        public let lastUpdatedDate: TimeStamp?
        public let routeSettings: [String: RouteSettings]?
        public let stageName: String?
        public let stageVariables: [String: String]?
        public let tags: [String: String]?

        public init(accessLogSettings: AccessLogSettings? = nil, apiGatewayManaged: Bool? = nil, autoDeploy: Bool? = nil, clientCertificateId: String? = nil, createdDate: TimeStamp? = nil, defaultRouteSettings: RouteSettings? = nil, deploymentId: String? = nil, description: String? = nil, lastDeploymentStatusMessage: String? = nil, lastUpdatedDate: TimeStamp? = nil, routeSettings: [String: RouteSettings]? = nil, stageName: String? = nil, stageVariables: [String: String]? = nil, tags: [String: String]? = nil) {
            self.accessLogSettings = accessLogSettings
            self.apiGatewayManaged = apiGatewayManaged
            self.autoDeploy = autoDeploy
            self.clientCertificateId = clientCertificateId
            self.createdDate = createdDate
            self.defaultRouteSettings = defaultRouteSettings
            self.deploymentId = deploymentId
            self.description = description
            self.lastDeploymentStatusMessage = lastDeploymentStatusMessage
            self.lastUpdatedDate = lastUpdatedDate
            self.routeSettings = routeSettings
            self.stageName = stageName
            self.stageVariables = stageVariables
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogSettings = "accessLogSettings"
            case apiGatewayManaged = "apiGatewayManaged"
            case autoDeploy = "autoDeploy"
            case clientCertificateId = "clientCertificateId"
            case createdDate = "createdDate"
            case defaultRouteSettings = "defaultRouteSettings"
            case deploymentId = "deploymentId"
            case description = "description"
            case lastDeploymentStatusMessage = "lastDeploymentStatusMessage"
            case lastUpdatedDate = "lastUpdatedDate"
            case routeSettings = "routeSettings"
            case stageName = "stageName"
            case stageVariables = "stageVariables"
            case tags = "tags"
        }
    }

    public struct GetStagesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetStagesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Stage]?
        public let nextToken: String?

        public init(items: [Stage]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string)
        ]

        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
        }
    }

    public struct GetTagsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct GetVpcLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcLinkId", location: .uri(locationName: "vpcLinkId"), required: true, type: .string)
        ]

        public let vpcLinkId: String

        public init(vpcLinkId: String) {
            self.vpcLinkId = vpcLinkId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcLinkId = "vpcLinkId"
        }
    }

    public struct GetVpcLinkResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "securityGroupIds"), required: false, type: .list), 
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "subnetIds"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "VpcLinkId", location: .body(locationName: "vpcLinkId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcLinkStatus", location: .body(locationName: "vpcLinkStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcLinkStatusMessage", location: .body(locationName: "vpcLinkStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "VpcLinkVersion", location: .body(locationName: "vpcLinkVersion"), required: false, type: .enum)
        ]

        public let createdDate: TimeStamp?
        public let name: String?
        public let securityGroupIds: [String]?
        public let subnetIds: [String]?
        public let tags: [String: String]?
        public let vpcLinkId: String?
        public let vpcLinkStatus: VpcLinkStatus?
        public let vpcLinkStatusMessage: String?
        public let vpcLinkVersion: VpcLinkVersion?

        public init(createdDate: TimeStamp? = nil, name: String? = nil, securityGroupIds: [String]? = nil, subnetIds: [String]? = nil, tags: [String: String]? = nil, vpcLinkId: String? = nil, vpcLinkStatus: VpcLinkStatus? = nil, vpcLinkStatusMessage: String? = nil, vpcLinkVersion: VpcLinkVersion? = nil) {
            self.createdDate = createdDate
            self.name = name
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcLinkId = vpcLinkId
            self.vpcLinkStatus = vpcLinkStatus
            self.vpcLinkStatusMessage = vpcLinkStatusMessage
            self.vpcLinkVersion = vpcLinkVersion
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "createdDate"
            case name = "name"
            case securityGroupIds = "securityGroupIds"
            case subnetIds = "subnetIds"
            case tags = "tags"
            case vpcLinkId = "vpcLinkId"
            case vpcLinkStatus = "vpcLinkStatus"
            case vpcLinkStatusMessage = "vpcLinkStatusMessage"
            case vpcLinkVersion = "vpcLinkVersion"
        }
    }

    public struct GetVpcLinksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetVpcLinksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [VpcLink]?
        public let nextToken: String?

        public init(items: [VpcLink]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct ImportApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Basepath", location: .querystring(locationName: "basepath"), required: false, type: .string), 
            AWSShapeMember(label: "Body", location: .body(locationName: "body"), required: true, type: .string), 
            AWSShapeMember(label: "FailOnWarnings", location: .querystring(locationName: "failOnWarnings"), required: false, type: .boolean)
        ]

        public let basepath: String?
        public let body: String
        public let failOnWarnings: Bool?

        public init(basepath: String? = nil, body: String, failOnWarnings: Bool? = nil) {
            self.basepath = basepath
            self.body = body
            self.failOnWarnings = failOnWarnings
        }

        private enum CodingKeys: String, CodingKey {
            case basepath = "basepath"
            case body = "body"
            case failOnWarnings = "failOnWarnings"
        }
    }

    public struct ImportApiResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiEndpoint", location: .body(locationName: "apiEndpoint"), required: false, type: .string), 
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "CorsConfiguration", location: .body(locationName: "corsConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImportInfo", location: .body(locationName: "importInfo"), required: false, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ProtocolType", location: .body(locationName: "protocolType"), required: false, type: .enum), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string), 
            AWSShapeMember(label: "Warnings", location: .body(locationName: "warnings"), required: false, type: .list)
        ]

        public let apiEndpoint: String?
        public let apiGatewayManaged: Bool?
        public let apiId: String?
        public let apiKeySelectionExpression: String?
        public let corsConfiguration: Cors?
        public let createdDate: TimeStamp?
        public let description: String?
        public let disableSchemaValidation: Bool?
        public let importInfo: [String]?
        public let name: String?
        public let protocolType: ProtocolType?
        public let routeSelectionExpression: String?
        public let tags: [String: String]?
        public let version: String?
        public let warnings: [String]?

        public init(apiEndpoint: String? = nil, apiGatewayManaged: Bool? = nil, apiId: String? = nil, apiKeySelectionExpression: String? = nil, corsConfiguration: Cors? = nil, createdDate: TimeStamp? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, importInfo: [String]? = nil, name: String? = nil, protocolType: ProtocolType? = nil, routeSelectionExpression: String? = nil, tags: [String: String]? = nil, version: String? = nil, warnings: [String]? = nil) {
            self.apiEndpoint = apiEndpoint
            self.apiGatewayManaged = apiGatewayManaged
            self.apiId = apiId
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.corsConfiguration = corsConfiguration
            self.createdDate = createdDate
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.importInfo = importInfo
            self.name = name
            self.protocolType = protocolType
            self.routeSelectionExpression = routeSelectionExpression
            self.tags = tags
            self.version = version
            self.warnings = warnings
        }

        private enum CodingKeys: String, CodingKey {
            case apiEndpoint = "apiEndpoint"
            case apiGatewayManaged = "apiGatewayManaged"
            case apiId = "apiId"
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case corsConfiguration = "corsConfiguration"
            case createdDate = "createdDate"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case importInfo = "importInfo"
            case name = "name"
            case protocolType = "protocolType"
            case routeSelectionExpression = "routeSelectionExpression"
            case tags = "tags"
            case version = "version"
            case warnings = "warnings"
        }
    }

    public struct Integration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionType", location: .body(locationName: "connectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .body(locationName: "integrationId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationMethod", location: .body(locationName: "integrationMethod"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseSelectionExpression", location: .body(locationName: "integrationResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationSubtype", location: .body(locationName: "integrationSubtype"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationType", location: .body(locationName: "integrationType"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationUri", location: .body(locationName: "integrationUri"), required: false, type: .string), 
            AWSShapeMember(label: "PassthroughBehavior", location: .body(locationName: "passthroughBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "PayloadFormatVersion", location: .body(locationName: "payloadFormatVersion"), required: false, type: .string), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RequestTemplates", location: .body(locationName: "requestTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "TimeoutInMillis", location: .body(locationName: "timeoutInMillis"), required: false, type: .integer), 
            AWSShapeMember(label: "TlsConfig", location: .body(locationName: "tlsConfig"), required: false, type: .structure)
        ]

        /// Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can't delete it.
        public let apiGatewayManaged: Bool?
        /// The ID of the VPC link for a private integration. Supported only for HTTP APIs.
        public let connectionId: String?
        /// The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.
        public let connectionType: ConnectionType?
        /// Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors: CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string. If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.
        public let contentHandlingStrategy: ContentHandlingStrategy?
        /// Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.
        public let credentialsArn: String?
        /// Represents the description of an integration.
        public let description: String?
        /// Represents the identifier of an integration.
        public let integrationId: String?
        /// Specifies the integration's HTTP method type.
        public let integrationMethod: String?
        /// The integration response selection expression for the integration. Supported only for WebSocket APIs. See Integration Response Selection Expressions.
        public let integrationResponseSelectionExpression: String?
        /// Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see Integration subtype reference.
        public let integrationSubtype: String?
        /// The integration type of an integration. One of the following: AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs. AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration. HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs. HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration. MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.
        public let integrationType: IntegrationType?
        /// For a Lambda integration, specify the URI of a Lambda function. For an HTTP integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see DiscoverInstances. For private integrations, all resources must be owned by the same AWS account.
        public let integrationUri: String?
        /// Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs. WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation. NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response. WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.
        public let passthroughBehavior: PassthroughBehavior?
        /// Specifies the format of the payload sent to an integration. Required for HTTP APIs.
        public let payloadFormatVersion: String?
        /// For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.{location}.{name}
        ///               , where  {location}  is querystring, path, or header; and {name} must be a valid and unique method request parameter name. For HTTP APIs, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations with a specified integrationSubtype. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see Working with AWS service integrations for HTTP APIs.
        public let requestParameters: [String: String]?
        /// Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.
        public let requestTemplates: [String: String]?
        /// The template selection expression for the integration. Supported only for WebSocket APIs.
        public let templateSelectionExpression: String?
        /// Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
        public let timeoutInMillis: Int?
        /// The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.
        public let tlsConfig: TlsConfig?

        public init(apiGatewayManaged: Bool? = nil, connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandlingStrategy: ContentHandlingStrategy? = nil, credentialsArn: String? = nil, description: String? = nil, integrationId: String? = nil, integrationMethod: String? = nil, integrationResponseSelectionExpression: String? = nil, integrationSubtype: String? = nil, integrationType: IntegrationType? = nil, integrationUri: String? = nil, passthroughBehavior: PassthroughBehavior? = nil, payloadFormatVersion: String? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil, timeoutInMillis: Int? = nil, tlsConfig: TlsConfig? = nil) {
            self.apiGatewayManaged = apiGatewayManaged
            self.connectionId = connectionId
            self.connectionType = connectionType
            self.contentHandlingStrategy = contentHandlingStrategy
            self.credentialsArn = credentialsArn
            self.description = description
            self.integrationId = integrationId
            self.integrationMethod = integrationMethod
            self.integrationResponseSelectionExpression = integrationResponseSelectionExpression
            self.integrationSubtype = integrationSubtype
            self.integrationType = integrationType
            self.integrationUri = integrationUri
            self.passthroughBehavior = passthroughBehavior
            self.payloadFormatVersion = payloadFormatVersion
            self.requestParameters = requestParameters
            self.requestTemplates = requestTemplates
            self.templateSelectionExpression = templateSelectionExpression
            self.timeoutInMillis = timeoutInMillis
            self.tlsConfig = tlsConfig
        }

        private enum CodingKeys: String, CodingKey {
            case apiGatewayManaged = "apiGatewayManaged"
            case connectionId = "connectionId"
            case connectionType = "connectionType"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case integrationId = "integrationId"
            case integrationMethod = "integrationMethod"
            case integrationResponseSelectionExpression = "integrationResponseSelectionExpression"
            case integrationSubtype = "integrationSubtype"
            case integrationType = "integrationType"
            case integrationUri = "integrationUri"
            case passthroughBehavior = "passthroughBehavior"
            case payloadFormatVersion = "payloadFormatVersion"
            case requestParameters = "requestParameters"
            case requestTemplates = "requestTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
            case timeoutInMillis = "timeoutInMillis"
            case tlsConfig = "tlsConfig"
        }
    }

    public struct IntegrationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationResponseId", location: .body(locationName: "integrationResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseKey", location: .body(locationName: "integrationResponseKey"), required: true, type: .string), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseTemplates", location: .body(locationName: "responseTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string)
        ]

        /// Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors: CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string. If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.
        public let contentHandlingStrategy: ContentHandlingStrategy?
        /// The integration response ID.
        public let integrationResponseId: String?
        /// The integration response key.
        public let integrationResponseKey: String
        /// A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.
        public let responseParameters: [String: String]?
        /// The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
        public let responseTemplates: [String: String]?
        /// The template selection expressions for the integration response.
        public let templateSelectionExpression: String?

        public init(contentHandlingStrategy: ContentHandlingStrategy? = nil, integrationResponseId: String? = nil, integrationResponseKey: String, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil) {
            self.contentHandlingStrategy = contentHandlingStrategy
            self.integrationResponseId = integrationResponseId
            self.integrationResponseKey = integrationResponseKey
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.templateSelectionExpression = templateSelectionExpression
        }

        private enum CodingKeys: String, CodingKey {
            case contentHandlingStrategy = "contentHandlingStrategy"
            case integrationResponseId = "integrationResponseId"
            case integrationResponseKey = "integrationResponseKey"
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
        }
    }

    public struct JWTConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Audience", location: .body(locationName: "audience"), required: false, type: .list), 
            AWSShapeMember(label: "Issuer", location: .body(locationName: "issuer"), required: false, type: .string)
        ]

        /// A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See RFC 7519. Supported only for HTTP APIs.
        public let audience: [String]?
        /// The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.{region}.amazonaws.com/{userPoolId}
        ///                . Required for the JWT authorizer type. Supported only for HTTP APIs.
        public let issuer: String?

        public init(audience: [String]? = nil, issuer: String? = nil) {
            self.audience = audience
            self.issuer = issuer
        }

        private enum CodingKeys: String, CodingKey {
            case audience = "audience"
            case issuer = "issuer"
        }
    }

    public struct Model: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentType", location: .body(locationName: "contentType"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ModelId", location: .body(locationName: "modelId"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Schema", location: .body(locationName: "schema"), required: false, type: .string)
        ]

        /// The content-type for the model, for example, "application/json".
        public let contentType: String?
        /// The description of the model.
        public let description: String?
        /// The model identifier.
        public let modelId: String?
        /// The name of the model. Must be alphanumeric.
        public let name: String
        /// The schema for the model. For application/json models, this should be JSON schema draft 4 model.
        public let schema: String?

        public init(contentType: String? = nil, description: String? = nil, modelId: String? = nil, name: String, schema: String? = nil) {
            self.contentType = contentType
            self.description = description
            self.modelId = modelId
            self.name = name
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "contentType"
            case description = "description"
            case modelId = "modelId"
            case name = "name"
            case schema = "schema"
        }
    }

    public struct ParameterConstraints: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Required", location: .body(locationName: "required"), required: false, type: .boolean)
        ]

        /// Whether or not the parameter is required.
        public let required: Bool?

        public init(required: Bool? = nil) {
            self.required = required
        }

        private enum CodingKeys: String, CodingKey {
            case required = "required"
        }
    }

    public struct ReimportApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "Basepath", location: .querystring(locationName: "basepath"), required: false, type: .string), 
            AWSShapeMember(label: "Body", location: .body(locationName: "body"), required: true, type: .string), 
            AWSShapeMember(label: "FailOnWarnings", location: .querystring(locationName: "failOnWarnings"), required: false, type: .boolean)
        ]

        public let apiId: String
        public let basepath: String?
        public let body: String
        public let failOnWarnings: Bool?

        public init(apiId: String, basepath: String? = nil, body: String, failOnWarnings: Bool? = nil) {
            self.apiId = apiId
            self.basepath = basepath
            self.body = body
            self.failOnWarnings = failOnWarnings
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case basepath = "basepath"
            case body = "body"
            case failOnWarnings = "failOnWarnings"
        }
    }

    public struct ReimportApiResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiEndpoint", location: .body(locationName: "apiEndpoint"), required: false, type: .string), 
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "CorsConfiguration", location: .body(locationName: "corsConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImportInfo", location: .body(locationName: "importInfo"), required: false, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ProtocolType", location: .body(locationName: "protocolType"), required: false, type: .enum), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string), 
            AWSShapeMember(label: "Warnings", location: .body(locationName: "warnings"), required: false, type: .list)
        ]

        public let apiEndpoint: String?
        public let apiGatewayManaged: Bool?
        public let apiId: String?
        public let apiKeySelectionExpression: String?
        public let corsConfiguration: Cors?
        public let createdDate: TimeStamp?
        public let description: String?
        public let disableSchemaValidation: Bool?
        public let importInfo: [String]?
        public let name: String?
        public let protocolType: ProtocolType?
        public let routeSelectionExpression: String?
        public let tags: [String: String]?
        public let version: String?
        public let warnings: [String]?

        public init(apiEndpoint: String? = nil, apiGatewayManaged: Bool? = nil, apiId: String? = nil, apiKeySelectionExpression: String? = nil, corsConfiguration: Cors? = nil, createdDate: TimeStamp? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, importInfo: [String]? = nil, name: String? = nil, protocolType: ProtocolType? = nil, routeSelectionExpression: String? = nil, tags: [String: String]? = nil, version: String? = nil, warnings: [String]? = nil) {
            self.apiEndpoint = apiEndpoint
            self.apiGatewayManaged = apiGatewayManaged
            self.apiId = apiId
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.corsConfiguration = corsConfiguration
            self.createdDate = createdDate
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.importInfo = importInfo
            self.name = name
            self.protocolType = protocolType
            self.routeSelectionExpression = routeSelectionExpression
            self.tags = tags
            self.version = version
            self.warnings = warnings
        }

        private enum CodingKeys: String, CodingKey {
            case apiEndpoint = "apiEndpoint"
            case apiGatewayManaged = "apiGatewayManaged"
            case apiId = "apiId"
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case corsConfiguration = "corsConfiguration"
            case createdDate = "createdDate"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case importInfo = "importInfo"
            case name = "name"
            case protocolType = "protocolType"
            case routeSelectionExpression = "routeSelectionExpression"
            case tags = "tags"
            case version = "version"
            case warnings = "warnings"
        }
    }

    public struct ResetAuthorizersCacheRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "StageName", location: .uri(locationName: "stageName"), required: true, type: .string)
        ]

        public let apiId: String
        public let stageName: String

        public init(apiId: String, stageName: String) {
            self.apiId = apiId
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case stageName = "stageName"
        }
    }

    public struct Route: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ApiKeyRequired", location: .body(locationName: "apiKeyRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthorizationScopes", location: .body(locationName: "authorizationScopes"), required: false, type: .list), 
            AWSShapeMember(label: "AuthorizationType", location: .body(locationName: "authorizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "OperationName", location: .body(locationName: "operationName"), required: false, type: .string), 
            AWSShapeMember(label: "RequestModels", location: .body(locationName: "requestModels"), required: false, type: .map), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .body(locationName: "routeId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseSelectionExpression", location: .body(locationName: "routeResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string)
        ]

        /// Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can't modify the $default route key.
        public let apiGatewayManaged: Bool?
        /// Specifies whether an API key is required for this route. Supported only for WebSocket APIs.
        public let apiKeyRequired: Bool?
        /// A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
        public let authorizationScopes: [String]?
        /// The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
        public let authorizationType: AuthorizationType?
        /// The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
        public let authorizerId: String?
        /// The model selection expression for the route. Supported only for WebSocket APIs.
        public let modelSelectionExpression: String?
        /// The operation name for the route.
        public let operationName: String?
        /// The request models for the route. Supported only for WebSocket APIs.
        public let requestModels: [String: String]?
        /// The request parameters for the route. Supported only for WebSocket APIs.
        public let requestParameters: [String: ParameterConstraints]?
        /// The route ID.
        public let routeId: String?
        /// The route key for the route.
        public let routeKey: String
        /// The route response selection expression for the route. Supported only for WebSocket APIs.
        public let routeResponseSelectionExpression: String?
        /// The target for the route.
        public let target: String?

        public init(apiGatewayManaged: Bool? = nil, apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: AuthorizationType? = nil, authorizerId: String? = nil, modelSelectionExpression: String? = nil, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: ParameterConstraints]? = nil, routeId: String? = nil, routeKey: String, routeResponseSelectionExpression: String? = nil, target: String? = nil) {
            self.apiGatewayManaged = apiGatewayManaged
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.authorizationType = authorizationType
            self.authorizerId = authorizerId
            self.modelSelectionExpression = modelSelectionExpression
            self.operationName = operationName
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.routeId = routeId
            self.routeKey = routeKey
            self.routeResponseSelectionExpression = routeResponseSelectionExpression
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case apiGatewayManaged = "apiGatewayManaged"
            case apiKeyRequired = "apiKeyRequired"
            case authorizationScopes = "authorizationScopes"
            case authorizationType = "authorizationType"
            case authorizerId = "authorizerId"
            case modelSelectionExpression = "modelSelectionExpression"
            case operationName = "operationName"
            case requestModels = "requestModels"
            case requestParameters = "requestParameters"
            case routeId = "routeId"
            case routeKey = "routeKey"
            case routeResponseSelectionExpression = "routeResponseSelectionExpression"
            case target = "target"
        }
    }

    public struct RouteResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseModels", location: .body(locationName: "responseModels"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteResponseId", location: .body(locationName: "routeResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseKey", location: .body(locationName: "routeResponseKey"), required: true, type: .string)
        ]

        /// Represents the model selection expression of a route response. Supported only for WebSocket APIs.
        public let modelSelectionExpression: String?
        /// Represents the response models of a route response.
        public let responseModels: [String: String]?
        /// Represents the response parameters of a route response.
        public let responseParameters: [String: ParameterConstraints]?
        /// Represents the identifier of a route response.
        public let routeResponseId: String?
        /// Represents the route response key of a route response.
        public let routeResponseKey: String

        public init(modelSelectionExpression: String? = nil, responseModels: [String: String]? = nil, responseParameters: [String: ParameterConstraints]? = nil, routeResponseId: String? = nil, routeResponseKey: String) {
            self.modelSelectionExpression = modelSelectionExpression
            self.responseModels = responseModels
            self.responseParameters = responseParameters
            self.routeResponseId = routeResponseId
            self.routeResponseKey = routeResponseKey
        }

        private enum CodingKeys: String, CodingKey {
            case modelSelectionExpression = "modelSelectionExpression"
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
            case routeResponseId = "routeResponseId"
            case routeResponseKey = "routeResponseKey"
        }
    }

    public struct RouteSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataTraceEnabled", location: .body(locationName: "dataTraceEnabled"), required: false, type: .boolean), 
            AWSShapeMember(label: "DetailedMetricsEnabled", location: .body(locationName: "detailedMetricsEnabled"), required: false, type: .boolean), 
            AWSShapeMember(label: "LoggingLevel", location: .body(locationName: "loggingLevel"), required: false, type: .enum), 
            AWSShapeMember(label: "ThrottlingBurstLimit", location: .body(locationName: "throttlingBurstLimit"), required: false, type: .integer), 
            AWSShapeMember(label: "ThrottlingRateLimit", location: .body(locationName: "throttlingRateLimit"), required: false, type: .double)
        ]

        /// Specifies whether (true) or not (false) data trace logging is enabled for this route. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
        public let dataTraceEnabled: Bool?
        /// Specifies whether detailed metrics are enabled.
        public let detailedMetricsEnabled: Bool?
        /// Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
        public let loggingLevel: LoggingLevel?
        /// Specifies the throttling burst limit.
        public let throttlingBurstLimit: Int?
        /// Specifies the throttling rate limit.
        public let throttlingRateLimit: Double?

        public init(dataTraceEnabled: Bool? = nil, detailedMetricsEnabled: Bool? = nil, loggingLevel: LoggingLevel? = nil, throttlingBurstLimit: Int? = nil, throttlingRateLimit: Double? = nil) {
            self.dataTraceEnabled = dataTraceEnabled
            self.detailedMetricsEnabled = detailedMetricsEnabled
            self.loggingLevel = loggingLevel
            self.throttlingBurstLimit = throttlingBurstLimit
            self.throttlingRateLimit = throttlingRateLimit
        }

        private enum CodingKeys: String, CodingKey {
            case dataTraceEnabled = "dataTraceEnabled"
            case detailedMetricsEnabled = "detailedMetricsEnabled"
            case loggingLevel = "loggingLevel"
            case throttlingBurstLimit = "throttlingBurstLimit"
            case throttlingRateLimit = "throttlingRateLimit"
        }
    }

    public struct Stage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessLogSettings", location: .body(locationName: "accessLogSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "AutoDeploy", location: .body(locationName: "autoDeploy"), required: false, type: .boolean), 
            AWSShapeMember(label: "ClientCertificateId", location: .body(locationName: "clientCertificateId"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultRouteSettings", location: .body(locationName: "defaultRouteSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "LastDeploymentStatusMessage", location: .body(locationName: "lastDeploymentStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedDate", location: .body(locationName: "lastUpdatedDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RouteSettings", location: .body(locationName: "routeSettings"), required: false, type: .map), 
            AWSShapeMember(label: "StageName", location: .body(locationName: "stageName"), required: true, type: .string), 
            AWSShapeMember(label: "StageVariables", location: .body(locationName: "stageVariables"), required: false, type: .map), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        /// Settings for logging access in this stage.
        public let accessLogSettings: AccessLogSettings?
        /// Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can't modify the $default stage.
        public let apiGatewayManaged: Bool?
        /// Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
        public let autoDeploy: Bool?
        /// The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
        public let clientCertificateId: String?
        /// The timestamp when the stage was created.
        public let createdDate: TimeStamp?
        /// Default route settings for the stage.
        public let defaultRouteSettings: RouteSettings?
        /// The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.
        public let deploymentId: String?
        /// The description of the stage.
        public let description: String?
        /// Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.
        public let lastDeploymentStatusMessage: String?
        /// The timestamp when the stage was last updated.
        public let lastUpdatedDate: TimeStamp?
        /// Route settings for the stage, by routeKey.
        public let routeSettings: [String: RouteSettings]?
        /// The name of the stage.
        public let stageName: String
        /// A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.
        public let stageVariables: [String: String]?
        /// The collection of tags. Each tag element is associated with a given resource.
        public let tags: [String: String]?

        public init(accessLogSettings: AccessLogSettings? = nil, apiGatewayManaged: Bool? = nil, autoDeploy: Bool? = nil, clientCertificateId: String? = nil, createdDate: TimeStamp? = nil, defaultRouteSettings: RouteSettings? = nil, deploymentId: String? = nil, description: String? = nil, lastDeploymentStatusMessage: String? = nil, lastUpdatedDate: TimeStamp? = nil, routeSettings: [String: RouteSettings]? = nil, stageName: String, stageVariables: [String: String]? = nil, tags: [String: String]? = nil) {
            self.accessLogSettings = accessLogSettings
            self.apiGatewayManaged = apiGatewayManaged
            self.autoDeploy = autoDeploy
            self.clientCertificateId = clientCertificateId
            self.createdDate = createdDate
            self.defaultRouteSettings = defaultRouteSettings
            self.deploymentId = deploymentId
            self.description = description
            self.lastDeploymentStatusMessage = lastDeploymentStatusMessage
            self.lastUpdatedDate = lastUpdatedDate
            self.routeSettings = routeSettings
            self.stageName = stageName
            self.stageVariables = stageVariables
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogSettings = "accessLogSettings"
            case apiGatewayManaged = "apiGatewayManaged"
            case autoDeploy = "autoDeploy"
            case clientCertificateId = "clientCertificateId"
            case createdDate = "createdDate"
            case defaultRouteSettings = "defaultRouteSettings"
            case deploymentId = "deploymentId"
            case description = "description"
            case lastDeploymentStatusMessage = "lastDeploymentStatusMessage"
            case lastUpdatedDate = "lastUpdatedDate"
            case routeSettings = "routeSettings"
            case stageName = "stageName"
            case stageVariables = "stageVariables"
            case tags = "tags"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let resourceArn: String
        public let tags: [String: String]?

        public init(resourceArn: String, tags: [String: String]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct TlsConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerNameToVerify", location: .body(locationName: "serverNameToVerify"), required: false, type: .string)
        ]

        /// If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.
        public let serverNameToVerify: String?

        public init(serverNameToVerify: String? = nil) {
            self.serverNameToVerify = serverNameToVerify
        }

        private enum CodingKeys: String, CodingKey {
            case serverNameToVerify = "serverNameToVerify"
        }
    }

    public struct TlsConfigInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServerNameToVerify", location: .body(locationName: "serverNameToVerify"), required: false, type: .string)
        ]

        /// If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.
        public let serverNameToVerify: String?

        public init(serverNameToVerify: String? = nil) {
            self.serverNameToVerify = serverNameToVerify
        }

        private enum CodingKeys: String, CodingKey {
            case serverNameToVerify = "serverNameToVerify"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list)
        ]

        public let resourceArn: String
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UpdateApiMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiMappingId", location: .uri(locationName: "apiMappingId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiMappingKey", location: .body(locationName: "apiMappingKey"), required: false, type: .string), 
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string), 
            AWSShapeMember(label: "Stage", location: .body(locationName: "stage"), required: false, type: .string)
        ]

        public let apiId: String
        public let apiMappingId: String
        public let apiMappingKey: String?
        public let domainName: String
        public let stage: String?

        public init(apiId: String, apiMappingId: String, apiMappingKey: String? = nil, domainName: String, stage: String? = nil) {
            self.apiId = apiId
            self.apiMappingId = apiMappingId
            self.apiMappingKey = apiMappingKey
            self.domainName = domainName
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiMappingId = "apiMappingId"
            case apiMappingKey = "apiMappingKey"
            case domainName = "domainName"
            case stage = "stage"
        }
    }

    public struct UpdateApiMappingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingId", location: .body(locationName: "apiMappingId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingKey", location: .body(locationName: "apiMappingKey"), required: false, type: .string), 
            AWSShapeMember(label: "Stage", location: .body(locationName: "stage"), required: false, type: .string)
        ]

        public let apiId: String?
        public let apiMappingId: String?
        public let apiMappingKey: String?
        public let stage: String?

        public init(apiId: String? = nil, apiMappingId: String? = nil, apiMappingKey: String? = nil, stage: String? = nil) {
            self.apiId = apiId
            self.apiMappingId = apiMappingId
            self.apiMappingKey = apiMappingKey
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiMappingId = "apiMappingId"
            case apiMappingKey = "apiMappingKey"
            case stage = "stage"
        }
    }

    public struct UpdateApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "CorsConfiguration", location: .body(locationName: "corsConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: false, type: .string), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string)
        ]

        public let apiId: String
        public let apiKeySelectionExpression: String?
        public let corsConfiguration: Cors?
        public let credentialsArn: String?
        public let description: String?
        public let disableSchemaValidation: Bool?
        public let name: String?
        public let routeKey: String?
        public let routeSelectionExpression: String?
        public let target: String?
        public let version: String?

        public init(apiId: String, apiKeySelectionExpression: String? = nil, corsConfiguration: Cors? = nil, credentialsArn: String? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, name: String? = nil, routeKey: String? = nil, routeSelectionExpression: String? = nil, target: String? = nil, version: String? = nil) {
            self.apiId = apiId
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.corsConfiguration = corsConfiguration
            self.credentialsArn = credentialsArn
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.name = name
            self.routeKey = routeKey
            self.routeSelectionExpression = routeSelectionExpression
            self.target = target
            self.version = version
        }

        public func validate(name: String) throws {
            try self.corsConfiguration?.validate(name: "\(name).corsConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case corsConfiguration = "corsConfiguration"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case name = "name"
            case routeKey = "routeKey"
            case routeSelectionExpression = "routeSelectionExpression"
            case target = "target"
            case version = "version"
        }
    }

    public struct UpdateApiResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiEndpoint", location: .body(locationName: "apiEndpoint"), required: false, type: .string), 
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "CorsConfiguration", location: .body(locationName: "corsConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImportInfo", location: .body(locationName: "importInfo"), required: false, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ProtocolType", location: .body(locationName: "protocolType"), required: false, type: .enum), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string), 
            AWSShapeMember(label: "Warnings", location: .body(locationName: "warnings"), required: false, type: .list)
        ]

        public let apiEndpoint: String?
        public let apiGatewayManaged: Bool?
        public let apiId: String?
        public let apiKeySelectionExpression: String?
        public let corsConfiguration: Cors?
        public let createdDate: TimeStamp?
        public let description: String?
        public let disableSchemaValidation: Bool?
        public let importInfo: [String]?
        public let name: String?
        public let protocolType: ProtocolType?
        public let routeSelectionExpression: String?
        public let tags: [String: String]?
        public let version: String?
        public let warnings: [String]?

        public init(apiEndpoint: String? = nil, apiGatewayManaged: Bool? = nil, apiId: String? = nil, apiKeySelectionExpression: String? = nil, corsConfiguration: Cors? = nil, createdDate: TimeStamp? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, importInfo: [String]? = nil, name: String? = nil, protocolType: ProtocolType? = nil, routeSelectionExpression: String? = nil, tags: [String: String]? = nil, version: String? = nil, warnings: [String]? = nil) {
            self.apiEndpoint = apiEndpoint
            self.apiGatewayManaged = apiGatewayManaged
            self.apiId = apiId
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.corsConfiguration = corsConfiguration
            self.createdDate = createdDate
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.importInfo = importInfo
            self.name = name
            self.protocolType = protocolType
            self.routeSelectionExpression = routeSelectionExpression
            self.tags = tags
            self.version = version
            self.warnings = warnings
        }

        private enum CodingKeys: String, CodingKey {
            case apiEndpoint = "apiEndpoint"
            case apiGatewayManaged = "apiGatewayManaged"
            case apiId = "apiId"
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case corsConfiguration = "corsConfiguration"
            case createdDate = "createdDate"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case importInfo = "importInfo"
            case name = "name"
            case protocolType = "protocolType"
            case routeSelectionExpression = "routeSelectionExpression"
            case tags = "tags"
            case version = "version"
            case warnings = "warnings"
        }
    }

    public struct UpdateAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthorizerCredentialsArn", location: .body(locationName: "authorizerCredentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .uri(locationName: "authorizerId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthorizerPayloadFormatVersion", location: .body(locationName: "authorizerPayloadFormatVersion"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerResultTtlInSeconds", location: .body(locationName: "authorizerResultTtlInSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthorizerType", location: .body(locationName: "authorizerType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerUri", location: .body(locationName: "authorizerUri"), required: false, type: .string), 
            AWSShapeMember(label: "EnableSimpleResponses", location: .body(locationName: "enableSimpleResponses"), required: false, type: .boolean), 
            AWSShapeMember(label: "IdentitySource", location: .body(locationName: "identitySource"), required: false, type: .list), 
            AWSShapeMember(label: "IdentityValidationExpression", location: .body(locationName: "identityValidationExpression"), required: false, type: .string), 
            AWSShapeMember(label: "JwtConfiguration", location: .body(locationName: "jwtConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        public let apiId: String
        public let authorizerCredentialsArn: String?
        public let authorizerId: String
        public let authorizerPayloadFormatVersion: String?
        public let authorizerResultTtlInSeconds: Int?
        public let authorizerType: AuthorizerType?
        public let authorizerUri: String?
        public let enableSimpleResponses: Bool?
        public let identitySource: [String]?
        public let identityValidationExpression: String?
        public let jwtConfiguration: JWTConfiguration?
        public let name: String?

        public init(apiId: String, authorizerCredentialsArn: String? = nil, authorizerId: String, authorizerPayloadFormatVersion: String? = nil, authorizerResultTtlInSeconds: Int? = nil, authorizerType: AuthorizerType? = nil, authorizerUri: String? = nil, enableSimpleResponses: Bool? = nil, identitySource: [String]? = nil, identityValidationExpression: String? = nil, jwtConfiguration: JWTConfiguration? = nil, name: String? = nil) {
            self.apiId = apiId
            self.authorizerCredentialsArn = authorizerCredentialsArn
            self.authorizerId = authorizerId
            self.authorizerPayloadFormatVersion = authorizerPayloadFormatVersion
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerType = authorizerType
            self.authorizerUri = authorizerUri
            self.enableSimpleResponses = enableSimpleResponses
            self.identitySource = identitySource
            self.identityValidationExpression = identityValidationExpression
            self.jwtConfiguration = jwtConfiguration
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.authorizerResultTtlInSeconds, name:"authorizerResultTtlInSeconds", parent: name, max: 3600)
            try validate(self.authorizerResultTtlInSeconds, name:"authorizerResultTtlInSeconds", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case authorizerCredentialsArn = "authorizerCredentialsArn"
            case authorizerId = "authorizerId"
            case authorizerPayloadFormatVersion = "authorizerPayloadFormatVersion"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerType = "authorizerType"
            case authorizerUri = "authorizerUri"
            case enableSimpleResponses = "enableSimpleResponses"
            case identitySource = "identitySource"
            case identityValidationExpression = "identityValidationExpression"
            case jwtConfiguration = "jwtConfiguration"
            case name = "name"
        }
    }

    public struct UpdateAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthorizerCredentialsArn", location: .body(locationName: "authorizerCredentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerPayloadFormatVersion", location: .body(locationName: "authorizerPayloadFormatVersion"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerResultTtlInSeconds", location: .body(locationName: "authorizerResultTtlInSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthorizerType", location: .body(locationName: "authorizerType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerUri", location: .body(locationName: "authorizerUri"), required: false, type: .string), 
            AWSShapeMember(label: "EnableSimpleResponses", location: .body(locationName: "enableSimpleResponses"), required: false, type: .boolean), 
            AWSShapeMember(label: "IdentitySource", location: .body(locationName: "identitySource"), required: false, type: .list), 
            AWSShapeMember(label: "IdentityValidationExpression", location: .body(locationName: "identityValidationExpression"), required: false, type: .string), 
            AWSShapeMember(label: "JwtConfiguration", location: .body(locationName: "jwtConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        public let authorizerCredentialsArn: String?
        public let authorizerId: String?
        public let authorizerPayloadFormatVersion: String?
        public let authorizerResultTtlInSeconds: Int?
        public let authorizerType: AuthorizerType?
        public let authorizerUri: String?
        public let enableSimpleResponses: Bool?
        public let identitySource: [String]?
        public let identityValidationExpression: String?
        public let jwtConfiguration: JWTConfiguration?
        public let name: String?

        public init(authorizerCredentialsArn: String? = nil, authorizerId: String? = nil, authorizerPayloadFormatVersion: String? = nil, authorizerResultTtlInSeconds: Int? = nil, authorizerType: AuthorizerType? = nil, authorizerUri: String? = nil, enableSimpleResponses: Bool? = nil, identitySource: [String]? = nil, identityValidationExpression: String? = nil, jwtConfiguration: JWTConfiguration? = nil, name: String? = nil) {
            self.authorizerCredentialsArn = authorizerCredentialsArn
            self.authorizerId = authorizerId
            self.authorizerPayloadFormatVersion = authorizerPayloadFormatVersion
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerType = authorizerType
            self.authorizerUri = authorizerUri
            self.enableSimpleResponses = enableSimpleResponses
            self.identitySource = identitySource
            self.identityValidationExpression = identityValidationExpression
            self.jwtConfiguration = jwtConfiguration
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerCredentialsArn = "authorizerCredentialsArn"
            case authorizerId = "authorizerId"
            case authorizerPayloadFormatVersion = "authorizerPayloadFormatVersion"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerType = "authorizerType"
            case authorizerUri = "authorizerUri"
            case enableSimpleResponses = "enableSimpleResponses"
            case identitySource = "identitySource"
            case identityValidationExpression = "identityValidationExpression"
            case jwtConfiguration = "jwtConfiguration"
            case name = "name"
        }
    }

    public struct UpdateDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "DeploymentId", location: .uri(locationName: "deploymentId"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]

        public let apiId: String
        public let deploymentId: String
        public let description: String?

        public init(apiId: String, deploymentId: String, description: String? = nil) {
            self.apiId = apiId
            self.deploymentId = deploymentId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case deploymentId = "deploymentId"
            case description = "description"
        }
    }

    public struct UpdateDeploymentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoDeployed", location: .body(locationName: "autoDeployed"), required: false, type: .boolean), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "DeploymentStatus", location: .body(locationName: "deploymentStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "DeploymentStatusMessage", location: .body(locationName: "deploymentStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]

        public let autoDeployed: Bool?
        public let createdDate: TimeStamp?
        public let deploymentId: String?
        public let deploymentStatus: DeploymentStatus?
        public let deploymentStatusMessage: String?
        public let description: String?

        public init(autoDeployed: Bool? = nil, createdDate: TimeStamp? = nil, deploymentId: String? = nil, deploymentStatus: DeploymentStatus? = nil, deploymentStatusMessage: String? = nil, description: String? = nil) {
            self.autoDeployed = autoDeployed
            self.createdDate = createdDate
            self.deploymentId = deploymentId
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case autoDeployed = "autoDeployed"
            case createdDate = "createdDate"
            case deploymentId = "deploymentId"
            case deploymentStatus = "deploymentStatus"
            case deploymentStatusMessage = "deploymentStatusMessage"
            case description = "description"
        }
    }

    public struct UpdateDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string), 
            AWSShapeMember(label: "DomainNameConfigurations", location: .body(locationName: "domainNameConfigurations"), required: false, type: .list)
        ]

        public let domainName: String
        public let domainNameConfigurations: [DomainNameConfiguration]?

        public init(domainName: String, domainNameConfigurations: [DomainNameConfiguration]? = nil) {
            self.domainName = domainName
            self.domainNameConfigurations = domainNameConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case domainNameConfigurations = "domainNameConfigurations"
        }
    }

    public struct UpdateDomainNameResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiMappingSelectionExpression", location: .body(locationName: "apiMappingSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "DomainName", location: .body(locationName: "domainName"), required: false, type: .string), 
            AWSShapeMember(label: "DomainNameConfigurations", location: .body(locationName: "domainNameConfigurations"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let apiMappingSelectionExpression: String?
        public let domainName: String?
        public let domainNameConfigurations: [DomainNameConfiguration]?
        public let tags: [String: String]?

        public init(apiMappingSelectionExpression: String? = nil, domainName: String? = nil, domainNameConfigurations: [DomainNameConfiguration]? = nil, tags: [String: String]? = nil) {
            self.apiMappingSelectionExpression = apiMappingSelectionExpression
            self.domainName = domainName
            self.domainNameConfigurations = domainNameConfigurations
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case apiMappingSelectionExpression = "apiMappingSelectionExpression"
            case domainName = "domainName"
            case domainNameConfigurations = "domainNameConfigurations"
            case tags = "tags"
        }
    }

    public struct UpdateIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionType", location: .body(locationName: "connectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationMethod", location: .body(locationName: "integrationMethod"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationSubtype", location: .body(locationName: "integrationSubtype"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationType", location: .body(locationName: "integrationType"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationUri", location: .body(locationName: "integrationUri"), required: false, type: .string), 
            AWSShapeMember(label: "PassthroughBehavior", location: .body(locationName: "passthroughBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "PayloadFormatVersion", location: .body(locationName: "payloadFormatVersion"), required: false, type: .string), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RequestTemplates", location: .body(locationName: "requestTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "TimeoutInMillis", location: .body(locationName: "timeoutInMillis"), required: false, type: .integer), 
            AWSShapeMember(label: "TlsConfig", location: .body(locationName: "tlsConfig"), required: false, type: .structure)
        ]

        public let apiId: String
        public let connectionId: String?
        public let connectionType: ConnectionType?
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let credentialsArn: String?
        public let description: String?
        public let integrationId: String
        public let integrationMethod: String?
        public let integrationSubtype: String?
        public let integrationType: IntegrationType?
        public let integrationUri: String?
        public let passthroughBehavior: PassthroughBehavior?
        public let payloadFormatVersion: String?
        public let requestParameters: [String: String]?
        public let requestTemplates: [String: String]?
        public let templateSelectionExpression: String?
        public let timeoutInMillis: Int?
        public let tlsConfig: TlsConfigInput?

        public init(apiId: String, connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandlingStrategy: ContentHandlingStrategy? = nil, credentialsArn: String? = nil, description: String? = nil, integrationId: String, integrationMethod: String? = nil, integrationSubtype: String? = nil, integrationType: IntegrationType? = nil, integrationUri: String? = nil, passthroughBehavior: PassthroughBehavior? = nil, payloadFormatVersion: String? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil, timeoutInMillis: Int? = nil, tlsConfig: TlsConfigInput? = nil) {
            self.apiId = apiId
            self.connectionId = connectionId
            self.connectionType = connectionType
            self.contentHandlingStrategy = contentHandlingStrategy
            self.credentialsArn = credentialsArn
            self.description = description
            self.integrationId = integrationId
            self.integrationMethod = integrationMethod
            self.integrationSubtype = integrationSubtype
            self.integrationType = integrationType
            self.integrationUri = integrationUri
            self.passthroughBehavior = passthroughBehavior
            self.payloadFormatVersion = payloadFormatVersion
            self.requestParameters = requestParameters
            self.requestTemplates = requestTemplates
            self.templateSelectionExpression = templateSelectionExpression
            self.timeoutInMillis = timeoutInMillis
            self.tlsConfig = tlsConfig
        }

        public func validate(name: String) throws {
            try validate(self.timeoutInMillis, name:"timeoutInMillis", parent: name, max: 30000)
            try validate(self.timeoutInMillis, name:"timeoutInMillis", parent: name, min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case connectionId = "connectionId"
            case connectionType = "connectionType"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case integrationId = "integrationId"
            case integrationMethod = "integrationMethod"
            case integrationSubtype = "integrationSubtype"
            case integrationType = "integrationType"
            case integrationUri = "integrationUri"
            case passthroughBehavior = "passthroughBehavior"
            case payloadFormatVersion = "payloadFormatVersion"
            case requestParameters = "requestParameters"
            case requestTemplates = "requestTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
            case timeoutInMillis = "timeoutInMillis"
            case tlsConfig = "tlsConfig"
        }
    }

    public struct UpdateIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationResponseId", location: .uri(locationName: "integrationResponseId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationResponseKey", location: .body(locationName: "integrationResponseKey"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseTemplates", location: .body(locationName: "responseTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string)
        ]

        public let apiId: String
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let integrationId: String
        public let integrationResponseId: String
        public let integrationResponseKey: String?
        public let responseParameters: [String: String]?
        public let responseTemplates: [String: String]?
        public let templateSelectionExpression: String?

        public init(apiId: String, contentHandlingStrategy: ContentHandlingStrategy? = nil, integrationId: String, integrationResponseId: String, integrationResponseKey: String? = nil, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil) {
            self.apiId = apiId
            self.contentHandlingStrategy = contentHandlingStrategy
            self.integrationId = integrationId
            self.integrationResponseId = integrationResponseId
            self.integrationResponseKey = integrationResponseKey
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.templateSelectionExpression = templateSelectionExpression
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case integrationId = "integrationId"
            case integrationResponseId = "integrationResponseId"
            case integrationResponseKey = "integrationResponseKey"
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
        }
    }

    public struct UpdateIntegrationResponseResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationResponseId", location: .body(locationName: "integrationResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseKey", location: .body(locationName: "integrationResponseKey"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseTemplates", location: .body(locationName: "responseTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string)
        ]

        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let integrationResponseId: String?
        public let integrationResponseKey: String?
        public let responseParameters: [String: String]?
        public let responseTemplates: [String: String]?
        public let templateSelectionExpression: String?

        public init(contentHandlingStrategy: ContentHandlingStrategy? = nil, integrationResponseId: String? = nil, integrationResponseKey: String? = nil, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil) {
            self.contentHandlingStrategy = contentHandlingStrategy
            self.integrationResponseId = integrationResponseId
            self.integrationResponseKey = integrationResponseKey
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.templateSelectionExpression = templateSelectionExpression
        }

        private enum CodingKeys: String, CodingKey {
            case contentHandlingStrategy = "contentHandlingStrategy"
            case integrationResponseId = "integrationResponseId"
            case integrationResponseKey = "integrationResponseKey"
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
        }
    }

    public struct UpdateIntegrationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionType", location: .body(locationName: "connectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .body(locationName: "integrationId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationMethod", location: .body(locationName: "integrationMethod"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseSelectionExpression", location: .body(locationName: "integrationResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationSubtype", location: .body(locationName: "integrationSubtype"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationType", location: .body(locationName: "integrationType"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationUri", location: .body(locationName: "integrationUri"), required: false, type: .string), 
            AWSShapeMember(label: "PassthroughBehavior", location: .body(locationName: "passthroughBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "PayloadFormatVersion", location: .body(locationName: "payloadFormatVersion"), required: false, type: .string), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RequestTemplates", location: .body(locationName: "requestTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "TimeoutInMillis", location: .body(locationName: "timeoutInMillis"), required: false, type: .integer), 
            AWSShapeMember(label: "TlsConfig", location: .body(locationName: "tlsConfig"), required: false, type: .structure)
        ]

        public let apiGatewayManaged: Bool?
        public let connectionId: String?
        public let connectionType: ConnectionType?
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let credentialsArn: String?
        public let description: String?
        public let integrationId: String?
        public let integrationMethod: String?
        public let integrationResponseSelectionExpression: String?
        public let integrationSubtype: String?
        public let integrationType: IntegrationType?
        public let integrationUri: String?
        public let passthroughBehavior: PassthroughBehavior?
        public let payloadFormatVersion: String?
        public let requestParameters: [String: String]?
        public let requestTemplates: [String: String]?
        public let templateSelectionExpression: String?
        public let timeoutInMillis: Int?
        public let tlsConfig: TlsConfig?

        public init(apiGatewayManaged: Bool? = nil, connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandlingStrategy: ContentHandlingStrategy? = nil, credentialsArn: String? = nil, description: String? = nil, integrationId: String? = nil, integrationMethod: String? = nil, integrationResponseSelectionExpression: String? = nil, integrationSubtype: String? = nil, integrationType: IntegrationType? = nil, integrationUri: String? = nil, passthroughBehavior: PassthroughBehavior? = nil, payloadFormatVersion: String? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil, timeoutInMillis: Int? = nil, tlsConfig: TlsConfig? = nil) {
            self.apiGatewayManaged = apiGatewayManaged
            self.connectionId = connectionId
            self.connectionType = connectionType
            self.contentHandlingStrategy = contentHandlingStrategy
            self.credentialsArn = credentialsArn
            self.description = description
            self.integrationId = integrationId
            self.integrationMethod = integrationMethod
            self.integrationResponseSelectionExpression = integrationResponseSelectionExpression
            self.integrationSubtype = integrationSubtype
            self.integrationType = integrationType
            self.integrationUri = integrationUri
            self.passthroughBehavior = passthroughBehavior
            self.payloadFormatVersion = payloadFormatVersion
            self.requestParameters = requestParameters
            self.requestTemplates = requestTemplates
            self.templateSelectionExpression = templateSelectionExpression
            self.timeoutInMillis = timeoutInMillis
            self.tlsConfig = tlsConfig
        }

        private enum CodingKeys: String, CodingKey {
            case apiGatewayManaged = "apiGatewayManaged"
            case connectionId = "connectionId"
            case connectionType = "connectionType"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case integrationId = "integrationId"
            case integrationMethod = "integrationMethod"
            case integrationResponseSelectionExpression = "integrationResponseSelectionExpression"
            case integrationSubtype = "integrationSubtype"
            case integrationType = "integrationType"
            case integrationUri = "integrationUri"
            case passthroughBehavior = "passthroughBehavior"
            case payloadFormatVersion = "payloadFormatVersion"
            case requestParameters = "requestParameters"
            case requestTemplates = "requestTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
            case timeoutInMillis = "timeoutInMillis"
            case tlsConfig = "tlsConfig"
        }
    }

    public struct UpdateModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ContentType", location: .body(locationName: "contentType"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ModelId", location: .uri(locationName: "modelId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Schema", location: .body(locationName: "schema"), required: false, type: .string)
        ]

        public let apiId: String
        public let contentType: String?
        public let description: String?
        public let modelId: String
        public let name: String?
        public let schema: String?

        public init(apiId: String, contentType: String? = nil, description: String? = nil, modelId: String, name: String? = nil, schema: String? = nil) {
            self.apiId = apiId
            self.contentType = contentType
            self.description = description
            self.modelId = modelId
            self.name = name
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case contentType = "contentType"
            case description = "description"
            case modelId = "modelId"
            case name = "name"
            case schema = "schema"
        }
    }

    public struct UpdateModelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentType", location: .body(locationName: "contentType"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ModelId", location: .body(locationName: "modelId"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Schema", location: .body(locationName: "schema"), required: false, type: .string)
        ]

        public let contentType: String?
        public let description: String?
        public let modelId: String?
        public let name: String?
        public let schema: String?

        public init(contentType: String? = nil, description: String? = nil, modelId: String? = nil, name: String? = nil, schema: String? = nil) {
            self.contentType = contentType
            self.description = description
            self.modelId = modelId
            self.name = name
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "contentType"
            case description = "description"
            case modelId = "modelId"
            case name = "name"
            case schema = "schema"
        }
    }

    public struct UpdateRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiKeyRequired", location: .body(locationName: "apiKeyRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthorizationScopes", location: .body(locationName: "authorizationScopes"), required: false, type: .list), 
            AWSShapeMember(label: "AuthorizationType", location: .body(locationName: "authorizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "OperationName", location: .body(locationName: "operationName"), required: false, type: .string), 
            AWSShapeMember(label: "RequestModels", location: .body(locationName: "requestModels"), required: false, type: .map), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseSelectionExpression", location: .body(locationName: "routeResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string)
        ]

        public let apiId: String
        public let apiKeyRequired: Bool?
        public let authorizationScopes: [String]?
        public let authorizationType: AuthorizationType?
        public let authorizerId: String?
        public let modelSelectionExpression: String?
        public let operationName: String?
        public let requestModels: [String: String]?
        public let requestParameters: [String: ParameterConstraints]?
        public let routeId: String
        public let routeKey: String?
        public let routeResponseSelectionExpression: String?
        public let target: String?

        public init(apiId: String, apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: AuthorizationType? = nil, authorizerId: String? = nil, modelSelectionExpression: String? = nil, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: ParameterConstraints]? = nil, routeId: String, routeKey: String? = nil, routeResponseSelectionExpression: String? = nil, target: String? = nil) {
            self.apiId = apiId
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.authorizationType = authorizationType
            self.authorizerId = authorizerId
            self.modelSelectionExpression = modelSelectionExpression
            self.operationName = operationName
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.routeId = routeId
            self.routeKey = routeKey
            self.routeResponseSelectionExpression = routeResponseSelectionExpression
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiKeyRequired = "apiKeyRequired"
            case authorizationScopes = "authorizationScopes"
            case authorizationType = "authorizationType"
            case authorizerId = "authorizerId"
            case modelSelectionExpression = "modelSelectionExpression"
            case operationName = "operationName"
            case requestModels = "requestModels"
            case requestParameters = "requestParameters"
            case routeId = "routeId"
            case routeKey = "routeKey"
            case routeResponseSelectionExpression = "routeResponseSelectionExpression"
            case target = "target"
        }
    }

    public struct UpdateRouteResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseModels", location: .body(locationName: "responseModels"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseId", location: .uri(locationName: "routeResponseId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseKey", location: .body(locationName: "routeResponseKey"), required: false, type: .string)
        ]

        public let apiId: String
        public let modelSelectionExpression: String?
        public let responseModels: [String: String]?
        public let responseParameters: [String: ParameterConstraints]?
        public let routeId: String
        public let routeResponseId: String
        public let routeResponseKey: String?

        public init(apiId: String, modelSelectionExpression: String? = nil, responseModels: [String: String]? = nil, responseParameters: [String: ParameterConstraints]? = nil, routeId: String, routeResponseId: String, routeResponseKey: String? = nil) {
            self.apiId = apiId
            self.modelSelectionExpression = modelSelectionExpression
            self.responseModels = responseModels
            self.responseParameters = responseParameters
            self.routeId = routeId
            self.routeResponseId = routeResponseId
            self.routeResponseKey = routeResponseKey
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case modelSelectionExpression = "modelSelectionExpression"
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
            case routeId = "routeId"
            case routeResponseId = "routeResponseId"
            case routeResponseKey = "routeResponseKey"
        }
    }

    public struct UpdateRouteResponseResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseModels", location: .body(locationName: "responseModels"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteResponseId", location: .body(locationName: "routeResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseKey", location: .body(locationName: "routeResponseKey"), required: false, type: .string)
        ]

        public let modelSelectionExpression: String?
        public let responseModels: [String: String]?
        public let responseParameters: [String: ParameterConstraints]?
        public let routeResponseId: String?
        public let routeResponseKey: String?

        public init(modelSelectionExpression: String? = nil, responseModels: [String: String]? = nil, responseParameters: [String: ParameterConstraints]? = nil, routeResponseId: String? = nil, routeResponseKey: String? = nil) {
            self.modelSelectionExpression = modelSelectionExpression
            self.responseModels = responseModels
            self.responseParameters = responseParameters
            self.routeResponseId = routeResponseId
            self.routeResponseKey = routeResponseKey
        }

        private enum CodingKeys: String, CodingKey {
            case modelSelectionExpression = "modelSelectionExpression"
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
            case routeResponseId = "routeResponseId"
            case routeResponseKey = "routeResponseKey"
        }
    }

    public struct UpdateRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "ApiKeyRequired", location: .body(locationName: "apiKeyRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthorizationScopes", location: .body(locationName: "authorizationScopes"), required: false, type: .list), 
            AWSShapeMember(label: "AuthorizationType", location: .body(locationName: "authorizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "OperationName", location: .body(locationName: "operationName"), required: false, type: .string), 
            AWSShapeMember(label: "RequestModels", location: .body(locationName: "requestModels"), required: false, type: .map), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .body(locationName: "routeId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseSelectionExpression", location: .body(locationName: "routeResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string)
        ]

        public let apiGatewayManaged: Bool?
        public let apiKeyRequired: Bool?
        public let authorizationScopes: [String]?
        public let authorizationType: AuthorizationType?
        public let authorizerId: String?
        public let modelSelectionExpression: String?
        public let operationName: String?
        public let requestModels: [String: String]?
        public let requestParameters: [String: ParameterConstraints]?
        public let routeId: String?
        public let routeKey: String?
        public let routeResponseSelectionExpression: String?
        public let target: String?

        public init(apiGatewayManaged: Bool? = nil, apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: AuthorizationType? = nil, authorizerId: String? = nil, modelSelectionExpression: String? = nil, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: ParameterConstraints]? = nil, routeId: String? = nil, routeKey: String? = nil, routeResponseSelectionExpression: String? = nil, target: String? = nil) {
            self.apiGatewayManaged = apiGatewayManaged
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.authorizationType = authorizationType
            self.authorizerId = authorizerId
            self.modelSelectionExpression = modelSelectionExpression
            self.operationName = operationName
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.routeId = routeId
            self.routeKey = routeKey
            self.routeResponseSelectionExpression = routeResponseSelectionExpression
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case apiGatewayManaged = "apiGatewayManaged"
            case apiKeyRequired = "apiKeyRequired"
            case authorizationScopes = "authorizationScopes"
            case authorizationType = "authorizationType"
            case authorizerId = "authorizerId"
            case modelSelectionExpression = "modelSelectionExpression"
            case operationName = "operationName"
            case requestModels = "requestModels"
            case requestParameters = "requestParameters"
            case routeId = "routeId"
            case routeKey = "routeKey"
            case routeResponseSelectionExpression = "routeResponseSelectionExpression"
            case target = "target"
        }
    }

    public struct UpdateStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessLogSettings", location: .body(locationName: "accessLogSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "AutoDeploy", location: .body(locationName: "autoDeploy"), required: false, type: .boolean), 
            AWSShapeMember(label: "ClientCertificateId", location: .body(locationName: "clientCertificateId"), required: false, type: .string), 
            AWSShapeMember(label: "DefaultRouteSettings", location: .body(locationName: "defaultRouteSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "RouteSettings", location: .body(locationName: "routeSettings"), required: false, type: .map), 
            AWSShapeMember(label: "StageName", location: .uri(locationName: "stageName"), required: true, type: .string), 
            AWSShapeMember(label: "StageVariables", location: .body(locationName: "stageVariables"), required: false, type: .map)
        ]

        public let accessLogSettings: AccessLogSettings?
        public let apiId: String
        public let autoDeploy: Bool?
        public let clientCertificateId: String?
        public let defaultRouteSettings: RouteSettings?
        public let deploymentId: String?
        public let description: String?
        public let routeSettings: [String: RouteSettings]?
        public let stageName: String
        public let stageVariables: [String: String]?

        public init(accessLogSettings: AccessLogSettings? = nil, apiId: String, autoDeploy: Bool? = nil, clientCertificateId: String? = nil, defaultRouteSettings: RouteSettings? = nil, deploymentId: String? = nil, description: String? = nil, routeSettings: [String: RouteSettings]? = nil, stageName: String, stageVariables: [String: String]? = nil) {
            self.accessLogSettings = accessLogSettings
            self.apiId = apiId
            self.autoDeploy = autoDeploy
            self.clientCertificateId = clientCertificateId
            self.defaultRouteSettings = defaultRouteSettings
            self.deploymentId = deploymentId
            self.description = description
            self.routeSettings = routeSettings
            self.stageName = stageName
            self.stageVariables = stageVariables
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogSettings = "accessLogSettings"
            case apiId = "apiId"
            case autoDeploy = "autoDeploy"
            case clientCertificateId = "clientCertificateId"
            case defaultRouteSettings = "defaultRouteSettings"
            case deploymentId = "deploymentId"
            case description = "description"
            case routeSettings = "routeSettings"
            case stageName = "stageName"
            case stageVariables = "stageVariables"
        }
    }

    public struct UpdateStageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessLogSettings", location: .body(locationName: "accessLogSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ApiGatewayManaged", location: .body(locationName: "apiGatewayManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "AutoDeploy", location: .body(locationName: "autoDeploy"), required: false, type: .boolean), 
            AWSShapeMember(label: "ClientCertificateId", location: .body(locationName: "clientCertificateId"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultRouteSettings", location: .body(locationName: "defaultRouteSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "LastDeploymentStatusMessage", location: .body(locationName: "lastDeploymentStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedDate", location: .body(locationName: "lastUpdatedDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RouteSettings", location: .body(locationName: "routeSettings"), required: false, type: .map), 
            AWSShapeMember(label: "StageName", location: .body(locationName: "stageName"), required: false, type: .string), 
            AWSShapeMember(label: "StageVariables", location: .body(locationName: "stageVariables"), required: false, type: .map), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let accessLogSettings: AccessLogSettings?
        public let apiGatewayManaged: Bool?
        public let autoDeploy: Bool?
        public let clientCertificateId: String?
        public let createdDate: TimeStamp?
        public let defaultRouteSettings: RouteSettings?
        public let deploymentId: String?
        public let description: String?
        public let lastDeploymentStatusMessage: String?
        public let lastUpdatedDate: TimeStamp?
        public let routeSettings: [String: RouteSettings]?
        public let stageName: String?
        public let stageVariables: [String: String]?
        public let tags: [String: String]?

        public init(accessLogSettings: AccessLogSettings? = nil, apiGatewayManaged: Bool? = nil, autoDeploy: Bool? = nil, clientCertificateId: String? = nil, createdDate: TimeStamp? = nil, defaultRouteSettings: RouteSettings? = nil, deploymentId: String? = nil, description: String? = nil, lastDeploymentStatusMessage: String? = nil, lastUpdatedDate: TimeStamp? = nil, routeSettings: [String: RouteSettings]? = nil, stageName: String? = nil, stageVariables: [String: String]? = nil, tags: [String: String]? = nil) {
            self.accessLogSettings = accessLogSettings
            self.apiGatewayManaged = apiGatewayManaged
            self.autoDeploy = autoDeploy
            self.clientCertificateId = clientCertificateId
            self.createdDate = createdDate
            self.defaultRouteSettings = defaultRouteSettings
            self.deploymentId = deploymentId
            self.description = description
            self.lastDeploymentStatusMessage = lastDeploymentStatusMessage
            self.lastUpdatedDate = lastUpdatedDate
            self.routeSettings = routeSettings
            self.stageName = stageName
            self.stageVariables = stageVariables
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogSettings = "accessLogSettings"
            case apiGatewayManaged = "apiGatewayManaged"
            case autoDeploy = "autoDeploy"
            case clientCertificateId = "clientCertificateId"
            case createdDate = "createdDate"
            case defaultRouteSettings = "defaultRouteSettings"
            case deploymentId = "deploymentId"
            case description = "description"
            case lastDeploymentStatusMessage = "lastDeploymentStatusMessage"
            case lastUpdatedDate = "lastUpdatedDate"
            case routeSettings = "routeSettings"
            case stageName = "stageName"
            case stageVariables = "stageVariables"
            case tags = "tags"
        }
    }

    public struct UpdateVpcLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "VpcLinkId", location: .uri(locationName: "vpcLinkId"), required: true, type: .string)
        ]

        public let name: String?
        public let vpcLinkId: String

        public init(name: String? = nil, vpcLinkId: String) {
            self.name = name
            self.vpcLinkId = vpcLinkId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case vpcLinkId = "vpcLinkId"
        }
    }

    public struct UpdateVpcLinkResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "securityGroupIds"), required: false, type: .list), 
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "subnetIds"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "VpcLinkId", location: .body(locationName: "vpcLinkId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcLinkStatus", location: .body(locationName: "vpcLinkStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcLinkStatusMessage", location: .body(locationName: "vpcLinkStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "VpcLinkVersion", location: .body(locationName: "vpcLinkVersion"), required: false, type: .enum)
        ]

        public let createdDate: TimeStamp?
        public let name: String?
        public let securityGroupIds: [String]?
        public let subnetIds: [String]?
        public let tags: [String: String]?
        public let vpcLinkId: String?
        public let vpcLinkStatus: VpcLinkStatus?
        public let vpcLinkStatusMessage: String?
        public let vpcLinkVersion: VpcLinkVersion?

        public init(createdDate: TimeStamp? = nil, name: String? = nil, securityGroupIds: [String]? = nil, subnetIds: [String]? = nil, tags: [String: String]? = nil, vpcLinkId: String? = nil, vpcLinkStatus: VpcLinkStatus? = nil, vpcLinkStatusMessage: String? = nil, vpcLinkVersion: VpcLinkVersion? = nil) {
            self.createdDate = createdDate
            self.name = name
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcLinkId = vpcLinkId
            self.vpcLinkStatus = vpcLinkStatus
            self.vpcLinkStatusMessage = vpcLinkStatusMessage
            self.vpcLinkVersion = vpcLinkVersion
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "createdDate"
            case name = "name"
            case securityGroupIds = "securityGroupIds"
            case subnetIds = "subnetIds"
            case tags = "tags"
            case vpcLinkId = "vpcLinkId"
            case vpcLinkStatus = "vpcLinkStatus"
            case vpcLinkStatusMessage = "vpcLinkStatusMessage"
            case vpcLinkVersion = "vpcLinkVersion"
        }
    }

    public struct VpcLink: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "securityGroupIds"), required: true, type: .list), 
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "subnetIds"), required: true, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "VpcLinkId", location: .body(locationName: "vpcLinkId"), required: true, type: .string), 
            AWSShapeMember(label: "VpcLinkStatus", location: .body(locationName: "vpcLinkStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcLinkStatusMessage", location: .body(locationName: "vpcLinkStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "VpcLinkVersion", location: .body(locationName: "vpcLinkVersion"), required: false, type: .enum)
        ]

        /// The timestamp when the VPC link was created.
        public let createdDate: TimeStamp?
        /// The name of the VPC link.
        public let name: String
        /// A list of security group IDs for the VPC link.
        public let securityGroupIds: [String]
        /// A list of subnet IDs to include in the VPC link.
        public let subnetIds: [String]
        /// Tags for the VPC link.
        public let tags: [String: String]?
        /// The ID of the VPC link.
        public let vpcLinkId: String
        /// The status of the VPC link.
        public let vpcLinkStatus: VpcLinkStatus?
        /// A message summarizing the cause of the status of the VPC link.
        public let vpcLinkStatusMessage: String?
        /// The version of the VPC link.
        public let vpcLinkVersion: VpcLinkVersion?

        public init(createdDate: TimeStamp? = nil, name: String, securityGroupIds: [String], subnetIds: [String], tags: [String: String]? = nil, vpcLinkId: String, vpcLinkStatus: VpcLinkStatus? = nil, vpcLinkStatusMessage: String? = nil, vpcLinkVersion: VpcLinkVersion? = nil) {
            self.createdDate = createdDate
            self.name = name
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcLinkId = vpcLinkId
            self.vpcLinkStatus = vpcLinkStatus
            self.vpcLinkStatusMessage = vpcLinkStatusMessage
            self.vpcLinkVersion = vpcLinkVersion
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "createdDate"
            case name = "name"
            case securityGroupIds = "securityGroupIds"
            case subnetIds = "subnetIds"
            case tags = "tags"
            case vpcLinkId = "vpcLinkId"
            case vpcLinkStatus = "vpcLinkStatus"
            case vpcLinkStatusMessage = "vpcLinkStatusMessage"
            case vpcLinkVersion = "vpcLinkVersion"
        }
    }
}
