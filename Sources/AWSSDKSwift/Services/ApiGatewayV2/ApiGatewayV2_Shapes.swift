// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension ApiGatewayV2 {

    public struct AccessLogSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationArn", location: .body(locationName: "destinationArn"), required: false, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .string)
        ]

        /// The ARN of the CloudWatch Logs log group to receive access logs.
        public let destinationArn: String?
        /// A single line format of the access logs of data, as specified by selected $context
        ///  variables. The format must include at least $context.requestId.
        public let format: String?

        public init(destinationArn: String? = nil, format: String? = nil) {
            self.destinationArn = destinationArn
            self.format = format
        }

        private enum CodingKeys: String, CodingKey {
            case destinationArn = "destinationArn"
            case format = "format"
        }
    }

    public struct Api: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiEndpoint", location: .body(locationName: "apiEndpoint"), required: false, type: .string), 
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "ProtocolType", location: .body(locationName: "protocolType"), required: true, type: .enum), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string), 
            AWSShapeMember(label: "Warnings", location: .body(locationName: "warnings"), required: false, type: .list)
        ]

        /// The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The
        ///  stage name is typically appended to this URI to form a complete path to a deployed
        ///  API stage.
        public let apiEndpoint: String?
        /// The API ID.
        public let apiId: String?
        /// An API key selection expression. See API Key Selection Expressions.
        public let apiKeySelectionExpression: String?
        /// The timestamp when the API was created.
        public let createdDate: TimeStamp?
        /// The description of the API.
        public let description: String?
        /// Avoid validating models when creating a deployment.
        public let disableSchemaValidation: Bool?
        /// The name of the API.
        public let name: String
        /// The API protocol: Currently only WEBSOCKET is supported.
        public let protocolType: ProtocolType
        /// The route selection expression for the API.
        public let routeSelectionExpression: String
        /// Tags for the API.
        public let tags: [String: String]?
        /// A version identifier for the API.
        public let version: String?
        /// The warning messages reported when failonwarnings is turned on during
        ///  API import.
        public let warnings: [String]?

        public init(apiEndpoint: String? = nil, apiId: String? = nil, apiKeySelectionExpression: String? = nil, createdDate: TimeStamp? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, name: String, protocolType: ProtocolType, routeSelectionExpression: String, tags: [String: String]? = nil, version: String? = nil, warnings: [String]? = nil) {
            self.apiEndpoint = apiEndpoint
            self.apiId = apiId
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.createdDate = createdDate
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.name = name
            self.protocolType = protocolType
            self.routeSelectionExpression = routeSelectionExpression
            self.tags = tags
            self.version = version
            self.warnings = warnings
        }

        private enum CodingKeys: String, CodingKey {
            case apiEndpoint = "apiEndpoint"
            case apiId = "apiId"
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case createdDate = "createdDate"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case name = "name"
            case protocolType = "protocolType"
            case routeSelectionExpression = "routeSelectionExpression"
            case tags = "tags"
            case version = "version"
            case warnings = "warnings"
        }
    }

    public struct ApiMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiMappingId", location: .body(locationName: "apiMappingId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingKey", location: .body(locationName: "apiMappingKey"), required: false, type: .string), 
            AWSShapeMember(label: "Stage", location: .body(locationName: "stage"), required: true, type: .string)
        ]

        /// The API identifier.
        public let apiId: String
        /// The API mapping identifier.
        public let apiMappingId: String?
        /// The API mapping key.
        public let apiMappingKey: String?
        /// The API stage.
        public let stage: String

        public init(apiId: String, apiMappingId: String? = nil, apiMappingKey: String? = nil, stage: String) {
            self.apiId = apiId
            self.apiMappingId = apiMappingId
            self.apiMappingKey = apiMappingKey
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiMappingId = "apiMappingId"
            case apiMappingKey = "apiMappingKey"
            case stage = "stage"
        }
    }

    public enum AuthorizationType: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case awsIam = "AWS_IAM"
        case custom = "CUSTOM"
        public var description: String { return self.rawValue }
    }

    public struct Authorizer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthorizerCredentialsArn", location: .body(locationName: "authorizerCredentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerResultTtlInSeconds", location: .body(locationName: "authorizerResultTtlInSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthorizerType", location: .body(locationName: "authorizerType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerUri", location: .body(locationName: "authorizerUri"), required: false, type: .string), 
            AWSShapeMember(label: "IdentitySource", location: .body(locationName: "identitySource"), required: false, type: .list), 
            AWSShapeMember(label: "IdentityValidationExpression", location: .body(locationName: "identityValidationExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "ProviderArns", location: .body(locationName: "providerArns"), required: false, type: .list)
        ]

        /// Specifies the required credentials as an IAM role for API Gateway to invoke the
        ///  authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon
        ///  Resource Name (ARN). To use resource-based permissions on the Lambda function,
        ///  specify null.
        public let authorizerCredentialsArn: String?
        /// The authorizer identifier.
        public let authorizerId: String?
        /// The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,
        ///  authorization caching is disabled. If it is greater than 0, API Gateway will cache
        ///  authorizer responses. If this field is not set, the default value is 300. The maximum
        ///  value is 3600, or 1 hour.
        public let authorizerResultTtlInSeconds: Int?
        /// The authorizer type. Currently the only valid value is REQUEST, for a
        ///  Lambda function using incoming request parameters.
        public let authorizerType: AuthorizerType?
        /// The authorizer's Uniform Resource Identifier (URI).
        ///  ForREQUEST authorizers, this must be a
        ///  well-formed Lambda function URI, for example,
        ///  arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.
        ///  In general, the URI has this form:
        ///  arn:aws:apigateway:{region}:lambda:path/{service_api}
        ///  , where {region} is the same as the region hosting the Lambda
        ///  function, path indicates that the remaining substring in the URI should be treated as
        ///  the path to the resource, including the initial /. For Lambda functions,
        ///  this is usually of the form
        ///  /2015-03-31/functions/[FunctionARN]/invocations.
        public let authorizerUri: String?
        /// The identity source for which authorization is requested.For the REQUEST authorizer, this is required when authorization
        ///  caching is enabled. The value is a comma-separated string of one or more mapping
        ///  expressions of the specified request parameters. For example, if an Auth
        ///  header and a Name query string parameters are defined as identity
        ///  sources, this value is method.request.header.Auth,
        ///  method.request.querystring.Name. These parameters will be used to
        ///  derive the authorization caching key and to perform runtime validation of the
        ///  REQUEST authorizer by verifying all of the identity-related request
        ///  parameters are present, not null, and non-empty. Only when this is true does the
        ///  authorizer invoke the authorizer Lambda function, otherwise, it returns a 401
        ///  Unauthorized response without calling the Lambda function. The valid value
        ///  is a string of comma-separated mapping expressions of the specified request
        ///  parameters. When the authorization caching is not enabled, this property is
        ///  optional.
        public let identitySource: [String]?
        /// The
        ///  validation expression does not apply to the REQUEST authorizer.
        public let identityValidationExpression: String?
        /// The name of the authorizer.
        public let name: String
        /// For
        ///  REQUEST authorizer, this is not
        ///  defined.
        public let providerArns: [String]?

        public init(authorizerCredentialsArn: String? = nil, authorizerId: String? = nil, authorizerResultTtlInSeconds: Int? = nil, authorizerType: AuthorizerType? = nil, authorizerUri: String? = nil, identitySource: [String]? = nil, identityValidationExpression: String? = nil, name: String, providerArns: [String]? = nil) {
            self.authorizerCredentialsArn = authorizerCredentialsArn
            self.authorizerId = authorizerId
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerType = authorizerType
            self.authorizerUri = authorizerUri
            self.identitySource = identitySource
            self.identityValidationExpression = identityValidationExpression
            self.name = name
            self.providerArns = providerArns
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerCredentialsArn = "authorizerCredentialsArn"
            case authorizerId = "authorizerId"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerType = "authorizerType"
            case authorizerUri = "authorizerUri"
            case identitySource = "identitySource"
            case identityValidationExpression = "identityValidationExpression"
            case name = "name"
            case providerArns = "providerArns"
        }
    }

    public enum AuthorizerType: String, CustomStringConvertible, Codable {
        case request = "REQUEST"
        public var description: String { return self.rawValue }
    }

    public enum ConnectionType: String, CustomStringConvertible, Codable {
        case internet = "INTERNET"
        case vpcLink = "VPC_LINK"
        public var description: String { return self.rawValue }
    }

    public enum ContentHandlingStrategy: String, CustomStringConvertible, Codable {
        case convertToBinary = "CONVERT_TO_BINARY"
        case convertToText = "CONVERT_TO_TEXT"
        public var description: String { return self.rawValue }
    }

    public struct CreateApiMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiMappingKey", location: .body(locationName: "apiMappingKey"), required: false, type: .string), 
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string), 
            AWSShapeMember(label: "Stage", location: .body(locationName: "stage"), required: true, type: .string)
        ]

        public let apiId: String
        public let apiMappingKey: String?
        public let domainName: String
        public let stage: String

        public init(apiId: String, apiMappingKey: String? = nil, domainName: String, stage: String) {
            self.apiId = apiId
            self.apiMappingKey = apiMappingKey
            self.domainName = domainName
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiMappingKey = "apiMappingKey"
            case domainName = "domainName"
            case stage = "stage"
        }
    }

    public struct CreateApiMappingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingId", location: .body(locationName: "apiMappingId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingKey", location: .body(locationName: "apiMappingKey"), required: false, type: .string), 
            AWSShapeMember(label: "Stage", location: .body(locationName: "stage"), required: false, type: .string)
        ]

        public let apiId: String?
        public let apiMappingId: String?
        public let apiMappingKey: String?
        public let stage: String?

        public init(apiId: String? = nil, apiMappingId: String? = nil, apiMappingKey: String? = nil, stage: String? = nil) {
            self.apiId = apiId
            self.apiMappingId = apiMappingId
            self.apiMappingKey = apiMappingKey
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiMappingId = "apiMappingId"
            case apiMappingKey = "apiMappingKey"
            case stage = "stage"
        }
    }

    public struct CreateApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "ProtocolType", location: .body(locationName: "protocolType"), required: true, type: .enum), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: true, type: .string), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string)
        ]

        public let apiKeySelectionExpression: String?
        public let description: String?
        public let disableSchemaValidation: Bool?
        public let name: String
        public let protocolType: ProtocolType
        public let routeSelectionExpression: String
        public let version: String?

        public init(apiKeySelectionExpression: String? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, name: String, protocolType: ProtocolType, routeSelectionExpression: String, version: String? = nil) {
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.name = name
            self.protocolType = protocolType
            self.routeSelectionExpression = routeSelectionExpression
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case name = "name"
            case protocolType = "protocolType"
            case routeSelectionExpression = "routeSelectionExpression"
            case version = "version"
        }
    }

    public struct CreateApiResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiEndpoint", location: .body(locationName: "apiEndpoint"), required: false, type: .string), 
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ProtocolType", location: .body(locationName: "protocolType"), required: false, type: .enum), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string), 
            AWSShapeMember(label: "Warnings", location: .body(locationName: "warnings"), required: false, type: .list)
        ]

        public let apiEndpoint: String?
        public let apiId: String?
        public let apiKeySelectionExpression: String?
        public let createdDate: TimeStamp?
        public let description: String?
        public let disableSchemaValidation: Bool?
        public let name: String?
        public let protocolType: ProtocolType?
        public let routeSelectionExpression: String?
        public let version: String?
        public let warnings: [String]?

        public init(apiEndpoint: String? = nil, apiId: String? = nil, apiKeySelectionExpression: String? = nil, createdDate: TimeStamp? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, name: String? = nil, protocolType: ProtocolType? = nil, routeSelectionExpression: String? = nil, version: String? = nil, warnings: [String]? = nil) {
            self.apiEndpoint = apiEndpoint
            self.apiId = apiId
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.createdDate = createdDate
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.name = name
            self.protocolType = protocolType
            self.routeSelectionExpression = routeSelectionExpression
            self.version = version
            self.warnings = warnings
        }

        private enum CodingKeys: String, CodingKey {
            case apiEndpoint = "apiEndpoint"
            case apiId = "apiId"
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case createdDate = "createdDate"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case name = "name"
            case protocolType = "protocolType"
            case routeSelectionExpression = "routeSelectionExpression"
            case version = "version"
            case warnings = "warnings"
        }
    }

    public struct CreateAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthorizerCredentialsArn", location: .body(locationName: "authorizerCredentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerResultTtlInSeconds", location: .body(locationName: "authorizerResultTtlInSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthorizerType", location: .body(locationName: "authorizerType"), required: true, type: .enum), 
            AWSShapeMember(label: "AuthorizerUri", location: .body(locationName: "authorizerUri"), required: true, type: .string), 
            AWSShapeMember(label: "IdentitySource", location: .body(locationName: "identitySource"), required: true, type: .list), 
            AWSShapeMember(label: "IdentityValidationExpression", location: .body(locationName: "identityValidationExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "ProviderArns", location: .body(locationName: "providerArns"), required: false, type: .list)
        ]

        public let apiId: String
        public let authorizerCredentialsArn: String?
        public let authorizerResultTtlInSeconds: Int?
        public let authorizerType: AuthorizerType
        public let authorizerUri: String
        public let identitySource: [String]
        public let identityValidationExpression: String?
        public let name: String
        public let providerArns: [String]?

        public init(apiId: String, authorizerCredentialsArn: String? = nil, authorizerResultTtlInSeconds: Int? = nil, authorizerType: AuthorizerType, authorizerUri: String, identitySource: [String], identityValidationExpression: String? = nil, name: String, providerArns: [String]? = nil) {
            self.apiId = apiId
            self.authorizerCredentialsArn = authorizerCredentialsArn
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerType = authorizerType
            self.authorizerUri = authorizerUri
            self.identitySource = identitySource
            self.identityValidationExpression = identityValidationExpression
            self.name = name
            self.providerArns = providerArns
        }

        public func validate(name: String) throws {
            try validate(self.authorizerResultTtlInSeconds, name:"authorizerResultTtlInSeconds", parent: name, max: 3600)
            try validate(self.authorizerResultTtlInSeconds, name:"authorizerResultTtlInSeconds", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case authorizerCredentialsArn = "authorizerCredentialsArn"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerType = "authorizerType"
            case authorizerUri = "authorizerUri"
            case identitySource = "identitySource"
            case identityValidationExpression = "identityValidationExpression"
            case name = "name"
            case providerArns = "providerArns"
        }
    }

    public struct CreateAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthorizerCredentialsArn", location: .body(locationName: "authorizerCredentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerResultTtlInSeconds", location: .body(locationName: "authorizerResultTtlInSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthorizerType", location: .body(locationName: "authorizerType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerUri", location: .body(locationName: "authorizerUri"), required: false, type: .string), 
            AWSShapeMember(label: "IdentitySource", location: .body(locationName: "identitySource"), required: false, type: .list), 
            AWSShapeMember(label: "IdentityValidationExpression", location: .body(locationName: "identityValidationExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ProviderArns", location: .body(locationName: "providerArns"), required: false, type: .list)
        ]

        public let authorizerCredentialsArn: String?
        public let authorizerId: String?
        public let authorizerResultTtlInSeconds: Int?
        public let authorizerType: AuthorizerType?
        public let authorizerUri: String?
        public let identitySource: [String]?
        public let identityValidationExpression: String?
        public let name: String?
        public let providerArns: [String]?

        public init(authorizerCredentialsArn: String? = nil, authorizerId: String? = nil, authorizerResultTtlInSeconds: Int? = nil, authorizerType: AuthorizerType? = nil, authorizerUri: String? = nil, identitySource: [String]? = nil, identityValidationExpression: String? = nil, name: String? = nil, providerArns: [String]? = nil) {
            self.authorizerCredentialsArn = authorizerCredentialsArn
            self.authorizerId = authorizerId
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerType = authorizerType
            self.authorizerUri = authorizerUri
            self.identitySource = identitySource
            self.identityValidationExpression = identityValidationExpression
            self.name = name
            self.providerArns = providerArns
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerCredentialsArn = "authorizerCredentialsArn"
            case authorizerId = "authorizerId"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerType = "authorizerType"
            case authorizerUri = "authorizerUri"
            case identitySource = "identitySource"
            case identityValidationExpression = "identityValidationExpression"
            case name = "name"
            case providerArns = "providerArns"
        }
    }

    public struct CreateDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "StageName", location: .body(locationName: "stageName"), required: false, type: .string)
        ]

        public let apiId: String
        public let description: String?
        public let stageName: String?

        public init(apiId: String, description: String? = nil, stageName: String? = nil) {
            self.apiId = apiId
            self.description = description
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case description = "description"
            case stageName = "stageName"
        }
    }

    public struct CreateDeploymentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "DeploymentStatus", location: .body(locationName: "deploymentStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "DeploymentStatusMessage", location: .body(locationName: "deploymentStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]

        public let createdDate: TimeStamp?
        public let deploymentId: String?
        public let deploymentStatus: DeploymentStatus?
        public let deploymentStatusMessage: String?
        public let description: String?

        public init(createdDate: TimeStamp? = nil, deploymentId: String? = nil, deploymentStatus: DeploymentStatus? = nil, deploymentStatusMessage: String? = nil, description: String? = nil) {
            self.createdDate = createdDate
            self.deploymentId = deploymentId
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "createdDate"
            case deploymentId = "deploymentId"
            case deploymentStatus = "deploymentStatus"
            case deploymentStatusMessage = "deploymentStatusMessage"
            case description = "description"
        }
    }

    public struct CreateDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .body(locationName: "domainName"), required: true, type: .string), 
            AWSShapeMember(label: "DomainNameConfigurations", location: .body(locationName: "domainNameConfigurations"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let domainName: String
        public let domainNameConfigurations: [DomainNameConfiguration]?
        public let tags: [String: String]?

        public init(domainName: String, domainNameConfigurations: [DomainNameConfiguration]? = nil, tags: [String: String]? = nil) {
            self.domainName = domainName
            self.domainNameConfigurations = domainNameConfigurations
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case domainNameConfigurations = "domainNameConfigurations"
            case tags = "tags"
        }
    }

    public struct CreateDomainNameResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiMappingSelectionExpression", location: .body(locationName: "apiMappingSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "DomainName", location: .body(locationName: "domainName"), required: false, type: .string), 
            AWSShapeMember(label: "DomainNameConfigurations", location: .body(locationName: "domainNameConfigurations"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let apiMappingSelectionExpression: String?
        public let domainName: String?
        public let domainNameConfigurations: [DomainNameConfiguration]?
        public let tags: [String: String]?

        public init(apiMappingSelectionExpression: String? = nil, domainName: String? = nil, domainNameConfigurations: [DomainNameConfiguration]? = nil, tags: [String: String]? = nil) {
            self.apiMappingSelectionExpression = apiMappingSelectionExpression
            self.domainName = domainName
            self.domainNameConfigurations = domainNameConfigurations
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case apiMappingSelectionExpression = "apiMappingSelectionExpression"
            case domainName = "domainName"
            case domainNameConfigurations = "domainNameConfigurations"
            case tags = "tags"
        }
    }

    public struct CreateIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionType", location: .body(locationName: "connectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationMethod", location: .body(locationName: "integrationMethod"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationType", location: .body(locationName: "integrationType"), required: true, type: .enum), 
            AWSShapeMember(label: "IntegrationUri", location: .body(locationName: "integrationUri"), required: false, type: .string), 
            AWSShapeMember(label: "PassthroughBehavior", location: .body(locationName: "passthroughBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RequestTemplates", location: .body(locationName: "requestTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "TimeoutInMillis", location: .body(locationName: "timeoutInMillis"), required: false, type: .integer)
        ]

        public let apiId: String
        public let connectionId: String?
        public let connectionType: ConnectionType?
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let credentialsArn: String?
        public let description: String?
        public let integrationMethod: String?
        public let integrationType: IntegrationType
        public let integrationUri: String?
        public let passthroughBehavior: PassthroughBehavior?
        public let requestParameters: [String: String]?
        public let requestTemplates: [String: String]?
        public let templateSelectionExpression: String?
        public let timeoutInMillis: Int?

        public init(apiId: String, connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandlingStrategy: ContentHandlingStrategy? = nil, credentialsArn: String? = nil, description: String? = nil, integrationMethod: String? = nil, integrationType: IntegrationType, integrationUri: String? = nil, passthroughBehavior: PassthroughBehavior? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil, timeoutInMillis: Int? = nil) {
            self.apiId = apiId
            self.connectionId = connectionId
            self.connectionType = connectionType
            self.contentHandlingStrategy = contentHandlingStrategy
            self.credentialsArn = credentialsArn
            self.description = description
            self.integrationMethod = integrationMethod
            self.integrationType = integrationType
            self.integrationUri = integrationUri
            self.passthroughBehavior = passthroughBehavior
            self.requestParameters = requestParameters
            self.requestTemplates = requestTemplates
            self.templateSelectionExpression = templateSelectionExpression
            self.timeoutInMillis = timeoutInMillis
        }

        public func validate(name: String) throws {
            try validate(self.timeoutInMillis, name:"timeoutInMillis", parent: name, max: 29000)
            try validate(self.timeoutInMillis, name:"timeoutInMillis", parent: name, min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case connectionId = "connectionId"
            case connectionType = "connectionType"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case integrationMethod = "integrationMethod"
            case integrationType = "integrationType"
            case integrationUri = "integrationUri"
            case passthroughBehavior = "passthroughBehavior"
            case requestParameters = "requestParameters"
            case requestTemplates = "requestTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
            case timeoutInMillis = "timeoutInMillis"
        }
    }

    public struct CreateIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationResponseKey", location: .body(locationName: "integrationResponseKey"), required: true, type: .string), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseTemplates", location: .body(locationName: "responseTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string)
        ]

        public let apiId: String
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let integrationId: String
        public let integrationResponseKey: String
        public let responseParameters: [String: String]?
        public let responseTemplates: [String: String]?
        public let templateSelectionExpression: String?

        public init(apiId: String, contentHandlingStrategy: ContentHandlingStrategy? = nil, integrationId: String, integrationResponseKey: String, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil) {
            self.apiId = apiId
            self.contentHandlingStrategy = contentHandlingStrategy
            self.integrationId = integrationId
            self.integrationResponseKey = integrationResponseKey
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.templateSelectionExpression = templateSelectionExpression
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case integrationId = "integrationId"
            case integrationResponseKey = "integrationResponseKey"
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
        }
    }

    public struct CreateIntegrationResponseResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationResponseId", location: .body(locationName: "integrationResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseKey", location: .body(locationName: "integrationResponseKey"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseTemplates", location: .body(locationName: "responseTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string)
        ]

        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let integrationResponseId: String?
        public let integrationResponseKey: String?
        public let responseParameters: [String: String]?
        public let responseTemplates: [String: String]?
        public let templateSelectionExpression: String?

        public init(contentHandlingStrategy: ContentHandlingStrategy? = nil, integrationResponseId: String? = nil, integrationResponseKey: String? = nil, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil) {
            self.contentHandlingStrategy = contentHandlingStrategy
            self.integrationResponseId = integrationResponseId
            self.integrationResponseKey = integrationResponseKey
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.templateSelectionExpression = templateSelectionExpression
        }

        private enum CodingKeys: String, CodingKey {
            case contentHandlingStrategy = "contentHandlingStrategy"
            case integrationResponseId = "integrationResponseId"
            case integrationResponseKey = "integrationResponseKey"
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
        }
    }

    public struct CreateIntegrationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionType", location: .body(locationName: "connectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .body(locationName: "integrationId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationMethod", location: .body(locationName: "integrationMethod"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseSelectionExpression", location: .body(locationName: "integrationResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationType", location: .body(locationName: "integrationType"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationUri", location: .body(locationName: "integrationUri"), required: false, type: .string), 
            AWSShapeMember(label: "PassthroughBehavior", location: .body(locationName: "passthroughBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RequestTemplates", location: .body(locationName: "requestTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "TimeoutInMillis", location: .body(locationName: "timeoutInMillis"), required: false, type: .integer)
        ]

        public let connectionId: String?
        public let connectionType: ConnectionType?
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let credentialsArn: String?
        public let description: String?
        public let integrationId: String?
        public let integrationMethod: String?
        public let integrationResponseSelectionExpression: String?
        public let integrationType: IntegrationType?
        public let integrationUri: String?
        public let passthroughBehavior: PassthroughBehavior?
        public let requestParameters: [String: String]?
        public let requestTemplates: [String: String]?
        public let templateSelectionExpression: String?
        public let timeoutInMillis: Int?

        public init(connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandlingStrategy: ContentHandlingStrategy? = nil, credentialsArn: String? = nil, description: String? = nil, integrationId: String? = nil, integrationMethod: String? = nil, integrationResponseSelectionExpression: String? = nil, integrationType: IntegrationType? = nil, integrationUri: String? = nil, passthroughBehavior: PassthroughBehavior? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil, timeoutInMillis: Int? = nil) {
            self.connectionId = connectionId
            self.connectionType = connectionType
            self.contentHandlingStrategy = contentHandlingStrategy
            self.credentialsArn = credentialsArn
            self.description = description
            self.integrationId = integrationId
            self.integrationMethod = integrationMethod
            self.integrationResponseSelectionExpression = integrationResponseSelectionExpression
            self.integrationType = integrationType
            self.integrationUri = integrationUri
            self.passthroughBehavior = passthroughBehavior
            self.requestParameters = requestParameters
            self.requestTemplates = requestTemplates
            self.templateSelectionExpression = templateSelectionExpression
            self.timeoutInMillis = timeoutInMillis
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case connectionType = "connectionType"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case integrationId = "integrationId"
            case integrationMethod = "integrationMethod"
            case integrationResponseSelectionExpression = "integrationResponseSelectionExpression"
            case integrationType = "integrationType"
            case integrationUri = "integrationUri"
            case passthroughBehavior = "passthroughBehavior"
            case requestParameters = "requestParameters"
            case requestTemplates = "requestTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
            case timeoutInMillis = "timeoutInMillis"
        }
    }

    public struct CreateModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ContentType", location: .body(locationName: "contentType"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Schema", location: .body(locationName: "schema"), required: true, type: .string)
        ]

        public let apiId: String
        public let contentType: String?
        public let description: String?
        public let name: String
        public let schema: String

        public init(apiId: String, contentType: String? = nil, description: String? = nil, name: String, schema: String) {
            self.apiId = apiId
            self.contentType = contentType
            self.description = description
            self.name = name
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case contentType = "contentType"
            case description = "description"
            case name = "name"
            case schema = "schema"
        }
    }

    public struct CreateModelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentType", location: .body(locationName: "contentType"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ModelId", location: .body(locationName: "modelId"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Schema", location: .body(locationName: "schema"), required: false, type: .string)
        ]

        public let contentType: String?
        public let description: String?
        public let modelId: String?
        public let name: String?
        public let schema: String?

        public init(contentType: String? = nil, description: String? = nil, modelId: String? = nil, name: String? = nil, schema: String? = nil) {
            self.contentType = contentType
            self.description = description
            self.modelId = modelId
            self.name = name
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "contentType"
            case description = "description"
            case modelId = "modelId"
            case name = "name"
            case schema = "schema"
        }
    }

    public struct CreateRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiKeyRequired", location: .body(locationName: "apiKeyRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthorizationScopes", location: .body(locationName: "authorizationScopes"), required: false, type: .list), 
            AWSShapeMember(label: "AuthorizationType", location: .body(locationName: "authorizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "OperationName", location: .body(locationName: "operationName"), required: false, type: .string), 
            AWSShapeMember(label: "RequestModels", location: .body(locationName: "requestModels"), required: false, type: .map), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseSelectionExpression", location: .body(locationName: "routeResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string)
        ]

        public let apiId: String
        public let apiKeyRequired: Bool?
        public let authorizationScopes: [String]?
        public let authorizationType: AuthorizationType?
        public let authorizerId: String?
        public let modelSelectionExpression: String?
        public let operationName: String?
        public let requestModels: [String: String]?
        public let requestParameters: [String: ParameterConstraints]?
        public let routeKey: String
        public let routeResponseSelectionExpression: String?
        public let target: String?

        public init(apiId: String, apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: AuthorizationType? = nil, authorizerId: String? = nil, modelSelectionExpression: String? = nil, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: ParameterConstraints]? = nil, routeKey: String, routeResponseSelectionExpression: String? = nil, target: String? = nil) {
            self.apiId = apiId
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.authorizationType = authorizationType
            self.authorizerId = authorizerId
            self.modelSelectionExpression = modelSelectionExpression
            self.operationName = operationName
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.routeKey = routeKey
            self.routeResponseSelectionExpression = routeResponseSelectionExpression
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiKeyRequired = "apiKeyRequired"
            case authorizationScopes = "authorizationScopes"
            case authorizationType = "authorizationType"
            case authorizerId = "authorizerId"
            case modelSelectionExpression = "modelSelectionExpression"
            case operationName = "operationName"
            case requestModels = "requestModels"
            case requestParameters = "requestParameters"
            case routeKey = "routeKey"
            case routeResponseSelectionExpression = "routeResponseSelectionExpression"
            case target = "target"
        }
    }

    public struct CreateRouteResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseModels", location: .body(locationName: "responseModels"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseKey", location: .body(locationName: "routeResponseKey"), required: true, type: .string)
        ]

        public let apiId: String
        public let modelSelectionExpression: String?
        public let responseModels: [String: String]?
        public let responseParameters: [String: ParameterConstraints]?
        public let routeId: String
        public let routeResponseKey: String

        public init(apiId: String, modelSelectionExpression: String? = nil, responseModels: [String: String]? = nil, responseParameters: [String: ParameterConstraints]? = nil, routeId: String, routeResponseKey: String) {
            self.apiId = apiId
            self.modelSelectionExpression = modelSelectionExpression
            self.responseModels = responseModels
            self.responseParameters = responseParameters
            self.routeId = routeId
            self.routeResponseKey = routeResponseKey
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case modelSelectionExpression = "modelSelectionExpression"
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
            case routeId = "routeId"
            case routeResponseKey = "routeResponseKey"
        }
    }

    public struct CreateRouteResponseResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseModels", location: .body(locationName: "responseModels"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteResponseId", location: .body(locationName: "routeResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseKey", location: .body(locationName: "routeResponseKey"), required: false, type: .string)
        ]

        public let modelSelectionExpression: String?
        public let responseModels: [String: String]?
        public let responseParameters: [String: ParameterConstraints]?
        public let routeResponseId: String?
        public let routeResponseKey: String?

        public init(modelSelectionExpression: String? = nil, responseModels: [String: String]? = nil, responseParameters: [String: ParameterConstraints]? = nil, routeResponseId: String? = nil, routeResponseKey: String? = nil) {
            self.modelSelectionExpression = modelSelectionExpression
            self.responseModels = responseModels
            self.responseParameters = responseParameters
            self.routeResponseId = routeResponseId
            self.routeResponseKey = routeResponseKey
        }

        private enum CodingKeys: String, CodingKey {
            case modelSelectionExpression = "modelSelectionExpression"
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
            case routeResponseId = "routeResponseId"
            case routeResponseKey = "routeResponseKey"
        }
    }

    public struct CreateRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiKeyRequired", location: .body(locationName: "apiKeyRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthorizationScopes", location: .body(locationName: "authorizationScopes"), required: false, type: .list), 
            AWSShapeMember(label: "AuthorizationType", location: .body(locationName: "authorizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "OperationName", location: .body(locationName: "operationName"), required: false, type: .string), 
            AWSShapeMember(label: "RequestModels", location: .body(locationName: "requestModels"), required: false, type: .map), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .body(locationName: "routeId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseSelectionExpression", location: .body(locationName: "routeResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string)
        ]

        public let apiKeyRequired: Bool?
        public let authorizationScopes: [String]?
        public let authorizationType: AuthorizationType?
        public let authorizerId: String?
        public let modelSelectionExpression: String?
        public let operationName: String?
        public let requestModels: [String: String]?
        public let requestParameters: [String: ParameterConstraints]?
        public let routeId: String?
        public let routeKey: String?
        public let routeResponseSelectionExpression: String?
        public let target: String?

        public init(apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: AuthorizationType? = nil, authorizerId: String? = nil, modelSelectionExpression: String? = nil, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: ParameterConstraints]? = nil, routeId: String? = nil, routeKey: String? = nil, routeResponseSelectionExpression: String? = nil, target: String? = nil) {
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.authorizationType = authorizationType
            self.authorizerId = authorizerId
            self.modelSelectionExpression = modelSelectionExpression
            self.operationName = operationName
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.routeId = routeId
            self.routeKey = routeKey
            self.routeResponseSelectionExpression = routeResponseSelectionExpression
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case apiKeyRequired = "apiKeyRequired"
            case authorizationScopes = "authorizationScopes"
            case authorizationType = "authorizationType"
            case authorizerId = "authorizerId"
            case modelSelectionExpression = "modelSelectionExpression"
            case operationName = "operationName"
            case requestModels = "requestModels"
            case requestParameters = "requestParameters"
            case routeId = "routeId"
            case routeKey = "routeKey"
            case routeResponseSelectionExpression = "routeResponseSelectionExpression"
            case target = "target"
        }
    }

    public struct CreateStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessLogSettings", location: .body(locationName: "accessLogSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ClientCertificateId", location: .body(locationName: "clientCertificateId"), required: false, type: .string), 
            AWSShapeMember(label: "DefaultRouteSettings", location: .body(locationName: "defaultRouteSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "RouteSettings", location: .body(locationName: "routeSettings"), required: false, type: .map), 
            AWSShapeMember(label: "StageName", location: .body(locationName: "stageName"), required: true, type: .string), 
            AWSShapeMember(label: "StageVariables", location: .body(locationName: "stageVariables"), required: false, type: .map), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let accessLogSettings: AccessLogSettings?
        public let apiId: String
        public let clientCertificateId: String?
        public let defaultRouteSettings: RouteSettings?
        public let deploymentId: String?
        public let description: String?
        public let routeSettings: [String: RouteSettings]?
        public let stageName: String
        public let stageVariables: [String: String]?
        public let tags: [String: String]?

        public init(accessLogSettings: AccessLogSettings? = nil, apiId: String, clientCertificateId: String? = nil, defaultRouteSettings: RouteSettings? = nil, deploymentId: String? = nil, description: String? = nil, routeSettings: [String: RouteSettings]? = nil, stageName: String, stageVariables: [String: String]? = nil, tags: [String: String]? = nil) {
            self.accessLogSettings = accessLogSettings
            self.apiId = apiId
            self.clientCertificateId = clientCertificateId
            self.defaultRouteSettings = defaultRouteSettings
            self.deploymentId = deploymentId
            self.description = description
            self.routeSettings = routeSettings
            self.stageName = stageName
            self.stageVariables = stageVariables
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogSettings = "accessLogSettings"
            case apiId = "apiId"
            case clientCertificateId = "clientCertificateId"
            case defaultRouteSettings = "defaultRouteSettings"
            case deploymentId = "deploymentId"
            case description = "description"
            case routeSettings = "routeSettings"
            case stageName = "stageName"
            case stageVariables = "stageVariables"
            case tags = "tags"
        }
    }

    public struct CreateStageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessLogSettings", location: .body(locationName: "accessLogSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ClientCertificateId", location: .body(locationName: "clientCertificateId"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultRouteSettings", location: .body(locationName: "defaultRouteSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedDate", location: .body(locationName: "lastUpdatedDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RouteSettings", location: .body(locationName: "routeSettings"), required: false, type: .map), 
            AWSShapeMember(label: "StageName", location: .body(locationName: "stageName"), required: false, type: .string), 
            AWSShapeMember(label: "StageVariables", location: .body(locationName: "stageVariables"), required: false, type: .map), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let accessLogSettings: AccessLogSettings?
        public let clientCertificateId: String?
        public let createdDate: TimeStamp?
        public let defaultRouteSettings: RouteSettings?
        public let deploymentId: String?
        public let description: String?
        public let lastUpdatedDate: TimeStamp?
        public let routeSettings: [String: RouteSettings]?
        public let stageName: String?
        public let stageVariables: [String: String]?
        public let tags: [String: String]?

        public init(accessLogSettings: AccessLogSettings? = nil, clientCertificateId: String? = nil, createdDate: TimeStamp? = nil, defaultRouteSettings: RouteSettings? = nil, deploymentId: String? = nil, description: String? = nil, lastUpdatedDate: TimeStamp? = nil, routeSettings: [String: RouteSettings]? = nil, stageName: String? = nil, stageVariables: [String: String]? = nil, tags: [String: String]? = nil) {
            self.accessLogSettings = accessLogSettings
            self.clientCertificateId = clientCertificateId
            self.createdDate = createdDate
            self.defaultRouteSettings = defaultRouteSettings
            self.deploymentId = deploymentId
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.routeSettings = routeSettings
            self.stageName = stageName
            self.stageVariables = stageVariables
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogSettings = "accessLogSettings"
            case clientCertificateId = "clientCertificateId"
            case createdDate = "createdDate"
            case defaultRouteSettings = "defaultRouteSettings"
            case deploymentId = "deploymentId"
            case description = "description"
            case lastUpdatedDate = "lastUpdatedDate"
            case routeSettings = "routeSettings"
            case stageName = "stageName"
            case stageVariables = "stageVariables"
            case tags = "tags"
        }
    }

    public struct DeleteApiMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiMappingId", location: .uri(locationName: "apiMappingId"), required: true, type: .string), 
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string)
        ]

        public let apiMappingId: String
        public let domainName: String

        public init(apiMappingId: String, domainName: String) {
            self.apiMappingId = apiMappingId
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case apiMappingId = "apiMappingId"
            case domainName = "domainName"
        }
    }

    public struct DeleteApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]

        public let apiId: String

        public init(apiId: String) {
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
        }
    }

    public struct DeleteAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .uri(locationName: "authorizerId"), required: true, type: .string)
        ]

        public let apiId: String
        public let authorizerId: String

        public init(apiId: String, authorizerId: String) {
            self.apiId = apiId
            self.authorizerId = authorizerId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case authorizerId = "authorizerId"
        }
    }

    public struct DeleteDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "DeploymentId", location: .uri(locationName: "deploymentId"), required: true, type: .string)
        ]

        public let apiId: String
        public let deploymentId: String

        public init(apiId: String, deploymentId: String) {
            self.apiId = apiId
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case deploymentId = "deploymentId"
        }
    }

    public struct DeleteDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string)
        ]

        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

    public struct DeleteIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string)
        ]

        public let apiId: String
        public let integrationId: String

        public init(apiId: String, integrationId: String) {
            self.apiId = apiId
            self.integrationId = integrationId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case integrationId = "integrationId"
        }
    }

    public struct DeleteIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationResponseId", location: .uri(locationName: "integrationResponseId"), required: true, type: .string)
        ]

        public let apiId: String
        public let integrationId: String
        public let integrationResponseId: String

        public init(apiId: String, integrationId: String, integrationResponseId: String) {
            self.apiId = apiId
            self.integrationId = integrationId
            self.integrationResponseId = integrationResponseId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case integrationId = "integrationId"
            case integrationResponseId = "integrationResponseId"
        }
    }

    public struct DeleteModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ModelId", location: .uri(locationName: "modelId"), required: true, type: .string)
        ]

        public let apiId: String
        public let modelId: String

        public init(apiId: String, modelId: String) {
            self.apiId = apiId
            self.modelId = modelId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case modelId = "modelId"
        }
    }

    public struct DeleteRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string)
        ]

        public let apiId: String
        public let routeId: String

        public init(apiId: String, routeId: String) {
            self.apiId = apiId
            self.routeId = routeId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case routeId = "routeId"
        }
    }

    public struct DeleteRouteResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseId", location: .uri(locationName: "routeResponseId"), required: true, type: .string)
        ]

        public let apiId: String
        public let routeId: String
        public let routeResponseId: String

        public init(apiId: String, routeId: String, routeResponseId: String) {
            self.apiId = apiId
            self.routeId = routeId
            self.routeResponseId = routeResponseId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case routeId = "routeId"
            case routeResponseId = "routeResponseId"
        }
    }

    public struct DeleteStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "StageName", location: .uri(locationName: "stageName"), required: true, type: .string)
        ]

        public let apiId: String
        public let stageName: String

        public init(apiId: String, stageName: String) {
            self.apiId = apiId
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case stageName = "stageName"
        }
    }

    public struct Deployment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "DeploymentStatus", location: .body(locationName: "deploymentStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "DeploymentStatusMessage", location: .body(locationName: "deploymentStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]

        /// The date and time when the Deployment resource was created.
        public let createdDate: TimeStamp?
        /// The identifier for the deployment.
        public let deploymentId: String?
        /// The status of the deployment: PENDING, FAILED, or
        ///  SUCCEEDED.
        public let deploymentStatus: DeploymentStatus?
        /// May contain additional feedback on the status of an API deployment.
        public let deploymentStatusMessage: String?
        /// The description for the deployment.
        public let description: String?

        public init(createdDate: TimeStamp? = nil, deploymentId: String? = nil, deploymentStatus: DeploymentStatus? = nil, deploymentStatusMessage: String? = nil, description: String? = nil) {
            self.createdDate = createdDate
            self.deploymentId = deploymentId
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "createdDate"
            case deploymentId = "deploymentId"
            case deploymentStatus = "deploymentStatus"
            case deploymentStatusMessage = "deploymentStatusMessage"
            case description = "description"
        }
    }

    public enum DeploymentStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case failed = "FAILED"
        case deployed = "DEPLOYED"
        public var description: String { return self.rawValue }
    }

    public struct DomainName: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiMappingSelectionExpression", location: .body(locationName: "apiMappingSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "DomainName", location: .body(locationName: "domainName"), required: true, type: .string), 
            AWSShapeMember(label: "DomainNameConfigurations", location: .body(locationName: "domainNameConfigurations"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        /// The API mapping selection expression.
        public let apiMappingSelectionExpression: String?
        /// The name of the DomainName resource.
        public let domainName: String
        /// The domain name configurations.
        public let domainNameConfigurations: [DomainNameConfiguration]?
        /// Tags for the DomainName.
        public let tags: [String: String]?

        public init(apiMappingSelectionExpression: String? = nil, domainName: String, domainNameConfigurations: [DomainNameConfiguration]? = nil, tags: [String: String]? = nil) {
            self.apiMappingSelectionExpression = apiMappingSelectionExpression
            self.domainName = domainName
            self.domainNameConfigurations = domainNameConfigurations
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case apiMappingSelectionExpression = "apiMappingSelectionExpression"
            case domainName = "domainName"
            case domainNameConfigurations = "domainNameConfigurations"
            case tags = "tags"
        }
    }

    public struct DomainNameConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiGatewayDomainName", location: .body(locationName: "apiGatewayDomainName"), required: false, type: .string), 
            AWSShapeMember(label: "CertificateArn", location: .body(locationName: "certificateArn"), required: false, type: .string), 
            AWSShapeMember(label: "CertificateName", location: .body(locationName: "certificateName"), required: false, type: .string), 
            AWSShapeMember(label: "CertificateUploadDate", location: .body(locationName: "certificateUploadDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DomainNameStatus", location: .body(locationName: "domainNameStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "DomainNameStatusMessage", location: .body(locationName: "domainNameStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "EndpointType", location: .body(locationName: "endpointType"), required: false, type: .enum), 
            AWSShapeMember(label: "HostedZoneId", location: .body(locationName: "hostedZoneId"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityPolicy", location: .body(locationName: "securityPolicy"), required: false, type: .enum)
        ]

        /// A domain name for the WebSocket API.
        public let apiGatewayDomainName: String?
        /// An AWS-managed certificate that will be used by the edge-optimized endpoint for
        ///  this domain name. AWS Certificate Manager is the only supported source.
        public let certificateArn: String?
        /// The user-friendly name of the certificate that will be used by the edge-optimized
        ///  endpoint for this domain name.
        public let certificateName: String?
        /// The timestamp when the certificate that was used by edge-optimized endpoint for
        ///  this domain name was uploaded.
        public let certificateUploadDate: TimeStamp?
        /// The status of the domain name migration. The valid values are AVAILABLE and UPDATING. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.
        public let domainNameStatus: DomainNameStatus?
        /// An optional text message containing detailed information about status of the domain name migration.
        public let domainNameStatusMessage: String?
        /// The endpoint type.
        public let endpointType: EndpointType?
        /// The Amazon Route 53 Hosted Zone ID of the endpoint.
        public let hostedZoneId: String?
        /// The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
        public let securityPolicy: SecurityPolicy?

        public init(apiGatewayDomainName: String? = nil, certificateArn: String? = nil, certificateName: String? = nil, certificateUploadDate: TimeStamp? = nil, domainNameStatus: DomainNameStatus? = nil, domainNameStatusMessage: String? = nil, endpointType: EndpointType? = nil, hostedZoneId: String? = nil, securityPolicy: SecurityPolicy? = nil) {
            self.apiGatewayDomainName = apiGatewayDomainName
            self.certificateArn = certificateArn
            self.certificateName = certificateName
            self.certificateUploadDate = certificateUploadDate
            self.domainNameStatus = domainNameStatus
            self.domainNameStatusMessage = domainNameStatusMessage
            self.endpointType = endpointType
            self.hostedZoneId = hostedZoneId
            self.securityPolicy = securityPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case apiGatewayDomainName = "apiGatewayDomainName"
            case certificateArn = "certificateArn"
            case certificateName = "certificateName"
            case certificateUploadDate = "certificateUploadDate"
            case domainNameStatus = "domainNameStatus"
            case domainNameStatusMessage = "domainNameStatusMessage"
            case endpointType = "endpointType"
            case hostedZoneId = "hostedZoneId"
            case securityPolicy = "securityPolicy"
        }
    }

    public enum DomainNameStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum EndpointType: String, CustomStringConvertible, Codable {
        case regional = "REGIONAL"
        case edge = "EDGE"
        public var description: String { return self.rawValue }
    }

    public struct GetApiMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiMappingId", location: .uri(locationName: "apiMappingId"), required: true, type: .string), 
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string)
        ]

        public let apiMappingId: String
        public let domainName: String

        public init(apiMappingId: String, domainName: String) {
            self.apiMappingId = apiMappingId
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case apiMappingId = "apiMappingId"
            case domainName = "domainName"
        }
    }

    public struct GetApiMappingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingId", location: .body(locationName: "apiMappingId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingKey", location: .body(locationName: "apiMappingKey"), required: false, type: .string), 
            AWSShapeMember(label: "Stage", location: .body(locationName: "stage"), required: false, type: .string)
        ]

        public let apiId: String?
        public let apiMappingId: String?
        public let apiMappingKey: String?
        public let stage: String?

        public init(apiId: String? = nil, apiMappingId: String? = nil, apiMappingKey: String? = nil, stage: String? = nil) {
            self.apiId = apiId
            self.apiMappingId = apiMappingId
            self.apiMappingKey = apiMappingKey
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiMappingId = "apiMappingId"
            case apiMappingKey = "apiMappingKey"
            case stage = "stage"
        }
    }

    public struct GetApiMappingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let domainName: String
        public let maxResults: String?
        public let nextToken: String?

        public init(domainName: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.domainName = domainName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetApiMappingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [ApiMapping]?
        public let nextToken: String?

        public init(items: [ApiMapping]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string)
        ]

        public let apiId: String

        public init(apiId: String) {
            self.apiId = apiId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
        }
    }

    public struct GetApiResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiEndpoint", location: .body(locationName: "apiEndpoint"), required: false, type: .string), 
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ProtocolType", location: .body(locationName: "protocolType"), required: false, type: .enum), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string), 
            AWSShapeMember(label: "Warnings", location: .body(locationName: "warnings"), required: false, type: .list)
        ]

        public let apiEndpoint: String?
        public let apiId: String?
        public let apiKeySelectionExpression: String?
        public let createdDate: TimeStamp?
        public let description: String?
        public let disableSchemaValidation: Bool?
        public let name: String?
        public let protocolType: ProtocolType?
        public let routeSelectionExpression: String?
        public let tags: [String: String]?
        public let version: String?
        public let warnings: [String]?

        public init(apiEndpoint: String? = nil, apiId: String? = nil, apiKeySelectionExpression: String? = nil, createdDate: TimeStamp? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, name: String? = nil, protocolType: ProtocolType? = nil, routeSelectionExpression: String? = nil, tags: [String: String]? = nil, version: String? = nil, warnings: [String]? = nil) {
            self.apiEndpoint = apiEndpoint
            self.apiId = apiId
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.createdDate = createdDate
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.name = name
            self.protocolType = protocolType
            self.routeSelectionExpression = routeSelectionExpression
            self.tags = tags
            self.version = version
            self.warnings = warnings
        }

        private enum CodingKeys: String, CodingKey {
            case apiEndpoint = "apiEndpoint"
            case apiId = "apiId"
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case createdDate = "createdDate"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case name = "name"
            case protocolType = "protocolType"
            case routeSelectionExpression = "routeSelectionExpression"
            case tags = "tags"
            case version = "version"
            case warnings = "warnings"
        }
    }

    public struct GetApisRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetApisResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Api]?
        public let nextToken: String?

        public init(items: [Api]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .uri(locationName: "authorizerId"), required: true, type: .string)
        ]

        public let apiId: String
        public let authorizerId: String

        public init(apiId: String, authorizerId: String) {
            self.apiId = apiId
            self.authorizerId = authorizerId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case authorizerId = "authorizerId"
        }
    }

    public struct GetAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthorizerCredentialsArn", location: .body(locationName: "authorizerCredentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerResultTtlInSeconds", location: .body(locationName: "authorizerResultTtlInSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthorizerType", location: .body(locationName: "authorizerType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerUri", location: .body(locationName: "authorizerUri"), required: false, type: .string), 
            AWSShapeMember(label: "IdentitySource", location: .body(locationName: "identitySource"), required: false, type: .list), 
            AWSShapeMember(label: "IdentityValidationExpression", location: .body(locationName: "identityValidationExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ProviderArns", location: .body(locationName: "providerArns"), required: false, type: .list)
        ]

        public let authorizerCredentialsArn: String?
        public let authorizerId: String?
        public let authorizerResultTtlInSeconds: Int?
        public let authorizerType: AuthorizerType?
        public let authorizerUri: String?
        public let identitySource: [String]?
        public let identityValidationExpression: String?
        public let name: String?
        public let providerArns: [String]?

        public init(authorizerCredentialsArn: String? = nil, authorizerId: String? = nil, authorizerResultTtlInSeconds: Int? = nil, authorizerType: AuthorizerType? = nil, authorizerUri: String? = nil, identitySource: [String]? = nil, identityValidationExpression: String? = nil, name: String? = nil, providerArns: [String]? = nil) {
            self.authorizerCredentialsArn = authorizerCredentialsArn
            self.authorizerId = authorizerId
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerType = authorizerType
            self.authorizerUri = authorizerUri
            self.identitySource = identitySource
            self.identityValidationExpression = identityValidationExpression
            self.name = name
            self.providerArns = providerArns
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerCredentialsArn = "authorizerCredentialsArn"
            case authorizerId = "authorizerId"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerType = "authorizerType"
            case authorizerUri = "authorizerUri"
            case identitySource = "identitySource"
            case identityValidationExpression = "identityValidationExpression"
            case name = "name"
            case providerArns = "providerArns"
        }
    }

    public struct GetAuthorizersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetAuthorizersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Authorizer]?
        public let nextToken: String?

        public init(items: [Authorizer]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "DeploymentId", location: .uri(locationName: "deploymentId"), required: true, type: .string)
        ]

        public let apiId: String
        public let deploymentId: String

        public init(apiId: String, deploymentId: String) {
            self.apiId = apiId
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case deploymentId = "deploymentId"
        }
    }

    public struct GetDeploymentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "DeploymentStatus", location: .body(locationName: "deploymentStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "DeploymentStatusMessage", location: .body(locationName: "deploymentStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]

        public let createdDate: TimeStamp?
        public let deploymentId: String?
        public let deploymentStatus: DeploymentStatus?
        public let deploymentStatusMessage: String?
        public let description: String?

        public init(createdDate: TimeStamp? = nil, deploymentId: String? = nil, deploymentStatus: DeploymentStatus? = nil, deploymentStatusMessage: String? = nil, description: String? = nil) {
            self.createdDate = createdDate
            self.deploymentId = deploymentId
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "createdDate"
            case deploymentId = "deploymentId"
            case deploymentStatus = "deploymentStatus"
            case deploymentStatusMessage = "deploymentStatusMessage"
            case description = "description"
        }
    }

    public struct GetDeploymentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetDeploymentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Deployment]?
        public let nextToken: String?

        public init(items: [Deployment]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string)
        ]

        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

    public struct GetDomainNameResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiMappingSelectionExpression", location: .body(locationName: "apiMappingSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "DomainName", location: .body(locationName: "domainName"), required: false, type: .string), 
            AWSShapeMember(label: "DomainNameConfigurations", location: .body(locationName: "domainNameConfigurations"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let apiMappingSelectionExpression: String?
        public let domainName: String?
        public let domainNameConfigurations: [DomainNameConfiguration]?
        public let tags: [String: String]?

        public init(apiMappingSelectionExpression: String? = nil, domainName: String? = nil, domainNameConfigurations: [DomainNameConfiguration]? = nil, tags: [String: String]? = nil) {
            self.apiMappingSelectionExpression = apiMappingSelectionExpression
            self.domainName = domainName
            self.domainNameConfigurations = domainNameConfigurations
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case apiMappingSelectionExpression = "apiMappingSelectionExpression"
            case domainName = "domainName"
            case domainNameConfigurations = "domainNameConfigurations"
            case tags = "tags"
        }
    }

    public struct GetDomainNamesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetDomainNamesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [DomainName]?
        public let nextToken: String?

        public init(items: [DomainName]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string)
        ]

        public let apiId: String
        public let integrationId: String

        public init(apiId: String, integrationId: String) {
            self.apiId = apiId
            self.integrationId = integrationId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case integrationId = "integrationId"
        }
    }

    public struct GetIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationResponseId", location: .uri(locationName: "integrationResponseId"), required: true, type: .string)
        ]

        public let apiId: String
        public let integrationId: String
        public let integrationResponseId: String

        public init(apiId: String, integrationId: String, integrationResponseId: String) {
            self.apiId = apiId
            self.integrationId = integrationId
            self.integrationResponseId = integrationResponseId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case integrationId = "integrationId"
            case integrationResponseId = "integrationResponseId"
        }
    }

    public struct GetIntegrationResponseResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationResponseId", location: .body(locationName: "integrationResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseKey", location: .body(locationName: "integrationResponseKey"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseTemplates", location: .body(locationName: "responseTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string)
        ]

        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let integrationResponseId: String?
        public let integrationResponseKey: String?
        public let responseParameters: [String: String]?
        public let responseTemplates: [String: String]?
        public let templateSelectionExpression: String?

        public init(contentHandlingStrategy: ContentHandlingStrategy? = nil, integrationResponseId: String? = nil, integrationResponseKey: String? = nil, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil) {
            self.contentHandlingStrategy = contentHandlingStrategy
            self.integrationResponseId = integrationResponseId
            self.integrationResponseKey = integrationResponseKey
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.templateSelectionExpression = templateSelectionExpression
        }

        private enum CodingKeys: String, CodingKey {
            case contentHandlingStrategy = "contentHandlingStrategy"
            case integrationResponseId = "integrationResponseId"
            case integrationResponseKey = "integrationResponseKey"
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
        }
    }

    public struct GetIntegrationResponsesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let integrationId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, integrationId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.integrationId = integrationId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case integrationId = "integrationId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetIntegrationResponsesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [IntegrationResponse]?
        public let nextToken: String?

        public init(items: [IntegrationResponse]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetIntegrationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionType", location: .body(locationName: "connectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .body(locationName: "integrationId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationMethod", location: .body(locationName: "integrationMethod"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseSelectionExpression", location: .body(locationName: "integrationResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationType", location: .body(locationName: "integrationType"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationUri", location: .body(locationName: "integrationUri"), required: false, type: .string), 
            AWSShapeMember(label: "PassthroughBehavior", location: .body(locationName: "passthroughBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RequestTemplates", location: .body(locationName: "requestTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "TimeoutInMillis", location: .body(locationName: "timeoutInMillis"), required: false, type: .integer)
        ]

        public let connectionId: String?
        public let connectionType: ConnectionType?
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let credentialsArn: String?
        public let description: String?
        public let integrationId: String?
        public let integrationMethod: String?
        public let integrationResponseSelectionExpression: String?
        public let integrationType: IntegrationType?
        public let integrationUri: String?
        public let passthroughBehavior: PassthroughBehavior?
        public let requestParameters: [String: String]?
        public let requestTemplates: [String: String]?
        public let templateSelectionExpression: String?
        public let timeoutInMillis: Int?

        public init(connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandlingStrategy: ContentHandlingStrategy? = nil, credentialsArn: String? = nil, description: String? = nil, integrationId: String? = nil, integrationMethod: String? = nil, integrationResponseSelectionExpression: String? = nil, integrationType: IntegrationType? = nil, integrationUri: String? = nil, passthroughBehavior: PassthroughBehavior? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil, timeoutInMillis: Int? = nil) {
            self.connectionId = connectionId
            self.connectionType = connectionType
            self.contentHandlingStrategy = contentHandlingStrategy
            self.credentialsArn = credentialsArn
            self.description = description
            self.integrationId = integrationId
            self.integrationMethod = integrationMethod
            self.integrationResponseSelectionExpression = integrationResponseSelectionExpression
            self.integrationType = integrationType
            self.integrationUri = integrationUri
            self.passthroughBehavior = passthroughBehavior
            self.requestParameters = requestParameters
            self.requestTemplates = requestTemplates
            self.templateSelectionExpression = templateSelectionExpression
            self.timeoutInMillis = timeoutInMillis
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case connectionType = "connectionType"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case integrationId = "integrationId"
            case integrationMethod = "integrationMethod"
            case integrationResponseSelectionExpression = "integrationResponseSelectionExpression"
            case integrationType = "integrationType"
            case integrationUri = "integrationUri"
            case passthroughBehavior = "passthroughBehavior"
            case requestParameters = "requestParameters"
            case requestTemplates = "requestTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
            case timeoutInMillis = "timeoutInMillis"
        }
    }

    public struct GetIntegrationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetIntegrationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Integration]?
        public let nextToken: String?

        public init(items: [Integration]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ModelId", location: .uri(locationName: "modelId"), required: true, type: .string)
        ]

        public let apiId: String
        public let modelId: String

        public init(apiId: String, modelId: String) {
            self.apiId = apiId
            self.modelId = modelId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case modelId = "modelId"
        }
    }

    public struct GetModelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentType", location: .body(locationName: "contentType"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ModelId", location: .body(locationName: "modelId"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Schema", location: .body(locationName: "schema"), required: false, type: .string)
        ]

        public let contentType: String?
        public let description: String?
        public let modelId: String?
        public let name: String?
        public let schema: String?

        public init(contentType: String? = nil, description: String? = nil, modelId: String? = nil, name: String? = nil, schema: String? = nil) {
            self.contentType = contentType
            self.description = description
            self.modelId = modelId
            self.name = name
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "contentType"
            case description = "description"
            case modelId = "modelId"
            case name = "name"
            case schema = "schema"
        }
    }

    public struct GetModelTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ModelId", location: .uri(locationName: "modelId"), required: true, type: .string)
        ]

        public let apiId: String
        public let modelId: String

        public init(apiId: String, modelId: String) {
            self.apiId = apiId
            self.modelId = modelId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case modelId = "modelId"
        }
    }

    public struct GetModelTemplateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct GetModelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetModelsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Model]?
        public let nextToken: String?

        public init(items: [Model]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string)
        ]

        public let apiId: String
        public let routeId: String

        public init(apiId: String, routeId: String) {
            self.apiId = apiId
            self.routeId = routeId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case routeId = "routeId"
        }
    }

    public struct GetRouteResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseId", location: .uri(locationName: "routeResponseId"), required: true, type: .string)
        ]

        public let apiId: String
        public let routeId: String
        public let routeResponseId: String

        public init(apiId: String, routeId: String, routeResponseId: String) {
            self.apiId = apiId
            self.routeId = routeId
            self.routeResponseId = routeResponseId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case routeId = "routeId"
            case routeResponseId = "routeResponseId"
        }
    }

    public struct GetRouteResponseResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseModels", location: .body(locationName: "responseModels"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteResponseId", location: .body(locationName: "routeResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseKey", location: .body(locationName: "routeResponseKey"), required: false, type: .string)
        ]

        public let modelSelectionExpression: String?
        public let responseModels: [String: String]?
        public let responseParameters: [String: ParameterConstraints]?
        public let routeResponseId: String?
        public let routeResponseKey: String?

        public init(modelSelectionExpression: String? = nil, responseModels: [String: String]? = nil, responseParameters: [String: ParameterConstraints]? = nil, routeResponseId: String? = nil, routeResponseKey: String? = nil) {
            self.modelSelectionExpression = modelSelectionExpression
            self.responseModels = responseModels
            self.responseParameters = responseParameters
            self.routeResponseId = routeResponseId
            self.routeResponseKey = routeResponseKey
        }

        private enum CodingKeys: String, CodingKey {
            case modelSelectionExpression = "modelSelectionExpression"
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
            case routeResponseId = "routeResponseId"
            case routeResponseKey = "routeResponseKey"
        }
    }

    public struct GetRouteResponsesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?
        public let routeId: String

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil, routeId: String) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.routeId = routeId
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case routeId = "routeId"
        }
    }

    public struct GetRouteResponsesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [RouteResponse]?
        public let nextToken: String?

        public init(items: [RouteResponse]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiKeyRequired", location: .body(locationName: "apiKeyRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthorizationScopes", location: .body(locationName: "authorizationScopes"), required: false, type: .list), 
            AWSShapeMember(label: "AuthorizationType", location: .body(locationName: "authorizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "OperationName", location: .body(locationName: "operationName"), required: false, type: .string), 
            AWSShapeMember(label: "RequestModels", location: .body(locationName: "requestModels"), required: false, type: .map), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .body(locationName: "routeId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseSelectionExpression", location: .body(locationName: "routeResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string)
        ]

        public let apiKeyRequired: Bool?
        public let authorizationScopes: [String]?
        public let authorizationType: AuthorizationType?
        public let authorizerId: String?
        public let modelSelectionExpression: String?
        public let operationName: String?
        public let requestModels: [String: String]?
        public let requestParameters: [String: ParameterConstraints]?
        public let routeId: String?
        public let routeKey: String?
        public let routeResponseSelectionExpression: String?
        public let target: String?

        public init(apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: AuthorizationType? = nil, authorizerId: String? = nil, modelSelectionExpression: String? = nil, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: ParameterConstraints]? = nil, routeId: String? = nil, routeKey: String? = nil, routeResponseSelectionExpression: String? = nil, target: String? = nil) {
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.authorizationType = authorizationType
            self.authorizerId = authorizerId
            self.modelSelectionExpression = modelSelectionExpression
            self.operationName = operationName
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.routeId = routeId
            self.routeKey = routeKey
            self.routeResponseSelectionExpression = routeResponseSelectionExpression
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case apiKeyRequired = "apiKeyRequired"
            case authorizationScopes = "authorizationScopes"
            case authorizationType = "authorizationType"
            case authorizerId = "authorizerId"
            case modelSelectionExpression = "modelSelectionExpression"
            case operationName = "operationName"
            case requestModels = "requestModels"
            case requestParameters = "requestParameters"
            case routeId = "routeId"
            case routeKey = "routeKey"
            case routeResponseSelectionExpression = "routeResponseSelectionExpression"
            case target = "target"
        }
    }

    public struct GetRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetRoutesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Route]?
        public let nextToken: String?

        public init(items: [Route]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "StageName", location: .uri(locationName: "stageName"), required: true, type: .string)
        ]

        public let apiId: String
        public let stageName: String

        public init(apiId: String, stageName: String) {
            self.apiId = apiId
            self.stageName = stageName
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case stageName = "stageName"
        }
    }

    public struct GetStageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessLogSettings", location: .body(locationName: "accessLogSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ClientCertificateId", location: .body(locationName: "clientCertificateId"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultRouteSettings", location: .body(locationName: "defaultRouteSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedDate", location: .body(locationName: "lastUpdatedDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RouteSettings", location: .body(locationName: "routeSettings"), required: false, type: .map), 
            AWSShapeMember(label: "StageName", location: .body(locationName: "stageName"), required: false, type: .string), 
            AWSShapeMember(label: "StageVariables", location: .body(locationName: "stageVariables"), required: false, type: .map), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let accessLogSettings: AccessLogSettings?
        public let clientCertificateId: String?
        public let createdDate: TimeStamp?
        public let defaultRouteSettings: RouteSettings?
        public let deploymentId: String?
        public let description: String?
        public let lastUpdatedDate: TimeStamp?
        public let routeSettings: [String: RouteSettings]?
        public let stageName: String?
        public let stageVariables: [String: String]?
        public let tags: [String: String]?

        public init(accessLogSettings: AccessLogSettings? = nil, clientCertificateId: String? = nil, createdDate: TimeStamp? = nil, defaultRouteSettings: RouteSettings? = nil, deploymentId: String? = nil, description: String? = nil, lastUpdatedDate: TimeStamp? = nil, routeSettings: [String: RouteSettings]? = nil, stageName: String? = nil, stageVariables: [String: String]? = nil, tags: [String: String]? = nil) {
            self.accessLogSettings = accessLogSettings
            self.clientCertificateId = clientCertificateId
            self.createdDate = createdDate
            self.defaultRouteSettings = defaultRouteSettings
            self.deploymentId = deploymentId
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.routeSettings = routeSettings
            self.stageName = stageName
            self.stageVariables = stageVariables
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogSettings = "accessLogSettings"
            case clientCertificateId = "clientCertificateId"
            case createdDate = "createdDate"
            case defaultRouteSettings = "defaultRouteSettings"
            case deploymentId = "deploymentId"
            case description = "description"
            case lastUpdatedDate = "lastUpdatedDate"
            case routeSettings = "routeSettings"
            case stageName = "stageName"
            case stageVariables = "stageVariables"
            case tags = "tags"
        }
    }

    public struct GetStagesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]

        public let apiId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(apiId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.apiId = apiId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetStagesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", location: .body(locationName: "items"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        public let items: [Stage]?
        public let nextToken: String?

        public init(items: [Stage]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "items"
            case nextToken = "nextToken"
        }
    }

    public struct GetTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string)
        ]

        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
        }
    }

    public struct GetTagsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct Integration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionType", location: .body(locationName: "connectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .body(locationName: "integrationId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationMethod", location: .body(locationName: "integrationMethod"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseSelectionExpression", location: .body(locationName: "integrationResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationType", location: .body(locationName: "integrationType"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationUri", location: .body(locationName: "integrationUri"), required: false, type: .string), 
            AWSShapeMember(label: "PassthroughBehavior", location: .body(locationName: "passthroughBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RequestTemplates", location: .body(locationName: "requestTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "TimeoutInMillis", location: .body(locationName: "timeoutInMillis"), required: false, type: .integer)
        ]

        /// The connection ID.
        public let connectionId: String?
        /// The type of the network connection to the integration endpoint. Currently the only
        ///  valid value is INTERNET, for connections through the public routable
        ///  internet.
        public let connectionType: ConnectionType?
        /// Specifies how to handle response payload content type conversions. Supported
        ///  values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
        ///  following behaviors:
        ///  CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
        ///  string to the corresponding binary blob.
        ///  CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
        ///  Base64-encoded string.If this property is not defined, the response payload will be passed through from
        ///  the integration response to the route response or method response without
        ///  modification.
        public let contentHandlingStrategy: ContentHandlingStrategy?
        /// Specifies the credentials required for the integration, if any. For AWS
        ///  integrations, three options are available. To specify an IAM Role for API Gateway to
        ///  assume, use the role's Amazon Resource Name (ARN). To require that the caller's
        ///  identity be passed through from the request, specify the string
        ///  arn:aws:iam::*:user/*. To use resource-based permissions on supported
        ///  AWS services, specify null.
        public let credentialsArn: String?
        /// Represents the description of an integration.
        public let description: String?
        /// Represents the identifier of an integration.
        public let integrationId: String?
        /// Specifies the integration's HTTP method type.
        public let integrationMethod: String?
        /// The integration response selection expression for the integration. See Integration Response Selection Expressions.
        public let integrationResponseSelectionExpression: String?
        /// The integration type of an integration. One of the following:
        ///  AWS: for integrating the route or method request with an AWS service
        ///  action, including the Lambda function-invoking action. With the Lambda
        ///  function-invoking action, this is referred to as the Lambda custom integration. With
        ///  any other AWS service action, this is known as AWS integration.
        ///  AWS_PROXY: for integrating the route or method request with the Lambda
        ///  function-invoking action with the client request passed through as-is. This
        ///  integration is also referred to as Lambda proxy integration.
        ///  HTTP: for integrating the route or method request with an HTTP
        ///  endpoint. This
        ///  integration is also referred to as the HTTP custom integration.
        ///  HTTP_PROXY: for integrating route or method request with an HTTP
        ///  endpoint, with the client
        ///  request passed through as-is. This is also referred to as HTTP proxy
        ///  integration.
        ///  MOCK: for integrating the route or method request with API Gateway as a
        ///  "loopback" endpoint without invoking any backend.
        public let integrationType: IntegrationType?
        /// For a Lambda proxy integration, this is the URI of the Lambda function.
        public let integrationUri: String?
        /// Specifies the pass-through behavior for incoming requests based on the
        ///  Content-Type header in the request, and the available mapping
        ///  templates specified as the requestTemplates property on the
        ///  Integration resource. There are three valid values:
        ///  WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and
        ///  NEVER.
        ///  WHEN_NO_MATCH passes the request body for unmapped content types through
        ///  to the integration backend without transformation.
        ///  NEVER rejects unmapped content types with an HTTP 415 Unsupported
        ///  Media Type response.
        ///  WHEN_NO_TEMPLATES allows pass-through when the integration has no
        ///  content types mapped to templates. However, if there is at least one content type
        ///  defined, unmapped content types will be rejected with the same HTTP 415
        ///  Unsupported Media Type response.
        public let passthroughBehavior: PassthroughBehavior?
        /// A key-value map specifying request parameters that are passed from the method
        ///  request to the backend. The key is an integration request parameter name and the
        ///  associated value is a method request parameter value or static value that must be
        ///  enclosed within single quotes and pre-encoded as required by the backend. The method
        ///  request parameter value must match the pattern of
        ///  method.request.{location}.{name}
        ///  , where 
        ///  {location}
        ///   is querystring, path, or header; and 
        ///  {name}
        ///   must be a valid and unique method request parameter name.
        public let requestParameters: [String: String]?
        /// Represents a map of Velocity templates that are applied on the request payload
        ///  based on the value of the Content-Type header sent by the client. The content type
        ///  value is the key in this map, and the template (as a String) is the value.
        public let requestTemplates: [String: String]?
        /// The template selection expression for the integration.
        public let templateSelectionExpression: String?
        /// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000
        ///  milliseconds or 29 seconds.
        public let timeoutInMillis: Int?

        public init(connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandlingStrategy: ContentHandlingStrategy? = nil, credentialsArn: String? = nil, description: String? = nil, integrationId: String? = nil, integrationMethod: String? = nil, integrationResponseSelectionExpression: String? = nil, integrationType: IntegrationType? = nil, integrationUri: String? = nil, passthroughBehavior: PassthroughBehavior? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil, timeoutInMillis: Int? = nil) {
            self.connectionId = connectionId
            self.connectionType = connectionType
            self.contentHandlingStrategy = contentHandlingStrategy
            self.credentialsArn = credentialsArn
            self.description = description
            self.integrationId = integrationId
            self.integrationMethod = integrationMethod
            self.integrationResponseSelectionExpression = integrationResponseSelectionExpression
            self.integrationType = integrationType
            self.integrationUri = integrationUri
            self.passthroughBehavior = passthroughBehavior
            self.requestParameters = requestParameters
            self.requestTemplates = requestTemplates
            self.templateSelectionExpression = templateSelectionExpression
            self.timeoutInMillis = timeoutInMillis
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case connectionType = "connectionType"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case integrationId = "integrationId"
            case integrationMethod = "integrationMethod"
            case integrationResponseSelectionExpression = "integrationResponseSelectionExpression"
            case integrationType = "integrationType"
            case integrationUri = "integrationUri"
            case passthroughBehavior = "passthroughBehavior"
            case requestParameters = "requestParameters"
            case requestTemplates = "requestTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
            case timeoutInMillis = "timeoutInMillis"
        }
    }

    public struct IntegrationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationResponseId", location: .body(locationName: "integrationResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseKey", location: .body(locationName: "integrationResponseKey"), required: true, type: .string), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseTemplates", location: .body(locationName: "responseTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string)
        ]

        /// Specifies how to handle response payload content type conversions. Supported
        ///  values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
        ///  following behaviors:
        ///  CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
        ///  string to the corresponding binary blob.
        ///  CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
        ///  Base64-encoded string.If this property is not defined, the response payload will be passed through from
        ///  the integration response to the route response or method response without
        ///  modification.
        public let contentHandlingStrategy: ContentHandlingStrategy?
        /// The integration response ID.
        public let integrationResponseId: String?
        /// The integration response key.
        public let integrationResponseKey: String
        /// A key-value map specifying response parameters that are passed to the method
        ///  response from the backend. The key is a method response header parameter name and the
        ///  mapped value is an integration response header value, a static value enclosed within
        ///  a pair of single quotes, or a JSON expression from the integration response body. The
        ///  mapping key must match the pattern of method.response.header.{name}, where name is a
        ///  valid and unique header name. The mapped non-static value must match the pattern of
        ///  integration.response.header.{name} or integration.response.body.{JSON-expression},
        ///  where name is a valid and unique response header name and JSON-expression is a valid
        ///  JSON expression without the $ prefix.
        public let responseParameters: [String: String]?
        /// The collection of response templates for the integration response as a
        ///  string-to-string map of key-value pairs. Response templates are represented as a
        ///  key/value map, with a content-type as the key and a template as the value.
        public let responseTemplates: [String: String]?
        /// The template selection expressions for the integration response.
        public let templateSelectionExpression: String?

        public init(contentHandlingStrategy: ContentHandlingStrategy? = nil, integrationResponseId: String? = nil, integrationResponseKey: String, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil) {
            self.contentHandlingStrategy = contentHandlingStrategy
            self.integrationResponseId = integrationResponseId
            self.integrationResponseKey = integrationResponseKey
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.templateSelectionExpression = templateSelectionExpression
        }

        private enum CodingKeys: String, CodingKey {
            case contentHandlingStrategy = "contentHandlingStrategy"
            case integrationResponseId = "integrationResponseId"
            case integrationResponseKey = "integrationResponseKey"
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
        }
    }

    public enum IntegrationType: String, CustomStringConvertible, Codable {
        case aws = "AWS"
        case http = "HTTP"
        case mock = "MOCK"
        case httpProxy = "HTTP_PROXY"
        case awsProxy = "AWS_PROXY"
        public var description: String { return self.rawValue }
    }

    public enum LoggingLevel: String, CustomStringConvertible, Codable {
        case error = "ERROR"
        case info = "INFO"
        case `false` = "false"
        public var description: String { return self.rawValue }
    }

    public struct Model: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentType", location: .body(locationName: "contentType"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ModelId", location: .body(locationName: "modelId"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Schema", location: .body(locationName: "schema"), required: false, type: .string)
        ]

        /// The content-type for the model, for example, "application/json".
        public let contentType: String?
        /// The description of the model.
        public let description: String?
        /// The model identifier.
        public let modelId: String?
        /// The name of the model. Must be alphanumeric.
        public let name: String
        /// The schema for the model. For application/json models, this should be JSON schema
        ///  draft 4 model.
        public let schema: String?

        public init(contentType: String? = nil, description: String? = nil, modelId: String? = nil, name: String, schema: String? = nil) {
            self.contentType = contentType
            self.description = description
            self.modelId = modelId
            self.name = name
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "contentType"
            case description = "description"
            case modelId = "modelId"
            case name = "name"
            case schema = "schema"
        }
    }

    public struct ParameterConstraints: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Required", location: .body(locationName: "required"), required: false, type: .boolean)
        ]

        /// Whether or not the parameter is required.
        public let required: Bool?

        public init(required: Bool? = nil) {
            self.required = required
        }

        private enum CodingKeys: String, CodingKey {
            case required = "required"
        }
    }

    public enum PassthroughBehavior: String, CustomStringConvertible, Codable {
        case whenNoMatch = "WHEN_NO_MATCH"
        case never = "NEVER"
        case whenNoTemplates = "WHEN_NO_TEMPLATES"
        public var description: String { return self.rawValue }
    }

    public enum ProtocolType: String, CustomStringConvertible, Codable {
        case websocket = "WEBSOCKET"
        public var description: String { return self.rawValue }
    }

    public struct Route: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiKeyRequired", location: .body(locationName: "apiKeyRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthorizationScopes", location: .body(locationName: "authorizationScopes"), required: false, type: .list), 
            AWSShapeMember(label: "AuthorizationType", location: .body(locationName: "authorizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "OperationName", location: .body(locationName: "operationName"), required: false, type: .string), 
            AWSShapeMember(label: "RequestModels", location: .body(locationName: "requestModels"), required: false, type: .map), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .body(locationName: "routeId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseSelectionExpression", location: .body(locationName: "routeResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string)
        ]

        /// Specifies whether an API key is required for this route.
        public let apiKeyRequired: Bool?
        /// A list of authorization scopes configured on a route. The scopes are used with a
        ///  COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization
        ///  works by matching the route scopes against the scopes parsed from the access token in
        ///  the incoming request. The method invocation is authorized if any route scope matches
        ///  a claimed scope in the access token. Otherwise, the invocation is not authorized.
        ///  When the route scope is configured, the client must provide an access token instead
        ///  of an identity token for authorization purposes.
        public let authorizationScopes: [String]?
        /// The authorization type for the route. Valid values are NONE for open
        ///  access, AWS_IAM for using AWS IAM permissions, and CUSTOM
        ///  for using a Lambda
        ///  authorizer
        public let authorizationType: AuthorizationType?
        /// The identifier of the Authorizer resource to be associated with this
        ///  route, if the authorizationType is CUSTOM
        ///  . The authorizer identifier is generated by API Gateway
        ///  when you created the authorizer.
        public let authorizerId: String?
        /// The model selection expression for the route.
        public let modelSelectionExpression: String?
        /// The operation name for the route.
        public let operationName: String?
        /// The request models for the route.
        public let requestModels: [String: String]?
        /// The request parameters for the route.
        public let requestParameters: [String: ParameterConstraints]?
        /// The route ID.
        public let routeId: String?
        /// The route key for the route.
        public let routeKey: String
        /// The route response selection expression for the route.
        public let routeResponseSelectionExpression: String?
        /// The target for the route.
        public let target: String?

        public init(apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: AuthorizationType? = nil, authorizerId: String? = nil, modelSelectionExpression: String? = nil, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: ParameterConstraints]? = nil, routeId: String? = nil, routeKey: String, routeResponseSelectionExpression: String? = nil, target: String? = nil) {
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.authorizationType = authorizationType
            self.authorizerId = authorizerId
            self.modelSelectionExpression = modelSelectionExpression
            self.operationName = operationName
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.routeId = routeId
            self.routeKey = routeKey
            self.routeResponseSelectionExpression = routeResponseSelectionExpression
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case apiKeyRequired = "apiKeyRequired"
            case authorizationScopes = "authorizationScopes"
            case authorizationType = "authorizationType"
            case authorizerId = "authorizerId"
            case modelSelectionExpression = "modelSelectionExpression"
            case operationName = "operationName"
            case requestModels = "requestModels"
            case requestParameters = "requestParameters"
            case routeId = "routeId"
            case routeKey = "routeKey"
            case routeResponseSelectionExpression = "routeResponseSelectionExpression"
            case target = "target"
        }
    }

    public struct RouteResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseModels", location: .body(locationName: "responseModels"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteResponseId", location: .body(locationName: "routeResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseKey", location: .body(locationName: "routeResponseKey"), required: true, type: .string)
        ]

        /// Represents the model selection expression of a route response.
        public let modelSelectionExpression: String?
        /// Represents the response models of a route response.
        public let responseModels: [String: String]?
        /// Represents the response parameters of a route response.
        public let responseParameters: [String: ParameterConstraints]?
        /// Represents the identifier of a route response.
        public let routeResponseId: String?
        /// Represents the route response key of a route response.
        public let routeResponseKey: String

        public init(modelSelectionExpression: String? = nil, responseModels: [String: String]? = nil, responseParameters: [String: ParameterConstraints]? = nil, routeResponseId: String? = nil, routeResponseKey: String) {
            self.modelSelectionExpression = modelSelectionExpression
            self.responseModels = responseModels
            self.responseParameters = responseParameters
            self.routeResponseId = routeResponseId
            self.routeResponseKey = routeResponseKey
        }

        private enum CodingKeys: String, CodingKey {
            case modelSelectionExpression = "modelSelectionExpression"
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
            case routeResponseId = "routeResponseId"
            case routeResponseKey = "routeResponseKey"
        }
    }

    public struct RouteSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataTraceEnabled", location: .body(locationName: "dataTraceEnabled"), required: false, type: .boolean), 
            AWSShapeMember(label: "DetailedMetricsEnabled", location: .body(locationName: "detailedMetricsEnabled"), required: false, type: .boolean), 
            AWSShapeMember(label: "LoggingLevel", location: .body(locationName: "loggingLevel"), required: false, type: .enum), 
            AWSShapeMember(label: "ThrottlingBurstLimit", location: .body(locationName: "throttlingBurstLimit"), required: false, type: .integer), 
            AWSShapeMember(label: "ThrottlingRateLimit", location: .body(locationName: "throttlingRateLimit"), required: false, type: .double)
        ]

        /// Specifies whether (true) or not (false) data trace
        ///  logging is enabled for this route. This property affects the log entries pushed to
        ///  Amazon CloudWatch Logs.
        public let dataTraceEnabled: Bool?
        /// Specifies whether detailed metrics are enabled.
        public let detailedMetricsEnabled: Bool?
        /// Specifies the logging level for this route: DEBUG, INFO,
        ///  or WARN. This property affects the log entries pushed to Amazon
        ///  CloudWatch Logs.
        public let loggingLevel: LoggingLevel?
        /// Specifies the throttling burst limit.
        public let throttlingBurstLimit: Int?
        /// Specifies the throttling rate limit.
        public let throttlingRateLimit: Double?

        public init(dataTraceEnabled: Bool? = nil, detailedMetricsEnabled: Bool? = nil, loggingLevel: LoggingLevel? = nil, throttlingBurstLimit: Int? = nil, throttlingRateLimit: Double? = nil) {
            self.dataTraceEnabled = dataTraceEnabled
            self.detailedMetricsEnabled = detailedMetricsEnabled
            self.loggingLevel = loggingLevel
            self.throttlingBurstLimit = throttlingBurstLimit
            self.throttlingRateLimit = throttlingRateLimit
        }

        private enum CodingKeys: String, CodingKey {
            case dataTraceEnabled = "dataTraceEnabled"
            case detailedMetricsEnabled = "detailedMetricsEnabled"
            case loggingLevel = "loggingLevel"
            case throttlingBurstLimit = "throttlingBurstLimit"
            case throttlingRateLimit = "throttlingRateLimit"
        }
    }

    public enum SecurityPolicy: String, CustomStringConvertible, Codable {
        case tls10 = "TLS_1_0"
        case tls12 = "TLS_1_2"
        public var description: String { return self.rawValue }
    }

    public struct Stage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessLogSettings", location: .body(locationName: "accessLogSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ClientCertificateId", location: .body(locationName: "clientCertificateId"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultRouteSettings", location: .body(locationName: "defaultRouteSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedDate", location: .body(locationName: "lastUpdatedDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RouteSettings", location: .body(locationName: "routeSettings"), required: false, type: .map), 
            AWSShapeMember(label: "StageName", location: .body(locationName: "stageName"), required: true, type: .string), 
            AWSShapeMember(label: "StageVariables", location: .body(locationName: "stageVariables"), required: false, type: .map), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        /// Settings for logging access in this stage.
        public let accessLogSettings: AccessLogSettings?
        /// The identifier of a client certificate for a Stage.
        public let clientCertificateId: String?
        /// The timestamp when the stage was created.
        public let createdDate: TimeStamp?
        /// Default route settings for the stage.
        public let defaultRouteSettings: RouteSettings?
        /// The identifier of the Deployment that the Stage is
        ///  associated with.
        public let deploymentId: String?
        /// The description of the stage.
        public let description: String?
        /// The timestamp when the stage was last updated.
        public let lastUpdatedDate: TimeStamp?
        /// Route settings for the stage.
        public let routeSettings: [String: RouteSettings]?
        /// The name of the stage.
        public let stageName: String
        /// A map that defines the stage variables for a stage resource. Variable names can
        ///  have alphanumeric and underscore characters, and the values must match
        ///  [A-Za-z0-9-._~:/?#&=,]+.
        public let stageVariables: [String: String]?
        /// Tags for the Stage.
        public let tags: [String: String]?

        public init(accessLogSettings: AccessLogSettings? = nil, clientCertificateId: String? = nil, createdDate: TimeStamp? = nil, defaultRouteSettings: RouteSettings? = nil, deploymentId: String? = nil, description: String? = nil, lastUpdatedDate: TimeStamp? = nil, routeSettings: [String: RouteSettings]? = nil, stageName: String, stageVariables: [String: String]? = nil, tags: [String: String]? = nil) {
            self.accessLogSettings = accessLogSettings
            self.clientCertificateId = clientCertificateId
            self.createdDate = createdDate
            self.defaultRouteSettings = defaultRouteSettings
            self.deploymentId = deploymentId
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.routeSettings = routeSettings
            self.stageName = stageName
            self.stageVariables = stageVariables
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogSettings = "accessLogSettings"
            case clientCertificateId = "clientCertificateId"
            case createdDate = "createdDate"
            case defaultRouteSettings = "defaultRouteSettings"
            case deploymentId = "deploymentId"
            case description = "description"
            case lastUpdatedDate = "lastUpdatedDate"
            case routeSettings = "routeSettings"
            case stageName = "stageName"
            case stageVariables = "stageVariables"
            case tags = "tags"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let resourceArn: String
        public let tags: [String: String]?

        public init(resourceArn: String, tags: [String: String]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", location: .uri(locationName: "resource-arn"), required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", location: .querystring(locationName: "tagKeys"), required: true, type: .list)
        ]

        public let resourceArn: String
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resource-arn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UpdateApiMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiMappingId", location: .uri(locationName: "apiMappingId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiMappingKey", location: .body(locationName: "apiMappingKey"), required: false, type: .string), 
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string), 
            AWSShapeMember(label: "Stage", location: .body(locationName: "stage"), required: false, type: .string)
        ]

        public let apiId: String
        public let apiMappingId: String
        public let apiMappingKey: String?
        public let domainName: String
        public let stage: String?

        public init(apiId: String, apiMappingId: String, apiMappingKey: String? = nil, domainName: String, stage: String? = nil) {
            self.apiId = apiId
            self.apiMappingId = apiMappingId
            self.apiMappingKey = apiMappingKey
            self.domainName = domainName
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiMappingId = "apiMappingId"
            case apiMappingKey = "apiMappingKey"
            case domainName = "domainName"
            case stage = "stage"
        }
    }

    public struct UpdateApiMappingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingId", location: .body(locationName: "apiMappingId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiMappingKey", location: .body(locationName: "apiMappingKey"), required: false, type: .string), 
            AWSShapeMember(label: "Stage", location: .body(locationName: "stage"), required: false, type: .string)
        ]

        public let apiId: String?
        public let apiMappingId: String?
        public let apiMappingKey: String?
        public let stage: String?

        public init(apiId: String? = nil, apiMappingId: String? = nil, apiMappingKey: String? = nil, stage: String? = nil) {
            self.apiId = apiId
            self.apiMappingId = apiMappingId
            self.apiMappingKey = apiMappingKey
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiMappingId = "apiMappingId"
            case apiMappingKey = "apiMappingKey"
            case stage = "stage"
        }
    }

    public struct UpdateApiRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string)
        ]

        public let apiId: String
        public let apiKeySelectionExpression: String?
        public let description: String?
        public let disableSchemaValidation: Bool?
        public let name: String?
        public let routeSelectionExpression: String?
        public let version: String?

        public init(apiId: String, apiKeySelectionExpression: String? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, name: String? = nil, routeSelectionExpression: String? = nil, version: String? = nil) {
            self.apiId = apiId
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.name = name
            self.routeSelectionExpression = routeSelectionExpression
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case name = "name"
            case routeSelectionExpression = "routeSelectionExpression"
            case version = "version"
        }
    }

    public struct UpdateApiResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiEndpoint", location: .body(locationName: "apiEndpoint"), required: false, type: .string), 
            AWSShapeMember(label: "ApiId", location: .body(locationName: "apiId"), required: false, type: .string), 
            AWSShapeMember(label: "ApiKeySelectionExpression", location: .body(locationName: "apiKeySelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DisableSchemaValidation", location: .body(locationName: "disableSchemaValidation"), required: false, type: .boolean), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ProtocolType", location: .body(locationName: "protocolType"), required: false, type: .enum), 
            AWSShapeMember(label: "RouteSelectionExpression", location: .body(locationName: "routeSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string), 
            AWSShapeMember(label: "Warnings", location: .body(locationName: "warnings"), required: false, type: .list)
        ]

        public let apiEndpoint: String?
        public let apiId: String?
        public let apiKeySelectionExpression: String?
        public let createdDate: TimeStamp?
        public let description: String?
        public let disableSchemaValidation: Bool?
        public let name: String?
        public let protocolType: ProtocolType?
        public let routeSelectionExpression: String?
        public let tags: [String: String]?
        public let version: String?
        public let warnings: [String]?

        public init(apiEndpoint: String? = nil, apiId: String? = nil, apiKeySelectionExpression: String? = nil, createdDate: TimeStamp? = nil, description: String? = nil, disableSchemaValidation: Bool? = nil, name: String? = nil, protocolType: ProtocolType? = nil, routeSelectionExpression: String? = nil, tags: [String: String]? = nil, version: String? = nil, warnings: [String]? = nil) {
            self.apiEndpoint = apiEndpoint
            self.apiId = apiId
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.createdDate = createdDate
            self.description = description
            self.disableSchemaValidation = disableSchemaValidation
            self.name = name
            self.protocolType = protocolType
            self.routeSelectionExpression = routeSelectionExpression
            self.tags = tags
            self.version = version
            self.warnings = warnings
        }

        private enum CodingKeys: String, CodingKey {
            case apiEndpoint = "apiEndpoint"
            case apiId = "apiId"
            case apiKeySelectionExpression = "apiKeySelectionExpression"
            case createdDate = "createdDate"
            case description = "description"
            case disableSchemaValidation = "disableSchemaValidation"
            case name = "name"
            case protocolType = "protocolType"
            case routeSelectionExpression = "routeSelectionExpression"
            case tags = "tags"
            case version = "version"
            case warnings = "warnings"
        }
    }

    public struct UpdateAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthorizerCredentialsArn", location: .body(locationName: "authorizerCredentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .uri(locationName: "authorizerId"), required: true, type: .string), 
            AWSShapeMember(label: "AuthorizerResultTtlInSeconds", location: .body(locationName: "authorizerResultTtlInSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthorizerType", location: .body(locationName: "authorizerType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerUri", location: .body(locationName: "authorizerUri"), required: false, type: .string), 
            AWSShapeMember(label: "IdentitySource", location: .body(locationName: "identitySource"), required: false, type: .list), 
            AWSShapeMember(label: "IdentityValidationExpression", location: .body(locationName: "identityValidationExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ProviderArns", location: .body(locationName: "providerArns"), required: false, type: .list)
        ]

        public let apiId: String
        public let authorizerCredentialsArn: String?
        public let authorizerId: String
        public let authorizerResultTtlInSeconds: Int?
        public let authorizerType: AuthorizerType?
        public let authorizerUri: String?
        public let identitySource: [String]?
        public let identityValidationExpression: String?
        public let name: String?
        public let providerArns: [String]?

        public init(apiId: String, authorizerCredentialsArn: String? = nil, authorizerId: String, authorizerResultTtlInSeconds: Int? = nil, authorizerType: AuthorizerType? = nil, authorizerUri: String? = nil, identitySource: [String]? = nil, identityValidationExpression: String? = nil, name: String? = nil, providerArns: [String]? = nil) {
            self.apiId = apiId
            self.authorizerCredentialsArn = authorizerCredentialsArn
            self.authorizerId = authorizerId
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerType = authorizerType
            self.authorizerUri = authorizerUri
            self.identitySource = identitySource
            self.identityValidationExpression = identityValidationExpression
            self.name = name
            self.providerArns = providerArns
        }

        public func validate(name: String) throws {
            try validate(self.authorizerResultTtlInSeconds, name:"authorizerResultTtlInSeconds", parent: name, max: 3600)
            try validate(self.authorizerResultTtlInSeconds, name:"authorizerResultTtlInSeconds", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case authorizerCredentialsArn = "authorizerCredentialsArn"
            case authorizerId = "authorizerId"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerType = "authorizerType"
            case authorizerUri = "authorizerUri"
            case identitySource = "identitySource"
            case identityValidationExpression = "identityValidationExpression"
            case name = "name"
            case providerArns = "providerArns"
        }
    }

    public struct UpdateAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthorizerCredentialsArn", location: .body(locationName: "authorizerCredentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "AuthorizerResultTtlInSeconds", location: .body(locationName: "authorizerResultTtlInSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "AuthorizerType", location: .body(locationName: "authorizerType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerUri", location: .body(locationName: "authorizerUri"), required: false, type: .string), 
            AWSShapeMember(label: "IdentitySource", location: .body(locationName: "identitySource"), required: false, type: .list), 
            AWSShapeMember(label: "IdentityValidationExpression", location: .body(locationName: "identityValidationExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ProviderArns", location: .body(locationName: "providerArns"), required: false, type: .list)
        ]

        public let authorizerCredentialsArn: String?
        public let authorizerId: String?
        public let authorizerResultTtlInSeconds: Int?
        public let authorizerType: AuthorizerType?
        public let authorizerUri: String?
        public let identitySource: [String]?
        public let identityValidationExpression: String?
        public let name: String?
        public let providerArns: [String]?

        public init(authorizerCredentialsArn: String? = nil, authorizerId: String? = nil, authorizerResultTtlInSeconds: Int? = nil, authorizerType: AuthorizerType? = nil, authorizerUri: String? = nil, identitySource: [String]? = nil, identityValidationExpression: String? = nil, name: String? = nil, providerArns: [String]? = nil) {
            self.authorizerCredentialsArn = authorizerCredentialsArn
            self.authorizerId = authorizerId
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerType = authorizerType
            self.authorizerUri = authorizerUri
            self.identitySource = identitySource
            self.identityValidationExpression = identityValidationExpression
            self.name = name
            self.providerArns = providerArns
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerCredentialsArn = "authorizerCredentialsArn"
            case authorizerId = "authorizerId"
            case authorizerResultTtlInSeconds = "authorizerResultTtlInSeconds"
            case authorizerType = "authorizerType"
            case authorizerUri = "authorizerUri"
            case identitySource = "identitySource"
            case identityValidationExpression = "identityValidationExpression"
            case name = "name"
            case providerArns = "providerArns"
        }
    }

    public struct UpdateDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "DeploymentId", location: .uri(locationName: "deploymentId"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]

        public let apiId: String
        public let deploymentId: String
        public let description: String?

        public init(apiId: String, deploymentId: String, description: String? = nil) {
            self.apiId = apiId
            self.deploymentId = deploymentId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case deploymentId = "deploymentId"
            case description = "description"
        }
    }

    public struct UpdateDeploymentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "DeploymentStatus", location: .body(locationName: "deploymentStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "DeploymentStatusMessage", location: .body(locationName: "deploymentStatusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]

        public let createdDate: TimeStamp?
        public let deploymentId: String?
        public let deploymentStatus: DeploymentStatus?
        public let deploymentStatusMessage: String?
        public let description: String?

        public init(createdDate: TimeStamp? = nil, deploymentId: String? = nil, deploymentStatus: DeploymentStatus? = nil, deploymentStatusMessage: String? = nil, description: String? = nil) {
            self.createdDate = createdDate
            self.deploymentId = deploymentId
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "createdDate"
            case deploymentId = "deploymentId"
            case deploymentStatus = "deploymentStatus"
            case deploymentStatusMessage = "deploymentStatusMessage"
            case description = "description"
        }
    }

    public struct UpdateDomainNameRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "domainName"), required: true, type: .string), 
            AWSShapeMember(label: "DomainNameConfigurations", location: .body(locationName: "domainNameConfigurations"), required: false, type: .list)
        ]

        public let domainName: String
        public let domainNameConfigurations: [DomainNameConfiguration]?

        public init(domainName: String, domainNameConfigurations: [DomainNameConfiguration]? = nil) {
            self.domainName = domainName
            self.domainNameConfigurations = domainNameConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case domainNameConfigurations = "domainNameConfigurations"
        }
    }

    public struct UpdateDomainNameResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiMappingSelectionExpression", location: .body(locationName: "apiMappingSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "DomainName", location: .body(locationName: "domainName"), required: false, type: .string), 
            AWSShapeMember(label: "DomainNameConfigurations", location: .body(locationName: "domainNameConfigurations"), required: false, type: .list), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let apiMappingSelectionExpression: String?
        public let domainName: String?
        public let domainNameConfigurations: [DomainNameConfiguration]?
        public let tags: [String: String]?

        public init(apiMappingSelectionExpression: String? = nil, domainName: String? = nil, domainNameConfigurations: [DomainNameConfiguration]? = nil, tags: [String: String]? = nil) {
            self.apiMappingSelectionExpression = apiMappingSelectionExpression
            self.domainName = domainName
            self.domainNameConfigurations = domainNameConfigurations
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case apiMappingSelectionExpression = "apiMappingSelectionExpression"
            case domainName = "domainName"
            case domainNameConfigurations = "domainNameConfigurations"
            case tags = "tags"
        }
    }

    public struct UpdateIntegrationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionType", location: .body(locationName: "connectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationMethod", location: .body(locationName: "integrationMethod"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationType", location: .body(locationName: "integrationType"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationUri", location: .body(locationName: "integrationUri"), required: false, type: .string), 
            AWSShapeMember(label: "PassthroughBehavior", location: .body(locationName: "passthroughBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RequestTemplates", location: .body(locationName: "requestTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "TimeoutInMillis", location: .body(locationName: "timeoutInMillis"), required: false, type: .integer)
        ]

        public let apiId: String
        public let connectionId: String?
        public let connectionType: ConnectionType?
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let credentialsArn: String?
        public let description: String?
        public let integrationId: String
        public let integrationMethod: String?
        public let integrationType: IntegrationType?
        public let integrationUri: String?
        public let passthroughBehavior: PassthroughBehavior?
        public let requestParameters: [String: String]?
        public let requestTemplates: [String: String]?
        public let templateSelectionExpression: String?
        public let timeoutInMillis: Int?

        public init(apiId: String, connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandlingStrategy: ContentHandlingStrategy? = nil, credentialsArn: String? = nil, description: String? = nil, integrationId: String, integrationMethod: String? = nil, integrationType: IntegrationType? = nil, integrationUri: String? = nil, passthroughBehavior: PassthroughBehavior? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil, timeoutInMillis: Int? = nil) {
            self.apiId = apiId
            self.connectionId = connectionId
            self.connectionType = connectionType
            self.contentHandlingStrategy = contentHandlingStrategy
            self.credentialsArn = credentialsArn
            self.description = description
            self.integrationId = integrationId
            self.integrationMethod = integrationMethod
            self.integrationType = integrationType
            self.integrationUri = integrationUri
            self.passthroughBehavior = passthroughBehavior
            self.requestParameters = requestParameters
            self.requestTemplates = requestTemplates
            self.templateSelectionExpression = templateSelectionExpression
            self.timeoutInMillis = timeoutInMillis
        }

        public func validate(name: String) throws {
            try validate(self.timeoutInMillis, name:"timeoutInMillis", parent: name, max: 29000)
            try validate(self.timeoutInMillis, name:"timeoutInMillis", parent: name, min: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case connectionId = "connectionId"
            case connectionType = "connectionType"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case integrationId = "integrationId"
            case integrationMethod = "integrationMethod"
            case integrationType = "integrationType"
            case integrationUri = "integrationUri"
            case passthroughBehavior = "passthroughBehavior"
            case requestParameters = "requestParameters"
            case requestTemplates = "requestTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
            case timeoutInMillis = "timeoutInMillis"
        }
    }

    public struct UpdateIntegrationResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationId", location: .uri(locationName: "integrationId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationResponseId", location: .uri(locationName: "integrationResponseId"), required: true, type: .string), 
            AWSShapeMember(label: "IntegrationResponseKey", location: .body(locationName: "integrationResponseKey"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseTemplates", location: .body(locationName: "responseTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string)
        ]

        public let apiId: String
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let integrationId: String
        public let integrationResponseId: String
        public let integrationResponseKey: String?
        public let responseParameters: [String: String]?
        public let responseTemplates: [String: String]?
        public let templateSelectionExpression: String?

        public init(apiId: String, contentHandlingStrategy: ContentHandlingStrategy? = nil, integrationId: String, integrationResponseId: String, integrationResponseKey: String? = nil, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil) {
            self.apiId = apiId
            self.contentHandlingStrategy = contentHandlingStrategy
            self.integrationId = integrationId
            self.integrationResponseId = integrationResponseId
            self.integrationResponseKey = integrationResponseKey
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.templateSelectionExpression = templateSelectionExpression
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case integrationId = "integrationId"
            case integrationResponseId = "integrationResponseId"
            case integrationResponseKey = "integrationResponseKey"
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
        }
    }

    public struct UpdateIntegrationResponseResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationResponseId", location: .body(locationName: "integrationResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseKey", location: .body(locationName: "integrationResponseKey"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseTemplates", location: .body(locationName: "responseTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string)
        ]

        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let integrationResponseId: String?
        public let integrationResponseKey: String?
        public let responseParameters: [String: String]?
        public let responseTemplates: [String: String]?
        public let templateSelectionExpression: String?

        public init(contentHandlingStrategy: ContentHandlingStrategy? = nil, integrationResponseId: String? = nil, integrationResponseKey: String? = nil, responseParameters: [String: String]? = nil, responseTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil) {
            self.contentHandlingStrategy = contentHandlingStrategy
            self.integrationResponseId = integrationResponseId
            self.integrationResponseKey = integrationResponseKey
            self.responseParameters = responseParameters
            self.responseTemplates = responseTemplates
            self.templateSelectionExpression = templateSelectionExpression
        }

        private enum CodingKeys: String, CodingKey {
            case contentHandlingStrategy = "contentHandlingStrategy"
            case integrationResponseId = "integrationResponseId"
            case integrationResponseKey = "integrationResponseKey"
            case responseParameters = "responseParameters"
            case responseTemplates = "responseTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
        }
    }

    public struct UpdateIntegrationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionType", location: .body(locationName: "connectionType"), required: false, type: .enum), 
            AWSShapeMember(label: "ContentHandlingStrategy", location: .body(locationName: "contentHandlingStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "CredentialsArn", location: .body(locationName: "credentialsArn"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationId", location: .body(locationName: "integrationId"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationMethod", location: .body(locationName: "integrationMethod"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationResponseSelectionExpression", location: .body(locationName: "integrationResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "IntegrationType", location: .body(locationName: "integrationType"), required: false, type: .enum), 
            AWSShapeMember(label: "IntegrationUri", location: .body(locationName: "integrationUri"), required: false, type: .string), 
            AWSShapeMember(label: "PassthroughBehavior", location: .body(locationName: "passthroughBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RequestTemplates", location: .body(locationName: "requestTemplates"), required: false, type: .map), 
            AWSShapeMember(label: "TemplateSelectionExpression", location: .body(locationName: "templateSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "TimeoutInMillis", location: .body(locationName: "timeoutInMillis"), required: false, type: .integer)
        ]

        public let connectionId: String?
        public let connectionType: ConnectionType?
        public let contentHandlingStrategy: ContentHandlingStrategy?
        public let credentialsArn: String?
        public let description: String?
        public let integrationId: String?
        public let integrationMethod: String?
        public let integrationResponseSelectionExpression: String?
        public let integrationType: IntegrationType?
        public let integrationUri: String?
        public let passthroughBehavior: PassthroughBehavior?
        public let requestParameters: [String: String]?
        public let requestTemplates: [String: String]?
        public let templateSelectionExpression: String?
        public let timeoutInMillis: Int?

        public init(connectionId: String? = nil, connectionType: ConnectionType? = nil, contentHandlingStrategy: ContentHandlingStrategy? = nil, credentialsArn: String? = nil, description: String? = nil, integrationId: String? = nil, integrationMethod: String? = nil, integrationResponseSelectionExpression: String? = nil, integrationType: IntegrationType? = nil, integrationUri: String? = nil, passthroughBehavior: PassthroughBehavior? = nil, requestParameters: [String: String]? = nil, requestTemplates: [String: String]? = nil, templateSelectionExpression: String? = nil, timeoutInMillis: Int? = nil) {
            self.connectionId = connectionId
            self.connectionType = connectionType
            self.contentHandlingStrategy = contentHandlingStrategy
            self.credentialsArn = credentialsArn
            self.description = description
            self.integrationId = integrationId
            self.integrationMethod = integrationMethod
            self.integrationResponseSelectionExpression = integrationResponseSelectionExpression
            self.integrationType = integrationType
            self.integrationUri = integrationUri
            self.passthroughBehavior = passthroughBehavior
            self.requestParameters = requestParameters
            self.requestTemplates = requestTemplates
            self.templateSelectionExpression = templateSelectionExpression
            self.timeoutInMillis = timeoutInMillis
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case connectionType = "connectionType"
            case contentHandlingStrategy = "contentHandlingStrategy"
            case credentialsArn = "credentialsArn"
            case description = "description"
            case integrationId = "integrationId"
            case integrationMethod = "integrationMethod"
            case integrationResponseSelectionExpression = "integrationResponseSelectionExpression"
            case integrationType = "integrationType"
            case integrationUri = "integrationUri"
            case passthroughBehavior = "passthroughBehavior"
            case requestParameters = "requestParameters"
            case requestTemplates = "requestTemplates"
            case templateSelectionExpression = "templateSelectionExpression"
            case timeoutInMillis = "timeoutInMillis"
        }
    }

    public struct UpdateModelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ContentType", location: .body(locationName: "contentType"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ModelId", location: .uri(locationName: "modelId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Schema", location: .body(locationName: "schema"), required: false, type: .string)
        ]

        public let apiId: String
        public let contentType: String?
        public let description: String?
        public let modelId: String
        public let name: String?
        public let schema: String?

        public init(apiId: String, contentType: String? = nil, description: String? = nil, modelId: String, name: String? = nil, schema: String? = nil) {
            self.apiId = apiId
            self.contentType = contentType
            self.description = description
            self.modelId = modelId
            self.name = name
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case contentType = "contentType"
            case description = "description"
            case modelId = "modelId"
            case name = "name"
            case schema = "schema"
        }
    }

    public struct UpdateModelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentType", location: .body(locationName: "contentType"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ModelId", location: .body(locationName: "modelId"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Schema", location: .body(locationName: "schema"), required: false, type: .string)
        ]

        public let contentType: String?
        public let description: String?
        public let modelId: String?
        public let name: String?
        public let schema: String?

        public init(contentType: String? = nil, description: String? = nil, modelId: String? = nil, name: String? = nil, schema: String? = nil) {
            self.contentType = contentType
            self.description = description
            self.modelId = modelId
            self.name = name
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "contentType"
            case description = "description"
            case modelId = "modelId"
            case name = "name"
            case schema = "schema"
        }
    }

    public struct UpdateRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ApiKeyRequired", location: .body(locationName: "apiKeyRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthorizationScopes", location: .body(locationName: "authorizationScopes"), required: false, type: .list), 
            AWSShapeMember(label: "AuthorizationType", location: .body(locationName: "authorizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "OperationName", location: .body(locationName: "operationName"), required: false, type: .string), 
            AWSShapeMember(label: "RequestModels", location: .body(locationName: "requestModels"), required: false, type: .map), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseSelectionExpression", location: .body(locationName: "routeResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string)
        ]

        public let apiId: String
        public let apiKeyRequired: Bool?
        public let authorizationScopes: [String]?
        public let authorizationType: AuthorizationType?
        public let authorizerId: String?
        public let modelSelectionExpression: String?
        public let operationName: String?
        public let requestModels: [String: String]?
        public let requestParameters: [String: ParameterConstraints]?
        public let routeId: String
        public let routeKey: String?
        public let routeResponseSelectionExpression: String?
        public let target: String?

        public init(apiId: String, apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: AuthorizationType? = nil, authorizerId: String? = nil, modelSelectionExpression: String? = nil, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: ParameterConstraints]? = nil, routeId: String, routeKey: String? = nil, routeResponseSelectionExpression: String? = nil, target: String? = nil) {
            self.apiId = apiId
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.authorizationType = authorizationType
            self.authorizerId = authorizerId
            self.modelSelectionExpression = modelSelectionExpression
            self.operationName = operationName
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.routeId = routeId
            self.routeKey = routeKey
            self.routeResponseSelectionExpression = routeResponseSelectionExpression
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case apiKeyRequired = "apiKeyRequired"
            case authorizationScopes = "authorizationScopes"
            case authorizationType = "authorizationType"
            case authorizerId = "authorizerId"
            case modelSelectionExpression = "modelSelectionExpression"
            case operationName = "operationName"
            case requestModels = "requestModels"
            case requestParameters = "requestParameters"
            case routeId = "routeId"
            case routeKey = "routeKey"
            case routeResponseSelectionExpression = "routeResponseSelectionExpression"
            case target = "target"
        }
    }

    public struct UpdateRouteResponseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseModels", location: .body(locationName: "responseModels"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .uri(locationName: "routeId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseId", location: .uri(locationName: "routeResponseId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteResponseKey", location: .body(locationName: "routeResponseKey"), required: false, type: .string)
        ]

        public let apiId: String
        public let modelSelectionExpression: String?
        public let responseModels: [String: String]?
        public let responseParameters: [String: ParameterConstraints]?
        public let routeId: String
        public let routeResponseId: String
        public let routeResponseKey: String?

        public init(apiId: String, modelSelectionExpression: String? = nil, responseModels: [String: String]? = nil, responseParameters: [String: ParameterConstraints]? = nil, routeId: String, routeResponseId: String, routeResponseKey: String? = nil) {
            self.apiId = apiId
            self.modelSelectionExpression = modelSelectionExpression
            self.responseModels = responseModels
            self.responseParameters = responseParameters
            self.routeId = routeId
            self.routeResponseId = routeResponseId
            self.routeResponseKey = routeResponseKey
        }

        private enum CodingKeys: String, CodingKey {
            case apiId = "apiId"
            case modelSelectionExpression = "modelSelectionExpression"
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
            case routeId = "routeId"
            case routeResponseId = "routeResponseId"
            case routeResponseKey = "routeResponseKey"
        }
    }

    public struct UpdateRouteResponseResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseModels", location: .body(locationName: "responseModels"), required: false, type: .map), 
            AWSShapeMember(label: "ResponseParameters", location: .body(locationName: "responseParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteResponseId", location: .body(locationName: "routeResponseId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseKey", location: .body(locationName: "routeResponseKey"), required: false, type: .string)
        ]

        public let modelSelectionExpression: String?
        public let responseModels: [String: String]?
        public let responseParameters: [String: ParameterConstraints]?
        public let routeResponseId: String?
        public let routeResponseKey: String?

        public init(modelSelectionExpression: String? = nil, responseModels: [String: String]? = nil, responseParameters: [String: ParameterConstraints]? = nil, routeResponseId: String? = nil, routeResponseKey: String? = nil) {
            self.modelSelectionExpression = modelSelectionExpression
            self.responseModels = responseModels
            self.responseParameters = responseParameters
            self.routeResponseId = routeResponseId
            self.routeResponseKey = routeResponseKey
        }

        private enum CodingKeys: String, CodingKey {
            case modelSelectionExpression = "modelSelectionExpression"
            case responseModels = "responseModels"
            case responseParameters = "responseParameters"
            case routeResponseId = "routeResponseId"
            case routeResponseKey = "routeResponseKey"
        }
    }

    public struct UpdateRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiKeyRequired", location: .body(locationName: "apiKeyRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AuthorizationScopes", location: .body(locationName: "authorizationScopes"), required: false, type: .list), 
            AWSShapeMember(label: "AuthorizationType", location: .body(locationName: "authorizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizerId", location: .body(locationName: "authorizerId"), required: false, type: .string), 
            AWSShapeMember(label: "ModelSelectionExpression", location: .body(locationName: "modelSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "OperationName", location: .body(locationName: "operationName"), required: false, type: .string), 
            AWSShapeMember(label: "RequestModels", location: .body(locationName: "requestModels"), required: false, type: .map), 
            AWSShapeMember(label: "RequestParameters", location: .body(locationName: "requestParameters"), required: false, type: .map), 
            AWSShapeMember(label: "RouteId", location: .body(locationName: "routeId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteKey", location: .body(locationName: "routeKey"), required: false, type: .string), 
            AWSShapeMember(label: "RouteResponseSelectionExpression", location: .body(locationName: "routeResponseSelectionExpression"), required: false, type: .string), 
            AWSShapeMember(label: "Target", location: .body(locationName: "target"), required: false, type: .string)
        ]

        public let apiKeyRequired: Bool?
        public let authorizationScopes: [String]?
        public let authorizationType: AuthorizationType?
        public let authorizerId: String?
        public let modelSelectionExpression: String?
        public let operationName: String?
        public let requestModels: [String: String]?
        public let requestParameters: [String: ParameterConstraints]?
        public let routeId: String?
        public let routeKey: String?
        public let routeResponseSelectionExpression: String?
        public let target: String?

        public init(apiKeyRequired: Bool? = nil, authorizationScopes: [String]? = nil, authorizationType: AuthorizationType? = nil, authorizerId: String? = nil, modelSelectionExpression: String? = nil, operationName: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: ParameterConstraints]? = nil, routeId: String? = nil, routeKey: String? = nil, routeResponseSelectionExpression: String? = nil, target: String? = nil) {
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.authorizationType = authorizationType
            self.authorizerId = authorizerId
            self.modelSelectionExpression = modelSelectionExpression
            self.operationName = operationName
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.routeId = routeId
            self.routeKey = routeKey
            self.routeResponseSelectionExpression = routeResponseSelectionExpression
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case apiKeyRequired = "apiKeyRequired"
            case authorizationScopes = "authorizationScopes"
            case authorizationType = "authorizationType"
            case authorizerId = "authorizerId"
            case modelSelectionExpression = "modelSelectionExpression"
            case operationName = "operationName"
            case requestModels = "requestModels"
            case requestParameters = "requestParameters"
            case routeId = "routeId"
            case routeKey = "routeKey"
            case routeResponseSelectionExpression = "routeResponseSelectionExpression"
            case target = "target"
        }
    }

    public struct UpdateStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessLogSettings", location: .body(locationName: "accessLogSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ApiId", location: .uri(locationName: "apiId"), required: true, type: .string), 
            AWSShapeMember(label: "ClientCertificateId", location: .body(locationName: "clientCertificateId"), required: false, type: .string), 
            AWSShapeMember(label: "DefaultRouteSettings", location: .body(locationName: "defaultRouteSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "RouteSettings", location: .body(locationName: "routeSettings"), required: false, type: .map), 
            AWSShapeMember(label: "StageName", location: .uri(locationName: "stageName"), required: true, type: .string), 
            AWSShapeMember(label: "StageVariables", location: .body(locationName: "stageVariables"), required: false, type: .map)
        ]

        public let accessLogSettings: AccessLogSettings?
        public let apiId: String
        public let clientCertificateId: String?
        public let defaultRouteSettings: RouteSettings?
        public let deploymentId: String?
        public let description: String?
        public let routeSettings: [String: RouteSettings]?
        public let stageName: String
        public let stageVariables: [String: String]?

        public init(accessLogSettings: AccessLogSettings? = nil, apiId: String, clientCertificateId: String? = nil, defaultRouteSettings: RouteSettings? = nil, deploymentId: String? = nil, description: String? = nil, routeSettings: [String: RouteSettings]? = nil, stageName: String, stageVariables: [String: String]? = nil) {
            self.accessLogSettings = accessLogSettings
            self.apiId = apiId
            self.clientCertificateId = clientCertificateId
            self.defaultRouteSettings = defaultRouteSettings
            self.deploymentId = deploymentId
            self.description = description
            self.routeSettings = routeSettings
            self.stageName = stageName
            self.stageVariables = stageVariables
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogSettings = "accessLogSettings"
            case apiId = "apiId"
            case clientCertificateId = "clientCertificateId"
            case defaultRouteSettings = "defaultRouteSettings"
            case deploymentId = "deploymentId"
            case description = "description"
            case routeSettings = "routeSettings"
            case stageName = "stageName"
            case stageVariables = "stageVariables"
        }
    }

    public struct UpdateStageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessLogSettings", location: .body(locationName: "accessLogSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "ClientCertificateId", location: .body(locationName: "clientCertificateId"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", location: .body(locationName: "createdDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultRouteSettings", location: .body(locationName: "defaultRouteSettings"), required: false, type: .structure), 
            AWSShapeMember(label: "DeploymentId", location: .body(locationName: "deploymentId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedDate", location: .body(locationName: "lastUpdatedDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RouteSettings", location: .body(locationName: "routeSettings"), required: false, type: .map), 
            AWSShapeMember(label: "StageName", location: .body(locationName: "stageName"), required: false, type: .string), 
            AWSShapeMember(label: "StageVariables", location: .body(locationName: "stageVariables"), required: false, type: .map), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .map)
        ]

        public let accessLogSettings: AccessLogSettings?
        public let clientCertificateId: String?
        public let createdDate: TimeStamp?
        public let defaultRouteSettings: RouteSettings?
        public let deploymentId: String?
        public let description: String?
        public let lastUpdatedDate: TimeStamp?
        public let routeSettings: [String: RouteSettings]?
        public let stageName: String?
        public let stageVariables: [String: String]?
        public let tags: [String: String]?

        public init(accessLogSettings: AccessLogSettings? = nil, clientCertificateId: String? = nil, createdDate: TimeStamp? = nil, defaultRouteSettings: RouteSettings? = nil, deploymentId: String? = nil, description: String? = nil, lastUpdatedDate: TimeStamp? = nil, routeSettings: [String: RouteSettings]? = nil, stageName: String? = nil, stageVariables: [String: String]? = nil, tags: [String: String]? = nil) {
            self.accessLogSettings = accessLogSettings
            self.clientCertificateId = clientCertificateId
            self.createdDate = createdDate
            self.defaultRouteSettings = defaultRouteSettings
            self.deploymentId = deploymentId
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.routeSettings = routeSettings
            self.stageName = stageName
            self.stageVariables = stageVariables
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogSettings = "accessLogSettings"
            case clientCertificateId = "clientCertificateId"
            case createdDate = "createdDate"
            case defaultRouteSettings = "defaultRouteSettings"
            case deploymentId = "deploymentId"
            case description = "description"
            case lastUpdatedDate = "lastUpdatedDate"
            case routeSettings = "routeSettings"
            case stageName = "stageName"
            case stageVariables = "stageVariables"
            case tags = "tags"
        }
    }
}
