// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension RAM {
    //MARK: Enums

    public enum ResourceOwner: String, CustomStringConvertible, Codable {
        case `self` = "SELF"
        case otherAccounts = "OTHER-ACCOUNTS"
        public var description: String { return self.rawValue }
    }

    public enum ResourceShareAssociationStatus: String, CustomStringConvertible, Codable {
        case associating = "ASSOCIATING"
        case associated = "ASSOCIATED"
        case failed = "FAILED"
        case disassociating = "DISASSOCIATING"
        case disassociated = "DISASSOCIATED"
        public var description: String { return self.rawValue }
    }

    public enum ResourceShareAssociationType: String, CustomStringConvertible, Codable {
        case principal = "PRINCIPAL"
        case resource = "RESOURCE"
        public var description: String { return self.rawValue }
    }

    public enum ResourceShareFeatureSet: String, CustomStringConvertible, Codable {
        case createdFromPolicy = "CREATED_FROM_POLICY"
        case promotingToStandard = "PROMOTING_TO_STANDARD"
        case standard = "STANDARD"
        public var description: String { return self.rawValue }
    }

    public enum ResourceShareInvitationStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case accepted = "ACCEPTED"
        case rejected = "REJECTED"
        case expired = "EXPIRED"
        public var description: String { return self.rawValue }
    }

    public enum ResourceShareStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case active = "ACTIVE"
        case failed = "FAILED"
        case deleting = "DELETING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public enum ResourceStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case zonalResourceInaccessible = "ZONAL_RESOURCE_INACCESSIBLE"
        case limitExceeded = "LIMIT_EXCEEDED"
        case unavailable = "UNAVAILABLE"
        case pending = "PENDING"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AcceptResourceShareInvitationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareInvitationArn", required: true, type: .string)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The Amazon Resource Name (ARN) of the invitation.
        public let resourceShareInvitationArn: String

        public init(clientToken: String? = nil, resourceShareInvitationArn: String) {
            self.clientToken = clientToken
            self.resourceShareInvitationArn = resourceShareInvitationArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceShareInvitationArn = "resourceShareInvitationArn"
        }
    }

    public struct AcceptResourceShareInvitationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareInvitation", required: false, type: .structure)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the invitation.
        public let resourceShareInvitation: ResourceShareInvitation?

        public init(clientToken: String? = nil, resourceShareInvitation: ResourceShareInvitation? = nil) {
            self.clientToken = clientToken
            self.resourceShareInvitation = resourceShareInvitation
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceShareInvitation = "resourceShareInvitation"
        }
    }

    public struct AssociateResourceSharePermissionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "permissionArn", required: true, type: .string), 
            AWSShapeMember(label: "replace", required: false, type: .boolean), 
            AWSShapeMember(label: "resourceShareArn", required: true, type: .string)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The ARN of the AWS RAM permission to associate with the resource share.
        public let permissionArn: String
        /// Indicates whether the permission should replace the permissions that are currently associated with the resource share. Use true to replace the current permissions. Use false to add the permission to the current permission.
        public let replace: Bool?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String

        public init(clientToken: String? = nil, permissionArn: String, replace: Bool? = nil, resourceShareArn: String) {
            self.clientToken = clientToken
            self.permissionArn = permissionArn
            self.replace = replace
            self.resourceShareArn = resourceShareArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case permissionArn = "permissionArn"
            case replace = "replace"
            case resourceShareArn = "resourceShareArn"
        }
    }

    public struct AssociateResourceSharePermissionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "returnValue", required: false, type: .boolean)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Indicates whether the request succeeded.
        public let returnValue: Bool?

        public init(clientToken: String? = nil, returnValue: Bool? = nil) {
            self.clientToken = clientToken
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case returnValue = "returnValue"
        }
    }

    public struct AssociateResourceShareRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "principals", required: false, type: .list), 
            AWSShapeMember(label: "resourceArns", required: false, type: .list), 
            AWSShapeMember(label: "resourceShareArn", required: true, type: .string)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The principals.
        public let principals: [String]?
        /// The Amazon Resource Names (ARN) of the resources.
        public let resourceArns: [String]?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String

        public init(clientToken: String? = nil, principals: [String]? = nil, resourceArns: [String]? = nil, resourceShareArn: String) {
            self.clientToken = clientToken
            self.principals = principals
            self.resourceArns = resourceArns
            self.resourceShareArn = resourceShareArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case principals = "principals"
            case resourceArns = "resourceArns"
            case resourceShareArn = "resourceShareArn"
        }
    }

    public struct AssociateResourceShareResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareAssociations", required: false, type: .list)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the associations.
        public let resourceShareAssociations: [ResourceShareAssociation]?

        public init(clientToken: String? = nil, resourceShareAssociations: [ResourceShareAssociation]? = nil) {
            self.clientToken = clientToken
            self.resourceShareAssociations = resourceShareAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceShareAssociations = "resourceShareAssociations"
        }
    }

    public struct CreateResourceShareRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "allowExternalPrincipals", required: false, type: .boolean), 
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "permissionArns", required: false, type: .list), 
            AWSShapeMember(label: "principals", required: false, type: .list), 
            AWSShapeMember(label: "resourceArns", required: false, type: .list), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// Indicates whether principals outside your AWS organization can be associated with a resource share.
        public let allowExternalPrincipals: Bool?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The name of the resource share.
        public let name: String
        /// The ARNs of the permissions to associate with the resource share. If you do not specify an ARN for the permission, AWS RAM automatically attaches the default version of the permission for each resource type.
        public let permissionArns: [String]?
        /// The principals to associate with the resource share. The possible values are IDs of AWS accounts, the ARN of an OU or organization from AWS Organizations.
        public let principals: [String]?
        /// The Amazon Resource Names (ARN) of the resources to associate with the resource share.
        public let resourceArns: [String]?
        /// One or more tags.
        public let tags: [Tag]?

        public init(allowExternalPrincipals: Bool? = nil, clientToken: String? = nil, name: String, permissionArns: [String]? = nil, principals: [String]? = nil, resourceArns: [String]? = nil, tags: [Tag]? = nil) {
            self.allowExternalPrincipals = allowExternalPrincipals
            self.clientToken = clientToken
            self.name = name
            self.permissionArns = permissionArns
            self.principals = principals
            self.resourceArns = resourceArns
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case allowExternalPrincipals = "allowExternalPrincipals"
            case clientToken = "clientToken"
            case name = "name"
            case permissionArns = "permissionArns"
            case principals = "principals"
            case resourceArns = "resourceArns"
            case tags = "tags"
        }
    }

    public struct CreateResourceShareResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShare", required: false, type: .structure)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the resource share.
        public let resourceShare: ResourceShare?

        public init(clientToken: String? = nil, resourceShare: ResourceShare? = nil) {
            self.clientToken = clientToken
            self.resourceShare = resourceShare
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceShare = "resourceShare"
        }
    }

    public struct DeleteResourceShareRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", location: .querystring(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "resourceShareArn", location: .querystring(locationName: "resourceShareArn"), required: true, type: .string)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String

        public init(clientToken: String? = nil, resourceShareArn: String) {
            self.clientToken = clientToken
            self.resourceShareArn = resourceShareArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceShareArn = "resourceShareArn"
        }
    }

    public struct DeleteResourceShareResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "returnValue", required: false, type: .boolean)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Indicates whether the request succeeded.
        public let returnValue: Bool?

        public init(clientToken: String? = nil, returnValue: Bool? = nil) {
            self.clientToken = clientToken
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case returnValue = "returnValue"
        }
    }

    public struct DisassociateResourceSharePermissionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "permissionArn", required: true, type: .string), 
            AWSShapeMember(label: "resourceShareArn", required: true, type: .string)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The ARN of the permission to disassociate from the resource share.
        public let permissionArn: String
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String

        public init(clientToken: String? = nil, permissionArn: String, resourceShareArn: String) {
            self.clientToken = clientToken
            self.permissionArn = permissionArn
            self.resourceShareArn = resourceShareArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case permissionArn = "permissionArn"
            case resourceShareArn = "resourceShareArn"
        }
    }

    public struct DisassociateResourceSharePermissionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "returnValue", required: false, type: .boolean)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Indicates whether the request succeeded.
        public let returnValue: Bool?

        public init(clientToken: String? = nil, returnValue: Bool? = nil) {
            self.clientToken = clientToken
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case returnValue = "returnValue"
        }
    }

    public struct DisassociateResourceShareRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "principals", required: false, type: .list), 
            AWSShapeMember(label: "resourceArns", required: false, type: .list), 
            AWSShapeMember(label: "resourceShareArn", required: true, type: .string)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The principals.
        public let principals: [String]?
        /// The Amazon Resource Names (ARNs) of the resources.
        public let resourceArns: [String]?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String

        public init(clientToken: String? = nil, principals: [String]? = nil, resourceArns: [String]? = nil, resourceShareArn: String) {
            self.clientToken = clientToken
            self.principals = principals
            self.resourceArns = resourceArns
            self.resourceShareArn = resourceShareArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case principals = "principals"
            case resourceArns = "resourceArns"
            case resourceShareArn = "resourceShareArn"
        }
    }

    public struct DisassociateResourceShareResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareAssociations", required: false, type: .list)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the associations.
        public let resourceShareAssociations: [ResourceShareAssociation]?

        public init(clientToken: String? = nil, resourceShareAssociations: [ResourceShareAssociation]? = nil) {
            self.clientToken = clientToken
            self.resourceShareAssociations = resourceShareAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceShareAssociations = "resourceShareAssociations"
        }
    }

    public struct EnableSharingWithAwsOrganizationRequest: AWSShape {


        public init() {
        }

    }

    public struct EnableSharingWithAwsOrganizationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "returnValue", required: false, type: .boolean)
        ]

        /// Indicates whether the request succeeded.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "returnValue"
        }
    }

    public struct GetPermissionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "permissionArn", required: true, type: .string), 
            AWSShapeMember(label: "permissionVersion", required: false, type: .integer)
        ]

        /// The ARN of the permission.
        public let permissionArn: String
        /// The identifier for the version of the permission.
        public let permissionVersion: Int?

        public init(permissionArn: String, permissionVersion: Int? = nil) {
            self.permissionArn = permissionArn
            self.permissionVersion = permissionVersion
        }

        private enum CodingKeys: String, CodingKey {
            case permissionArn = "permissionArn"
            case permissionVersion = "permissionVersion"
        }
    }

    public struct GetPermissionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "permission", required: false, type: .structure)
        ]

        /// Information about the permission.
        public let permission: ResourceSharePermissionDetail?

        public init(permission: ResourceSharePermissionDetail? = nil) {
            self.permission = permission
        }

        private enum CodingKeys: String, CodingKey {
            case permission = "permission"
        }
    }

    public struct GetResourcePoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "principal", required: false, type: .string), 
            AWSShapeMember(label: "resourceArns", required: true, type: .list)
        ]

        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The principal.
        public let principal: String?
        /// The Amazon Resource Names (ARN) of the resources.
        public let resourceArns: [String]

        public init(maxResults: Int? = nil, nextToken: String? = nil, principal: String? = nil, resourceArns: [String]) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.principal = principal
            self.resourceArns = resourceArns
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case principal = "principal"
            case resourceArns = "resourceArns"
        }
    }

    public struct GetResourcePoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "policies", required: false, type: .list)
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A key policy document, in JSON format.
        public let policies: [String]?

        public init(nextToken: String? = nil, policies: [String]? = nil) {
            self.nextToken = nextToken
            self.policies = policies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case policies = "policies"
        }
    }

    public struct GetResourceShareAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "associationStatus", required: false, type: .enum), 
            AWSShapeMember(label: "associationType", required: true, type: .enum), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "principal", required: false, type: .string), 
            AWSShapeMember(label: "resourceArn", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareArns", required: false, type: .list)
        ]

        /// The association status.
        public let associationStatus: ResourceShareAssociationStatus?
        /// The association type. Specify PRINCIPAL to list the principals that are associated with the specified resource share. Specify RESOURCE to list the resources that are associated with the specified resource share.
        public let associationType: ResourceShareAssociationType
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The principal. You cannot specify this parameter if the association type is RESOURCE.
        public let principal: String?
        /// The Amazon Resource Name (ARN) of the resource. You cannot specify this parameter if the association type is PRINCIPAL.
        public let resourceArn: String?
        /// The Amazon Resource Names (ARN) of the resource shares.
        public let resourceShareArns: [String]?

        public init(associationStatus: ResourceShareAssociationStatus? = nil, associationType: ResourceShareAssociationType, maxResults: Int? = nil, nextToken: String? = nil, principal: String? = nil, resourceArn: String? = nil, resourceShareArns: [String]? = nil) {
            self.associationStatus = associationStatus
            self.associationType = associationType
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.principal = principal
            self.resourceArn = resourceArn
            self.resourceShareArns = resourceShareArns
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case associationStatus = "associationStatus"
            case associationType = "associationType"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case principal = "principal"
            case resourceArn = "resourceArn"
            case resourceShareArns = "resourceShareArns"
        }
    }

    public struct GetResourceShareAssociationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareAssociations", required: false, type: .list)
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the associations.
        public let resourceShareAssociations: [ResourceShareAssociation]?

        public init(nextToken: String? = nil, resourceShareAssociations: [ResourceShareAssociation]? = nil) {
            self.nextToken = nextToken
            self.resourceShareAssociations = resourceShareAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resourceShareAssociations = "resourceShareAssociations"
        }
    }

    public struct GetResourceShareInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareArns", required: false, type: .list), 
            AWSShapeMember(label: "resourceShareInvitationArns", required: false, type: .list)
        ]

        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The Amazon Resource Names (ARN) of the resource shares.
        public let resourceShareArns: [String]?
        /// The Amazon Resource Names (ARN) of the invitations.
        public let resourceShareInvitationArns: [String]?

        public init(maxResults: Int? = nil, nextToken: String? = nil, resourceShareArns: [String]? = nil, resourceShareInvitationArns: [String]? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceShareArns = resourceShareArns
            self.resourceShareInvitationArns = resourceShareInvitationArns
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case resourceShareArns = "resourceShareArns"
            case resourceShareInvitationArns = "resourceShareInvitationArns"
        }
    }

    public struct GetResourceShareInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareInvitations", required: false, type: .list)
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the invitations.
        public let resourceShareInvitations: [ResourceShareInvitation]?

        public init(nextToken: String? = nil, resourceShareInvitations: [ResourceShareInvitation]? = nil) {
            self.nextToken = nextToken
            self.resourceShareInvitations = resourceShareInvitations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resourceShareInvitations = "resourceShareInvitations"
        }
    }

    public struct GetResourceSharesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceOwner", required: true, type: .enum), 
            AWSShapeMember(label: "resourceShareArns", required: false, type: .list), 
            AWSShapeMember(label: "resourceShareStatus", required: false, type: .enum), 
            AWSShapeMember(label: "tagFilters", required: false, type: .list)
        ]

        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The name of the resource share.
        public let name: String?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The type of owner.
        public let resourceOwner: ResourceOwner
        /// The Amazon Resource Names (ARN) of the resource shares.
        public let resourceShareArns: [String]?
        /// The status of the resource share.
        public let resourceShareStatus: ResourceShareStatus?
        /// One or more tag filters.
        public let tagFilters: [TagFilter]?

        public init(maxResults: Int? = nil, name: String? = nil, nextToken: String? = nil, resourceOwner: ResourceOwner, resourceShareArns: [String]? = nil, resourceShareStatus: ResourceShareStatus? = nil, tagFilters: [TagFilter]? = nil) {
            self.maxResults = maxResults
            self.name = name
            self.nextToken = nextToken
            self.resourceOwner = resourceOwner
            self.resourceShareArns = resourceShareArns
            self.resourceShareStatus = resourceShareStatus
            self.tagFilters = tagFilters
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case name = "name"
            case nextToken = "nextToken"
            case resourceOwner = "resourceOwner"
            case resourceShareArns = "resourceShareArns"
            case resourceShareStatus = "resourceShareStatus"
            case tagFilters = "tagFilters"
        }
    }

    public struct GetResourceSharesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShares", required: false, type: .list)
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the resource shares.
        public let resourceShares: [ResourceShare]?

        public init(nextToken: String? = nil, resourceShares: [ResourceShare]? = nil) {
            self.nextToken = nextToken
            self.resourceShares = resourceShares
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resourceShares = "resourceShares"
        }
    }

    public struct ListPendingInvitationResourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareInvitationArn", required: true, type: .string)
        ]

        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) of the invitation.
        public let resourceShareInvitationArn: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, resourceShareInvitationArn: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceShareInvitationArn = resourceShareInvitationArn
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case resourceShareInvitationArn = "resourceShareInvitationArn"
        }
    }

    public struct ListPendingInvitationResourcesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resources", required: false, type: .list)
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the resources included the resource share.
        public let resources: [Resource]?

        public init(nextToken: String? = nil, resources: [Resource]? = nil) {
            self.nextToken = nextToken
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resources = "resources"
        }
    }

    public struct ListPermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceType", required: false, type: .string)
        ]

        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// Specifies the resource type for which to list permissions. For example, to list only permissions that apply to EC2 subnets, specify ec2:Subnet.
        public let resourceType: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, resourceType: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceType = resourceType
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case resourceType = "resourceType"
        }
    }

    public struct ListPermissionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "permissions", required: false, type: .list)
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the permissions.
        public let permissions: [ResourceSharePermissionSummary]?

        public init(nextToken: String? = nil, permissions: [ResourceSharePermissionSummary]? = nil) {
            self.nextToken = nextToken
            self.permissions = permissions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case permissions = "permissions"
        }
    }

    public struct ListPrincipalsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "principals", required: false, type: .list), 
            AWSShapeMember(label: "resourceArn", required: false, type: .string), 
            AWSShapeMember(label: "resourceOwner", required: true, type: .enum), 
            AWSShapeMember(label: "resourceShareArns", required: false, type: .list), 
            AWSShapeMember(label: "resourceType", required: false, type: .string)
        ]

        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The principals.
        public let principals: [String]?
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String?
        /// The type of owner.
        public let resourceOwner: ResourceOwner
        /// The Amazon Resource Names (ARN) of the resource shares.
        public let resourceShareArns: [String]?
        /// The resource type. Valid values: codebuild:Project | codebuild:ReportGroup | ec2:CapacityReservation | ec2:DedicatedHost | ec2:Subnet | ec2:TrafficMirrorTarget | ec2:TransitGateway | imagebuilder:Component | imagebuilder:Image | imagebuilder:ImageRecipe | license-manager:LicenseConfiguration I resource-groups:Group | rds:Cluster | route53resolver:ResolverRule 
        public let resourceType: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, principals: [String]? = nil, resourceArn: String? = nil, resourceOwner: ResourceOwner, resourceShareArns: [String]? = nil, resourceType: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.principals = principals
            self.resourceArn = resourceArn
            self.resourceOwner = resourceOwner
            self.resourceShareArns = resourceShareArns
            self.resourceType = resourceType
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case principals = "principals"
            case resourceArn = "resourceArn"
            case resourceOwner = "resourceOwner"
            case resourceShareArns = "resourceShareArns"
            case resourceType = "resourceType"
        }
    }

    public struct ListPrincipalsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "principals", required: false, type: .list)
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The principals.
        public let principals: [Principal]?

        public init(nextToken: String? = nil, principals: [Principal]? = nil) {
            self.nextToken = nextToken
            self.principals = principals
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case principals = "principals"
        }
    }

    public struct ListResourceSharePermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareArn", required: true, type: .string)
        ]

        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, resourceShareArn: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceShareArn = resourceShareArn
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case resourceShareArn = "resourceShareArn"
        }
    }

    public struct ListResourceSharePermissionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "permissions", required: false, type: .list)
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The permissions associated with the resource share.
        public let permissions: [ResourceSharePermissionSummary]?

        public init(nextToken: String? = nil, permissions: [ResourceSharePermissionSummary]? = nil) {
            self.nextToken = nextToken
            self.permissions = permissions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case permissions = "permissions"
        }
    }

    public struct ListResourceTypesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]

        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListResourceTypesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceTypes", required: false, type: .list)
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The shareable resource types supported by AWS RAM.
        public let resourceTypes: [ServiceNameAndResourceType]?

        public init(nextToken: String? = nil, resourceTypes: [ServiceNameAndResourceType]? = nil) {
            self.nextToken = nextToken
            self.resourceTypes = resourceTypes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resourceTypes = "resourceTypes"
        }
    }

    public struct ListResourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "principal", required: false, type: .string), 
            AWSShapeMember(label: "resourceArns", required: false, type: .list), 
            AWSShapeMember(label: "resourceOwner", required: true, type: .enum), 
            AWSShapeMember(label: "resourceShareArns", required: false, type: .list), 
            AWSShapeMember(label: "resourceType", required: false, type: .string)
        ]

        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The principal.
        public let principal: String?
        /// The Amazon Resource Names (ARN) of the resources.
        public let resourceArns: [String]?
        /// The type of owner.
        public let resourceOwner: ResourceOwner
        /// The Amazon Resource Names (ARN) of the resource shares.
        public let resourceShareArns: [String]?
        /// The resource type. Valid values: codebuild:Project | codebuild:ReportGroup | ec2:CapacityReservation | ec2:DedicatedHost | ec2:Subnet | ec2:TrafficMirrorTarget | ec2:TransitGateway | imagebuilder:Component | imagebuilder:Image | imagebuilder:ImageRecipe | license-manager:LicenseConfiguration I resource-groups:Group | rds:Cluster | route53resolver:ResolverRule 
        public let resourceType: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, principal: String? = nil, resourceArns: [String]? = nil, resourceOwner: ResourceOwner, resourceShareArns: [String]? = nil, resourceType: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.principal = principal
            self.resourceArns = resourceArns
            self.resourceOwner = resourceOwner
            self.resourceShareArns = resourceShareArns
            self.resourceType = resourceType
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case principal = "principal"
            case resourceArns = "resourceArns"
            case resourceOwner = "resourceOwner"
            case resourceShareArns = "resourceShareArns"
            case resourceType = "resourceType"
        }
    }

    public struct ListResourcesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resources", required: false, type: .list)
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the resources.
        public let resources: [Resource]?

        public init(nextToken: String? = nil, resources: [Resource]? = nil) {
            self.nextToken = nextToken
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resources = "resources"
        }
    }

    public struct Principal: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "external", required: false, type: .boolean), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "resourceShareArn", required: false, type: .string)
        ]

        /// The time when the principal was associated with the resource share.
        public let creationTime: TimeStamp?
        /// Indicates whether the principal belongs to the same AWS organization as the AWS account that owns the resource share.
        public let external: Bool?
        /// The ID of the principal.
        public let id: String?
        /// The time when the association was last updated.
        public let lastUpdatedTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String?

        public init(creationTime: TimeStamp? = nil, external: Bool? = nil, id: String? = nil, lastUpdatedTime: TimeStamp? = nil, resourceShareArn: String? = nil) {
            self.creationTime = creationTime
            self.external = external
            self.id = id
            self.lastUpdatedTime = lastUpdatedTime
            self.resourceShareArn = resourceShareArn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case external = "external"
            case id = "id"
            case lastUpdatedTime = "lastUpdatedTime"
            case resourceShareArn = "resourceShareArn"
        }
    }

    public struct PromoteResourceShareCreatedFromPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceShareArn", location: .querystring(locationName: "resourceShareArn"), required: true, type: .string)
        ]

        /// The ARN of the resource share to promote.
        public let resourceShareArn: String

        public init(resourceShareArn: String) {
            self.resourceShareArn = resourceShareArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceShareArn = "resourceShareArn"
        }
    }

    public struct PromoteResourceShareCreatedFromPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "returnValue", required: false, type: .boolean)
        ]

        /// Indicates whether the request succeeded.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "returnValue"
        }
    }

    public struct RejectResourceShareInvitationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareInvitationArn", required: true, type: .string)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The Amazon Resource Name (ARN) of the invitation.
        public let resourceShareInvitationArn: String

        public init(clientToken: String? = nil, resourceShareInvitationArn: String) {
            self.clientToken = clientToken
            self.resourceShareInvitationArn = resourceShareInvitationArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceShareInvitationArn = "resourceShareInvitationArn"
        }
    }

    public struct RejectResourceShareInvitationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareInvitation", required: false, type: .structure)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the invitation.
        public let resourceShareInvitation: ResourceShareInvitation?

        public init(clientToken: String? = nil, resourceShareInvitation: ResourceShareInvitation? = nil) {
            self.clientToken = clientToken
            self.resourceShareInvitation = resourceShareInvitation
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceShareInvitation = "resourceShareInvitation"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "resourceGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareArn", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the resource.
        public let arn: String?
        /// The time when the resource was associated with the resource share.
        public let creationTime: TimeStamp?
        /// The time when the association was last updated.
        public let lastUpdatedTime: TimeStamp?
        /// The ARN of the resource group. This value is returned only if the resource is a resource group.
        public let resourceGroupArn: String?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String?
        /// The status of the resource.
        public let status: ResourceStatus?
        /// A message about the status of the resource.
        public let statusMessage: String?
        /// The resource type.
        public let `type`: String?

        public init(arn: String? = nil, creationTime: TimeStamp? = nil, lastUpdatedTime: TimeStamp? = nil, resourceGroupArn: String? = nil, resourceShareArn: String? = nil, status: ResourceStatus? = nil, statusMessage: String? = nil, type: String? = nil) {
            self.arn = arn
            self.creationTime = creationTime
            self.lastUpdatedTime = lastUpdatedTime
            self.resourceGroupArn = resourceGroupArn
            self.resourceShareArn = resourceShareArn
            self.status = status
            self.statusMessage = statusMessage
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case creationTime = "creationTime"
            case lastUpdatedTime = "lastUpdatedTime"
            case resourceGroupArn = "resourceGroupArn"
            case resourceShareArn = "resourceShareArn"
            case status = "status"
            case statusMessage = "statusMessage"
            case `type` = "type"
        }
    }

    public struct ResourceShare: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "allowExternalPrincipals", required: false, type: .boolean), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "featureSet", required: false, type: .enum), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "owningAccountId", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareArn", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]

        /// Indicates whether principals outside your AWS organization can be associated with a resource share.
        public let allowExternalPrincipals: Bool?
        /// The time when the resource share was created.
        public let creationTime: TimeStamp?
        /// Indicates how the resource share was created. Possible values include:    CREATED_FROM_POLICY - Indicates that the resource share was created from an AWS Identity and Access Management (AWS IAM) policy attached to a resource. These resource shares are visible only to the AWS account that created it. They cannot be modified in AWS RAM.    PROMOTING_TO_STANDARD - The resource share is in the process of being promoted. For more information, see PromoteResourceShareCreatedFromPolicy.    STANDARD - Indicates that the resource share was created in AWS RAM using the console or APIs. These resource shares are visible to all principals. They can be modified in AWS RAM.  
        public let featureSet: ResourceShareFeatureSet?
        /// The time when the resource share was last updated.
        public let lastUpdatedTime: TimeStamp?
        /// The name of the resource share.
        public let name: String?
        /// The ID of the AWS account that owns the resource share.
        public let owningAccountId: String?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String?
        /// The status of the resource share.
        public let status: ResourceShareStatus?
        /// A message about the status of the resource share.
        public let statusMessage: String?
        /// The tags for the resource share.
        public let tags: [Tag]?

        public init(allowExternalPrincipals: Bool? = nil, creationTime: TimeStamp? = nil, featureSet: ResourceShareFeatureSet? = nil, lastUpdatedTime: TimeStamp? = nil, name: String? = nil, owningAccountId: String? = nil, resourceShareArn: String? = nil, status: ResourceShareStatus? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.allowExternalPrincipals = allowExternalPrincipals
            self.creationTime = creationTime
            self.featureSet = featureSet
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.owningAccountId = owningAccountId
            self.resourceShareArn = resourceShareArn
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case allowExternalPrincipals = "allowExternalPrincipals"
            case creationTime = "creationTime"
            case featureSet = "featureSet"
            case lastUpdatedTime = "lastUpdatedTime"
            case name = "name"
            case owningAccountId = "owningAccountId"
            case resourceShareArn = "resourceShareArn"
            case status = "status"
            case statusMessage = "statusMessage"
            case tags = "tags"
        }
    }

    public struct ResourceShareAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "associatedEntity", required: false, type: .string), 
            AWSShapeMember(label: "associationType", required: false, type: .enum), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "external", required: false, type: .boolean), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "resourceShareArn", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareName", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string)
        ]

        /// The associated entity. For resource associations, this is the ARN of the resource. For principal associations, this is the ID of an AWS account or the ARN of an OU or organization from AWS Organizations.
        public let associatedEntity: String?
        /// The association type.
        public let associationType: ResourceShareAssociationType?
        /// The time when the association was created.
        public let creationTime: TimeStamp?
        /// Indicates whether the principal belongs to the same AWS organization as the AWS account that owns the resource share.
        public let external: Bool?
        /// The time when the association was last updated.
        public let lastUpdatedTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String?
        /// The name of the resource share.
        public let resourceShareName: String?
        /// The status of the association.
        public let status: ResourceShareAssociationStatus?
        /// A message about the status of the association.
        public let statusMessage: String?

        public init(associatedEntity: String? = nil, associationType: ResourceShareAssociationType? = nil, creationTime: TimeStamp? = nil, external: Bool? = nil, lastUpdatedTime: TimeStamp? = nil, resourceShareArn: String? = nil, resourceShareName: String? = nil, status: ResourceShareAssociationStatus? = nil, statusMessage: String? = nil) {
            self.associatedEntity = associatedEntity
            self.associationType = associationType
            self.creationTime = creationTime
            self.external = external
            self.lastUpdatedTime = lastUpdatedTime
            self.resourceShareArn = resourceShareArn
            self.resourceShareName = resourceShareName
            self.status = status
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case associatedEntity = "associatedEntity"
            case associationType = "associationType"
            case creationTime = "creationTime"
            case external = "external"
            case lastUpdatedTime = "lastUpdatedTime"
            case resourceShareArn = "resourceShareArn"
            case resourceShareName = "resourceShareName"
            case status = "status"
            case statusMessage = "statusMessage"
        }
    }

    public struct ResourceShareInvitation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "invitationTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "receiverAccountId", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareArn", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareInvitationArn", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareName", required: false, type: .string), 
            AWSShapeMember(label: "senderAccountId", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]

        /// The date and time when the invitation was sent.
        public let invitationTimestamp: TimeStamp?
        /// The ID of the AWS account that received the invitation.
        public let receiverAccountId: String?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String?
        /// The Amazon Resource Name (ARN) of the invitation.
        public let resourceShareInvitationArn: String?
        /// The name of the resource share.
        public let resourceShareName: String?
        /// The ID of the AWS account that sent the invitation.
        public let senderAccountId: String?
        /// The status of the invitation.
        public let status: ResourceShareInvitationStatus?

        public init(invitationTimestamp: TimeStamp? = nil, receiverAccountId: String? = nil, resourceShareArn: String? = nil, resourceShareInvitationArn: String? = nil, resourceShareName: String? = nil, senderAccountId: String? = nil, status: ResourceShareInvitationStatus? = nil) {
            self.invitationTimestamp = invitationTimestamp
            self.receiverAccountId = receiverAccountId
            self.resourceShareArn = resourceShareArn
            self.resourceShareInvitationArn = resourceShareInvitationArn
            self.resourceShareName = resourceShareName
            self.senderAccountId = senderAccountId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case invitationTimestamp = "invitationTimestamp"
            case receiverAccountId = "receiverAccountId"
            case resourceShareArn = "resourceShareArn"
            case resourceShareInvitationArn = "resourceShareInvitationArn"
            case resourceShareName = "resourceShareName"
            case senderAccountId = "senderAccountId"
            case status = "status"
        }
    }

    public struct ResourceSharePermissionDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "defaultVersion", required: false, type: .boolean), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "permission", required: false, type: .string), 
            AWSShapeMember(label: "resourceType", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string)
        ]

        /// The ARN of the permission.
        public let arn: String?
        /// The date and time when the permission was created.
        public let creationTime: TimeStamp?
        /// The identifier for the version of the permission that is set as the default version.
        public let defaultVersion: Bool?
        /// The date and time when the permission was last updated.
        public let lastUpdatedTime: TimeStamp?
        /// The name of the permission.
        public let name: String?
        /// The permission's effect and actions in JSON format. The effect indicates whether the actions are allowed or denied. The actions list the API actions to which the principal is granted or denied access.
        public let permission: String?
        /// The resource type to which the permission applies.
        public let resourceType: String?
        /// The identifier for the version of the permission.
        public let version: String?

        public init(arn: String? = nil, creationTime: TimeStamp? = nil, defaultVersion: Bool? = nil, lastUpdatedTime: TimeStamp? = nil, name: String? = nil, permission: String? = nil, resourceType: String? = nil, version: String? = nil) {
            self.arn = arn
            self.creationTime = creationTime
            self.defaultVersion = defaultVersion
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.permission = permission
            self.resourceType = resourceType
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case creationTime = "creationTime"
            case defaultVersion = "defaultVersion"
            case lastUpdatedTime = "lastUpdatedTime"
            case name = "name"
            case permission = "permission"
            case resourceType = "resourceType"
            case version = "version"
        }
    }

    public struct ResourceSharePermissionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "creationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "defaultVersion", required: false, type: .boolean), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "resourceType", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string)
        ]

        /// The ARN of the permission.
        public let arn: String?
        /// The date and time when the permission was created.
        public let creationTime: TimeStamp?
        /// The identifier for the version of the permission that is set as the default version.
        public let defaultVersion: Bool?
        /// The date and time when the permission was last updated.
        public let lastUpdatedTime: TimeStamp?
        /// The name of the permission.
        public let name: String?
        /// The type of resource to which the permission applies.
        public let resourceType: String?
        /// The current status of the permission.
        public let status: String?
        /// The identifier for the version of the permission.
        public let version: String?

        public init(arn: String? = nil, creationTime: TimeStamp? = nil, defaultVersion: Bool? = nil, lastUpdatedTime: TimeStamp? = nil, name: String? = nil, resourceType: String? = nil, status: String? = nil, version: String? = nil) {
            self.arn = arn
            self.creationTime = creationTime
            self.defaultVersion = defaultVersion
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.resourceType = resourceType
            self.status = status
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case creationTime = "creationTime"
            case defaultVersion = "defaultVersion"
            case lastUpdatedTime = "lastUpdatedTime"
            case name = "name"
            case resourceType = "resourceType"
            case status = "status"
            case version = "version"
        }
    }

    public struct ServiceNameAndResourceType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceType", required: false, type: .string), 
            AWSShapeMember(label: "serviceName", required: false, type: .string)
        ]

        /// The shareable resource types.
        public let resourceType: String?
        /// The name of the AWS services to which the resources belong.
        public let serviceName: String?

        public init(resourceType: String? = nil, serviceName: String? = nil) {
            self.resourceType = resourceType
            self.serviceName = serviceName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case serviceName = "serviceName"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]

        /// The key of the tag.
        public let key: String?
        /// The value of the tag.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct TagFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tagKey", required: false, type: .string), 
            AWSShapeMember(label: "tagValues", required: false, type: .list)
        ]

        /// The tag key.
        public let tagKey: String?
        /// The tag values.
        public let tagValues: [String]?

        public init(tagKey: String? = nil, tagValues: [String]? = nil) {
            self.tagKey = tagKey
            self.tagValues = tagValues
        }

        private enum CodingKeys: String, CodingKey {
            case tagKey = "tagKey"
            case tagValues = "tagValues"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceShareArn", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]

        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String
        /// One or more tags.
        public let tags: [Tag]

        public init(resourceShareArn: String, tags: [Tag]) {
            self.resourceShareArn = resourceShareArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceShareArn = "resourceShareArn"
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceShareArn", required: true, type: .string), 
            AWSShapeMember(label: "tagKeys", required: true, type: .list)
        ]

        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String
        /// The tag keys of the tags to remove.
        public let tagKeys: [String]

        public init(resourceShareArn: String, tagKeys: [String]) {
            self.resourceShareArn = resourceShareArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceShareArn = "resourceShareArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UntagResourceResponse: AWSShape {


        public init() {
        }

    }

    public struct UpdateResourceShareRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "allowExternalPrincipals", required: false, type: .boolean), 
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "resourceShareArn", required: true, type: .string)
        ]

        /// Indicates whether principals outside your AWS organization can be associated with a resource share.
        public let allowExternalPrincipals: Bool?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The name of the resource share.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the resource share.
        public let resourceShareArn: String

        public init(allowExternalPrincipals: Bool? = nil, clientToken: String? = nil, name: String? = nil, resourceShareArn: String) {
            self.allowExternalPrincipals = allowExternalPrincipals
            self.clientToken = clientToken
            self.name = name
            self.resourceShareArn = resourceShareArn
        }

        private enum CodingKeys: String, CodingKey {
            case allowExternalPrincipals = "allowExternalPrincipals"
            case clientToken = "clientToken"
            case name = "name"
            case resourceShareArn = "resourceShareArn"
        }
    }

    public struct UpdateResourceShareResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceShare", required: false, type: .structure)
        ]

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the resource share.
        public let resourceShare: ResourceShare?

        public init(clientToken: String? = nil, resourceShare: ResourceShare? = nil) {
            self.clientToken = clientToken
            self.resourceShare = resourceShare
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case resourceShare = "resourceShare"
        }
    }
}
