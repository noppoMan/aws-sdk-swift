// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CloudFront {

    public struct ActiveTrustedSigners: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"Signer")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// Enabled is true if any of the AWS accounts listed in the TrustedSigners complex type for this distribution have active CloudFront key pairs. If not, Enabled is false.
        public let enabled: Bool
        /// A complex type that contains one Signer complex type for each trusted signer that is specified in the TrustedSigners complex type.
        public let items: [Signer]?
        /// The number of trusted signers specified in the TrustedSigners complex type.
        public let quantity: Int32

        public init(enabled: Bool, items: [Signer]? = nil, quantity: Int32) {
            self.enabled = enabled
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct AliasICPRecordal: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CNAME", required: false, type: .string), 
            AWSShapeMember(label: "ICPRecordalStatus", required: false, type: .enum)
        ]
        /// A domain name associated with a distribution. 
        public let cname: String?
        /// The Internet Content Provider (ICP) recordal status for a CNAME. The ICPRecordalStatus is set to APPROVED for all CNAMEs (aliases) in regions outside of China.  The status values returned are the following:    APPROVED indicates that the associated CNAME has a valid ICP recordal number. Multiple CNAMEs can be associated with a distribution, and CNAMEs can correspond to different ICP recordals. To be marked as APPROVED, that is, valid to use with China region, a CNAME must have one ICP recordal number associated with it.    SUSPENDED indicates that the associated CNAME does not have a valid ICP recordal number.    PENDING indicates that at least one CNAME associated with the distribution does not have a valid ICP recordal number.  
        public let iCPRecordalStatus: ICPRecordalStatus?

        public init(cname: String? = nil, iCPRecordalStatus: ICPRecordalStatus? = nil) {
            self.cname = cname
            self.iCPRecordalStatus = iCPRecordalStatus
        }

        private enum CodingKeys: String, CodingKey {
            case cname = "CNAME"
            case iCPRecordalStatus = "ICPRecordalStatus"
        }
    }

    public struct Aliases: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"CNAME")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains the CNAME aliases, if any, that you want to associate with this distribution.
        public let items: [String]?
        /// The number of CNAME aliases, if any, that you want to associate with this distribution.
        public let quantity: Int32

        public init(items: [String]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct AllowedMethods: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CachedMethods", required: false, type: .structure), 
            AWSShapeMember(label: "Items", required: true, type: .list, encoding: .list(member:"Method")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        public let cachedMethods: CachedMethods?
        /// A complex type that contains the HTTP methods that you want CloudFront to process and forward to your origin.
        public let items: [Method]
        /// The number of HTTP methods that you want CloudFront to forward to your origin. Valid values are 2 (for GET and HEAD requests), 3 (for GET, HEAD, and OPTIONS requests) and 7 (for GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests).
        public let quantity: Int32

        public init(cachedMethods: CachedMethods? = nil, items: [Method], quantity: Int32) {
            self.cachedMethods = cachedMethods
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case cachedMethods = "CachedMethods"
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CacheBehavior: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedMethods", required: false, type: .structure), 
            AWSShapeMember(label: "Compress", required: false, type: .boolean), 
            AWSShapeMember(label: "DefaultTTL", required: false, type: .long), 
            AWSShapeMember(label: "FieldLevelEncryptionId", required: false, type: .string), 
            AWSShapeMember(label: "ForwardedValues", required: true, type: .structure), 
            AWSShapeMember(label: "LambdaFunctionAssociations", required: false, type: .structure), 
            AWSShapeMember(label: "MaxTTL", required: false, type: .long), 
            AWSShapeMember(label: "MinTTL", required: true, type: .long), 
            AWSShapeMember(label: "PathPattern", required: true, type: .string), 
            AWSShapeMember(label: "SmoothStreaming", required: false, type: .boolean), 
            AWSShapeMember(label: "TargetOriginId", required: true, type: .string), 
            AWSShapeMember(label: "TrustedSigners", required: true, type: .structure), 
            AWSShapeMember(label: "ViewerProtocolPolicy", required: true, type: .enum)
        ]
        public let allowedMethods: AllowedMethods?
        /// Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify true; if not, specify false. For more information, see Serving Compressed Files in the Amazon CloudFront Developer Guide.
        public let compress: Bool?
        /// The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the Amazon CloudFront Developer Guide.
        public let defaultTTL: Int64?
        /// The value of ID for the field-level encryption configuration that you want CloudFront to use for encrypting specific fields of data for a cache behavior or for the default cache behavior in your distribution.
        public let fieldLevelEncryptionId: String?
        /// A complex type that specifies how CloudFront handles query strings and cookies.
        public let forwardedValues: ForwardedValues
        /// A complex type that contains zero or more Lambda function associations for a cache behavior.
        public let lambdaFunctionAssociations: LambdaFunctionAssociations?
        /// The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin adds HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the Amazon CloudFront Developer Guide.
        public let maxTTL: Int64?
        /// The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see  Managing How Long Content Stays in an Edge Cache (Expiration) in the  Amazon CloudFront Developer Guide. You must specify 0 for MinTTL if you configure CloudFront to forward all headers to your origin (under Headers, if you specify 1 for Quantity and * for Name).
        public let minTTL: Int64
        /// The pattern (for example, images/*.jpg) that specifies which requests to apply the behavior to. When CloudFront receives a viewer request, the requested path is compared with path patterns in the order in which cache behaviors are listed in the distribution.  You can optionally include a slash (/) at the beginning of the path pattern. For example, /images/*.jpg. CloudFront behavior is the same with or without the leading /.  The path pattern for the default cache behavior is * and cannot be changed. If the request for an object does not match the path pattern for any cache behaviors, CloudFront applies the behavior in the default cache behavior. For more information, see Path Pattern in the  Amazon CloudFront Developer Guide.
        public let pathPattern: String
        /// Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify true; if not, specify false. If you specify true for SmoothStreaming, you can still distribute other content using this cache behavior if the content matches the value of PathPattern. 
        public let smoothStreaming: Bool?
        /// The value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior in your distribution.
        public let targetOriginId: String
        /// A complex type that specifies the AWS accounts, if any, that you want to allow to create signed URLs for private content. If you want to require signed URLs in requests for objects in the target origin that match the PathPattern for this cache behavior, specify true for Enabled, and specify the applicable values for Quantity and Items. For more information, see Serving Private Content through CloudFront in the Amazon CloudFront Developer Guide.  If you don't want to require signed URLs in requests for objects that match PathPattern, specify false for Enabled and 0 for Quantity. Omit Items. To add, change, or remove one or more trusted signers, change Enabled to true (if it's currently false), change Quantity as applicable, and specify all of the trusted signers that you want to include in the updated distribution.
        public let trustedSigners: TrustedSigners
        /// The protocol that viewers can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. You can specify the following options:    allow-all: Viewers can use HTTP or HTTPS.    redirect-to-https: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL.     https-only: If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden).    For more information about requiring the HTTPS protocol, see Using an HTTPS Connection to Access Your Objects in the Amazon CloudFront Developer Guide.  The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the Amazon CloudFront Developer Guide. 
        public let viewerProtocolPolicy: ViewerProtocolPolicy

        public init(allowedMethods: AllowedMethods? = nil, compress: Bool? = nil, defaultTTL: Int64? = nil, fieldLevelEncryptionId: String? = nil, forwardedValues: ForwardedValues, lambdaFunctionAssociations: LambdaFunctionAssociations? = nil, maxTTL: Int64? = nil, minTTL: Int64, pathPattern: String, smoothStreaming: Bool? = nil, targetOriginId: String, trustedSigners: TrustedSigners, viewerProtocolPolicy: ViewerProtocolPolicy) {
            self.allowedMethods = allowedMethods
            self.compress = compress
            self.defaultTTL = defaultTTL
            self.fieldLevelEncryptionId = fieldLevelEncryptionId
            self.forwardedValues = forwardedValues
            self.lambdaFunctionAssociations = lambdaFunctionAssociations
            self.maxTTL = maxTTL
            self.minTTL = minTTL
            self.pathPattern = pathPattern
            self.smoothStreaming = smoothStreaming
            self.targetOriginId = targetOriginId
            self.trustedSigners = trustedSigners
            self.viewerProtocolPolicy = viewerProtocolPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case allowedMethods = "AllowedMethods"
            case compress = "Compress"
            case defaultTTL = "DefaultTTL"
            case fieldLevelEncryptionId = "FieldLevelEncryptionId"
            case forwardedValues = "ForwardedValues"
            case lambdaFunctionAssociations = "LambdaFunctionAssociations"
            case maxTTL = "MaxTTL"
            case minTTL = "MinTTL"
            case pathPattern = "PathPattern"
            case smoothStreaming = "SmoothStreaming"
            case targetOriginId = "TargetOriginId"
            case trustedSigners = "TrustedSigners"
            case viewerProtocolPolicy = "ViewerProtocolPolicy"
        }
    }

    public struct CacheBehaviors: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"CacheBehavior")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// Optional: A complex type that contains cache behaviors for this distribution. If Quantity is 0, you can omit Items.
        public let items: [CacheBehavior]?
        /// The number of cache behaviors for this distribution. 
        public let quantity: Int32

        public init(items: [CacheBehavior]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CachedMethods: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: true, type: .list, encoding: .list(member:"Method")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains the HTTP methods that you want CloudFront to cache responses to.
        public let items: [Method]
        /// The number of HTTP methods for which you want CloudFront to cache responses. Valid values are 2 (for caching responses to GET and HEAD requests) and 3 (for caching responses to GET, HEAD, and OPTIONS requests).
        public let quantity: Int32

        public init(items: [Method], quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public enum CertificateSource: String, CustomStringConvertible, Codable {
        case cloudfront = "cloudfront"
        case iam = "iam"
        case acm = "acm"
        public var description: String { return self.rawValue }
    }

    public struct CloudFrontOriginAccessIdentity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFrontOriginAccessIdentityConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "S3CanonicalUserId", required: true, type: .string)
        ]
        /// The current configuration information for the identity. 
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig?
        /// The ID for the origin access identity, for example, E74FTE3AJFJ256A. 
        public let id: String
        /// The Amazon S3 canonical user ID for the origin access identity, used when giving the origin access identity read permission to an object in Amazon S3. 
        public let s3CanonicalUserId: String

        public init(cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig? = nil, id: String, s3CanonicalUserId: String) {
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
            self.id = id
            self.s3CanonicalUserId = s3CanonicalUserId
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontOriginAccessIdentityConfig = "CloudFrontOriginAccessIdentityConfig"
            case id = "Id"
            case s3CanonicalUserId = "S3CanonicalUserId"
        }
    }

    public struct CloudFrontOriginAccessIdentityConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CallerReference", required: true, type: .string), 
            AWSShapeMember(label: "Comment", required: true, type: .string)
        ]
        /// A unique value (for example, a date-time stamp) that ensures that the request can't be replayed. If the value of CallerReference is new (regardless of the content of the CloudFrontOriginAccessIdentityConfig object), a new origin access identity is created. If the CallerReference is a value already sent in a previous identity request, and the content of the CloudFrontOriginAccessIdentityConfig is identical to the original request (ignoring white space), the response includes the same information returned to the original request.  If the CallerReference is a value you already sent in a previous request to create an identity, but the content of the CloudFrontOriginAccessIdentityConfig is different from the original request, CloudFront returns a CloudFrontOriginAccessIdentityAlreadyExists error. 
        public let callerReference: String
        /// Any comments you want to include about the origin access identity. 
        public let comment: String

        public init(callerReference: String, comment: String) {
            self.callerReference = callerReference
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case callerReference = "CallerReference"
            case comment = "Comment"
        }
    }

    public struct CloudFrontOriginAccessIdentityList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsTruncated", required: true, type: .boolean), 
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"CloudFrontOriginAccessIdentitySummary")), 
            AWSShapeMember(label: "Marker", required: true, type: .string), 
            AWSShapeMember(label: "MaxItems", required: true, type: .integer), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A flag that indicates whether more origin access identities remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more items in the list.
        public let isTruncated: Bool
        /// A complex type that contains one CloudFrontOriginAccessIdentitySummary element for each origin access identity that was created by the current AWS account.
        public let items: [CloudFrontOriginAccessIdentitySummary]?
        /// Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last identity on that page). 
        public let marker: String
        /// The maximum number of origin access identities you want in the response body. 
        public let maxItems: Int32
        /// If IsTruncated is true, this element is present and contains the value you can use for the Marker request parameter to continue listing your origin access identities where they left off. 
        public let nextMarker: String?
        /// The number of CloudFront origin access identities that were created by the current AWS account. 
        public let quantity: Int32

        public init(isTruncated: Bool, items: [CloudFrontOriginAccessIdentitySummary]? = nil, marker: String, maxItems: Int32, nextMarker: String? = nil, quantity: Int32) {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case items = "Items"
            case marker = "Marker"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct CloudFrontOriginAccessIdentitySummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "S3CanonicalUserId", required: true, type: .string)
        ]
        /// The comment for this origin access identity, as originally specified when created.
        public let comment: String
        /// The ID for the origin access identity. For example: E74FTE3AJFJ256A.
        public let id: String
        /// The Amazon S3 canonical user ID for the origin access identity, which you use when giving the origin access identity read permission to an object in Amazon S3.
        public let s3CanonicalUserId: String

        public init(comment: String, id: String, s3CanonicalUserId: String) {
            self.comment = comment
            self.id = id
            self.s3CanonicalUserId = s3CanonicalUserId
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case id = "Id"
            case s3CanonicalUserId = "S3CanonicalUserId"
        }
    }

    public struct ContentTypeProfile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentType", required: true, type: .string), 
            AWSShapeMember(label: "Format", required: true, type: .enum), 
            AWSShapeMember(label: "ProfileId", required: false, type: .string)
        ]
        /// The content type for a field-level encryption content type-profile mapping. 
        public let contentType: String
        /// The format for a field-level encryption content type-profile mapping. 
        public let format: Format
        /// The profile ID for a field-level encryption content type-profile mapping. 
        public let profileId: String?

        public init(contentType: String, format: Format, profileId: String? = nil) {
            self.contentType = contentType
            self.format = format
            self.profileId = profileId
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "ContentType"
            case format = "Format"
            case profileId = "ProfileId"
        }
    }

    public struct ContentTypeProfileConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentTypeProfiles", required: false, type: .structure), 
            AWSShapeMember(label: "ForwardWhenContentTypeIsUnknown", required: true, type: .boolean)
        ]
        /// The configuration for a field-level encryption content type-profile. 
        public let contentTypeProfiles: ContentTypeProfiles?
        /// The setting in a field-level encryption content type-profile mapping that specifies what to do when an unknown content type is provided for the profile. If true, content is forwarded without being encrypted when the content type is unknown. If false (the default), an error is returned when the content type is unknown. 
        public let forwardWhenContentTypeIsUnknown: Bool

        public init(contentTypeProfiles: ContentTypeProfiles? = nil, forwardWhenContentTypeIsUnknown: Bool) {
            self.contentTypeProfiles = contentTypeProfiles
            self.forwardWhenContentTypeIsUnknown = forwardWhenContentTypeIsUnknown
        }

        private enum CodingKeys: String, CodingKey {
            case contentTypeProfiles = "ContentTypeProfiles"
            case forwardWhenContentTypeIsUnknown = "ForwardWhenContentTypeIsUnknown"
        }
    }

    public struct ContentTypeProfiles: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"ContentTypeProfile")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// Items in a field-level encryption content type-profile mapping. 
        public let items: [ContentTypeProfile]?
        /// The number of field-level encryption content type-profile mappings. 
        public let quantity: Int32

        public init(items: [ContentTypeProfile]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CookieNames: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"Name")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains one Name element for each cookie that you want CloudFront to forward to the origin for this cache behavior.
        public let items: [String]?
        /// The number of different cookies that you want CloudFront to forward to the origin for this cache behavior.
        public let quantity: Int32

        public init(items: [String]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CookiePreference: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Forward", required: true, type: .enum), 
            AWSShapeMember(label: "WhitelistedNames", required: false, type: .structure)
        ]
        /// Specifies which cookies to forward to the origin for this cache behavior: all, none, or the list of cookies specified in the WhitelistedNames complex type. Amazon S3 doesn't process cookies. When the cache behavior is forwarding requests to an Amazon S3 origin, specify none for the Forward element. 
        public let forward: ItemSelection
        /// Required if you specify whitelist for the value of Forward:. A complex type that specifies how many different cookies you want CloudFront to forward to the origin for this cache behavior and, if you want to forward selected cookies, the names of those cookies. If you specify all or none for the value of Forward, omit WhitelistedNames. If you change the value of Forward from whitelist to all or none and you don't delete the WhitelistedNames element and its child elements, CloudFront deletes them automatically. For the current limit on the number of cookie names that you can whitelist for each cache behavior, see  CloudFront Limits in the AWS General Reference.
        public let whitelistedNames: CookieNames?

        public init(forward: ItemSelection, whitelistedNames: CookieNames? = nil) {
            self.forward = forward
            self.whitelistedNames = whitelistedNames
        }

        private enum CodingKeys: String, CodingKey {
            case forward = "Forward"
            case whitelistedNames = "WhitelistedNames"
        }
    }

    public struct CreateCloudFrontOriginAccessIdentityRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentityConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFrontOriginAccessIdentityConfig", location: .body(locationName: "CloudFrontOriginAccessIdentityConfig"), required: true, type: .structure)
        ]
        /// The current configuration information for the identity.
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig

        public init(cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig) {
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontOriginAccessIdentityConfig = "CloudFrontOriginAccessIdentityConfig"
        }
    }

    public struct CreateCloudFrontOriginAccessIdentityResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentity"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFrontOriginAccessIdentity", required: false, type: .structure), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string)
        ]
        /// The origin access identity's information.
        public let cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity?
        /// The current version of the origin access identity created.
        public let eTag: String?
        /// The fully qualified URI of the new origin access identity just created. For example: https://cloudfront.amazonaws.com/2010-11-01/origin-access-identity/cloudfront/E74FTE3AJFJ256A.
        public let location: String?

        public init(cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity? = nil, eTag: String? = nil, location: String? = nil) {
            self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
            self.eTag = eTag
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontOriginAccessIdentity = "CloudFrontOriginAccessIdentity"
            case eTag = "ETag"
            case location = "Location"
        }
    }

    public struct CreateDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "DistributionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionConfig", location: .body(locationName: "DistributionConfig"), required: true, type: .structure)
        ]
        /// The distribution's configuration information.
        public let distributionConfig: DistributionConfig

        public init(distributionConfig: DistributionConfig) {
            self.distributionConfig = distributionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case distributionConfig = "DistributionConfig"
        }
    }

    public struct CreateDistributionResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Distribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Distribution", required: false, type: .structure), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string)
        ]
        /// The distribution's information.
        public let distribution: Distribution?
        /// The current version of the distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new distribution resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/distribution/EDFDVBD632BHDS5.
        public let location: String?

        public init(distribution: Distribution? = nil, eTag: String? = nil, location: String? = nil) {
            self.distribution = distribution
            self.eTag = eTag
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case distribution = "Distribution"
            case eTag = "ETag"
            case location = "Location"
        }
    }

    public struct CreateDistributionWithTagsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "DistributionConfigWithTags"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionConfigWithTags", location: .body(locationName: "DistributionConfigWithTags"), required: true, type: .structure)
        ]
        /// The distribution's configuration information. 
        public let distributionConfigWithTags: DistributionConfigWithTags

        public init(distributionConfigWithTags: DistributionConfigWithTags) {
            self.distributionConfigWithTags = distributionConfigWithTags
        }

        private enum CodingKeys: String, CodingKey {
            case distributionConfigWithTags = "DistributionConfigWithTags"
        }
    }

    public struct CreateDistributionWithTagsResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Distribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Distribution", required: false, type: .structure), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string)
        ]
        /// The distribution's information. 
        public let distribution: Distribution?
        /// The current version of the distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new distribution resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/distribution/EDFDVBD632BHDS5. 
        public let location: String?

        public init(distribution: Distribution? = nil, eTag: String? = nil, location: String? = nil) {
            self.distribution = distribution
            self.eTag = eTag
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case distribution = "Distribution"
            case eTag = "ETag"
            case location = "Location"
        }
    }

    public struct CreateFieldLevelEncryptionConfigRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryptionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FieldLevelEncryptionConfig", location: .body(locationName: "FieldLevelEncryptionConfig"), required: true, type: .structure)
        ]
        /// The request to create a new field-level encryption configuration.
        public let fieldLevelEncryptionConfig: FieldLevelEncryptionConfig

        public init(fieldLevelEncryptionConfig: FieldLevelEncryptionConfig) {
            self.fieldLevelEncryptionConfig = fieldLevelEncryptionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case fieldLevelEncryptionConfig = "FieldLevelEncryptionConfig"
        }
    }

    public struct CreateFieldLevelEncryptionConfigResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryption"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "FieldLevelEncryption", required: false, type: .structure), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string)
        ]
        /// The current version of the field level encryption configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Returned when you create a new field-level encryption configuration.
        public let fieldLevelEncryption: FieldLevelEncryption?
        /// The fully qualified URI of the new configuration resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/field-level-encryption-config/EDFDVBD632BHDS5.
        public let location: String?

        public init(eTag: String? = nil, fieldLevelEncryption: FieldLevelEncryption? = nil, location: String? = nil) {
            self.eTag = eTag
            self.fieldLevelEncryption = fieldLevelEncryption
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case fieldLevelEncryption = "FieldLevelEncryption"
            case location = "Location"
        }
    }

    public struct CreateFieldLevelEncryptionProfileRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryptionProfileConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FieldLevelEncryptionProfileConfig", location: .body(locationName: "FieldLevelEncryptionProfileConfig"), required: true, type: .structure)
        ]
        /// The request to create a field-level encryption profile.
        public let fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig

        public init(fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig) {
            self.fieldLevelEncryptionProfileConfig = fieldLevelEncryptionProfileConfig
        }

        private enum CodingKeys: String, CodingKey {
            case fieldLevelEncryptionProfileConfig = "FieldLevelEncryptionProfileConfig"
        }
    }

    public struct CreateFieldLevelEncryptionProfileResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryptionProfile"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "FieldLevelEncryptionProfile", required: false, type: .structure), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string)
        ]
        /// The current version of the field level encryption profile. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Returned when you create a new field-level encryption profile.
        public let fieldLevelEncryptionProfile: FieldLevelEncryptionProfile?
        /// The fully qualified URI of the new profile resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/field-level-encryption-profile/EDFDVBD632BHDS5.
        public let location: String?

        public init(eTag: String? = nil, fieldLevelEncryptionProfile: FieldLevelEncryptionProfile? = nil, location: String? = nil) {
            self.eTag = eTag
            self.fieldLevelEncryptionProfile = fieldLevelEncryptionProfile
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case fieldLevelEncryptionProfile = "FieldLevelEncryptionProfile"
            case location = "Location"
        }
    }

    public struct CreateInvalidationRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "InvalidationBatch"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionId", location: .uri(locationName: "DistributionId"), required: true, type: .string), 
            AWSShapeMember(label: "InvalidationBatch", location: .body(locationName: "InvalidationBatch"), required: true, type: .structure)
        ]
        /// The distribution's id.
        public let distributionId: String
        /// The batch information for the invalidation.
        public let invalidationBatch: InvalidationBatch

        public init(distributionId: String, invalidationBatch: InvalidationBatch) {
            self.distributionId = distributionId
            self.invalidationBatch = invalidationBatch
        }

        private enum CodingKeys: String, CodingKey {
            case distributionId = "DistributionId"
            case invalidationBatch = "InvalidationBatch"
        }
    }

    public struct CreateInvalidationResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Invalidation"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Invalidation", required: false, type: .structure), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string)
        ]
        /// The invalidation's information.
        public let invalidation: Invalidation?
        /// The fully qualified URI of the distribution and invalidation batch request, including the Invalidation ID.
        public let location: String?

        public init(invalidation: Invalidation? = nil, location: String? = nil) {
            self.invalidation = invalidation
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case invalidation = "Invalidation"
            case location = "Location"
        }
    }

    public struct CreatePublicKeyRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "PublicKeyConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicKeyConfig", location: .body(locationName: "PublicKeyConfig"), required: true, type: .structure)
        ]
        /// The request to add a public key to CloudFront.
        public let publicKeyConfig: PublicKeyConfig

        public init(publicKeyConfig: PublicKeyConfig) {
            self.publicKeyConfig = publicKeyConfig
        }

        private enum CodingKeys: String, CodingKey {
            case publicKeyConfig = "PublicKeyConfig"
        }
    }

    public struct CreatePublicKeyResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "PublicKey"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string), 
            AWSShapeMember(label: "PublicKey", required: false, type: .structure)
        ]
        /// The current version of the public key. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The fully qualified URI of the new public key resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/cloudfront-public-key/EDFDVBD632BHDS5.
        public let location: String?
        /// Returned when you add a public key.
        public let publicKey: PublicKey?

        public init(eTag: String? = nil, location: String? = nil, publicKey: PublicKey? = nil) {
            self.eTag = eTag
            self.location = location
            self.publicKey = publicKey
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case location = "Location"
            case publicKey = "PublicKey"
        }
    }

    public struct CreateStreamingDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistributionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StreamingDistributionConfig", location: .body(locationName: "StreamingDistributionConfig"), required: true, type: .structure)
        ]
        /// The streaming distribution's configuration information.
        public let streamingDistributionConfig: StreamingDistributionConfig

        public init(streamingDistributionConfig: StreamingDistributionConfig) {
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case streamingDistributionConfig = "StreamingDistributionConfig"
        }
    }

    public struct CreateStreamingDistributionResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string), 
            AWSShapeMember(label: "StreamingDistribution", required: false, type: .structure)
        ]
        /// The current version of the streaming distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new streaming distribution resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/streaming-distribution/EGTXBD79H29TRA8.
        public let location: String?
        /// The streaming distribution's information.
        public let streamingDistribution: StreamingDistribution?

        public init(eTag: String? = nil, location: String? = nil, streamingDistribution: StreamingDistribution? = nil) {
            self.eTag = eTag
            self.location = location
            self.streamingDistribution = streamingDistribution
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case location = "Location"
            case streamingDistribution = "StreamingDistribution"
        }
    }

    public struct CreateStreamingDistributionWithTagsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistributionConfigWithTags"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StreamingDistributionConfigWithTags", location: .body(locationName: "StreamingDistributionConfigWithTags"), required: true, type: .structure)
        ]
        ///  The streaming distribution's configuration information. 
        public let streamingDistributionConfigWithTags: StreamingDistributionConfigWithTags

        public init(streamingDistributionConfigWithTags: StreamingDistributionConfigWithTags) {
            self.streamingDistributionConfigWithTags = streamingDistributionConfigWithTags
        }

        private enum CodingKeys: String, CodingKey {
            case streamingDistributionConfigWithTags = "StreamingDistributionConfigWithTags"
        }
    }

    public struct CreateStreamingDistributionWithTagsResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .header(locationName: "Location"), required: false, type: .string), 
            AWSShapeMember(label: "StreamingDistribution", required: false, type: .structure)
        ]
        /// The current version of the distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new streaming distribution resource just created. For example: https://cloudfront.amazonaws.com/2010-11-01/streaming-distribution/EGTXBD79H29TRA8.
        public let location: String?
        /// The streaming distribution's information. 
        public let streamingDistribution: StreamingDistribution?

        public init(eTag: String? = nil, location: String? = nil, streamingDistribution: StreamingDistribution? = nil) {
            self.eTag = eTag
            self.location = location
            self.streamingDistribution = streamingDistribution
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case location = "Location"
            case streamingDistribution = "StreamingDistribution"
        }
    }

    public struct CustomErrorResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorCachingMinTTL", required: false, type: .long), 
            AWSShapeMember(label: "ErrorCode", required: true, type: .integer), 
            AWSShapeMember(label: "ResponseCode", required: false, type: .string), 
            AWSShapeMember(label: "ResponsePagePath", required: false, type: .string)
        ]
        /// The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ErrorCode. When this time period has elapsed, CloudFront queries your origin to see whether the problem that caused the error has been resolved and the requested object is now available. If you don't want to specify a value, include an empty element, &lt;ErrorCachingMinTTL&gt;, in the XML document. For more information, see Customizing Error Responses in the Amazon CloudFront Developer Guide.
        public let errorCachingMinTTL: Int64?
        /// The HTTP status code for which you want to specify a custom error page and/or a caching duration.
        public let errorCode: Int32
        /// The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. There are a variety of reasons that you might want CloudFront to return a status code different from the status code that your origin returned to CloudFront, for example:   Some Internet devices (some firewalls and corporate proxies, for example) intercept HTTP 4xx and 5xx and prevent the response from being returned to the viewer. If you substitute 200, the response typically won't be intercepted.   If you don't care about distinguishing among different client errors or server errors, you can specify 400 or 500 as the ResponseCode for all 4xx or 5xx errors.   You might want to return a 200 status code (OK) and static website so your customers don't know that your website is down.   If you specify a value for ResponseCode, you must also specify a value for ResponsePagePath. If you don't want to specify a value, include an empty element, &lt;ResponseCode&gt;, in the XML document.
        public let responseCode: String?
        /// The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status code specified by ErrorCode, for example, /4xx-errors/403-forbidden.html. If you want to store your objects and your custom error pages in different locations, your distribution must include a cache behavior for which the following is true:   The value of PathPattern matches the path to your custom error messages. For example, suppose you saved custom error pages for 4xx errors in an Amazon S3 bucket in a directory named /4xx-errors. Your distribution must include a cache behavior for which the path pattern routes requests for your custom error pages to that location, for example, /4xx-errors/*.    The value of TargetOriginId specifies the value of the ID element for the origin that contains your custom error pages.   If you specify a value for ResponsePagePath, you must also specify a value for ResponseCode. If you don't want to specify a value, include an empty element, &lt;ResponsePagePath&gt;, in the XML document. We recommend that you store custom error pages in an Amazon S3 bucket. If you store custom error pages on an HTTP server and the server starts to return 5xx errors, CloudFront can't get the files that you want to return to viewers because the origin server is unavailable.
        public let responsePagePath: String?

        public init(errorCachingMinTTL: Int64? = nil, errorCode: Int32, responseCode: String? = nil, responsePagePath: String? = nil) {
            self.errorCachingMinTTL = errorCachingMinTTL
            self.errorCode = errorCode
            self.responseCode = responseCode
            self.responsePagePath = responsePagePath
        }

        private enum CodingKeys: String, CodingKey {
            case errorCachingMinTTL = "ErrorCachingMinTTL"
            case errorCode = "ErrorCode"
            case responseCode = "ResponseCode"
            case responsePagePath = "ResponsePagePath"
        }
    }

    public struct CustomErrorResponses: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"CustomErrorResponse")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains a CustomErrorResponse element for each HTTP status code for which you want to specify a custom error page and/or a caching duration. 
        public let items: [CustomErrorResponse]?
        /// The number of HTTP status codes for which you want to specify a custom error page and/or a caching duration. If Quantity is 0, you can omit Items.
        public let quantity: Int32

        public init(items: [CustomErrorResponse]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CustomHeaders: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"OriginCustomHeader")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        ///  Optional: A list that contains one OriginCustomHeader element for each custom header that you want CloudFront to forward to the origin. If Quantity is 0, omit Items.
        public let items: [OriginCustomHeader]?
        /// The number of custom headers, if any, for this distribution.
        public let quantity: Int32

        public init(items: [OriginCustomHeader]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CustomOriginConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HTTPPort", required: true, type: .integer), 
            AWSShapeMember(label: "HTTPSPort", required: true, type: .integer), 
            AWSShapeMember(label: "OriginKeepaliveTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "OriginProtocolPolicy", required: true, type: .enum), 
            AWSShapeMember(label: "OriginReadTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "OriginSslProtocols", required: false, type: .structure)
        ]
        /// The HTTP port the custom origin listens on.
        public let hTTPPort: Int32
        /// The HTTPS port the custom origin listens on.
        public let hTTPSPort: Int32
        /// You can create a custom keep-alive timeout. All timeout units are in seconds. The default keep-alive timeout is 5 seconds, but you can configure custom timeout lengths using the CloudFront API. The minimum timeout length is 1 second; the maximum is 60 seconds. If you need to increase the maximum time limit, contact the AWS Support Center.
        public let originKeepaliveTimeout: Int32?
        /// The origin protocol policy to apply to your origin.
        public let originProtocolPolicy: OriginProtocolPolicy
        /// You can create a custom origin read timeout. All timeout units are in seconds. The default origin read timeout is 30 seconds, but you can configure custom timeout lengths using the CloudFront API. The minimum timeout length is 4 seconds; the maximum is 60 seconds. If you need to increase the maximum time limit, contact the AWS Support Center.
        public let originReadTimeout: Int32?
        /// The SSL/TLS protocols that you want CloudFront to use when communicating with your origin over HTTPS.
        public let originSslProtocols: OriginSslProtocols?

        public init(hTTPPort: Int32, hTTPSPort: Int32, originKeepaliveTimeout: Int32? = nil, originProtocolPolicy: OriginProtocolPolicy, originReadTimeout: Int32? = nil, originSslProtocols: OriginSslProtocols? = nil) {
            self.hTTPPort = hTTPPort
            self.hTTPSPort = hTTPSPort
            self.originKeepaliveTimeout = originKeepaliveTimeout
            self.originProtocolPolicy = originProtocolPolicy
            self.originReadTimeout = originReadTimeout
            self.originSslProtocols = originSslProtocols
        }

        private enum CodingKeys: String, CodingKey {
            case hTTPPort = "HTTPPort"
            case hTTPSPort = "HTTPSPort"
            case originKeepaliveTimeout = "OriginKeepaliveTimeout"
            case originProtocolPolicy = "OriginProtocolPolicy"
            case originReadTimeout = "OriginReadTimeout"
            case originSslProtocols = "OriginSslProtocols"
        }
    }

    public struct DefaultCacheBehavior: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedMethods", required: false, type: .structure), 
            AWSShapeMember(label: "Compress", required: false, type: .boolean), 
            AWSShapeMember(label: "DefaultTTL", required: false, type: .long), 
            AWSShapeMember(label: "FieldLevelEncryptionId", required: false, type: .string), 
            AWSShapeMember(label: "ForwardedValues", required: true, type: .structure), 
            AWSShapeMember(label: "LambdaFunctionAssociations", required: false, type: .structure), 
            AWSShapeMember(label: "MaxTTL", required: false, type: .long), 
            AWSShapeMember(label: "MinTTL", required: true, type: .long), 
            AWSShapeMember(label: "SmoothStreaming", required: false, type: .boolean), 
            AWSShapeMember(label: "TargetOriginId", required: true, type: .string), 
            AWSShapeMember(label: "TrustedSigners", required: true, type: .structure), 
            AWSShapeMember(label: "ViewerProtocolPolicy", required: true, type: .enum)
        ]
        public let allowedMethods: AllowedMethods?
        /// Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify true; if not, specify false. For more information, see Serving Compressed Files in the Amazon CloudFront Developer Guide.
        public let compress: Bool?
        /// The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the Amazon CloudFront Developer Guide.
        public let defaultTTL: Int64?
        /// The value of ID for the field-level encryption configuration that you want CloudFront to use for encrypting specific fields of data for a cache behavior or for the default cache behavior in your distribution.
        public let fieldLevelEncryptionId: String?
        /// A complex type that specifies how CloudFront handles query strings and cookies.
        public let forwardedValues: ForwardedValues
        /// A complex type that contains zero or more Lambda function associations for a cache behavior.
        public let lambdaFunctionAssociations: LambdaFunctionAssociations?
        /// The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin adds HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the Amazon CloudFront Developer Guide.
        public let maxTTL: Int64?
        /// The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the Amazon CloudFront Developer Guide. You must specify 0 for MinTTL if you configure CloudFront to forward all headers to your origin (under Headers, if you specify 1 for Quantity and * for Name).
        public let minTTL: Int64
        /// Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify true; if not, specify false. If you specify true for SmoothStreaming, you can still distribute other content using this cache behavior if the content matches the value of PathPattern. 
        public let smoothStreaming: Bool?
        /// The value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior in your distribution.
        public let targetOriginId: String
        /// A complex type that specifies the AWS accounts, if any, that you want to allow to create signed URLs for private content. If you want to require signed URLs in requests for objects in the target origin that match the PathPattern for this cache behavior, specify true for Enabled, and specify the applicable values for Quantity and Items. For more information, see Serving Private Content through CloudFront in the  Amazon CloudFront Developer Guide. If you don't want to require signed URLs in requests for objects that match PathPattern, specify false for Enabled and 0 for Quantity. Omit Items. To add, change, or remove one or more trusted signers, change Enabled to true (if it's currently false), change Quantity as applicable, and specify all of the trusted signers that you want to include in the updated distribution.
        public let trustedSigners: TrustedSigners
        /// The protocol that viewers can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. You can specify the following options:    allow-all: Viewers can use HTTP or HTTPS.    redirect-to-https: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL.    https-only: If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden).   For more information about requiring the HTTPS protocol, see Using an HTTPS Connection to Access Your Objects in the Amazon CloudFront Developer Guide.  The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the Amazon CloudFront Developer Guide. 
        public let viewerProtocolPolicy: ViewerProtocolPolicy

        public init(allowedMethods: AllowedMethods? = nil, compress: Bool? = nil, defaultTTL: Int64? = nil, fieldLevelEncryptionId: String? = nil, forwardedValues: ForwardedValues, lambdaFunctionAssociations: LambdaFunctionAssociations? = nil, maxTTL: Int64? = nil, minTTL: Int64, smoothStreaming: Bool? = nil, targetOriginId: String, trustedSigners: TrustedSigners, viewerProtocolPolicy: ViewerProtocolPolicy) {
            self.allowedMethods = allowedMethods
            self.compress = compress
            self.defaultTTL = defaultTTL
            self.fieldLevelEncryptionId = fieldLevelEncryptionId
            self.forwardedValues = forwardedValues
            self.lambdaFunctionAssociations = lambdaFunctionAssociations
            self.maxTTL = maxTTL
            self.minTTL = minTTL
            self.smoothStreaming = smoothStreaming
            self.targetOriginId = targetOriginId
            self.trustedSigners = trustedSigners
            self.viewerProtocolPolicy = viewerProtocolPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case allowedMethods = "AllowedMethods"
            case compress = "Compress"
            case defaultTTL = "DefaultTTL"
            case fieldLevelEncryptionId = "FieldLevelEncryptionId"
            case forwardedValues = "ForwardedValues"
            case lambdaFunctionAssociations = "LambdaFunctionAssociations"
            case maxTTL = "MaxTTL"
            case minTTL = "MinTTL"
            case smoothStreaming = "SmoothStreaming"
            case targetOriginId = "TargetOriginId"
            case trustedSigners = "TrustedSigners"
            case viewerProtocolPolicy = "ViewerProtocolPolicy"
        }
    }

    public struct DeleteCloudFrontOriginAccessIdentityRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        /// The origin access identity's ID.
        public let id: String
        /// The value of the ETag header you received from a previous GET or PUT request. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case ifMatch = "If-Match"
        }
    }

    public struct DeleteDistributionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        /// The distribution ID. 
        public let id: String
        /// The value of the ETag header that you received when you disabled the distribution. For example: E2QWRUHAPOMQZL. 
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case ifMatch = "If-Match"
        }
    }

    public struct DeleteFieldLevelEncryptionConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        /// The ID of the configuration you want to delete from CloudFront.
        public let id: String
        /// The value of the ETag header that you received when retrieving the configuration identity to delete. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case ifMatch = "If-Match"
        }
    }

    public struct DeleteFieldLevelEncryptionProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        /// Request the ID of the profile you want to delete from CloudFront.
        public let id: String
        /// The value of the ETag header that you received when retrieving the profile to delete. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case ifMatch = "If-Match"
        }
    }

    public struct DeletePublicKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        /// The ID of the public key you want to remove from CloudFront.
        public let id: String
        /// The value of the ETag header that you received when retrieving the public key identity to delete. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case ifMatch = "If-Match"
        }
    }

    public struct DeleteStreamingDistributionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        /// The distribution ID. 
        public let id: String
        /// The value of the ETag header that you received when you disabled the streaming distribution. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case ifMatch = "If-Match"
        }
    }

    public struct Distribution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "ActiveTrustedSigners", required: true, type: .structure), 
            AWSShapeMember(label: "AliasICPRecordals", required: false, type: .list, encoding: .list(member:"AliasICPRecordal")), 
            AWSShapeMember(label: "DistributionConfig", required: true, type: .structure), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "InProgressInvalidationBatches", required: true, type: .integer), 
            AWSShapeMember(label: "LastModifiedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "Status", required: true, type: .string)
        ]
        /// The ARN (Amazon Resource Name) for the distribution. For example: arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where 123456789012 is your AWS account ID.
        public let arn: String
        /// CloudFront automatically adds this element to the response only if you've set up the distribution to serve private content with signed URLs. The element lists the key pair IDs that CloudFront is aware of for each trusted signer. The Signer child element lists the AWS account number of the trusted signer (or an empty Self element if the signer is you). The Signer element also includes the IDs of any active key pairs associated with the trusted signer's AWS account. If no KeyPairId element appears for a Signer, that signer can't create working signed URLs.
        public let activeTrustedSigners: ActiveTrustedSigners
        /// AWS services in China customers must file for an Internet Content Provider (ICP) recordal if they want to serve content publicly on an alternate domain name, also known as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP recordal status for CNAMEs associated with distributions. For more information about ICP recordals, see  Signup, Accounts, and Credentials in Getting Started with AWS services in China.
        public let aliasICPRecordals: [AliasICPRecordal]?
        /// The current configuration information for the distribution. Send a GET request to the /CloudFront API version/distribution ID/config resource.
        public let distributionConfig: DistributionConfig
        /// The domain name corresponding to the distribution, for example, d111111abcdef8.cloudfront.net. 
        public let domainName: String
        /// The identifier for the distribution. For example: EDFDVBD632BHDS5. 
        public let id: String
        /// The number of invalidation batches currently in progress. 
        public let inProgressInvalidationBatches: Int32
        /// The date and time the distribution was last modified. 
        public let lastModifiedTime: TimeStamp
        /// This response element indicates the current status of the distribution. When the status is Deployed, the distribution's information is fully propagated to all CloudFront edge locations. 
        public let status: String

        public init(activeTrustedSigners: ActiveTrustedSigners, aliasICPRecordals: [AliasICPRecordal]? = nil, arn: String, distributionConfig: DistributionConfig, domainName: String, id: String, inProgressInvalidationBatches: Int32, lastModifiedTime: TimeStamp, status: String) {
            self.arn = arn
            self.activeTrustedSigners = activeTrustedSigners
            self.aliasICPRecordals = aliasICPRecordals
            self.distributionConfig = distributionConfig
            self.domainName = domainName
            self.id = id
            self.inProgressInvalidationBatches = inProgressInvalidationBatches
            self.lastModifiedTime = lastModifiedTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case activeTrustedSigners = "ActiveTrustedSigners"
            case aliasICPRecordals = "AliasICPRecordals"
            case distributionConfig = "DistributionConfig"
            case domainName = "DomainName"
            case id = "Id"
            case inProgressInvalidationBatches = "InProgressInvalidationBatches"
            case lastModifiedTime = "LastModifiedTime"
            case status = "Status"
        }
    }

    public struct DistributionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Aliases", required: false, type: .structure), 
            AWSShapeMember(label: "CacheBehaviors", required: false, type: .structure), 
            AWSShapeMember(label: "CallerReference", required: true, type: .string), 
            AWSShapeMember(label: "Comment", required: true, type: .string), 
            AWSShapeMember(label: "CustomErrorResponses", required: false, type: .structure), 
            AWSShapeMember(label: "DefaultCacheBehavior", required: true, type: .structure), 
            AWSShapeMember(label: "DefaultRootObject", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "HttpVersion", required: false, type: .enum), 
            AWSShapeMember(label: "IsIPV6Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Logging", required: false, type: .structure), 
            AWSShapeMember(label: "OriginGroups", required: false, type: .structure), 
            AWSShapeMember(label: "Origins", required: true, type: .structure), 
            AWSShapeMember(label: "PriceClass", required: false, type: .enum), 
            AWSShapeMember(label: "Restrictions", required: false, type: .structure), 
            AWSShapeMember(label: "ViewerCertificate", required: false, type: .structure), 
            AWSShapeMember(label: "WebACLId", required: false, type: .string)
        ]
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
        public let aliases: Aliases?
        /// A complex type that contains zero or more CacheBehavior elements. 
        public let cacheBehaviors: CacheBehaviors?
        /// A unique value (for example, a date-time stamp) that ensures that the request can't be replayed. If the value of CallerReference is new (regardless of the content of the DistributionConfig object), CloudFront creates a new distribution. If CallerReference is a value that you already sent in a previous request to create a distribution, CloudFront returns a DistributionAlreadyExists error.
        public let callerReference: String
        /// Any comments you want to include about the distribution. If you don't want to specify a comment, include an empty Comment element. To delete an existing comment, update the distribution configuration and include an empty Comment element. To add or change a comment, update the distribution configuration and specify the new comment.
        public let comment: String
        /// A complex type that controls the following:   Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.   How long CloudFront caches HTTP status codes in the 4xx and 5xx range.   For more information about custom error pages, see Customizing Error Responses in the Amazon CloudFront Developer Guide.
        public let customErrorResponses: CustomErrorResponses?
        /// A complex type that describes the default cache behavior if you don't specify a CacheBehavior element or if files don't match any of the values of PathPattern in CacheBehavior elements. You must create exactly one default cache behavior.
        public let defaultCacheBehavior: DefaultCacheBehavior
        /// The object that you want CloudFront to request from your origin (for example, index.html) when a viewer requests the root URL for your distribution (http://www.example.com) instead of an object in your distribution (http://www.example.com/product-description.html). Specifying a default root object avoids exposing the contents of your distribution. Specify only the object name, for example, index.html. Don't add a / before the object name. If you don't want to specify a default root object when you create a distribution, include an empty DefaultRootObject element. To delete the default root object from an existing distribution, update the distribution configuration and include an empty DefaultRootObject element. To replace the default root object, update the distribution configuration and specify the new object. For more information about the default root object, see Creating a Default Root Object in the Amazon CloudFront Developer Guide.
        public let defaultRootObject: String?
        /// From this field, you can enable or disable the selected distribution.
        public let enabled: Bool
        /// (Optional) Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is http2. Viewers that don't support HTTP/2 automatically use an earlier HTTP version. For viewers and CloudFront to use HTTP/2, viewers must support TLS 1.2 or later, and must support Server Name Identification (SNI). In general, configuring CloudFront to communicate with viewers using HTTP/2 reduces latency. You can improve performance by optimizing for HTTP/2. For more information, do an Internet search for "http/2 optimization." 
        public let httpVersion: HttpVersion?
        /// If you want CloudFront to respond to IPv6 DNS requests with an IPv6 address for your distribution, specify true. If you specify false, CloudFront responds to IPv6 DNS requests with the DNS response code NOERROR and with no IP addresses. This allows viewers to submit a second request, for an IPv4 address for your distribution.  In general, you should enable IPv6 if you have users on IPv6 networks who want to access your content. However, if you're using signed URLs or signed cookies to restrict access to your content, and if you're using a custom policy that includes the IpAddress parameter to restrict the IP addresses that can access your content, don't enable IPv6. If you want to restrict access to some content by IP address and not restrict access to other content (or restrict access but not by IP address), you can create two distributions. For more information, see Creating a Signed URL Using a Custom Policy in the Amazon CloudFront Developer Guide. If you're using an Amazon Route 53 alias resource record set to route traffic to your CloudFront distribution, you need to create a second alias resource record set when both of the following are true:   You enable IPv6 for the distribution   You're using alternate domain names in the URLs for your objects   For more information, see Routing Traffic to an Amazon CloudFront Web Distribution by Using Your Domain Name in the Amazon Route 53 Developer Guide. If you created a CNAME resource record set, either with Amazon Route 53 or with another DNS service, you don't need to make any changes. A CNAME record will route traffic to your distribution regardless of the IP address format of the viewer request.
        public let isIPV6Enabled: Bool?
        /// A complex type that controls whether access logs are written for the distribution. For more information about logging, see Access Logs in the Amazon CloudFront Developer Guide.
        public let logging: LoggingConfig?
        ///  A complex type that contains information about origin groups for this distribution.
        public let originGroups: OriginGroups?
        /// A complex type that contains information about origins for this distribution. 
        public let origins: Origins
        /// The price class that corresponds with the maximum price that you want to pay for CloudFront service. If you specify PriceClass_All, CloudFront responds to requests for your objects from all CloudFront edge locations. If you specify a price class other than PriceClass_All, CloudFront serves your objects from the CloudFront edge location that has the lowest latency among the edge locations in your price class. Viewers who are in or near regions that are excluded from your specified price class may encounter slower performance. For more information about price classes, see Choosing the Price Class for a CloudFront Distribution in the Amazon CloudFront Developer Guide. For information about CloudFront pricing, including how price classes (such as Price Class 100) map to CloudFront regions, see Amazon CloudFront Pricing. For price class information, scroll down to see the table at the bottom of the page.
        public let priceClass: PriceClass?
        /// A complex type that identifies ways in which you want to restrict distribution of your content.
        public let restrictions: Restrictions?
        /// A complex type that specifies whether you want viewers to use HTTP or HTTPS to request your objects, whether you're using an alternate domain name with HTTPS, and if so, if you're using AWS Certificate Manager (ACM) or a third-party certificate authority.
        public let viewerCertificate: ViewerCertificate?
        /// A unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution. AWS WAF is a web application firewall that lets you monitor the HTTP and HTTPS requests that are forwarded to CloudFront, and lets you control access to your content. Based on conditions that you specify, such as the IP addresses that requests originate from or the values of query strings, CloudFront responds to requests either with the requested content or with an HTTP 403 status code (Forbidden). You can also configure CloudFront to return a custom error page when a request is blocked. For more information about AWS WAF, see the AWS WAF Developer Guide. 
        public let webACLId: String?

        public init(aliases: Aliases? = nil, cacheBehaviors: CacheBehaviors? = nil, callerReference: String, comment: String, customErrorResponses: CustomErrorResponses? = nil, defaultCacheBehavior: DefaultCacheBehavior, defaultRootObject: String? = nil, enabled: Bool, httpVersion: HttpVersion? = nil, isIPV6Enabled: Bool? = nil, logging: LoggingConfig? = nil, originGroups: OriginGroups? = nil, origins: Origins, priceClass: PriceClass? = nil, restrictions: Restrictions? = nil, viewerCertificate: ViewerCertificate? = nil, webACLId: String? = nil) {
            self.aliases = aliases
            self.cacheBehaviors = cacheBehaviors
            self.callerReference = callerReference
            self.comment = comment
            self.customErrorResponses = customErrorResponses
            self.defaultCacheBehavior = defaultCacheBehavior
            self.defaultRootObject = defaultRootObject
            self.enabled = enabled
            self.httpVersion = httpVersion
            self.isIPV6Enabled = isIPV6Enabled
            self.logging = logging
            self.originGroups = originGroups
            self.origins = origins
            self.priceClass = priceClass
            self.restrictions = restrictions
            self.viewerCertificate = viewerCertificate
            self.webACLId = webACLId
        }

        private enum CodingKeys: String, CodingKey {
            case aliases = "Aliases"
            case cacheBehaviors = "CacheBehaviors"
            case callerReference = "CallerReference"
            case comment = "Comment"
            case customErrorResponses = "CustomErrorResponses"
            case defaultCacheBehavior = "DefaultCacheBehavior"
            case defaultRootObject = "DefaultRootObject"
            case enabled = "Enabled"
            case httpVersion = "HttpVersion"
            case isIPV6Enabled = "IsIPV6Enabled"
            case logging = "Logging"
            case originGroups = "OriginGroups"
            case origins = "Origins"
            case priceClass = "PriceClass"
            case restrictions = "Restrictions"
            case viewerCertificate = "ViewerCertificate"
            case webACLId = "WebACLId"
        }
    }

    public struct DistributionConfigWithTags: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionConfig", required: true, type: .structure), 
            AWSShapeMember(label: "Tags", required: true, type: .structure)
        ]
        /// A distribution configuration.
        public let distributionConfig: DistributionConfig
        /// A complex type that contains zero or more Tag elements.
        public let tags: Tags

        public init(distributionConfig: DistributionConfig, tags: Tags) {
            self.distributionConfig = distributionConfig
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case distributionConfig = "DistributionConfig"
            case tags = "Tags"
        }
    }

    public struct DistributionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsTruncated", required: true, type: .boolean), 
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"DistributionSummary")), 
            AWSShapeMember(label: "Marker", required: true, type: .string), 
            AWSShapeMember(label: "MaxItems", required: true, type: .integer), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A flag that indicates whether more distributions remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more distributions in the list.
        public let isTruncated: Bool
        /// A complex type that contains one DistributionSummary element for each distribution that was created by the current AWS account.
        public let items: [DistributionSummary]?
        /// The value you provided for the Marker request parameter.
        public let marker: String
        /// The value you provided for the MaxItems request parameter.
        public let maxItems: Int32
        /// If IsTruncated is true, this element is present and contains the value you can use for the Marker request parameter to continue listing your distributions where they left off. 
        public let nextMarker: String?
        /// The number of distributions that were created by the current AWS account. 
        public let quantity: Int32

        public init(isTruncated: Bool, items: [DistributionSummary]? = nil, marker: String, maxItems: Int32, nextMarker: String? = nil, quantity: Int32) {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case items = "Items"
            case marker = "Marker"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct DistributionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "AliasICPRecordals", required: false, type: .list, encoding: .list(member:"AliasICPRecordal")), 
            AWSShapeMember(label: "Aliases", required: true, type: .structure), 
            AWSShapeMember(label: "CacheBehaviors", required: true, type: .structure), 
            AWSShapeMember(label: "Comment", required: true, type: .string), 
            AWSShapeMember(label: "CustomErrorResponses", required: true, type: .structure), 
            AWSShapeMember(label: "DefaultCacheBehavior", required: true, type: .structure), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "HttpVersion", required: true, type: .enum), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "IsIPV6Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "LastModifiedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "OriginGroups", required: false, type: .structure), 
            AWSShapeMember(label: "Origins", required: true, type: .structure), 
            AWSShapeMember(label: "PriceClass", required: true, type: .enum), 
            AWSShapeMember(label: "Restrictions", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .string), 
            AWSShapeMember(label: "ViewerCertificate", required: true, type: .structure), 
            AWSShapeMember(label: "WebACLId", required: true, type: .string)
        ]
        /// The ARN (Amazon Resource Name) for the distribution. For example: arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where 123456789012 is your AWS account ID.
        public let arn: String
        /// AWS services in China customers must file for an Internet Content Provider (ICP) recordal if they want to serve content publicly on an alternate domain name, also known as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP recordal status for CNAMEs associated with distributions. For more information about ICP recordals, see  Signup, Accounts, and Credentials in Getting Started with AWS services in China.
        public let aliasICPRecordals: [AliasICPRecordal]?
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
        public let aliases: Aliases
        /// A complex type that contains zero or more CacheBehavior elements.
        public let cacheBehaviors: CacheBehaviors
        /// The comment originally specified when this distribution was created.
        public let comment: String
        /// A complex type that contains zero or more CustomErrorResponses elements.
        public let customErrorResponses: CustomErrorResponses
        /// A complex type that describes the default cache behavior if you don't specify a CacheBehavior element or if files don't match any of the values of PathPattern in CacheBehavior elements. You must create exactly one default cache behavior.
        public let defaultCacheBehavior: DefaultCacheBehavior
        /// The domain name that corresponds to the distribution, for example, d111111abcdef8.cloudfront.net.
        public let domainName: String
        /// Whether the distribution is enabled to accept user requests for content.
        public let enabled: Bool
        ///  Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is http2. Viewers that don't support HTTP/2 will automatically use an earlier version.
        public let httpVersion: HttpVersion
        /// The identifier for the distribution. For example: EDFDVBD632BHDS5.
        public let id: String
        /// Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your distribution.
        public let isIPV6Enabled: Bool
        /// The date and time the distribution was last modified.
        public let lastModifiedTime: TimeStamp
        ///  A complex type that contains information about origin groups for this distribution.
        public let originGroups: OriginGroups?
        /// A complex type that contains information about origins for this distribution.
        public let origins: Origins
        /// A complex type that contains information about price class for this streaming distribution. 
        public let priceClass: PriceClass
        /// A complex type that identifies ways in which you want to restrict distribution of your content.
        public let restrictions: Restrictions
        /// The current status of the distribution. When the status is Deployed, the distribution's information is propagated to all CloudFront edge locations.
        public let status: String
        /// A complex type that specifies whether you want viewers to use HTTP or HTTPS to request your objects, whether you're using an alternate domain name with HTTPS, and if so, if you're using AWS Certificate Manager (ACM) or a third-party certificate authority.
        public let viewerCertificate: ViewerCertificate
        /// The Web ACL Id (if any) associated with the distribution.
        public let webACLId: String

        public init(aliasICPRecordals: [AliasICPRecordal]? = nil, aliases: Aliases, arn: String, cacheBehaviors: CacheBehaviors, comment: String, customErrorResponses: CustomErrorResponses, defaultCacheBehavior: DefaultCacheBehavior, domainName: String, enabled: Bool, httpVersion: HttpVersion, id: String, isIPV6Enabled: Bool, lastModifiedTime: TimeStamp, originGroups: OriginGroups? = nil, origins: Origins, priceClass: PriceClass, restrictions: Restrictions, status: String, viewerCertificate: ViewerCertificate, webACLId: String) {
            self.arn = arn
            self.aliasICPRecordals = aliasICPRecordals
            self.aliases = aliases
            self.cacheBehaviors = cacheBehaviors
            self.comment = comment
            self.customErrorResponses = customErrorResponses
            self.defaultCacheBehavior = defaultCacheBehavior
            self.domainName = domainName
            self.enabled = enabled
            self.httpVersion = httpVersion
            self.id = id
            self.isIPV6Enabled = isIPV6Enabled
            self.lastModifiedTime = lastModifiedTime
            self.originGroups = originGroups
            self.origins = origins
            self.priceClass = priceClass
            self.restrictions = restrictions
            self.status = status
            self.viewerCertificate = viewerCertificate
            self.webACLId = webACLId
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case aliasICPRecordals = "AliasICPRecordals"
            case aliases = "Aliases"
            case cacheBehaviors = "CacheBehaviors"
            case comment = "Comment"
            case customErrorResponses = "CustomErrorResponses"
            case defaultCacheBehavior = "DefaultCacheBehavior"
            case domainName = "DomainName"
            case enabled = "Enabled"
            case httpVersion = "HttpVersion"
            case id = "Id"
            case isIPV6Enabled = "IsIPV6Enabled"
            case lastModifiedTime = "LastModifiedTime"
            case originGroups = "OriginGroups"
            case origins = "Origins"
            case priceClass = "PriceClass"
            case restrictions = "Restrictions"
            case status = "Status"
            case viewerCertificate = "ViewerCertificate"
            case webACLId = "WebACLId"
        }
    }

    public struct EncryptionEntities: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"EncryptionEntity")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// An array of field patterns in a field-level encryption content type-profile mapping. 
        public let items: [EncryptionEntity]?
        /// Number of field pattern items in a field-level encryption content type-profile mapping. 
        public let quantity: Int32

        public init(items: [EncryptionEntity]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct EncryptionEntity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FieldPatterns", required: true, type: .structure), 
            AWSShapeMember(label: "ProviderId", required: true, type: .string), 
            AWSShapeMember(label: "PublicKeyId", required: true, type: .string)
        ]
        /// Field patterns in a field-level encryption content type profile specify the fields that you want to be encrypted. You can provide the full field name, or any beginning characters followed by a wildcard (*). You can't overlap field patterns. For example, you can't have both ABC* and AB*. Note that field patterns are case-sensitive. 
        public let fieldPatterns: FieldPatterns
        /// The provider associated with the public key being used for encryption. This value must also be provided with the private key for applications to be able to decrypt data.
        public let providerId: String
        /// The public key associated with a set of field-level encryption patterns, to be used when encrypting the fields that match the patterns. 
        public let publicKeyId: String

        public init(fieldPatterns: FieldPatterns, providerId: String, publicKeyId: String) {
            self.fieldPatterns = fieldPatterns
            self.providerId = providerId
            self.publicKeyId = publicKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case fieldPatterns = "FieldPatterns"
            case providerId = "ProviderId"
            case publicKeyId = "PublicKeyId"
        }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case viewerRequest = "viewer-request"
        case viewerResponse = "viewer-response"
        case originRequest = "origin-request"
        case originResponse = "origin-response"
        public var description: String { return self.rawValue }
    }

    public struct FieldLevelEncryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FieldLevelEncryptionConfig", required: true, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "LastModifiedTime", required: true, type: .timestamp)
        ]
        /// A complex data type that includes the profile configurations specified for field-level encryption. 
        public let fieldLevelEncryptionConfig: FieldLevelEncryptionConfig
        /// The configuration ID for a field-level encryption configuration which includes a set of profiles that specify certain selected data fields to be encrypted by specific public keys.
        public let id: String
        /// The last time the field-level encryption configuration was changed. 
        public let lastModifiedTime: TimeStamp

        public init(fieldLevelEncryptionConfig: FieldLevelEncryptionConfig, id: String, lastModifiedTime: TimeStamp) {
            self.fieldLevelEncryptionConfig = fieldLevelEncryptionConfig
            self.id = id
            self.lastModifiedTime = lastModifiedTime
        }

        private enum CodingKeys: String, CodingKey {
            case fieldLevelEncryptionConfig = "FieldLevelEncryptionConfig"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
        }
    }

    public struct FieldLevelEncryptionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CallerReference", required: true, type: .string), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "ContentTypeProfileConfig", required: false, type: .structure), 
            AWSShapeMember(label: "QueryArgProfileConfig", required: false, type: .structure)
        ]
        /// A unique number that ensures the request can't be replayed.
        public let callerReference: String
        /// An optional comment about the configuration.
        public let comment: String?
        /// A complex data type that specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.
        public let contentTypeProfileConfig: ContentTypeProfileConfig?
        /// A complex data type that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.
        public let queryArgProfileConfig: QueryArgProfileConfig?

        public init(callerReference: String, comment: String? = nil, contentTypeProfileConfig: ContentTypeProfileConfig? = nil, queryArgProfileConfig: QueryArgProfileConfig? = nil) {
            self.callerReference = callerReference
            self.comment = comment
            self.contentTypeProfileConfig = contentTypeProfileConfig
            self.queryArgProfileConfig = queryArgProfileConfig
        }

        private enum CodingKeys: String, CodingKey {
            case callerReference = "CallerReference"
            case comment = "Comment"
            case contentTypeProfileConfig = "ContentTypeProfileConfig"
            case queryArgProfileConfig = "QueryArgProfileConfig"
        }
    }

    public struct FieldLevelEncryptionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"FieldLevelEncryptionSummary")), 
            AWSShapeMember(label: "MaxItems", required: true, type: .integer), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// An array of field-level encryption items.
        public let items: [FieldLevelEncryptionSummary]?
        /// The maximum number of elements you want in the response body. 
        public let maxItems: Int32
        /// If there are more elements to be listed, this element is present and contains the value that you can use for the Marker request parameter to continue listing your configurations where you left off.
        public let nextMarker: String?
        /// The number of field-level encryption items.
        public let quantity: Int32

        public init(items: [FieldLevelEncryptionSummary]? = nil, maxItems: Int32, nextMarker: String? = nil, quantity: Int32) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct FieldLevelEncryptionProfile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FieldLevelEncryptionProfileConfig", required: true, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "LastModifiedTime", required: true, type: .timestamp)
        ]
        /// A complex data type that includes the profile name and the encryption entities for the field-level encryption profile.
        public let fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig
        /// The ID for a field-level encryption profile configuration which includes a set of profiles that specify certain selected data fields to be encrypted by specific public keys.
        public let id: String
        /// The last time the field-level encryption profile was updated.
        public let lastModifiedTime: TimeStamp

        public init(fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig, id: String, lastModifiedTime: TimeStamp) {
            self.fieldLevelEncryptionProfileConfig = fieldLevelEncryptionProfileConfig
            self.id = id
            self.lastModifiedTime = lastModifiedTime
        }

        private enum CodingKeys: String, CodingKey {
            case fieldLevelEncryptionProfileConfig = "FieldLevelEncryptionProfileConfig"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
        }
    }

    public struct FieldLevelEncryptionProfileConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CallerReference", required: true, type: .string), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "EncryptionEntities", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// A unique number that ensures that the request can't be replayed.
        public let callerReference: String
        /// An optional comment for the field-level encryption profile.
        public let comment: String?
        /// A complex data type of encryption entities for the field-level encryption profile that include the public key ID, provider, and field patterns for specifying which fields to encrypt with this key.
        public let encryptionEntities: EncryptionEntities
        /// Profile name for the field-level encryption profile.
        public let name: String

        public init(callerReference: String, comment: String? = nil, encryptionEntities: EncryptionEntities, name: String) {
            self.callerReference = callerReference
            self.comment = comment
            self.encryptionEntities = encryptionEntities
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case callerReference = "CallerReference"
            case comment = "Comment"
            case encryptionEntities = "EncryptionEntities"
            case name = "Name"
        }
    }

    public struct FieldLevelEncryptionProfileList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"FieldLevelEncryptionProfileSummary")), 
            AWSShapeMember(label: "MaxItems", required: true, type: .integer), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// The field-level encryption profile items.
        public let items: [FieldLevelEncryptionProfileSummary]?
        /// The maximum number of field-level encryption profiles you want in the response body. 
        public let maxItems: Int32
        /// If there are more elements to be listed, this element is present and contains the value that you can use for the Marker request parameter to continue listing your profiles where you left off.
        public let nextMarker: String?
        /// The number of field-level encryption profiles.
        public let quantity: Int32

        public init(items: [FieldLevelEncryptionProfileSummary]? = nil, maxItems: Int32, nextMarker: String? = nil, quantity: Int32) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct FieldLevelEncryptionProfileSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "EncryptionEntities", required: true, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "LastModifiedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// An optional comment for the field-level encryption profile summary.
        public let comment: String?
        /// A complex data type of encryption entities for the field-level encryption profile that include the public key ID, provider, and field patterns for specifying which fields to encrypt with this key.
        public let encryptionEntities: EncryptionEntities
        /// ID for the field-level encryption profile summary.
        public let id: String
        /// The time when the the field-level encryption profile summary was last updated.
        public let lastModifiedTime: TimeStamp
        /// Name for the field-level encryption profile summary.
        public let name: String

        public init(comment: String? = nil, encryptionEntities: EncryptionEntities, id: String, lastModifiedTime: TimeStamp, name: String) {
            self.comment = comment
            self.encryptionEntities = encryptionEntities
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case encryptionEntities = "EncryptionEntities"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
            case name = "Name"
        }
    }

    public struct FieldLevelEncryptionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "ContentTypeProfileConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "LastModifiedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "QueryArgProfileConfig", required: false, type: .structure)
        ]
        /// An optional comment about the field-level encryption item.
        public let comment: String?
        ///  A summary of a content type-profile mapping. 
        public let contentTypeProfileConfig: ContentTypeProfileConfig?
        /// The unique ID of a field-level encryption item.
        public let id: String
        /// The last time that the summary of field-level encryption items was modified.
        public let lastModifiedTime: TimeStamp
        ///  A summary of a query argument-profile mapping. 
        public let queryArgProfileConfig: QueryArgProfileConfig?

        public init(comment: String? = nil, contentTypeProfileConfig: ContentTypeProfileConfig? = nil, id: String, lastModifiedTime: TimeStamp, queryArgProfileConfig: QueryArgProfileConfig? = nil) {
            self.comment = comment
            self.contentTypeProfileConfig = contentTypeProfileConfig
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.queryArgProfileConfig = queryArgProfileConfig
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case contentTypeProfileConfig = "ContentTypeProfileConfig"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
            case queryArgProfileConfig = "QueryArgProfileConfig"
        }
    }

    public struct FieldPatterns: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"FieldPattern")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// An array of the field-level encryption field patterns.
        public let items: [String]?
        /// The number of field-level encryption field patterns.
        public let quantity: Int32

        public init(items: [String]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public enum Format: String, CustomStringConvertible, Codable {
        case urlencoded = "URLEncoded"
        public var description: String { return self.rawValue }
    }

    public struct ForwardedValues: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cookies", required: true, type: .structure), 
            AWSShapeMember(label: "Headers", required: false, type: .structure), 
            AWSShapeMember(label: "QueryString", required: true, type: .boolean), 
            AWSShapeMember(label: "QueryStringCacheKeys", required: false, type: .structure)
        ]
        /// A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see How CloudFront Forwards, Caches, and Logs Cookies in the Amazon CloudFront Developer Guide.
        public let cookies: CookiePreference
        /// A complex type that specifies the Headers, if any, that you want CloudFront to forward to the origin for this cache behavior (whitelisted headers). For the headers that you specify, CloudFront also caches separate versions of a specified object that is based on the header values in viewer requests. For more information, see  Caching Content Based on Request Headers in the Amazon CloudFront Developer Guide.
        public let headers: Headers?
        /// Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior and cache based on the query string parameters. CloudFront behavior depends on the value of QueryString and on the values that you specify for QueryStringCacheKeys, if any: If you specify true for QueryString and you don't specify any values for QueryStringCacheKeys, CloudFront forwards all query string parameters to the origin and caches based on all query string parameters. Depending on how many query string parameters and values you have, this can adversely affect performance because CloudFront must forward more requests to the origin. If you specify true for QueryString and you specify one or more values for QueryStringCacheKeys, CloudFront forwards all query string parameters to the origin, but it only caches based on the query string parameters that you specify. If you specify false for QueryString, CloudFront doesn't forward any query string parameters to the origin, and doesn't cache based on query string parameters. For more information, see Configuring CloudFront to Cache Based on Query String Parameters in the Amazon CloudFront Developer Guide.
        public let queryString: Bool
        /// A complex type that contains information about the query string parameters that you want CloudFront to use for caching for this cache behavior.
        public let queryStringCacheKeys: QueryStringCacheKeys?

        public init(cookies: CookiePreference, headers: Headers? = nil, queryString: Bool, queryStringCacheKeys: QueryStringCacheKeys? = nil) {
            self.cookies = cookies
            self.headers = headers
            self.queryString = queryString
            self.queryStringCacheKeys = queryStringCacheKeys
        }

        private enum CodingKeys: String, CodingKey {
            case cookies = "Cookies"
            case headers = "Headers"
            case queryString = "QueryString"
            case queryStringCacheKeys = "QueryStringCacheKeys"
        }
    }

    public struct GeoRestriction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"Location")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer), 
            AWSShapeMember(label: "RestrictionType", required: true, type: .enum)
        ]
        ///  A complex type that contains a Location element for each country in which you want CloudFront either to distribute your content (whitelist) or not distribute your content (blacklist). The Location element is a two-letter, uppercase country code for a country that you want to include in your blacklist or whitelist. Include one Location element for each country. CloudFront and MaxMind both use ISO 3166 country codes. For the current list of countries and the corresponding codes, see ISO 3166-1-alpha-2 code on the International Organization for Standardization website. You can also refer to the country list on the CloudFront console, which includes both country names and codes.
        public let items: [String]?
        /// When geo restriction is enabled, this is the number of countries in your whitelist or blacklist. Otherwise, when it is not enabled, Quantity is 0, and you can omit Items.
        public let quantity: Int32
        /// The method that you want to use to restrict distribution of your content by country:    none: No geo restriction is enabled, meaning access to content is not restricted by client geo location.    blacklist: The Location elements specify the countries in which you don't want CloudFront to distribute your content.    whitelist: The Location elements specify the countries in which you want CloudFront to distribute your content.  
        public let restrictionType: GeoRestrictionType

        public init(items: [String]? = nil, quantity: Int32, restrictionType: GeoRestrictionType) {
            self.items = items
            self.quantity = quantity
            self.restrictionType = restrictionType
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
            case restrictionType = "RestrictionType"
        }
    }

    public enum GeoRestrictionType: String, CustomStringConvertible, Codable {
        case blacklist = "blacklist"
        case whitelist = "whitelist"
        case none = "none"
        public var description: String { return self.rawValue }
    }

    public struct GetCloudFrontOriginAccessIdentityConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The identity's ID. 
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetCloudFrontOriginAccessIdentityConfigResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentityConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFrontOriginAccessIdentityConfig", required: false, type: .structure), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string)
        ]
        /// The origin access identity's configuration information. 
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig?
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?

        public init(cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig? = nil, eTag: String? = nil) {
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
            self.eTag = eTag
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontOriginAccessIdentityConfig = "CloudFrontOriginAccessIdentityConfig"
            case eTag = "ETag"
        }
    }

    public struct GetCloudFrontOriginAccessIdentityRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The identity's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetCloudFrontOriginAccessIdentityResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentity"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFrontOriginAccessIdentity", required: false, type: .structure), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string)
        ]
        /// The origin access identity's information.
        public let cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity?
        /// The current version of the origin access identity's information. For example: E2QWRUHAPOMQZL.
        public let eTag: String?

        public init(cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity? = nil, eTag: String? = nil) {
            self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
            self.eTag = eTag
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontOriginAccessIdentity = "CloudFrontOriginAccessIdentity"
            case eTag = "ETag"
        }
    }

    public struct GetDistributionConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The distribution's ID. If the ID is empty, an empty distribution configuration is returned.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetDistributionConfigResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "DistributionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionConfig", required: false, type: .structure), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string)
        ]
        /// The distribution's configuration information.
        public let distributionConfig: DistributionConfig?
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?

        public init(distributionConfig: DistributionConfig? = nil, eTag: String? = nil) {
            self.distributionConfig = distributionConfig
            self.eTag = eTag
        }

        private enum CodingKeys: String, CodingKey {
            case distributionConfig = "DistributionConfig"
            case eTag = "ETag"
        }
    }

    public struct GetDistributionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The distribution's ID. If the ID is empty, an empty distribution configuration is returned.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetDistributionResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Distribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Distribution", required: false, type: .structure), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string)
        ]
        /// The distribution's information.
        public let distribution: Distribution?
        /// The current version of the distribution's information. For example: E2QWRUHAPOMQZL.
        public let eTag: String?

        public init(distribution: Distribution? = nil, eTag: String? = nil) {
            self.distribution = distribution
            self.eTag = eTag
        }

        private enum CodingKeys: String, CodingKey {
            case distribution = "Distribution"
            case eTag = "ETag"
        }
    }

    public struct GetFieldLevelEncryptionConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// Request the ID for the field-level encryption configuration information.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetFieldLevelEncryptionConfigResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryptionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "FieldLevelEncryptionConfig", required: false, type: .structure)
        ]
        /// The current version of the field level encryption configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Return the field-level encryption configuration information.
        public let fieldLevelEncryptionConfig: FieldLevelEncryptionConfig?

        public init(eTag: String? = nil, fieldLevelEncryptionConfig: FieldLevelEncryptionConfig? = nil) {
            self.eTag = eTag
            self.fieldLevelEncryptionConfig = fieldLevelEncryptionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case fieldLevelEncryptionConfig = "FieldLevelEncryptionConfig"
        }
    }

    public struct GetFieldLevelEncryptionProfileConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// Get the ID for the field-level encryption profile configuration information.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetFieldLevelEncryptionProfileConfigResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryptionProfileConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "FieldLevelEncryptionProfileConfig", required: false, type: .structure)
        ]
        /// The current version of the field-level encryption profile configuration result. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Return the field-level encryption profile configuration information.
        public let fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig?

        public init(eTag: String? = nil, fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig? = nil) {
            self.eTag = eTag
            self.fieldLevelEncryptionProfileConfig = fieldLevelEncryptionProfileConfig
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case fieldLevelEncryptionProfileConfig = "FieldLevelEncryptionProfileConfig"
        }
    }

    public struct GetFieldLevelEncryptionProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// Get the ID for the field-level encryption profile information.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetFieldLevelEncryptionProfileResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryptionProfile"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "FieldLevelEncryptionProfile", required: false, type: .structure)
        ]
        /// The current version of the field level encryption profile. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Return the field-level encryption profile information.
        public let fieldLevelEncryptionProfile: FieldLevelEncryptionProfile?

        public init(eTag: String? = nil, fieldLevelEncryptionProfile: FieldLevelEncryptionProfile? = nil) {
            self.eTag = eTag
            self.fieldLevelEncryptionProfile = fieldLevelEncryptionProfile
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case fieldLevelEncryptionProfile = "FieldLevelEncryptionProfile"
        }
    }

    public struct GetFieldLevelEncryptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// Request the ID for the field-level encryption configuration information.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetFieldLevelEncryptionResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryption"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "FieldLevelEncryption", required: false, type: .structure)
        ]
        /// The current version of the field level encryption configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Return the field-level encryption configuration information.
        public let fieldLevelEncryption: FieldLevelEncryption?

        public init(eTag: String? = nil, fieldLevelEncryption: FieldLevelEncryption? = nil) {
            self.eTag = eTag
            self.fieldLevelEncryption = fieldLevelEncryption
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case fieldLevelEncryption = "FieldLevelEncryption"
        }
    }

    public struct GetInvalidationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionId", location: .uri(locationName: "DistributionId"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The distribution's ID.
        public let distributionId: String
        /// The identifier for the invalidation request, for example, IDFDVBD632BHDS5.
        public let id: String

        public init(distributionId: String, id: String) {
            self.distributionId = distributionId
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case distributionId = "DistributionId"
            case id = "Id"
        }
    }

    public struct GetInvalidationResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Invalidation"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Invalidation", required: false, type: .structure)
        ]
        /// The invalidation's information. For more information, see Invalidation Complex Type. 
        public let invalidation: Invalidation?

        public init(invalidation: Invalidation? = nil) {
            self.invalidation = invalidation
        }

        private enum CodingKeys: String, CodingKey {
            case invalidation = "Invalidation"
        }
    }

    public struct GetPublicKeyConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// Request the ID for the public key configuration.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetPublicKeyConfigResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "PublicKeyConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "PublicKeyConfig", required: false, type: .structure)
        ]
        /// The current version of the public key configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Return the result for the public key configuration.
        public let publicKeyConfig: PublicKeyConfig?

        public init(eTag: String? = nil, publicKeyConfig: PublicKeyConfig? = nil) {
            self.eTag = eTag
            self.publicKeyConfig = publicKeyConfig
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case publicKeyConfig = "PublicKeyConfig"
        }
    }

    public struct GetPublicKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// Request the ID for the public key.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetPublicKeyResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "PublicKey"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "PublicKey", required: false, type: .structure)
        ]
        /// The current version of the public key. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Return the public key.
        public let publicKey: PublicKey?

        public init(eTag: String? = nil, publicKey: PublicKey? = nil) {
            self.eTag = eTag
            self.publicKey = publicKey
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case publicKey = "PublicKey"
        }
    }

    public struct GetStreamingDistributionConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The streaming distribution's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetStreamingDistributionConfigResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistributionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "StreamingDistributionConfig", required: false, type: .structure)
        ]
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL. 
        public let eTag: String?
        /// The streaming distribution's configuration information.
        public let streamingDistributionConfig: StreamingDistributionConfig?

        public init(eTag: String? = nil, streamingDistributionConfig: StreamingDistributionConfig? = nil) {
            self.eTag = eTag
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case streamingDistributionConfig = "StreamingDistributionConfig"
        }
    }

    public struct GetStreamingDistributionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string)
        ]
        /// The streaming distribution's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetStreamingDistributionResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "StreamingDistribution", required: false, type: .structure)
        ]
        /// The current version of the streaming distribution's information. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The streaming distribution's information.
        public let streamingDistribution: StreamingDistribution?

        public init(eTag: String? = nil, streamingDistribution: StreamingDistribution? = nil) {
            self.eTag = eTag
            self.streamingDistribution = streamingDistribution
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case streamingDistribution = "StreamingDistribution"
        }
    }

    public struct Headers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"Name")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A list that contains one Name element for each header that you want CloudFront to use for caching in this cache behavior. If Quantity is 0, omit Items.
        public let items: [String]?
        /// The number of different headers that you want CloudFront to base caching on for this cache behavior. You can configure each cache behavior in a web distribution to do one of the following:    Forward all headers to your origin: Specify 1 for Quantity and * for Name.  CloudFront doesn't cache the objects that are associated with this cache behavior. Instead, CloudFront sends every request to the origin.      Forward a whitelist of headers you specify: Specify the number of headers that you want CloudFront to base caching on. Then specify the header names in Name elements. CloudFront caches your objects based on the values in the specified headers.    Forward only the default headers: Specify 0 for Quantity and omit Items. In this configuration, CloudFront doesn't cache based on the values in the request headers.   Regardless of which option you choose, CloudFront forwards headers to your origin based on whether the origin is an S3 bucket or a custom origin. See the following documentation:    S3 bucket: See HTTP Request Headers That CloudFront Removes or Updates     Custom origin: See HTTP Request Headers and CloudFront Behavior   
        public let quantity: Int32

        public init(items: [String]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public enum HttpVersion: String, CustomStringConvertible, Codable {
        case http11 = "http1.1"
        case http2 = "http2"
        public var description: String { return self.rawValue }
    }

    public enum ICPRecordalStatus: String, CustomStringConvertible, Codable {
        case approved = "APPROVED"
        case suspended = "SUSPENDED"
        case pending = "PENDING"
        public var description: String { return self.rawValue }
    }

    public struct Invalidation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "InvalidationBatch", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .string)
        ]
        /// The date and time the invalidation request was first made. 
        public let createTime: TimeStamp
        /// The identifier for the invalidation request. For example: IDFDVBD632BHDS5.
        public let id: String
        /// The current invalidation information for the batch request. 
        public let invalidationBatch: InvalidationBatch
        /// The status of the invalidation request. When the invalidation batch is finished, the status is Completed.
        public let status: String

        public init(createTime: TimeStamp, id: String, invalidationBatch: InvalidationBatch, status: String) {
            self.createTime = createTime
            self.id = id
            self.invalidationBatch = invalidationBatch
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case createTime = "CreateTime"
            case id = "Id"
            case invalidationBatch = "InvalidationBatch"
            case status = "Status"
        }
    }

    public struct InvalidationBatch: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CallerReference", required: true, type: .string), 
            AWSShapeMember(label: "Paths", required: true, type: .structure)
        ]
        /// A value that you specify to uniquely identify an invalidation request. CloudFront uses the value to prevent you from accidentally resubmitting an identical request. Whenever you create a new invalidation request, you must specify a new value for CallerReference and change other values in the request as applicable. One way to ensure that the value of CallerReference is unique is to use a timestamp, for example, 20120301090000. If you make a second invalidation request with the same value for CallerReference, and if the rest of the request is the same, CloudFront doesn't create a new invalidation request. Instead, CloudFront returns information about the invalidation request that you previously created with the same CallerReference. If CallerReference is a value you already sent in a previous invalidation batch request but the content of any Path is different from the original request, CloudFront returns an InvalidationBatchAlreadyExists error.
        public let callerReference: String
        /// A complex type that contains information about the objects that you want to invalidate. For more information, see Specifying the Objects to Invalidate in the Amazon CloudFront Developer Guide. 
        public let paths: Paths

        public init(callerReference: String, paths: Paths) {
            self.callerReference = callerReference
            self.paths = paths
        }

        private enum CodingKeys: String, CodingKey {
            case callerReference = "CallerReference"
            case paths = "Paths"
        }
    }

    public struct InvalidationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsTruncated", required: true, type: .boolean), 
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"InvalidationSummary")), 
            AWSShapeMember(label: "Marker", required: true, type: .string), 
            AWSShapeMember(label: "MaxItems", required: true, type: .integer), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A flag that indicates whether more invalidation batch requests remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more invalidation batches in the list.
        public let isTruncated: Bool
        /// A complex type that contains one InvalidationSummary element for each invalidation batch created by the current AWS account.
        public let items: [InvalidationSummary]?
        /// The value that you provided for the Marker request parameter.
        public let marker: String
        /// The value that you provided for the MaxItems request parameter.
        public let maxItems: Int32
        /// If IsTruncated is true, this element is present and contains the value that you can use for the Marker request parameter to continue listing your invalidation batches where they left off.
        public let nextMarker: String?
        /// The number of invalidation batches that were created by the current AWS account. 
        public let quantity: Int32

        public init(isTruncated: Bool, items: [InvalidationSummary]? = nil, marker: String, maxItems: Int32, nextMarker: String? = nil, quantity: Int32) {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case items = "Items"
            case marker = "Marker"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct InvalidationSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Status", required: true, type: .string)
        ]
        /// The time that an invalidation request was created.
        public let createTime: TimeStamp
        /// The unique ID for an invalidation request.
        public let id: String
        /// The status of an invalidation request.
        public let status: String

        public init(createTime: TimeStamp, id: String, status: String) {
            self.createTime = createTime
            self.id = id
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case createTime = "CreateTime"
            case id = "Id"
            case status = "Status"
        }
    }

    public enum ItemSelection: String, CustomStringConvertible, Codable {
        case none = "none"
        case whitelist = "whitelist"
        case all = "all"
        public var description: String { return self.rawValue }
    }

    public struct KeyPairIds: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"KeyPairId")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that lists the active CloudFront key pairs, if any, that are associated with AwsAccountNumber. For more information, see ActiveTrustedSigners.
        public let items: [String]?
        /// The number of active CloudFront key pairs for AwsAccountNumber. For more information, see ActiveTrustedSigners.
        public let quantity: Int32

        public init(items: [String]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct LambdaFunctionAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventType", required: true, type: .enum), 
            AWSShapeMember(label: "IncludeBody", required: false, type: .boolean), 
            AWSShapeMember(label: "LambdaFunctionARN", required: true, type: .string)
        ]
        /// Specifies the event type that triggers a Lambda function invocation. You can specify the following values:    viewer-request: The function executes when CloudFront receives a request from a viewer and before it checks to see whether the requested object is in the edge cache.     origin-request: The function executes only when CloudFront forwards a request to your origin. When the requested object is in the edge cache, the function doesn't execute.    origin-response: The function executes after CloudFront receives a response from the origin and before it caches the object in the response. When the requested object is in the edge cache, the function doesn't execute.    viewer-response: The function executes before CloudFront returns the requested object to the viewer. The function executes regardless of whether the object was already in the edge cache. If the origin returns an HTTP status code other than HTTP 200 (OK), the function doesn't execute.  
        public let eventType: EventType
        /// A flag that allows a Lambda function to have read access to the body content. For more information, see Accessing the Request Body by Choosing the Include Body Option in the Amazon CloudFront Developer Guide.
        public let includeBody: Bool?
        /// The ARN of the Lambda function. You must specify the ARN of a function version; you can't specify a Lambda alias or $LATEST.
        public let lambdaFunctionARN: String

        public init(eventType: EventType, includeBody: Bool? = nil, lambdaFunctionARN: String) {
            self.eventType = eventType
            self.includeBody = includeBody
            self.lambdaFunctionARN = lambdaFunctionARN
        }

        private enum CodingKeys: String, CodingKey {
            case eventType = "EventType"
            case includeBody = "IncludeBody"
            case lambdaFunctionARN = "LambdaFunctionARN"
        }
    }

    public struct LambdaFunctionAssociations: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"LambdaFunctionAssociation")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        ///  Optional: A complex type that contains LambdaFunctionAssociation items for this cache behavior. If Quantity is 0, you can omit Items.
        public let items: [LambdaFunctionAssociation]?
        /// The number of Lambda function associations for this cache behavior.
        public let quantity: Int32

        public init(items: [LambdaFunctionAssociation]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct ListCloudFrontOriginAccessIdentitiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .string)
        ]
        /// Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last identity on that page).
        public let marker: String?
        /// The maximum number of origin access identities you want in the response body. 
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxItems = "MaxItems"
        }
    }

    public struct ListCloudFrontOriginAccessIdentitiesResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentityList"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFrontOriginAccessIdentityList", required: false, type: .structure)
        ]
        /// The CloudFrontOriginAccessIdentityList type. 
        public let cloudFrontOriginAccessIdentityList: CloudFrontOriginAccessIdentityList?

        public init(cloudFrontOriginAccessIdentityList: CloudFrontOriginAccessIdentityList? = nil) {
            self.cloudFrontOriginAccessIdentityList = cloudFrontOriginAccessIdentityList
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontOriginAccessIdentityList = "CloudFrontOriginAccessIdentityList"
        }
    }

    public struct ListDistributionsByWebACLIdRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .string), 
            AWSShapeMember(label: "WebACLId", location: .uri(locationName: "WebACLId"), required: true, type: .string)
        ]
        /// Use Marker and MaxItems to control pagination of results. If you have more than MaxItems distributions that satisfy the request, the response includes a NextMarker element. To get the next page of results, submit another request. For the value of Marker, specify the value of NextMarker from the last response. (For the first request, omit Marker.) 
        public let marker: String?
        /// The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100.
        public let maxItems: String?
        /// The ID of the AWS WAF web ACL that you want to list the associated distributions. If you specify "null" for the ID, the request returns a list of the distributions that aren't associated with a web ACL. 
        public let webACLId: String

        public init(marker: String? = nil, maxItems: String? = nil, webACLId: String) {
            self.marker = marker
            self.maxItems = maxItems
            self.webACLId = webACLId
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxItems = "MaxItems"
            case webACLId = "WebACLId"
        }
    }

    public struct ListDistributionsByWebACLIdResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "DistributionList"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionList", required: false, type: .structure)
        ]
        /// The DistributionList type. 
        public let distributionList: DistributionList?

        public init(distributionList: DistributionList? = nil) {
            self.distributionList = distributionList
        }

        private enum CodingKeys: String, CodingKey {
            case distributionList = "DistributionList"
        }
    }

    public struct ListDistributionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .string)
        ]
        /// Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last distribution on that page).
        public let marker: String?
        /// The maximum number of distributions you want in the response body.
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxItems = "MaxItems"
        }
    }

    public struct ListDistributionsResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "DistributionList"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionList", required: false, type: .structure)
        ]
        /// The DistributionList type. 
        public let distributionList: DistributionList?

        public init(distributionList: DistributionList? = nil) {
            self.distributionList = distributionList
        }

        private enum CodingKeys: String, CodingKey {
            case distributionList = "DistributionList"
        }
    }

    public struct ListFieldLevelEncryptionConfigsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .string)
        ]
        /// Use this when paginating results to indicate where to begin in your list of configurations. The results include configurations in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last configuration on that page). 
        public let marker: String?
        /// The maximum number of field-level encryption configurations you want in the response body. 
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxItems = "MaxItems"
        }
    }

    public struct ListFieldLevelEncryptionConfigsResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryptionList"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FieldLevelEncryptionList", required: false, type: .structure)
        ]
        /// Returns a list of all field-level encryption configurations that have been created in CloudFront for this account.
        public let fieldLevelEncryptionList: FieldLevelEncryptionList?

        public init(fieldLevelEncryptionList: FieldLevelEncryptionList? = nil) {
            self.fieldLevelEncryptionList = fieldLevelEncryptionList
        }

        private enum CodingKeys: String, CodingKey {
            case fieldLevelEncryptionList = "FieldLevelEncryptionList"
        }
    }

    public struct ListFieldLevelEncryptionProfilesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .string)
        ]
        /// Use this when paginating results to indicate where to begin in your list of profiles. The results include profiles in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last profile on that page). 
        public let marker: String?
        /// The maximum number of field-level encryption profiles you want in the response body. 
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxItems = "MaxItems"
        }
    }

    public struct ListFieldLevelEncryptionProfilesResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryptionProfileList"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FieldLevelEncryptionProfileList", required: false, type: .structure)
        ]
        /// Returns a list of the field-level encryption profiles that have been created in CloudFront for this account.
        public let fieldLevelEncryptionProfileList: FieldLevelEncryptionProfileList?

        public init(fieldLevelEncryptionProfileList: FieldLevelEncryptionProfileList? = nil) {
            self.fieldLevelEncryptionProfileList = fieldLevelEncryptionProfileList
        }

        private enum CodingKeys: String, CodingKey {
            case fieldLevelEncryptionProfileList = "FieldLevelEncryptionProfileList"
        }
    }

    public struct ListInvalidationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionId", location: .uri(locationName: "DistributionId"), required: true, type: .string), 
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .string)
        ]
        /// The distribution's ID.
        public let distributionId: String
        /// Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set Marker to the value of the NextMarker from the current page's response. This value is the same as the ID of the last invalidation batch on that page. 
        public let marker: String?
        /// The maximum number of invalidation batches that you want in the response body.
        public let maxItems: String?

        public init(distributionId: String, marker: String? = nil, maxItems: String? = nil) {
            self.distributionId = distributionId
            self.marker = marker
            self.maxItems = maxItems
        }

        private enum CodingKeys: String, CodingKey {
            case distributionId = "DistributionId"
            case marker = "Marker"
            case maxItems = "MaxItems"
        }
    }

    public struct ListInvalidationsResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "InvalidationList"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvalidationList", required: false, type: .structure)
        ]
        /// Information about invalidation batches. 
        public let invalidationList: InvalidationList?

        public init(invalidationList: InvalidationList? = nil) {
            self.invalidationList = invalidationList
        }

        private enum CodingKeys: String, CodingKey {
            case invalidationList = "InvalidationList"
        }
    }

    public struct ListPublicKeysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .string)
        ]
        /// Use this when paginating results to indicate where to begin in your list of public keys. The results include public keys in the list that occur after the marker. To get the next page of results, set the Marker to the value of the NextMarker from the current page's response (which is also the ID of the last public key on that page). 
        public let marker: String?
        /// The maximum number of public keys you want in the response body. 
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxItems = "MaxItems"
        }
    }

    public struct ListPublicKeysResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "PublicKeyList"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicKeyList", required: false, type: .structure)
        ]
        /// Returns a list of all public keys that have been added to CloudFront for this account.
        public let publicKeyList: PublicKeyList?

        public init(publicKeyList: PublicKeyList? = nil) {
            self.publicKeyList = publicKeyList
        }

        private enum CodingKeys: String, CodingKey {
            case publicKeyList = "PublicKeyList"
        }
    }

    public struct ListStreamingDistributionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", location: .querystring(locationName: "Marker"), required: false, type: .string), 
            AWSShapeMember(label: "MaxItems", location: .querystring(locationName: "MaxItems"), required: false, type: .string)
        ]
        /// The value that you provided for the Marker request parameter.
        public let marker: String?
        /// The value that you provided for the MaxItems request parameter.
        public let maxItems: String?

        public init(marker: String? = nil, maxItems: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxItems = "MaxItems"
        }
    }

    public struct ListStreamingDistributionsResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistributionList"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StreamingDistributionList", required: false, type: .structure)
        ]
        /// The StreamingDistributionList type. 
        public let streamingDistributionList: StreamingDistributionList?

        public init(streamingDistributionList: StreamingDistributionList? = nil) {
            self.streamingDistributionList = streamingDistributionList
        }

        private enum CodingKeys: String, CodingKey {
            case streamingDistributionList = "StreamingDistributionList"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resource", location: .querystring(locationName: "Resource"), required: true, type: .string)
        ]
        ///  An ARN of a CloudFront resource.
        public let resource: String

        public init(resource: String) {
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
        }
    }

    public struct ListTagsForResourceResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Tags"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .structure)
        ]
        ///  A complex type that contains zero or more Tag elements.
        public let tags: Tags

        public init(tags: Tags) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct LoggingConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "IncludeCookies", required: true, type: .boolean), 
            AWSShapeMember(label: "Prefix", required: true, type: .string)
        ]
        /// The Amazon S3 bucket to store the access logs in, for example, myawslogbucket.s3.amazonaws.com.
        public let bucket: String
        /// Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you don't want to enable logging when you create a distribution or if you want to disable logging for an existing distribution, specify false for Enabled, and specify empty Bucket and Prefix elements. If you specify false for Enabled but you specify values for Bucket, prefix, and IncludeCookies, the values are automatically deleted.
        public let enabled: Bool
        /// Specifies whether you want CloudFront to include cookies in access logs, specify true for IncludeCookies. If you choose to include cookies in logs, CloudFront logs all cookies regardless of how you configure the cache behaviors for this distribution. If you don't want to include cookies when you create a distribution or if you want to disable include cookies for an existing distribution, specify false for IncludeCookies.
        public let includeCookies: Bool
        /// An optional string that you want CloudFront to prefix to the access log filenames for this distribution, for example, myprefix/. If you want to enable logging, but you don't want to specify a prefix, you still must include an empty Prefix element in the Logging element.
        public let prefix: String

        public init(bucket: String, enabled: Bool, includeCookies: Bool, prefix: String) {
            self.bucket = bucket
            self.enabled = enabled
            self.includeCookies = includeCookies
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case enabled = "Enabled"
            case includeCookies = "IncludeCookies"
            case prefix = "Prefix"
        }
    }

    public enum Method: String, CustomStringConvertible, Codable {
        case get = "GET"
        case head = "HEAD"
        case post = "POST"
        case put = "PUT"
        case patch = "PATCH"
        case options = "OPTIONS"
        case delete = "DELETE"
        public var description: String { return self.rawValue }
    }

    public enum MinimumProtocolVersion: String, CustomStringConvertible, Codable {
        case sslv3 = "SSLv3"
        case tlsv1 = "TLSv1"
        case tlsv12016 = "TLSv1_2016"
        case tlsv112016 = "TLSv1.1_2016"
        case tlsv122018 = "TLSv1.2_2018"
        public var description: String { return self.rawValue }
    }

    public struct Origin: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomHeaders", required: false, type: .structure), 
            AWSShapeMember(label: "CustomOriginConfig", required: false, type: .structure), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "OriginPath", required: false, type: .string), 
            AWSShapeMember(label: "S3OriginConfig", required: false, type: .structure)
        ]
        /// A complex type that contains names and values for the custom headers that you want.
        public let customHeaders: CustomHeaders?
        /// A complex type that contains information about a custom origin. If the origin is an Amazon S3 bucket, use the S3OriginConfig element instead.
        public let customOriginConfig: CustomOriginConfig?
        ///  Amazon S3 origins: The DNS name of the Amazon S3 bucket from which you want CloudFront to get objects for this origin, for example, myawsbucket.s3.amazonaws.com. If you set up your bucket to be configured as a website endpoint, enter the Amazon S3 static website hosting endpoint for the bucket. For more information about specifying this value for different types of origins, see Origin Domain Name in the Amazon CloudFront Developer Guide. Constraints for Amazon S3 origins:    If you configured Amazon S3 Transfer Acceleration for your bucket, don't specify the s3-accelerate endpoint for DomainName.   The bucket name must be between 3 and 63 characters long (inclusive).   The bucket name must contain only lowercase characters, numbers, periods, underscores, and dashes.   The bucket name must not contain adjacent periods.    Custom Origins: The DNS domain name for the HTTP server from which you want CloudFront to get objects for this origin, for example, www.example.com.  Constraints for custom origins:    DomainName must be a valid DNS name that contains only a-z, A-Z, 0-9, dot (.), hyphen (-), or underscore (_) characters.   The name cannot exceed 128 characters.  
        public let domainName: String
        /// A unique identifier for the origin or origin group. The value of Id must be unique within the distribution. When you specify the value of TargetOriginId for the default cache behavior or for another cache behavior, you indicate the origin to which you want the cache behavior to route requests by specifying the value of the Id element for that origin. When a request matches the path pattern for that cache behavior, CloudFront routes the request to the specified origin. For more information, see Cache Behavior Settings in the Amazon CloudFront Developer Guide.
        public let id: String
        /// An optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin. When you include the OriginPath element, specify the directory name, beginning with a /. CloudFront appends the directory name to the value of DomainName, for example, example.com/production. Do not include a / at the end of the directory name. For example, suppose you've specified the following values for your distribution:    DomainName: An Amazon S3 bucket named myawsbucket.    OriginPath: /production     CNAME: example.com    When a user enters example.com/index.html in a browser, CloudFront sends a request to Amazon S3 for myawsbucket/production/index.html. When a user enters example.com/acme/index.html in a browser, CloudFront sends a request to Amazon S3 for myawsbucket/production/acme/index.html.
        public let originPath: String?
        /// A complex type that contains information about the Amazon S3 origin. If the origin is a custom origin, use the CustomOriginConfig element instead.
        public let s3OriginConfig: S3OriginConfig?

        public init(customHeaders: CustomHeaders? = nil, customOriginConfig: CustomOriginConfig? = nil, domainName: String, id: String, originPath: String? = nil, s3OriginConfig: S3OriginConfig? = nil) {
            self.customHeaders = customHeaders
            self.customOriginConfig = customOriginConfig
            self.domainName = domainName
            self.id = id
            self.originPath = originPath
            self.s3OriginConfig = s3OriginConfig
        }

        private enum CodingKeys: String, CodingKey {
            case customHeaders = "CustomHeaders"
            case customOriginConfig = "CustomOriginConfig"
            case domainName = "DomainName"
            case id = "Id"
            case originPath = "OriginPath"
            case s3OriginConfig = "S3OriginConfig"
        }
    }

    public struct OriginCustomHeader: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HeaderName", required: true, type: .string), 
            AWSShapeMember(label: "HeaderValue", required: true, type: .string)
        ]
        /// The name of a header that you want CloudFront to forward to your origin. For more information, see Forwarding Custom Headers to Your Origin (Web Distributions Only) in the  Amazon CloudFront Developer Guide.
        public let headerName: String
        /// The value for the header that you specified in the HeaderName field.
        public let headerValue: String

        public init(headerName: String, headerValue: String) {
            self.headerName = headerName
            self.headerValue = headerValue
        }

        private enum CodingKeys: String, CodingKey {
            case headerName = "HeaderName"
            case headerValue = "HeaderValue"
        }
    }

    public struct OriginGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailoverCriteria", required: true, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Members", required: true, type: .structure)
        ]
        /// A complex type that contains information about the failover criteria for an origin group.
        public let failoverCriteria: OriginGroupFailoverCriteria
        /// The origin group's ID.
        public let id: String
        /// A complex type that contains information about the origins in an origin group.
        public let members: OriginGroupMembers

        public init(failoverCriteria: OriginGroupFailoverCriteria, id: String, members: OriginGroupMembers) {
            self.failoverCriteria = failoverCriteria
            self.id = id
            self.members = members
        }

        private enum CodingKeys: String, CodingKey {
            case failoverCriteria = "FailoverCriteria"
            case id = "Id"
            case members = "Members"
        }
    }

    public struct OriginGroupFailoverCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusCodes", required: true, type: .structure)
        ]
        /// The status codes that, when returned from the primary origin, will trigger CloudFront to failover to the second origin.
        public let statusCodes: StatusCodes

        public init(statusCodes: StatusCodes) {
            self.statusCodes = statusCodes
        }

        private enum CodingKeys: String, CodingKey {
            case statusCodes = "StatusCodes"
        }
    }

    public struct OriginGroupMember: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OriginId", required: true, type: .string)
        ]
        /// The ID for an origin in an origin group.
        public let originId: String

        public init(originId: String) {
            self.originId = originId
        }

        private enum CodingKeys: String, CodingKey {
            case originId = "OriginId"
        }
    }

    public struct OriginGroupMembers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: true, type: .list, encoding: .list(member:"OriginGroupMember")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// Items (origins) in an origin group.
        public let items: [OriginGroupMember]
        /// The number of origins in an origin group.
        public let quantity: Int32

        public init(items: [OriginGroupMember], quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct OriginGroups: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"OriginGroup")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// The items (origin groups) in a distribution.
        public let items: [OriginGroup]?
        /// The number of origin groups.
        public let quantity: Int32

        public init(items: [OriginGroup]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public enum OriginProtocolPolicy: String, CustomStringConvertible, Codable {
        case httpOnly = "http-only"
        case matchViewer = "match-viewer"
        case httpsOnly = "https-only"
        public var description: String { return self.rawValue }
    }

    public struct OriginSslProtocols: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: true, type: .list, encoding: .list(member:"SslProtocol")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A list that contains allowed SSL/TLS protocols for this distribution.
        public let items: [SslProtocol]
        /// The number of SSL/TLS protocols that you want to allow CloudFront to use when establishing an HTTPS connection with this origin. 
        public let quantity: Int32

        public init(items: [SslProtocol], quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct Origins: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: true, type: .list, encoding: .list(member:"Origin")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains origins or origin groups for this distribution.
        public let items: [Origin]
        /// The number of origins or origin groups for this distribution.
        public let quantity: Int32

        public init(items: [Origin], quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct Paths: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"Path")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A complex type that contains a list of the paths that you want to invalidate.
        public let items: [String]?
        /// The number of invalidation paths specified for the objects that you want to invalidate.
        public let quantity: Int32

        public init(items: [String]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public enum PriceClass: String, CustomStringConvertible, Codable {
        case priceclass100 = "PriceClass_100"
        case priceclass200 = "PriceClass_200"
        case priceclassAll = "PriceClass_All"
        public var description: String { return self.rawValue }
    }

    public struct PublicKey: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "PublicKeyConfig", required: true, type: .structure)
        ]
        /// A time you added a public key to CloudFront.
        public let createdTime: TimeStamp
        /// A unique ID assigned to a public key you've added to CloudFront.
        public let id: String
        /// A complex data type for a public key you add to CloudFront to use with features like field-level encryption.
        public let publicKeyConfig: PublicKeyConfig

        public init(createdTime: TimeStamp, id: String, publicKeyConfig: PublicKeyConfig) {
            self.createdTime = createdTime
            self.id = id
            self.publicKeyConfig = publicKeyConfig
        }

        private enum CodingKeys: String, CodingKey {
            case createdTime = "CreatedTime"
            case id = "Id"
            case publicKeyConfig = "PublicKeyConfig"
        }
    }

    public struct PublicKeyConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CallerReference", required: true, type: .string), 
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "EncodedKey", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// A unique number that ensures that the request can't be replayed.
        public let callerReference: String
        /// An optional comment about a public key.
        public let comment: String?
        /// The encoded public key that you want to add to CloudFront to use with features like field-level encryption.
        public let encodedKey: String
        /// The name for a public key you add to CloudFront to use with features like field-level encryption.
        public let name: String

        public init(callerReference: String, comment: String? = nil, encodedKey: String, name: String) {
            self.callerReference = callerReference
            self.comment = comment
            self.encodedKey = encodedKey
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case callerReference = "CallerReference"
            case comment = "Comment"
            case encodedKey = "EncodedKey"
            case name = "Name"
        }
    }

    public struct PublicKeyList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"PublicKeySummary")), 
            AWSShapeMember(label: "MaxItems", required: true, type: .integer), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// An array of information about a public key you add to CloudFront to use with features like field-level encryption.
        public let items: [PublicKeySummary]?
        /// The maximum number of public keys you want in the response body. 
        public let maxItems: Int32
        /// If there are more elements to be listed, this element is present and contains the value that you can use for the Marker request parameter to continue listing your public keys where you left off.
        public let nextMarker: String?
        /// The number of public keys you added to CloudFront to use with features like field-level encryption.
        public let quantity: Int32

        public init(items: [PublicKeySummary]? = nil, maxItems: Int32, nextMarker: String? = nil, quantity: Int32) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct PublicKeySummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "EncodedKey", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        ///  Comment for public key information summary. 
        public let comment: String?
        ///  Creation time for public key information summary. 
        public let createdTime: TimeStamp
        ///  Encoded key for public key information summary. 
        public let encodedKey: String
        ///  ID for public key information summary. 
        public let id: String
        ///  Name for public key information summary. 
        public let name: String

        public init(comment: String? = nil, createdTime: TimeStamp, encodedKey: String, id: String, name: String) {
            self.comment = comment
            self.createdTime = createdTime
            self.encodedKey = encodedKey
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case createdTime = "CreatedTime"
            case encodedKey = "EncodedKey"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct QueryArgProfile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProfileId", required: true, type: .string), 
            AWSShapeMember(label: "QueryArg", required: true, type: .string)
        ]
        /// ID of profile to use for field-level encryption query argument-profile mapping
        public let profileId: String
        /// Query argument for field-level encryption query argument-profile mapping.
        public let queryArg: String

        public init(profileId: String, queryArg: String) {
            self.profileId = profileId
            self.queryArg = queryArg
        }

        private enum CodingKeys: String, CodingKey {
            case profileId = "ProfileId"
            case queryArg = "QueryArg"
        }
    }

    public struct QueryArgProfileConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ForwardWhenQueryArgProfileIsUnknown", required: true, type: .boolean), 
            AWSShapeMember(label: "QueryArgProfiles", required: false, type: .structure)
        ]
        /// Flag to set if you want a request to be forwarded to the origin even if the profile specified by the field-level encryption query argument, fle-profile, is unknown.
        public let forwardWhenQueryArgProfileIsUnknown: Bool
        /// Profiles specified for query argument-profile mapping for field-level encryption.
        public let queryArgProfiles: QueryArgProfiles?

        public init(forwardWhenQueryArgProfileIsUnknown: Bool, queryArgProfiles: QueryArgProfiles? = nil) {
            self.forwardWhenQueryArgProfileIsUnknown = forwardWhenQueryArgProfileIsUnknown
            self.queryArgProfiles = queryArgProfiles
        }

        private enum CodingKeys: String, CodingKey {
            case forwardWhenQueryArgProfileIsUnknown = "ForwardWhenQueryArgProfileIsUnknown"
            case queryArgProfiles = "QueryArgProfiles"
        }
    }

    public struct QueryArgProfiles: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"QueryArgProfile")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// Number of items for query argument-profile mapping for field-level encryption.
        public let items: [QueryArgProfile]?
        /// Number of profiles for query argument-profile mapping for field-level encryption.
        public let quantity: Int32

        public init(items: [QueryArgProfile]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct QueryStringCacheKeys: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"Name")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A list that contains the query string parameters that you want CloudFront to use as a basis for caching for a cache behavior. If Quantity is 0, you can omit Items. 
        public let items: [String]?
        /// The number of whitelisted query string parameters for a cache behavior.
        public let quantity: Int32

        public init(items: [String]? = nil, quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct Restrictions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GeoRestriction", required: true, type: .structure)
        ]
        /// A complex type that controls the countries in which your content is distributed. CloudFront determines the location of your users using MaxMind GeoIP databases.
        public let geoRestriction: GeoRestriction

        public init(geoRestriction: GeoRestriction) {
            self.geoRestriction = geoRestriction
        }

        private enum CodingKeys: String, CodingKey {
            case geoRestriction = "GeoRestriction"
        }
    }

    public struct S3Origin: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "OriginAccessIdentity", required: true, type: .string)
        ]
        /// The DNS name of the Amazon S3 origin. 
        public let domainName: String
        /// The CloudFront origin access identity to associate with the distribution. Use an origin access identity to configure the distribution so that end users can only access objects in an Amazon S3 bucket through CloudFront. If you want end users to be able to access objects using either the CloudFront URL or the Amazon S3 URL, specify an empty OriginAccessIdentity element. To delete the origin access identity from an existing distribution, update the distribution configuration and include an empty OriginAccessIdentity element. To replace the origin access identity, update the distribution configuration and specify the new origin access identity. For more information, see Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content in the  Amazon CloudFront Developer Guide.
        public let originAccessIdentity: String

        public init(domainName: String, originAccessIdentity: String) {
            self.domainName = domainName
            self.originAccessIdentity = originAccessIdentity
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case originAccessIdentity = "OriginAccessIdentity"
        }
    }

    public struct S3OriginConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OriginAccessIdentity", required: true, type: .string)
        ]
        /// The CloudFront origin access identity to associate with the origin. Use an origin access identity to configure the origin so that viewers can only access objects in an Amazon S3 bucket through CloudFront. The format of the value is: origin-access-identity/cloudfront/ID-of-origin-access-identity  where  ID-of-origin-access-identity  is the value that CloudFront returned in the ID element when you created the origin access identity. If you want viewers to be able to access objects using either the CloudFront URL or the Amazon S3 URL, specify an empty OriginAccessIdentity element. To delete the origin access identity from an existing distribution, update the distribution configuration and include an empty OriginAccessIdentity element. To replace the origin access identity, update the distribution configuration and specify the new origin access identity. For more information about the origin access identity, see Serving Private Content through CloudFront in the Amazon CloudFront Developer Guide.
        public let originAccessIdentity: String

        public init(originAccessIdentity: String) {
            self.originAccessIdentity = originAccessIdentity
        }

        private enum CodingKeys: String, CodingKey {
            case originAccessIdentity = "OriginAccessIdentity"
        }
    }

    public enum SSLSupportMethod: String, CustomStringConvertible, Codable {
        case sniOnly = "sni-only"
        case vip = "vip"
        public var description: String { return self.rawValue }
    }

    public struct Signer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AwsAccountNumber", required: false, type: .string), 
            AWSShapeMember(label: "KeyPairIds", required: false, type: .structure)
        ]
        /// An AWS account that is included in the TrustedSigners complex type for this distribution. Valid values include:    self, which is the AWS account used to create the distribution.   An AWS account number.  
        public let awsAccountNumber: String?
        /// A complex type that lists the active CloudFront key pairs, if any, that are associated with AwsAccountNumber.
        public let keyPairIds: KeyPairIds?

        public init(awsAccountNumber: String? = nil, keyPairIds: KeyPairIds? = nil) {
            self.awsAccountNumber = awsAccountNumber
            self.keyPairIds = keyPairIds
        }

        private enum CodingKeys: String, CodingKey {
            case awsAccountNumber = "AwsAccountNumber"
            case keyPairIds = "KeyPairIds"
        }
    }

    public enum SslProtocol: String, CustomStringConvertible, Codable {
        case sslv3 = "SSLv3"
        case tlsv1 = "TLSv1"
        case tlsv11 = "TLSv1.1"
        case tlsv12 = "TLSv1.2"
        public var description: String { return self.rawValue }
    }

    public struct StatusCodes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: true, type: .list, encoding: .list(member:"StatusCode")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// The items (status codes) for an origin group.
        public let items: [Int32]
        /// The number of status codes.
        public let quantity: Int32

        public init(items: [Int32], quantity: Int32) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct StreamingDistribution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "ActiveTrustedSigners", required: true, type: .structure), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "LastModifiedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: true, type: .string), 
            AWSShapeMember(label: "StreamingDistributionConfig", required: true, type: .structure)
        ]
        /// The ARN (Amazon Resource Name) for the distribution. For example: arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where 123456789012 is your AWS account ID.
        public let arn: String
        /// A complex type that lists the AWS accounts, if any, that you included in the TrustedSigners complex type for this distribution. These are the accounts that you want to allow to create signed URLs for private content. The Signer complex type lists the AWS account number of the trusted signer or self if the signer is the AWS account that created the distribution. The Signer element also includes the IDs of any active CloudFront key pairs that are associated with the trusted signer's AWS account. If no KeyPairId element appears for a Signer, that signer can't create signed URLs. For more information, see Serving Private Content through CloudFront in the Amazon CloudFront Developer Guide. 
        public let activeTrustedSigners: ActiveTrustedSigners
        /// The domain name that corresponds to the streaming distribution, for example, s5c39gqb8ow64r.cloudfront.net. 
        public let domainName: String
        /// The identifier for the RTMP distribution. For example: EGTXBD79EXAMPLE.
        public let id: String
        /// The date and time that the distribution was last modified. 
        public let lastModifiedTime: TimeStamp?
        /// The current status of the RTMP distribution. When the status is Deployed, the distribution's information is propagated to all CloudFront edge locations.
        public let status: String
        /// The current configuration information for the RTMP distribution.
        public let streamingDistributionConfig: StreamingDistributionConfig

        public init(activeTrustedSigners: ActiveTrustedSigners, arn: String, domainName: String, id: String, lastModifiedTime: TimeStamp? = nil, status: String, streamingDistributionConfig: StreamingDistributionConfig) {
            self.arn = arn
            self.activeTrustedSigners = activeTrustedSigners
            self.domainName = domainName
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case activeTrustedSigners = "ActiveTrustedSigners"
            case domainName = "DomainName"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
            case status = "Status"
            case streamingDistributionConfig = "StreamingDistributionConfig"
        }
    }

    public struct StreamingDistributionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Aliases", required: false, type: .structure), 
            AWSShapeMember(label: "CallerReference", required: true, type: .string), 
            AWSShapeMember(label: "Comment", required: true, type: .string), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "Logging", required: false, type: .structure), 
            AWSShapeMember(label: "PriceClass", required: false, type: .enum), 
            AWSShapeMember(label: "S3Origin", required: true, type: .structure), 
            AWSShapeMember(label: "TrustedSigners", required: true, type: .structure)
        ]
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this streaming distribution. 
        public let aliases: Aliases?
        /// A unique value (for example, a date-time stamp) that ensures that the request can't be replayed. If the value of CallerReference is new (regardless of the content of the StreamingDistributionConfig object), CloudFront creates a new distribution. If CallerReference is a value that you already sent in a previous request to create a distribution, CloudFront returns a DistributionAlreadyExists error.
        public let callerReference: String
        /// Any comments you want to include about the streaming distribution. 
        public let comment: String
        /// Whether the streaming distribution is enabled to accept user requests for content.
        public let enabled: Bool
        /// A complex type that controls whether access logs are written for the streaming distribution. 
        public let logging: StreamingLoggingConfig?
        /// A complex type that contains information about price class for this streaming distribution. 
        public let priceClass: PriceClass?
        /// A complex type that contains information about the Amazon S3 bucket from which you want CloudFront to get your media files for distribution. 
        public let s3Origin: S3Origin
        /// A complex type that specifies any AWS accounts that you want to permit to create signed URLs for private content. If you want the distribution to use signed URLs, include this element; if you want the distribution to use public URLs, remove this element. For more information, see Serving Private Content through CloudFront in the Amazon CloudFront Developer Guide. 
        public let trustedSigners: TrustedSigners

        public init(aliases: Aliases? = nil, callerReference: String, comment: String, enabled: Bool, logging: StreamingLoggingConfig? = nil, priceClass: PriceClass? = nil, s3Origin: S3Origin, trustedSigners: TrustedSigners) {
            self.aliases = aliases
            self.callerReference = callerReference
            self.comment = comment
            self.enabled = enabled
            self.logging = logging
            self.priceClass = priceClass
            self.s3Origin = s3Origin
            self.trustedSigners = trustedSigners
        }

        private enum CodingKeys: String, CodingKey {
            case aliases = "Aliases"
            case callerReference = "CallerReference"
            case comment = "Comment"
            case enabled = "Enabled"
            case logging = "Logging"
            case priceClass = "PriceClass"
            case s3Origin = "S3Origin"
            case trustedSigners = "TrustedSigners"
        }
    }

    public struct StreamingDistributionConfigWithTags: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StreamingDistributionConfig", required: true, type: .structure), 
            AWSShapeMember(label: "Tags", required: true, type: .structure)
        ]
        /// A streaming distribution Configuration.
        public let streamingDistributionConfig: StreamingDistributionConfig
        /// A complex type that contains zero or more Tag elements.
        public let tags: Tags

        public init(streamingDistributionConfig: StreamingDistributionConfig, tags: Tags) {
            self.streamingDistributionConfig = streamingDistributionConfig
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case streamingDistributionConfig = "StreamingDistributionConfig"
            case tags = "Tags"
        }
    }

    public struct StreamingDistributionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsTruncated", required: true, type: .boolean), 
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"StreamingDistributionSummary")), 
            AWSShapeMember(label: "Marker", required: true, type: .string), 
            AWSShapeMember(label: "MaxItems", required: true, type: .integer), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// A flag that indicates whether more streaming distributions remain to be listed. If your results were truncated, you can make a follow-up pagination request using the Marker request parameter to retrieve more distributions in the list. 
        public let isTruncated: Bool
        /// A complex type that contains one StreamingDistributionSummary element for each distribution that was created by the current AWS account.
        public let items: [StreamingDistributionSummary]?
        /// The value you provided for the Marker request parameter. 
        public let marker: String
        /// The value you provided for the MaxItems request parameter. 
        public let maxItems: Int32
        /// If IsTruncated is true, this element is present and contains the value you can use for the Marker request parameter to continue listing your RTMP distributions where they left off. 
        public let nextMarker: String?
        /// The number of streaming distributions that were created by the current AWS account. 
        public let quantity: Int32

        public init(isTruncated: Bool, items: [StreamingDistributionSummary]? = nil, marker: String, maxItems: Int32, nextMarker: String? = nil, quantity: Int32) {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case items = "Items"
            case marker = "Marker"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct StreamingDistributionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "Aliases", required: true, type: .structure), 
            AWSShapeMember(label: "Comment", required: true, type: .string), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "LastModifiedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "PriceClass", required: true, type: .enum), 
            AWSShapeMember(label: "S3Origin", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .string), 
            AWSShapeMember(label: "TrustedSigners", required: true, type: .structure)
        ]
        ///  The ARN (Amazon Resource Name) for the streaming distribution. For example: arn:aws:cloudfront::123456789012:streaming-distribution/EDFDVBD632BHDS5, where 123456789012 is your AWS account ID.
        public let arn: String
        /// A complex type that contains information about CNAMEs (alternate domain names), if any, for this streaming distribution.
        public let aliases: Aliases
        /// The comment originally specified when this distribution was created.
        public let comment: String
        /// The domain name corresponding to the distribution, for example, d111111abcdef8.cloudfront.net.
        public let domainName: String
        /// Whether the distribution is enabled to accept end user requests for content.
        public let enabled: Bool
        /// The identifier for the distribution, for example, EDFDVBD632BHDS5.
        public let id: String
        /// The date and time the distribution was last modified.
        public let lastModifiedTime: TimeStamp
        /// A complex type that contains information about price class for this streaming distribution. 
        public let priceClass: PriceClass
        /// A complex type that contains information about the Amazon S3 bucket from which you want CloudFront to get your media files for distribution.
        public let s3Origin: S3Origin
        ///  Indicates the current status of the distribution. When the status is Deployed, the distribution's information is fully propagated throughout the Amazon CloudFront system.
        public let status: String
        /// A complex type that specifies the AWS accounts, if any, that you want to allow to create signed URLs for private content. If you want to require signed URLs in requests for objects in the target origin that match the PathPattern for this cache behavior, specify true for Enabled, and specify the applicable values for Quantity and Items.If you don't want to require signed URLs in requests for objects that match PathPattern, specify false for Enabled and 0 for Quantity. Omit Items. To add, change, or remove one or more trusted signers, change Enabled to true (if it's currently false), change Quantity as applicable, and specify all of the trusted signers that you want to include in the updated distribution. For more information, see Serving Private Content through CloudFront in the Amazon CloudFront Developer Guide. 
        public let trustedSigners: TrustedSigners

        public init(aliases: Aliases, arn: String, comment: String, domainName: String, enabled: Bool, id: String, lastModifiedTime: TimeStamp, priceClass: PriceClass, s3Origin: S3Origin, status: String, trustedSigners: TrustedSigners) {
            self.arn = arn
            self.aliases = aliases
            self.comment = comment
            self.domainName = domainName
            self.enabled = enabled
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.priceClass = priceClass
            self.s3Origin = s3Origin
            self.status = status
            self.trustedSigners = trustedSigners
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case aliases = "Aliases"
            case comment = "Comment"
            case domainName = "DomainName"
            case enabled = "Enabled"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
            case priceClass = "PriceClass"
            case s3Origin = "S3Origin"
            case status = "Status"
            case trustedSigners = "TrustedSigners"
        }
    }

    public struct StreamingLoggingConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: true, type: .string), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "Prefix", required: true, type: .string)
        ]
        /// The Amazon S3 bucket to store the access logs in, for example, myawslogbucket.s3.amazonaws.com.
        public let bucket: String
        /// Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you don't want to enable logging when you create a streaming distribution or if you want to disable logging for an existing streaming distribution, specify false for Enabled, and specify empty Bucket and Prefix elements. If you specify false for Enabled but you specify values for Bucket and Prefix, the values are automatically deleted. 
        public let enabled: Bool
        /// An optional string that you want CloudFront to prefix to the access log filenames for this streaming distribution, for example, myprefix/. If you want to enable logging, but you don't want to specify a prefix, you still must include an empty Prefix element in the Logging element.
        public let prefix: String

        public init(bucket: String, enabled: Bool, prefix: String) {
            self.bucket = bucket
            self.enabled = enabled
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case enabled = "Enabled"
            case prefix = "Prefix"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        ///  A string that contains Tag key. The string length should be between 1 and 128 characters. Valid characters include a-z, A-Z, 0-9, space, and the special characters _ - . : / = + @.
        public let key: String
        ///  A string that contains an optional Tag value. The string length should be between 0 and 256 characters. Valid characters include a-z, A-Z, 0-9, space, and the special characters _ - . : / = + @.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagKeys: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"Key"))
        ]
        ///  A complex type that contains Tag key elements.
        public let items: [String]?

        public init(items: [String]? = nil) {
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
        }
    }

    public struct TagResourceRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Tags"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resource", location: .querystring(locationName: "Resource"), required: true, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tags"), required: true, type: .structure)
        ]
        ///  An ARN of a CloudFront resource.
        public let resource: String
        ///  A complex type that contains zero or more Tag elements.
        public let tags: Tags

        public init(resource: String, tags: Tags) {
            self.resource = resource
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
            case tags = "Tags"
        }
    }

    public struct Tags: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"Tag"))
        ]
        ///  A complex type that contains Tag elements.
        public let items: [Tag]?

        public init(items: [Tag]? = nil) {
            self.items = items
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
        }
    }

    public struct TrustedSigners: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: true, type: .boolean), 
            AWSShapeMember(label: "Items", required: false, type: .list, encoding: .list(member:"AwsAccountNumber")), 
            AWSShapeMember(label: "Quantity", required: true, type: .integer)
        ]
        /// Specifies whether you want to require viewers to use signed URLs to access the files specified by PathPattern and TargetOriginId.
        public let enabled: Bool
        ///  Optional: A complex type that contains trusted signers for this cache behavior. If Quantity is 0, you can omit Items.
        public let items: [String]?
        /// The number of trusted signers for this cache behavior.
        public let quantity: Int32

        public init(enabled: Bool, items: [String]? = nil, quantity: Int32) {
            self.enabled = enabled
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "TagKeys"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resource", location: .querystring(locationName: "Resource"), required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", location: .body(locationName: "TagKeys"), required: true, type: .structure)
        ]
        ///  An ARN of a CloudFront resource.
        public let resource: String
        ///  A complex type that contains zero or more Tag key elements.
        public let tagKeys: TagKeys

        public init(resource: String, tagKeys: TagKeys) {
            self.resource = resource
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
            case tagKeys = "TagKeys"
        }
    }

    public struct UpdateCloudFrontOriginAccessIdentityRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentityConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFrontOriginAccessIdentityConfig", location: .body(locationName: "CloudFrontOriginAccessIdentityConfig"), required: true, type: .structure), 
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        /// The identity's configuration information.
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig
        /// The identity's id.
        public let id: String
        /// The value of the ETag header that you received when retrieving the identity's configuration. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig, id: String, ifMatch: String? = nil) {
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
            self.id = id
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontOriginAccessIdentityConfig = "CloudFrontOriginAccessIdentityConfig"
            case id = "Id"
            case ifMatch = "If-Match"
        }
    }

    public struct UpdateCloudFrontOriginAccessIdentityResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CloudFrontOriginAccessIdentity"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFrontOriginAccessIdentity", required: false, type: .structure), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string)
        ]
        /// The origin access identity's information.
        public let cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity?
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?

        public init(cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity? = nil, eTag: String? = nil) {
            self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
            self.eTag = eTag
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontOriginAccessIdentity = "CloudFrontOriginAccessIdentity"
            case eTag = "ETag"
        }
    }

    public struct UpdateDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "DistributionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DistributionConfig", location: .body(locationName: "DistributionConfig"), required: true, type: .structure), 
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        /// The distribution's configuration information.
        public let distributionConfig: DistributionConfig
        /// The distribution's id.
        public let id: String
        /// The value of the ETag header that you received when retrieving the distribution's configuration. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(distributionConfig: DistributionConfig, id: String, ifMatch: String? = nil) {
            self.distributionConfig = distributionConfig
            self.id = id
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case distributionConfig = "DistributionConfig"
            case id = "Id"
            case ifMatch = "If-Match"
        }
    }

    public struct UpdateDistributionResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "Distribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Distribution", required: false, type: .structure), 
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string)
        ]
        /// The distribution's information.
        public let distribution: Distribution?
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?

        public init(distribution: Distribution? = nil, eTag: String? = nil) {
            self.distribution = distribution
            self.eTag = eTag
        }

        private enum CodingKeys: String, CodingKey {
            case distribution = "Distribution"
            case eTag = "ETag"
        }
    }

    public struct UpdateFieldLevelEncryptionConfigRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryptionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FieldLevelEncryptionConfig", location: .body(locationName: "FieldLevelEncryptionConfig"), required: true, type: .structure), 
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        /// Request to update a field-level encryption configuration. 
        public let fieldLevelEncryptionConfig: FieldLevelEncryptionConfig
        /// The ID of the configuration you want to update.
        public let id: String
        /// The value of the ETag header that you received when retrieving the configuration identity to update. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(fieldLevelEncryptionConfig: FieldLevelEncryptionConfig, id: String, ifMatch: String? = nil) {
            self.fieldLevelEncryptionConfig = fieldLevelEncryptionConfig
            self.id = id
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case fieldLevelEncryptionConfig = "FieldLevelEncryptionConfig"
            case id = "Id"
            case ifMatch = "If-Match"
        }
    }

    public struct UpdateFieldLevelEncryptionConfigResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryption"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "FieldLevelEncryption", required: false, type: .structure)
        ]
        /// The value of the ETag header that you received when updating the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Return the results of updating the configuration.
        public let fieldLevelEncryption: FieldLevelEncryption?

        public init(eTag: String? = nil, fieldLevelEncryption: FieldLevelEncryption? = nil) {
            self.eTag = eTag
            self.fieldLevelEncryption = fieldLevelEncryption
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case fieldLevelEncryption = "FieldLevelEncryption"
        }
    }

    public struct UpdateFieldLevelEncryptionProfileRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryptionProfileConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FieldLevelEncryptionProfileConfig", location: .body(locationName: "FieldLevelEncryptionProfileConfig"), required: true, type: .structure), 
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string)
        ]
        /// Request to update a field-level encryption profile. 
        public let fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig
        /// The ID of the field-level encryption profile request. 
        public let id: String
        /// The value of the ETag header that you received when retrieving the profile identity to update. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig, id: String, ifMatch: String? = nil) {
            self.fieldLevelEncryptionProfileConfig = fieldLevelEncryptionProfileConfig
            self.id = id
            self.ifMatch = ifMatch
        }

        private enum CodingKeys: String, CodingKey {
            case fieldLevelEncryptionProfileConfig = "FieldLevelEncryptionProfileConfig"
            case id = "Id"
            case ifMatch = "If-Match"
        }
    }

    public struct UpdateFieldLevelEncryptionProfileResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "FieldLevelEncryptionProfile"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "FieldLevelEncryptionProfile", required: false, type: .structure)
        ]
        /// The result of the field-level encryption profile request. 
        public let eTag: String?
        /// Return the results of updating the profile.
        public let fieldLevelEncryptionProfile: FieldLevelEncryptionProfile?

        public init(eTag: String? = nil, fieldLevelEncryptionProfile: FieldLevelEncryptionProfile? = nil) {
            self.eTag = eTag
            self.fieldLevelEncryptionProfile = fieldLevelEncryptionProfile
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case fieldLevelEncryptionProfile = "FieldLevelEncryptionProfile"
        }
    }

    public struct UpdatePublicKeyRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "PublicKeyConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string), 
            AWSShapeMember(label: "PublicKeyConfig", location: .body(locationName: "PublicKeyConfig"), required: true, type: .structure)
        ]
        /// ID of the public key to be updated.
        public let id: String
        /// The value of the ETag header that you received when retrieving the public key to update. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?
        /// Request to update public key information.
        public let publicKeyConfig: PublicKeyConfig

        public init(id: String, ifMatch: String? = nil, publicKeyConfig: PublicKeyConfig) {
            self.id = id
            self.ifMatch = ifMatch
            self.publicKeyConfig = publicKeyConfig
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case ifMatch = "If-Match"
            case publicKeyConfig = "PublicKeyConfig"
        }
    }

    public struct UpdatePublicKeyResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "PublicKey"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "PublicKey", required: false, type: .structure)
        ]
        /// The current version of the update public key result. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Return the results of updating the public key.
        public let publicKey: PublicKey?

        public init(eTag: String? = nil, publicKey: PublicKey? = nil) {
            self.eTag = eTag
            self.publicKey = publicKey
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case publicKey = "PublicKey"
        }
    }

    public struct UpdateStreamingDistributionRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistributionConfig"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .uri(locationName: "Id"), required: true, type: .string), 
            AWSShapeMember(label: "IfMatch", location: .header(locationName: "If-Match"), required: false, type: .string), 
            AWSShapeMember(label: "StreamingDistributionConfig", location: .body(locationName: "StreamingDistributionConfig"), required: true, type: .structure)
        ]
        /// The streaming distribution's id.
        public let id: String
        /// The value of the ETag header that you received when retrieving the streaming distribution's configuration. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?
        /// The streaming distribution's configuration information.
        public let streamingDistributionConfig: StreamingDistributionConfig

        public init(id: String, ifMatch: String? = nil, streamingDistributionConfig: StreamingDistributionConfig) {
            self.id = id
            self.ifMatch = ifMatch
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case ifMatch = "If-Match"
            case streamingDistributionConfig = "StreamingDistributionConfig"
        }
    }

    public struct UpdateStreamingDistributionResult: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "StreamingDistribution"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ETag", location: .header(locationName: "ETag"), required: false, type: .string), 
            AWSShapeMember(label: "StreamingDistribution", required: false, type: .structure)
        ]
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The streaming distribution's information.
        public let streamingDistribution: StreamingDistribution?

        public init(eTag: String? = nil, streamingDistribution: StreamingDistribution? = nil) {
            self.eTag = eTag
            self.streamingDistribution = streamingDistribution
        }

        private enum CodingKeys: String, CodingKey {
            case eTag = "ETag"
            case streamingDistribution = "StreamingDistribution"
        }
    }

    public struct ViewerCertificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ACMCertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "Certificate", required: false, type: .string), 
            AWSShapeMember(label: "CertificateSource", required: false, type: .enum), 
            AWSShapeMember(label: "CloudFrontDefaultCertificate", required: false, type: .boolean), 
            AWSShapeMember(label: "IAMCertificateId", required: false, type: .string), 
            AWSShapeMember(label: "MinimumProtocolVersion", required: false, type: .enum), 
            AWSShapeMember(label: "SSLSupportMethod", required: false, type: .enum)
        ]
        /// If you want viewers to use HTTPS to request your objects and you're using an alternate domain name, you must choose the type of certificate that you want to use. Specify the following value if ACM provided your certificate:    &lt;ACMCertificateArn&gt;ARN for ACM SSL/TLS certificate&lt;ACMCertificateArn&gt; where  ARN for ACM SSL/TLS certificate  is the ARN for the ACM SSL/TLS certificate that you want to use for this distribution.   If you specify ACMCertificateArn, you must also specify a value for SSLSupportMethod.
        public let aCMCertificateArn: String?
        /// This field is no longer used. Use one of the following fields instead:    ACMCertificateArn     IAMCertificateId     CloudFrontDefaultCertificate   
        public let certificate: String?
        /// This field is no longer used. Use one of the following fields instead:    ACMCertificateArn     IAMCertificateId     CloudFrontDefaultCertificate   
        public let certificateSource: CertificateSource?
        /// If you're using the CloudFront domain name for your distribution, such as d111111abcdef8.cloudfront.net, specify the following value:    &lt;CloudFrontDefaultCertificate&gt;true&lt;CloudFrontDefaultCertificate&gt;    
        public let cloudFrontDefaultCertificate: Bool?
        /// If you want viewers to use HTTPS to request your objects and you're using an alternate domain name, you must choose the type of certificate that you want to use. Specify the following value if you purchased your certificate from a third-party certificate authority:    &lt;IAMCertificateId&gt;IAM certificate ID&lt;IAMCertificateId&gt; where  IAM certificate ID  is the ID that IAM returned when you added the certificate to the IAM certificate store.   If you specify IAMCertificateId, you must also specify a value for SSLSupportMethod.
        public let iAMCertificateId: String?
        /// Specify the security policy that you want CloudFront to use for HTTPS connections. A security policy determines two settings:   The minimum SSL/TLS protocol that CloudFront uses to communicate with viewers   The cipher that CloudFront uses to encrypt the content that it returns to viewers    On the CloudFront console, this setting is called Security policy.  We recommend that you specify TLSv1.1_2016 unless your users are using browsers or devices that do not support TLSv1.1 or later. When both of the following are true, you must specify TLSv1 or later for the security policy:    You're using a custom certificate: you specified a value for ACMCertificateArn or for IAMCertificateId    You're using SNI: you specified sni-only for SSLSupportMethod    If you specify true for CloudFrontDefaultCertificate, CloudFront automatically sets the security policy to TLSv1 regardless of the value that you specify for MinimumProtocolVersion. For information about the relationship between the security policy that you choose and the protocols and ciphers that CloudFront uses to communicate with viewers, see  Supported SSL/TLS Protocols and Ciphers for Communication Between Viewers and CloudFront in the Amazon CloudFront Developer Guide.
        public let minimumProtocolVersion: MinimumProtocolVersion?
        /// If you specify a value for ACMCertificateArn or for IAMCertificateId, you must also specify how you want CloudFront to serve HTTPS requests: using a method that works for browsers and clients released after 2010 or one that works for all clients.    sni-only: CloudFront can respond to HTTPS requests from viewers that support Server Name Indication (SNI). All modern browsers support SNI, but there are a few that don't. For a current list of the browsers that support SNI, see the Wikipedia entry Server Name Indication. To learn about options to explore if you have users with browsers that don't include SNI support, see Choosing How CloudFront Serves HTTPS Requests in the Amazon CloudFront Developer Guide.    vip: CloudFront uses dedicated IP addresses for your content and can respond to HTTPS requests from any viewer. However, there are additional monthly charges. For details, including specific pricing information, see Custom SSL options for Amazon CloudFront on the AWS marketing site.   Don't specify a value for SSLSupportMethod if you specified &lt;CloudFrontDefaultCertificate&gt;true&lt;CloudFrontDefaultCertificate&gt;. For more information, see Choosing How CloudFront Serves HTTPS Requests in the Amazon CloudFront Developer Guide.
        public let sSLSupportMethod: SSLSupportMethod?

        public init(aCMCertificateArn: String? = nil, certificate: String? = nil, certificateSource: CertificateSource? = nil, cloudFrontDefaultCertificate: Bool? = nil, iAMCertificateId: String? = nil, minimumProtocolVersion: MinimumProtocolVersion? = nil, sSLSupportMethod: SSLSupportMethod? = nil) {
            self.aCMCertificateArn = aCMCertificateArn
            self.certificate = certificate
            self.certificateSource = certificateSource
            self.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate
            self.iAMCertificateId = iAMCertificateId
            self.minimumProtocolVersion = minimumProtocolVersion
            self.sSLSupportMethod = sSLSupportMethod
        }

        private enum CodingKeys: String, CodingKey {
            case aCMCertificateArn = "ACMCertificateArn"
            case certificate = "Certificate"
            case certificateSource = "CertificateSource"
            case cloudFrontDefaultCertificate = "CloudFrontDefaultCertificate"
            case iAMCertificateId = "IAMCertificateId"
            case minimumProtocolVersion = "MinimumProtocolVersion"
            case sSLSupportMethod = "SSLSupportMethod"
        }
    }

    public enum ViewerProtocolPolicy: String, CustomStringConvertible, Codable {
        case allowAll = "allow-all"
        case httpsOnly = "https-only"
        case redirectToHttps = "redirect-to-https"
        public var description: String { return self.rawValue }
    }

}