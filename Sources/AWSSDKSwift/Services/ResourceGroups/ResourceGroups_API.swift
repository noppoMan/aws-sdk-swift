// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

@_exported import AWSSDKSwiftCore
import Foundation
import NIO

/**
Client object for interacting with AWS ResourceGroups service.

AWS Resource Groups AWS Resource Groups lets you organize AWS resources such as Amazon EC2 instances, Amazon Relational Database Service databases, and Amazon S3 buckets into groups using criteria that you define as tags. A resource group is a collection of resources that match the resource types specified in a query, and share one or more tags or portions of tags. You can create a group of resources based on their roles in your cloud infrastructure, lifecycle stages, regions, application layers, or virtually any criteria. Resource groups enable you to automate management tasks, such as those in AWS Systems Manager Automation documents, on tag-related resources in AWS Systems Manager. Groups of tagged resources also let you quickly view a custom console in AWS Systems Manager that shows AWS Config compliance and other monitoring data about member resources. To create a resource group, build a resource query, and specify tags that identify the criteria that members of the group have in common. Tags are key-value pairs. For more information about Resource Groups, see the AWS Resource Groups User Guide. AWS Resource Groups uses a REST-compliant API that you can use to perform the following types of operations.   Create, Read, Update, and Delete (CRUD) operations on resource groups and resource query entities   Applying, editing, and removing tags from resource groups   Resolving resource group member ARNs so they can be returned as search results   Getting data about resources that are members of a group   Searching AWS resources based on a resource query  
*/
public struct ResourceGroups {

    //MARK: Member variables

    public let client: AWSClient

    //MARK: Initialization

    /// Initialize the ResourceGroups client
    /// - parameters:
    ///     - accessKeyId: Public access key provided by AWS
    ///     - secretAccessKey: Private access key provided by AWS
    ///     - sessionToken: Token provided by STS.AssumeRole() which allows access to another AWS account
    ///     - region: Region of server you want to communicate with
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middlewares: Array of middlewares to apply to requests and responses
    ///     - eventLoopGroupProvider: EventLoopGroup to use. Use `useAWSClientShared` if the client shall manage its own EventLoopGroup.
    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil, middlewares: [AWSServiceMiddleware] = [], eventLoopGroupProvider: AWSClient.EventLoopGroupProvider = .useAWSClientShared) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            sessionToken: sessionToken,
            region: region,
            service: "resource-groups",
            serviceProtocol: ServiceProtocol(type: .restjson),
            apiVersion: "2017-11-27",
            endpoint: endpoint,
            serviceEndpoints: ["fips-us-east-1": "resource-groups-fips.us-east-1.amazonaws.com", "fips-us-east-2": "resource-groups-fips.us-east-2.amazonaws.com", "fips-us-west-1": "resource-groups-fips.us-west-1.amazonaws.com", "fips-us-west-2": "resource-groups-fips.us-west-2.amazonaws.com"],
            middlewares: middlewares,
            possibleErrorTypes: [ResourceGroupsErrorType.self],
            eventLoopGroupProvider: eventLoopGroupProvider
        )
    }
    
    //MARK: API Calls

    ///  Creates a resource group with the specified name and description. You can optionally include a resource query, or a service configuration.
    public func createGroup(_ input: CreateGroupInput) -> EventLoopFuture<CreateGroupOutput> {
        return client.send(operation: "CreateGroup", path: "/groups", httpMethod: "POST", input: input)
    }

    ///  Deletes the specified resource group. Deleting a resource group does not delete any resources that are members of the group; it only deletes the group structure.
    public func deleteGroup(_ input: DeleteGroupInput) -> EventLoopFuture<DeleteGroupOutput> {
        return client.send(operation: "DeleteGroup", path: "/delete-group", httpMethod: "POST", input: input)
    }

    ///  Returns information about a specified resource group.
    public func getGroup(_ input: GetGroupInput) -> EventLoopFuture<GetGroupOutput> {
        return client.send(operation: "GetGroup", path: "/get-group", httpMethod: "POST", input: input)
    }

    ///  Returns the service configuration associated with the specified resource group. AWS Resource Groups supports configurations for the following resource group types:    AWS::EC2::CapacityReservationPool - Amazon EC2 capacity reservation pools. For more information, see Working with capacity reservation groups in the EC2 Users Guide.  
    public func getGroupConfiguration(_ input: GetGroupConfigurationInput) -> EventLoopFuture<GetGroupConfigurationOutput> {
        return client.send(operation: "GetGroupConfiguration", path: "/get-group-configuration", httpMethod: "POST", input: input)
    }

    ///  Retrieves the resource query associated with the specified resource group.
    public func getGroupQuery(_ input: GetGroupQueryInput) -> EventLoopFuture<GetGroupQueryOutput> {
        return client.send(operation: "GetGroupQuery", path: "/get-group-query", httpMethod: "POST", input: input)
    }

    ///  Returns a list of tags that are associated with a resource group, specified by an ARN.
    public func getTags(_ input: GetTagsInput) -> EventLoopFuture<GetTagsOutput> {
        return client.send(operation: "GetTags", path: "/resources/{Arn}/tags", httpMethod: "GET", input: input)
    }

    ///  Adds the specified resources to the specified group.
    public func groupResources(_ input: GroupResourcesInput) -> EventLoopFuture<GroupResourcesOutput> {
        return client.send(operation: "GroupResources", path: "/group-resources", httpMethod: "POST", input: input)
    }

    ///  Returns a list of ARNs of the resources that are members of a specified resource group.
    public func listGroupResources(_ input: ListGroupResourcesInput) -> EventLoopFuture<ListGroupResourcesOutput> {
        return client.send(operation: "ListGroupResources", path: "/list-group-resources", httpMethod: "POST", input: input)
    }

    ///  Returns a list of existing resource groups in your account.
    public func listGroups(_ input: ListGroupsInput) -> EventLoopFuture<ListGroupsOutput> {
        return client.send(operation: "ListGroups", path: "/groups-list", httpMethod: "POST", input: input)
    }

    ///  Returns a list of AWS resource identifiers that matches tne specified query. The query uses the same format as a resource query in a CreateGroup or UpdateGroupQuery operation.
    public func searchResources(_ input: SearchResourcesInput) -> EventLoopFuture<SearchResourcesOutput> {
        return client.send(operation: "SearchResources", path: "/resources/search", httpMethod: "POST", input: input)
    }

    ///  Adds tags to a resource group with the specified ARN. Existing tags on a resource group are not changed if they are not specified in the request parameters.  Do not store personally identifiable information (PII) or other confidential or sensitive information in tags. We use tags to provide you with billing and administration services. Tags are not intended to be used for private or sensitive data. 
    public func tag(_ input: TagInput) -> EventLoopFuture<TagOutput> {
        return client.send(operation: "Tag", path: "/resources/{Arn}/tags", httpMethod: "PUT", input: input)
    }

    ///  Removes the specified resources from the specified group.
    public func ungroupResources(_ input: UngroupResourcesInput) -> EventLoopFuture<UngroupResourcesOutput> {
        return client.send(operation: "UngroupResources", path: "/ungroup-resources", httpMethod: "POST", input: input)
    }

    ///  Deletes tags from a specified resource group.
    public func untag(_ input: UntagInput) -> EventLoopFuture<UntagOutput> {
        return client.send(operation: "Untag", path: "/resources/{Arn}/tags", httpMethod: "PATCH", input: input)
    }

    ///  Updates the description for an existing group. You cannot update the name of a resource group.
    public func updateGroup(_ input: UpdateGroupInput) -> EventLoopFuture<UpdateGroupOutput> {
        return client.send(operation: "UpdateGroup", path: "/update-group", httpMethod: "POST", input: input)
    }

    ///  Updates the resource query of a group.
    public func updateGroupQuery(_ input: UpdateGroupQueryInput) -> EventLoopFuture<UpdateGroupQueryOutput> {
        return client.send(operation: "UpdateGroupQuery", path: "/update-group-query", httpMethod: "POST", input: input)
    }
}
