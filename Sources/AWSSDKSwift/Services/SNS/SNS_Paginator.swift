// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

//MARK: Paginators

extension SNS {

    ///  Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as FCM and APNS. The results for ListEndpointsByPlatformApplication are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call ListEndpointsByPlatformApplication again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see Using Amazon SNS Mobile Push Notifications.  This action is throttled at 30 transactions per second (TPS).
    public func listEndpointsByPlatformApplicationPaginator(_ input: ListEndpointsByPlatformApplicationInput, onPage: @escaping (ListEndpointsByPlatformApplicationResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listEndpointsByPlatformApplication, tokenKey: \ListEndpointsByPlatformApplicationResponse.nextToken, onPage: onPage)
    }

    ///  Lists the platform application objects for the supported push notification services, such as APNS and FCM. The results for ListPlatformApplications are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call ListPlatformApplications using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see Using Amazon SNS Mobile Push Notifications.  This action is throttled at 15 transactions per second (TPS).
    public func listPlatformApplicationsPaginator(_ input: ListPlatformApplicationsInput, onPage: @escaping (ListPlatformApplicationsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listPlatformApplications, tokenKey: \ListPlatformApplicationsResponse.nextToken, onPage: onPage)
    }

    ///  Returns a list of the requester's subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a NextToken is also returned. Use the NextToken parameter in a new ListSubscriptions call to get further results. This action is throttled at 30 transactions per second (TPS).
    public func listSubscriptionsPaginator(_ input: ListSubscriptionsInput, onPage: @escaping (ListSubscriptionsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listSubscriptions, tokenKey: \ListSubscriptionsResponse.nextToken, onPage: onPage)
    }

    ///  Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a NextToken is also returned. Use the NextToken parameter in a new ListSubscriptionsByTopic call to get further results. This action is throttled at 30 transactions per second (TPS).
    public func listSubscriptionsByTopicPaginator(_ input: ListSubscriptionsByTopicInput, onPage: @escaping (ListSubscriptionsByTopicResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listSubscriptionsByTopic, tokenKey: \ListSubscriptionsByTopicResponse.nextToken, onPage: onPage)
    }

    ///  Returns a list of the requester's topics. Each call returns a limited list of topics, up to 100. If there are more topics, a NextToken is also returned. Use the NextToken parameter in a new ListTopics call to get further results. This action is throttled at 30 transactions per second (TPS).
    public func listTopicsPaginator(_ input: ListTopicsInput, onPage: @escaping (ListTopicsResponse, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listTopics, tokenKey: \ListTopicsResponse.nextToken, onPage: onPage)
    }

}

extension SNS.ListEndpointsByPlatformApplicationInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SNS.ListEndpointsByPlatformApplicationInput {
        return .init(
            nextToken: token, 
            platformApplicationArn: self.platformApplicationArn
        )

    }
}

extension SNS.ListPlatformApplicationsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SNS.ListPlatformApplicationsInput {
        return .init(
            nextToken: token
        )

    }
}

extension SNS.ListSubscriptionsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SNS.ListSubscriptionsInput {
        return .init(
            nextToken: token
        )

    }
}

extension SNS.ListSubscriptionsByTopicInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SNS.ListSubscriptionsByTopicInput {
        return .init(
            nextToken: token, 
            topicArn: self.topicArn
        )

    }
}

extension SNS.ListTopicsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SNS.ListTopicsInput {
        return .init(
            nextToken: token
        )

    }
}


