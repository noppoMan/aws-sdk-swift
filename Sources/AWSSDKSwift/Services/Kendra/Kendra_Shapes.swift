// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Kendra {
    //MARK: Enums

    public enum AdditionalResultAttributeValueType: String, CustomStringConvertible, Codable {
        case textWithHighlightsValue = "TEXT_WITH_HIGHLIGHTS_VALUE"
        public var description: String { return self.rawValue }
    }

    public enum ContentType: String, CustomStringConvertible, Codable {
        case pdf = "PDF"
        case html = "HTML"
        case msWord = "MS_WORD"
        case plainText = "PLAIN_TEXT"
        case ppt = "PPT"
        public var description: String { return self.rawValue }
    }

    public enum DataSourceStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case deleting = "DELETING"
        case failed = "FAILED"
        case updating = "UPDATING"
        case active = "ACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum DataSourceSyncJobStatus: String, CustomStringConvertible, Codable {
        case failed = "FAILED"
        case succeeded = "SUCCEEDED"
        case syncing = "SYNCING"
        case incomplete = "INCOMPLETE"
        case stopping = "STOPPING"
        case aborted = "ABORTED"
        public var description: String { return self.rawValue }
    }

    public enum DataSourceType: String, CustomStringConvertible, Codable {
        case s3 = "S3"
        case sharepoint = "SHAREPOINT"
        case database = "DATABASE"
        public var description: String { return self.rawValue }
    }

    public enum DatabaseEngineType: String, CustomStringConvertible, Codable {
        case rdsAuroraMysql = "RDS_AURORA_MYSQL"
        case rdsAuroraPostgresql = "RDS_AURORA_POSTGRESQL"
        case rdsMysql = "RDS_MYSQL"
        case rdsPostgresql = "RDS_POSTGRESQL"
        public var description: String { return self.rawValue }
    }

    public enum DocumentAttributeValueType: String, CustomStringConvertible, Codable {
        case stringValue = "STRING_VALUE"
        case stringListValue = "STRING_LIST_VALUE"
        case longValue = "LONG_VALUE"
        case dateValue = "DATE_VALUE"
        public var description: String { return self.rawValue }
    }

    public enum ErrorCode: String, CustomStringConvertible, Codable {
        case internalerror = "InternalError"
        case invalidrequest = "InvalidRequest"
        public var description: String { return self.rawValue }
    }

    public enum FaqStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case updating = "UPDATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum IndexStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        case failed = "FAILED"
        case systemUpdating = "SYSTEM_UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum Order: String, CustomStringConvertible, Codable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    public enum PrincipalType: String, CustomStringConvertible, Codable {
        case user = "USER"
        case group = "GROUP"
        public var description: String { return self.rawValue }
    }

    public enum QueryResultType: String, CustomStringConvertible, Codable {
        case document = "DOCUMENT"
        case questionAnswer = "QUESTION_ANSWER"
        case answer = "ANSWER"
        public var description: String { return self.rawValue }
    }

    public enum ReadAccessType: String, CustomStringConvertible, Codable {
        case allow = "ALLOW"
        case deny = "DENY"
        public var description: String { return self.rawValue }
    }

    public enum RelevanceType: String, CustomStringConvertible, Codable {
        case relevant = "RELEVANT"
        case notRelevant = "NOT_RELEVANT"
        public var description: String { return self.rawValue }
    }

    public enum SharePointVersion: String, CustomStringConvertible, Codable {
        case sharepointOnline = "SHAREPOINT_ONLINE"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AccessControlListConfiguration: AWSShape {

        /// Path to the AWS S3 bucket that contains the ACL files.
        public let keyPath: String?

        public init(keyPath: String? = nil) {
            self.keyPath = keyPath
        }

        public func validate(name: String) throws {
            try validate(self.keyPath, name:"keyPath", parent: name, max: 1024)
            try validate(self.keyPath, name:"keyPath", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case keyPath = "KeyPath"
        }
    }

    public struct AclConfiguration: AWSShape {

        /// A list of groups, separated by semi-colons, that filters a query response based on user context. The document is only returned to users that are in one of the groups specified in the UserContext field of the Query operation.
        public let allowedGroupsColumnName: String

        public init(allowedGroupsColumnName: String) {
            self.allowedGroupsColumnName = allowedGroupsColumnName
        }

        public func validate(name: String) throws {
            try validate(self.allowedGroupsColumnName, name:"allowedGroupsColumnName", parent: name, max: 100)
            try validate(self.allowedGroupsColumnName, name:"allowedGroupsColumnName", parent: name, min: 1)
            try validate(self.allowedGroupsColumnName, name:"allowedGroupsColumnName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case allowedGroupsColumnName = "AllowedGroupsColumnName"
        }
    }

    public struct AdditionalResultAttribute: AWSShape {

        public let key: String
        public let value: AdditionalResultAttributeValue
        public let valueType: AdditionalResultAttributeValueType

        public init(key: String, value: AdditionalResultAttributeValue, valueType: AdditionalResultAttributeValueType) {
            self.key = key
            self.value = value
            self.valueType = valueType
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
            case valueType = "ValueType"
        }
    }

    public struct AdditionalResultAttributeValue: AWSShape {

        /// The text associated with the attribute and information about the highlight to apply to the text.
        public let textWithHighlightsValue: TextWithHighlights?

        public init(textWithHighlightsValue: TextWithHighlights? = nil) {
            self.textWithHighlightsValue = textWithHighlightsValue
        }

        private enum CodingKeys: String, CodingKey {
            case textWithHighlightsValue = "TextWithHighlightsValue"
        }
    }

    public class AttributeFilter: AWSShape {

        /// Performs a logical AND operation on all supplied filters.
        public let andAllFilters: [AttributeFilter]?
        /// Returns true when a document contains all of the specified document attributes.
        public let containsAll: DocumentAttribute?
        /// Returns true when a document contains any of the specified document attributes.
        public let containsAny: DocumentAttribute?
        /// Performs an equals operation on two document attributes.
        public let equalsTo: DocumentAttribute?
        /// Performs a greater than operation on two document attributes. Use with a document attribute of type Integer or Long.
        public let greaterThan: DocumentAttribute?
        /// Performs a greater or equals than operation on two document attributes. Use with a document attribute of type Integer or Long.
        public let greaterThanOrEquals: DocumentAttribute?
        /// Performs a less than operation on two document attributes. Use with a document attribute of type Integer or Long.
        public let lessThan: DocumentAttribute?
        /// Performs a less than or equals operation on two document attributes. Use with a document attribute of type Integer or Long.
        public let lessThanOrEquals: DocumentAttribute?
        /// Performs a logical NOT operation on all supplied filters.
        public let notFilter: AttributeFilter?
        /// Performs a logical OR operation on all supplied filters.
        public let orAllFilters: [AttributeFilter]?

        public init(andAllFilters: [AttributeFilter]? = nil, containsAll: DocumentAttribute? = nil, containsAny: DocumentAttribute? = nil, equalsTo: DocumentAttribute? = nil, greaterThan: DocumentAttribute? = nil, greaterThanOrEquals: DocumentAttribute? = nil, lessThan: DocumentAttribute? = nil, lessThanOrEquals: DocumentAttribute? = nil, notFilter: AttributeFilter? = nil, orAllFilters: [AttributeFilter]? = nil) {
            self.andAllFilters = andAllFilters
            self.containsAll = containsAll
            self.containsAny = containsAny
            self.equalsTo = equalsTo
            self.greaterThan = greaterThan
            self.greaterThanOrEquals = greaterThanOrEquals
            self.lessThan = lessThan
            self.lessThanOrEquals = lessThanOrEquals
            self.notFilter = notFilter
            self.orAllFilters = orAllFilters
        }

        public func validate(name: String) throws {
            try self.andAllFilters?.forEach {
                try $0.validate(name: "\(name).andAllFilters[]")
            }
            try validate(self.andAllFilters, name:"andAllFilters", parent: name, max: 5)
            try validate(self.andAllFilters, name:"andAllFilters", parent: name, min: 1)
            try self.containsAll?.validate(name: "\(name).containsAll")
            try self.containsAny?.validate(name: "\(name).containsAny")
            try self.equalsTo?.validate(name: "\(name).equalsTo")
            try self.greaterThan?.validate(name: "\(name).greaterThan")
            try self.greaterThanOrEquals?.validate(name: "\(name).greaterThanOrEquals")
            try self.lessThan?.validate(name: "\(name).lessThan")
            try self.lessThanOrEquals?.validate(name: "\(name).lessThanOrEquals")
            try self.notFilter?.validate(name: "\(name).notFilter")
            try self.orAllFilters?.forEach {
                try $0.validate(name: "\(name).orAllFilters[]")
            }
            try validate(self.orAllFilters, name:"orAllFilters", parent: name, max: 5)
            try validate(self.orAllFilters, name:"orAllFilters", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case andAllFilters = "AndAllFilters"
            case containsAll = "ContainsAll"
            case containsAny = "ContainsAny"
            case equalsTo = "EqualsTo"
            case greaterThan = "GreaterThan"
            case greaterThanOrEquals = "GreaterThanOrEquals"
            case lessThan = "LessThan"
            case lessThanOrEquals = "LessThanOrEquals"
            case notFilter = "NotFilter"
            case orAllFilters = "OrAllFilters"
        }
    }

    public struct BatchDeleteDocumentRequest: AWSShape {

        /// One or more identifiers for documents to delete from the index.
        public let documentIdList: [String]
        /// The identifier of the index that contains the documents to delete.
        public let indexId: String

        public init(documentIdList: [String], indexId: String) {
            self.documentIdList = documentIdList
            self.indexId = indexId
        }

        public func validate(name: String) throws {
            try self.documentIdList.forEach {
                try validate($0, name: "documentIdList[]", parent: name, max: 2048)
                try validate($0, name: "documentIdList[]", parent: name, min: 1)
            }
            try validate(self.documentIdList, name:"documentIdList", parent: name, max: 10)
            try validate(self.documentIdList, name:"documentIdList", parent: name, min: 1)
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
        }

        private enum CodingKeys: String, CodingKey {
            case documentIdList = "DocumentIdList"
            case indexId = "IndexId"
        }
    }

    public struct BatchDeleteDocumentResponse: AWSShape {

        /// A list of documents that could not be removed from the index. Each entry contains an error message that indicates why the document couldn't be removed from the index.
        public let failedDocuments: [BatchDeleteDocumentResponseFailedDocument]?

        public init(failedDocuments: [BatchDeleteDocumentResponseFailedDocument]? = nil) {
            self.failedDocuments = failedDocuments
        }

        private enum CodingKeys: String, CodingKey {
            case failedDocuments = "FailedDocuments"
        }
    }

    public struct BatchDeleteDocumentResponseFailedDocument: AWSShape {

        /// The error code for why the document couldn't be removed from the index.
        public let errorCode: ErrorCode?
        /// An explanation for why the document couldn't be removed from the index.
        public let errorMessage: String?
        /// The identifier of the document that couldn't be removed from the index.
        public let id: String?

        public init(errorCode: ErrorCode? = nil, errorMessage: String? = nil, id: String? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "ErrorCode"
            case errorMessage = "ErrorMessage"
            case id = "Id"
        }
    }

    public struct BatchPutDocumentRequest: AWSShape {

        /// One or more documents to add to the index.  Each document is limited to 5 Mb, the total size of the list is limited to 50 Mb.
        public let documents: [Document]
        /// The identifier of the index to add the documents to. You need to create the index first using the CreateIndex operation.
        public let indexId: String
        /// The Amazon Resource Name (ARN) of a role that is allowed to run the BatchPutDocument operation. For more information, see IAM Roles for Amazon Kendra.
        public let roleArn: String?

        public init(documents: [Document], indexId: String, roleArn: String? = nil) {
            self.documents = documents
            self.indexId = indexId
            self.roleArn = roleArn
        }

        public func validate(name: String) throws {
            try self.documents.forEach {
                try $0.validate(name: "\(name).documents[]")
            }
            try validate(self.documents, name:"documents", parent: name, max: 10)
            try validate(self.documents, name:"documents", parent: name, min: 1)
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
            try validate(self.roleArn, name:"roleArn", parent: name, max: 1284)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 1)
            try validate(self.roleArn, name:"roleArn", parent: name, pattern: "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}")
        }

        private enum CodingKeys: String, CodingKey {
            case documents = "Documents"
            case indexId = "IndexId"
            case roleArn = "RoleArn"
        }
    }

    public struct BatchPutDocumentResponse: AWSShape {

        /// A list of documents that were not added to the index because the document failed a validation check. Each document contains an error message that indicates why the document couldn't be added to the index. If there was an error adding a document to an index the error is reported in your AWS CloudWatch log.
        public let failedDocuments: [BatchPutDocumentResponseFailedDocument]?

        public init(failedDocuments: [BatchPutDocumentResponseFailedDocument]? = nil) {
            self.failedDocuments = failedDocuments
        }

        private enum CodingKeys: String, CodingKey {
            case failedDocuments = "FailedDocuments"
        }
    }

    public struct BatchPutDocumentResponseFailedDocument: AWSShape {

        /// The type of error that caused the document to fail to be indexed.
        public let errorCode: ErrorCode?
        /// A description of the reason why the document could not be indexed.
        public let errorMessage: String?
        /// The unique identifier of the document.
        public let id: String?

        public init(errorCode: ErrorCode? = nil, errorMessage: String? = nil, id: String? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "ErrorCode"
            case errorMessage = "ErrorMessage"
            case id = "Id"
        }
    }

    public struct ClickFeedback: AWSShape {

        /// The Unix timestamp of the data and time that the result was clicked.
        public let clickTime: TimeStamp
        /// The unique identifier of the search result that was clicked.
        public let resultId: String

        public init(clickTime: TimeStamp, resultId: String) {
            self.clickTime = clickTime
            self.resultId = resultId
        }

        public func validate(name: String) throws {
            try validate(self.resultId, name:"resultId", parent: name, max: 73)
            try validate(self.resultId, name:"resultId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clickTime = "ClickTime"
            case resultId = "ResultId"
        }
    }

    public struct ColumnConfiguration: AWSShape {

        /// One to five columns that indicate when a document in the database has changed.
        public let changeDetectingColumns: [String]
        /// The column that contains the contents of the document.
        public let documentDataColumnName: String
        /// The column that provides the document's unique identifier.
        public let documentIdColumnName: String
        /// The column that contains the title of the document.
        public let documentTitleColumnName: String?
        /// An array of objects that map database column names to the corresponding fields in an index. You must first create the fields in the index using the UpdateIndex operation.
        public let fieldMappings: [DataSourceToIndexFieldMapping]?

        public init(changeDetectingColumns: [String], documentDataColumnName: String, documentIdColumnName: String, documentTitleColumnName: String? = nil, fieldMappings: [DataSourceToIndexFieldMapping]? = nil) {
            self.changeDetectingColumns = changeDetectingColumns
            self.documentDataColumnName = documentDataColumnName
            self.documentIdColumnName = documentIdColumnName
            self.documentTitleColumnName = documentTitleColumnName
            self.fieldMappings = fieldMappings
        }

        public func validate(name: String) throws {
            try self.changeDetectingColumns.forEach {
                try validate($0, name: "changeDetectingColumns[]", parent: name, max: 100)
                try validate($0, name: "changeDetectingColumns[]", parent: name, min: 1)
                try validate($0, name: "changeDetectingColumns[]", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
            }
            try validate(self.changeDetectingColumns, name:"changeDetectingColumns", parent: name, max: 5)
            try validate(self.changeDetectingColumns, name:"changeDetectingColumns", parent: name, min: 1)
            try validate(self.documentDataColumnName, name:"documentDataColumnName", parent: name, max: 100)
            try validate(self.documentDataColumnName, name:"documentDataColumnName", parent: name, min: 1)
            try validate(self.documentDataColumnName, name:"documentDataColumnName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
            try validate(self.documentIdColumnName, name:"documentIdColumnName", parent: name, max: 100)
            try validate(self.documentIdColumnName, name:"documentIdColumnName", parent: name, min: 1)
            try validate(self.documentIdColumnName, name:"documentIdColumnName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
            try validate(self.documentTitleColumnName, name:"documentTitleColumnName", parent: name, max: 100)
            try validate(self.documentTitleColumnName, name:"documentTitleColumnName", parent: name, min: 1)
            try validate(self.documentTitleColumnName, name:"documentTitleColumnName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
            try self.fieldMappings?.forEach {
                try $0.validate(name: "\(name).fieldMappings[]")
            }
            try validate(self.fieldMappings, name:"fieldMappings", parent: name, max: 100)
            try validate(self.fieldMappings, name:"fieldMappings", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case changeDetectingColumns = "ChangeDetectingColumns"
            case documentDataColumnName = "DocumentDataColumnName"
            case documentIdColumnName = "DocumentIdColumnName"
            case documentTitleColumnName = "DocumentTitleColumnName"
            case fieldMappings = "FieldMappings"
        }
    }

    public struct ConnectionConfiguration: AWSShape {

        /// The name of the host for the database. Can be either a string (host.subdomain.domain.tld) or an IPv4 or IPv6 address.
        public let databaseHost: String
        /// The name of the database containing the document data.
        public let databaseName: String
        /// The port that the database uses for connections.
        public let databasePort: Int
        /// The Amazon Resource Name (ARN) of credentials stored in AWS Secrets Manager. The credentials should be a user/password pair. For more information, see Using a Database Data Source. For more information about AWS Secrets Manager, see  What Is AWS Secrets Manager  in the AWS Secrets Manager user guide.
        public let secretArn: String
        /// The name of the table that contains the document data.
        public let tableName: String

        public init(databaseHost: String, databaseName: String, databasePort: Int, secretArn: String, tableName: String) {
            self.databaseHost = databaseHost
            self.databaseName = databaseName
            self.databasePort = databasePort
            self.secretArn = secretArn
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try validate(self.databaseHost, name:"databaseHost", parent: name, max: 253)
            try validate(self.databaseHost, name:"databaseHost", parent: name, min: 1)
            try validate(self.databaseName, name:"databaseName", parent: name, max: 100)
            try validate(self.databaseName, name:"databaseName", parent: name, min: 1)
            try validate(self.databaseName, name:"databaseName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
            try validate(self.databasePort, name:"databasePort", parent: name, max: 65535)
            try validate(self.databasePort, name:"databasePort", parent: name, min: 1)
            try validate(self.secretArn, name:"secretArn", parent: name, max: 1284)
            try validate(self.secretArn, name:"secretArn", parent: name, min: 1)
            try validate(self.secretArn, name:"secretArn", parent: name, pattern: "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}")
            try validate(self.tableName, name:"tableName", parent: name, max: 100)
            try validate(self.tableName, name:"tableName", parent: name, min: 1)
            try validate(self.tableName, name:"tableName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case databaseHost = "DatabaseHost"
            case databaseName = "DatabaseName"
            case databasePort = "DatabasePort"
            case secretArn = "SecretArn"
            case tableName = "TableName"
        }
    }

    public struct CreateDataSourceRequest: AWSShape {

        /// The connector configuration information that is required to access the repository.
        public let configuration: DataSourceConfiguration
        /// A description for the data source.
        public let description: String?
        /// The identifier of the index that should be associated with this data source.
        public let indexId: String
        /// A unique name for the data source. A data source name can't be changed without deleting and recreating the data source.
        public let name: String
        /// The Amazon Resource Name (ARN) of a role with permission to access the data source. For more information, see IAM Roles for Amazon Kendra.
        public let roleArn: String
        /// Sets the frequency that Amazon Kendra will check the documents in your repository and update the index. If you don't set a schedule Amazon Kendra will not periodically update the index. You can call the StartDataSourceSyncJob operation to update the index.
        public let schedule: String?
        /// The type of repository that contains the data source.
        public let `type`: DataSourceType

        public init(configuration: DataSourceConfiguration, description: String? = nil, indexId: String, name: String, roleArn: String, schedule: String? = nil, type: DataSourceType) {
            self.configuration = configuration
            self.description = description
            self.indexId = indexId
            self.name = name
            self.roleArn = roleArn
            self.schedule = schedule
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try self.configuration.validate(name: "\(name).configuration")
            try validate(self.description, name:"description", parent: name, max: 1000)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.description, name:"description", parent: name, pattern: "^\\P{C}*$")
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
            try validate(self.name, name:"name", parent: name, max: 1000)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9_-]*")
            try validate(self.roleArn, name:"roleArn", parent: name, max: 1284)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 1)
            try validate(self.roleArn, name:"roleArn", parent: name, pattern: "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}")
        }

        private enum CodingKeys: String, CodingKey {
            case configuration = "Configuration"
            case description = "Description"
            case indexId = "IndexId"
            case name = "Name"
            case roleArn = "RoleArn"
            case schedule = "Schedule"
            case `type` = "Type"
        }
    }

    public struct CreateDataSourceResponse: AWSShape {

        /// A unique identifier for the data source.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct CreateFaqRequest: AWSShape {

        /// A description of the FAQ.
        public let description: String?
        /// The identifier of the index that contains the FAQ.
        public let indexId: String
        /// The name that should be associated with the FAQ.
        public let name: String
        /// The Amazon Resource Name (ARN) of a role with permission to access the S3 bucket that contains the FAQs. For more information, see IAM Roles for Amazon Kendra.
        public let roleArn: String
        /// The S3 location of the FAQ input data.
        public let s3Path: S3Path

        public init(description: String? = nil, indexId: String, name: String, roleArn: String, s3Path: S3Path) {
            self.description = description
            self.indexId = indexId
            self.name = name
            self.roleArn = roleArn
            self.s3Path = s3Path
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 1000)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.description, name:"description", parent: name, pattern: "^\\P{C}*$")
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
            try validate(self.name, name:"name", parent: name, max: 100)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9_-]*")
            try validate(self.roleArn, name:"roleArn", parent: name, max: 1284)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 1)
            try validate(self.roleArn, name:"roleArn", parent: name, pattern: "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}")
            try self.s3Path.validate(name: "\(name).s3Path")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case indexId = "IndexId"
            case name = "Name"
            case roleArn = "RoleArn"
            case s3Path = "S3Path"
        }
    }

    public struct CreateFaqResponse: AWSShape {

        /// The unique identifier of the FAQ.
        public let id: String?

        public init(id: String? = nil) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct CreateIndexRequest: AWSShape {

        /// A token that you provide to identify the request to create an index. Multiple calls to the CreateIndex operation with the same client token will create only one index.”
        public let clientToken: String?
        /// A description for the index.
        public let description: String?
        /// The name for the new index.
        public let name: String
        /// An IAM role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role used when you use the BatchPutDocument operation to index documents from an Amazon S3 bucket.
        public let roleArn: String
        /// The identifier of the AWS KMS customer managed key (CMK) to use to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs.
        public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration?

        public init(clientToken: String? = CreateIndexRequest.idempotencyToken(), description: String? = nil, name: String, roleArn: String, serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.name = name
            self.roleArn = roleArn
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
        }

        public func validate(name: String) throws {
            try validate(self.clientToken, name:"clientToken", parent: name, max: 100)
            try validate(self.clientToken, name:"clientToken", parent: name, min: 1)
            try validate(self.description, name:"description", parent: name, max: 1000)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.description, name:"description", parent: name, pattern: "^\\P{C}*$")
            try validate(self.name, name:"name", parent: name, max: 1000)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9_-]*")
            try validate(self.roleArn, name:"roleArn", parent: name, max: 1284)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 1)
            try validate(self.roleArn, name:"roleArn", parent: name, pattern: "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}")
            try self.serverSideEncryptionConfiguration?.validate(name: "\(name).serverSideEncryptionConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case name = "Name"
            case roleArn = "RoleArn"
            case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
        }
    }

    public struct CreateIndexResponse: AWSShape {

        /// The unique identifier of the index. Use this identifier when you query an index, set up a data source, or index a document.
        public let id: String?

        public init(id: String? = nil) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct DataSourceConfiguration: AWSShape {

        /// Provides information necessary to create a connector for a database.
        public let databaseConfiguration: DatabaseConfiguration?
        /// Provides information to create a connector for a document repository in an Amazon S3 bucket.
        public let s3Configuration: S3DataSourceConfiguration?
        /// Provides information necessary to create a connector for a Microsoft SharePoint site.
        public let sharePointConfiguration: SharePointConfiguration?

        public init(databaseConfiguration: DatabaseConfiguration? = nil, s3Configuration: S3DataSourceConfiguration? = nil, sharePointConfiguration: SharePointConfiguration? = nil) {
            self.databaseConfiguration = databaseConfiguration
            self.s3Configuration = s3Configuration
            self.sharePointConfiguration = sharePointConfiguration
        }

        public func validate(name: String) throws {
            try self.databaseConfiguration?.validate(name: "\(name).databaseConfiguration")
            try self.s3Configuration?.validate(name: "\(name).s3Configuration")
            try self.sharePointConfiguration?.validate(name: "\(name).sharePointConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case databaseConfiguration = "DatabaseConfiguration"
            case s3Configuration = "S3Configuration"
            case sharePointConfiguration = "SharePointConfiguration"
        }
    }

    public struct DataSourceSummary: AWSShape {

        /// The UNIX datetime that the data source was created.
        public let createdAt: TimeStamp?
        /// The unique identifier for the data source.
        public let id: String?
        /// The name of the data source.
        public let name: String?
        /// The status of the data source. When the status is ATIVE the data source is ready to use.
        public let status: DataSourceStatus?
        /// The type of the data source.
        public let `type`: DataSourceType?
        /// The UNIX datetime that the data source was lasted updated. 
        public let updatedAt: TimeStamp?

        public init(createdAt: TimeStamp? = nil, id: String? = nil, name: String? = nil, status: DataSourceStatus? = nil, type: DataSourceType? = nil, updatedAt: TimeStamp? = nil) {
            self.createdAt = createdAt
            self.id = id
            self.name = name
            self.status = status
            self.`type` = `type`
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "CreatedAt"
            case id = "Id"
            case name = "Name"
            case status = "Status"
            case `type` = "Type"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct DataSourceSyncJob: AWSShape {

        /// If the reason that the synchronization failed is due to an error with the underlying data source, this field contains a code that identifies the error.
        public let dataSourceErrorCode: String?
        /// The UNIX datetime that the synchronization job was completed.
        public let endTime: TimeStamp?
        /// If the Status field is set to FAILED, the ErrorCode field contains a the reason that the synchronization failed.
        public let errorCode: ErrorCode?
        /// If the Status field is set to ERROR, the ErrorMessage field contains a description of the error that caused the synchronization to fail.
        public let errorMessage: String?
        /// A unique identifier for the synchronization job.
        public let executionId: String?
        /// The UNIX datetime that the synchronization job was started.
        public let startTime: TimeStamp?
        /// The execution status of the synchronization job. When the Status field is set to SUCCEEDED, the synchronization job is done. If the status code is set to FAILED, the ErrorCode and ErrorMessage fields give you the reason for the failure.
        public let status: DataSourceSyncJobStatus?

        public init(dataSourceErrorCode: String? = nil, endTime: TimeStamp? = nil, errorCode: ErrorCode? = nil, errorMessage: String? = nil, executionId: String? = nil, startTime: TimeStamp? = nil, status: DataSourceSyncJobStatus? = nil) {
            self.dataSourceErrorCode = dataSourceErrorCode
            self.endTime = endTime
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.executionId = executionId
            self.startTime = startTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case dataSourceErrorCode = "DataSourceErrorCode"
            case endTime = "EndTime"
            case errorCode = "ErrorCode"
            case errorMessage = "ErrorMessage"
            case executionId = "ExecutionId"
            case startTime = "StartTime"
            case status = "Status"
        }
    }

    public struct DataSourceToIndexFieldMapping: AWSShape {

        /// The name of the column or attribute in the data source.
        public let dataSourceFieldName: String
        /// The type of data stored in the column or attribute.
        public let dateFieldFormat: String?
        /// The name of the field in the index.
        public let indexFieldName: String

        public init(dataSourceFieldName: String, dateFieldFormat: String? = nil, indexFieldName: String) {
            self.dataSourceFieldName = dataSourceFieldName
            self.dateFieldFormat = dateFieldFormat
            self.indexFieldName = indexFieldName
        }

        public func validate(name: String) throws {
            try validate(self.dataSourceFieldName, name:"dataSourceFieldName", parent: name, max: 100)
            try validate(self.dataSourceFieldName, name:"dataSourceFieldName", parent: name, min: 1)
            try validate(self.dataSourceFieldName, name:"dataSourceFieldName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_.]*$")
            try validate(self.dateFieldFormat, name:"dateFieldFormat", parent: name, max: 40)
            try validate(self.dateFieldFormat, name:"dateFieldFormat", parent: name, min: 4)
            try validate(self.indexFieldName, name:"indexFieldName", parent: name, max: 30)
            try validate(self.indexFieldName, name:"indexFieldName", parent: name, min: 1)
            try validate(self.indexFieldName, name:"indexFieldName", parent: name, pattern: "^\\P{C}*$")
        }

        private enum CodingKeys: String, CodingKey {
            case dataSourceFieldName = "DataSourceFieldName"
            case dateFieldFormat = "DateFieldFormat"
            case indexFieldName = "IndexFieldName"
        }
    }

    public struct DataSourceVpcConfiguration: AWSShape {

        /// A list of identifiers of security groups within your Amazon VPC. The security groups should enable Amazon Kendra to connect to the data source.
        public let securityGroupIds: [String]
        /// A list of identifiers for subnets within your Amazon VPC. The subnets should be able to connect to each other in the VPC, and they should have outgoing access to the Internet through a NAT device.
        public let subnetIds: [String]

        public init(securityGroupIds: [String], subnetIds: [String]) {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }

        public func validate(name: String) throws {
            try self.securityGroupIds.forEach {
                try validate($0, name: "securityGroupIds[]", parent: name, max: 200)
                try validate($0, name: "securityGroupIds[]", parent: name, min: 1)
                try validate($0, name: "securityGroupIds[]", parent: name, pattern: "[-0-9a-zA-Z]+")
            }
            try validate(self.securityGroupIds, name:"securityGroupIds", parent: name, max: 10)
            try validate(self.securityGroupIds, name:"securityGroupIds", parent: name, min: 1)
            try self.subnetIds.forEach {
                try validate($0, name: "subnetIds[]", parent: name, max: 200)
                try validate($0, name: "subnetIds[]", parent: name, min: 1)
                try validate($0, name: "subnetIds[]", parent: name, pattern: "[\\-0-9a-zA-Z]+")
            }
            try validate(self.subnetIds, name:"subnetIds", parent: name, max: 6)
            try validate(self.subnetIds, name:"subnetIds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds = "SecurityGroupIds"
            case subnetIds = "SubnetIds"
        }
    }

    public struct DatabaseConfiguration: AWSShape {

        /// Information about the database column that provides information for user context filtering.
        public let aclConfiguration: AclConfiguration?
        /// Information about where the index should get the document information from the database.
        public let columnConfiguration: ColumnConfiguration
        /// The information necessary to connect to a database.
        public let connectionConfiguration: ConnectionConfiguration
        /// The type of database engine that runs the database.
        public let databaseEngineType: DatabaseEngineType
        public let vpcConfiguration: DataSourceVpcConfiguration?

        public init(aclConfiguration: AclConfiguration? = nil, columnConfiguration: ColumnConfiguration, connectionConfiguration: ConnectionConfiguration, databaseEngineType: DatabaseEngineType, vpcConfiguration: DataSourceVpcConfiguration? = nil) {
            self.aclConfiguration = aclConfiguration
            self.columnConfiguration = columnConfiguration
            self.connectionConfiguration = connectionConfiguration
            self.databaseEngineType = databaseEngineType
            self.vpcConfiguration = vpcConfiguration
        }

        public func validate(name: String) throws {
            try self.aclConfiguration?.validate(name: "\(name).aclConfiguration")
            try self.columnConfiguration.validate(name: "\(name).columnConfiguration")
            try self.connectionConfiguration.validate(name: "\(name).connectionConfiguration")
            try self.vpcConfiguration?.validate(name: "\(name).vpcConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case aclConfiguration = "AclConfiguration"
            case columnConfiguration = "ColumnConfiguration"
            case connectionConfiguration = "ConnectionConfiguration"
            case databaseEngineType = "DatabaseEngineType"
            case vpcConfiguration = "VpcConfiguration"
        }
    }

    public struct DeleteFaqRequest: AWSShape {

        /// The identifier of the FAQ to remove.
        public let id: String
        /// The index to remove the FAQ from.
        public let indexId: String

        public init(id: String, indexId: String) {
            self.id = id
            self.indexId = indexId
        }

        public func validate(name: String) throws {
            try validate(self.id, name:"id", parent: name, max: 100)
            try validate(self.id, name:"id", parent: name, min: 1)
            try validate(self.id, name:"id", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9_-]*")
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case indexId = "IndexId"
        }
    }

    public struct DeleteIndexRequest: AWSShape {

        /// The identifier of the index to delete.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try validate(self.id, name:"id", parent: name, max: 36)
            try validate(self.id, name:"id", parent: name, min: 36)
            try validate(self.id, name:"id", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct DescribeDataSourceRequest: AWSShape {

        /// The unique identifier of the data source to describe.
        public let id: String
        /// The identifier of the index that contains the data source.
        public let indexId: String

        public init(id: String, indexId: String) {
            self.id = id
            self.indexId = indexId
        }

        public func validate(name: String) throws {
            try validate(self.id, name:"id", parent: name, max: 100)
            try validate(self.id, name:"id", parent: name, min: 1)
            try validate(self.id, name:"id", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9_-]*")
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case indexId = "IndexId"
        }
    }

    public struct DescribeDataSourceResponse: AWSShape {

        /// Information that describes where the data source is located and how the data source is configured. The specific information in the description depends on the data source provider.
        public let configuration: DataSourceConfiguration?
        /// The Unix timestamp of when the data source was created.
        public let createdAt: TimeStamp?
        /// The description of the data source.
        public let description: String?
        /// When the Status field value is FAILED, the ErrorMessage field contains a description of the error that caused the data source to fail.
        public let errorMessage: String?
        /// The identifier of the data source.
        public let id: String?
        /// The identifier of the index that contains the data source.
        public let indexId: String?
        /// The name that you gave the data source when it was created.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the role that enables the data source to access its resources.
        public let roleArn: String?
        /// The schedule that Amazon Kendra will update the data source.
        public let schedule: String?
        /// The current status of the data source. When the status is ACTIVE the data source is ready to use. When the status is FAILED, the ErrorMessage field contains the reason that the data source failed.
        public let status: DataSourceStatus?
        /// The type of the data source.
        public let `type`: DataSourceType?
        /// The Unix timestamp of when the data source was last updated.
        public let updatedAt: TimeStamp?

        public init(configuration: DataSourceConfiguration? = nil, createdAt: TimeStamp? = nil, description: String? = nil, errorMessage: String? = nil, id: String? = nil, indexId: String? = nil, name: String? = nil, roleArn: String? = nil, schedule: String? = nil, status: DataSourceStatus? = nil, type: DataSourceType? = nil, updatedAt: TimeStamp? = nil) {
            self.configuration = configuration
            self.createdAt = createdAt
            self.description = description
            self.errorMessage = errorMessage
            self.id = id
            self.indexId = indexId
            self.name = name
            self.roleArn = roleArn
            self.schedule = schedule
            self.status = status
            self.`type` = `type`
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case configuration = "Configuration"
            case createdAt = "CreatedAt"
            case description = "Description"
            case errorMessage = "ErrorMessage"
            case id = "Id"
            case indexId = "IndexId"
            case name = "Name"
            case roleArn = "RoleArn"
            case schedule = "Schedule"
            case status = "Status"
            case `type` = "Type"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct DescribeFaqRequest: AWSShape {

        /// The unique identifier of the FAQ.
        public let id: String
        /// The identifier of the index that contains the FAQ.
        public let indexId: String

        public init(id: String, indexId: String) {
            self.id = id
            self.indexId = indexId
        }

        public func validate(name: String) throws {
            try validate(self.id, name:"id", parent: name, max: 100)
            try validate(self.id, name:"id", parent: name, min: 1)
            try validate(self.id, name:"id", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9_-]*")
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case indexId = "IndexId"
        }
    }

    public struct DescribeFaqResponse: AWSShape {

        /// The date and time that the FAQ was created.
        public let createdAt: TimeStamp?
        /// The description of the FAQ that you provided when it was created.
        public let description: String?
        /// If the Status field is FAILED, the ErrorMessage field contains the reason why the FAQ failed.
        public let errorMessage: String?
        /// The identifier of the FAQ.
        public let id: String?
        /// The identifier of the index that contains the FAQ.
        public let indexId: String?
        /// The name that you gave the FAQ when it was created.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the role that provides access to the S3 bucket containing the input files for the FAQ.
        public let roleArn: String?
        public let s3Path: S3Path?
        /// The status of the FAQ. It is ready to use when the status is ACTIVE.
        public let status: FaqStatus?
        /// The date and time that the FAQ was last updated.
        public let updatedAt: TimeStamp?

        public init(createdAt: TimeStamp? = nil, description: String? = nil, errorMessage: String? = nil, id: String? = nil, indexId: String? = nil, name: String? = nil, roleArn: String? = nil, s3Path: S3Path? = nil, status: FaqStatus? = nil, updatedAt: TimeStamp? = nil) {
            self.createdAt = createdAt
            self.description = description
            self.errorMessage = errorMessage
            self.id = id
            self.indexId = indexId
            self.name = name
            self.roleArn = roleArn
            self.s3Path = s3Path
            self.status = status
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "CreatedAt"
            case description = "Description"
            case errorMessage = "ErrorMessage"
            case id = "Id"
            case indexId = "IndexId"
            case name = "Name"
            case roleArn = "RoleArn"
            case s3Path = "S3Path"
            case status = "Status"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct DescribeIndexRequest: AWSShape {

        /// The name of the index to describe.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try validate(self.id, name:"id", parent: name, max: 36)
            try validate(self.id, name:"id", parent: name, min: 36)
            try validate(self.id, name:"id", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct DescribeIndexResponse: AWSShape {

        /// The Unix datetime that the index was created.
        public let createdAt: TimeStamp?
        /// The description of the index.
        public let description: String?
        /// Configuration settings for any metadata applied to the documents in the index.
        public let documentMetadataConfigurations: [DocumentMetadataConfiguration]?
        /// When th eStatus field value is FAILED, the ErrorMessage field contains a message that explains why.
        public let errorMessage: String?
        /// the name of the index.
        public let id: String?
        /// Provides information about the number of FAQ questions and answers and the number of text documents indexed.
        public let indexStatistics: IndexStatistics?
        /// The name of the index.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the IAM role that gives Amazon Kendra permission to write to your Amazon Cloudwatch logs.
        public let roleArn: String?
        /// The identifier of the AWS KMS customer master key (CMK) used to encrypt your data. Amazon Kendra doesn't support asymmetric CMKs.
        public let serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration?
        /// The current status of the index. When the value is ACTIVE, the index is ready for use. If the Status field value is FAILED, the ErrorMessage field contains a message that explains why.
        public let status: IndexStatus?
        /// The Unix datetime that the index was last updated.
        public let updatedAt: TimeStamp?

        public init(createdAt: TimeStamp? = nil, description: String? = nil, documentMetadataConfigurations: [DocumentMetadataConfiguration]? = nil, errorMessage: String? = nil, id: String? = nil, indexStatistics: IndexStatistics? = nil, name: String? = nil, roleArn: String? = nil, serverSideEncryptionConfiguration: ServerSideEncryptionConfiguration? = nil, status: IndexStatus? = nil, updatedAt: TimeStamp? = nil) {
            self.createdAt = createdAt
            self.description = description
            self.documentMetadataConfigurations = documentMetadataConfigurations
            self.errorMessage = errorMessage
            self.id = id
            self.indexStatistics = indexStatistics
            self.name = name
            self.roleArn = roleArn
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
            self.status = status
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "CreatedAt"
            case description = "Description"
            case documentMetadataConfigurations = "DocumentMetadataConfigurations"
            case errorMessage = "ErrorMessage"
            case id = "Id"
            case indexStatistics = "IndexStatistics"
            case name = "Name"
            case roleArn = "RoleArn"
            case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
            case status = "Status"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct Document: AWSShape {

        /// Information to use for user context filtering.
        public let accessControlList: [Principal]?
        /// Custom attributes to apply to the document. Use the custom attributes to provide additional information for searching, to provide facets for refining searches, and to provide additional information in the query response.
        public let attributes: [DocumentAttribute]?
        /// The contents of the document.  Documents passed to the Blob parameter must be base64 encoded. Your code might not need to encode the document file bytes if you're using an AWS SDK to call Amazon Kendra operations. If you are calling the Amazon Kendra endpoint directly using REST, you must base64 encode the contents before sending.
        public let blob: Data?
        /// The file type of the document in the Blob field.
        public let contentType: ContentType?
        /// A unique identifier of the document in the index.
        public let id: String
        public let s3Path: S3Path?
        /// The title of the document.
        public let title: String?

        public init(accessControlList: [Principal]? = nil, attributes: [DocumentAttribute]? = nil, blob: Data? = nil, contentType: ContentType? = nil, id: String, s3Path: S3Path? = nil, title: String? = nil) {
            self.accessControlList = accessControlList
            self.attributes = attributes
            self.blob = blob
            self.contentType = contentType
            self.id = id
            self.s3Path = s3Path
            self.title = title
        }

        public func validate(name: String) throws {
            try self.accessControlList?.forEach {
                try $0.validate(name: "\(name).accessControlList[]")
            }
            try validate(self.accessControlList, name:"accessControlList", parent: name, max: 200)
            try validate(self.accessControlList, name:"accessControlList", parent: name, min: 1)
            try self.attributes?.forEach {
                try $0.validate(name: "\(name).attributes[]")
            }
            try validate(self.attributes, name:"attributes", parent: name, max: 100)
            try validate(self.attributes, name:"attributes", parent: name, min: 1)
            try validate(self.blob, name:"blob", parent: name, max: 153600)
            try validate(self.blob, name:"blob", parent: name, min: 1)
            try validate(self.id, name:"id", parent: name, max: 2048)
            try validate(self.id, name:"id", parent: name, min: 1)
            try self.s3Path?.validate(name: "\(name).s3Path")
            try validate(self.title, name:"title", parent: name, max: 1024)
            try validate(self.title, name:"title", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case accessControlList = "AccessControlList"
            case attributes = "Attributes"
            case blob = "Blob"
            case contentType = "ContentType"
            case id = "Id"
            case s3Path = "S3Path"
            case title = "Title"
        }
    }

    public struct DocumentAttribute: AWSShape {

        /// The identifier for the attribute.
        public let key: String
        /// The value of the attribute.
        public let value: DocumentAttributeValue

        public init(key: String, value: DocumentAttributeValue) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.key, name:"key", parent: name, max: 200)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.key, name:"key", parent: name, pattern: "[a-zA-Z0-9_][a-zA-Z0-9_-]*")
            try self.value.validate(name: "\(name).value")
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct DocumentAttributeValue: AWSShape {

        /// A date value expressed as seconds from the Unix epoch.
        public let dateValue: TimeStamp?
        /// A long integer value.
        public let longValue: Int64?
        /// A list of strings. 
        public let stringListValue: [String]?
        /// A string, such as "department".
        public let stringValue: String?

        public init(dateValue: TimeStamp? = nil, longValue: Int64? = nil, stringListValue: [String]? = nil, stringValue: String? = nil) {
            self.dateValue = dateValue
            self.longValue = longValue
            self.stringListValue = stringListValue
            self.stringValue = stringValue
        }

        public func validate(name: String) throws {
            try self.stringListValue?.forEach {
                try validate($0, name: "stringListValue[]", parent: name, max: 2048)
                try validate($0, name: "stringListValue[]", parent: name, min: 1)
            }
            try validate(self.stringListValue, name:"stringListValue", parent: name, max: 5)
            try validate(self.stringListValue, name:"stringListValue", parent: name, min: 1)
            try validate(self.stringValue, name:"stringValue", parent: name, max: 2048)
            try validate(self.stringValue, name:"stringValue", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dateValue = "DateValue"
            case longValue = "LongValue"
            case stringListValue = "StringListValue"
            case stringValue = "StringValue"
        }
    }

    public struct DocumentAttributeValueCountPair: AWSShape {

        /// The number of documents in the response that have the attribute value for the key.
        public let count: Int?
        /// The value of the attribute. For example, "HR."
        public let documentAttributeValue: DocumentAttributeValue?

        public init(count: Int? = nil, documentAttributeValue: DocumentAttributeValue? = nil) {
            self.count = count
            self.documentAttributeValue = documentAttributeValue
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
            case documentAttributeValue = "DocumentAttributeValue"
        }
    }

    public struct DocumentMetadataConfiguration: AWSShape {

        /// The name of the index field.
        public let name: String
        /// Provides manual tuning parameters to determine how the field affects the search results.
        public let relevance: Relevance?
        /// Provides information about how the field is used during a search.
        public let search: Search?
        /// The data type of the index field. 
        public let `type`: DocumentAttributeValueType

        public init(name: String, relevance: Relevance? = nil, search: Search? = nil, type: DocumentAttributeValueType) {
            self.name = name
            self.relevance = relevance
            self.search = search
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 30)
            try validate(self.name, name:"name", parent: name, min: 1)
            try self.relevance?.validate(name: "\(name).relevance")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case relevance = "Relevance"
            case search = "Search"
            case `type` = "Type"
        }
    }

    public struct DocumentsMetadataConfiguration: AWSShape {

        /// A prefix used to filter metadata configuration files in the AWS S3 bucket. The S3 bucket might contain multiple metadata files. Use S3Prefix to include only the desired metadata files.
        public let s3Prefix: String?

        public init(s3Prefix: String? = nil) {
            self.s3Prefix = s3Prefix
        }

        public func validate(name: String) throws {
            try validate(self.s3Prefix, name:"s3Prefix", parent: name, max: 1024)
            try validate(self.s3Prefix, name:"s3Prefix", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case s3Prefix = "S3Prefix"
        }
    }

    public struct Facet: AWSShape {

        /// The unique key for the document attribute.
        public let documentAttributeKey: String?

        public init(documentAttributeKey: String? = nil) {
            self.documentAttributeKey = documentAttributeKey
        }

        public func validate(name: String) throws {
            try validate(self.documentAttributeKey, name:"documentAttributeKey", parent: name, max: 200)
            try validate(self.documentAttributeKey, name:"documentAttributeKey", parent: name, min: 1)
            try validate(self.documentAttributeKey, name:"documentAttributeKey", parent: name, pattern: "[a-zA-Z0-9_][a-zA-Z0-9_-]*")
        }

        private enum CodingKeys: String, CodingKey {
            case documentAttributeKey = "DocumentAttributeKey"
        }
    }

    public struct FacetResult: AWSShape {

        /// The key for the facet values. This is the same as the DocumentAttributeKey provided in the query.
        public let documentAttributeKey: String?
        /// An array of key/value pairs, where the key is the value of the attribute and the count is the number of documents that share the key value.
        public let documentAttributeValueCountPairs: [DocumentAttributeValueCountPair]?

        public init(documentAttributeKey: String? = nil, documentAttributeValueCountPairs: [DocumentAttributeValueCountPair]? = nil) {
            self.documentAttributeKey = documentAttributeKey
            self.documentAttributeValueCountPairs = documentAttributeValueCountPairs
        }

        private enum CodingKeys: String, CodingKey {
            case documentAttributeKey = "DocumentAttributeKey"
            case documentAttributeValueCountPairs = "DocumentAttributeValueCountPairs"
        }
    }

    public struct FaqStatistics: AWSShape {

        /// The total number of FAQ questions and answers contained in the index.
        public let indexedQuestionAnswersCount: Int

        public init(indexedQuestionAnswersCount: Int) {
            self.indexedQuestionAnswersCount = indexedQuestionAnswersCount
        }

        private enum CodingKeys: String, CodingKey {
            case indexedQuestionAnswersCount = "IndexedQuestionAnswersCount"
        }
    }

    public struct FaqSummary: AWSShape {

        /// The UNIX datetime that the FAQ was added to the index.
        public let createdAt: TimeStamp?
        /// The unique identifier of the FAQ.
        public let id: String?
        /// The name that you assigned the FAQ when you created or updated the FAQ.
        public let name: String?
        /// The current status of the FAQ. When the status is ACTIVE the FAQ is ready for use.
        public let status: FaqStatus?
        /// The UNIX datetime that the FAQ was last updated.
        public let updatedAt: TimeStamp?

        public init(createdAt: TimeStamp? = nil, id: String? = nil, name: String? = nil, status: FaqStatus? = nil, updatedAt: TimeStamp? = nil) {
            self.createdAt = createdAt
            self.id = id
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "CreatedAt"
            case id = "Id"
            case name = "Name"
            case status = "Status"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct Highlight: AWSShape {

        /// The zero-based location in the response string where the highlight starts.
        public let beginOffset: Int
        /// The zero-based location in the response string where the highlight ends.
        public let endOffset: Int
        /// Indicates whether the response is the best response. True if this is the best response; otherwise, false.
        public let topAnswer: Bool?

        public init(beginOffset: Int, endOffset: Int, topAnswer: Bool? = nil) {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
            self.topAnswer = topAnswer
        }

        private enum CodingKeys: String, CodingKey {
            case beginOffset = "BeginOffset"
            case endOffset = "EndOffset"
            case topAnswer = "TopAnswer"
        }
    }

    public struct IndexConfigurationSummary: AWSShape {

        /// The Unix timestamp when the index was created.
        public let createdAt: TimeStamp
        /// A unique identifier for the index. Use this to identify the index when you are using operations such as Query, DescribeIndex, UpdateIndex, and DeleteIndex.
        public let id: String?
        /// The name of the index.
        public let name: String?
        /// The current status of the index. When the status is ACTIVE, the index is ready to search.
        public let status: IndexStatus
        /// The Unix timestamp when the index was last updated by the UpdateIndex operation.
        public let updatedAt: TimeStamp

        public init(createdAt: TimeStamp, id: String? = nil, name: String? = nil, status: IndexStatus, updatedAt: TimeStamp) {
            self.createdAt = createdAt
            self.id = id
            self.name = name
            self.status = status
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "CreatedAt"
            case id = "Id"
            case name = "Name"
            case status = "Status"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct IndexStatistics: AWSShape {

        /// The number of question and answer topics in the index.
        public let faqStatistics: FaqStatistics
        /// The number of text documents indexed.
        public let textDocumentStatistics: TextDocumentStatistics

        public init(faqStatistics: FaqStatistics, textDocumentStatistics: TextDocumentStatistics) {
            self.faqStatistics = faqStatistics
            self.textDocumentStatistics = textDocumentStatistics
        }

        private enum CodingKeys: String, CodingKey {
            case faqStatistics = "FaqStatistics"
            case textDocumentStatistics = "TextDocumentStatistics"
        }
    }

    public struct ListDataSourceSyncJobsRequest: AWSShape {

        /// The identifier of the data source.
        public let id: String
        /// The identifier of the index that contains the data source.
        public let indexId: String
        /// The maximum number of synchronization jobs to return in the response. If there are fewer results in the list, this response contains only the actual results.
        public let maxResults: Int?
        /// If the result of the previous request to GetDataSourceSyncJobHistory was truncated, include the NextToken to fetch the next set of jobs.
        public let nextToken: String?
        /// When specified, the synchronization jobs returned in the list are limited to jobs between the specified dates. 
        public let startTimeFilter: TimeRange?
        /// When specified, only returns synchronization jobs with the Status field equal to the specified status.
        public let statusFilter: DataSourceSyncJobStatus?

        public init(id: String, indexId: String, maxResults: Int? = nil, nextToken: String? = nil, startTimeFilter: TimeRange? = nil, statusFilter: DataSourceSyncJobStatus? = nil) {
            self.id = id
            self.indexId = indexId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.startTimeFilter = startTimeFilter
            self.statusFilter = statusFilter
        }

        public func validate(name: String) throws {
            try validate(self.id, name:"id", parent: name, max: 100)
            try validate(self.id, name:"id", parent: name, min: 1)
            try validate(self.id, name:"id", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9_-]*")
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 10)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 800)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case indexId = "IndexId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case startTimeFilter = "StartTimeFilter"
            case statusFilter = "StatusFilter"
        }
    }

    public struct ListDataSourceSyncJobsResponse: AWSShape {

        /// A history of synchronization jobs for the data source.
        public let history: [DataSourceSyncJob]?
        /// The GetDataSourceSyncJobHistory operation returns a page of vocabularies at a time. The maximum size of the page is set by the MaxResults parameter. If there are more jobs in the list than the page size, Amazon Kendra returns the NextPage token. Include the token in the next request to the GetDataSourceSyncJobHistory operation to return in the next page of jobs.
        public let nextToken: String?

        public init(history: [DataSourceSyncJob]? = nil, nextToken: String? = nil) {
            self.history = history
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case history = "History"
            case nextToken = "NextToken"
        }
    }

    public struct ListDataSourcesRequest: AWSShape {

        /// The identifier of the index that contains the data source.
        public let indexId: String
        /// The maximum number of data sources to return.
        public let maxResults: Int?
        /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of data sources (DataSourceSummaryItems). 
        public let nextToken: String?

        public init(indexId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.indexId = indexId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 800)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case indexId = "IndexId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListDataSourcesResponse: AWSShape {

        /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of data sources. 
        public let nextToken: String?
        /// An array of summary information for one or more data sources.
        public let summaryItems: [DataSourceSummary]?

        public init(nextToken: String? = nil, summaryItems: [DataSourceSummary]? = nil) {
            self.nextToken = nextToken
            self.summaryItems = summaryItems
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case summaryItems = "SummaryItems"
        }
    }

    public struct ListFaqsRequest: AWSShape {

        /// The index that contains the FAQ lists.
        public let indexId: String
        /// The maximum number of FAQs to return in the response. If there are fewer results in the list, this response contains only the actual results.
        public let maxResults: Int?
        /// If the result of the previous request to ListFaqs was truncated, include the NextToken to fetch the next set of FAQs.
        public let nextToken: String?

        public init(indexId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.indexId = indexId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 800)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case indexId = "IndexId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListFaqsResponse: AWSShape {

        /// information about the FAQs associated with the specified index.
        public let faqSummaryItems: [FaqSummary]?
        /// The ListFaqs operation returns a page of FAQs at a time. The maximum size of the page is set by the MaxResults parameter. If there are more jobs in the list than the page size, Amazon Kendra returns the NextPage token. Include the token in the next request to the ListFaqs operation to return the next page of FAQs.
        public let nextToken: String?

        public init(faqSummaryItems: [FaqSummary]? = nil, nextToken: String? = nil) {
            self.faqSummaryItems = faqSummaryItems
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case faqSummaryItems = "FaqSummaryItems"
            case nextToken = "NextToken"
        }
    }

    public struct ListIndicesRequest: AWSShape {

        /// The maximum number of data sources to return.
        public let maxResults: Int?
        /// If the previous response was incomplete (because there is more data to retrieve), Amazon Kendra returns a pagination token in the response. You can use this pagination token to retrieve the next set of indexes (DataSourceSummaryItems). 
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 800)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListIndicesResponse: AWSShape {

        /// An array of summary information for one or more indexes.
        public let indexConfigurationSummaryItems: [IndexConfigurationSummary]?
        /// If the response is truncated, Amazon Kendra returns this token that you can use in the subsequent request to retrieve the next set of indexes.
        public let nextToken: String?

        public init(indexConfigurationSummaryItems: [IndexConfigurationSummary]? = nil, nextToken: String? = nil) {
            self.indexConfigurationSummaryItems = indexConfigurationSummaryItems
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case indexConfigurationSummaryItems = "IndexConfigurationSummaryItems"
            case nextToken = "NextToken"
        }
    }

    public struct Principal: AWSShape {

        /// Whether to allow or deny access to the principal.
        public let access: ReadAccessType
        /// The name of the user or group.
        public let name: String
        /// The type of principal.
        public let `type`: PrincipalType

        public init(access: ReadAccessType, name: String, type: PrincipalType) {
            self.access = access
            self.name = name
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, max: 200)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "^\\P{C}*$")
        }

        private enum CodingKeys: String, CodingKey {
            case access = "Access"
            case name = "Name"
            case `type` = "Type"
        }
    }

    public struct QueryRequest: AWSShape {

        /// Enables filtered searches based on document attributes. You can only provide one attribute filter; however, the AndAllFilters, NotFilter, and OrAllFilters parameters contain a list of other filters. The AttributeFilter parameter enables you to create a set of filtering rules that a document must satisfy to be included in the query results.
        public let attributeFilter: AttributeFilter?
        /// An array of documents attributes. Amazon Kendra returns a count for each attribute key specified. You can use this information to help narrow the search for your user.
        public let facets: [Facet]?
        /// The unique identifier of the index to search. The identifier is returned in the response from the operation.
        public let indexId: String
        /// Query results are returned in pages the size of the PageSize parameter. By default, Amazon Kendra returns the first page of results. Use this parameter to get result pages after the first one.
        public let pageNumber: Int?
        /// Sets the number of results that are returned in each page of results. The default page size is 100.
        public let pageSize: Int?
        /// Sets the type of query. Only results for the specified query type are returned.
        public let queryResultTypeFilter: QueryResultType?
        /// The text to search for.
        public let queryText: String
        /// An array of document attributes to include in the response. No other document attributes are included in the response. By default all document attributes are included in the response. 
        public let requestedDocumentAttributes: [String]?

        public init(attributeFilter: AttributeFilter? = nil, facets: [Facet]? = nil, indexId: String, pageNumber: Int? = nil, pageSize: Int? = nil, queryResultTypeFilter: QueryResultType? = nil, queryText: String, requestedDocumentAttributes: [String]? = nil) {
            self.attributeFilter = attributeFilter
            self.facets = facets
            self.indexId = indexId
            self.pageNumber = pageNumber
            self.pageSize = pageSize
            self.queryResultTypeFilter = queryResultTypeFilter
            self.queryText = queryText
            self.requestedDocumentAttributes = requestedDocumentAttributes
        }

        public func validate(name: String) throws {
            try self.attributeFilter?.validate(name: "\(name).attributeFilter")
            try self.facets?.forEach {
                try $0.validate(name: "\(name).facets[]")
            }
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
            try validate(self.queryText, name:"queryText", parent: name, max: 1000)
            try validate(self.queryText, name:"queryText", parent: name, min: 1)
            try validate(self.queryText, name:"queryText", parent: name, pattern: "^\\P{C}*$")
            try self.requestedDocumentAttributes?.forEach {
                try validate($0, name: "requestedDocumentAttributes[]", parent: name, max: 200)
                try validate($0, name: "requestedDocumentAttributes[]", parent: name, min: 1)
                try validate($0, name: "requestedDocumentAttributes[]", parent: name, pattern: "[a-zA-Z0-9_][a-zA-Z0-9_-]*")
            }
            try validate(self.requestedDocumentAttributes, name:"requestedDocumentAttributes", parent: name, max: 100)
            try validate(self.requestedDocumentAttributes, name:"requestedDocumentAttributes", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributeFilter = "AttributeFilter"
            case facets = "Facets"
            case indexId = "IndexId"
            case pageNumber = "PageNumber"
            case pageSize = "PageSize"
            case queryResultTypeFilter = "QueryResultTypeFilter"
            case queryText = "QueryText"
            case requestedDocumentAttributes = "RequestedDocumentAttributes"
        }
    }

    public struct QueryResult: AWSShape {

        /// Contains the facet results. A FacetResult contains the counts for each attribute key that was specified in the Facets input parameter.
        public let facetResults: [FacetResult]?
        /// The unique identifier for the search. You use QueryId to identify the search when using the feedback API.
        public let queryId: String?
        /// The results of the search.
        public let resultItems: [QueryResultItem]?
        /// The number of items returned by the search. Use this to determine when you have requested the last set of results.
        public let totalNumberOfResults: Int?

        public init(facetResults: [FacetResult]? = nil, queryId: String? = nil, resultItems: [QueryResultItem]? = nil, totalNumberOfResults: Int? = nil) {
            self.facetResults = facetResults
            self.queryId = queryId
            self.resultItems = resultItems
            self.totalNumberOfResults = totalNumberOfResults
        }

        private enum CodingKeys: String, CodingKey {
            case facetResults = "FacetResults"
            case queryId = "QueryId"
            case resultItems = "ResultItems"
            case totalNumberOfResults = "TotalNumberOfResults"
        }
    }

    public struct QueryResultItem: AWSShape {

        public let additionalAttributes: [AdditionalResultAttribute]?
        /// An array of document attributes for the document that the query result maps to. For example, the document author (Author) or the source URI (SourceUri) of the document.
        public let documentAttributes: [DocumentAttribute]?
        /// An extract of the text in the document. Contains information about highlighting the relevant terms in the excerpt.
        public let documentExcerpt: TextWithHighlights?
        /// The unique identifier for the document.
        public let documentId: String?
        /// The title of the document. Contains the text of the title and information for highlighting the relevant terms in the title.
        public let documentTitle: TextWithHighlights?
        /// The URI of the original location of the document.
        public let documentURI: String?
        /// The unique identifier for the query result.
        public let id: String?
        /// The type of document. 
        public let `type`: QueryResultType?

        public init(additionalAttributes: [AdditionalResultAttribute]? = nil, documentAttributes: [DocumentAttribute]? = nil, documentExcerpt: TextWithHighlights? = nil, documentId: String? = nil, documentTitle: TextWithHighlights? = nil, documentURI: String? = nil, id: String? = nil, type: QueryResultType? = nil) {
            self.additionalAttributes = additionalAttributes
            self.documentAttributes = documentAttributes
            self.documentExcerpt = documentExcerpt
            self.documentId = documentId
            self.documentTitle = documentTitle
            self.documentURI = documentURI
            self.id = id
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case additionalAttributes = "AdditionalAttributes"
            case documentAttributes = "DocumentAttributes"
            case documentExcerpt = "DocumentExcerpt"
            case documentId = "DocumentId"
            case documentTitle = "DocumentTitle"
            case documentURI = "DocumentURI"
            case id = "Id"
            case `type` = "Type"
        }
    }

    public struct Relevance: AWSShape {

        /// Specifies the time period that the boost applies to. For example, to make the boost apply to documents with the field value within the last month, you would use "2628000s". Once the field value is beyond the specified range, the effect of the boost drops off. The higher the importance, the faster the effect drops off. If you don't specify a value, the default is 3 months. The value of the field is a numeric string followed by the character "s", for example "86400s" for one day, or "604800s" for one week.  Only applies to DATE fields.
        public let duration: String?
        /// Indicates that this field determines how "fresh" a document is. For example, if document 1 was created on November 5, and document 2 was created on October 31, document 1 is "fresher" than document 2. You can only set the Freshness field on one DATE type field. Only applies to DATE fields.
        public let freshness: Bool?
        /// The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers.
        public let importance: Int?
        /// Determines how values should be interpreted. When the RankOrder field is ASCENDING, higher numbers are better. For example, a document with a rating score of 10 is higher ranking than a document with a rating score of 1. When the RankOrder field is DESCENDING, lower numbers are better. For example, in a task tracking application, a priority 1 task is more important than a priority 5 task. Only applies to LONG and DOUBLE fields.
        public let rankOrder: Order?
        /// A list of values that should be given a different boost when they appear in the result list. For example, if you are boosting a field called "department," query terms that match the department field are boosted in the result. However, you can add entries from the department field to boost documents with those values higher.  For example, you can add entries to the map with names of departments. If you add "HR",5 and "Legal",3 those departments are given special attention when they appear in the metadata of a document. When those terms appear they are given the specified importance instead of the regular importance for the boost.
        public let valueImportanceMap: [String: Int]?

        public init(duration: String? = nil, freshness: Bool? = nil, importance: Int? = nil, rankOrder: Order? = nil, valueImportanceMap: [String: Int]? = nil) {
            self.duration = duration
            self.freshness = freshness
            self.importance = importance
            self.rankOrder = rankOrder
            self.valueImportanceMap = valueImportanceMap
        }

        public func validate(name: String) throws {
            try validate(self.duration, name:"duration", parent: name, max: 10)
            try validate(self.duration, name:"duration", parent: name, min: 1)
            try validate(self.duration, name:"duration", parent: name, pattern: "[0-9]+[s]")
            try validate(self.importance, name:"importance", parent: name, max: 10)
            try validate(self.importance, name:"importance", parent: name, min: 1)
            try self.valueImportanceMap?.forEach {
                try validate($0.key, name:"valueImportanceMap.key", parent: name, max: 50)
                try validate($0.key, name:"valueImportanceMap.key", parent: name, min: 1)
                try validate($0.value, name:"valueImportanceMap[\"\($0.key)\"]", parent: name, max: 10)
                try validate($0.value, name:"valueImportanceMap[\"\($0.key)\"]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case freshness = "Freshness"
            case importance = "Importance"
            case rankOrder = "RankOrder"
            case valueImportanceMap = "ValueImportanceMap"
        }
    }

    public struct RelevanceFeedback: AWSShape {

        /// Whether to document was relevant or not relevant to the search.
        public let relevanceValue: RelevanceType
        /// The unique identifier of the search result that the user provided relevance feedback for.
        public let resultId: String

        public init(relevanceValue: RelevanceType, resultId: String) {
            self.relevanceValue = relevanceValue
            self.resultId = resultId
        }

        public func validate(name: String) throws {
            try validate(self.resultId, name:"resultId", parent: name, max: 73)
            try validate(self.resultId, name:"resultId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case relevanceValue = "RelevanceValue"
            case resultId = "ResultId"
        }
    }

    public struct S3DataSourceConfiguration: AWSShape {

        /// Provides the path to the S3 bucket that contains the user context filtering files for the data source.
        public let accessControlListConfiguration: AccessControlListConfiguration?
        /// The name of the bucket that contains the documents.
        public let bucketName: String
        public let documentsMetadataConfiguration: DocumentsMetadataConfiguration?
        /// A list of glob patterns for documents that should not be indexed. If a document that matches an inclusion prefix also matches an exclusion pattern, the document is not indexed. For more information about glob patterns, see glob (programming) in Wikipedia.
        public let exclusionPatterns: [String]?
        /// A list of S3 prefixes for the documents that should be included in the index.
        public let inclusionPrefixes: [String]?

        public init(accessControlListConfiguration: AccessControlListConfiguration? = nil, bucketName: String, documentsMetadataConfiguration: DocumentsMetadataConfiguration? = nil, exclusionPatterns: [String]? = nil, inclusionPrefixes: [String]? = nil) {
            self.accessControlListConfiguration = accessControlListConfiguration
            self.bucketName = bucketName
            self.documentsMetadataConfiguration = documentsMetadataConfiguration
            self.exclusionPatterns = exclusionPatterns
            self.inclusionPrefixes = inclusionPrefixes
        }

        public func validate(name: String) throws {
            try self.accessControlListConfiguration?.validate(name: "\(name).accessControlListConfiguration")
            try validate(self.bucketName, name:"bucketName", parent: name, max: 63)
            try validate(self.bucketName, name:"bucketName", parent: name, min: 3)
            try validate(self.bucketName, name:"bucketName", parent: name, pattern: "[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]")
            try self.documentsMetadataConfiguration?.validate(name: "\(name).documentsMetadataConfiguration")
            try self.exclusionPatterns?.forEach {
                try validate($0, name: "exclusionPatterns[]", parent: name, max: 50)
                try validate($0, name: "exclusionPatterns[]", parent: name, min: 1)
            }
            try validate(self.exclusionPatterns, name:"exclusionPatterns", parent: name, max: 100)
            try validate(self.exclusionPatterns, name:"exclusionPatterns", parent: name, min: 0)
            try self.inclusionPrefixes?.forEach {
                try validate($0, name: "inclusionPrefixes[]", parent: name, max: 50)
                try validate($0, name: "inclusionPrefixes[]", parent: name, min: 1)
            }
            try validate(self.inclusionPrefixes, name:"inclusionPrefixes", parent: name, max: 100)
            try validate(self.inclusionPrefixes, name:"inclusionPrefixes", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case accessControlListConfiguration = "AccessControlListConfiguration"
            case bucketName = "BucketName"
            case documentsMetadataConfiguration = "DocumentsMetadataConfiguration"
            case exclusionPatterns = "ExclusionPatterns"
            case inclusionPrefixes = "InclusionPrefixes"
        }
    }

    public struct S3Path: AWSShape {

        /// The name of the S3 bucket that contains the file.
        public let bucket: String
        /// The name of the file.
        public let key: String

        public init(bucket: String, key: String) {
            self.bucket = bucket
            self.key = key
        }

        public func validate(name: String) throws {
            try validate(self.bucket, name:"bucket", parent: name, max: 63)
            try validate(self.bucket, name:"bucket", parent: name, min: 3)
            try validate(self.bucket, name:"bucket", parent: name, pattern: "[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]")
            try validate(self.key, name:"key", parent: name, max: 1024)
            try validate(self.key, name:"key", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
        }
    }

    public struct Search: AWSShape {

        /// Determines whether the field is returned in the query response. The default is true.
        public let displayable: Bool?
        /// Indicates that the field can be used to create search facets, a count of results for each value in the field. The default is false .
        public let facetable: Bool?
        /// Determines whether the field is used in the search. If the Searchable field is true, you can use relevance tuning to manually tune how Amazon Kendra weights the field in the search. The default is true for string fields and false for number and date fields.
        public let searchable: Bool?

        public init(displayable: Bool? = nil, facetable: Bool? = nil, searchable: Bool? = nil) {
            self.displayable = displayable
            self.facetable = facetable
            self.searchable = searchable
        }

        private enum CodingKeys: String, CodingKey {
            case displayable = "Displayable"
            case facetable = "Facetable"
            case searchable = "Searchable"
        }
    }

    public struct ServerSideEncryptionConfiguration: AWSShape {

        /// The identifier of the AWS KMS customer master key (CMK). Amazon Kendra doesn't support asymmetric CMKs.
        public let kmsKeyId: String?

        public init(kmsKeyId: String? = nil) {
            self.kmsKeyId = kmsKeyId
        }

        public func validate(name: String) throws {
            try validate(self.kmsKeyId, name:"kmsKeyId", parent: name, max: 2048)
            try validate(self.kmsKeyId, name:"kmsKeyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
        }
    }

    public struct SharePointConfiguration: AWSShape {

        ///  TRUE to include attachments to documents stored in your Microsoft SharePoint site in the index; otherwise, FALSE.
        public let crawlAttachments: Bool?
        /// The Microsoft SharePoint attribute field that contains the title of the document.
        public let documentTitleFieldName: String?
        /// A list of regular expression patterns. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an exclusion pattern and an inclusion pattern, the document is not included in the index. The regex is applied to the display URL of the SharePoint document.
        public let exclusionPatterns: [String]?
        /// A list of DataSourceToIndexFieldMapping objects that map Microsoft SharePoint attributes to custom fields in the Amazon Kendra index. You must first create the index fields using the operation before you map SharePoint attributes. For more information, see Mapping Data Source Fields.
        public let fieldMappings: [DataSourceToIndexFieldMapping]?
        /// A list of regular expression patterns. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion pattern and an exclusion pattern, the document is not included in the index. The regex is applied to the display URL of the SharePoint document.
        public let inclusionPatterns: [String]?
        /// The Amazon Resource Name (ARN) of credentials stored in AWS Secrets Manager. The credentials should be a user/password pair. For more information, see Using a Microsoft SharePoint Data Source. For more information about AWS Secrets Manager, see  What Is AWS Secrets Manager  in the AWS Secrets Manager user guide.
        public let secretArn: String
        /// The version of Microsoft SharePoint that you are using as a data source.
        public let sharePointVersion: SharePointVersion
        /// The URLs of the Microsoft SharePoint site that contains the documents that should be indexed.
        public let urls: [String]
        /// Set to TRUE to use the Microsoft SharePoint change log to determine the documents that need to be updated in the index. Depending on the size of the SharePoint change log, it may take longer for Amazon Kendra to use the change log than it takes it to determine the changed documents using the Amazon Kendra document crawler.
        public let useChangeLog: Bool?
        public let vpcConfiguration: DataSourceVpcConfiguration?

        public init(crawlAttachments: Bool? = nil, documentTitleFieldName: String? = nil, exclusionPatterns: [String]? = nil, fieldMappings: [DataSourceToIndexFieldMapping]? = nil, inclusionPatterns: [String]? = nil, secretArn: String, sharePointVersion: SharePointVersion, urls: [String], useChangeLog: Bool? = nil, vpcConfiguration: DataSourceVpcConfiguration? = nil) {
            self.crawlAttachments = crawlAttachments
            self.documentTitleFieldName = documentTitleFieldName
            self.exclusionPatterns = exclusionPatterns
            self.fieldMappings = fieldMappings
            self.inclusionPatterns = inclusionPatterns
            self.secretArn = secretArn
            self.sharePointVersion = sharePointVersion
            self.urls = urls
            self.useChangeLog = useChangeLog
            self.vpcConfiguration = vpcConfiguration
        }

        public func validate(name: String) throws {
            try validate(self.documentTitleFieldName, name:"documentTitleFieldName", parent: name, max: 100)
            try validate(self.documentTitleFieldName, name:"documentTitleFieldName", parent: name, min: 1)
            try validate(self.documentTitleFieldName, name:"documentTitleFieldName", parent: name, pattern: "^[a-zA-Z][a-zA-Z0-9_.]*$")
            try self.exclusionPatterns?.forEach {
                try validate($0, name: "exclusionPatterns[]", parent: name, max: 50)
                try validate($0, name: "exclusionPatterns[]", parent: name, min: 1)
            }
            try validate(self.exclusionPatterns, name:"exclusionPatterns", parent: name, max: 100)
            try validate(self.exclusionPatterns, name:"exclusionPatterns", parent: name, min: 0)
            try self.fieldMappings?.forEach {
                try $0.validate(name: "\(name).fieldMappings[]")
            }
            try validate(self.fieldMappings, name:"fieldMappings", parent: name, max: 100)
            try validate(self.fieldMappings, name:"fieldMappings", parent: name, min: 1)
            try self.inclusionPatterns?.forEach {
                try validate($0, name: "inclusionPatterns[]", parent: name, max: 50)
                try validate($0, name: "inclusionPatterns[]", parent: name, min: 1)
            }
            try validate(self.inclusionPatterns, name:"inclusionPatterns", parent: name, max: 100)
            try validate(self.inclusionPatterns, name:"inclusionPatterns", parent: name, min: 0)
            try validate(self.secretArn, name:"secretArn", parent: name, max: 1284)
            try validate(self.secretArn, name:"secretArn", parent: name, min: 1)
            try validate(self.secretArn, name:"secretArn", parent: name, pattern: "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}")
            try self.urls.forEach {
                try validate($0, name: "urls[]", parent: name, max: 2048)
                try validate($0, name: "urls[]", parent: name, min: 1)
                try validate($0, name: "urls[]", parent: name, pattern: "^(https?|ftp|file):\\/\\/(.*)")
            }
            try validate(self.urls, name:"urls", parent: name, max: 100)
            try validate(self.urls, name:"urls", parent: name, min: 1)
            try self.vpcConfiguration?.validate(name: "\(name).vpcConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case crawlAttachments = "CrawlAttachments"
            case documentTitleFieldName = "DocumentTitleFieldName"
            case exclusionPatterns = "ExclusionPatterns"
            case fieldMappings = "FieldMappings"
            case inclusionPatterns = "InclusionPatterns"
            case secretArn = "SecretArn"
            case sharePointVersion = "SharePointVersion"
            case urls = "Urls"
            case useChangeLog = "UseChangeLog"
            case vpcConfiguration = "VpcConfiguration"
        }
    }

    public struct StartDataSourceSyncJobRequest: AWSShape {

        /// The identifier of the data source to synchronize.
        public let id: String
        /// The identifier of the index that contains the data source.
        public let indexId: String

        public init(id: String, indexId: String) {
            self.id = id
            self.indexId = indexId
        }

        public func validate(name: String) throws {
            try validate(self.id, name:"id", parent: name, max: 100)
            try validate(self.id, name:"id", parent: name, min: 1)
            try validate(self.id, name:"id", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9_-]*")
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case indexId = "IndexId"
        }
    }

    public struct StartDataSourceSyncJobResponse: AWSShape {

        /// Identifies a particular synchronization job.
        public let executionId: String?

        public init(executionId: String? = nil) {
            self.executionId = executionId
        }

        private enum CodingKeys: String, CodingKey {
            case executionId = "ExecutionId"
        }
    }

    public struct StopDataSourceSyncJobRequest: AWSShape {

        /// The identifier of the data source for which to stop the synchronization jobs.
        public let id: String
        /// The identifier of the index that contains the data source.
        public let indexId: String

        public init(id: String, indexId: String) {
            self.id = id
            self.indexId = indexId
        }

        public func validate(name: String) throws {
            try validate(self.id, name:"id", parent: name, max: 100)
            try validate(self.id, name:"id", parent: name, min: 1)
            try validate(self.id, name:"id", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9_-]*")
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case indexId = "IndexId"
        }
    }

    public struct SubmitFeedbackRequest: AWSShape {

        /// Tells Amazon Kendra that a particular search result link was chosen by the user. 
        public let clickFeedbackItems: [ClickFeedback]?
        /// The identifier of the index that was queried.
        public let indexId: String
        /// The identifier of the specific query for which you are submitting feedback. The query ID is returned in the response to the operation.
        public let queryId: String
        /// Provides Amazon Kendra with relevant or not relevant feedback for whether a particular item was relevant to the search.
        public let relevanceFeedbackItems: [RelevanceFeedback]?

        public init(clickFeedbackItems: [ClickFeedback]? = nil, indexId: String, queryId: String, relevanceFeedbackItems: [RelevanceFeedback]? = nil) {
            self.clickFeedbackItems = clickFeedbackItems
            self.indexId = indexId
            self.queryId = queryId
            self.relevanceFeedbackItems = relevanceFeedbackItems
        }

        public func validate(name: String) throws {
            try self.clickFeedbackItems?.forEach {
                try $0.validate(name: "\(name).clickFeedbackItems[]")
            }
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
            try validate(self.queryId, name:"queryId", parent: name, max: 36)
            try validate(self.queryId, name:"queryId", parent: name, min: 1)
            try self.relevanceFeedbackItems?.forEach {
                try $0.validate(name: "\(name).relevanceFeedbackItems[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case clickFeedbackItems = "ClickFeedbackItems"
            case indexId = "IndexId"
            case queryId = "QueryId"
            case relevanceFeedbackItems = "RelevanceFeedbackItems"
        }
    }

    public struct TextDocumentStatistics: AWSShape {

        /// The number of text documents indexed.
        public let indexedTextDocumentsCount: Int

        public init(indexedTextDocumentsCount: Int) {
            self.indexedTextDocumentsCount = indexedTextDocumentsCount
        }

        private enum CodingKeys: String, CodingKey {
            case indexedTextDocumentsCount = "IndexedTextDocumentsCount"
        }
    }

    public struct TextWithHighlights: AWSShape {

        /// The beginning and end of the text that should be highlighted.
        public let highlights: [Highlight]?
        /// The text to display to the user.
        public let text: String?

        public init(highlights: [Highlight]? = nil, text: String? = nil) {
            self.highlights = highlights
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case highlights = "Highlights"
            case text = "Text"
        }
    }

    public struct TimeRange: AWSShape {

        /// The UNIX datetime of the end of the time range.
        public let endTime: TimeStamp?
        /// The UNIX datetime of the beginning of the time range.
        public let startTime: TimeStamp?

        public init(endTime: TimeStamp? = nil, startTime: TimeStamp? = nil) {
            self.endTime = endTime
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case startTime = "StartTime"
        }
    }

    public struct UpdateDataSourceRequest: AWSShape {

        public let configuration: DataSourceConfiguration?
        /// The new description for the data source.
        public let description: String?
        /// The unique identifier of the data source to update.
        public let id: String
        /// The identifier of the index that contains the data source to update.
        public let indexId: String
        /// The name of the data source to update. The name of the data source can't be updated. To rename a data source you must delete the data source and re-create it.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the new role to use when the data source is accessing resources on your behalf.
        public let roleArn: String?
        /// The new update schedule for the data source.
        public let schedule: String?

        public init(configuration: DataSourceConfiguration? = nil, description: String? = nil, id: String, indexId: String, name: String? = nil, roleArn: String? = nil, schedule: String? = nil) {
            self.configuration = configuration
            self.description = description
            self.id = id
            self.indexId = indexId
            self.name = name
            self.roleArn = roleArn
            self.schedule = schedule
        }

        public func validate(name: String) throws {
            try self.configuration?.validate(name: "\(name).configuration")
            try validate(self.description, name:"description", parent: name, max: 1000)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.description, name:"description", parent: name, pattern: "^\\P{C}*$")
            try validate(self.id, name:"id", parent: name, max: 100)
            try validate(self.id, name:"id", parent: name, min: 1)
            try validate(self.id, name:"id", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9_-]*")
            try validate(self.indexId, name:"indexId", parent: name, max: 36)
            try validate(self.indexId, name:"indexId", parent: name, min: 36)
            try validate(self.indexId, name:"indexId", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
            try validate(self.name, name:"name", parent: name, max: 1000)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9_-]*")
            try validate(self.roleArn, name:"roleArn", parent: name, max: 1284)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 1)
            try validate(self.roleArn, name:"roleArn", parent: name, pattern: "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}")
        }

        private enum CodingKeys: String, CodingKey {
            case configuration = "Configuration"
            case description = "Description"
            case id = "Id"
            case indexId = "IndexId"
            case name = "Name"
            case roleArn = "RoleArn"
            case schedule = "Schedule"
        }
    }

    public struct UpdateIndexRequest: AWSShape {

        /// A new description for the index.
        public let description: String?
        /// The document metadata to update. 
        public let documentMetadataConfigurationUpdates: [DocumentMetadataConfiguration]?
        /// The identifier of the index to update.
        public let id: String
        /// The name of the index to update.
        public let name: String?
        /// A new IAM role that gives Amazon Kendra permission to access your Amazon CloudWatch logs.
        public let roleArn: String?

        public init(description: String? = nil, documentMetadataConfigurationUpdates: [DocumentMetadataConfiguration]? = nil, id: String, name: String? = nil, roleArn: String? = nil) {
            self.description = description
            self.documentMetadataConfigurationUpdates = documentMetadataConfigurationUpdates
            self.id = id
            self.name = name
            self.roleArn = roleArn
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 1000)
            try validate(self.description, name:"description", parent: name, min: 1)
            try validate(self.description, name:"description", parent: name, pattern: "^\\P{C}*$")
            try self.documentMetadataConfigurationUpdates?.forEach {
                try $0.validate(name: "\(name).documentMetadataConfigurationUpdates[]")
            }
            try validate(self.documentMetadataConfigurationUpdates, name:"documentMetadataConfigurationUpdates", parent: name, max: 500)
            try validate(self.documentMetadataConfigurationUpdates, name:"documentMetadataConfigurationUpdates", parent: name, min: 0)
            try validate(self.id, name:"id", parent: name, max: 36)
            try validate(self.id, name:"id", parent: name, min: 36)
            try validate(self.id, name:"id", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9-]*")
            try validate(self.name, name:"name", parent: name, max: 1000)
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.name, name:"name", parent: name, pattern: "[a-zA-Z0-9][a-zA-Z0-9_-]*")
            try validate(self.roleArn, name:"roleArn", parent: name, max: 1284)
            try validate(self.roleArn, name:"roleArn", parent: name, min: 1)
            try validate(self.roleArn, name:"roleArn", parent: name, pattern: "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case documentMetadataConfigurationUpdates = "DocumentMetadataConfigurationUpdates"
            case id = "Id"
            case name = "Name"
            case roleArn = "RoleArn"
        }
    }
}
