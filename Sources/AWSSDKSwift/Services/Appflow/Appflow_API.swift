// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

@_exported import AWSSDKSwiftCore
import Foundation
import NIO

/**
Client object for interacting with AWS Appflow service.

Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors.  Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and AWS services like Amazon S3 and Amazon Redshift.  Use the following links to get started on the Amazon AppFlow API:    Actions: An alphabetical list of all Amazon AppFlow API operations.    Data types: An alphabetical list of all Amazon AppFlow data types.    Common parameters: Parameters that all Query operations can use.    Common errors: Client and server errors that all operations can return.   If you're new to Amazon AppFlow, we recommend that you review the Amazon AppFlow User Guide. Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as auth-code and redirecturi) with the connector-specific ConnectorProfileProperties when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the  Authorize Apps with OAuth  documentation.
*/
public struct Appflow {

    //MARK: Member variables

    public let client: AWSClient

    //MARK: Initialization

    /// Initialize the Appflow client
    /// - parameters:
    ///     - accessKeyId: Public access key provided by AWS
    ///     - secretAccessKey: Private access key provided by AWS
    ///     - sessionToken: Token provided by STS.AssumeRole() which allows access to another AWS account
    ///     - region: Region of server you want to communicate with
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middlewares: Array of middlewares to apply to requests and responses
    ///     - eventLoopGroupProvider: EventLoopGroup to use. Use `useAWSClientShared` if the client shall manage its own EventLoopGroup.
    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil, middlewares: [AWSServiceMiddleware] = [], eventLoopGroupProvider: AWSClient.EventLoopGroupProvider = .useAWSClientShared) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            sessionToken: sessionToken,
            region: region,
            service: "appflow",
            serviceProtocol: ServiceProtocol(type: .restjson, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2020-08-23",
            endpoint: endpoint,
            middlewares: middlewares,
            possibleErrorTypes: [AppflowErrorType.self],
            eventLoopGroupProvider: eventLoopGroupProvider
        )
    }
    
    //MARK: API Calls

    ///   Creates a new connector profile associated with your AWS account. There is a soft quota of 100 connector profiles per AWS account. If you need more connector profiles than this quota allows, you can submit a request to the Amazon AppFlow team through the Amazon AppFlow support channel. 
    public func createConnectorProfile(_ input: CreateConnectorProfileRequest) -> EventLoopFuture<CreateConnectorProfileResponse> {
        return client.send(operation: "CreateConnectorProfile", path: "/create-connector-profile", httpMethod: "POST", input: input)
    }

    ///   Enables your application to create a new flow using Amazon AppFlow. You must create a connector profile before calling this API. Please note that the Request Syntax below shows syntax for multiple destinations, however, you can only transfer data to one item in this list at a time. Amazon AppFlow does not currently support flows to multiple destinations at once. 
    public func createFlow(_ input: CreateFlowRequest) -> EventLoopFuture<CreateFlowResponse> {
        return client.send(operation: "CreateFlow", path: "/create-flow", httpMethod: "POST", input: input)
    }

    ///   Enables you to delete an existing connector profile. 
    public func deleteConnectorProfile(_ input: DeleteConnectorProfileRequest) -> EventLoopFuture<DeleteConnectorProfileResponse> {
        return client.send(operation: "DeleteConnectorProfile", path: "/delete-connector-profile", httpMethod: "POST", input: input)
    }

    ///   Enables your application to delete an existing flow. Before deleting the flow, Amazon AppFlow validates the request by checking the flow configuration and status. You can delete flows one at a time. 
    public func deleteFlow(_ input: DeleteFlowRequest) -> EventLoopFuture<DeleteFlowResponse> {
        return client.send(operation: "DeleteFlow", path: "/delete-flow", httpMethod: "POST", input: input)
    }

    ///   Provides details regarding the entity used with the connector, with a description of the data model for each entity. 
    public func describeConnectorEntity(_ input: DescribeConnectorEntityRequest) -> EventLoopFuture<DescribeConnectorEntityResponse> {
        return client.send(operation: "DescribeConnectorEntity", path: "/describe-connector-entity", httpMethod: "POST", input: input)
    }

    ///   Returns a list of connector-profile details matching the provided connector-profile names and connector-types. Both input lists are optional, and you can use them to filter the result.  If no names or connector-types are provided, returns all connector profiles in a paginated form. If there is no match, this operation returns an empty list.
    public func describeConnectorProfiles(_ input: DescribeConnectorProfilesRequest) -> EventLoopFuture<DescribeConnectorProfilesResponse> {
        return client.send(operation: "DescribeConnectorProfiles", path: "/describe-connector-profiles", httpMethod: "POST", input: input)
    }

    ///   Describes the connectors vended by Amazon AppFlow for specified connector types. If you don't specify a connector type, this operation describes all connectors vended by Amazon AppFlow. If there are more connectors than can be returned in one page, the response contains a nextToken object, which can be be passed in to the next call to the DescribeConnectors API operation to retrieve the next page. 
    public func describeConnectors(_ input: DescribeConnectorsRequest) -> EventLoopFuture<DescribeConnectorsResponse> {
        return client.send(operation: "DescribeConnectors", path: "/describe-connectors", httpMethod: "POST", input: input)
    }

    ///   Provides a description of the specified flow. 
    public func describeFlow(_ input: DescribeFlowRequest) -> EventLoopFuture<DescribeFlowResponse> {
        return client.send(operation: "DescribeFlow", path: "/describe-flow", httpMethod: "POST", input: input)
    }

    ///   Fetches the execution history of the flow. 
    public func describeFlowExecutionRecords(_ input: DescribeFlowExecutionRecordsRequest) -> EventLoopFuture<DescribeFlowExecutionRecordsResponse> {
        return client.send(operation: "DescribeFlowExecutionRecords", path: "/describe-flow-execution-records", httpMethod: "POST", input: input)
    }

    ///   Returns the list of available connector entities supported by Amazon AppFlow. For example, you can query Salesforce for Account and Opportunity entities, or query ServiceNow for the Incident entity. 
    public func listConnectorEntities(_ input: ListConnectorEntitiesRequest) -> EventLoopFuture<ListConnectorEntitiesResponse> {
        return client.send(operation: "ListConnectorEntities", path: "/list-connector-entities", httpMethod: "POST", input: input)
    }

    ///   Lists all of the flows associated with your account. 
    public func listFlows(_ input: ListFlowsRequest) -> EventLoopFuture<ListFlowsResponse> {
        return client.send(operation: "ListFlows", path: "/list-flows", httpMethod: "POST", input: input)
    }

    ///   Retrieves the tags that are associated with a specified flow. 
    public func listTagsForResource(_ input: ListTagsForResourceRequest) -> EventLoopFuture<ListTagsForResourceResponse> {
        return client.send(operation: "ListTagsForResource", path: "/tags/{resourceArn}", httpMethod: "GET", input: input)
    }

    ///   Activates an existing flow. For on-demand flows, this operation runs the flow immediately. For schedule and event-triggered flows, this operation activates the flow. 
    public func startFlow(_ input: StartFlowRequest) -> EventLoopFuture<StartFlowResponse> {
        return client.send(operation: "StartFlow", path: "/start-flow", httpMethod: "POST", input: input)
    }

    ///   Deactivates the existing flow. For on-demand flows, this operation returns an unsupportedOperationException error message. For schedule and event-triggered flows, this operation deactivates the flow. 
    public func stopFlow(_ input: StopFlowRequest) -> EventLoopFuture<StopFlowResponse> {
        return client.send(operation: "StopFlow", path: "/stop-flow", httpMethod: "POST", input: input)
    }

    ///   Applies a tag to the specified flow. 
    public func tagResource(_ input: TagResourceRequest) -> EventLoopFuture<TagResourceResponse> {
        return client.send(operation: "TagResource", path: "/tags/{resourceArn}", httpMethod: "POST", input: input)
    }

    ///   Removes a tag from the specified flow. 
    public func untagResource(_ input: UntagResourceRequest) -> EventLoopFuture<UntagResourceResponse> {
        return client.send(operation: "UntagResource", path: "/tags/{resourceArn}", httpMethod: "DELETE", input: input)
    }

    ///   Updates a given connector profile associated with your account. 
    public func updateConnectorProfile(_ input: UpdateConnectorProfileRequest) -> EventLoopFuture<UpdateConnectorProfileResponse> {
        return client.send(operation: "UpdateConnectorProfile", path: "/update-connector-profile", httpMethod: "POST", input: input)
    }

    ///   Updates an existing flow. 
    public func updateFlow(_ input: UpdateFlowRequest) -> EventLoopFuture<UpdateFlowResponse> {
        return client.send(operation: "UpdateFlow", path: "/update-flow", httpMethod: "POST", input: input)
    }
}
