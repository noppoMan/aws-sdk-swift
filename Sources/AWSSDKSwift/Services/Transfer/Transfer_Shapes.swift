//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Transfer {
    //MARK: Enums

    public enum EndpointType: String, CustomStringConvertible, Codable {
        case `public` = "PUBLIC"
        case vpc = "VPC"
        case vpcEndpoint = "VPC_ENDPOINT"
        public var description: String { return self.rawValue }
    }

    public enum HomeDirectoryType: String, CustomStringConvertible, Codable {
        case path = "PATH"
        case logical = "LOGICAL"
        public var description: String { return self.rawValue }
    }

    public enum IdentityProviderType: String, CustomStringConvertible, Codable {
        case serviceManaged = "SERVICE_MANAGED"
        case apiGateway = "API_GATEWAY"
        public var description: String { return self.rawValue }
    }

    public enum State: String, CustomStringConvertible, Codable {
        case offline = "OFFLINE"
        case online = "ONLINE"
        case starting = "STARTING"
        case stopping = "STOPPING"
        case startFailed = "START_FAILED"
        case stopFailed = "STOP_FAILED"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct CreateServerRequest: AWSEncodableShape {

        /// The virtual private cloud (VPC) endpoint settings that are configured for your SFTP server. With a VPC endpoint, you can restrict access to your SFTP server to resources only within your VPC. To control incoming internet traffic, you will need to invoke the UpdateServer API and attach an Elastic IP to your server's endpoint. 
        public let endpointDetails: EndpointDetails?
        /// The type of VPC endpoint that you want your SFTP server to connect to. You can choose to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint, you can restrict access to your SFTP server and resources only within your VPC.
        public let endpointType: EndpointType?
        /// The RSA private key as generated by the ssh-keygen -N "" -f my-new-server-key command.  If you aren't planning to migrate existing users from an existing SFTP server to a new AWS SFTP server, don't update the host key. Accidentally changing a server's host key can be disruptive.   For more information, see "https://alpha-docs-aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key" in the AWS SFTP User Guide. 
        public let hostKey: String?
        /// This parameter is required when the IdentityProviderType is set to API_GATEWAY. Accepts an array containing all of the information required to call a customer-supplied authentication API, including the API Gateway URL. This property is not required when the IdentityProviderType is set to SERVICE_MANAGED.
        public let identityProviderDetails: IdentityProviderDetails?
        /// Specifies the mode of authentication for the SFTP server. The default value is SERVICE_MANAGED, which allows you to store and access SFTP user credentials within the AWS Transfer for SFTP service. Use the API_GATEWAY value to integrate with an identity provider of your choosing. The API_GATEWAY setting requires you to provide an API Gateway endpoint URL to call for authentication using the IdentityProviderDetails parameter.
        public let identityProviderType: IdentityProviderType?
        /// A value that allows the service to write your SFTP users' activity to your Amazon CloudWatch logs for monitoring and auditing purposes.
        public let loggingRole: String?
        /// Key-value pairs that can be used to group and search for servers.
        public let tags: [Tag]?

        public init(endpointDetails: EndpointDetails? = nil, endpointType: EndpointType? = nil, hostKey: String? = nil, identityProviderDetails: IdentityProviderDetails? = nil, identityProviderType: IdentityProviderType? = nil, loggingRole: String? = nil, tags: [Tag]? = nil) {
            self.endpointDetails = endpointDetails
            self.endpointType = endpointType
            self.hostKey = hostKey
            self.identityProviderDetails = identityProviderDetails
            self.identityProviderType = identityProviderType
            self.loggingRole = loggingRole
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.endpointDetails?.validate(name: "\(name).endpointDetails")
            try validate(self.hostKey, name:"hostKey", parent: name, max: 4096)
            try self.identityProviderDetails?.validate(name: "\(name).identityProviderDetails")
            try validate(self.loggingRole, name:"loggingRole", parent: name, max: 2048)
            try validate(self.loggingRole, name:"loggingRole", parent: name, min: 20)
            try validate(self.loggingRole, name:"loggingRole", parent: name, pattern: "arn:.*role/.*")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case endpointDetails = "EndpointDetails"
            case endpointType = "EndpointType"
            case hostKey = "HostKey"
            case identityProviderDetails = "IdentityProviderDetails"
            case identityProviderType = "IdentityProviderType"
            case loggingRole = "LoggingRole"
            case tags = "Tags"
        }
    }

    public struct CreateServerResponse: AWSDecodableShape {

        /// The service-assigned ID of the SFTP server that is created.
        public let serverId: String

        public init(serverId: String) {
            self.serverId = serverId
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
        }
    }

    public struct CreateUserRequest: AWSEncodableShape {

        /// The landing directory (folder) for a user when they log in to the server using their SFTP client.  An example is &lt;your-Amazon-S3-bucket-name&gt;/home/username.
        public let homeDirectory: String?
        /// Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. You will need to specify the "Entry" and "Target" pair, where Entry shows how the path is made visible and Target is the actual S3 path. If you only specify a target, it will be displayed as is. You will need to also make sure that your AWS IAM Role provides access to paths in Target. The following is an example.  '[ "/bucket2/documentation", { "Entry": "your-personal-report.pdf", "Target": "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]'  In most cases, you can use this value instead of the scope down policy to lock your user down to the designated home directory ("chroot"). To do this, you can set Entry to '/' and set Target to the HomeDirectory parameter value.   If the target of a logical directory entry does not exist in S3, the entry will be ignored. As a workaround, you can use the S3 api to create 0 byte objects as place holders for your directory. If using the CLI, use the s3api call instead of s3 so you can use the put-object operation. For example, you use the following: aws s3api put-object --bucket bucketname --key path/to/folder/. Make sure that the end of the key name ends in a / for it to be considered a folder.  
        public let homeDirectoryMappings: [HomeDirectoryMapEntry]?
        /// The type of landing directory (folder) you want your users' home directory to be when they log into the SFTP server. If you set it to PATH, the user will see the absolute Amazon S3 bucket paths as is in their SFTP clients. If you set it LOGICAL, you will need to provide mappings in the HomeDirectoryMappings for how you want to make S3 paths visible to your user.
        public let homeDirectoryType: HomeDirectoryType?
        /// A scope-down policy for your user so you can use the same IAM role across multiple users. This policy scopes down user access to portions of their Amazon S3 bucket. Variables that you can use inside this policy include ${Transfer:UserName}, ${Transfer:HomeDirectory}, and ${Transfer:HomeBucket}.  For scope-down policies, AWS Transfer for SFTP stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the Policy argument. For an example of a scope-down policy, see "https://docs.aws.amazon.com/transfer/latest/userguide/users.html#users-policies-scope-down"&gt;Creating a Scope-Down Policy. For more information, see "https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html" in the AWS Security Token Service API Reference. 
        public let policy: String?
        /// The IAM role that controls your user's access to your Amazon S3 bucket. The policies attached to this role will determine the level of access you want to provide your users when transferring files into and out of your Amazon S3 bucket or buckets. The IAM role should also contain a trust relationship that allows the SFTP server to access your resources when servicing your SFTP user's transfer requests.
        public let role: String
        /// A system-assigned unique identifier for an SFTP server instance. This is the specific SFTP server that you added your user to.
        public let serverId: String
        /// The public portion of the Secure Shell (SSH) key used to authenticate the user to the SFTP server.
        public let sshPublicKeyBody: String?
        /// Key-value pairs that can be used to group and search for users. Tags are metadata attached to users for any purpose.
        public let tags: [Tag]?
        /// A unique string that identifies a user and is associated with a server as specified by the ServerId. This user name must be a minimum of 3 and a maximum of 32 characters long. The following are valid characters: a-z, A-Z, 0-9, underscore, and hyphen. The user name can't start with a hyphen.
        public let userName: String

        public init(homeDirectory: String? = nil, homeDirectoryMappings: [HomeDirectoryMapEntry]? = nil, homeDirectoryType: HomeDirectoryType? = nil, policy: String? = nil, role: String, serverId: String, sshPublicKeyBody: String? = nil, tags: [Tag]? = nil, userName: String) {
            self.homeDirectory = homeDirectory
            self.homeDirectoryMappings = homeDirectoryMappings
            self.homeDirectoryType = homeDirectoryType
            self.policy = policy
            self.role = role
            self.serverId = serverId
            self.sshPublicKeyBody = sshPublicKeyBody
            self.tags = tags
            self.userName = userName
        }

        public func validate(name: String) throws {
            try validate(self.homeDirectory, name:"homeDirectory", parent: name, max: 1024)
            try validate(self.homeDirectory, name:"homeDirectory", parent: name, pattern: "^$|/.*")
            try self.homeDirectoryMappings?.forEach {
                try $0.validate(name: "\(name).homeDirectoryMappings[]")
            }
            try validate(self.homeDirectoryMappings, name:"homeDirectoryMappings", parent: name, max: 50)
            try validate(self.homeDirectoryMappings, name:"homeDirectoryMappings", parent: name, min: 1)
            try validate(self.policy, name:"policy", parent: name, max: 2048)
            try validate(self.role, name:"role", parent: name, max: 2048)
            try validate(self.role, name:"role", parent: name, min: 20)
            try validate(self.role, name:"role", parent: name, pattern: "arn:.*role/.*")
            try validate(self.serverId, name:"serverId", parent: name, max: 19)
            try validate(self.serverId, name:"serverId", parent: name, min: 19)
            try validate(self.serverId, name:"serverId", parent: name, pattern: "^s-([0-9a-f]{17})$")
            try validate(self.sshPublicKeyBody, name:"sshPublicKeyBody", parent: name, max: 2048)
            try validate(self.sshPublicKeyBody, name:"sshPublicKeyBody", parent: name, pattern: "^ssh-rsa\\s+[A-Za-z0-9+/]+[=]{0,3}(\\s+.+)?\\s*$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 1)
            try validate(self.userName, name:"userName", parent: name, max: 32)
            try validate(self.userName, name:"userName", parent: name, min: 3)
            try validate(self.userName, name:"userName", parent: name, pattern: "^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,31}$")
        }

        private enum CodingKeys: String, CodingKey {
            case homeDirectory = "HomeDirectory"
            case homeDirectoryMappings = "HomeDirectoryMappings"
            case homeDirectoryType = "HomeDirectoryType"
            case policy = "Policy"
            case role = "Role"
            case serverId = "ServerId"
            case sshPublicKeyBody = "SshPublicKeyBody"
            case tags = "Tags"
            case userName = "UserName"
        }
    }

    public struct CreateUserResponse: AWSDecodableShape {

        /// The ID of the SFTP server that the user is attached to.
        public let serverId: String
        /// A unique string that identifies a user account associated with an SFTP server.
        public let userName: String

        public init(serverId: String, userName: String) {
            self.serverId = serverId
            self.userName = userName
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
            case userName = "UserName"
        }
    }

    public struct DeleteServerRequest: AWSEncodableShape {

        /// A unique system-assigned identifier for an SFTP server instance.
        public let serverId: String

        public init(serverId: String) {
            self.serverId = serverId
        }

        public func validate(name: String) throws {
            try validate(self.serverId, name:"serverId", parent: name, max: 19)
            try validate(self.serverId, name:"serverId", parent: name, min: 19)
            try validate(self.serverId, name:"serverId", parent: name, pattern: "^s-([0-9a-f]{17})$")
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
        }
    }

    public struct DeleteSshPublicKeyRequest: AWSEncodableShape {

        /// A system-assigned unique identifier for a Secure File Transfer Protocol (SFTP) server instance that has the user assigned to it.
        public let serverId: String
        /// A unique identifier used to reference your user's specific SSH key.
        public let sshPublicKeyId: String
        /// A unique string that identifies a user whose public key is being deleted.
        public let userName: String

        public init(serverId: String, sshPublicKeyId: String, userName: String) {
            self.serverId = serverId
            self.sshPublicKeyId = sshPublicKeyId
            self.userName = userName
        }

        public func validate(name: String) throws {
            try validate(self.serverId, name:"serverId", parent: name, max: 19)
            try validate(self.serverId, name:"serverId", parent: name, min: 19)
            try validate(self.serverId, name:"serverId", parent: name, pattern: "^s-([0-9a-f]{17})$")
            try validate(self.sshPublicKeyId, name:"sshPublicKeyId", parent: name, max: 21)
            try validate(self.sshPublicKeyId, name:"sshPublicKeyId", parent: name, min: 21)
            try validate(self.sshPublicKeyId, name:"sshPublicKeyId", parent: name, pattern: "^key-[0-9a-f]{17}$")
            try validate(self.userName, name:"userName", parent: name, max: 32)
            try validate(self.userName, name:"userName", parent: name, min: 3)
            try validate(self.userName, name:"userName", parent: name, pattern: "^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,31}$")
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
            case sshPublicKeyId = "SshPublicKeyId"
            case userName = "UserName"
        }
    }

    public struct DeleteUserRequest: AWSEncodableShape {

        /// A system-assigned unique identifier for an SFTP server instance that has the user assigned to it.
        public let serverId: String
        /// A unique string that identifies a user that is being deleted from the server.
        public let userName: String

        public init(serverId: String, userName: String) {
            self.serverId = serverId
            self.userName = userName
        }

        public func validate(name: String) throws {
            try validate(self.serverId, name:"serverId", parent: name, max: 19)
            try validate(self.serverId, name:"serverId", parent: name, min: 19)
            try validate(self.serverId, name:"serverId", parent: name, pattern: "^s-([0-9a-f]{17})$")
            try validate(self.userName, name:"userName", parent: name, max: 32)
            try validate(self.userName, name:"userName", parent: name, min: 3)
            try validate(self.userName, name:"userName", parent: name, pattern: "^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,31}$")
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
            case userName = "UserName"
        }
    }

    public struct DescribeServerRequest: AWSEncodableShape {

        /// A system-assigned unique identifier for an SFTP server.
        public let serverId: String

        public init(serverId: String) {
            self.serverId = serverId
        }

        public func validate(name: String) throws {
            try validate(self.serverId, name:"serverId", parent: name, max: 19)
            try validate(self.serverId, name:"serverId", parent: name, min: 19)
            try validate(self.serverId, name:"serverId", parent: name, pattern: "^s-([0-9a-f]{17})$")
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
        }
    }

    public struct DescribeServerResponse: AWSDecodableShape {

        /// An array containing the properties of the server with the ServerID you specified.
        public let server: DescribedServer

        public init(server: DescribedServer) {
            self.server = server
        }

        private enum CodingKeys: String, CodingKey {
            case server = "Server"
        }
    }

    public struct DescribeUserRequest: AWSEncodableShape {

        /// A system-assigned unique identifier for an SFTP server that has this user assigned.
        public let serverId: String
        /// The name of the user assigned to one or more servers. User names are part of the sign-in credentials to use the AWS Transfer for SFTP service and perform file transfer tasks.
        public let userName: String

        public init(serverId: String, userName: String) {
            self.serverId = serverId
            self.userName = userName
        }

        public func validate(name: String) throws {
            try validate(self.serverId, name:"serverId", parent: name, max: 19)
            try validate(self.serverId, name:"serverId", parent: name, min: 19)
            try validate(self.serverId, name:"serverId", parent: name, pattern: "^s-([0-9a-f]{17})$")
            try validate(self.userName, name:"userName", parent: name, max: 32)
            try validate(self.userName, name:"userName", parent: name, min: 3)
            try validate(self.userName, name:"userName", parent: name, pattern: "^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,31}$")
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
            case userName = "UserName"
        }
    }

    public struct DescribeUserResponse: AWSDecodableShape {

        /// A system-assigned unique identifier for an SFTP server that has this user assigned.
        public let serverId: String
        /// An array containing the properties of the user account for the ServerID value that you specified.
        public let user: DescribedUser

        public init(serverId: String, user: DescribedUser) {
            self.serverId = serverId
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
            case user = "User"
        }
    }

    public struct DescribedServer: AWSDecodableShape {

        /// Specifies the unique Amazon Resource Name (ARN) for the server to be described.
        public let arn: String
        /// The virtual private cloud (VPC) endpoint settings that you configured for your SFTP server.
        public let endpointDetails: EndpointDetails?
        /// The type of endpoint that your SFTP server is connected to. If your SFTP server is connected to a VPC endpoint, your server isn't accessible over the public internet.
        public let endpointType: EndpointType?
        /// This value contains the message-digest algorithm (MD5) hash of the server's host key. This value is equivalent to the output of the ssh-keygen -l -E md5 -f my-new-server-key command.
        public let hostKeyFingerprint: String?
        /// Specifies information to call a customer-supplied authentication API. This field is not populated when the IdentityProviderType of the server is SERVICE_MANAGED&gt;.
        public let identityProviderDetails: IdentityProviderDetails?
        /// This property defines the mode of authentication method enabled for this service. A value of SERVICE_MANAGED means that you are using this server to store and access SFTP user credentials within the service. A value of API_GATEWAY indicates that you have integrated an API Gateway endpoint that will be invoked for authenticating your user into the service.
        public let identityProviderType: IdentityProviderType?
        /// This property is an AWS Identity and Access Management (IAM) entity that allows the server to turn on Amazon CloudWatch logging for Amazon S3 events. When set, user activity can be viewed in your CloudWatch logs.
        public let loggingRole: String?
        /// This property is a unique system-assigned identifier for the SFTP server that you instantiate.
        public let serverId: String?
        /// The condition of the SFTP server for the server that was described. A value of ONLINE indicates that the server can accept jobs and transfer files. A State value of OFFLINE means that the server cannot perform file transfer operations. The states of STARTING and STOPPING indicate that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of START_FAILED or STOP_FAILED can indicate an error condition.
        public let state: State?
        /// This property contains the key-value pairs that you can use to search for and group servers that were assigned to the server that was described.
        public let tags: [Tag]?
        /// The number of users that are assigned to the SFTP server you specified with the ServerId.
        public let userCount: Int?

        public init(arn: String, endpointDetails: EndpointDetails? = nil, endpointType: EndpointType? = nil, hostKeyFingerprint: String? = nil, identityProviderDetails: IdentityProviderDetails? = nil, identityProviderType: IdentityProviderType? = nil, loggingRole: String? = nil, serverId: String? = nil, state: State? = nil, tags: [Tag]? = nil, userCount: Int? = nil) {
            self.arn = arn
            self.endpointDetails = endpointDetails
            self.endpointType = endpointType
            self.hostKeyFingerprint = hostKeyFingerprint
            self.identityProviderDetails = identityProviderDetails
            self.identityProviderType = identityProviderType
            self.loggingRole = loggingRole
            self.serverId = serverId
            self.state = state
            self.tags = tags
            self.userCount = userCount
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case endpointDetails = "EndpointDetails"
            case endpointType = "EndpointType"
            case hostKeyFingerprint = "HostKeyFingerprint"
            case identityProviderDetails = "IdentityProviderDetails"
            case identityProviderType = "IdentityProviderType"
            case loggingRole = "LoggingRole"
            case serverId = "ServerId"
            case state = "State"
            case tags = "Tags"
            case userCount = "UserCount"
        }
    }

    public struct DescribedUser: AWSDecodableShape {

        /// This property contains the unique Amazon Resource Name (ARN) for the user that was requested to be described.
        public let arn: String
        /// This property specifies the landing directory (or folder), which is the location that files are written to or read from in an Amazon S3 bucket for the described user. An example is /your s3 bucket name/home/username .
        public let homeDirectory: String?
        /// Logical directory mappings that you specified for what S3 paths and keys should be visible to your user and how you want to make them visible. You will need to specify the "Entry" and "Target" pair, where Entry shows how the path is made visible and Target is the actual S3 path. If you only specify a target, it will be displayed as is. You will need to also make sure that your AWS IAM Role provides access to paths in Target. In most cases, you can use this value instead of the scope down policy to lock your user down to the designated home directory ("chroot"). To do this, you can set Entry to '/' and set Target to the HomeDirectory parameter value.  In most cases, you can use this value instead of the scope down policy to lock your user down to the designated home directory ("chroot"). To do this, you can set Entry to '/' and set Target to the HomeDirectory parameter value.
        public let homeDirectoryMappings: [HomeDirectoryMapEntry]?
        /// The type of landing directory (folder) you mapped for your users' to see when they log into the SFTP server. If you set it to PATH, the user will see the absolute Amazon S3 bucket paths as is in their SFTP clients. If you set it LOGICAL, you will need to provide mappings in the HomeDirectoryMappings for how you want to make S3 paths visible to your user.
        public let homeDirectoryType: HomeDirectoryType?
        /// Specifies the name of the policy in use for the described user.
        public let policy: String?
        /// This property specifies the IAM role that controls your user's access to your Amazon S3 bucket. The policies attached to this role will determine the level of access you want to provide your users when transferring files into and out of your Amazon S3 bucket or buckets. The IAM role should also contain a trust relationship that allows the SFTP server to access your resources when servicing your SFTP user's transfer requests.
        public let role: String?
        /// This property contains the public key portion of the Secure Shell (SSH) keys stored for the described user.
        public let sshPublicKeys: [SshPublicKey]?
        /// This property contains the key-value pairs for the user requested. Tag can be used to search for and group users for a variety of purposes.
        public let tags: [Tag]?
        /// This property is the name of the user that was requested to be described. User names are used for authentication purposes. This is the string that will be used by your user when they log in to your SFTP server.
        public let userName: String?

        public init(arn: String, homeDirectory: String? = nil, homeDirectoryMappings: [HomeDirectoryMapEntry]? = nil, homeDirectoryType: HomeDirectoryType? = nil, policy: String? = nil, role: String? = nil, sshPublicKeys: [SshPublicKey]? = nil, tags: [Tag]? = nil, userName: String? = nil) {
            self.arn = arn
            self.homeDirectory = homeDirectory
            self.homeDirectoryMappings = homeDirectoryMappings
            self.homeDirectoryType = homeDirectoryType
            self.policy = policy
            self.role = role
            self.sshPublicKeys = sshPublicKeys
            self.tags = tags
            self.userName = userName
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case homeDirectory = "HomeDirectory"
            case homeDirectoryMappings = "HomeDirectoryMappings"
            case homeDirectoryType = "HomeDirectoryType"
            case policy = "Policy"
            case role = "Role"
            case sshPublicKeys = "SshPublicKeys"
            case tags = "Tags"
            case userName = "UserName"
        }
    }

    public struct EndpointDetails: AWSEncodableShape & AWSDecodableShape {

        /// A list of address allocation IDs that are required to attach an Elastic IP address to your SFTP server's endpoint. This is only valid in the UpdateServer API.  This property can only be use when EndpointType is set to VPC. 
        public let addressAllocationIds: [String]?
        /// A list of subnet IDs that are required to host your SFTP server endpoint in your VPC.
        public let subnetIds: [String]?
        /// The ID of the VPC endpoint.
        public let vpcEndpointId: String?
        /// The VPC ID of the virtual private cloud in which the SFTP server's endpoint will be hosted.
        public let vpcId: String?

        public init(addressAllocationIds: [String]? = nil, subnetIds: [String]? = nil, vpcEndpointId: String? = nil, vpcId: String? = nil) {
            self.addressAllocationIds = addressAllocationIds
            self.subnetIds = subnetIds
            self.vpcEndpointId = vpcEndpointId
            self.vpcId = vpcId
        }

        public func validate(name: String) throws {
            try validate(self.vpcEndpointId, name:"vpcEndpointId", parent: name, max: 22)
            try validate(self.vpcEndpointId, name:"vpcEndpointId", parent: name, min: 22)
            try validate(self.vpcEndpointId, name:"vpcEndpointId", parent: name, pattern: "^vpce-[0-9a-f]{17}$")
        }

        private enum CodingKeys: String, CodingKey {
            case addressAllocationIds = "AddressAllocationIds"
            case subnetIds = "SubnetIds"
            case vpcEndpointId = "VpcEndpointId"
            case vpcId = "VpcId"
        }
    }

    public struct HomeDirectoryMapEntry: AWSEncodableShape & AWSDecodableShape {

        /// Represents an entry and a target for HomeDirectoryMappings.
        public let entry: String
        /// Represents the map target that is used in a HomeDirectorymapEntry.
        public let target: String

        public init(entry: String, target: String) {
            self.entry = entry
            self.target = target
        }

        public func validate(name: String) throws {
            try validate(self.entry, name:"entry", parent: name, max: 1024)
            try validate(self.entry, name:"entry", parent: name, pattern: "^/.*")
            try validate(self.target, name:"target", parent: name, max: 1024)
            try validate(self.target, name:"target", parent: name, pattern: "^/.*")
        }

        private enum CodingKeys: String, CodingKey {
            case entry = "Entry"
            case target = "Target"
        }
    }

    public struct IdentityProviderDetails: AWSEncodableShape & AWSDecodableShape {

        /// The InvocationRole parameter provides the type of InvocationRole used to authenticate the user account.
        public let invocationRole: String?
        /// The Url parameter provides contains the location of the service endpoint used to authenticate users.
        public let url: String?

        public init(invocationRole: String? = nil, url: String? = nil) {
            self.invocationRole = invocationRole
            self.url = url
        }

        public func validate(name: String) throws {
            try validate(self.invocationRole, name:"invocationRole", parent: name, max: 2048)
            try validate(self.invocationRole, name:"invocationRole", parent: name, min: 20)
            try validate(self.invocationRole, name:"invocationRole", parent: name, pattern: "arn:.*role/.*")
            try validate(self.url, name:"url", parent: name, max: 255)
        }

        private enum CodingKeys: String, CodingKey {
            case invocationRole = "InvocationRole"
            case url = "Url"
        }
    }

    public struct ImportSshPublicKeyRequest: AWSEncodableShape {

        /// A system-assigned unique identifier for an SFTP server.
        public let serverId: String
        /// The public key portion of an SSH key pair.
        public let sshPublicKeyBody: String
        /// The name of the user account that is assigned to one or more servers.
        public let userName: String

        public init(serverId: String, sshPublicKeyBody: String, userName: String) {
            self.serverId = serverId
            self.sshPublicKeyBody = sshPublicKeyBody
            self.userName = userName
        }

        public func validate(name: String) throws {
            try validate(self.serverId, name:"serverId", parent: name, max: 19)
            try validate(self.serverId, name:"serverId", parent: name, min: 19)
            try validate(self.serverId, name:"serverId", parent: name, pattern: "^s-([0-9a-f]{17})$")
            try validate(self.sshPublicKeyBody, name:"sshPublicKeyBody", parent: name, max: 2048)
            try validate(self.sshPublicKeyBody, name:"sshPublicKeyBody", parent: name, pattern: "^ssh-rsa\\s+[A-Za-z0-9+/]+[=]{0,3}(\\s+.+)?\\s*$")
            try validate(self.userName, name:"userName", parent: name, max: 32)
            try validate(self.userName, name:"userName", parent: name, min: 3)
            try validate(self.userName, name:"userName", parent: name, pattern: "^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,31}$")
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
            case sshPublicKeyBody = "SshPublicKeyBody"
            case userName = "UserName"
        }
    }

    public struct ImportSshPublicKeyResponse: AWSDecodableShape {

        /// A system-assigned unique identifier for an SFTP server.
        public let serverId: String
        /// This identifier is the name given to a public key by the system that was imported.
        public let sshPublicKeyId: String
        /// A user name assigned to the ServerID value that you specified.
        public let userName: String

        public init(serverId: String, sshPublicKeyId: String, userName: String) {
            self.serverId = serverId
            self.sshPublicKeyId = sshPublicKeyId
            self.userName = userName
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
            case sshPublicKeyId = "SshPublicKeyId"
            case userName = "UserName"
        }
    }

    public struct ListServersRequest: AWSEncodableShape {

        /// Specifies the number of servers to return as a response to the ListServers query.
        public let maxResults: Int?
        /// When additional results are obtained from the ListServers command, a NextToken parameter is returned in the output. You can then pass the NextToken parameter in a subsequent command to continue listing additional servers.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 6144)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListServersResponse: AWSDecodableShape {

        /// When you can get additional results from the ListServers operation, a NextToken parameter is returned in the output. In a following command, you can pass in the NextToken parameter to continue listing additional servers.
        public let nextToken: String?
        /// An array of servers that were listed.
        public let servers: [ListedServer]

        public init(nextToken: String? = nil, servers: [ListedServer]) {
            self.nextToken = nextToken
            self.servers = servers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case servers = "Servers"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {

        /// Requests the tags associated with a particular Amazon Resource Name (ARN). An ARN is an identifier for a specific AWS resource, such as a server, user, or role.
        public let arn: String
        /// Specifies the number of tags to return as a response to the ListTagsForResource request.
        public let maxResults: Int?
        /// When you request additional results from the ListTagsForResource operation, a NextToken parameter is returned in the input. You can then pass in a subsequent command to the NextToken parameter to continue listing additional tags.
        public let nextToken: String?

        public init(arn: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.arn = arn
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.arn, name:"arn", parent: name, max: 1600)
            try validate(self.arn, name:"arn", parent: name, min: 20)
            try validate(self.arn, name:"arn", parent: name, pattern: "arn:.*")
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 6144)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {

        /// This value is the ARN you specified to list the tags of.
        public let arn: String?
        /// When you can get additional results from the ListTagsForResource call, a NextToken parameter is returned in the output. You can then pass in a subsequent command to the NextToken parameter to continue listing additional tags.
        public let nextToken: String?
        /// Key-value pairs that are assigned to a resource, usually for the purpose of grouping and searching for items. Tags are metadata that you define.
        public let tags: [Tag]?

        public init(arn: String? = nil, nextToken: String? = nil, tags: [Tag]? = nil) {
            self.arn = arn
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case nextToken = "NextToken"
            case tags = "Tags"
        }
    }

    public struct ListUsersRequest: AWSEncodableShape {

        /// Specifies the number of users to return as a response to the ListUsers request.
        public let maxResults: Int?
        /// When you can get additional results from the ListUsers call, a NextToken parameter is returned in the output. You can then pass in a subsequent command to the NextToken parameter to continue listing additional users.
        public let nextToken: String?
        /// A system-assigned unique identifier for a Secure File Transfer Protocol (SFTP) server that has users assigned to it.
        public let serverId: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, serverId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serverId = serverId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 6144)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
            try validate(self.serverId, name:"serverId", parent: name, max: 19)
            try validate(self.serverId, name:"serverId", parent: name, min: 19)
            try validate(self.serverId, name:"serverId", parent: name, pattern: "^s-([0-9a-f]{17})$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case serverId = "ServerId"
        }
    }

    public struct ListUsersResponse: AWSDecodableShape {

        /// When you can get additional results from the ListUsers call, a NextToken parameter is returned in the output. You can then pass in a subsequent command to the NextToken parameter to continue listing additional users.
        public let nextToken: String?
        /// A system-assigned unique identifier for an SFTP server that the users are assigned to.
        public let serverId: String
        /// Returns the user accounts and their properties for the ServerId value that you specify.
        public let users: [ListedUser]

        public init(nextToken: String? = nil, serverId: String, users: [ListedUser]) {
            self.nextToken = nextToken
            self.serverId = serverId
            self.users = users
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case serverId = "ServerId"
            case users = "Users"
        }
    }

    public struct ListedServer: AWSDecodableShape {

        /// The unique Amazon Resource Name (ARN) for the server to be listed.
        public let arn: String
        /// The type of VPC endpoint that your SFTP server is connected to. If your SFTP server is connected to a VPC endpoint, your server isn't accessible over the public internet.
        public let endpointType: EndpointType?
        /// The authentication method used to validate a user for the server that was specified. This can include Secure Shell (SSH), user name and password combinations, or your own custom authentication method. Valid values include SERVICE_MANAGED or API_GATEWAY.
        public let identityProviderType: IdentityProviderType?
        /// The AWS Identity and Access Management entity that allows the server to turn on Amazon CloudWatch logging.
        public let loggingRole: String?
        /// This value is the unique system assigned identifier for the SFTP servers that were listed.
        public let serverId: String?
        /// This property describes the condition of the SFTP server for the server that was described. A value of ONLINE&gt; indicates that the server can accept jobs and transfer files. A State value of OFFLINE means that the server cannot perform file transfer operations. The states of STARTING and STOPPING indicate that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of START_FAILED or STOP_FAILED can indicate an error condition.
        public let state: State?
        /// This property is a numeric value that indicates the number of users that are assigned to the SFTP server you specified with the ServerId.
        public let userCount: Int?

        public init(arn: String, endpointType: EndpointType? = nil, identityProviderType: IdentityProviderType? = nil, loggingRole: String? = nil, serverId: String? = nil, state: State? = nil, userCount: Int? = nil) {
            self.arn = arn
            self.endpointType = endpointType
            self.identityProviderType = identityProviderType
            self.loggingRole = loggingRole
            self.serverId = serverId
            self.state = state
            self.userCount = userCount
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case endpointType = "EndpointType"
            case identityProviderType = "IdentityProviderType"
            case loggingRole = "LoggingRole"
            case serverId = "ServerId"
            case state = "State"
            case userCount = "UserCount"
        }
    }

    public struct ListedUser: AWSDecodableShape {

        /// This property is the unique Amazon Resource Name (ARN) for the user that you want to learn about.
        public let arn: String
        /// This value specifies the location that files are written to or read from an Amazon S3 bucket for the user you specify by their ARN.
        public let homeDirectory: String?
        /// The type of landing directory (folder) you mapped for your users' home directory. If you set it to PATH, the user will see the absolute Amazon S3 bucket paths as is in their SFTP clients. If you set it LOGICAL, you will need to provide mappings in the HomeDirectoryMappings for how you want to make S3 paths visible to your user.
        public let homeDirectoryType: HomeDirectoryType?
        /// The role in use by this user. A role is an AWS Identity and Access Management (IAM) entity that, in this case, allows the SFTP server to act on a user's behalf. It allows the server to inherit the trust relationship that enables that user to perform file operations to their Amazon S3 bucket.
        public let role: String?
        /// This value is the number of SSH public keys stored for the user you specified.
        public let sshPublicKeyCount: Int?
        /// The name of the user whose ARN was specified. User names are used for authentication purposes.
        public let userName: String?

        public init(arn: String, homeDirectory: String? = nil, homeDirectoryType: HomeDirectoryType? = nil, role: String? = nil, sshPublicKeyCount: Int? = nil, userName: String? = nil) {
            self.arn = arn
            self.homeDirectory = homeDirectory
            self.homeDirectoryType = homeDirectoryType
            self.role = role
            self.sshPublicKeyCount = sshPublicKeyCount
            self.userName = userName
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case homeDirectory = "HomeDirectory"
            case homeDirectoryType = "HomeDirectoryType"
            case role = "Role"
            case sshPublicKeyCount = "SshPublicKeyCount"
            case userName = "UserName"
        }
    }

    public struct SshPublicKey: AWSDecodableShape {

        /// The date that the public key was added to the user account.
        public let dateImported: TimeStamp
        /// The content of the SSH public key as specified by the PublicKeyId.
        public let sshPublicKeyBody: String
        /// The SshPublicKeyId parameter contains the identifier of the public key.
        public let sshPublicKeyId: String

        public init(dateImported: TimeStamp, sshPublicKeyBody: String, sshPublicKeyId: String) {
            self.dateImported = dateImported
            self.sshPublicKeyBody = sshPublicKeyBody
            self.sshPublicKeyId = sshPublicKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case dateImported = "DateImported"
            case sshPublicKeyBody = "SshPublicKeyBody"
            case sshPublicKeyId = "SshPublicKeyId"
        }
    }

    public struct StartServerRequest: AWSEncodableShape {

        /// A system-assigned unique identifier for an SFTP server that you start.
        public let serverId: String

        public init(serverId: String) {
            self.serverId = serverId
        }

        public func validate(name: String) throws {
            try validate(self.serverId, name:"serverId", parent: name, max: 19)
            try validate(self.serverId, name:"serverId", parent: name, min: 19)
            try validate(self.serverId, name:"serverId", parent: name, pattern: "^s-([0-9a-f]{17})$")
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
        }
    }

    public struct StopServerRequest: AWSEncodableShape {

        /// A system-assigned unique identifier for an SFTP server that you stopped.
        public let serverId: String

        public init(serverId: String) {
            self.serverId = serverId
        }

        public func validate(name: String) throws {
            try validate(self.serverId, name:"serverId", parent: name, max: 19)
            try validate(self.serverId, name:"serverId", parent: name, min: 19)
            try validate(self.serverId, name:"serverId", parent: name, pattern: "^s-([0-9a-f]{17})$")
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {

        /// The name assigned to the tag that you create.
        public let key: String
        /// This property contains one or more values that you assigned to the key name you create.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.key, name:"key", parent: name, max: 128)
            try validate(self.value, name:"value", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {

        /// An Amazon Resource Name (ARN) for a specific AWS resource, such as a server, user, or role.
        public let arn: String
        /// Key-value pairs assigned to ARNs that you can use to group and search for resources by type. You can attach this metadata to user accounts for any purpose.
        public let tags: [Tag]

        public init(arn: String, tags: [Tag]) {
            self.arn = arn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.arn, name:"arn", parent: name, max: 1600)
            try validate(self.arn, name:"arn", parent: name, min: 20)
            try validate(self.arn, name:"arn", parent: name, pattern: "arn:.*")
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case tags = "Tags"
        }
    }

    public struct TestIdentityProviderRequest: AWSEncodableShape {

        /// A system-assigned identifier for a specific server. That server's user authentication method is tested with a user name and password.
        public let serverId: String
        /// This request parameter is the name of the user account to be tested.
        public let userName: String
        /// The password of the user account to be tested.
        public let userPassword: String?

        public init(serverId: String, userName: String, userPassword: String? = nil) {
            self.serverId = serverId
            self.userName = userName
            self.userPassword = userPassword
        }

        public func validate(name: String) throws {
            try validate(self.serverId, name:"serverId", parent: name, max: 19)
            try validate(self.serverId, name:"serverId", parent: name, min: 19)
            try validate(self.serverId, name:"serverId", parent: name, pattern: "^s-([0-9a-f]{17})$")
            try validate(self.userName, name:"userName", parent: name, max: 32)
            try validate(self.userName, name:"userName", parent: name, min: 3)
            try validate(self.userName, name:"userName", parent: name, pattern: "^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,31}$")
            try validate(self.userPassword, name:"userPassword", parent: name, max: 2048)
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
            case userName = "UserName"
            case userPassword = "UserPassword"
        }
    }

    public struct TestIdentityProviderResponse: AWSDecodableShape {

        /// A message that indicates whether the test was successful or not. 
        public let message: String?
        /// The response that is returned from your API Gateway.
        public let response: String?
        /// The HTTP status code that is the response from your API Gateway.
        public let statusCode: Int
        /// The endpoint of the service used to authenticate a user.
        public let url: String

        public init(message: String? = nil, response: String? = nil, statusCode: Int, url: String) {
            self.message = message
            self.response = response
            self.statusCode = statusCode
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case response = "Response"
            case statusCode = "StatusCode"
            case url = "Url"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {

        /// This is the value of the resource that will have the tag removed. An Amazon Resource Name (ARN) is an identifier for a specific AWS resource, such as a server, user, or role.
        public let arn: String
        /// TagKeys are key-value pairs assigned to ARNs that can be used to group and search for resources by type. This metadata can be attached to resources for any purpose.
        public let tagKeys: [String]

        public init(arn: String, tagKeys: [String]) {
            self.arn = arn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try validate(self.arn, name:"arn", parent: name, max: 1600)
            try validate(self.arn, name:"arn", parent: name, min: 20)
            try validate(self.arn, name:"arn", parent: name, pattern: "arn:.*")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
            }
            try validate(self.tagKeys, name:"tagKeys", parent: name, max: 50)
            try validate(self.tagKeys, name:"tagKeys", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case tagKeys = "TagKeys"
        }
    }

    public struct UpdateServerRequest: AWSEncodableShape {

        /// The virtual private cloud (VPC) endpoint settings that are configured for your SFTP server. With a VPC endpoint, you can restrict access to your SFTP server to resources only within your VPC. To control incoming internet traffic, you will need to associate one or more Elastic IP addresses with your server's endpoint. 
        public let endpointDetails: EndpointDetails?
        /// The type of endpoint that you want your SFTP server to connect to. You can choose to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint, your SFTP server isn't accessible over the public internet. 
        public let endpointType: EndpointType?
        /// The RSA private key as generated by ssh-keygen -N "" -f my-new-server-key.  If you aren't planning to migrate existing users from an existing SFTP server to a new AWS SFTP server, don't update the host key. Accidentally changing a server's host key can be disruptive.   For more information, see "https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key" in the AWS SFTP User Guide. 
        public let hostKey: String?
        /// This response parameter is an array containing all of the information required to call a customer's authentication API method.
        public let identityProviderDetails: IdentityProviderDetails?
        /// A value that changes the AWS Identity and Access Management (IAM) role that allows Amazon S3 events to be logged in Amazon CloudWatch, turning logging on or off.
        public let loggingRole: String?
        /// A system-assigned unique identifier for an SFTP server instance that the user account is assigned to.
        public let serverId: String

        public init(endpointDetails: EndpointDetails? = nil, endpointType: EndpointType? = nil, hostKey: String? = nil, identityProviderDetails: IdentityProviderDetails? = nil, loggingRole: String? = nil, serverId: String) {
            self.endpointDetails = endpointDetails
            self.endpointType = endpointType
            self.hostKey = hostKey
            self.identityProviderDetails = identityProviderDetails
            self.loggingRole = loggingRole
            self.serverId = serverId
        }

        public func validate(name: String) throws {
            try self.endpointDetails?.validate(name: "\(name).endpointDetails")
            try validate(self.hostKey, name:"hostKey", parent: name, max: 4096)
            try self.identityProviderDetails?.validate(name: "\(name).identityProviderDetails")
            try validate(self.loggingRole, name:"loggingRole", parent: name, max: 2048)
            try validate(self.loggingRole, name:"loggingRole", parent: name, pattern: "^$|arn:.*role/.*")
            try validate(self.serverId, name:"serverId", parent: name, max: 19)
            try validate(self.serverId, name:"serverId", parent: name, min: 19)
            try validate(self.serverId, name:"serverId", parent: name, pattern: "^s-([0-9a-f]{17})$")
        }

        private enum CodingKeys: String, CodingKey {
            case endpointDetails = "EndpointDetails"
            case endpointType = "EndpointType"
            case hostKey = "HostKey"
            case identityProviderDetails = "IdentityProviderDetails"
            case loggingRole = "LoggingRole"
            case serverId = "ServerId"
        }
    }

    public struct UpdateServerResponse: AWSDecodableShape {

        /// A system-assigned unique identifier for an SFTP server that the user account is assigned to.
        public let serverId: String

        public init(serverId: String) {
            self.serverId = serverId
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
        }
    }

    public struct UpdateUserRequest: AWSEncodableShape {

        /// A parameter that specifies the landing directory (folder) for a user when they log in to the server using their client.  An example is &lt;your-Amazon-S3-bucket-name&gt;/home/username.
        public let homeDirectory: String?
        /// Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. You will need to specify the "Entry" and "Target" pair, where Entry shows how the path is made visible and Target is the actual S3 path. If you only specify a target, it will be displayed as is. You will need to also make sure that your AWS IAM Role provides access to paths in Target. The following is an example.  '[ "/bucket2/documentation", { "Entry": "your-personal-report.pdf", "Target": "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]'  In most cases, you can use this value instead of the scope down policy to lock your user down to the designated home directory ("chroot"). To do this, you can set Entry to '/' and set Target to the HomeDirectory parameter value.   If the target of a logical directory entry does not exist in S3, the entry will be ignored. As a workaround, you can use the S3 api to create 0 byte objects as place holders for your directory. If using the CLI, use the s3api call instead of s3 so you can use the put-object operation. For example, you use the following: aws s3api put-object --bucket bucketname --key path/to/folder/. Make sure that the end of the key name ends in a / for it to be considered a folder.  
        public let homeDirectoryMappings: [HomeDirectoryMapEntry]?
        /// The type of landing directory (folder) you want your users' home directory to be when they log into the SFTP serve. If you set it to PATH, the user will see the absolute Amazon S3 bucket paths as is in their SFTP clients. If you set it LOGICAL, you will need to provide mappings in the HomeDirectoryMappings for how you want to make S3 paths visible to your user.
        public let homeDirectoryType: HomeDirectoryType?
        /// Allows you to supply a scope-down policy for your user so you can use the same AWS Identity and Access Management (IAM) role across multiple users. The policy scopes down user access to portions of your Amazon S3 bucket. Variables you can use inside this policy include ${Transfer:UserName}, ${Transfer:HomeDirectory}, and ${Transfer:HomeBucket}.  For scope-down policies, AWS Transfer for SFTP stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the Policy argument. For an example of a scope-down policy, see "https://docs.aws.amazon.com/transfer/latest/userguide/users.html#users-policies-scope-down"&gt;Creating a Scope-Down Policy. For more information, see "https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html" in the AWS Security Token Service API Reference. 
        public let policy: String?
        /// The IAM role that controls your user's access to your Amazon S3 bucket. The policies attached to this role will determine the level of access you want to provide your users when transferring files into and out of your Amazon S3 bucket or buckets. The IAM role should also contain a trust relationship that allows the Secure File Transfer Protocol (SFTP) server to access your resources when servicing your SFTP user's transfer requests.
        public let role: String?
        /// A system-assigned unique identifier for an SFTP server instance that the user account is assigned to.
        public let serverId: String
        /// A unique string that identifies a user and is associated with a server as specified by the ServerId. This is the string that will be used by your user when they log in to your SFTP server. This user name is a minimum of 3 and a maximum of 32 characters long. The following are valid characters: a-z, A-Z, 0-9, underscore, and hyphen. The user name can't start with a hyphen.
        public let userName: String

        public init(homeDirectory: String? = nil, homeDirectoryMappings: [HomeDirectoryMapEntry]? = nil, homeDirectoryType: HomeDirectoryType? = nil, policy: String? = nil, role: String? = nil, serverId: String, userName: String) {
            self.homeDirectory = homeDirectory
            self.homeDirectoryMappings = homeDirectoryMappings
            self.homeDirectoryType = homeDirectoryType
            self.policy = policy
            self.role = role
            self.serverId = serverId
            self.userName = userName
        }

        public func validate(name: String) throws {
            try validate(self.homeDirectory, name:"homeDirectory", parent: name, max: 1024)
            try validate(self.homeDirectory, name:"homeDirectory", parent: name, pattern: "^$|/.*")
            try self.homeDirectoryMappings?.forEach {
                try $0.validate(name: "\(name).homeDirectoryMappings[]")
            }
            try validate(self.homeDirectoryMappings, name:"homeDirectoryMappings", parent: name, max: 50)
            try validate(self.homeDirectoryMappings, name:"homeDirectoryMappings", parent: name, min: 1)
            try validate(self.policy, name:"policy", parent: name, max: 2048)
            try validate(self.role, name:"role", parent: name, max: 2048)
            try validate(self.role, name:"role", parent: name, min: 20)
            try validate(self.role, name:"role", parent: name, pattern: "arn:.*role/.*")
            try validate(self.serverId, name:"serverId", parent: name, max: 19)
            try validate(self.serverId, name:"serverId", parent: name, min: 19)
            try validate(self.serverId, name:"serverId", parent: name, pattern: "^s-([0-9a-f]{17})$")
            try validate(self.userName, name:"userName", parent: name, max: 32)
            try validate(self.userName, name:"userName", parent: name, min: 3)
            try validate(self.userName, name:"userName", parent: name, pattern: "^[a-zA-Z0-9_][a-zA-Z0-9_-]{2,31}$")
        }

        private enum CodingKeys: String, CodingKey {
            case homeDirectory = "HomeDirectory"
            case homeDirectoryMappings = "HomeDirectoryMappings"
            case homeDirectoryType = "HomeDirectoryType"
            case policy = "Policy"
            case role = "Role"
            case serverId = "ServerId"
            case userName = "UserName"
        }
    }

    public struct UpdateUserResponse: AWSDecodableShape {

        /// A system-assigned unique identifier for an SFTP server instance that the user account is assigned to.
        public let serverId: String
        /// The unique identifier for a user that is assigned to the SFTP server instance that was specified in the request.
        public let userName: String

        public init(serverId: String, userName: String) {
            self.serverId = serverId
            self.userName = userName
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "ServerId"
            case userName = "UserName"
        }
    }
}
