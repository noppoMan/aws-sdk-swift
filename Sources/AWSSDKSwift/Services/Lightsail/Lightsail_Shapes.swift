// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Lightsail {
    //MARK: Enums

    public enum AccessDirection: String, CustomStringConvertible, Codable {
        case inbound = "inbound"
        case outbound = "outbound"
        public var description: String { return self.rawValue }
    }

    public enum AddOnType: String, CustomStringConvertible, Codable {
        case autosnapshot = "AutoSnapshot"
        public var description: String { return self.rawValue }
    }

    public enum AlarmState: String, CustomStringConvertible, Codable {
        case ok = "OK"
        case alarm = "ALARM"
        case insufficientData = "INSUFFICIENT_DATA"
        public var description: String { return self.rawValue }
    }

    public enum AutoSnapshotStatus: String, CustomStringConvertible, Codable {
        case success = "Success"
        case failed = "Failed"
        case inprogress = "InProgress"
        case notfound = "NotFound"
        public var description: String { return self.rawValue }
    }

    public enum BlueprintType: String, CustomStringConvertible, Codable {
        case os = "os"
        case app = "app"
        public var description: String { return self.rawValue }
    }

    public enum CloudFormationStackRecordSourceType: String, CustomStringConvertible, Codable {
        case exportsnapshotrecord = "ExportSnapshotRecord"
        public var description: String { return self.rawValue }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case greaterthanorequaltothreshold = "GreaterThanOrEqualToThreshold"
        case greaterthanthreshold = "GreaterThanThreshold"
        case lessthanthreshold = "LessThanThreshold"
        case lessthanorequaltothreshold = "LessThanOrEqualToThreshold"
        public var description: String { return self.rawValue }
    }

    public enum ContactMethodStatus: String, CustomStringConvertible, Codable {
        case pendingverification = "PendingVerification"
        case valid = "Valid"
        case invalid = "Invalid"
        public var description: String { return self.rawValue }
    }

    public enum ContactMethodVerificationProtocol: String, CustomStringConvertible, Codable {
        case email = "Email"
        public var description: String { return self.rawValue }
    }

    public enum ContactProtocol: String, CustomStringConvertible, Codable {
        case email = "Email"
        case sms = "SMS"
        public var description: String { return self.rawValue }
    }

    public enum DiskSnapshotState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case completed = "completed"
        case error = "error"
        case unknown = "unknown"
        public var description: String { return self.rawValue }
    }

    public enum DiskState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case error = "error"
        case available = "available"
        case inUse = "in-use"
        case unknown = "unknown"
        public var description: String { return self.rawValue }
    }

    public enum ExportSnapshotRecordSourceType: String, CustomStringConvertible, Codable {
        case instancesnapshot = "InstanceSnapshot"
        case disksnapshot = "DiskSnapshot"
        public var description: String { return self.rawValue }
    }

    public enum InstanceAccessProtocol: String, CustomStringConvertible, Codable {
        case ssh = "ssh"
        case rdp = "rdp"
        public var description: String { return self.rawValue }
    }

    public enum InstanceHealthReason: String, CustomStringConvertible, Codable {
        case lbRegistrationinprogress = "Lb.RegistrationInProgress"
        case lbInitialhealthchecking = "Lb.InitialHealthChecking"
        case lbInternalerror = "Lb.InternalError"
        case instanceResponsecodemismatch = "Instance.ResponseCodeMismatch"
        case instanceTimeout = "Instance.Timeout"
        case instanceFailedhealthchecks = "Instance.FailedHealthChecks"
        case instanceNotregistered = "Instance.NotRegistered"
        case instanceNotinuse = "Instance.NotInUse"
        case instanceDeregistrationinprogress = "Instance.DeregistrationInProgress"
        case instanceInvalidstate = "Instance.InvalidState"
        case instanceIpunusable = "Instance.IpUnusable"
        public var description: String { return self.rawValue }
    }

    public enum InstanceHealthState: String, CustomStringConvertible, Codable {
        case initial = "initial"
        case healthy = "healthy"
        case unhealthy = "unhealthy"
        case unused = "unused"
        case draining = "draining"
        case unavailable = "unavailable"
        public var description: String { return self.rawValue }
    }

    public enum InstanceMetricName: String, CustomStringConvertible, Codable {
        case cpuutilization = "CPUUtilization"
        case networkin = "NetworkIn"
        case networkout = "NetworkOut"
        case statuscheckfailed = "StatusCheckFailed"
        case statuscheckfailedInstance = "StatusCheckFailed_Instance"
        case statuscheckfailedSystem = "StatusCheckFailed_System"
        public var description: String { return self.rawValue }
    }

    public enum InstancePlatform: String, CustomStringConvertible, Codable {
        case linuxUnix = "LINUX_UNIX"
        case windows = "WINDOWS"
        public var description: String { return self.rawValue }
    }

    public enum InstanceSnapshotState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case error = "error"
        case available = "available"
        public var description: String { return self.rawValue }
    }

    public enum LoadBalancerAttributeName: String, CustomStringConvertible, Codable {
        case healthcheckpath = "HealthCheckPath"
        case sessionstickinessenabled = "SessionStickinessEnabled"
        case sessionstickinessLbCookiedurationseconds = "SessionStickiness_LB_CookieDurationSeconds"
        public var description: String { return self.rawValue }
    }

    public enum LoadBalancerMetricName: String, CustomStringConvertible, Codable {
        case clienttlsnegotiationerrorcount = "ClientTLSNegotiationErrorCount"
        case healthyhostcount = "HealthyHostCount"
        case unhealthyhostcount = "UnhealthyHostCount"
        case httpcodeLb4XxCount = "HTTPCode_LB_4XX_Count"
        case httpcodeLb5XxCount = "HTTPCode_LB_5XX_Count"
        case httpcodeInstance2XxCount = "HTTPCode_Instance_2XX_Count"
        case httpcodeInstance3XxCount = "HTTPCode_Instance_3XX_Count"
        case httpcodeInstance4XxCount = "HTTPCode_Instance_4XX_Count"
        case httpcodeInstance5XxCount = "HTTPCode_Instance_5XX_Count"
        case instanceresponsetime = "InstanceResponseTime"
        case rejectedconnectioncount = "RejectedConnectionCount"
        case requestcount = "RequestCount"
        public var description: String { return self.rawValue }
    }

    public enum LoadBalancerProtocol: String, CustomStringConvertible, Codable {
        case httpHttps = "HTTP_HTTPS"
        case http = "HTTP"
        public var description: String { return self.rawValue }
    }

    public enum LoadBalancerState: String, CustomStringConvertible, Codable {
        case active = "active"
        case provisioning = "provisioning"
        case activeImpaired = "active_impaired"
        case failed = "failed"
        case unknown = "unknown"
        public var description: String { return self.rawValue }
    }

    public enum LoadBalancerTlsCertificateDomainStatus: String, CustomStringConvertible, Codable {
        case pendingValidation = "PENDING_VALIDATION"
        case failed = "FAILED"
        case success = "SUCCESS"
        public var description: String { return self.rawValue }
    }

    public enum LoadBalancerTlsCertificateFailureReason: String, CustomStringConvertible, Codable {
        case noAvailableContacts = "NO_AVAILABLE_CONTACTS"
        case additionalVerificationRequired = "ADDITIONAL_VERIFICATION_REQUIRED"
        case domainNotAllowed = "DOMAIN_NOT_ALLOWED"
        case invalidPublicDomain = "INVALID_PUBLIC_DOMAIN"
        case other = "OTHER"
        public var description: String { return self.rawValue }
    }

    public enum LoadBalancerTlsCertificateRenewalStatus: String, CustomStringConvertible, Codable {
        case pendingAutoRenewal = "PENDING_AUTO_RENEWAL"
        case pendingValidation = "PENDING_VALIDATION"
        case success = "SUCCESS"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum LoadBalancerTlsCertificateRevocationReason: String, CustomStringConvertible, Codable {
        case unspecified = "UNSPECIFIED"
        case keyCompromise = "KEY_COMPROMISE"
        case caCompromise = "CA_COMPROMISE"
        case affiliationChanged = "AFFILIATION_CHANGED"
        case superceded = "SUPERCEDED"
        case cessationOfOperation = "CESSATION_OF_OPERATION"
        case certificateHold = "CERTIFICATE_HOLD"
        case removeFromCrl = "REMOVE_FROM_CRL"
        case privilegeWithdrawn = "PRIVILEGE_WITHDRAWN"
        case aACompromise = "A_A_COMPROMISE"
        public var description: String { return self.rawValue }
    }

    public enum LoadBalancerTlsCertificateStatus: String, CustomStringConvertible, Codable {
        case pendingValidation = "PENDING_VALIDATION"
        case issued = "ISSUED"
        case inactive = "INACTIVE"
        case expired = "EXPIRED"
        case validationTimedOut = "VALIDATION_TIMED_OUT"
        case revoked = "REVOKED"
        case failed = "FAILED"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum MetricName: String, CustomStringConvertible, Codable {
        case cpuutilization = "CPUUtilization"
        case networkin = "NetworkIn"
        case networkout = "NetworkOut"
        case statuscheckfailed = "StatusCheckFailed"
        case statuscheckfailedInstance = "StatusCheckFailed_Instance"
        case statuscheckfailedSystem = "StatusCheckFailed_System"
        case clienttlsnegotiationerrorcount = "ClientTLSNegotiationErrorCount"
        case healthyhostcount = "HealthyHostCount"
        case unhealthyhostcount = "UnhealthyHostCount"
        case httpcodeLb4XxCount = "HTTPCode_LB_4XX_Count"
        case httpcodeLb5XxCount = "HTTPCode_LB_5XX_Count"
        case httpcodeInstance2XxCount = "HTTPCode_Instance_2XX_Count"
        case httpcodeInstance3XxCount = "HTTPCode_Instance_3XX_Count"
        case httpcodeInstance4XxCount = "HTTPCode_Instance_4XX_Count"
        case httpcodeInstance5XxCount = "HTTPCode_Instance_5XX_Count"
        case instanceresponsetime = "InstanceResponseTime"
        case rejectedconnectioncount = "RejectedConnectionCount"
        case requestcount = "RequestCount"
        case databaseconnections = "DatabaseConnections"
        case diskqueuedepth = "DiskQueueDepth"
        case freestoragespace = "FreeStorageSpace"
        case networkreceivethroughput = "NetworkReceiveThroughput"
        case networktransmitthroughput = "NetworkTransmitThroughput"
        public var description: String { return self.rawValue }
    }

    public enum MetricStatistic: String, CustomStringConvertible, Codable {
        case minimum = "Minimum"
        case maximum = "Maximum"
        case sum = "Sum"
        case average = "Average"
        case samplecount = "SampleCount"
        public var description: String { return self.rawValue }
    }

    public enum MetricUnit: String, CustomStringConvertible, Codable {
        case seconds = "Seconds"
        case microseconds = "Microseconds"
        case milliseconds = "Milliseconds"
        case bytes = "Bytes"
        case kilobytes = "Kilobytes"
        case megabytes = "Megabytes"
        case gigabytes = "Gigabytes"
        case terabytes = "Terabytes"
        case bits = "Bits"
        case kilobits = "Kilobits"
        case megabits = "Megabits"
        case gigabits = "Gigabits"
        case terabits = "Terabits"
        case percent = "Percent"
        case count = "Count"
        case bytesSecond = "Bytes/Second"
        case kilobytesSecond = "Kilobytes/Second"
        case megabytesSecond = "Megabytes/Second"
        case gigabytesSecond = "Gigabytes/Second"
        case terabytesSecond = "Terabytes/Second"
        case bitsSecond = "Bits/Second"
        case kilobitsSecond = "Kilobits/Second"
        case megabitsSecond = "Megabits/Second"
        case gigabitsSecond = "Gigabits/Second"
        case terabitsSecond = "Terabits/Second"
        case countSecond = "Count/Second"
        case none = "None"
        public var description: String { return self.rawValue }
    }

    public enum NetworkProtocol: String, CustomStringConvertible, Codable {
        case tcp = "tcp"
        case all = "all"
        case udp = "udp"
        public var description: String { return self.rawValue }
    }

    public enum OperationStatus: String, CustomStringConvertible, Codable {
        case notstarted = "NotStarted"
        case started = "Started"
        case failed = "Failed"
        case completed = "Completed"
        case succeeded = "Succeeded"
        public var description: String { return self.rawValue }
    }

    public enum OperationType: String, CustomStringConvertible, Codable {
        case deleteknownhostkeys = "DeleteKnownHostKeys"
        case deleteinstance = "DeleteInstance"
        case createinstance = "CreateInstance"
        case stopinstance = "StopInstance"
        case startinstance = "StartInstance"
        case rebootinstance = "RebootInstance"
        case openinstancepublicports = "OpenInstancePublicPorts"
        case putinstancepublicports = "PutInstancePublicPorts"
        case closeinstancepublicports = "CloseInstancePublicPorts"
        case allocatestaticip = "AllocateStaticIp"
        case releasestaticip = "ReleaseStaticIp"
        case attachstaticip = "AttachStaticIp"
        case detachstaticip = "DetachStaticIp"
        case updatedomainentry = "UpdateDomainEntry"
        case deletedomainentry = "DeleteDomainEntry"
        case createdomain = "CreateDomain"
        case deletedomain = "DeleteDomain"
        case createinstancesnapshot = "CreateInstanceSnapshot"
        case deleteinstancesnapshot = "DeleteInstanceSnapshot"
        case createinstancesfromsnapshot = "CreateInstancesFromSnapshot"
        case createloadbalancer = "CreateLoadBalancer"
        case deleteloadbalancer = "DeleteLoadBalancer"
        case attachinstancestoloadbalancer = "AttachInstancesToLoadBalancer"
        case detachinstancesfromloadbalancer = "DetachInstancesFromLoadBalancer"
        case updateloadbalancerattribute = "UpdateLoadBalancerAttribute"
        case createloadbalancertlscertificate = "CreateLoadBalancerTlsCertificate"
        case deleteloadbalancertlscertificate = "DeleteLoadBalancerTlsCertificate"
        case attachloadbalancertlscertificate = "AttachLoadBalancerTlsCertificate"
        case createdisk = "CreateDisk"
        case deletedisk = "DeleteDisk"
        case attachdisk = "AttachDisk"
        case detachdisk = "DetachDisk"
        case createdisksnapshot = "CreateDiskSnapshot"
        case deletedisksnapshot = "DeleteDiskSnapshot"
        case creatediskfromsnapshot = "CreateDiskFromSnapshot"
        case createrelationaldatabase = "CreateRelationalDatabase"
        case updaterelationaldatabase = "UpdateRelationalDatabase"
        case deleterelationaldatabase = "DeleteRelationalDatabase"
        case createrelationaldatabasefromsnapshot = "CreateRelationalDatabaseFromSnapshot"
        case createrelationaldatabasesnapshot = "CreateRelationalDatabaseSnapshot"
        case deleterelationaldatabasesnapshot = "DeleteRelationalDatabaseSnapshot"
        case updaterelationaldatabaseparameters = "UpdateRelationalDatabaseParameters"
        case startrelationaldatabase = "StartRelationalDatabase"
        case rebootrelationaldatabase = "RebootRelationalDatabase"
        case stoprelationaldatabase = "StopRelationalDatabase"
        case enableaddon = "EnableAddOn"
        case disableaddon = "DisableAddOn"
        case putalarm = "PutAlarm"
        case getalarms = "GetAlarms"
        case deletealarm = "DeleteAlarm"
        case testalarm = "TestAlarm"
        case createcontactmethod = "CreateContactMethod"
        case getcontactmethods = "GetContactMethods"
        case sendcontactmethodverification = "SendContactMethodVerification"
        case deletecontactmethod = "DeleteContactMethod"
        public var description: String { return self.rawValue }
    }

    public enum PortAccessType: String, CustomStringConvertible, Codable {
        case `public` = "Public"
        case `private` = "Private"
        public var description: String { return self.rawValue }
    }

    public enum PortInfoSourceType: String, CustomStringConvertible, Codable {
        case `default` = "DEFAULT"
        case instance = "INSTANCE"
        case none = "NONE"
        case closed = "CLOSED"
        public var description: String { return self.rawValue }
    }

    public enum PortState: String, CustomStringConvertible, Codable {
        case open = "open"
        case closed = "closed"
        public var description: String { return self.rawValue }
    }

    public enum RecordState: String, CustomStringConvertible, Codable {
        case started = "Started"
        case succeeded = "Succeeded"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum RegionName: String, CustomStringConvertible, Codable {
        case usEast1 = "us-east-1"
        case usEast2 = "us-east-2"
        case usWest1 = "us-west-1"
        case usWest2 = "us-west-2"
        case euWest1 = "eu-west-1"
        case euWest2 = "eu-west-2"
        case euWest3 = "eu-west-3"
        case euCentral1 = "eu-central-1"
        case caCentral1 = "ca-central-1"
        case apSouth1 = "ap-south-1"
        case apSoutheast1 = "ap-southeast-1"
        case apSoutheast2 = "ap-southeast-2"
        case apNortheast1 = "ap-northeast-1"
        case apNortheast2 = "ap-northeast-2"
        public var description: String { return self.rawValue }
    }

    public enum RelationalDatabaseEngine: String, CustomStringConvertible, Codable {
        case mysql = "mysql"
        public var description: String { return self.rawValue }
    }

    public enum RelationalDatabaseMetricName: String, CustomStringConvertible, Codable {
        case cpuutilization = "CPUUtilization"
        case databaseconnections = "DatabaseConnections"
        case diskqueuedepth = "DiskQueueDepth"
        case freestoragespace = "FreeStorageSpace"
        case networkreceivethroughput = "NetworkReceiveThroughput"
        case networktransmitthroughput = "NetworkTransmitThroughput"
        public var description: String { return self.rawValue }
    }

    public enum RelationalDatabasePasswordVersion: String, CustomStringConvertible, Codable {
        case current = "CURRENT"
        case previous = "PREVIOUS"
        case pending = "PENDING"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case instance = "Instance"
        case staticip = "StaticIp"
        case keypair = "KeyPair"
        case instancesnapshot = "InstanceSnapshot"
        case domain = "Domain"
        case peeredvpc = "PeeredVpc"
        case loadbalancer = "LoadBalancer"
        case loadbalancertlscertificate = "LoadBalancerTlsCertificate"
        case disk = "Disk"
        case disksnapshot = "DiskSnapshot"
        case relationaldatabase = "RelationalDatabase"
        case relationaldatabasesnapshot = "RelationalDatabaseSnapshot"
        case exportsnapshotrecord = "ExportSnapshotRecord"
        case cloudformationstackrecord = "CloudFormationStackRecord"
        case alarm = "Alarm"
        case contactmethod = "ContactMethod"
        public var description: String { return self.rawValue }
    }

    public enum TreatMissingData: String, CustomStringConvertible, Codable {
        case breaching = "breaching"
        case notbreaching = "notBreaching"
        case ignore = "ignore"
        case missing = "missing"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AddOn: AWSShape {

        /// The name of the add-on.
        public let name: String?
        /// The next daily time an automatic snapshot will be created. The time shown is in HH:00 format, and in Coordinated Universal Time (UTC). The snapshot is automatically created between the time shown and up to 45 minutes after.
        public let nextSnapshotTimeOfDay: String?
        /// The daily time when an automatic snapshot is created. The time shown is in HH:00 format, and in Coordinated Universal Time (UTC). The snapshot is automatically created between the time shown and up to 45 minutes after.
        public let snapshotTimeOfDay: String?
        /// The status of the add-on.
        public let status: String?

        public init(name: String? = nil, nextSnapshotTimeOfDay: String? = nil, snapshotTimeOfDay: String? = nil, status: String? = nil) {
            self.name = name
            self.nextSnapshotTimeOfDay = nextSnapshotTimeOfDay
            self.snapshotTimeOfDay = snapshotTimeOfDay
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case nextSnapshotTimeOfDay = "nextSnapshotTimeOfDay"
            case snapshotTimeOfDay = "snapshotTimeOfDay"
            case status = "status"
        }
    }

    public struct AddOnRequest: AWSShape {

        /// The add-on type.
        public let addOnType: AddOnType
        /// An object that represents additional parameters when enabling or modifying the automatic snapshot add-on.
        public let autoSnapshotAddOnRequest: AutoSnapshotAddOnRequest?

        public init(addOnType: AddOnType, autoSnapshotAddOnRequest: AutoSnapshotAddOnRequest? = nil) {
            self.addOnType = addOnType
            self.autoSnapshotAddOnRequest = autoSnapshotAddOnRequest
        }

        public func validate(name: String) throws {
            try self.autoSnapshotAddOnRequest?.validate(name: "\(name).autoSnapshotAddOnRequest")
        }

        private enum CodingKeys: String, CodingKey {
            case addOnType = "addOnType"
            case autoSnapshotAddOnRequest = "autoSnapshotAddOnRequest"
        }
    }

    public struct Alarm: AWSShape {

        /// The Amazon Resource Name (ARN) of the alarm.
        public let arn: String?
        /// The arithmetic operation used when comparing the specified statistic and threshold.
        public let comparisonOperator: ComparisonOperator?
        /// The contact protocols for the alarm, such as Email, SMS (text messaging), or both.
        public let contactProtocols: [ContactProtocol]?
        /// The timestamp when the alarm was created.
        public let createdAt: TimeStamp?
        /// The number of data points that must not within the specified threshold to trigger the alarm.
        public let datapointsToAlarm: Int?
        /// The number of periods over which data is compared to the specified threshold.
        public let evaluationPeriods: Int?
        /// An object that lists information about the location of the alarm.
        public let location: ResourceLocation?
        /// The name of the metric associated with the alarm.
        public let metricName: MetricName?
        /// An object that lists information about the resource monitored by the alarm.
        public let monitoredResourceInfo: MonitoredResourceInfo?
        /// The name of the alarm.
        public let name: String?
        /// Indicates whether the alarm is enabled.
        public let notificationEnabled: Bool?
        /// The alarm states that trigger a notification.
        public let notificationTriggers: [AlarmState]?
        /// The period, in seconds, over which the statistic is applied.
        public let period: Int?
        /// The Lightsail resource type (e.g., Alarm).
        public let resourceType: ResourceType?
        /// The current state of the alarm. An alarm has the following possible states:    ALARM — The metric is outside of the defined threshold.    INSUFFICIENT_DATA — The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.    OK — The metric is within the defined threshold.  
        public let state: AlarmState?
        /// The statistic for the metric associated with the alarm. The following statistics are available:    Minimum — The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.    Maximum — The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.    Sum — All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.    Average — The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.    SampleCount — The count, or number, of data points used for the statistical calculation.  
        public let statistic: MetricStatistic?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail alarm. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The value against which the specified statistic is compared.
        public let threshold: Double?
        /// Specifies how the alarm handles missing data points. An alarm can treat missing data in the following ways:    breaching — Assume the missing data is not within the threshold. Missing data counts towards the number of times the metric is not within the threshold.    notBreaching — Assume the missing data is within the threshold. Missing data does not count towards the number of times the metric is not within the threshold.    ignore — Ignore the missing data. Maintains the current alarm state.    missing — Missing data is treated as missing.  
        public let treatMissingData: TreatMissingData?
        /// The unit of the metric associated with the alarm.
        public let unit: MetricUnit?

        public init(arn: String? = nil, comparisonOperator: ComparisonOperator? = nil, contactProtocols: [ContactProtocol]? = nil, createdAt: TimeStamp? = nil, datapointsToAlarm: Int? = nil, evaluationPeriods: Int? = nil, location: ResourceLocation? = nil, metricName: MetricName? = nil, monitoredResourceInfo: MonitoredResourceInfo? = nil, name: String? = nil, notificationEnabled: Bool? = nil, notificationTriggers: [AlarmState]? = nil, period: Int? = nil, resourceType: ResourceType? = nil, state: AlarmState? = nil, statistic: MetricStatistic? = nil, supportCode: String? = nil, threshold: Double? = nil, treatMissingData: TreatMissingData? = nil, unit: MetricUnit? = nil) {
            self.arn = arn
            self.comparisonOperator = comparisonOperator
            self.contactProtocols = contactProtocols
            self.createdAt = createdAt
            self.datapointsToAlarm = datapointsToAlarm
            self.evaluationPeriods = evaluationPeriods
            self.location = location
            self.metricName = metricName
            self.monitoredResourceInfo = monitoredResourceInfo
            self.name = name
            self.notificationEnabled = notificationEnabled
            self.notificationTriggers = notificationTriggers
            self.period = period
            self.resourceType = resourceType
            self.state = state
            self.statistic = statistic
            self.supportCode = supportCode
            self.threshold = threshold
            self.treatMissingData = treatMissingData
            self.unit = unit
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case comparisonOperator = "comparisonOperator"
            case contactProtocols = "contactProtocols"
            case createdAt = "createdAt"
            case datapointsToAlarm = "datapointsToAlarm"
            case evaluationPeriods = "evaluationPeriods"
            case location = "location"
            case metricName = "metricName"
            case monitoredResourceInfo = "monitoredResourceInfo"
            case name = "name"
            case notificationEnabled = "notificationEnabled"
            case notificationTriggers = "notificationTriggers"
            case period = "period"
            case resourceType = "resourceType"
            case state = "state"
            case statistic = "statistic"
            case supportCode = "supportCode"
            case threshold = "threshold"
            case treatMissingData = "treatMissingData"
            case unit = "unit"
        }
    }

    public struct AllocateStaticIpRequest: AWSShape {

        /// The name of the static IP address.
        public let staticIpName: String

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

        public func validate(name: String) throws {
            try validate(self.staticIpName, name:"staticIpName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
        }
    }

    public struct AllocateStaticIpResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct AttachDiskRequest: AWSShape {

        /// The unique Lightsail disk name (e.g., my-disk).
        public let diskName: String
        /// The disk path to expose to the instance (e.g., /dev/xvdf).
        public let diskPath: String
        /// The name of the Lightsail instance where you want to utilize the storage disk.
        public let instanceName: String

        public init(diskName: String, diskPath: String, instanceName: String) {
            self.diskName = diskName
            self.diskPath = diskPath
            self.instanceName = instanceName
        }

        public func validate(name: String) throws {
            try validate(self.diskName, name:"diskName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.diskPath, name:"diskPath", parent: name, pattern: ".*\\S.*")
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case diskName = "diskName"
            case diskPath = "diskPath"
            case instanceName = "instanceName"
        }
    }

    public struct AttachDiskResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct AttachInstancesToLoadBalancerRequest: AWSShape {

        /// An array of strings representing the instance name(s) you want to attach to your load balancer. An instance must be running before you can attach it to your load balancer. There are no additional limits on the number of instances you can attach to your load balancer, aside from the limit of Lightsail instances you can create in your account (20).
        public let instanceNames: [String]
        /// The name of the load balancer.
        public let loadBalancerName: String

        public init(instanceNames: [String], loadBalancerName: String) {
            self.instanceNames = instanceNames
            self.loadBalancerName = loadBalancerName
        }

        public func validate(name: String) throws {
            try self.instanceNames.forEach {
                try validate($0, name: "instanceNames[]", parent: name, pattern: "\\w[\\w\\-]*\\w")
            }
            try validate(self.loadBalancerName, name:"loadBalancerName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceNames = "instanceNames"
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct AttachInstancesToLoadBalancerResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct AttachLoadBalancerTlsCertificateRequest: AWSShape {

        /// The name of your SSL/TLS certificate.
        public let certificateName: String
        /// The name of the load balancer to which you want to associate the SSL/TLS certificate.
        public let loadBalancerName: String

        public init(certificateName: String, loadBalancerName: String) {
            self.certificateName = certificateName
            self.loadBalancerName = loadBalancerName
        }

        public func validate(name: String) throws {
            try validate(self.certificateName, name:"certificateName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.loadBalancerName, name:"loadBalancerName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case certificateName = "certificateName"
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct AttachLoadBalancerTlsCertificateResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request. These SSL/TLS certificates are only usable by Lightsail load balancers. You can't get the certificate and use it for another purpose.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct AttachStaticIpRequest: AWSShape {

        /// The instance name to which you want to attach the static IP address.
        public let instanceName: String
        /// The name of the static IP.
        public let staticIpName: String

        public init(instanceName: String, staticIpName: String) {
            self.instanceName = instanceName
            self.staticIpName = staticIpName
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.staticIpName, name:"staticIpName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case staticIpName = "staticIpName"
        }
    }

    public struct AttachStaticIpResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct AttachedDisk: AWSShape {

        /// The path of the disk (e.g., /dev/xvdf).
        public let path: String?
        /// The size of the disk in GB.
        public let sizeInGb: Int?

        public init(path: String? = nil, sizeInGb: Int? = nil) {
            self.path = path
            self.sizeInGb = sizeInGb
        }

        private enum CodingKeys: String, CodingKey {
            case path = "path"
            case sizeInGb = "sizeInGb"
        }
    }

    public struct AutoSnapshotAddOnRequest: AWSShape {

        /// The daily time when an automatic snapshot will be created. Constraints:   Must be in HH:00 format, and in an hourly increment.   Specified in Coordinated Universal Time (UTC).   The snapshot will be automatically created between the time specified and up to 45 minutes after.  
        public let snapshotTimeOfDay: String?

        public init(snapshotTimeOfDay: String? = nil) {
            self.snapshotTimeOfDay = snapshotTimeOfDay
        }

        public func validate(name: String) throws {
            try validate(self.snapshotTimeOfDay, name:"snapshotTimeOfDay", parent: name, pattern: "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$")
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotTimeOfDay = "snapshotTimeOfDay"
        }
    }

    public struct AutoSnapshotDetails: AWSShape {

        /// The timestamp when the automatic snapshot was created.
        public let createdAt: TimeStamp?
        /// The date of the automatic snapshot in YYYY-MM-DD format.
        public let date: String?
        /// An array of objects that describe the block storage disks attached to the instance when the automatic snapshot was created.
        public let fromAttachedDisks: [AttachedDisk]?
        /// The status of the automatic snapshot.
        public let status: AutoSnapshotStatus?

        public init(createdAt: TimeStamp? = nil, date: String? = nil, fromAttachedDisks: [AttachedDisk]? = nil, status: AutoSnapshotStatus? = nil) {
            self.createdAt = createdAt
            self.date = date
            self.fromAttachedDisks = fromAttachedDisks
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case date = "date"
            case fromAttachedDisks = "fromAttachedDisks"
            case status = "status"
        }
    }

    public struct AvailabilityZone: AWSShape {

        /// The state of the Availability Zone.
        public let state: String?
        /// The name of the Availability Zone. The format is us-east-2a (case-sensitive).
        public let zoneName: String?

        public init(state: String? = nil, zoneName: String? = nil) {
            self.state = state
            self.zoneName = zoneName
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case zoneName = "zoneName"
        }
    }

    public struct Blueprint: AWSShape {

        /// The ID for the virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0).
        public let blueprintId: String?
        /// The description of the blueprint.
        public let description: String?
        /// The group name of the blueprint (e.g., amazon-linux).
        public let group: String?
        /// A Boolean value indicating whether the blueprint is active. Inactive blueprints are listed to support customers with existing instances but are not necessarily available for launch of new instances. Blueprints are marked inactive when they become outdated due to operating system updates or new application releases.
        public let isActive: Bool?
        /// The end-user license agreement URL for the image or blueprint.
        public let licenseUrl: String?
        /// The minimum bundle power required to run this blueprint. For example, you need a bundle with a power value of 500 or more to create an instance that uses a blueprint with a minimum power value of 500. 0 indicates that the blueprint runs on all instance sizes. 
        public let minPower: Int?
        /// The friendly name of the blueprint (e.g., Amazon Linux).
        public let name: String?
        /// The operating system platform (either Linux/Unix-based or Windows Server-based) of the blueprint.
        public let platform: InstancePlatform?
        /// The product URL to learn more about the image or blueprint.
        public let productUrl: String?
        /// The type of the blueprint (e.g., os or app).
        public let `type`: BlueprintType?
        /// The version number of the operating system, application, or stack (e.g., 2016.03.0).
        public let version: String?
        /// The version code.
        public let versionCode: String?

        public init(blueprintId: String? = nil, description: String? = nil, group: String? = nil, isActive: Bool? = nil, licenseUrl: String? = nil, minPower: Int? = nil, name: String? = nil, platform: InstancePlatform? = nil, productUrl: String? = nil, type: BlueprintType? = nil, version: String? = nil, versionCode: String? = nil) {
            self.blueprintId = blueprintId
            self.description = description
            self.group = group
            self.isActive = isActive
            self.licenseUrl = licenseUrl
            self.minPower = minPower
            self.name = name
            self.platform = platform
            self.productUrl = productUrl
            self.`type` = `type`
            self.version = version
            self.versionCode = versionCode
        }

        private enum CodingKeys: String, CodingKey {
            case blueprintId = "blueprintId"
            case description = "description"
            case group = "group"
            case isActive = "isActive"
            case licenseUrl = "licenseUrl"
            case minPower = "minPower"
            case name = "name"
            case platform = "platform"
            case productUrl = "productUrl"
            case `type` = "type"
            case version = "version"
            case versionCode = "versionCode"
        }
    }

    public struct Bundle: AWSShape {

        /// The bundle ID (e.g., micro_1_0).
        public let bundleId: String?
        /// The number of vCPUs included in the bundle (e.g., 2).
        public let cpuCount: Int?
        /// The size of the SSD (e.g., 30).
        public let diskSizeInGb: Int?
        /// The Amazon EC2 instance type (e.g., t2.micro).
        public let instanceType: String?
        /// A Boolean value indicating whether the bundle is active.
        public let isActive: Bool?
        /// A friendly name for the bundle (e.g., Micro).
        public let name: String?
        /// A numeric value that represents the power of the bundle (e.g., 500). You can use the bundle's power value in conjunction with a blueprint's minimum power value to determine whether the blueprint will run on the bundle. For example, you need a bundle with a power value of 500 or more to create an instance that uses a blueprint with a minimum power value of 500.
        public let power: Int?
        /// The price in US dollars (e.g., 5.0).
        public let price: Float?
        /// The amount of RAM in GB (e.g., 2.0).
        public let ramSizeInGb: Float?
        /// The operating system platform (Linux/Unix-based or Windows Server-based) that the bundle supports. You can only launch a WINDOWS bundle on a blueprint that supports the WINDOWS platform. LINUX_UNIX blueprints require a LINUX_UNIX bundle.
        public let supportedPlatforms: [InstancePlatform]?
        /// The data transfer rate per month in GB (e.g., 2000).
        public let transferPerMonthInGb: Int?

        public init(bundleId: String? = nil, cpuCount: Int? = nil, diskSizeInGb: Int? = nil, instanceType: String? = nil, isActive: Bool? = nil, name: String? = nil, power: Int? = nil, price: Float? = nil, ramSizeInGb: Float? = nil, supportedPlatforms: [InstancePlatform]? = nil, transferPerMonthInGb: Int? = nil) {
            self.bundleId = bundleId
            self.cpuCount = cpuCount
            self.diskSizeInGb = diskSizeInGb
            self.instanceType = instanceType
            self.isActive = isActive
            self.name = name
            self.power = power
            self.price = price
            self.ramSizeInGb = ramSizeInGb
            self.supportedPlatforms = supportedPlatforms
            self.transferPerMonthInGb = transferPerMonthInGb
        }

        private enum CodingKeys: String, CodingKey {
            case bundleId = "bundleId"
            case cpuCount = "cpuCount"
            case diskSizeInGb = "diskSizeInGb"
            case instanceType = "instanceType"
            case isActive = "isActive"
            case name = "name"
            case power = "power"
            case price = "price"
            case ramSizeInGb = "ramSizeInGb"
            case supportedPlatforms = "supportedPlatforms"
            case transferPerMonthInGb = "transferPerMonthInGb"
        }
    }

    public struct CloseInstancePublicPortsRequest: AWSShape {

        /// The name of the instance on which you're attempting to close the public ports.
        public let instanceName: String
        /// Information about the public port you are trying to close.
        public let portInfo: PortInfo

        public init(instanceName: String, portInfo: PortInfo) {
            self.instanceName = instanceName
            self.portInfo = portInfo
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try self.portInfo.validate(name: "\(name).portInfo")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case portInfo = "portInfo"
        }
    }

    public struct CloseInstancePublicPortsResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct CloudFormationStackRecord: AWSShape {

        /// The Amazon Resource Name (ARN) of the CloudFormation stack record.
        public let arn: String?
        /// The date when the CloudFormation stack record was created.
        public let createdAt: TimeStamp?
        /// A list of objects describing the destination service, which is AWS CloudFormation, and the Amazon Resource Name (ARN) of the AWS CloudFormation stack.
        public let destinationInfo: DestinationInfo?
        /// A list of objects describing the Availability Zone and AWS Region of the CloudFormation stack record.
        public let location: ResourceLocation?
        /// The name of the CloudFormation stack record. It starts with CloudFormationStackRecord followed by a GUID.
        public let name: String?
        /// The Lightsail resource type (e.g., CloudFormationStackRecord).
        public let resourceType: ResourceType?
        /// A list of objects describing the source of the CloudFormation stack record.
        public let sourceInfo: [CloudFormationStackRecordSourceInfo]?
        /// The current state of the CloudFormation stack record.
        public let state: RecordState?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, destinationInfo: DestinationInfo? = nil, location: ResourceLocation? = nil, name: String? = nil, resourceType: ResourceType? = nil, sourceInfo: [CloudFormationStackRecordSourceInfo]? = nil, state: RecordState? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.destinationInfo = destinationInfo
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.sourceInfo = sourceInfo
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case destinationInfo = "destinationInfo"
            case location = "location"
            case name = "name"
            case resourceType = "resourceType"
            case sourceInfo = "sourceInfo"
            case state = "state"
        }
    }

    public struct CloudFormationStackRecordSourceInfo: AWSShape {

        /// The Amazon Resource Name (ARN) of the export snapshot record.
        public let arn: String?
        /// The name of the record.
        public let name: String?
        /// The Lightsail resource type (e.g., ExportSnapshotRecord).
        public let resourceType: CloudFormationStackRecordSourceType?

        public init(arn: String? = nil, name: String? = nil, resourceType: CloudFormationStackRecordSourceType? = nil) {
            self.arn = arn
            self.name = name
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case name = "name"
            case resourceType = "resourceType"
        }
    }

    public struct ContactMethod: AWSShape {

        /// The Amazon Resource Name (ARN) of the contact method.
        public let arn: String?
        /// The destination of the contact method, such as an email address or a mobile phone number.
        public let contactEndpoint: String?
        /// The timestamp when the contact method was created.
        public let createdAt: TimeStamp?
        public let location: ResourceLocation?
        /// The name of the contact method.
        public let name: String?
        /// The protocol of the contact method, such as email or SMS (text messaging).
        public let `protocol`: ContactProtocol?
        /// The Lightsail resource type (e.g., ContactMethod).
        public let resourceType: ResourceType?
        /// The current status of the contact method. A contact method has the following possible status:    PendingVerification — The contact method has not yet been verified, and the verification has not yet expired.    Valid — The contact method has been verified.    InValid — An attempt was made to verify the contact method, but the verification has expired.  
        public let status: ContactMethodStatus?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail contact method. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?

        public init(arn: String? = nil, contactEndpoint: String? = nil, createdAt: TimeStamp? = nil, location: ResourceLocation? = nil, name: String? = nil, protocol: ContactProtocol? = nil, resourceType: ResourceType? = nil, status: ContactMethodStatus? = nil, supportCode: String? = nil) {
            self.arn = arn
            self.contactEndpoint = contactEndpoint
            self.createdAt = createdAt
            self.location = location
            self.name = name
            self.`protocol` = `protocol`
            self.resourceType = resourceType
            self.status = status
            self.supportCode = supportCode
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case contactEndpoint = "contactEndpoint"
            case createdAt = "createdAt"
            case location = "location"
            case name = "name"
            case `protocol` = "protocol"
            case resourceType = "resourceType"
            case status = "status"
            case supportCode = "supportCode"
        }
    }

    public struct CopySnapshotRequest: AWSShape {

        /// The date of the source automatic snapshot to copy. Use the get auto snapshots operation to identify the dates of the available automatic snapshots. Constraints:   Must be specified in YYYY-MM-DD format.   This parameter cannot be defined together with the use latest restorable auto snapshot parameter. The restore date and use latest restorable auto snapshot parameters are mutually exclusive.   Define this parameter only when copying an automatic snapshot as a manual snapshot. For more information, see the Lightsail Dev Guide.  
        public let restoreDate: String?
        /// The AWS Region where the source manual or automatic snapshot is located.
        public let sourceRegion: RegionName
        /// The name of the source instance or disk from which the source automatic snapshot was created. Constraint:   Define this parameter only when copying an automatic snapshot as a manual snapshot. For more information, see the Lightsail Dev Guide.  
        public let sourceResourceName: String?
        /// The name of the source manual snapshot to copy. Constraint:   Define this parameter only when copying a manual snapshot as another manual snapshot.  
        public let sourceSnapshotName: String?
        /// The name of the new manual snapshot to be created as a copy.
        public let targetSnapshotName: String
        /// A Boolean value to indicate whether to use the latest available automatic snapshot of the specified source instance or disk. Constraints:   This parameter cannot be defined together with the restore date parameter. The use latest restorable auto snapshot and restore date parameters are mutually exclusive.   Define this parameter only when copying an automatic snapshot as a manual snapshot. For more information, see the Lightsail Dev Guide.  
        public let useLatestRestorableAutoSnapshot: Bool?

        public init(restoreDate: String? = nil, sourceRegion: RegionName, sourceResourceName: String? = nil, sourceSnapshotName: String? = nil, targetSnapshotName: String, useLatestRestorableAutoSnapshot: Bool? = nil) {
            self.restoreDate = restoreDate
            self.sourceRegion = sourceRegion
            self.sourceResourceName = sourceResourceName
            self.sourceSnapshotName = sourceSnapshotName
            self.targetSnapshotName = targetSnapshotName
            self.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot
        }

        public func validate(name: String) throws {
            try validate(self.sourceSnapshotName, name:"sourceSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.targetSnapshotName, name:"targetSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case restoreDate = "restoreDate"
            case sourceRegion = "sourceRegion"
            case sourceResourceName = "sourceResourceName"
            case sourceSnapshotName = "sourceSnapshotName"
            case targetSnapshotName = "targetSnapshotName"
            case useLatestRestorableAutoSnapshot = "useLatestRestorableAutoSnapshot"
        }
    }

    public struct CopySnapshotResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateCloudFormationStackRequest: AWSShape {

        /// An array of parameters that will be used to create the new Amazon EC2 instance. You can only pass one instance entry at a time in this array. You will get an invalid parameter error if you pass more than one instance entry in this array.
        public let instances: [InstanceEntry]

        public init(instances: [InstanceEntry]) {
            self.instances = instances
        }

        public func validate(name: String) throws {
            try self.instances.forEach {
                try $0.validate(name: "\(name).instances[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "instances"
        }
    }

    public struct CreateCloudFormationStackResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateContactMethodRequest: AWSShape {

        /// The destination of the contact method, such as an email address or a mobile phone number. Use the E.164 format when specifying a mobile phone number. E.164 is a standard for the phone number structure used for international telecommunication. Phone numbers that follow this format can have a maximum of 15 digits, and they are prefixed with the plus character (+) and the country code. For example, a U.S. phone number in E.164 format would be specified as +1XXX5550100. For more information, see E.164 in Wikipedia.
        public let contactEndpoint: String
        /// The protocol of the contact method, such as Email or SMS (text messaging). The SMS protocol is supported only in the following AWS Regions.   US East (N. Virginia) (us-east-1)   US West (Oregon) (us-west-2)   Europe (Ireland) (eu-west-1)   Asia Pacific (Tokyo) (ap-northeast-1)   Asia Pacific (Singapore) (ap-southeast-1)   Asia Pacific (Sydney) (ap-southeast-2)   For a list of countries/regions where SMS text messages can be sent, and the latest AWS Regions where SMS text messaging is supported, see Supported Regions and Countries in the Amazon SNS Developer Guide. For more information about notifications in Amazon Lightsail, see Notifications in Amazon Lightsail.
        public let `protocol`: ContactProtocol

        public init(contactEndpoint: String, protocol: ContactProtocol) {
            self.contactEndpoint = contactEndpoint
            self.`protocol` = `protocol`
        }

        public func validate(name: String) throws {
            try validate(self.contactEndpoint, name:"contactEndpoint", parent: name, max: 256)
            try validate(self.contactEndpoint, name:"contactEndpoint", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case contactEndpoint = "contactEndpoint"
            case `protocol` = "protocol"
        }
    }

    public struct CreateContactMethodResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateDiskFromSnapshotRequest: AWSShape {

        /// An array of objects that represent the add-ons to enable for the new disk.
        public let addOns: [AddOnRequest]?
        /// The Availability Zone where you want to create the disk (e.g., us-east-2a). Choose the same Availability Zone as the Lightsail instance where you want to create the disk. Use the GetRegions operation to list the Availability Zones where Lightsail is currently available.
        public let availabilityZone: String
        /// The unique Lightsail disk name (e.g., my-disk).
        public let diskName: String
        /// The name of the disk snapshot (e.g., my-snapshot) from which to create the new storage disk. Constraint:   This parameter cannot be defined together with the source disk name parameter. The disk snapshot name and source disk name parameters are mutually exclusive.  
        public let diskSnapshotName: String?
        /// The date of the automatic snapshot to use for the new disk. Use the get auto snapshots operation to identify the dates of the available automatic snapshots. Constraints:   Must be specified in YYYY-MM-DD format.   This parameter cannot be defined together with the use latest restorable auto snapshot parameter. The restore date and use latest restorable auto snapshot parameters are mutually exclusive.   Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the Lightsail Dev Guide.  
        public let restoreDate: String?
        /// The size of the disk in GB (e.g., 32).
        public let sizeInGb: Int
        /// The name of the source disk from which the source automatic snapshot was created. Constraints:   This parameter cannot be defined together with the disk snapshot name parameter. The source disk name and disk snapshot name parameters are mutually exclusive.   Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the Lightsail Dev Guide.  
        public let sourceDiskName: String?
        /// The tag keys and optional values to add to the resource during create. To tag a resource after it has been created, see the tag resource operation.
        public let tags: [Tag]?
        /// A Boolean value to indicate whether to use the latest available automatic snapshot. Constraints:   This parameter cannot be defined together with the restore date parameter. The use latest restorable auto snapshot and restore date parameters are mutually exclusive.   Define this parameter only when creating a new disk from an automatic snapshot. For more information, see the Lightsail Dev Guide.  
        public let useLatestRestorableAutoSnapshot: Bool?

        public init(addOns: [AddOnRequest]? = nil, availabilityZone: String, diskName: String, diskSnapshotName: String? = nil, restoreDate: String? = nil, sizeInGb: Int, sourceDiskName: String? = nil, tags: [Tag]? = nil, useLatestRestorableAutoSnapshot: Bool? = nil) {
            self.addOns = addOns
            self.availabilityZone = availabilityZone
            self.diskName = diskName
            self.diskSnapshotName = diskSnapshotName
            self.restoreDate = restoreDate
            self.sizeInGb = sizeInGb
            self.sourceDiskName = sourceDiskName
            self.tags = tags
            self.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot
        }

        public func validate(name: String) throws {
            try self.addOns?.forEach {
                try $0.validate(name: "\(name).addOns[]")
            }
            try validate(self.availabilityZone, name:"availabilityZone", parent: name, pattern: ".*\\S.*")
            try validate(self.diskName, name:"diskName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.diskSnapshotName, name:"diskSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case addOns = "addOns"
            case availabilityZone = "availabilityZone"
            case diskName = "diskName"
            case diskSnapshotName = "diskSnapshotName"
            case restoreDate = "restoreDate"
            case sizeInGb = "sizeInGb"
            case sourceDiskName = "sourceDiskName"
            case tags = "tags"
            case useLatestRestorableAutoSnapshot = "useLatestRestorableAutoSnapshot"
        }
    }

    public struct CreateDiskFromSnapshotResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateDiskRequest: AWSShape {

        /// An array of objects that represent the add-ons to enable for the new disk.
        public let addOns: [AddOnRequest]?
        /// The Availability Zone where you want to create the disk (e.g., us-east-2a). Use the same Availability Zone as the Lightsail instance to which you want to attach the disk. Use the get regions operation to list the Availability Zones where Lightsail is currently available.
        public let availabilityZone: String
        /// The unique Lightsail disk name (e.g., my-disk).
        public let diskName: String
        /// The size of the disk in GB (e.g., 32).
        public let sizeInGb: Int
        /// The tag keys and optional values to add to the resource during create. To tag a resource after it has been created, see the tag resource operation.
        public let tags: [Tag]?

        public init(addOns: [AddOnRequest]? = nil, availabilityZone: String, diskName: String, sizeInGb: Int, tags: [Tag]? = nil) {
            self.addOns = addOns
            self.availabilityZone = availabilityZone
            self.diskName = diskName
            self.sizeInGb = sizeInGb
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.addOns?.forEach {
                try $0.validate(name: "\(name).addOns[]")
            }
            try validate(self.availabilityZone, name:"availabilityZone", parent: name, pattern: ".*\\S.*")
            try validate(self.diskName, name:"diskName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case addOns = "addOns"
            case availabilityZone = "availabilityZone"
            case diskName = "diskName"
            case sizeInGb = "sizeInGb"
            case tags = "tags"
        }
    }

    public struct CreateDiskResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateDiskSnapshotRequest: AWSShape {

        /// The unique name of the source disk (e.g., Disk-Virginia-1).  This parameter cannot be defined together with the instance name parameter. The disk name and instance name parameters are mutually exclusive. 
        public let diskName: String?
        /// The name of the destination disk snapshot (e.g., my-disk-snapshot) based on the source disk.
        public let diskSnapshotName: String
        /// The unique name of the source instance (e.g., Amazon_Linux-512MB-Virginia-1). When this is defined, a snapshot of the instance's system volume is created.  This parameter cannot be defined together with the disk name parameter. The instance name and disk name parameters are mutually exclusive. 
        public let instanceName: String?
        /// The tag keys and optional values to add to the resource during create. To tag a resource after it has been created, see the tag resource operation.
        public let tags: [Tag]?

        public init(diskName: String? = nil, diskSnapshotName: String, instanceName: String? = nil, tags: [Tag]? = nil) {
            self.diskName = diskName
            self.diskSnapshotName = diskSnapshotName
            self.instanceName = instanceName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.diskName, name:"diskName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.diskSnapshotName, name:"diskSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case diskName = "diskName"
            case diskSnapshotName = "diskSnapshotName"
            case instanceName = "instanceName"
            case tags = "tags"
        }
    }

    public struct CreateDiskSnapshotResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateDomainEntryRequest: AWSShape {

        /// An array of key-value pairs containing information about the domain entry request.
        public let domainEntry: DomainEntry
        /// The domain name (e.g., example.com) for which you want to create the domain entry.
        public let domainName: String

        public init(domainEntry: DomainEntry, domainName: String) {
            self.domainEntry = domainEntry
            self.domainName = domainName
        }

        public func validate(name: String) throws {
            try self.domainEntry.validate(name: "\(name).domainEntry")
        }

        private enum CodingKeys: String, CodingKey {
            case domainEntry = "domainEntry"
            case domainName = "domainName"
        }
    }

    public struct CreateDomainEntryResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct CreateDomainRequest: AWSShape {

        /// The domain name to manage (e.g., example.com).  You cannot register a new domain name using Lightsail. You must register a domain name using Amazon Route 53 or another domain name registrar. If you have already registered your domain, you can enter its name in this parameter to manage the DNS records for that domain. 
        public let domainName: String
        /// The tag keys and optional values to add to the resource during create. To tag a resource after it has been created, see the tag resource operation.
        public let tags: [Tag]?

        public init(domainName: String, tags: [Tag]? = nil) {
            self.domainName = domainName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case tags = "tags"
        }
    }

    public struct CreateDomainResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct CreateInstanceSnapshotRequest: AWSShape {

        /// The Lightsail instance on which to base your snapshot.
        public let instanceName: String
        /// The name for your new snapshot.
        public let instanceSnapshotName: String
        /// The tag keys and optional values to add to the resource during create. To tag a resource after it has been created, see the tag resource operation.
        public let tags: [Tag]?

        public init(instanceName: String, instanceSnapshotName: String, tags: [Tag]? = nil) {
            self.instanceName = instanceName
            self.instanceSnapshotName = instanceSnapshotName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.instanceSnapshotName, name:"instanceSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case instanceSnapshotName = "instanceSnapshotName"
            case tags = "tags"
        }
    }

    public struct CreateInstanceSnapshotResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateInstancesFromSnapshotRequest: AWSShape {

        /// An array of objects representing the add-ons to enable for the new instance.
        public let addOns: [AddOnRequest]?
        /// An object containing information about one or more disk mappings.
        public let attachedDiskMapping: [String: [DiskMap]]?
        /// The Availability Zone where you want to create your instances. Use the following formatting: us-east-2a (case sensitive). You can get a list of Availability Zones by using the get regions operation. Be sure to add the include Availability Zones parameter to your request.
        public let availabilityZone: String
        /// The bundle of specification information for your virtual private server (or instance), including the pricing plan (e.g., micro_1_0).
        public let bundleId: String
        /// The names for your new instances.
        public let instanceNames: [String]
        /// The name of the instance snapshot on which you are basing your new instances. Use the get instance snapshots operation to return information about your existing snapshots. Constraint:   This parameter cannot be defined together with the source instance name parameter. The instance snapshot name and source instance name parameters are mutually exclusive.  
        public let instanceSnapshotName: String?
        /// The name for your key pair.
        public let keyPairName: String?
        /// The date of the automatic snapshot to use for the new instance. Use the get auto snapshots operation to identify the dates of the available automatic snapshots. Constraints:   Must be specified in YYYY-MM-DD format.   This parameter cannot be defined together with the use latest restorable auto snapshot parameter. The restore date and use latest restorable auto snapshot parameters are mutually exclusive.   Define this parameter only when creating a new instance from an automatic snapshot. For more information, see the Lightsail Dev Guide.  
        public let restoreDate: String?
        /// The name of the source instance from which the source automatic snapshot was created. Constraints:   This parameter cannot be defined together with the instance snapshot name parameter. The source instance name and instance snapshot name parameters are mutually exclusive.   Define this parameter only when creating a new instance from an automatic snapshot. For more information, see the Lightsail Dev Guide.  
        public let sourceInstanceName: String?
        /// The tag keys and optional values to add to the resource during create. To tag a resource after it has been created, see the tag resource operation.
        public let tags: [Tag]?
        /// A Boolean value to indicate whether to use the latest available automatic snapshot. Constraints:   This parameter cannot be defined together with the restore date parameter. The use latest restorable auto snapshot and restore date parameters are mutually exclusive.   Define this parameter only when creating a new instance from an automatic snapshot. For more information, see the Lightsail Dev Guide.  
        public let useLatestRestorableAutoSnapshot: Bool?
        /// You can create a launch script that configures a server with additional user data. For example, apt-get -y update.  Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg. For a complete list, see the Dev Guide. 
        public let userData: String?

        public init(addOns: [AddOnRequest]? = nil, attachedDiskMapping: [String: [DiskMap]]? = nil, availabilityZone: String, bundleId: String, instanceNames: [String], instanceSnapshotName: String? = nil, keyPairName: String? = nil, restoreDate: String? = nil, sourceInstanceName: String? = nil, tags: [Tag]? = nil, useLatestRestorableAutoSnapshot: Bool? = nil, userData: String? = nil) {
            self.addOns = addOns
            self.attachedDiskMapping = attachedDiskMapping
            self.availabilityZone = availabilityZone
            self.bundleId = bundleId
            self.instanceNames = instanceNames
            self.instanceSnapshotName = instanceSnapshotName
            self.keyPairName = keyPairName
            self.restoreDate = restoreDate
            self.sourceInstanceName = sourceInstanceName
            self.tags = tags
            self.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot
            self.userData = userData
        }

        public func validate(name: String) throws {
            try self.addOns?.forEach {
                try $0.validate(name: "\(name).addOns[]")
            }
            try self.attachedDiskMapping?.forEach {
                try validate($0.key, name:"attachedDiskMapping.key", parent: name, pattern: "\\w[\\w\\-]*\\w")
            }
            try validate(self.bundleId, name:"bundleId", parent: name, pattern: ".*\\S.*")
            try validate(self.instanceSnapshotName, name:"instanceSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.keyPairName, name:"keyPairName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case addOns = "addOns"
            case attachedDiskMapping = "attachedDiskMapping"
            case availabilityZone = "availabilityZone"
            case bundleId = "bundleId"
            case instanceNames = "instanceNames"
            case instanceSnapshotName = "instanceSnapshotName"
            case keyPairName = "keyPairName"
            case restoreDate = "restoreDate"
            case sourceInstanceName = "sourceInstanceName"
            case tags = "tags"
            case useLatestRestorableAutoSnapshot = "useLatestRestorableAutoSnapshot"
            case userData = "userData"
        }
    }

    public struct CreateInstancesFromSnapshotResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateInstancesRequest: AWSShape {

        /// An array of objects representing the add-ons to enable for the new instance.
        public let addOns: [AddOnRequest]?
        /// The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). You can get a list of Availability Zones by using the get regions operation. Be sure to add the include Availability Zones parameter to your request.
        public let availabilityZone: String
        /// The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0). Use the get blueprints operation to return a list of available images (or blueprints).  Use active blueprints when creating new instances. Inactive blueprints are listed to support customers with existing instances and are not necessarily available to create new instances. Blueprints are marked inactive when they become outdated due to operating system updates or new application releases. 
        public let blueprintId: String
        /// The bundle of specification information for your virtual private server (or instance), including the pricing plan (e.g., micro_1_0).
        public let bundleId: String
        /// The names to use for your new Lightsail instances. Separate multiple values using quotation marks and commas, for example: ["MyFirstInstance","MySecondInstance"] 
        public let instanceNames: [String]
        /// The name of your key pair.
        public let keyPairName: String?
        /// The tag keys and optional values to add to the resource during create. To tag a resource after it has been created, see the tag resource operation.
        public let tags: [Tag]?
        /// A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update.  Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg. For a complete list, see the Dev Guide. 
        public let userData: String?

        public init(addOns: [AddOnRequest]? = nil, availabilityZone: String, blueprintId: String, bundleId: String, instanceNames: [String], keyPairName: String? = nil, tags: [Tag]? = nil, userData: String? = nil) {
            self.addOns = addOns
            self.availabilityZone = availabilityZone
            self.blueprintId = blueprintId
            self.bundleId = bundleId
            self.instanceNames = instanceNames
            self.keyPairName = keyPairName
            self.tags = tags
            self.userData = userData
        }

        public func validate(name: String) throws {
            try self.addOns?.forEach {
                try $0.validate(name: "\(name).addOns[]")
            }
            try validate(self.blueprintId, name:"blueprintId", parent: name, pattern: ".*\\S.*")
            try validate(self.bundleId, name:"bundleId", parent: name, pattern: ".*\\S.*")
            try validate(self.keyPairName, name:"keyPairName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case addOns = "addOns"
            case availabilityZone = "availabilityZone"
            case blueprintId = "blueprintId"
            case bundleId = "bundleId"
            case instanceNames = "instanceNames"
            case keyPairName = "keyPairName"
            case tags = "tags"
            case userData = "userData"
        }
    }

    public struct CreateInstancesResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateKeyPairRequest: AWSShape {

        /// The name for your new key pair.
        public let keyPairName: String
        /// The tag keys and optional values to add to the resource during create. To tag a resource after it has been created, see the tag resource operation.
        public let tags: [Tag]?

        public init(keyPairName: String, tags: [Tag]? = nil) {
            self.keyPairName = keyPairName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.keyPairName, name:"keyPairName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairName = "keyPairName"
            case tags = "tags"
        }
    }

    public struct CreateKeyPairResult: AWSShape {

        /// An array of key-value pairs containing information about the new key pair you just created.
        public let keyPair: KeyPair?
        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operation: Operation?
        /// A base64-encoded RSA private key.
        public let privateKeyBase64: String?
        /// A base64-encoded public key of the ssh-rsa type.
        public let publicKeyBase64: String?

        public init(keyPair: KeyPair? = nil, operation: Operation? = nil, privateKeyBase64: String? = nil, publicKeyBase64: String? = nil) {
            self.keyPair = keyPair
            self.operation = operation
            self.privateKeyBase64 = privateKeyBase64
            self.publicKeyBase64 = publicKeyBase64
        }

        private enum CodingKeys: String, CodingKey {
            case keyPair = "keyPair"
            case operation = "operation"
            case privateKeyBase64 = "privateKeyBase64"
            case publicKeyBase64 = "publicKeyBase64"
        }
    }

    public struct CreateLoadBalancerRequest: AWSShape {

        /// The optional alternative domains and subdomains to use with your SSL/TLS certificate (e.g., www.example.com, example.com, m.example.com, blog.example.com).
        public let certificateAlternativeNames: [String]?
        /// The domain name with which your certificate is associated (e.g., example.com). If you specify certificateDomainName, then certificateName is required (and vice-versa).
        public let certificateDomainName: String?
        /// The name of the SSL/TLS certificate. If you specify certificateName, then certificateDomainName is required (and vice-versa).
        public let certificateName: String?
        /// The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail uses the root path of your website (e.g., "/"). You may want to specify a custom health check path other than the root of your application if your home page loads slowly or has a lot of media or scripting on it.
        public let healthCheckPath: String?
        /// The instance port where you're creating your load balancer.
        public let instancePort: Int
        /// The name of your load balancer.
        public let loadBalancerName: String
        /// The tag keys and optional values to add to the resource during create. To tag a resource after it has been created, see the tag resource operation.
        public let tags: [Tag]?

        public init(certificateAlternativeNames: [String]? = nil, certificateDomainName: String? = nil, certificateName: String? = nil, healthCheckPath: String? = nil, instancePort: Int, loadBalancerName: String, tags: [Tag]? = nil) {
            self.certificateAlternativeNames = certificateAlternativeNames
            self.certificateDomainName = certificateDomainName
            self.certificateName = certificateName
            self.healthCheckPath = healthCheckPath
            self.instancePort = instancePort
            self.loadBalancerName = loadBalancerName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.certificateName, name:"certificateName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.instancePort, name:"instancePort", parent: name, max: 65535)
            try validate(self.instancePort, name:"instancePort", parent: name, min: 0)
            try validate(self.loadBalancerName, name:"loadBalancerName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case certificateAlternativeNames = "certificateAlternativeNames"
            case certificateDomainName = "certificateDomainName"
            case certificateName = "certificateName"
            case healthCheckPath = "healthCheckPath"
            case instancePort = "instancePort"
            case loadBalancerName = "loadBalancerName"
            case tags = "tags"
        }
    }

    public struct CreateLoadBalancerResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateLoadBalancerTlsCertificateRequest: AWSShape {

        /// An array of strings listing alternative domains and subdomains for your SSL/TLS certificate. Lightsail will de-dupe the names for you. You can have a maximum of 9 alternative names (in addition to the 1 primary domain). We do not support wildcards (e.g., *.example.com).
        public let certificateAlternativeNames: [String]?
        /// The domain name (e.g., example.com) for your SSL/TLS certificate.
        public let certificateDomainName: String
        /// The SSL/TLS certificate name. You can have up to 10 certificates in your account at one time. Each Lightsail load balancer can have up to 2 certificates associated with it at one time. There is also an overall limit to the number of certificates that can be issue in a 365-day period. For more information, see Limits.
        public let certificateName: String
        /// The load balancer name where you want to create the SSL/TLS certificate.
        public let loadBalancerName: String
        /// The tag keys and optional values to add to the resource during create. To tag a resource after it has been created, see the tag resource operation.
        public let tags: [Tag]?

        public init(certificateAlternativeNames: [String]? = nil, certificateDomainName: String, certificateName: String, loadBalancerName: String, tags: [Tag]? = nil) {
            self.certificateAlternativeNames = certificateAlternativeNames
            self.certificateDomainName = certificateDomainName
            self.certificateName = certificateName
            self.loadBalancerName = loadBalancerName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.certificateName, name:"certificateName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.loadBalancerName, name:"loadBalancerName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case certificateAlternativeNames = "certificateAlternativeNames"
            case certificateDomainName = "certificateDomainName"
            case certificateName = "certificateName"
            case loadBalancerName = "loadBalancerName"
            case tags = "tags"
        }
    }

    public struct CreateLoadBalancerTlsCertificateResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateRelationalDatabaseFromSnapshotRequest: AWSShape {

        /// The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format. You can get a list of Availability Zones by using the get regions operation. Be sure to add the include relational database Availability Zones parameter to your request.
        public let availabilityZone: String?
        /// Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
        public let publiclyAccessible: Bool?
        /// The bundle ID for your new database. A bundle describes the performance specifications for your database. You can get a list of database bundle IDs by using the get relational database bundles operation. When creating a new database from a snapshot, you cannot choose a bundle that is smaller than the bundle of the source database.
        public let relationalDatabaseBundleId: String?
        /// The name to use for your new database. Constraints:   Must contain from 2 to 255 alphanumeric characters, or hyphens.   The first and last character must be a letter or number.  
        public let relationalDatabaseName: String
        /// The name of the database snapshot from which to create your new database.
        public let relationalDatabaseSnapshotName: String?
        /// The date and time to restore your database from. Constraints:   Must be before the latest restorable time for the database.   Cannot be specified if the use latest restorable time parameter is true.   Specified in Coordinated Universal Time (UTC).   Specified in the Unix time format. For example, if you wish to use a restore time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the restore time.  
        public let restoreTime: TimeStamp?
        /// The name of the source database.
        public let sourceRelationalDatabaseName: String?
        /// The tag keys and optional values to add to the resource during create. To tag a resource after it has been created, see the tag resource operation.
        public let tags: [Tag]?
        /// Specifies whether your database is restored from the latest backup time. A value of true restores from the latest backup time.  Default: false  Constraints: Cannot be specified if the restore time parameter is provided.
        public let useLatestRestorableTime: Bool?

        public init(availabilityZone: String? = nil, publiclyAccessible: Bool? = nil, relationalDatabaseBundleId: String? = nil, relationalDatabaseName: String, relationalDatabaseSnapshotName: String? = nil, restoreTime: TimeStamp? = nil, sourceRelationalDatabaseName: String? = nil, tags: [Tag]? = nil, useLatestRestorableTime: Bool? = nil) {
            self.availabilityZone = availabilityZone
            self.publiclyAccessible = publiclyAccessible
            self.relationalDatabaseBundleId = relationalDatabaseBundleId
            self.relationalDatabaseName = relationalDatabaseName
            self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
            self.restoreTime = restoreTime
            self.sourceRelationalDatabaseName = sourceRelationalDatabaseName
            self.tags = tags
            self.useLatestRestorableTime = useLatestRestorableTime
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.relationalDatabaseSnapshotName, name:"relationalDatabaseSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.sourceRelationalDatabaseName, name:"sourceRelationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case publiclyAccessible = "publiclyAccessible"
            case relationalDatabaseBundleId = "relationalDatabaseBundleId"
            case relationalDatabaseName = "relationalDatabaseName"
            case relationalDatabaseSnapshotName = "relationalDatabaseSnapshotName"
            case restoreTime = "restoreTime"
            case sourceRelationalDatabaseName = "sourceRelationalDatabaseName"
            case tags = "tags"
            case useLatestRestorableTime = "useLatestRestorableTime"
        }
    }

    public struct CreateRelationalDatabaseFromSnapshotResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateRelationalDatabaseRequest: AWSShape {

        /// The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format. You can get a list of Availability Zones by using the get regions operation. Be sure to add the include relational database Availability Zones parameter to your request.
        public let availabilityZone: String?
        /// The name of the master database created when the Lightsail database resource is created. Constraints:   Must contain from 1 to 64 alphanumeric characters.   Cannot be a word reserved by the specified database engine  
        public let masterDatabaseName: String
        /// The master user name for your new database. Constraints:   Master user name is required.   Must contain from 1 to 16 alphanumeric characters.   The first character must be a letter.   Cannot be a reserved word for the database engine you choose. For more information about reserved words in MySQL 5.6 or 5.7, see the Keywords and Reserved Words articles for MySQL 5.6 or MySQL 5.7 respectively.  
        public let masterUsername: String
        /// The password for the master user of your new database. The password can include any printable ASCII character except "/", """, or "@". Constraints: Must contain 8 to 41 characters.
        public let masterUserPassword: String?
        /// The daily time range during which automated backups are created for your new database if automated backups are enabled. The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. For more information about the preferred backup window time blocks for each region, see the Working With Backups guide in the Amazon Relational Database Service (Amazon RDS) documentation. Constraints:   Must be in the hh24:mi-hh24:mi format. Example: 16:00-16:30    Specified in Coordinated Universal Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// The weekly time range during which system maintenance can occur on your new database. The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. Constraints:   Must be in the ddd:hh24:mi-ddd:hh24:mi format.   Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.   Must be at least 30 minutes.   Specified in Coordinated Universal Time (UTC).   Example: Tue:17:00-Tue:17:30   
        public let preferredMaintenanceWindow: String?
        /// Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
        public let publiclyAccessible: Bool?
        /// The blueprint ID for your new database. A blueprint describes the major engine version of a database. You can get a list of database blueprints IDs by using the get relational database blueprints operation.
        public let relationalDatabaseBlueprintId: String
        /// The bundle ID for your new database. A bundle describes the performance specifications for your database. You can get a list of database bundle IDs by using the get relational database bundles operation.
        public let relationalDatabaseBundleId: String
        /// The name to use for your new database. Constraints:   Must contain from 2 to 255 alphanumeric characters, or hyphens.   The first and last character must be a letter or number.  
        public let relationalDatabaseName: String
        /// The tag keys and optional values to add to the resource during create. To tag a resource after it has been created, see the tag resource operation.
        public let tags: [Tag]?

        public init(availabilityZone: String? = nil, masterDatabaseName: String, masterUsername: String, masterUserPassword: String? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, publiclyAccessible: Bool? = nil, relationalDatabaseBlueprintId: String, relationalDatabaseBundleId: String, relationalDatabaseName: String, tags: [Tag]? = nil) {
            self.availabilityZone = availabilityZone
            self.masterDatabaseName = masterDatabaseName
            self.masterUsername = masterUsername
            self.masterUserPassword = masterUserPassword
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.publiclyAccessible = publiclyAccessible
            self.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId
            self.relationalDatabaseBundleId = relationalDatabaseBundleId
            self.relationalDatabaseName = relationalDatabaseName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case masterDatabaseName = "masterDatabaseName"
            case masterUsername = "masterUsername"
            case masterUserPassword = "masterUserPassword"
            case preferredBackupWindow = "preferredBackupWindow"
            case preferredMaintenanceWindow = "preferredMaintenanceWindow"
            case publiclyAccessible = "publiclyAccessible"
            case relationalDatabaseBlueprintId = "relationalDatabaseBlueprintId"
            case relationalDatabaseBundleId = "relationalDatabaseBundleId"
            case relationalDatabaseName = "relationalDatabaseName"
            case tags = "tags"
        }
    }

    public struct CreateRelationalDatabaseResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateRelationalDatabaseSnapshotRequest: AWSShape {

        /// The name of the database on which to base your new snapshot.
        public let relationalDatabaseName: String
        /// The name for your new database snapshot. Constraints:   Must contain from 2 to 255 alphanumeric characters, or hyphens.   The first and last character must be a letter or number.  
        public let relationalDatabaseSnapshotName: String
        /// The tag keys and optional values to add to the resource during create. To tag a resource after it has been created, see the tag resource operation.
        public let tags: [Tag]?

        public init(relationalDatabaseName: String, relationalDatabaseSnapshotName: String, tags: [Tag]? = nil) {
            self.relationalDatabaseName = relationalDatabaseName
            self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.relationalDatabaseSnapshotName, name:"relationalDatabaseSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case relationalDatabaseName = "relationalDatabaseName"
            case relationalDatabaseSnapshotName = "relationalDatabaseSnapshotName"
            case tags = "tags"
        }
    }

    public struct CreateRelationalDatabaseSnapshotResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DeleteAlarmRequest: AWSShape {

        /// The name of the alarm to delete.
        public let alarmName: String

        public init(alarmName: String) {
            self.alarmName = alarmName
        }

        public func validate(name: String) throws {
            try validate(self.alarmName, name:"alarmName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case alarmName = "alarmName"
        }
    }

    public struct DeleteAlarmResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DeleteAutoSnapshotRequest: AWSShape {

        /// The date of the automatic snapshot to delete in YYYY-MM-DD format. Use the get auto snapshots operation to get the available automatic snapshots for a resource.
        public let date: String
        /// The name of the source instance or disk from which to delete the automatic snapshot.
        public let resourceName: String

        public init(date: String, resourceName: String) {
            self.date = date
            self.resourceName = resourceName
        }

        public func validate(name: String) throws {
            try validate(self.date, name:"date", parent: name, pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$")
            try validate(self.resourceName, name:"resourceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case date = "date"
            case resourceName = "resourceName"
        }
    }

    public struct DeleteAutoSnapshotResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DeleteContactMethodRequest: AWSShape {

        /// The protocol that will be deleted, such as Email or SMS (text messaging).  To delete an Email and an SMS contact method if you added both, you must run separate DeleteContactMethod actions to delete each protocol. 
        public let `protocol`: ContactProtocol

        public init(protocol: ContactProtocol) {
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "protocol"
        }
    }

    public struct DeleteContactMethodResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DeleteDiskRequest: AWSShape {

        /// The unique name of the disk you want to delete (e.g., my-disk).
        public let diskName: String
        /// A Boolean value to indicate whether to delete the enabled add-ons for the disk.
        public let forceDeleteAddOns: Bool?

        public init(diskName: String, forceDeleteAddOns: Bool? = nil) {
            self.diskName = diskName
            self.forceDeleteAddOns = forceDeleteAddOns
        }

        public func validate(name: String) throws {
            try validate(self.diskName, name:"diskName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case diskName = "diskName"
            case forceDeleteAddOns = "forceDeleteAddOns"
        }
    }

    public struct DeleteDiskResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DeleteDiskSnapshotRequest: AWSShape {

        /// The name of the disk snapshot you want to delete (e.g., my-disk-snapshot).
        public let diskSnapshotName: String

        public init(diskSnapshotName: String) {
            self.diskSnapshotName = diskSnapshotName
        }

        public func validate(name: String) throws {
            try validate(self.diskSnapshotName, name:"diskSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case diskSnapshotName = "diskSnapshotName"
        }
    }

    public struct DeleteDiskSnapshotResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DeleteDomainEntryRequest: AWSShape {

        /// An array of key-value pairs containing information about your domain entries.
        public let domainEntry: DomainEntry
        /// The name of the domain entry to delete.
        public let domainName: String

        public init(domainEntry: DomainEntry, domainName: String) {
            self.domainEntry = domainEntry
            self.domainName = domainName
        }

        public func validate(name: String) throws {
            try self.domainEntry.validate(name: "\(name).domainEntry")
        }

        private enum CodingKeys: String, CodingKey {
            case domainEntry = "domainEntry"
            case domainName = "domainName"
        }
    }

    public struct DeleteDomainEntryResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct DeleteDomainRequest: AWSShape {

        /// The specific domain name to delete.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

    public struct DeleteDomainResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct DeleteInstanceRequest: AWSShape {

        /// A Boolean value to indicate whether to delete the enabled add-ons for the disk.
        public let forceDeleteAddOns: Bool?
        /// The name of the instance to delete.
        public let instanceName: String

        public init(forceDeleteAddOns: Bool? = nil, instanceName: String) {
            self.forceDeleteAddOns = forceDeleteAddOns
            self.instanceName = instanceName
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case forceDeleteAddOns = "forceDeleteAddOns"
            case instanceName = "instanceName"
        }
    }

    public struct DeleteInstanceResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DeleteInstanceSnapshotRequest: AWSShape {

        /// The name of the snapshot to delete.
        public let instanceSnapshotName: String

        public init(instanceSnapshotName: String) {
            self.instanceSnapshotName = instanceSnapshotName
        }

        public func validate(name: String) throws {
            try validate(self.instanceSnapshotName, name:"instanceSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSnapshotName = "instanceSnapshotName"
        }
    }

    public struct DeleteInstanceSnapshotResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DeleteKeyPairRequest: AWSShape {

        /// The name of the key pair to delete.
        public let keyPairName: String

        public init(keyPairName: String) {
            self.keyPairName = keyPairName
        }

        public func validate(name: String) throws {
            try validate(self.keyPairName, name:"keyPairName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairName = "keyPairName"
        }
    }

    public struct DeleteKeyPairResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct DeleteKnownHostKeysRequest: AWSShape {

        /// The name of the instance for which you want to reset the host key or certificate.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct DeleteKnownHostKeysResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DeleteLoadBalancerRequest: AWSShape {

        /// The name of the load balancer you want to delete.
        public let loadBalancerName: String

        public init(loadBalancerName: String) {
            self.loadBalancerName = loadBalancerName
        }

        public func validate(name: String) throws {
            try validate(self.loadBalancerName, name:"loadBalancerName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct DeleteLoadBalancerResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DeleteLoadBalancerTlsCertificateRequest: AWSShape {

        /// The SSL/TLS certificate name.
        public let certificateName: String
        /// When true, forces the deletion of an SSL/TLS certificate. There can be two certificates associated with a Lightsail load balancer: the primary and the backup. The force parameter is required when the primary SSL/TLS certificate is in use by an instance attached to the load balancer.
        public let force: Bool?
        /// The load balancer name.
        public let loadBalancerName: String

        public init(certificateName: String, force: Bool? = nil, loadBalancerName: String) {
            self.certificateName = certificateName
            self.force = force
            self.loadBalancerName = loadBalancerName
        }

        public func validate(name: String) throws {
            try validate(self.certificateName, name:"certificateName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.loadBalancerName, name:"loadBalancerName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case certificateName = "certificateName"
            case force = "force"
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct DeleteLoadBalancerTlsCertificateResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DeleteRelationalDatabaseRequest: AWSShape {

        /// The name of the database snapshot created if skip final snapshot is false, which is the default value for that parameter.  Specifying this parameter and also specifying the skip final snapshot parameter to true results in an error.  Constraints:   Must contain from 2 to 255 alphanumeric characters, or hyphens.   The first and last character must be a letter or number.  
        public let finalRelationalDatabaseSnapshotName: String?
        /// The name of the database that you are deleting.
        public let relationalDatabaseName: String
        /// Determines whether a final database snapshot is created before your database is deleted. If true is specified, no database snapshot is created. If false is specified, a database snapshot is created before your database is deleted. You must specify the final relational database snapshot name parameter if the skip final snapshot parameter is false. Default: false 
        public let skipFinalSnapshot: Bool?

        public init(finalRelationalDatabaseSnapshotName: String? = nil, relationalDatabaseName: String, skipFinalSnapshot: Bool? = nil) {
            self.finalRelationalDatabaseSnapshotName = finalRelationalDatabaseSnapshotName
            self.relationalDatabaseName = relationalDatabaseName
            self.skipFinalSnapshot = skipFinalSnapshot
        }

        public func validate(name: String) throws {
            try validate(self.finalRelationalDatabaseSnapshotName, name:"finalRelationalDatabaseSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case finalRelationalDatabaseSnapshotName = "finalRelationalDatabaseSnapshotName"
            case relationalDatabaseName = "relationalDatabaseName"
            case skipFinalSnapshot = "skipFinalSnapshot"
        }
    }

    public struct DeleteRelationalDatabaseResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DeleteRelationalDatabaseSnapshotRequest: AWSShape {

        /// The name of the database snapshot that you are deleting.
        public let relationalDatabaseSnapshotName: String

        public init(relationalDatabaseSnapshotName: String) {
            self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseSnapshotName, name:"relationalDatabaseSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case relationalDatabaseSnapshotName = "relationalDatabaseSnapshotName"
        }
    }

    public struct DeleteRelationalDatabaseSnapshotResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DestinationInfo: AWSShape {

        /// The ID of the resource created at the destination.
        public let id: String?
        /// The destination service of the record.
        public let service: String?

        public init(id: String? = nil, service: String? = nil) {
            self.id = id
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case service = "service"
        }
    }

    public struct DetachDiskRequest: AWSShape {

        /// The unique name of the disk you want to detach from your instance (e.g., my-disk).
        public let diskName: String

        public init(diskName: String) {
            self.diskName = diskName
        }

        public func validate(name: String) throws {
            try validate(self.diskName, name:"diskName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case diskName = "diskName"
        }
    }

    public struct DetachDiskResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DetachInstancesFromLoadBalancerRequest: AWSShape {

        /// An array of strings containing the names of the instances you want to detach from the load balancer.
        public let instanceNames: [String]
        /// The name of the Lightsail load balancer.
        public let loadBalancerName: String

        public init(instanceNames: [String], loadBalancerName: String) {
            self.instanceNames = instanceNames
            self.loadBalancerName = loadBalancerName
        }

        public func validate(name: String) throws {
            try self.instanceNames.forEach {
                try validate($0, name: "instanceNames[]", parent: name, pattern: "\\w[\\w\\-]*\\w")
            }
            try validate(self.loadBalancerName, name:"loadBalancerName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceNames = "instanceNames"
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct DetachInstancesFromLoadBalancerResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DetachStaticIpRequest: AWSShape {

        /// The name of the static IP to detach from the instance.
        public let staticIpName: String

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

        public func validate(name: String) throws {
            try validate(self.staticIpName, name:"staticIpName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
        }
    }

    public struct DetachStaticIpResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct DisableAddOnRequest: AWSShape {

        /// The add-on type to disable.
        public let addOnType: AddOnType
        /// The name of the source resource for which to disable the add-on.
        public let resourceName: String

        public init(addOnType: AddOnType, resourceName: String) {
            self.addOnType = addOnType
            self.resourceName = resourceName
        }

        public func validate(name: String) throws {
            try validate(self.resourceName, name:"resourceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case addOnType = "addOnType"
            case resourceName = "resourceName"
        }
    }

    public struct DisableAddOnResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct Disk: AWSShape {

        /// An array of objects representing the add-ons enabled on the disk.
        public let addOns: [AddOn]?
        /// The Amazon Resource Name (ARN) of the disk.
        public let arn: String?
        /// The resources to which the disk is attached.
        public let attachedTo: String?
        /// The date when the disk was created.
        public let createdAt: TimeStamp?
        /// The input/output operations per second (IOPS) of the disk.
        public let iops: Int?
        /// A Boolean value indicating whether the disk is attached.
        public let isAttached: Bool?
        /// A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).
        public let isSystemDisk: Bool?
        /// The AWS Region and Availability Zone where the disk is located.
        public let location: ResourceLocation?
        /// The unique name of the disk.
        public let name: String?
        /// The disk path.
        public let path: String?
        /// The Lightsail resource type (e.g., Disk).
        public let resourceType: ResourceType?
        /// The size of the disk in GB.
        public let sizeInGb: Int?
        /// Describes the status of the disk.
        public let state: DiskState?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the Lightsail Dev Guide.
        public let tags: [Tag]?

        public init(addOns: [AddOn]? = nil, arn: String? = nil, attachedTo: String? = nil, createdAt: TimeStamp? = nil, iops: Int? = nil, isAttached: Bool? = nil, isSystemDisk: Bool? = nil, location: ResourceLocation? = nil, name: String? = nil, path: String? = nil, resourceType: ResourceType? = nil, sizeInGb: Int? = nil, state: DiskState? = nil, supportCode: String? = nil, tags: [Tag]? = nil) {
            self.addOns = addOns
            self.arn = arn
            self.attachedTo = attachedTo
            self.createdAt = createdAt
            self.iops = iops
            self.isAttached = isAttached
            self.isSystemDisk = isSystemDisk
            self.location = location
            self.name = name
            self.path = path
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case addOns = "addOns"
            case arn = "arn"
            case attachedTo = "attachedTo"
            case createdAt = "createdAt"
            case iops = "iops"
            case isAttached = "isAttached"
            case isSystemDisk = "isSystemDisk"
            case location = "location"
            case name = "name"
            case path = "path"
            case resourceType = "resourceType"
            case sizeInGb = "sizeInGb"
            case state = "state"
            case supportCode = "supportCode"
            case tags = "tags"
        }
    }

    public struct DiskInfo: AWSShape {

        /// A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).
        public let isSystemDisk: Bool?
        /// The disk name.
        public let name: String?
        /// The disk path.
        public let path: String?
        /// The size of the disk in GB (e.g., 32).
        public let sizeInGb: Int?

        public init(isSystemDisk: Bool? = nil, name: String? = nil, path: String? = nil, sizeInGb: Int? = nil) {
            self.isSystemDisk = isSystemDisk
            self.name = name
            self.path = path
            self.sizeInGb = sizeInGb
        }

        private enum CodingKeys: String, CodingKey {
            case isSystemDisk = "isSystemDisk"
            case name = "name"
            case path = "path"
            case sizeInGb = "sizeInGb"
        }
    }

    public struct DiskMap: AWSShape {

        /// The new disk name (e.g., my-new-disk).
        public let newDiskName: String?
        /// The original disk path exposed to the instance (for example, /dev/sdh).
        public let originalDiskPath: String?

        public init(newDiskName: String? = nil, originalDiskPath: String? = nil) {
            self.newDiskName = newDiskName
            self.originalDiskPath = originalDiskPath
        }

        public func validate(name: String) throws {
            try validate(self.newDiskName, name:"newDiskName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.originalDiskPath, name:"originalDiskPath", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case newDiskName = "newDiskName"
            case originalDiskPath = "originalDiskPath"
        }
    }

    public struct DiskSnapshot: AWSShape {

        /// The Amazon Resource Name (ARN) of the disk snapshot.
        public let arn: String?
        /// The date when the disk snapshot was created.
        public let createdAt: TimeStamp?
        /// The Amazon Resource Name (ARN) of the source disk from which the disk snapshot was created.
        public let fromDiskArn: String?
        /// The unique name of the source disk from which the disk snapshot was created.
        public let fromDiskName: String?
        /// The Amazon Resource Name (ARN) of the source instance from which the disk (system volume) snapshot was created.
        public let fromInstanceArn: String?
        /// The unique name of the source instance from which the disk (system volume) snapshot was created.
        public let fromInstanceName: String?
        /// A Boolean value indicating whether the snapshot was created from an automatic snapshot.
        public let isFromAutoSnapshot: Bool?
        /// The AWS Region and Availability Zone where the disk snapshot was created.
        public let location: ResourceLocation?
        /// The name of the disk snapshot (e.g., my-disk-snapshot).
        public let name: String?
        /// The progress of the disk snapshot operation.
        public let progress: String?
        /// The Lightsail resource type (e.g., DiskSnapshot).
        public let resourceType: ResourceType?
        /// The size of the disk in GB.
        public let sizeInGb: Int?
        /// The status of the disk snapshot operation.
        public let state: DiskSnapshotState?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the Lightsail Dev Guide.
        public let tags: [Tag]?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, fromDiskArn: String? = nil, fromDiskName: String? = nil, fromInstanceArn: String? = nil, fromInstanceName: String? = nil, isFromAutoSnapshot: Bool? = nil, location: ResourceLocation? = nil, name: String? = nil, progress: String? = nil, resourceType: ResourceType? = nil, sizeInGb: Int? = nil, state: DiskSnapshotState? = nil, supportCode: String? = nil, tags: [Tag]? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.fromDiskArn = fromDiskArn
            self.fromDiskName = fromDiskName
            self.fromInstanceArn = fromInstanceArn
            self.fromInstanceName = fromInstanceName
            self.isFromAutoSnapshot = isFromAutoSnapshot
            self.location = location
            self.name = name
            self.progress = progress
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case fromDiskArn = "fromDiskArn"
            case fromDiskName = "fromDiskName"
            case fromInstanceArn = "fromInstanceArn"
            case fromInstanceName = "fromInstanceName"
            case isFromAutoSnapshot = "isFromAutoSnapshot"
            case location = "location"
            case name = "name"
            case progress = "progress"
            case resourceType = "resourceType"
            case sizeInGb = "sizeInGb"
            case state = "state"
            case supportCode = "supportCode"
            case tags = "tags"
        }
    }

    public struct DiskSnapshotInfo: AWSShape {

        /// The size of the disk in GB (e.g., 32).
        public let sizeInGb: Int?

        public init(sizeInGb: Int? = nil) {
            self.sizeInGb = sizeInGb
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInGb = "sizeInGb"
        }
    }

    public struct Domain: AWSShape {

        /// The Amazon Resource Name (ARN) of the domain recordset (e.g., arn:aws:lightsail:global:123456789101:Domain/824cede0-abc7-4f84-8dbc-12345EXAMPLE).
        public let arn: String?
        /// The date when the domain recordset was created.
        public let createdAt: TimeStamp?
        /// An array of key-value pairs containing information about the domain entries.
        public let domainEntries: [DomainEntry]?
        /// The AWS Region and Availability Zones where the domain recordset was created.
        public let location: ResourceLocation?
        /// The name of the domain.
        public let name: String?
        /// The resource type. 
        public let resourceType: ResourceType?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the Lightsail Dev Guide.
        public let tags: [Tag]?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, domainEntries: [DomainEntry]? = nil, location: ResourceLocation? = nil, name: String? = nil, resourceType: ResourceType? = nil, supportCode: String? = nil, tags: [Tag]? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.domainEntries = domainEntries
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.supportCode = supportCode
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case domainEntries = "domainEntries"
            case location = "location"
            case name = "name"
            case resourceType = "resourceType"
            case supportCode = "supportCode"
            case tags = "tags"
        }
    }

    public struct DomainEntry: AWSShape {

        /// The ID of the domain recordset entry.
        public let id: String?
        /// When true, specifies whether the domain entry is an alias used by the Lightsail load balancer. You can include an alias (A type) record in your request, which points to a load balancer DNS name and routes traffic to your load balancer
        public let isAlias: Bool?
        /// The name of the domain.
        public let name: String?
        /// The target AWS name server (e.g., ns-111.awsdns-22.com.). For Lightsail load balancers, the value looks like ab1234c56789c6b86aba6fb203d443bc-123456789.us-east-2.elb.amazonaws.com. Be sure to also set isAlias to true when setting up an A record for a load balancer.
        public let target: String?
        /// The type of domain entry, such as address (A), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority (SOA), service locator (SRV), or text (TXT). The following domain entry types can be used:    A     CNAME     MX     NS     SOA     SRV     TXT   
        public let `type`: String?

        public init(id: String? = nil, isAlias: Bool? = nil, name: String? = nil, target: String? = nil, type: String? = nil) {
            self.id = id
            self.isAlias = isAlias
            self.name = name
            self.target = target
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try validate(self.id, name:"id", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case isAlias = "isAlias"
            case name = "name"
            case target = "target"
            case `type` = "type"
        }
    }

    public struct DownloadDefaultKeyPairRequest: AWSShape {


        public init() {
        }

    }

    public struct DownloadDefaultKeyPairResult: AWSShape {

        /// A base64-encoded RSA private key.
        public let privateKeyBase64: String?
        /// A base64-encoded public key of the ssh-rsa type.
        public let publicKeyBase64: String?

        public init(privateKeyBase64: String? = nil, publicKeyBase64: String? = nil) {
            self.privateKeyBase64 = privateKeyBase64
            self.publicKeyBase64 = publicKeyBase64
        }

        private enum CodingKeys: String, CodingKey {
            case privateKeyBase64 = "privateKeyBase64"
            case publicKeyBase64 = "publicKeyBase64"
        }
    }

    public struct EnableAddOnRequest: AWSShape {

        /// An array of strings representing the add-on to enable or modify.
        public let addOnRequest: AddOnRequest
        /// The name of the source resource for which to enable or modify the add-on.
        public let resourceName: String

        public init(addOnRequest: AddOnRequest, resourceName: String) {
            self.addOnRequest = addOnRequest
            self.resourceName = resourceName
        }

        public func validate(name: String) throws {
            try self.addOnRequest.validate(name: "\(name).addOnRequest")
            try validate(self.resourceName, name:"resourceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case addOnRequest = "addOnRequest"
            case resourceName = "resourceName"
        }
    }

    public struct EnableAddOnResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct ExportSnapshotRecord: AWSShape {

        /// The Amazon Resource Name (ARN) of the export snapshot record.
        public let arn: String?
        /// The date when the export snapshot record was created.
        public let createdAt: TimeStamp?
        /// A list of objects describing the destination of the export snapshot record.
        public let destinationInfo: DestinationInfo?
        /// The AWS Region and Availability Zone where the export snapshot record is located.
        public let location: ResourceLocation?
        /// The export snapshot record name.
        public let name: String?
        /// The Lightsail resource type (e.g., ExportSnapshotRecord).
        public let resourceType: ResourceType?
        /// A list of objects describing the source of the export snapshot record.
        public let sourceInfo: ExportSnapshotRecordSourceInfo?
        /// The state of the export snapshot record.
        public let state: RecordState?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, destinationInfo: DestinationInfo? = nil, location: ResourceLocation? = nil, name: String? = nil, resourceType: ResourceType? = nil, sourceInfo: ExportSnapshotRecordSourceInfo? = nil, state: RecordState? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.destinationInfo = destinationInfo
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.sourceInfo = sourceInfo
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case destinationInfo = "destinationInfo"
            case location = "location"
            case name = "name"
            case resourceType = "resourceType"
            case sourceInfo = "sourceInfo"
            case state = "state"
        }
    }

    public struct ExportSnapshotRecordSourceInfo: AWSShape {

        /// The Amazon Resource Name (ARN) of the source instance or disk snapshot.
        public let arn: String?
        /// The date when the source instance or disk snapshot was created.
        public let createdAt: TimeStamp?
        /// A list of objects describing a disk snapshot.
        public let diskSnapshotInfo: DiskSnapshotInfo?
        /// The Amazon Resource Name (ARN) of the snapshot's source instance or disk.
        public let fromResourceArn: String?
        /// The name of the snapshot's source instance or disk.
        public let fromResourceName: String?
        /// A list of objects describing an instance snapshot.
        public let instanceSnapshotInfo: InstanceSnapshotInfo?
        /// The name of the source instance or disk snapshot.
        public let name: String?
        /// The Lightsail resource type (e.g., InstanceSnapshot or DiskSnapshot).
        public let resourceType: ExportSnapshotRecordSourceType?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, diskSnapshotInfo: DiskSnapshotInfo? = nil, fromResourceArn: String? = nil, fromResourceName: String? = nil, instanceSnapshotInfo: InstanceSnapshotInfo? = nil, name: String? = nil, resourceType: ExportSnapshotRecordSourceType? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.diskSnapshotInfo = diskSnapshotInfo
            self.fromResourceArn = fromResourceArn
            self.fromResourceName = fromResourceName
            self.instanceSnapshotInfo = instanceSnapshotInfo
            self.name = name
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case diskSnapshotInfo = "diskSnapshotInfo"
            case fromResourceArn = "fromResourceArn"
            case fromResourceName = "fromResourceName"
            case instanceSnapshotInfo = "instanceSnapshotInfo"
            case name = "name"
            case resourceType = "resourceType"
        }
    }

    public struct ExportSnapshotRequest: AWSShape {

        /// The name of the instance or disk snapshot to be exported to Amazon EC2.
        public let sourceSnapshotName: String

        public init(sourceSnapshotName: String) {
            self.sourceSnapshotName = sourceSnapshotName
        }

        public func validate(name: String) throws {
            try validate(self.sourceSnapshotName, name:"sourceSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case sourceSnapshotName = "sourceSnapshotName"
        }
    }

    public struct ExportSnapshotResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct GetActiveNamesRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetActiveNames request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetActiveNamesResult: AWSShape {

        /// The list of active names returned by the get active names request.
        public let activeNames: [String]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetActiveNames request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(activeNames: [String]? = nil, nextPageToken: String? = nil) {
            self.activeNames = activeNames
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case activeNames = "activeNames"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetAlarmsRequest: AWSShape {

        /// The name of the alarm. Specify an alarm name to return information about a specific alarm.
        public let alarmName: String?
        /// The name of the Lightsail resource being monitored by the alarm. Specify a monitored resource name to return information about all alarms for a specific resource.
        public let monitoredResourceName: String?
        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetAlarms request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(alarmName: String? = nil, monitoredResourceName: String? = nil, pageToken: String? = nil) {
            self.alarmName = alarmName
            self.monitoredResourceName = monitoredResourceName
            self.pageToken = pageToken
        }

        public func validate(name: String) throws {
            try validate(self.alarmName, name:"alarmName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.monitoredResourceName, name:"monitoredResourceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case alarmName = "alarmName"
            case monitoredResourceName = "monitoredResourceName"
            case pageToken = "pageToken"
        }
    }

    public struct GetAlarmsResult: AWSShape {

        /// An array of objects that describe the alarms.
        public let alarms: [Alarm]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetAlarms request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(alarms: [Alarm]? = nil, nextPageToken: String? = nil) {
            self.alarms = alarms
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case alarms = "alarms"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetAutoSnapshotsRequest: AWSShape {

        /// The name of the source instance or disk from which to get automatic snapshot information.
        public let resourceName: String

        public init(resourceName: String) {
            self.resourceName = resourceName
        }

        public func validate(name: String) throws {
            try validate(self.resourceName, name:"resourceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName = "resourceName"
        }
    }

    public struct GetAutoSnapshotsResult: AWSShape {

        /// An array of objects that describe the automatic snapshots that are available for the specified source instance or disk.
        public let autoSnapshots: [AutoSnapshotDetails]?
        /// The name of the source instance or disk for the automatic snapshots.
        public let resourceName: String?
        /// The resource type (e.g., Instance or Disk).
        public let resourceType: ResourceType?

        public init(autoSnapshots: [AutoSnapshotDetails]? = nil, resourceName: String? = nil, resourceType: ResourceType? = nil) {
            self.autoSnapshots = autoSnapshots
            self.resourceName = resourceName
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case autoSnapshots = "autoSnapshots"
            case resourceName = "resourceName"
            case resourceType = "resourceType"
        }
    }

    public struct GetBlueprintsRequest: AWSShape {

        /// A Boolean value indicating whether to include inactive results in your request.
        public let includeInactive: Bool?
        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetBlueprints request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(includeInactive: Bool? = nil, pageToken: String? = nil) {
            self.includeInactive = includeInactive
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case includeInactive = "includeInactive"
            case pageToken = "pageToken"
        }
    }

    public struct GetBlueprintsResult: AWSShape {

        /// An array of key-value pairs that contains information about the available blueprints.
        public let blueprints: [Blueprint]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetBlueprints request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(blueprints: [Blueprint]? = nil, nextPageToken: String? = nil) {
            self.blueprints = blueprints
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case blueprints = "blueprints"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetBundlesRequest: AWSShape {

        /// A Boolean value that indicates whether to include inactive bundle results in your request.
        public let includeInactive: Bool?
        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetBundles request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(includeInactive: Bool? = nil, pageToken: String? = nil) {
            self.includeInactive = includeInactive
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case includeInactive = "includeInactive"
            case pageToken = "pageToken"
        }
    }

    public struct GetBundlesResult: AWSShape {

        /// An array of key-value pairs that contains information about the available bundles.
        public let bundles: [Bundle]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetBundles request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(bundles: [Bundle]? = nil, nextPageToken: String? = nil) {
            self.bundles = bundles
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case bundles = "bundles"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetCloudFormationStackRecordsRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetClouFormationStackRecords request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetCloudFormationStackRecordsResult: AWSShape {

        /// A list of objects describing the CloudFormation stack records.
        public let cloudFormationStackRecords: [CloudFormationStackRecord]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetCloudFormationStackRecords request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(cloudFormationStackRecords: [CloudFormationStackRecord]? = nil, nextPageToken: String? = nil) {
            self.cloudFormationStackRecords = cloudFormationStackRecords
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFormationStackRecords = "cloudFormationStackRecords"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetContactMethodsRequest: AWSShape {

        /// The protocols used to send notifications, such as Email, or SMS (text messaging). Specify a protocol in your request to return information about a specific contact method protocol.
        public let protocols: [ContactProtocol]?

        public init(protocols: [ContactProtocol]? = nil) {
            self.protocols = protocols
        }

        private enum CodingKeys: String, CodingKey {
            case protocols = "protocols"
        }
    }

    public struct GetContactMethodsResult: AWSShape {

        /// An array of objects that describe the contact methods.
        public let contactMethods: [ContactMethod]?

        public init(contactMethods: [ContactMethod]? = nil) {
            self.contactMethods = contactMethods
        }

        private enum CodingKeys: String, CodingKey {
            case contactMethods = "contactMethods"
        }
    }

    public struct GetDiskRequest: AWSShape {

        /// The name of the disk (e.g., my-disk).
        public let diskName: String

        public init(diskName: String) {
            self.diskName = diskName
        }

        public func validate(name: String) throws {
            try validate(self.diskName, name:"diskName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case diskName = "diskName"
        }
    }

    public struct GetDiskResult: AWSShape {

        /// An object containing information about the disk.
        public let disk: Disk?

        public init(disk: Disk? = nil) {
            self.disk = disk
        }

        private enum CodingKeys: String, CodingKey {
            case disk = "disk"
        }
    }

    public struct GetDiskSnapshotRequest: AWSShape {

        /// The name of the disk snapshot (e.g., my-disk-snapshot).
        public let diskSnapshotName: String

        public init(diskSnapshotName: String) {
            self.diskSnapshotName = diskSnapshotName
        }

        public func validate(name: String) throws {
            try validate(self.diskSnapshotName, name:"diskSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case diskSnapshotName = "diskSnapshotName"
        }
    }

    public struct GetDiskSnapshotResult: AWSShape {

        /// An object containing information about the disk snapshot.
        public let diskSnapshot: DiskSnapshot?

        public init(diskSnapshot: DiskSnapshot? = nil) {
            self.diskSnapshot = diskSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case diskSnapshot = "diskSnapshot"
        }
    }

    public struct GetDiskSnapshotsRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetDiskSnapshots request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetDiskSnapshotsResult: AWSShape {

        /// An array of objects containing information about all block storage disk snapshots.
        public let diskSnapshots: [DiskSnapshot]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetDiskSnapshots request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(diskSnapshots: [DiskSnapshot]? = nil, nextPageToken: String? = nil) {
            self.diskSnapshots = diskSnapshots
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case diskSnapshots = "diskSnapshots"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetDisksRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetDisks request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetDisksResult: AWSShape {

        /// An array of objects containing information about all block storage disks.
        public let disks: [Disk]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetDisks request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(disks: [Disk]? = nil, nextPageToken: String? = nil) {
            self.disks = disks
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case disks = "disks"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetDomainRequest: AWSShape {

        /// The domain name for which your want to return information about.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

    public struct GetDomainResult: AWSShape {

        /// An array of key-value pairs containing information about your get domain request.
        public let domain: Domain?

        public init(domain: Domain? = nil) {
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "domain"
        }
    }

    public struct GetDomainsRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetDomains request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetDomainsResult: AWSShape {

        /// An array of key-value pairs containing information about each of the domain entries in the user's account.
        public let domains: [Domain]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetDomains request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(domains: [Domain]? = nil, nextPageToken: String? = nil) {
            self.domains = domains
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case domains = "domains"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetExportSnapshotRecordsRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetExportSnapshotRecords request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetExportSnapshotRecordsResult: AWSShape {

        /// A list of objects describing the export snapshot records.
        public let exportSnapshotRecords: [ExportSnapshotRecord]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetExportSnapshotRecords request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(exportSnapshotRecords: [ExportSnapshotRecord]? = nil, nextPageToken: String? = nil) {
            self.exportSnapshotRecords = exportSnapshotRecords
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case exportSnapshotRecords = "exportSnapshotRecords"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetInstanceAccessDetailsRequest: AWSShape {

        /// The name of the instance to access.
        public let instanceName: String
        /// The protocol to use to connect to your instance. Defaults to ssh.
        public let `protocol`: InstanceAccessProtocol?

        public init(instanceName: String, protocol: InstanceAccessProtocol? = nil) {
            self.instanceName = instanceName
            self.`protocol` = `protocol`
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case `protocol` = "protocol"
        }
    }

    public struct GetInstanceAccessDetailsResult: AWSShape {

        /// An array of key-value pairs containing information about a get instance access request.
        public let accessDetails: InstanceAccessDetails?

        public init(accessDetails: InstanceAccessDetails? = nil) {
            self.accessDetails = accessDetails
        }

        private enum CodingKeys: String, CodingKey {
            case accessDetails = "accessDetails"
        }
    }

    public struct GetInstanceMetricDataRequest: AWSShape {

        /// The end time of the time period.
        public let endTime: TimeStamp
        /// The name of the instance for which you want to get metrics data.
        public let instanceName: String
        /// The metric for which you want to return information. Valid instance metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.     CPUUtilization  — The percentage of allocated compute units that are currently in use on the instance. This metric identifies the processing power to run the applications on the instance. Tools in your operating system can show a lower percentage than Lightsail when the instance is not allocated a full processor core.  Statistics: The most useful statistics are Maximum and Average.  Unit: The published unit is Percent.     NetworkIn  — The number of bytes received on all network interfaces by the instance. This metric identifies the volume of incoming network traffic to the instance. The number reported is the number of bytes received during the period. Because this metric is reported in 5-minute intervals, divide the reported number by 300 to find Bytes/second.  Statistics: The most useful statistic is Sum.  Unit: The published unit is Bytes.     NetworkOut  — The number of bytes sent out on all network interfaces by the instance. This metric identifies the volume of outgoing network traffic from the instance. The number reported is the number of bytes sent during the period. Because this metric is reported in 5-minute intervals, divide the reported number by 300 to find Bytes/second.  Statistics: The most useful statistic is Sum.  Unit: The published unit is Bytes.     StatusCheckFailed  — Reports whether the instance passed or failed both the instance status check and the system status check. This metric can be either 0 (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds) granularity.  Statistics: The most useful statistic is Sum.  Unit: The published unit is Count.     StatusCheckFailed_Instance  — Reports whether the instance passed or failed the instance status check. This metric can be either 0 (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds) granularity.  Statistics: The most useful statistic is Sum.  Unit: The published unit is Count.     StatusCheckFailed_System  — Reports whether the instance passed or failed the system status check. This metric can be either 0 (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds) granularity.  Statistics: The most useful statistic is Sum.  Unit: The published unit is Count.  
        public let metricName: InstanceMetricName
        /// The granularity, in seconds, of the returned data points. The StatusCheckFailed, StatusCheckFailed_Instance, and StatusCheckFailed_System instance metric data is available in 1-minute (60 seconds) granularity. All other instance metric data is available in 5-minute (300 seconds) granularity.
        public let period: Int
        /// The start time of the time period.
        public let startTime: TimeStamp
        /// The statistic for the metric. The following statistics are available:    Minimum — The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.    Maximum — The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.    Sum — All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.    Average — The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.    SampleCount — The count, or number, of data points used for the statistical calculation.  
        public let statistics: [MetricStatistic]
        /// The unit for the metric data request. Valid units depend on the metric data being required. For the valid units with each available metric, see the metricName parameter.
        public let unit: MetricUnit

        public init(endTime: TimeStamp, instanceName: String, metricName: InstanceMetricName, period: Int, startTime: TimeStamp, statistics: [MetricStatistic], unit: MetricUnit) {
            self.endTime = endTime
            self.instanceName = instanceName
            self.metricName = metricName
            self.period = period
            self.startTime = startTime
            self.statistics = statistics
            self.unit = unit
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.period, name:"period", parent: name, max: 86400)
            try validate(self.period, name:"period", parent: name, min: 60)
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "endTime"
            case instanceName = "instanceName"
            case metricName = "metricName"
            case period = "period"
            case startTime = "startTime"
            case statistics = "statistics"
            case unit = "unit"
        }
    }

    public struct GetInstanceMetricDataResult: AWSShape {

        /// An array of key-value pairs containing information about the results of your get instance metric data request.
        public let metricData: [MetricDatapoint]?
        /// The metric name to return data for.
        public let metricName: InstanceMetricName?

        public init(metricData: [MetricDatapoint]? = nil, metricName: InstanceMetricName? = nil) {
            self.metricData = metricData
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case metricData = "metricData"
            case metricName = "metricName"
        }
    }

    public struct GetInstancePortStatesRequest: AWSShape {

        /// The name of the instance.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct GetInstancePortStatesResult: AWSShape {

        /// Information about the port states resulting from your request.
        public let portStates: [InstancePortState]?

        public init(portStates: [InstancePortState]? = nil) {
            self.portStates = portStates
        }

        private enum CodingKeys: String, CodingKey {
            case portStates = "portStates"
        }
    }

    public struct GetInstanceRequest: AWSShape {

        /// The name of the instance.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct GetInstanceResult: AWSShape {

        /// An array of key-value pairs containing information about the specified instance.
        public let instance: Instance?

        public init(instance: Instance? = nil) {
            self.instance = instance
        }

        private enum CodingKeys: String, CodingKey {
            case instance = "instance"
        }
    }

    public struct GetInstanceSnapshotRequest: AWSShape {

        /// The name of the snapshot for which you are requesting information.
        public let instanceSnapshotName: String

        public init(instanceSnapshotName: String) {
            self.instanceSnapshotName = instanceSnapshotName
        }

        public func validate(name: String) throws {
            try validate(self.instanceSnapshotName, name:"instanceSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSnapshotName = "instanceSnapshotName"
        }
    }

    public struct GetInstanceSnapshotResult: AWSShape {

        /// An array of key-value pairs containing information about the results of your get instance snapshot request.
        public let instanceSnapshot: InstanceSnapshot?

        public init(instanceSnapshot: InstanceSnapshot? = nil) {
            self.instanceSnapshot = instanceSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSnapshot = "instanceSnapshot"
        }
    }

    public struct GetInstanceSnapshotsRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetInstanceSnapshots request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetInstanceSnapshotsResult: AWSShape {

        /// An array of key-value pairs containing information about the results of your get instance snapshots request.
        public let instanceSnapshots: [InstanceSnapshot]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetInstanceSnapshots request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(instanceSnapshots: [InstanceSnapshot]? = nil, nextPageToken: String? = nil) {
            self.instanceSnapshots = instanceSnapshots
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSnapshots = "instanceSnapshots"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetInstanceStateRequest: AWSShape {

        /// The name of the instance to get state information about.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct GetInstanceStateResult: AWSShape {

        /// The state of the instance.
        public let state: InstanceState?

        public init(state: InstanceState? = nil) {
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
        }
    }

    public struct GetInstancesRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetInstances request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetInstancesResult: AWSShape {

        /// An array of key-value pairs containing information about your instances.
        public let instances: [Instance]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetInstances request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(instances: [Instance]? = nil, nextPageToken: String? = nil) {
            self.instances = instances
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "instances"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetKeyPairRequest: AWSShape {

        /// The name of the key pair for which you are requesting information.
        public let keyPairName: String

        public init(keyPairName: String) {
            self.keyPairName = keyPairName
        }

        public func validate(name: String) throws {
            try validate(self.keyPairName, name:"keyPairName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairName = "keyPairName"
        }
    }

    public struct GetKeyPairResult: AWSShape {

        /// An array of key-value pairs containing information about the key pair.
        public let keyPair: KeyPair?

        public init(keyPair: KeyPair? = nil) {
            self.keyPair = keyPair
        }

        private enum CodingKeys: String, CodingKey {
            case keyPair = "keyPair"
        }
    }

    public struct GetKeyPairsRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetKeyPairs request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetKeyPairsResult: AWSShape {

        /// An array of key-value pairs containing information about the key pairs.
        public let keyPairs: [KeyPair]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetKeyPairs request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(keyPairs: [KeyPair]? = nil, nextPageToken: String? = nil) {
            self.keyPairs = keyPairs
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairs = "keyPairs"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetLoadBalancerMetricDataRequest: AWSShape {

        /// The end time of the period.
        public let endTime: TimeStamp
        /// The name of the load balancer.
        public let loadBalancerName: String
        /// The metric for which you want to return information. Valid load balancer metric names are listed below, along with the most useful statistics to include in your request, and the published unit value.     ClientTLSNegotiationErrorCount  — The number of TLS connections initiated by the client that did not establish a session with the load balancer due to a TLS error generated by the load balancer. Possible causes include a mismatch of ciphers or protocols.  Statistics: The most useful statistic is Sum.  Unit: The published unit is Count.     HealthyHostCount  — The number of target instances that are considered healthy.  Statistics: The most useful statistic are Average, Minimum, and Maximum.  Unit: The published unit is Count.     HTTPCode_Instance_2XX_Count  — The number of HTTP 2XX response codes generated by the target instances. This does not include any response codes generated by the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.  Unit: The published unit is Count.     HTTPCode_Instance_3XX_Count  — The number of HTTP 3XX response codes generated by the target instances. This does not include any response codes generated by the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.  Unit: The published unit is Count.     HTTPCode_Instance_4XX_Count  — The number of HTTP 4XX response codes generated by the target instances. This does not include any response codes generated by the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.  Unit: The published unit is Count.     HTTPCode_Instance_5XX_Count  — The number of HTTP 5XX response codes generated by the target instances. This does not include any response codes generated by the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.  Unit: The published unit is Count.     HTTPCode_LB_4XX_Count  — The number of HTTP 4XX client error codes that originated from the load balancer. Client errors are generated when requests are malformed or incomplete. These requests were not received by the target instance. This count does not include response codes generated by the target instances.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.  Unit: The published unit is Count.     HTTPCode_LB_5XX_Count  — The number of HTTP 5XX server error codes that originated from the load balancer. This does not include any response codes generated by the target instance. This metric is reported if there are no healthy instances attached to the load balancer, or if the request rate exceeds the capacity of the instances (spillover) or the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.  Unit: The published unit is Count.     InstanceResponseTime  — The time elapsed, in seconds, after the request leaves the load balancer until a response from the target instance is received.  Statistics: The most useful statistic is Average.  Unit: The published unit is Seconds.     RejectedConnectionCount  — The number of connections that were rejected because the load balancer had reached its maximum number of connections.  Statistics: The most useful statistic is Sum.  Unit: The published unit is Count.     RequestCount  — The number of requests processed over IPv4. This count includes only the requests with a response generated by a target instance of the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.  Unit: The published unit is Count.     UnhealthyHostCount  — The number of target instances that are considered unhealthy.  Statistics: The most useful statistic are Average, Minimum, and Maximum.  Unit: The published unit is Count.  
        public let metricName: LoadBalancerMetricName
        /// The granularity, in seconds, of the returned data points.
        public let period: Int
        /// The start time of the period.
        public let startTime: TimeStamp
        /// The statistic for the metric. The following statistics are available:    Minimum — The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.    Maximum — The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.    Sum — All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.    Average — The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.    SampleCount — The count, or number, of data points used for the statistical calculation.  
        public let statistics: [MetricStatistic]
        /// The unit for the metric data request. Valid units depend on the metric data being required. For the valid units with each available metric, see the metricName parameter.
        public let unit: MetricUnit

        public init(endTime: TimeStamp, loadBalancerName: String, metricName: LoadBalancerMetricName, period: Int, startTime: TimeStamp, statistics: [MetricStatistic], unit: MetricUnit) {
            self.endTime = endTime
            self.loadBalancerName = loadBalancerName
            self.metricName = metricName
            self.period = period
            self.startTime = startTime
            self.statistics = statistics
            self.unit = unit
        }

        public func validate(name: String) throws {
            try validate(self.loadBalancerName, name:"loadBalancerName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.period, name:"period", parent: name, max: 86400)
            try validate(self.period, name:"period", parent: name, min: 60)
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "endTime"
            case loadBalancerName = "loadBalancerName"
            case metricName = "metricName"
            case period = "period"
            case startTime = "startTime"
            case statistics = "statistics"
            case unit = "unit"
        }
    }

    public struct GetLoadBalancerMetricDataResult: AWSShape {

        /// An array of metric datapoint objects.
        public let metricData: [MetricDatapoint]?
        /// The metric about which you are receiving information. Valid values are listed below, along with the most useful statistics to include in your request.     ClientTLSNegotiationErrorCount  - The number of TLS connections initiated by the client that did not establish a session with the load balancer. Possible causes include a mismatch of ciphers or protocols.  Statistics: The most useful statistic is Sum.     HealthyHostCount  - The number of target instances that are considered healthy.  Statistics: The most useful statistic are Average, Minimum, and Maximum.     UnhealthyHostCount  - The number of target instances that are considered unhealthy.  Statistics: The most useful statistic are Average, Minimum, and Maximum.     HTTPCode_LB_4XX_Count  - The number of HTTP 4XX client error codes that originate from the load balancer. Client errors are generated when requests are malformed or incomplete. These requests have not been received by the target instance. This count does not include any response codes generated by the target instances.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_LB_5XX_Count  - The number of HTTP 5XX server error codes that originate from the load balancer. This count does not include any response codes generated by the target instances.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_Instance_2XX_Count  - The number of HTTP response codes generated by the target instances. This does not include any response codes generated by the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_Instance_3XX_Count  - The number of HTTP response codes generated by the target instances. This does not include any response codes generated by the load balancer.   Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_Instance_4XX_Count  - The number of HTTP response codes generated by the target instances. This does not include any response codes generated by the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_Instance_5XX_Count  - The number of HTTP response codes generated by the target instances. This does not include any response codes generated by the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     InstanceResponseTime  - The time elapsed, in seconds, after the request leaves the load balancer until a response from the target instance is received.  Statistics: The most useful statistic is Average.     RejectedConnectionCount  - The number of connections that were rejected because the load balancer had reached its maximum number of connections.  Statistics: The most useful statistic is Sum.     RequestCount  - The number of requests processed over IPv4. This count includes only the requests with a response generated by a target instance of the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.  
        public let metricName: LoadBalancerMetricName?

        public init(metricData: [MetricDatapoint]? = nil, metricName: LoadBalancerMetricName? = nil) {
            self.metricData = metricData
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case metricData = "metricData"
            case metricName = "metricName"
        }
    }

    public struct GetLoadBalancerRequest: AWSShape {

        /// The name of the load balancer.
        public let loadBalancerName: String

        public init(loadBalancerName: String) {
            self.loadBalancerName = loadBalancerName
        }

        public func validate(name: String) throws {
            try validate(self.loadBalancerName, name:"loadBalancerName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct GetLoadBalancerResult: AWSShape {

        /// An object containing information about your load balancer.
        public let loadBalancer: LoadBalancer?

        public init(loadBalancer: LoadBalancer? = nil) {
            self.loadBalancer = loadBalancer
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancer = "loadBalancer"
        }
    }

    public struct GetLoadBalancerTlsCertificatesRequest: AWSShape {

        /// The name of the load balancer you associated with your SSL/TLS certificate.
        public let loadBalancerName: String

        public init(loadBalancerName: String) {
            self.loadBalancerName = loadBalancerName
        }

        public func validate(name: String) throws {
            try validate(self.loadBalancerName, name:"loadBalancerName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct GetLoadBalancerTlsCertificatesResult: AWSShape {

        /// An array of LoadBalancerTlsCertificate objects describing your SSL/TLS certificates.
        public let tlsCertificates: [LoadBalancerTlsCertificate]?

        public init(tlsCertificates: [LoadBalancerTlsCertificate]? = nil) {
            self.tlsCertificates = tlsCertificates
        }

        private enum CodingKeys: String, CodingKey {
            case tlsCertificates = "tlsCertificates"
        }
    }

    public struct GetLoadBalancersRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetLoadBalancers request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetLoadBalancersResult: AWSShape {

        /// An array of LoadBalancer objects describing your load balancers.
        public let loadBalancers: [LoadBalancer]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetLoadBalancers request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(loadBalancers: [LoadBalancer]? = nil, nextPageToken: String? = nil) {
            self.loadBalancers = loadBalancers
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancers = "loadBalancers"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetOperationRequest: AWSShape {

        /// A GUID used to identify the operation.
        public let operationId: String

        public init(operationId: String) {
            self.operationId = operationId
        }

        public func validate(name: String) throws {
            try validate(self.operationId, name:"operationId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "operationId"
        }
    }

    public struct GetOperationResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct GetOperationsForResourceRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetOperationsForResource request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?
        /// The name of the resource for which you are requesting information.
        public let resourceName: String

        public init(pageToken: String? = nil, resourceName: String) {
            self.pageToken = pageToken
            self.resourceName = resourceName
        }

        public func validate(name: String) throws {
            try validate(self.resourceName, name:"resourceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
            case resourceName = "resourceName"
        }
    }

    public struct GetOperationsForResourceResult: AWSShape {

        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetOperationsForResource request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?
        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(nextPageToken: String? = nil, operations: [Operation]? = nil) {
            self.nextPageToken = nextPageToken
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case operations = "operations"
        }
    }

    public struct GetOperationsRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetOperations request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetOperationsResult: AWSShape {

        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetOperations request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?
        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(nextPageToken: String? = nil, operations: [Operation]? = nil) {
            self.nextPageToken = nextPageToken
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case operations = "operations"
        }
    }

    public struct GetRegionsRequest: AWSShape {

        /// A Boolean value indicating whether to also include Availability Zones in your get regions request. Availability Zones are indicated with a letter: e.g., us-east-2a.
        public let includeAvailabilityZones: Bool?
        /// &gt;A Boolean value indicating whether to also include Availability Zones for databases in your get regions request. Availability Zones are indicated with a letter (e.g., us-east-2a).
        public let includeRelationalDatabaseAvailabilityZones: Bool?

        public init(includeAvailabilityZones: Bool? = nil, includeRelationalDatabaseAvailabilityZones: Bool? = nil) {
            self.includeAvailabilityZones = includeAvailabilityZones
            self.includeRelationalDatabaseAvailabilityZones = includeRelationalDatabaseAvailabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case includeAvailabilityZones = "includeAvailabilityZones"
            case includeRelationalDatabaseAvailabilityZones = "includeRelationalDatabaseAvailabilityZones"
        }
    }

    public struct GetRegionsResult: AWSShape {

        /// An array of key-value pairs containing information about your get regions request.
        public let regions: [Region]?

        public init(regions: [Region]? = nil) {
            self.regions = regions
        }

        private enum CodingKeys: String, CodingKey {
            case regions = "regions"
        }
    }

    public struct GetRelationalDatabaseBlueprintsRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseBlueprints request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetRelationalDatabaseBlueprintsResult: AWSShape {

        /// An object describing the result of your get relational database blueprints request.
        public let blueprints: [RelationalDatabaseBlueprint]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseBlueprints request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(blueprints: [RelationalDatabaseBlueprint]? = nil, nextPageToken: String? = nil) {
            self.blueprints = blueprints
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case blueprints = "blueprints"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetRelationalDatabaseBundlesRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseBundles request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetRelationalDatabaseBundlesResult: AWSShape {

        /// An object describing the result of your get relational database bundles request.
        public let bundles: [RelationalDatabaseBundle]?
        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseBundles request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?

        public init(bundles: [RelationalDatabaseBundle]? = nil, nextPageToken: String? = nil) {
            self.bundles = bundles
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case bundles = "bundles"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetRelationalDatabaseEventsRequest: AWSShape {

        /// The number of minutes in the past from which to retrieve events. For example, to get all events from the past 2 hours, enter 120. Default: 60  The minimum is 1 and the maximum is 14 days (20160 minutes).
        public let durationInMinutes: Int?
        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseEvents request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?
        /// The name of the database from which to get events.
        public let relationalDatabaseName: String

        public init(durationInMinutes: Int? = nil, pageToken: String? = nil, relationalDatabaseName: String) {
            self.durationInMinutes = durationInMinutes
            self.pageToken = pageToken
            self.relationalDatabaseName = relationalDatabaseName
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case durationInMinutes = "durationInMinutes"
            case pageToken = "pageToken"
            case relationalDatabaseName = "relationalDatabaseName"
        }
    }

    public struct GetRelationalDatabaseEventsResult: AWSShape {

        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseEvents request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?
        /// An object describing the result of your get relational database events request.
        public let relationalDatabaseEvents: [RelationalDatabaseEvent]?

        public init(nextPageToken: String? = nil, relationalDatabaseEvents: [RelationalDatabaseEvent]? = nil) {
            self.nextPageToken = nextPageToken
            self.relationalDatabaseEvents = relationalDatabaseEvents
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case relationalDatabaseEvents = "relationalDatabaseEvents"
        }
    }

    public struct GetRelationalDatabaseLogEventsRequest: AWSShape {

        /// The end of the time interval from which to get log events. Constraints:   Specified in Coordinated Universal Time (UTC).   Specified in the Unix time format. For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the end time.  
        public let endTime: TimeStamp?
        /// The name of the log stream. Use the get relational database log streams operation to get a list of available log streams.
        public let logStreamName: String
        /// The token to advance to the next or previous page of results from your request. To get a page token, perform an initial GetRelationalDatabaseLogEvents request. If your results are paginated, the response will return a next forward token and/or next backward token that you can specify as the page token in a subsequent request.
        public let pageToken: String?
        /// The name of your database for which to get log events.
        public let relationalDatabaseName: String
        /// Parameter to specify if the log should start from head or tail. If true is specified, the log event starts from the head of the log. If false is specified, the log event starts from the tail of the log.  For PostgreSQL, the default value of false is the only option available. 
        public let startFromHead: Bool?
        /// The start of the time interval from which to get log events. Constraints:   Specified in Coordinated Universal Time (UTC).   Specified in the Unix time format. For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the start time.  
        public let startTime: TimeStamp?

        public init(endTime: TimeStamp? = nil, logStreamName: String, pageToken: String? = nil, relationalDatabaseName: String, startFromHead: Bool? = nil, startTime: TimeStamp? = nil) {
            self.endTime = endTime
            self.logStreamName = logStreamName
            self.pageToken = pageToken
            self.relationalDatabaseName = relationalDatabaseName
            self.startFromHead = startFromHead
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "endTime"
            case logStreamName = "logStreamName"
            case pageToken = "pageToken"
            case relationalDatabaseName = "relationalDatabaseName"
            case startFromHead = "startFromHead"
            case startTime = "startTime"
        }
    }

    public struct GetRelationalDatabaseLogEventsResult: AWSShape {

        /// A token used for advancing to the previous page of results from your get relational database log events request.
        public let nextBackwardToken: String?
        /// A token used for advancing to the next page of results from your get relational database log events request.
        public let nextForwardToken: String?
        /// An object describing the result of your get relational database log events request.
        public let resourceLogEvents: [LogEvent]?

        public init(nextBackwardToken: String? = nil, nextForwardToken: String? = nil, resourceLogEvents: [LogEvent]? = nil) {
            self.nextBackwardToken = nextBackwardToken
            self.nextForwardToken = nextForwardToken
            self.resourceLogEvents = resourceLogEvents
        }

        private enum CodingKeys: String, CodingKey {
            case nextBackwardToken = "nextBackwardToken"
            case nextForwardToken = "nextForwardToken"
            case resourceLogEvents = "resourceLogEvents"
        }
    }

    public struct GetRelationalDatabaseLogStreamsRequest: AWSShape {

        /// The name of your database for which to get log streams.
        public let relationalDatabaseName: String

        public init(relationalDatabaseName: String) {
            self.relationalDatabaseName = relationalDatabaseName
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case relationalDatabaseName = "relationalDatabaseName"
        }
    }

    public struct GetRelationalDatabaseLogStreamsResult: AWSShape {

        /// An object describing the result of your get relational database log streams request.
        public let logStreams: [String]?

        public init(logStreams: [String]? = nil) {
            self.logStreams = logStreams
        }

        private enum CodingKeys: String, CodingKey {
            case logStreams = "logStreams"
        }
    }

    public struct GetRelationalDatabaseMasterUserPasswordRequest: AWSShape {

        /// The password version to return. Specifying CURRENT or PREVIOUS returns the current or previous passwords respectively. Specifying PENDING returns the newest version of the password that will rotate to CURRENT. After the PENDING password rotates to CURRENT, the PENDING password is no longer available. Default: CURRENT 
        public let passwordVersion: RelationalDatabasePasswordVersion?
        /// The name of your database for which to get the master user password.
        public let relationalDatabaseName: String

        public init(passwordVersion: RelationalDatabasePasswordVersion? = nil, relationalDatabaseName: String) {
            self.passwordVersion = passwordVersion
            self.relationalDatabaseName = relationalDatabaseName
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case passwordVersion = "passwordVersion"
            case relationalDatabaseName = "relationalDatabaseName"
        }
    }

    public struct GetRelationalDatabaseMasterUserPasswordResult: AWSShape {

        /// The timestamp when the specified version of the master user password was created.
        public let createdAt: TimeStamp?
        /// The master user password for the password version specified.
        public let masterUserPassword: String?

        public init(createdAt: TimeStamp? = nil, masterUserPassword: String? = nil) {
            self.createdAt = createdAt
            self.masterUserPassword = masterUserPassword
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case masterUserPassword = "masterUserPassword"
        }
    }

    public struct GetRelationalDatabaseMetricDataRequest: AWSShape {

        /// The end of the time interval from which to get metric data. Constraints:   Specified in Coordinated Universal Time (UTC).   Specified in the Unix time format. For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the end time.  
        public let endTime: TimeStamp
        /// The metric for which you want to return information. Valid relational database metric names are listed below, along with the most useful statistics to include in your request, and the published unit value. All relational database metric data is available in 1-minute (60 seconds) granularity.     CPUUtilization  — The percentage of CPU utilization currently in use on the database.  Statistics: The most useful statistics are Maximum and Average.  Unit: The published unit is Percent.     DatabaseConnections  — The number of database connections in use.  Statistics: The most useful statistics are Maximum and Sum.  Unit: The published unit is Count.     DiskQueueDepth  — The number of outstanding IOs (read/write requests) that are waiting to access the disk.  Statistics: The most useful statistic is Sum.  Unit: The published unit is Count.     FreeStorageSpace  — The amount of available storage space.  Statistics: The most useful statistic is Sum.  Unit: The published unit is Bytes.     NetworkReceiveThroughput  — The incoming (Receive) network traffic on the database, including both customer database traffic and AWS traffic used for monitoring and replication.  Statistics: The most useful statistic is Average.  Unit: The published unit is Bytes/Second.     NetworkTransmitThroughput  — The outgoing (Transmit) network traffic on the database, including both customer database traffic and AWS traffic used for monitoring and replication.  Statistics: The most useful statistic is Average.  Unit: The published unit is Bytes/Second.  
        public let metricName: RelationalDatabaseMetricName
        /// The granularity, in seconds, of the returned data points. All relational database metric data is available in 1-minute (60 seconds) granularity.
        public let period: Int
        /// The name of your database from which to get metric data.
        public let relationalDatabaseName: String
        /// The start of the time interval from which to get metric data. Constraints:   Specified in Coordinated Universal Time (UTC).   Specified in the Unix time format. For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you input 1538424000 as the start time.  
        public let startTime: TimeStamp
        /// The statistic for the metric. The following statistics are available:    Minimum — The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.    Maximum — The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.    Sum — All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.    Average — The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.    SampleCount — The count, or number, of data points used for the statistical calculation.  
        public let statistics: [MetricStatistic]
        /// The unit for the metric data request. Valid units depend on the metric data being required. For the valid units with each available metric, see the metricName parameter.
        public let unit: MetricUnit

        public init(endTime: TimeStamp, metricName: RelationalDatabaseMetricName, period: Int, relationalDatabaseName: String, startTime: TimeStamp, statistics: [MetricStatistic], unit: MetricUnit) {
            self.endTime = endTime
            self.metricName = metricName
            self.period = period
            self.relationalDatabaseName = relationalDatabaseName
            self.startTime = startTime
            self.statistics = statistics
            self.unit = unit
        }

        public func validate(name: String) throws {
            try validate(self.period, name:"period", parent: name, max: 86400)
            try validate(self.period, name:"period", parent: name, min: 60)
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "endTime"
            case metricName = "metricName"
            case period = "period"
            case relationalDatabaseName = "relationalDatabaseName"
            case startTime = "startTime"
            case statistics = "statistics"
            case unit = "unit"
        }
    }

    public struct GetRelationalDatabaseMetricDataResult: AWSShape {

        /// An object describing the result of your get relational database metric data request.
        public let metricData: [MetricDatapoint]?
        /// The name of the metric.
        public let metricName: RelationalDatabaseMetricName?

        public init(metricData: [MetricDatapoint]? = nil, metricName: RelationalDatabaseMetricName? = nil) {
            self.metricData = metricData
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case metricData = "metricData"
            case metricName = "metricName"
        }
    }

    public struct GetRelationalDatabaseParametersRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseParameters request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?
        /// The name of your database for which to get parameters.
        public let relationalDatabaseName: String

        public init(pageToken: String? = nil, relationalDatabaseName: String) {
            self.pageToken = pageToken
            self.relationalDatabaseName = relationalDatabaseName
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
            case relationalDatabaseName = "relationalDatabaseName"
        }
    }

    public struct GetRelationalDatabaseParametersResult: AWSShape {

        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseParameters request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?
        /// An object describing the result of your get relational database parameters request.
        public let parameters: [RelationalDatabaseParameter]?

        public init(nextPageToken: String? = nil, parameters: [RelationalDatabaseParameter]? = nil) {
            self.nextPageToken = nextPageToken
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case parameters = "parameters"
        }
    }

    public struct GetRelationalDatabaseRequest: AWSShape {

        /// The name of the database that you are looking up.
        public let relationalDatabaseName: String

        public init(relationalDatabaseName: String) {
            self.relationalDatabaseName = relationalDatabaseName
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case relationalDatabaseName = "relationalDatabaseName"
        }
    }

    public struct GetRelationalDatabaseResult: AWSShape {

        /// An object describing the specified database.
        public let relationalDatabase: RelationalDatabase?

        public init(relationalDatabase: RelationalDatabase? = nil) {
            self.relationalDatabase = relationalDatabase
        }

        private enum CodingKeys: String, CodingKey {
            case relationalDatabase = "relationalDatabase"
        }
    }

    public struct GetRelationalDatabaseSnapshotRequest: AWSShape {

        /// The name of the database snapshot for which to get information.
        public let relationalDatabaseSnapshotName: String

        public init(relationalDatabaseSnapshotName: String) {
            self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseSnapshotName, name:"relationalDatabaseSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case relationalDatabaseSnapshotName = "relationalDatabaseSnapshotName"
        }
    }

    public struct GetRelationalDatabaseSnapshotResult: AWSShape {

        /// An object describing the specified database snapshot.
        public let relationalDatabaseSnapshot: RelationalDatabaseSnapshot?

        public init(relationalDatabaseSnapshot: RelationalDatabaseSnapshot? = nil) {
            self.relationalDatabaseSnapshot = relationalDatabaseSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case relationalDatabaseSnapshot = "relationalDatabaseSnapshot"
        }
    }

    public struct GetRelationalDatabaseSnapshotsRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabaseSnapshots request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetRelationalDatabaseSnapshotsResult: AWSShape {

        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabaseSnapshots request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?
        /// An object describing the result of your get relational database snapshots request.
        public let relationalDatabaseSnapshots: [RelationalDatabaseSnapshot]?

        public init(nextPageToken: String? = nil, relationalDatabaseSnapshots: [RelationalDatabaseSnapshot]? = nil) {
            self.nextPageToken = nextPageToken
            self.relationalDatabaseSnapshots = relationalDatabaseSnapshots
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case relationalDatabaseSnapshots = "relationalDatabaseSnapshots"
        }
    }

    public struct GetRelationalDatabasesRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetRelationalDatabases request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetRelationalDatabasesResult: AWSShape {

        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetRelationalDatabases request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?
        /// An object describing the result of your get relational databases request.
        public let relationalDatabases: [RelationalDatabase]?

        public init(nextPageToken: String? = nil, relationalDatabases: [RelationalDatabase]? = nil) {
            self.nextPageToken = nextPageToken
            self.relationalDatabases = relationalDatabases
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case relationalDatabases = "relationalDatabases"
        }
    }

    public struct GetStaticIpRequest: AWSShape {

        /// The name of the static IP in Lightsail.
        public let staticIpName: String

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

        public func validate(name: String) throws {
            try validate(self.staticIpName, name:"staticIpName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
        }
    }

    public struct GetStaticIpResult: AWSShape {

        /// An array of key-value pairs containing information about the requested static IP.
        public let staticIp: StaticIp?

        public init(staticIp: StaticIp? = nil) {
            self.staticIp = staticIp
        }

        private enum CodingKeys: String, CodingKey {
            case staticIp = "staticIp"
        }
    }

    public struct GetStaticIpsRequest: AWSShape {

        /// The token to advance to the next page of results from your request. To get a page token, perform an initial GetStaticIps request. If your results are paginated, the response will return a next page token that you can specify as the page token in a subsequent request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetStaticIpsResult: AWSShape {

        /// The token to advance to the next page of resutls from your request. A next page token is not returned if there are no more results to display. To get the next page of results, perform another GetStaticIps request and specify the next page token using the pageToken parameter.
        public let nextPageToken: String?
        /// An array of key-value pairs containing information about your get static IPs request.
        public let staticIps: [StaticIp]?

        public init(nextPageToken: String? = nil, staticIps: [StaticIp]? = nil) {
            self.nextPageToken = nextPageToken
            self.staticIps = staticIps
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case staticIps = "staticIps"
        }
    }

    public struct HostKeyAttributes: AWSShape {

        /// The SSH host key algorithm or the RDP certificate format. For SSH host keys, the algorithm may be ssh-rsa, ecdsa-sha2-nistp256, ssh-ed25519, etc. For RDP certificates, the algorithm is always x509-cert.
        public let algorithm: String?
        /// The SHA-1 fingerprint of the returned SSH host key or RDP certificate.   Example of an SHA-1 SSH fingerprint:  SHA1:1CHH6FaAaXjtFOsR/t83vf91SR0    Example of an SHA-1 RDP fingerprint:  af:34:51:fe:09:f0:e0:da:b8:4e:56:ca:60:c2:10:ff:38:06:db:45   
        public let fingerprintSHA1: String?
        /// The SHA-256 fingerprint of the returned SSH host key or RDP certificate.   Example of an SHA-256 SSH fingerprint:  SHA256:KTsMnRBh1IhD17HpdfsbzeGA4jOijm5tyXsMjKVbB8o    Example of an SHA-256 RDP fingerprint:  03:9b:36:9f:4b:de:4e:61:70:fc:7c:c9:78:e7:d2:1a:1c:25:a8:0c:91:f6:7c:e4:d6:a0:85:c8:b4:53:99:68   
        public let fingerprintSHA256: String?
        /// The returned RDP certificate is not valid after this point in time. This value is listed only for RDP certificates.
        public let notValidAfter: TimeStamp?
        /// The returned RDP certificate is valid after this point in time. This value is listed only for RDP certificates.
        public let notValidBefore: TimeStamp?
        /// The public SSH host key or the RDP certificate.
        public let publicKey: String?
        /// The time that the SSH host key or RDP certificate was recorded by Lightsail.
        public let witnessedAt: TimeStamp?

        public init(algorithm: String? = nil, fingerprintSHA1: String? = nil, fingerprintSHA256: String? = nil, notValidAfter: TimeStamp? = nil, notValidBefore: TimeStamp? = nil, publicKey: String? = nil, witnessedAt: TimeStamp? = nil) {
            self.algorithm = algorithm
            self.fingerprintSHA1 = fingerprintSHA1
            self.fingerprintSHA256 = fingerprintSHA256
            self.notValidAfter = notValidAfter
            self.notValidBefore = notValidBefore
            self.publicKey = publicKey
            self.witnessedAt = witnessedAt
        }

        private enum CodingKeys: String, CodingKey {
            case algorithm = "algorithm"
            case fingerprintSHA1 = "fingerprintSHA1"
            case fingerprintSHA256 = "fingerprintSHA256"
            case notValidAfter = "notValidAfter"
            case notValidBefore = "notValidBefore"
            case publicKey = "publicKey"
            case witnessedAt = "witnessedAt"
        }
    }

    public struct ImportKeyPairRequest: AWSShape {

        /// The name of the key pair for which you want to import the public key.
        public let keyPairName: String
        /// A base64-encoded public key of the ssh-rsa type.
        public let publicKeyBase64: String

        public init(keyPairName: String, publicKeyBase64: String) {
            self.keyPairName = keyPairName
            self.publicKeyBase64 = publicKeyBase64
        }

        public func validate(name: String) throws {
            try validate(self.keyPairName, name:"keyPairName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairName = "keyPairName"
            case publicKeyBase64 = "publicKeyBase64"
        }
    }

    public struct ImportKeyPairResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct Instance: AWSShape {

        /// An array of objects representing the add-ons enabled on the instance.
        public let addOns: [AddOn]?
        /// The Amazon Resource Name (ARN) of the instance (e.g., arn:aws:lightsail:us-east-2:123456789101:Instance/244ad76f-8aad-4741-809f-12345EXAMPLE).
        public let arn: String?
        /// The blueprint ID (e.g., os_amlinux_2016_03).
        public let blueprintId: String?
        /// The friendly name of the blueprint (e.g., Amazon Linux).
        public let blueprintName: String?
        /// The bundle for the instance (e.g., micro_1_0).
        public let bundleId: String?
        /// The timestamp when the instance was created (e.g., 1479734909.17).
        public let createdAt: TimeStamp?
        /// The size of the vCPU and the amount of RAM for the instance.
        public let hardware: InstanceHardware?
        /// The IPv6 address of the instance.
        public let ipv6Address: String?
        /// A Boolean value indicating whether this instance has a static IP assigned to it.
        public let isStaticIp: Bool?
        /// The region name and Availability Zone where the instance is located.
        public let location: ResourceLocation?
        /// The name the user gave the instance (e.g., Amazon_Linux-1GB-Ohio-1).
        public let name: String?
        /// Information about the public ports and monthly data transfer rates for the instance.
        public let networking: InstanceNetworking?
        /// The private IP address of the instance.
        public let privateIpAddress: String?
        /// The public IP address of the instance.
        public let publicIpAddress: String?
        /// The type of resource (usually Instance).
        public let resourceType: ResourceType?
        /// The name of the SSH key being used to connect to the instance (e.g., LightsailDefaultKeyPair).
        public let sshKeyName: String?
        /// The status code and the state (e.g., running) for the instance.
        public let state: InstanceState?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the Lightsail Dev Guide.
        public let tags: [Tag]?
        /// The user name for connecting to the instance (e.g., ec2-user).
        public let username: String?

        public init(addOns: [AddOn]? = nil, arn: String? = nil, blueprintId: String? = nil, blueprintName: String? = nil, bundleId: String? = nil, createdAt: TimeStamp? = nil, hardware: InstanceHardware? = nil, ipv6Address: String? = nil, isStaticIp: Bool? = nil, location: ResourceLocation? = nil, name: String? = nil, networking: InstanceNetworking? = nil, privateIpAddress: String? = nil, publicIpAddress: String? = nil, resourceType: ResourceType? = nil, sshKeyName: String? = nil, state: InstanceState? = nil, supportCode: String? = nil, tags: [Tag]? = nil, username: String? = nil) {
            self.addOns = addOns
            self.arn = arn
            self.blueprintId = blueprintId
            self.blueprintName = blueprintName
            self.bundleId = bundleId
            self.createdAt = createdAt
            self.hardware = hardware
            self.ipv6Address = ipv6Address
            self.isStaticIp = isStaticIp
            self.location = location
            self.name = name
            self.networking = networking
            self.privateIpAddress = privateIpAddress
            self.publicIpAddress = publicIpAddress
            self.resourceType = resourceType
            self.sshKeyName = sshKeyName
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case addOns = "addOns"
            case arn = "arn"
            case blueprintId = "blueprintId"
            case blueprintName = "blueprintName"
            case bundleId = "bundleId"
            case createdAt = "createdAt"
            case hardware = "hardware"
            case ipv6Address = "ipv6Address"
            case isStaticIp = "isStaticIp"
            case location = "location"
            case name = "name"
            case networking = "networking"
            case privateIpAddress = "privateIpAddress"
            case publicIpAddress = "publicIpAddress"
            case resourceType = "resourceType"
            case sshKeyName = "sshKeyName"
            case state = "state"
            case supportCode = "supportCode"
            case tags = "tags"
            case username = "username"
        }
    }

    public struct InstanceAccessDetails: AWSShape {

        /// For SSH access, the public key to use when accessing your instance For OpenSSH clients (e.g., command line SSH), you should save this value to tempkey-cert.pub.
        public let certKey: String?
        /// For SSH access, the date on which the temporary keys expire.
        public let expiresAt: TimeStamp?
        /// Describes the public SSH host keys or the RDP certificate.
        public let hostKeys: [HostKeyAttributes]?
        /// The name of this Amazon Lightsail instance.
        public let instanceName: String?
        /// The public IP address of the Amazon Lightsail instance.
        public let ipAddress: String?
        /// For RDP access, the password for your Amazon Lightsail instance. Password will be an empty string if the password for your new instance is not ready yet. When you create an instance, it can take up to 15 minutes for the instance to be ready.  If you create an instance using any key pair other than the default (LightsailDefaultKeyPair), password will always be an empty string. If you change the Administrator password on the instance, Lightsail will continue to return the original password value. When accessing the instance using RDP, you need to manually enter the Administrator password after changing it from the default. 
        public let password: String?
        /// For a Windows Server-based instance, an object with the data you can use to retrieve your password. This is only needed if password is empty and the instance is not new (and therefore the password is not ready yet). When you create an instance, it can take up to 15 minutes for the instance to be ready.
        public let passwordData: PasswordData?
        /// For SSH access, the temporary private key. For OpenSSH clients (e.g., command line SSH), you should save this value to tempkey).
        public let privateKey: String?
        /// The protocol for these Amazon Lightsail instance access details.
        public let `protocol`: InstanceAccessProtocol?
        /// The user name to use when logging in to the Amazon Lightsail instance.
        public let username: String?

        public init(certKey: String? = nil, expiresAt: TimeStamp? = nil, hostKeys: [HostKeyAttributes]? = nil, instanceName: String? = nil, ipAddress: String? = nil, password: String? = nil, passwordData: PasswordData? = nil, privateKey: String? = nil, protocol: InstanceAccessProtocol? = nil, username: String? = nil) {
            self.certKey = certKey
            self.expiresAt = expiresAt
            self.hostKeys = hostKeys
            self.instanceName = instanceName
            self.ipAddress = ipAddress
            self.password = password
            self.passwordData = passwordData
            self.privateKey = privateKey
            self.`protocol` = `protocol`
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case certKey = "certKey"
            case expiresAt = "expiresAt"
            case hostKeys = "hostKeys"
            case instanceName = "instanceName"
            case ipAddress = "ipAddress"
            case password = "password"
            case passwordData = "passwordData"
            case privateKey = "privateKey"
            case `protocol` = "protocol"
            case username = "username"
        }
    }

    public struct InstanceEntry: AWSShape {

        /// The Availability Zone for the new Amazon EC2 instance.
        public let availabilityZone: String
        /// The instance type (e.g., t2.micro) to use for the new Amazon EC2 instance.
        public let instanceType: String
        /// The port configuration to use for the new Amazon EC2 instance. The following configuration options are available:   DEFAULT — Use the default firewall settings from the image.   INSTANCE — Use the firewall settings from the source Lightsail instance.   NONE — Default to Amazon EC2.   CLOSED — All ports closed.  
        public let portInfoSource: PortInfoSourceType
        /// The name of the export snapshot record, which contains the exported Lightsail instance snapshot that will be used as the source of the new Amazon EC2 instance. Use the get export snapshot records operation to get a list of export snapshot records that you can use to create a CloudFormation stack.
        public let sourceName: String
        /// A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update.  Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg. 
        public let userData: String?

        public init(availabilityZone: String, instanceType: String, portInfoSource: PortInfoSourceType, sourceName: String, userData: String? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.portInfoSource = portInfoSource
            self.sourceName = sourceName
            self.userData = userData
        }

        public func validate(name: String) throws {
            try validate(self.instanceType, name:"instanceType", parent: name, pattern: ".*\\S.*")
            try validate(self.sourceName, name:"sourceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case instanceType = "instanceType"
            case portInfoSource = "portInfoSource"
            case sourceName = "sourceName"
            case userData = "userData"
        }
    }

    public struct InstanceHardware: AWSShape {

        /// The number of vCPUs the instance has.
        public let cpuCount: Int?
        /// The disks attached to the instance.
        public let disks: [Disk]?
        /// The amount of RAM in GB on the instance (e.g., 1.0).
        public let ramSizeInGb: Float?

        public init(cpuCount: Int? = nil, disks: [Disk]? = nil, ramSizeInGb: Float? = nil) {
            self.cpuCount = cpuCount
            self.disks = disks
            self.ramSizeInGb = ramSizeInGb
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCount = "cpuCount"
            case disks = "disks"
            case ramSizeInGb = "ramSizeInGb"
        }
    }

    public struct InstanceHealthSummary: AWSShape {

        /// Describes the overall instance health. Valid values are below.
        public let instanceHealth: InstanceHealthState?
        /// More information about the instance health. If the instanceHealth is healthy, then an instanceHealthReason value is not provided. If  instanceHealth  is initial, the  instanceHealthReason  value can be one of the following:     Lb.RegistrationInProgress  - The target instance is in the process of being registered with the load balancer.     Lb.InitialHealthChecking  - The Lightsail load balancer is still sending the target instance the minimum number of health checks required to determine its health status.   If  instanceHealth  is unhealthy, the  instanceHealthReason  value can be one of the following:     Instance.ResponseCodeMismatch  - The health checks did not return an expected HTTP code.     Instance.Timeout  - The health check requests timed out.     Instance.FailedHealthChecks  - The health checks failed because the connection to the target instance timed out, the target instance response was malformed, or the target instance failed the health check for an unknown reason.     Lb.InternalError  - The health checks failed due to an internal error.   If  instanceHealth  is unused, the  instanceHealthReason  value can be one of the following:     Instance.NotRegistered  - The target instance is not registered with the target group.     Instance.NotInUse  - The target group is not used by any load balancer, or the target instance is in an Availability Zone that is not enabled for its load balancer.     Instance.IpUnusable  - The target IP address is reserved for use by a Lightsail load balancer.     Instance.InvalidState  - The target is in the stopped or terminated state.   If  instanceHealth  is draining, the  instanceHealthReason  value can be one of the following:     Instance.DeregistrationInProgress  - The target instance is in the process of being deregistered and the deregistration delay period has not expired.  
        public let instanceHealthReason: InstanceHealthReason?
        /// The name of the Lightsail instance for which you are requesting health check data.
        public let instanceName: String?

        public init(instanceHealth: InstanceHealthState? = nil, instanceHealthReason: InstanceHealthReason? = nil, instanceName: String? = nil) {
            self.instanceHealth = instanceHealth
            self.instanceHealthReason = instanceHealthReason
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceHealth = "instanceHealth"
            case instanceHealthReason = "instanceHealthReason"
            case instanceName = "instanceName"
        }
    }

    public struct InstanceNetworking: AWSShape {

        /// The amount of data in GB allocated for monthly data transfers.
        public let monthlyTransfer: MonthlyTransfer?
        /// An array of key-value pairs containing information about the ports on the instance.
        public let ports: [InstancePortInfo]?

        public init(monthlyTransfer: MonthlyTransfer? = nil, ports: [InstancePortInfo]? = nil) {
            self.monthlyTransfer = monthlyTransfer
            self.ports = ports
        }

        private enum CodingKeys: String, CodingKey {
            case monthlyTransfer = "monthlyTransfer"
            case ports = "ports"
        }
    }

    public struct InstancePortInfo: AWSShape {

        /// The access direction (inbound or outbound).
        public let accessDirection: AccessDirection?
        /// The location from which access is allowed (e.g., Anywhere (0.0.0.0/0)).
        public let accessFrom: String?
        /// The type of access (Public or Private).
        public let accessType: PortAccessType?
        /// The common name.
        public let commonName: String?
        /// The first port in the range.
        public let fromPort: Int?
        /// The protocol being used. Can be one of the following.    tcp - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.    all - All transport layer protocol types. For more general information, see Transport layer on Wikipedia.    udp - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.  
        public let `protocol`: NetworkProtocol?
        /// The last port in the range.
        public let toPort: Int?

        public init(accessDirection: AccessDirection? = nil, accessFrom: String? = nil, accessType: PortAccessType? = nil, commonName: String? = nil, fromPort: Int? = nil, protocol: NetworkProtocol? = nil, toPort: Int? = nil) {
            self.accessDirection = accessDirection
            self.accessFrom = accessFrom
            self.accessType = accessType
            self.commonName = commonName
            self.fromPort = fromPort
            self.`protocol` = `protocol`
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case accessDirection = "accessDirection"
            case accessFrom = "accessFrom"
            case accessType = "accessType"
            case commonName = "commonName"
            case fromPort = "fromPort"
            case `protocol` = "protocol"
            case toPort = "toPort"
        }
    }

    public struct InstancePortState: AWSShape {

        /// The first port in the range.
        public let fromPort: Int?
        /// The protocol being used. Can be one of the following.    tcp - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.    all - All transport layer protocol types. For more general information, see Transport layer on Wikipedia.    udp - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.  
        public let `protocol`: NetworkProtocol?
        /// Specifies whether the instance port is open or closed.
        public let state: PortState?
        /// The last port in the range.
        public let toPort: Int?

        public init(fromPort: Int? = nil, protocol: NetworkProtocol? = nil, state: PortState? = nil, toPort: Int? = nil) {
            self.fromPort = fromPort
            self.`protocol` = `protocol`
            self.state = state
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "fromPort"
            case `protocol` = "protocol"
            case state = "state"
            case toPort = "toPort"
        }
    }

    public struct InstanceSnapshot: AWSShape {

        /// The Amazon Resource Name (ARN) of the snapshot (e.g., arn:aws:lightsail:us-east-2:123456789101:InstanceSnapshot/d23b5706-3322-4d83-81e5-12345EXAMPLE).
        public let arn: String?
        /// The timestamp when the snapshot was created (e.g., 1479907467.024).
        public let createdAt: TimeStamp?
        /// An array of disk objects containing information about all block storage disks.
        public let fromAttachedDisks: [Disk]?
        /// The blueprint ID from which you created the snapshot (e.g., os_debian_8_3). A blueprint is a virtual private server (or instance) image used to create instances quickly.
        public let fromBlueprintId: String?
        /// The bundle ID from which you created the snapshot (e.g., micro_1_0).
        public let fromBundleId: String?
        /// The Amazon Resource Name (ARN) of the instance from which the snapshot was created (e.g., arn:aws:lightsail:us-east-2:123456789101:Instance/64b8404c-ccb1-430b-8daf-12345EXAMPLE).
        public let fromInstanceArn: String?
        /// The instance from which the snapshot was created.
        public let fromInstanceName: String?
        /// A Boolean value indicating whether the snapshot was created from an automatic snapshot.
        public let isFromAutoSnapshot: Bool?
        /// The region name and Availability Zone where you created the snapshot.
        public let location: ResourceLocation?
        /// The name of the snapshot.
        public let name: String?
        /// The progress of the snapshot.
        public let progress: String?
        /// The type of resource (usually InstanceSnapshot).
        public let resourceType: ResourceType?
        /// The size in GB of the SSD.
        public let sizeInGb: Int?
        /// The state the snapshot is in.
        public let state: InstanceSnapshotState?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the Lightsail Dev Guide.
        public let tags: [Tag]?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, fromAttachedDisks: [Disk]? = nil, fromBlueprintId: String? = nil, fromBundleId: String? = nil, fromInstanceArn: String? = nil, fromInstanceName: String? = nil, isFromAutoSnapshot: Bool? = nil, location: ResourceLocation? = nil, name: String? = nil, progress: String? = nil, resourceType: ResourceType? = nil, sizeInGb: Int? = nil, state: InstanceSnapshotState? = nil, supportCode: String? = nil, tags: [Tag]? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.fromAttachedDisks = fromAttachedDisks
            self.fromBlueprintId = fromBlueprintId
            self.fromBundleId = fromBundleId
            self.fromInstanceArn = fromInstanceArn
            self.fromInstanceName = fromInstanceName
            self.isFromAutoSnapshot = isFromAutoSnapshot
            self.location = location
            self.name = name
            self.progress = progress
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case fromAttachedDisks = "fromAttachedDisks"
            case fromBlueprintId = "fromBlueprintId"
            case fromBundleId = "fromBundleId"
            case fromInstanceArn = "fromInstanceArn"
            case fromInstanceName = "fromInstanceName"
            case isFromAutoSnapshot = "isFromAutoSnapshot"
            case location = "location"
            case name = "name"
            case progress = "progress"
            case resourceType = "resourceType"
            case sizeInGb = "sizeInGb"
            case state = "state"
            case supportCode = "supportCode"
            case tags = "tags"
        }
    }

    public struct InstanceSnapshotInfo: AWSShape {

        /// The blueprint ID from which the source instance (e.g., os_debian_8_3).
        public let fromBlueprintId: String?
        /// The bundle ID from which the source instance was created (e.g., micro_1_0).
        public let fromBundleId: String?
        /// A list of objects describing the disks that were attached to the source instance.
        public let fromDiskInfo: [DiskInfo]?

        public init(fromBlueprintId: String? = nil, fromBundleId: String? = nil, fromDiskInfo: [DiskInfo]? = nil) {
            self.fromBlueprintId = fromBlueprintId
            self.fromBundleId = fromBundleId
            self.fromDiskInfo = fromDiskInfo
        }

        private enum CodingKeys: String, CodingKey {
            case fromBlueprintId = "fromBlueprintId"
            case fromBundleId = "fromBundleId"
            case fromDiskInfo = "fromDiskInfo"
        }
    }

    public struct InstanceState: AWSShape {

        /// The status code for the instance.
        public let code: Int?
        /// The state of the instance (e.g., running or pending).
        public let name: String?

        public init(code: Int? = nil, name: String? = nil) {
            self.code = code
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case name = "name"
        }
    }

    public struct IsVpcPeeredRequest: AWSShape {


        public init() {
        }

    }

    public struct IsVpcPeeredResult: AWSShape {

        /// Returns true if the Lightsail VPC is peered; otherwise, false.
        public let isPeered: Bool?

        public init(isPeered: Bool? = nil) {
            self.isPeered = isPeered
        }

        private enum CodingKeys: String, CodingKey {
            case isPeered = "isPeered"
        }
    }

    public struct KeyPair: AWSShape {

        /// The Amazon Resource Name (ARN) of the key pair (e.g., arn:aws:lightsail:us-east-2:123456789101:KeyPair/05859e3d-331d-48ba-9034-12345EXAMPLE).
        public let arn: String?
        /// The timestamp when the key pair was created (e.g., 1479816991.349).
        public let createdAt: TimeStamp?
        /// The RSA fingerprint of the key pair.
        public let fingerprint: String?
        /// The region name and Availability Zone where the key pair was created.
        public let location: ResourceLocation?
        /// The friendly name of the SSH key pair.
        public let name: String?
        /// The resource type (usually KeyPair).
        public let resourceType: ResourceType?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the Lightsail Dev Guide.
        public let tags: [Tag]?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, fingerprint: String? = nil, location: ResourceLocation? = nil, name: String? = nil, resourceType: ResourceType? = nil, supportCode: String? = nil, tags: [Tag]? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.fingerprint = fingerprint
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.supportCode = supportCode
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case fingerprint = "fingerprint"
            case location = "location"
            case name = "name"
            case resourceType = "resourceType"
            case supportCode = "supportCode"
            case tags = "tags"
        }
    }

    public struct LoadBalancer: AWSShape {

        /// The Amazon Resource Name (ARN) of the load balancer.
        public let arn: String?
        /// A string to string map of the configuration options for your load balancer. Valid values are listed below.
        public let configurationOptions: [LoadBalancerAttributeName: String]?
        /// The date when your load balancer was created.
        public let createdAt: TimeStamp?
        /// The DNS name of your Lightsail load balancer.
        public let dnsName: String?
        /// The path you specified to perform your health checks. If no path is specified, the load balancer tries to make a request to the default (root) page.
        public let healthCheckPath: String?
        /// An array of InstanceHealthSummary objects describing the health of the load balancer.
        public let instanceHealthSummary: [InstanceHealthSummary]?
        /// The port where the load balancer will direct traffic to your Lightsail instances. For HTTP traffic, it's port 80. For HTTPS traffic, it's port 443.
        public let instancePort: Int?
        /// The AWS Region where your load balancer was created (e.g., us-east-2a). Lightsail automatically creates your load balancer across Availability Zones.
        public let location: ResourceLocation?
        /// The name of the load balancer (e.g., my-load-balancer).
        public let name: String?
        /// The protocol you have enabled for your load balancer. Valid values are below. You can't just have HTTP_HTTPS, but you can have just HTTP.
        public let `protocol`: LoadBalancerProtocol?
        /// An array of public port settings for your load balancer. For HTTP, use port 80. For HTTPS, use port 443.
        public let publicPorts: [Int]?
        /// The resource type (e.g., LoadBalancer.
        public let resourceType: ResourceType?
        /// The status of your load balancer. Valid values are below.
        public let state: LoadBalancerState?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail load balancer. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the Lightsail Dev Guide.
        public let tags: [Tag]?
        /// An array of LoadBalancerTlsCertificateSummary objects that provide additional information about the SSL/TLS certificates. For example, if true, the certificate is attached to the load balancer.
        public let tlsCertificateSummaries: [LoadBalancerTlsCertificateSummary]?

        public init(arn: String? = nil, configurationOptions: [LoadBalancerAttributeName: String]? = nil, createdAt: TimeStamp? = nil, dnsName: String? = nil, healthCheckPath: String? = nil, instanceHealthSummary: [InstanceHealthSummary]? = nil, instancePort: Int? = nil, location: ResourceLocation? = nil, name: String? = nil, protocol: LoadBalancerProtocol? = nil, publicPorts: [Int]? = nil, resourceType: ResourceType? = nil, state: LoadBalancerState? = nil, supportCode: String? = nil, tags: [Tag]? = nil, tlsCertificateSummaries: [LoadBalancerTlsCertificateSummary]? = nil) {
            self.arn = arn
            self.configurationOptions = configurationOptions
            self.createdAt = createdAt
            self.dnsName = dnsName
            self.healthCheckPath = healthCheckPath
            self.instanceHealthSummary = instanceHealthSummary
            self.instancePort = instancePort
            self.location = location
            self.name = name
            self.`protocol` = `protocol`
            self.publicPorts = publicPorts
            self.resourceType = resourceType
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
            self.tlsCertificateSummaries = tlsCertificateSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case configurationOptions = "configurationOptions"
            case createdAt = "createdAt"
            case dnsName = "dnsName"
            case healthCheckPath = "healthCheckPath"
            case instanceHealthSummary = "instanceHealthSummary"
            case instancePort = "instancePort"
            case location = "location"
            case name = "name"
            case `protocol` = "protocol"
            case publicPorts = "publicPorts"
            case resourceType = "resourceType"
            case state = "state"
            case supportCode = "supportCode"
            case tags = "tags"
            case tlsCertificateSummaries = "tlsCertificateSummaries"
        }
    }

    public struct LoadBalancerTlsCertificate: AWSShape {

        /// The Amazon Resource Name (ARN) of the SSL/TLS certificate.
        public let arn: String?
        /// The time when you created your SSL/TLS certificate.
        public let createdAt: TimeStamp?
        /// The domain name for your SSL/TLS certificate.
        public let domainName: String?
        /// An array of LoadBalancerTlsCertificateDomainValidationRecord objects describing the records.
        public let domainValidationRecords: [LoadBalancerTlsCertificateDomainValidationRecord]?
        /// The reason for the SSL/TLS certificate validation failure.
        public let failureReason: LoadBalancerTlsCertificateFailureReason?
        /// When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
        public let isAttached: Bool?
        /// The time when the SSL/TLS certificate was issued.
        public let issuedAt: TimeStamp?
        /// The issuer of the certificate.
        public let issuer: String?
        /// The algorithm that was used to generate the key pair (the public and private key).
        public let keyAlgorithm: String?
        /// The load balancer name where your SSL/TLS certificate is attached.
        public let loadBalancerName: String?
        /// The AWS Region and Availability Zone where you created your certificate.
        public let location: ResourceLocation?
        /// The name of the SSL/TLS certificate (e.g., my-certificate).
        public let name: String?
        /// The timestamp when the SSL/TLS certificate expires.
        public let notAfter: TimeStamp?
        /// The timestamp when the SSL/TLS certificate is first valid.
        public let notBefore: TimeStamp?
        /// An object containing information about the status of Lightsail's managed renewal for the certificate.
        public let renewalSummary: LoadBalancerTlsCertificateRenewalSummary?
        /// The resource type (e.g., LoadBalancerTlsCertificate).     Instance  - A Lightsail instance (a virtual private server)     StaticIp  - A static IP address     KeyPair  - The key pair used to connect to a Lightsail instance     InstanceSnapshot  - A Lightsail instance snapshot     Domain  - A DNS zone     PeeredVpc  - A peered VPC     LoadBalancer  - A Lightsail load balancer     LoadBalancerTlsCertificate  - An SSL/TLS certificate associated with a Lightsail load balancer     Disk  - A Lightsail block storage disk     DiskSnapshot  - A block storage disk snapshot  
        public let resourceType: ResourceType?
        /// The reason the certificate was revoked. Valid values are below.
        public let revocationReason: LoadBalancerTlsCertificateRevocationReason?
        /// The timestamp when the SSL/TLS certificate was revoked.
        public let revokedAt: TimeStamp?
        /// The serial number of the certificate.
        public let serial: String?
        /// The algorithm that was used to sign the certificate.
        public let signatureAlgorithm: String?
        /// The status of the SSL/TLS certificate. Valid values are below.
        public let status: LoadBalancerTlsCertificateStatus?
        /// The name of the entity that is associated with the public key contained in the certificate.
        public let subject: String?
        /// One or more domains or subdomains included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CNAME) of the certificate and additional domain names that can be used to connect to the website, such as example.com, www.example.com, or m.example.com.
        public let subjectAlternativeNames: [String]?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail load balancer or SSL/TLS certificate. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the Lightsail Dev Guide.
        public let tags: [Tag]?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, domainName: String? = nil, domainValidationRecords: [LoadBalancerTlsCertificateDomainValidationRecord]? = nil, failureReason: LoadBalancerTlsCertificateFailureReason? = nil, isAttached: Bool? = nil, issuedAt: TimeStamp? = nil, issuer: String? = nil, keyAlgorithm: String? = nil, loadBalancerName: String? = nil, location: ResourceLocation? = nil, name: String? = nil, notAfter: TimeStamp? = nil, notBefore: TimeStamp? = nil, renewalSummary: LoadBalancerTlsCertificateRenewalSummary? = nil, resourceType: ResourceType? = nil, revocationReason: LoadBalancerTlsCertificateRevocationReason? = nil, revokedAt: TimeStamp? = nil, serial: String? = nil, signatureAlgorithm: String? = nil, status: LoadBalancerTlsCertificateStatus? = nil, subject: String? = nil, subjectAlternativeNames: [String]? = nil, supportCode: String? = nil, tags: [Tag]? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.domainName = domainName
            self.domainValidationRecords = domainValidationRecords
            self.failureReason = failureReason
            self.isAttached = isAttached
            self.issuedAt = issuedAt
            self.issuer = issuer
            self.keyAlgorithm = keyAlgorithm
            self.loadBalancerName = loadBalancerName
            self.location = location
            self.name = name
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.renewalSummary = renewalSummary
            self.resourceType = resourceType
            self.revocationReason = revocationReason
            self.revokedAt = revokedAt
            self.serial = serial
            self.signatureAlgorithm = signatureAlgorithm
            self.status = status
            self.subject = subject
            self.subjectAlternativeNames = subjectAlternativeNames
            self.supportCode = supportCode
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case domainName = "domainName"
            case domainValidationRecords = "domainValidationRecords"
            case failureReason = "failureReason"
            case isAttached = "isAttached"
            case issuedAt = "issuedAt"
            case issuer = "issuer"
            case keyAlgorithm = "keyAlgorithm"
            case loadBalancerName = "loadBalancerName"
            case location = "location"
            case name = "name"
            case notAfter = "notAfter"
            case notBefore = "notBefore"
            case renewalSummary = "renewalSummary"
            case resourceType = "resourceType"
            case revocationReason = "revocationReason"
            case revokedAt = "revokedAt"
            case serial = "serial"
            case signatureAlgorithm = "signatureAlgorithm"
            case status = "status"
            case subject = "subject"
            case subjectAlternativeNames = "subjectAlternativeNames"
            case supportCode = "supportCode"
            case tags = "tags"
        }
    }

    public struct LoadBalancerTlsCertificateDomainValidationOption: AWSShape {

        /// The fully qualified domain name in the certificate request.
        public let domainName: String?
        /// The status of the domain validation. Valid values are listed below.
        public let validationStatus: LoadBalancerTlsCertificateDomainStatus?

        public init(domainName: String? = nil, validationStatus: LoadBalancerTlsCertificateDomainStatus? = nil) {
            self.domainName = domainName
            self.validationStatus = validationStatus
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case validationStatus = "validationStatus"
        }
    }

    public struct LoadBalancerTlsCertificateDomainValidationRecord: AWSShape {

        /// The domain name against which your SSL/TLS certificate was validated.
        public let domainName: String?
        /// A fully qualified domain name in the certificate. For example, example.com.
        public let name: String?
        /// The type of validation record. For example, CNAME for domain validation.
        public let `type`: String?
        /// The validation status. Valid values are listed below.
        public let validationStatus: LoadBalancerTlsCertificateDomainStatus?
        /// The value for that type.
        public let value: String?

        public init(domainName: String? = nil, name: String? = nil, type: String? = nil, validationStatus: LoadBalancerTlsCertificateDomainStatus? = nil, value: String? = nil) {
            self.domainName = domainName
            self.name = name
            self.`type` = `type`
            self.validationStatus = validationStatus
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case name = "name"
            case `type` = "type"
            case validationStatus = "validationStatus"
            case value = "value"
        }
    }

    public struct LoadBalancerTlsCertificateRenewalSummary: AWSShape {

        /// Contains information about the validation of each domain name in the certificate, as it pertains to Lightsail's managed renewal. This is different from the initial validation that occurs as a result of the RequestCertificate request.
        public let domainValidationOptions: [LoadBalancerTlsCertificateDomainValidationOption]?
        /// The status of Lightsail's managed renewal of the certificate. Valid values are listed below.
        public let renewalStatus: LoadBalancerTlsCertificateRenewalStatus?

        public init(domainValidationOptions: [LoadBalancerTlsCertificateDomainValidationOption]? = nil, renewalStatus: LoadBalancerTlsCertificateRenewalStatus? = nil) {
            self.domainValidationOptions = domainValidationOptions
            self.renewalStatus = renewalStatus
        }

        private enum CodingKeys: String, CodingKey {
            case domainValidationOptions = "domainValidationOptions"
            case renewalStatus = "renewalStatus"
        }
    }

    public struct LoadBalancerTlsCertificateSummary: AWSShape {

        /// When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
        public let isAttached: Bool?
        /// The name of the SSL/TLS certificate.
        public let name: String?

        public init(isAttached: Bool? = nil, name: String? = nil) {
            self.isAttached = isAttached
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case isAttached = "isAttached"
            case name = "name"
        }
    }

    public struct LogEvent: AWSShape {

        /// The timestamp when the database log event was created.
        public let createdAt: TimeStamp?
        /// The message of the database log event.
        public let message: String?

        public init(createdAt: TimeStamp? = nil, message: String? = nil) {
            self.createdAt = createdAt
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case message = "message"
        }
    }

    public struct MetricDatapoint: AWSShape {

        /// The average.
        public let average: Double?
        /// The maximum.
        public let maximum: Double?
        /// The minimum.
        public let minimum: Double?
        /// The sample count.
        public let sampleCount: Double?
        /// The sum.
        public let sum: Double?
        /// The timestamp (e.g., 1479816991.349).
        public let timestamp: TimeStamp?
        /// The unit. 
        public let unit: MetricUnit?

        public init(average: Double? = nil, maximum: Double? = nil, minimum: Double? = nil, sampleCount: Double? = nil, sum: Double? = nil, timestamp: TimeStamp? = nil, unit: MetricUnit? = nil) {
            self.average = average
            self.maximum = maximum
            self.minimum = minimum
            self.sampleCount = sampleCount
            self.sum = sum
            self.timestamp = timestamp
            self.unit = unit
        }

        private enum CodingKeys: String, CodingKey {
            case average = "average"
            case maximum = "maximum"
            case minimum = "minimum"
            case sampleCount = "sampleCount"
            case sum = "sum"
            case timestamp = "timestamp"
            case unit = "unit"
        }
    }

    public struct MonitoredResourceInfo: AWSShape {

        /// The Amazon Resource Name (ARN) of the resource being monitored.
        public let arn: String?
        /// The name of the Lightsail resource being monitored.
        public let name: String?
        /// The Lightsail resource type of the resource being monitored. Instances, load balancers, and relational databases are the only Lightsail resources that can currently be monitored by alarms.
        public let resourceType: ResourceType?

        public init(arn: String? = nil, name: String? = nil, resourceType: ResourceType? = nil) {
            self.arn = arn
            self.name = name
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case name = "name"
            case resourceType = "resourceType"
        }
    }

    public struct MonthlyTransfer: AWSShape {

        /// The amount allocated per month (in GB).
        public let gbPerMonthAllocated: Int?

        public init(gbPerMonthAllocated: Int? = nil) {
            self.gbPerMonthAllocated = gbPerMonthAllocated
        }

        private enum CodingKeys: String, CodingKey {
            case gbPerMonthAllocated = "gbPerMonthAllocated"
        }
    }

    public struct OpenInstancePublicPortsRequest: AWSShape {

        /// The name of the instance for which you want to open the public ports.
        public let instanceName: String
        /// An array of key-value pairs containing information about the port mappings.
        public let portInfo: PortInfo

        public init(instanceName: String, portInfo: PortInfo) {
            self.instanceName = instanceName
            self.portInfo = portInfo
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try self.portInfo.validate(name: "\(name).portInfo")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case portInfo = "portInfo"
        }
    }

    public struct OpenInstancePublicPortsResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct Operation: AWSShape {

        /// The timestamp when the operation was initialized (e.g., 1479816991.349).
        public let createdAt: TimeStamp?
        /// The error code.
        public let errorCode: String?
        /// The error details.
        public let errorDetails: String?
        /// The ID of the operation.
        public let id: String?
        /// A Boolean value indicating whether the operation is terminal.
        public let isTerminal: Bool?
        /// The AWS Region and Availability Zone.
        public let location: ResourceLocation?
        /// Details about the operation (e.g., Debian-1GB-Ohio-1).
        public let operationDetails: String?
        /// The type of operation. 
        public let operationType: OperationType?
        /// The resource name.
        public let resourceName: String?
        /// The resource type. 
        public let resourceType: ResourceType?
        /// The status of the operation. 
        public let status: OperationStatus?
        /// The timestamp when the status was changed (e.g., 1479816991.349).
        public let statusChangedAt: TimeStamp?

        public init(createdAt: TimeStamp? = nil, errorCode: String? = nil, errorDetails: String? = nil, id: String? = nil, isTerminal: Bool? = nil, location: ResourceLocation? = nil, operationDetails: String? = nil, operationType: OperationType? = nil, resourceName: String? = nil, resourceType: ResourceType? = nil, status: OperationStatus? = nil, statusChangedAt: TimeStamp? = nil) {
            self.createdAt = createdAt
            self.errorCode = errorCode
            self.errorDetails = errorDetails
            self.id = id
            self.isTerminal = isTerminal
            self.location = location
            self.operationDetails = operationDetails
            self.operationType = operationType
            self.resourceName = resourceName
            self.resourceType = resourceType
            self.status = status
            self.statusChangedAt = statusChangedAt
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case errorCode = "errorCode"
            case errorDetails = "errorDetails"
            case id = "id"
            case isTerminal = "isTerminal"
            case location = "location"
            case operationDetails = "operationDetails"
            case operationType = "operationType"
            case resourceName = "resourceName"
            case resourceType = "resourceType"
            case status = "status"
            case statusChangedAt = "statusChangedAt"
        }
    }

    public struct PasswordData: AWSShape {

        /// The encrypted password. Ciphertext will be an empty string if access to your new instance is not ready yet. When you create an instance, it can take up to 15 minutes for the instance to be ready.  If you use the default key pair (LightsailDefaultKeyPair), the decrypted password will be available in the password field. If you are using a custom key pair, you need to use your own means of decryption. If you change the Administrator password on the instance, Lightsail will continue to return the original ciphertext value. When accessing the instance using RDP, you need to manually enter the Administrator password after changing it from the default. 
        public let ciphertext: String?
        /// The name of the key pair that you used when creating your instance. If no key pair name was specified when creating the instance, Lightsail uses the default key pair (LightsailDefaultKeyPair). If you are using a custom key pair, you need to use your own means of decrypting your password using the ciphertext. Lightsail creates the ciphertext by encrypting your password with the public key part of this key pair.
        public let keyPairName: String?

        public init(ciphertext: String? = nil, keyPairName: String? = nil) {
            self.ciphertext = ciphertext
            self.keyPairName = keyPairName
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertext = "ciphertext"
            case keyPairName = "keyPairName"
        }
    }

    public struct PeerVpcRequest: AWSShape {


        public init() {
        }

    }

    public struct PeerVpcResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct PendingMaintenanceAction: AWSShape {

        /// The type of pending database maintenance action.
        public let action: String?
        /// The effective date of the pending database maintenance action.
        public let currentApplyDate: TimeStamp?
        /// Additional detail about the pending database maintenance action.
        public let description: String?

        public init(action: String? = nil, currentApplyDate: TimeStamp? = nil, description: String? = nil) {
            self.action = action
            self.currentApplyDate = currentApplyDate
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
            case currentApplyDate = "currentApplyDate"
            case description = "description"
        }
    }

    public struct PendingModifiedRelationalDatabaseValues: AWSShape {

        /// A Boolean value indicating whether automated backup retention is enabled.
        public let backupRetentionEnabled: Bool?
        /// The database engine version.
        public let engineVersion: String?
        /// The password for the master user of the database.
        public let masterUserPassword: String?

        public init(backupRetentionEnabled: Bool? = nil, engineVersion: String? = nil, masterUserPassword: String? = nil) {
            self.backupRetentionEnabled = backupRetentionEnabled
            self.engineVersion = engineVersion
            self.masterUserPassword = masterUserPassword
        }

        private enum CodingKeys: String, CodingKey {
            case backupRetentionEnabled = "backupRetentionEnabled"
            case engineVersion = "engineVersion"
            case masterUserPassword = "masterUserPassword"
        }
    }

    public struct PortInfo: AWSShape {

        /// The first port in the range.
        public let fromPort: Int?
        /// The protocol. 
        public let `protocol`: NetworkProtocol?
        /// The last port in the range.
        public let toPort: Int?

        public init(fromPort: Int? = nil, protocol: NetworkProtocol? = nil, toPort: Int? = nil) {
            self.fromPort = fromPort
            self.`protocol` = `protocol`
            self.toPort = toPort
        }

        public func validate(name: String) throws {
            try validate(self.fromPort, name:"fromPort", parent: name, max: 65535)
            try validate(self.fromPort, name:"fromPort", parent: name, min: 0)
            try validate(self.toPort, name:"toPort", parent: name, max: 65535)
            try validate(self.toPort, name:"toPort", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "fromPort"
            case `protocol` = "protocol"
            case toPort = "toPort"
        }
    }

    public struct PutAlarmRequest: AWSShape {

        /// The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
        public let alarmName: String
        /// The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
        public let comparisonOperator: ComparisonOperator
        /// The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both. A notification is sent via the specified contact protocol if notifications are enabled for the alarm, and when the alarm is triggered. A notification is not sent if a contact protocol is not specified, if the specified contact protocol is not configured in the AWS Region, or if notifications are not enabled for the alarm using the notificationEnabled paramater. Use the CreateContactMethod action to configure a contact protocol in an AWS Region.
        public let contactProtocols: [ContactProtocol]?
        /// The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an "M out of N" alarm, this value (datapointsToAlarm) is the M.
        public let datapointsToAlarm: Int?
        /// The number of most recent periods over which data is compared to the specified threshold. If you are setting an "M out of N" alarm, this value (evaluationPeriods) is the N. If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies the rolling period of time in which data points are evaluated. Each evaluation period is five minutes long. For example, specify an evaluation period of 24 to evaluate a metric over a rolling period of two hours. You can specify a minimum valuation period of 1 (5 minutes), and a maximum evaluation period of 288 (24 hours).
        public let evaluationPeriods: Int
        /// The name of the metric to associate with the alarm. You can configure up to two alarms per metric. The following metrics are available for each resource type:    Instances: CPUUtilization, NetworkIn, NetworkOut, StatusCheckFailed, StatusCheckFailed_Instance, and StatusCheckFailed_System.    Load balancers: ClientTLSNegotiationErrorCount, HealthyHostCount, UnhealthyHostCount, HTTPCode_LB_4XX_Count, HTTPCode_LB_5XX_Count, HTTPCode_Instance_2XX_Count, HTTPCode_Instance_3XX_Count, HTTPCode_Instance_4XX_Count, HTTPCode_Instance_5XX_Count, InstanceResponseTime, RejectedConnectionCount, and RequestCount.    Relational databases: CPUUtilization, DatabaseConnections, DiskQueueDepth, FreeStorageSpace, NetworkReceiveThroughput, and NetworkTransmitThroughput.  
        public let metricName: MetricName
        /// The name of the Lightsail resource that will be monitored. Instances, load balancers, and relational databases are the only Lightsail resources that can currently be monitored by alarms.
        public let monitoredResourceName: String
        /// Indicates whether the alarm is enabled. Notifications are enabled by default if you don't specify this parameter.
        public let notificationEnabled: Bool?
        /// The alarm states that trigger a notification. An alarm has the following possible states:    ALARM — The metric is outside of the defined threshold.    INSUFFICIENT_DATA — The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.    OK — The metric is within the defined threshold.   When you specify a notification trigger, the ALARM state must be specified. The INSUFFICIENT_DATA and OK states can be specified in addition to the ALARM state.   If you specify OK as an alarm trigger, a notification is sent when the alarm switches from an ALARM or INSUFFICIENT_DATA alarm state to an OK state. This can be thought of as an all clear alarm notification.   If you specify INSUFFICIENT_DATA as the alarm trigger, a notification is sent when the alarm switches from an OK or ALARM alarm state to an INSUFFICIENT_DATA state.   The notification trigger defaults to ALARM if you don't specify this parameter.
        public let notificationTriggers: [AlarmState]?
        /// The value against which the specified statistic is compared.
        public let threshold: Double
        /// Sets how this alarm will handle missing data points. An alarm can treat missing data in the following ways:    breaching — Assume the missing data is not within the threshold. Missing data counts towards the number of times the metric is not within the threshold.    notBreaching — Assume the missing data is within the threshold. Missing data does not count towards the number of times the metric is not within the threshold.    ignore — Ignore the missing data. Maintains the current alarm state.    missing — Missing data is treated as missing.   If treatMissingData is not specified, the default behavior of missing is used.
        public let treatMissingData: TreatMissingData?

        public init(alarmName: String, comparisonOperator: ComparisonOperator, contactProtocols: [ContactProtocol]? = nil, datapointsToAlarm: Int? = nil, evaluationPeriods: Int, metricName: MetricName, monitoredResourceName: String, notificationEnabled: Bool? = nil, notificationTriggers: [AlarmState]? = nil, threshold: Double, treatMissingData: TreatMissingData? = nil) {
            self.alarmName = alarmName
            self.comparisonOperator = comparisonOperator
            self.contactProtocols = contactProtocols
            self.datapointsToAlarm = datapointsToAlarm
            self.evaluationPeriods = evaluationPeriods
            self.metricName = metricName
            self.monitoredResourceName = monitoredResourceName
            self.notificationEnabled = notificationEnabled
            self.notificationTriggers = notificationTriggers
            self.threshold = threshold
            self.treatMissingData = treatMissingData
        }

        public func validate(name: String) throws {
            try validate(self.alarmName, name:"alarmName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.monitoredResourceName, name:"monitoredResourceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case alarmName = "alarmName"
            case comparisonOperator = "comparisonOperator"
            case contactProtocols = "contactProtocols"
            case datapointsToAlarm = "datapointsToAlarm"
            case evaluationPeriods = "evaluationPeriods"
            case metricName = "metricName"
            case monitoredResourceName = "monitoredResourceName"
            case notificationEnabled = "notificationEnabled"
            case notificationTriggers = "notificationTriggers"
            case threshold = "threshold"
            case treatMissingData = "treatMissingData"
        }
    }

    public struct PutAlarmResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct PutInstancePublicPortsRequest: AWSShape {

        /// The Lightsail instance name of the public port(s) you are setting.
        public let instanceName: String
        /// Specifies information about the public port(s).
        public let portInfos: [PortInfo]

        public init(instanceName: String, portInfos: [PortInfo]) {
            self.instanceName = instanceName
            self.portInfos = portInfos
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try self.portInfos.forEach {
                try $0.validate(name: "\(name).portInfos[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case portInfos = "portInfos"
        }
    }

    public struct PutInstancePublicPortsResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct RebootInstanceRequest: AWSShape {

        /// The name of the instance to reboot.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct RebootInstanceResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct RebootRelationalDatabaseRequest: AWSShape {

        /// The name of your database to reboot.
        public let relationalDatabaseName: String

        public init(relationalDatabaseName: String) {
            self.relationalDatabaseName = relationalDatabaseName
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case relationalDatabaseName = "relationalDatabaseName"
        }
    }

    public struct RebootRelationalDatabaseResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct Region: AWSShape {

        /// The Availability Zones. Follows the format us-east-2a (case-sensitive).
        public let availabilityZones: [AvailabilityZone]?
        /// The continent code (e.g., NA, meaning North America).
        public let continentCode: String?
        /// The description of the AWS Region (e.g., This region is recommended to serve users in the eastern United States and eastern Canada).
        public let description: String?
        /// The display name (e.g., Ohio).
        public let displayName: String?
        /// The region name (e.g., us-east-2).
        public let name: RegionName?
        /// The Availability Zones for databases. Follows the format us-east-2a (case-sensitive).
        public let relationalDatabaseAvailabilityZones: [AvailabilityZone]?

        public init(availabilityZones: [AvailabilityZone]? = nil, continentCode: String? = nil, description: String? = nil, displayName: String? = nil, name: RegionName? = nil, relationalDatabaseAvailabilityZones: [AvailabilityZone]? = nil) {
            self.availabilityZones = availabilityZones
            self.continentCode = continentCode
            self.description = description
            self.displayName = displayName
            self.name = name
            self.relationalDatabaseAvailabilityZones = relationalDatabaseAvailabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "availabilityZones"
            case continentCode = "continentCode"
            case description = "description"
            case displayName = "displayName"
            case name = "name"
            case relationalDatabaseAvailabilityZones = "relationalDatabaseAvailabilityZones"
        }
    }

    public struct RelationalDatabase: AWSShape {

        /// The Amazon Resource Name (ARN) of the database.
        public let arn: String?
        /// A Boolean value indicating whether automated backup retention is enabled for the database.
        public let backupRetentionEnabled: Bool?
        /// The certificate associated with the database.
        public let caCertificateIdentifier: String?
        /// The timestamp when the database was created. Formatted in Unix time.
        public let createdAt: TimeStamp?
        /// The database software (for example, MySQL).
        public let engine: String?
        /// The database engine version (for example, 5.7.23).
        public let engineVersion: String?
        /// Describes the hardware of the database.
        public let hardware: RelationalDatabaseHardware?
        /// The latest point in time to which the database can be restored. Formatted in Unix time.
        public let latestRestorableTime: TimeStamp?
        /// The Region name and Availability Zone where the database is located.
        public let location: ResourceLocation?
        /// The name of the master database created when the Lightsail database resource is created.
        public let masterDatabaseName: String?
        /// The master endpoint for the database.
        public let masterEndpoint: RelationalDatabaseEndpoint?
        /// The master user name of the database.
        public let masterUsername: String?
        /// The unique name of the database resource in Lightsail.
        public let name: String?
        /// The status of parameter updates for the database.
        public let parameterApplyStatus: String?
        /// Describes the pending maintenance actions for the database.
        public let pendingMaintenanceActions: [PendingMaintenanceAction]?
        /// Describes pending database value modifications.
        public let pendingModifiedValues: PendingModifiedRelationalDatabaseValues?
        /// The daily time range during which automated backups are created for the database (for example, 16:00-16:30).
        public let preferredBackupWindow: String?
        /// The weekly time range during which system maintenance can occur on the database. In the format ddd:hh24:mi-ddd:hh24:mi. For example, Tue:17:00-Tue:17:30.
        public let preferredMaintenanceWindow: String?
        /// A Boolean value indicating whether the database is publicly accessible.
        public let publiclyAccessible: Bool?
        /// The blueprint ID for the database. A blueprint describes the major engine version of a database.
        public let relationalDatabaseBlueprintId: String?
        /// The bundle ID for the database. A bundle describes the performance specifications for your database.
        public let relationalDatabaseBundleId: String?
        /// The Lightsail resource type for the database (for example, RelationalDatabase).
        public let resourceType: ResourceType?
        /// Describes the secondary Availability Zone of a high availability database. The secondary database is used for failover support of a high availability database.
        public let secondaryAvailabilityZone: String?
        /// Describes the current state of the database.
        public let state: String?
        /// The support code for the database. Include this code in your email to support when you have questions about a database in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the Lightsail Dev Guide.
        public let tags: [Tag]?

        public init(arn: String? = nil, backupRetentionEnabled: Bool? = nil, caCertificateIdentifier: String? = nil, createdAt: TimeStamp? = nil, engine: String? = nil, engineVersion: String? = nil, hardware: RelationalDatabaseHardware? = nil, latestRestorableTime: TimeStamp? = nil, location: ResourceLocation? = nil, masterDatabaseName: String? = nil, masterEndpoint: RelationalDatabaseEndpoint? = nil, masterUsername: String? = nil, name: String? = nil, parameterApplyStatus: String? = nil, pendingMaintenanceActions: [PendingMaintenanceAction]? = nil, pendingModifiedValues: PendingModifiedRelationalDatabaseValues? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, publiclyAccessible: Bool? = nil, relationalDatabaseBlueprintId: String? = nil, relationalDatabaseBundleId: String? = nil, resourceType: ResourceType? = nil, secondaryAvailabilityZone: String? = nil, state: String? = nil, supportCode: String? = nil, tags: [Tag]? = nil) {
            self.arn = arn
            self.backupRetentionEnabled = backupRetentionEnabled
            self.caCertificateIdentifier = caCertificateIdentifier
            self.createdAt = createdAt
            self.engine = engine
            self.engineVersion = engineVersion
            self.hardware = hardware
            self.latestRestorableTime = latestRestorableTime
            self.location = location
            self.masterDatabaseName = masterDatabaseName
            self.masterEndpoint = masterEndpoint
            self.masterUsername = masterUsername
            self.name = name
            self.parameterApplyStatus = parameterApplyStatus
            self.pendingMaintenanceActions = pendingMaintenanceActions
            self.pendingModifiedValues = pendingModifiedValues
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.publiclyAccessible = publiclyAccessible
            self.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId
            self.relationalDatabaseBundleId = relationalDatabaseBundleId
            self.resourceType = resourceType
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case backupRetentionEnabled = "backupRetentionEnabled"
            case caCertificateIdentifier = "caCertificateIdentifier"
            case createdAt = "createdAt"
            case engine = "engine"
            case engineVersion = "engineVersion"
            case hardware = "hardware"
            case latestRestorableTime = "latestRestorableTime"
            case location = "location"
            case masterDatabaseName = "masterDatabaseName"
            case masterEndpoint = "masterEndpoint"
            case masterUsername = "masterUsername"
            case name = "name"
            case parameterApplyStatus = "parameterApplyStatus"
            case pendingMaintenanceActions = "pendingMaintenanceActions"
            case pendingModifiedValues = "pendingModifiedValues"
            case preferredBackupWindow = "preferredBackupWindow"
            case preferredMaintenanceWindow = "preferredMaintenanceWindow"
            case publiclyAccessible = "publiclyAccessible"
            case relationalDatabaseBlueprintId = "relationalDatabaseBlueprintId"
            case relationalDatabaseBundleId = "relationalDatabaseBundleId"
            case resourceType = "resourceType"
            case secondaryAvailabilityZone = "secondaryAvailabilityZone"
            case state = "state"
            case supportCode = "supportCode"
            case tags = "tags"
        }
    }

    public struct RelationalDatabaseBlueprint: AWSShape {

        /// The ID for the database blueprint.
        public let blueprintId: String?
        /// The database software of the database blueprint (for example, MySQL).
        public let engine: RelationalDatabaseEngine?
        /// The description of the database engine for the database blueprint.
        public let engineDescription: String?
        /// The database engine version for the database blueprint (for example, 5.7.23).
        public let engineVersion: String?
        /// The description of the database engine version for the database blueprint.
        public let engineVersionDescription: String?
        /// A Boolean value indicating whether the engine version is the default for the database blueprint.
        public let isEngineDefault: Bool?

        public init(blueprintId: String? = nil, engine: RelationalDatabaseEngine? = nil, engineDescription: String? = nil, engineVersion: String? = nil, engineVersionDescription: String? = nil, isEngineDefault: Bool? = nil) {
            self.blueprintId = blueprintId
            self.engine = engine
            self.engineDescription = engineDescription
            self.engineVersion = engineVersion
            self.engineVersionDescription = engineVersionDescription
            self.isEngineDefault = isEngineDefault
        }

        private enum CodingKeys: String, CodingKey {
            case blueprintId = "blueprintId"
            case engine = "engine"
            case engineDescription = "engineDescription"
            case engineVersion = "engineVersion"
            case engineVersionDescription = "engineVersionDescription"
            case isEngineDefault = "isEngineDefault"
        }
    }

    public struct RelationalDatabaseBundle: AWSShape {

        /// The ID for the database bundle.
        public let bundleId: String?
        /// The number of virtual CPUs (vCPUs) for the database bundle.
        public let cpuCount: Int?
        /// The size of the disk for the database bundle.
        public let diskSizeInGb: Int?
        /// A Boolean value indicating whether the database bundle is active.
        public let isActive: Bool?
        /// A Boolean value indicating whether the database bundle is encrypted.
        public let isEncrypted: Bool?
        /// The name for the database bundle.
        public let name: String?
        /// The cost of the database bundle in US currency.
        public let price: Float?
        /// The amount of RAM in GB (for example, 2.0) for the database bundle.
        public let ramSizeInGb: Float?
        /// The data transfer rate per month in GB for the database bundle.
        public let transferPerMonthInGb: Int?

        public init(bundleId: String? = nil, cpuCount: Int? = nil, diskSizeInGb: Int? = nil, isActive: Bool? = nil, isEncrypted: Bool? = nil, name: String? = nil, price: Float? = nil, ramSizeInGb: Float? = nil, transferPerMonthInGb: Int? = nil) {
            self.bundleId = bundleId
            self.cpuCount = cpuCount
            self.diskSizeInGb = diskSizeInGb
            self.isActive = isActive
            self.isEncrypted = isEncrypted
            self.name = name
            self.price = price
            self.ramSizeInGb = ramSizeInGb
            self.transferPerMonthInGb = transferPerMonthInGb
        }

        private enum CodingKeys: String, CodingKey {
            case bundleId = "bundleId"
            case cpuCount = "cpuCount"
            case diskSizeInGb = "diskSizeInGb"
            case isActive = "isActive"
            case isEncrypted = "isEncrypted"
            case name = "name"
            case price = "price"
            case ramSizeInGb = "ramSizeInGb"
            case transferPerMonthInGb = "transferPerMonthInGb"
        }
    }

    public struct RelationalDatabaseEndpoint: AWSShape {

        /// Specifies the DNS address of the database.
        public let address: String?
        /// Specifies the port that the database is listening on.
        public let port: Int?

        public init(address: String? = nil, port: Int? = nil) {
            self.address = address
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case address = "address"
            case port = "port"
        }
    }

    public struct RelationalDatabaseEvent: AWSShape {

        /// The timestamp when the database event was created.
        public let createdAt: TimeStamp?
        /// The category that the database event belongs to.
        public let eventCategories: [String]?
        /// The message of the database event.
        public let message: String?
        /// The database that the database event relates to.
        public let resource: String?

        public init(createdAt: TimeStamp? = nil, eventCategories: [String]? = nil, message: String? = nil, resource: String? = nil) {
            self.createdAt = createdAt
            self.eventCategories = eventCategories
            self.message = message
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case eventCategories = "eventCategories"
            case message = "message"
            case resource = "resource"
        }
    }

    public struct RelationalDatabaseHardware: AWSShape {

        /// The number of vCPUs for the database.
        public let cpuCount: Int?
        /// The size of the disk for the database.
        public let diskSizeInGb: Int?
        /// The amount of RAM in GB for the database.
        public let ramSizeInGb: Float?

        public init(cpuCount: Int? = nil, diskSizeInGb: Int? = nil, ramSizeInGb: Float? = nil) {
            self.cpuCount = cpuCount
            self.diskSizeInGb = diskSizeInGb
            self.ramSizeInGb = ramSizeInGb
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCount = "cpuCount"
            case diskSizeInGb = "diskSizeInGb"
            case ramSizeInGb = "ramSizeInGb"
        }
    }

    public struct RelationalDatabaseParameter: AWSShape {

        /// Specifies the valid range of values for the parameter.
        public let allowedValues: String?
        /// Indicates when parameter updates are applied. Can be immediate or pending-reboot.
        public let applyMethod: String?
        /// Specifies the engine-specific parameter type.
        public let applyType: String?
        /// Specifies the valid data type for the parameter.
        public let dataType: String?
        /// Provides a description of the parameter.
        public let description: String?
        /// A Boolean value indicating whether the parameter can be modified.
        public let isModifiable: Bool?
        /// Specifies the name of the parameter.
        public let parameterName: String?
        /// Specifies the value of the parameter.
        public let parameterValue: String?

        public init(allowedValues: String? = nil, applyMethod: String? = nil, applyType: String? = nil, dataType: String? = nil, description: String? = nil, isModifiable: Bool? = nil, parameterName: String? = nil, parameterValue: String? = nil) {
            self.allowedValues = allowedValues
            self.applyMethod = applyMethod
            self.applyType = applyType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }

        private enum CodingKeys: String, CodingKey {
            case allowedValues = "allowedValues"
            case applyMethod = "applyMethod"
            case applyType = "applyType"
            case dataType = "dataType"
            case description = "description"
            case isModifiable = "isModifiable"
            case parameterName = "parameterName"
            case parameterValue = "parameterValue"
        }
    }

    public struct RelationalDatabaseSnapshot: AWSShape {

        /// The Amazon Resource Name (ARN) of the database snapshot.
        public let arn: String?
        /// The timestamp when the database snapshot was created.
        public let createdAt: TimeStamp?
        /// The software of the database snapshot (for example, MySQL)
        public let engine: String?
        /// The database engine version for the database snapshot (for example, 5.7.23).
        public let engineVersion: String?
        /// The Amazon Resource Name (ARN) of the database from which the database snapshot was created.
        public let fromRelationalDatabaseArn: String?
        /// The blueprint ID of the database from which the database snapshot was created. A blueprint describes the major engine version of a database.
        public let fromRelationalDatabaseBlueprintId: String?
        /// The bundle ID of the database from which the database snapshot was created.
        public let fromRelationalDatabaseBundleId: String?
        /// The name of the source database from which the database snapshot was created.
        public let fromRelationalDatabaseName: String?
        /// The Region name and Availability Zone where the database snapshot is located.
        public let location: ResourceLocation?
        /// The name of the database snapshot.
        public let name: String?
        /// The Lightsail resource type.
        public let resourceType: ResourceType?
        /// The size of the disk in GB (for example, 32) for the database snapshot.
        public let sizeInGb: Int?
        /// The state of the database snapshot.
        public let state: String?
        /// The support code for the database snapshot. Include this code in your email to support when you have questions about a database snapshot in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the Lightsail Dev Guide.
        public let tags: [Tag]?

        public init(arn: String? = nil, createdAt: TimeStamp? = nil, engine: String? = nil, engineVersion: String? = nil, fromRelationalDatabaseArn: String? = nil, fromRelationalDatabaseBlueprintId: String? = nil, fromRelationalDatabaseBundleId: String? = nil, fromRelationalDatabaseName: String? = nil, location: ResourceLocation? = nil, name: String? = nil, resourceType: ResourceType? = nil, sizeInGb: Int? = nil, state: String? = nil, supportCode: String? = nil, tags: [Tag]? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.engine = engine
            self.engineVersion = engineVersion
            self.fromRelationalDatabaseArn = fromRelationalDatabaseArn
            self.fromRelationalDatabaseBlueprintId = fromRelationalDatabaseBlueprintId
            self.fromRelationalDatabaseBundleId = fromRelationalDatabaseBundleId
            self.fromRelationalDatabaseName = fromRelationalDatabaseName
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case createdAt = "createdAt"
            case engine = "engine"
            case engineVersion = "engineVersion"
            case fromRelationalDatabaseArn = "fromRelationalDatabaseArn"
            case fromRelationalDatabaseBlueprintId = "fromRelationalDatabaseBlueprintId"
            case fromRelationalDatabaseBundleId = "fromRelationalDatabaseBundleId"
            case fromRelationalDatabaseName = "fromRelationalDatabaseName"
            case location = "location"
            case name = "name"
            case resourceType = "resourceType"
            case sizeInGb = "sizeInGb"
            case state = "state"
            case supportCode = "supportCode"
            case tags = "tags"
        }
    }

    public struct ReleaseStaticIpRequest: AWSShape {

        /// The name of the static IP to delete.
        public let staticIpName: String

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

        public func validate(name: String) throws {
            try validate(self.staticIpName, name:"staticIpName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
        }
    }

    public struct ReleaseStaticIpResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct ResourceLocation: AWSShape {

        /// The Availability Zone. Follows the format us-east-2a (case-sensitive).
        public let availabilityZone: String?
        /// The AWS Region name.
        public let regionName: RegionName?

        public init(availabilityZone: String? = nil, regionName: RegionName? = nil) {
            self.availabilityZone = availabilityZone
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case regionName = "regionName"
        }
    }

    public struct SendContactMethodVerificationRequest: AWSShape {

        /// The protocol to verify, such as Email or SMS (text messaging).
        public let `protocol`: ContactMethodVerificationProtocol

        public init(protocol: ContactMethodVerificationProtocol) {
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "protocol"
        }
    }

    public struct SendContactMethodVerificationResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct StartInstanceRequest: AWSShape {

        /// The name of the instance (a virtual private server) to start.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct StartInstanceResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct StartRelationalDatabaseRequest: AWSShape {

        /// The name of your database to start.
        public let relationalDatabaseName: String

        public init(relationalDatabaseName: String) {
            self.relationalDatabaseName = relationalDatabaseName
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case relationalDatabaseName = "relationalDatabaseName"
        }
    }

    public struct StartRelationalDatabaseResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct StaticIp: AWSShape {

        /// The Amazon Resource Name (ARN) of the static IP (e.g., arn:aws:lightsail:us-east-2:123456789101:StaticIp/9cbb4a9e-f8e3-4dfe-b57e-12345EXAMPLE).
        public let arn: String?
        /// The instance where the static IP is attached (e.g., Amazon_Linux-1GB-Ohio-1).
        public let attachedTo: String?
        /// The timestamp when the static IP was created (e.g., 1479735304.222).
        public let createdAt: TimeStamp?
        /// The static IP address.
        public let ipAddress: String?
        /// A Boolean value indicating whether the static IP is attached.
        public let isAttached: Bool?
        /// The region and Availability Zone where the static IP was created.
        public let location: ResourceLocation?
        /// The name of the static IP (e.g., StaticIP-Ohio-EXAMPLE).
        public let name: String?
        /// The resource type (usually StaticIp).
        public let resourceType: ResourceType?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?

        public init(arn: String? = nil, attachedTo: String? = nil, createdAt: TimeStamp? = nil, ipAddress: String? = nil, isAttached: Bool? = nil, location: ResourceLocation? = nil, name: String? = nil, resourceType: ResourceType? = nil, supportCode: String? = nil) {
            self.arn = arn
            self.attachedTo = attachedTo
            self.createdAt = createdAt
            self.ipAddress = ipAddress
            self.isAttached = isAttached
            self.location = location
            self.name = name
            self.resourceType = resourceType
            self.supportCode = supportCode
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case attachedTo = "attachedTo"
            case createdAt = "createdAt"
            case ipAddress = "ipAddress"
            case isAttached = "isAttached"
            case location = "location"
            case name = "name"
            case resourceType = "resourceType"
            case supportCode = "supportCode"
        }
    }

    public struct StopInstanceRequest: AWSShape {

        /// When set to True, forces a Lightsail instance that is stuck in a stopping state to stop.  Only use the force parameter if your instance is stuck in the stopping state. In any other state, your instance should stop normally without adding this parameter to your API request. 
        public let force: Bool?
        /// The name of the instance (a virtual private server) to stop.
        public let instanceName: String

        public init(force: Bool? = nil, instanceName: String) {
            self.force = force
            self.instanceName = instanceName
        }

        public func validate(name: String) throws {
            try validate(self.instanceName, name:"instanceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case force = "force"
            case instanceName = "instanceName"
        }
    }

    public struct StopInstanceResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct StopRelationalDatabaseRequest: AWSShape {

        /// The name of your database to stop.
        public let relationalDatabaseName: String
        /// The name of your new database snapshot to be created before stopping your database.
        public let relationalDatabaseSnapshotName: String?

        public init(relationalDatabaseName: String, relationalDatabaseSnapshotName: String? = nil) {
            self.relationalDatabaseName = relationalDatabaseName
            self.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
            try validate(self.relationalDatabaseSnapshotName, name:"relationalDatabaseSnapshotName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case relationalDatabaseName = "relationalDatabaseName"
            case relationalDatabaseSnapshotName = "relationalDatabaseSnapshotName"
        }
    }

    public struct StopRelationalDatabaseResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct Tag: AWSShape {

        /// The key of the tag. Constraints: Tag keys accept a maximum of 128 letters, numbers, spaces in UTF-8, or the following characters: + - = . _ : / @
        public let key: String?
        /// The value of the tag. Constraints: Tag values accept a maximum of 256 letters, numbers, spaces in UTF-8, or the following characters: + - = . _ : / @
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct TagResourceRequest: AWSShape {

        /// The Amazon Resource Name (ARN) of the resource to which you want to add a tag.
        public let resourceArn: String?
        /// The name of the resource to which you are adding tags.
        public let resourceName: String
        /// The tag key and optional value.
        public let tags: [Tag]

        public init(resourceArn: String? = nil, resourceName: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.resourceName = resourceName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, pattern: "^arn:(aws[^:]*):([a-zA-Z0-9-]+):([a-z0-9-]+):([0-9]+):([a-zA-Z]+)/([a-zA-Z0-9-]+)$")
            try validate(self.resourceName, name:"resourceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case resourceName = "resourceName"
            case tags = "tags"
        }
    }

    public struct TagResourceResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct TestAlarmRequest: AWSShape {

        /// The name of the alarm to test.
        public let alarmName: String
        /// The alarm state to test. An alarm has the following possible states that can be tested:    ALARM — The metric is outside of the defined threshold.    INSUFFICIENT_DATA — The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.    OK — The metric is within the defined threshold.  
        public let state: AlarmState

        public init(alarmName: String, state: AlarmState) {
            self.alarmName = alarmName
            self.state = state
        }

        public func validate(name: String) throws {
            try validate(self.alarmName, name:"alarmName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case alarmName = "alarmName"
            case state = "state"
        }
    }

    public struct TestAlarmResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct UnpeerVpcRequest: AWSShape {


        public init() {
        }

    }

    public struct UnpeerVpcResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct UntagResourceRequest: AWSShape {

        /// The Amazon Resource Name (ARN) of the resource from which you want to remove a tag.
        public let resourceArn: String?
        /// The name of the resource from which you are removing a tag.
        public let resourceName: String
        /// The tag keys to delete from the specified resource.
        public let tagKeys: [String]

        public init(resourceArn: String? = nil, resourceName: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.resourceName = resourceName
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, pattern: "^arn:(aws[^:]*):([a-zA-Z0-9-]+):([a-z0-9-]+):([0-9]+):([a-zA-Z]+)/([a-zA-Z0-9-]+)$")
            try validate(self.resourceName, name:"resourceName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case resourceName = "resourceName"
            case tagKeys = "tagKeys"
        }
    }

    public struct UntagResourceResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct UpdateDomainEntryRequest: AWSShape {

        /// An array of key-value pairs containing information about the domain entry.
        public let domainEntry: DomainEntry
        /// The name of the domain recordset to update.
        public let domainName: String

        public init(domainEntry: DomainEntry, domainName: String) {
            self.domainEntry = domainEntry
            self.domainName = domainName
        }

        public func validate(name: String) throws {
            try self.domainEntry.validate(name: "\(name).domainEntry")
        }

        private enum CodingKeys: String, CodingKey {
            case domainEntry = "domainEntry"
            case domainName = "domainName"
        }
    }

    public struct UpdateDomainEntryResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct UpdateLoadBalancerAttributeRequest: AWSShape {

        /// The name of the attribute you want to update. Valid values are below.
        public let attributeName: LoadBalancerAttributeName
        /// The value that you want to specify for the attribute name.
        public let attributeValue: String
        /// The name of the load balancer that you want to modify (e.g., my-load-balancer.
        public let loadBalancerName: String

        public init(attributeName: LoadBalancerAttributeName, attributeValue: String, loadBalancerName: String) {
            self.attributeName = attributeName
            self.attributeValue = attributeValue
            self.loadBalancerName = loadBalancerName
        }

        public func validate(name: String) throws {
            try validate(self.attributeValue, name:"attributeValue", parent: name, max: 256)
            try validate(self.attributeValue, name:"attributeValue", parent: name, min: 1)
            try validate(self.loadBalancerName, name:"loadBalancerName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
            case attributeValue = "attributeValue"
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct UpdateLoadBalancerAttributeResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct UpdateRelationalDatabaseParametersRequest: AWSShape {

        /// The database parameters to update.
        public let parameters: [RelationalDatabaseParameter]
        /// The name of your database for which to update parameters.
        public let relationalDatabaseName: String

        public init(parameters: [RelationalDatabaseParameter], relationalDatabaseName: String) {
            self.parameters = parameters
            self.relationalDatabaseName = relationalDatabaseName
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "parameters"
            case relationalDatabaseName = "relationalDatabaseName"
        }
    }

    public struct UpdateRelationalDatabaseParametersResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct UpdateRelationalDatabaseRequest: AWSShape {

        /// When true, applies changes immediately. When false, applies changes during the preferred maintenance window. Some changes may cause an outage. Default: false 
        public let applyImmediately: Bool?
        /// Indicates the certificate that needs to be associated with the database.
        public let caCertificateIdentifier: String?
        /// When true, disables automated backup retention for your database. Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database using the create relational database snapshot operation. Updates are applied during the next maintenance window because this can result in an outage.
        public let disableBackupRetention: Bool?
        /// When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
        public let enableBackupRetention: Bool?
        /// The password for the master user of your database. The password can include any printable ASCII character except "/", """, or "@". Constraints: Must contain 8 to 41 characters.
        public let masterUserPassword: String?
        /// The daily time range during which automated backups are created for your database if automated backups are enabled. Constraints:   Must be in the hh24:mi-hh24:mi format. Example: 16:00-16:30    Specified in Coordinated Universal Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// The weekly time range during which system maintenance can occur on your database. The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. Constraints:   Must be in the ddd:hh24:mi-ddd:hh24:mi format.   Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.   Must be at least 30 minutes.   Specified in Coordinated Universal Time (UTC).   Example: Tue:17:00-Tue:17:30   
        public let preferredMaintenanceWindow: String?
        /// Specifies the accessibility options for your database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
        public let publiclyAccessible: Bool?
        /// The name of your database to update.
        public let relationalDatabaseName: String
        /// When true, the master user password is changed to a new strong password generated by Lightsail. Use the get relational database master user password operation to get the new password.
        public let rotateMasterUserPassword: Bool?

        public init(applyImmediately: Bool? = nil, caCertificateIdentifier: String? = nil, disableBackupRetention: Bool? = nil, enableBackupRetention: Bool? = nil, masterUserPassword: String? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, publiclyAccessible: Bool? = nil, relationalDatabaseName: String, rotateMasterUserPassword: Bool? = nil) {
            self.applyImmediately = applyImmediately
            self.caCertificateIdentifier = caCertificateIdentifier
            self.disableBackupRetention = disableBackupRetention
            self.enableBackupRetention = enableBackupRetention
            self.masterUserPassword = masterUserPassword
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.publiclyAccessible = publiclyAccessible
            self.relationalDatabaseName = relationalDatabaseName
            self.rotateMasterUserPassword = rotateMasterUserPassword
        }

        public func validate(name: String) throws {
            try validate(self.relationalDatabaseName, name:"relationalDatabaseName", parent: name, pattern: "\\w[\\w\\-]*\\w")
        }

        private enum CodingKeys: String, CodingKey {
            case applyImmediately = "applyImmediately"
            case caCertificateIdentifier = "caCertificateIdentifier"
            case disableBackupRetention = "disableBackupRetention"
            case enableBackupRetention = "enableBackupRetention"
            case masterUserPassword = "masterUserPassword"
            case preferredBackupWindow = "preferredBackupWindow"
            case preferredMaintenanceWindow = "preferredMaintenanceWindow"
            case publiclyAccessible = "publiclyAccessible"
            case relationalDatabaseName = "relationalDatabaseName"
            case rotateMasterUserPassword = "rotateMasterUserPassword"
        }
    }

    public struct UpdateRelationalDatabaseResult: AWSShape {

        /// An array of objects that describe the result of the action, such as the status of the request, the time stamp of the request, and the resources affected by the request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }
}
