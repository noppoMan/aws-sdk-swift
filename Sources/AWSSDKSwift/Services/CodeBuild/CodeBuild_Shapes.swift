//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CodeBuild {
    //MARK: Enums

    public enum ArtifactNamespace: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case buildId = "BUILD_ID"
        public var description: String { return self.rawValue }
    }

    public enum ArtifactPackaging: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case zip = "ZIP"
        public var description: String { return self.rawValue }
    }

    public enum ArtifactsType: String, CustomStringConvertible, Codable {
        case codepipeline = "CODEPIPELINE"
        case s3 = "S3"
        case noArtifacts = "NO_ARTIFACTS"
        public var description: String { return self.rawValue }
    }

    public enum AuthType: String, CustomStringConvertible, Codable {
        case oauth = "OAUTH"
        case basicAuth = "BASIC_AUTH"
        case personalAccessToken = "PERSONAL_ACCESS_TOKEN"
        public var description: String { return self.rawValue }
    }

    public enum BuildPhaseType: String, CustomStringConvertible, Codable {
        case submitted = "SUBMITTED"
        case queued = "QUEUED"
        case provisioning = "PROVISIONING"
        case downloadSource = "DOWNLOAD_SOURCE"
        case install = "INSTALL"
        case preBuild = "PRE_BUILD"
        case build = "BUILD"
        case postBuild = "POST_BUILD"
        case uploadArtifacts = "UPLOAD_ARTIFACTS"
        case finalizing = "FINALIZING"
        case completed = "COMPLETED"
        public var description: String { return self.rawValue }
    }

    public enum CacheMode: String, CustomStringConvertible, Codable {
        case localDockerLayerCache = "LOCAL_DOCKER_LAYER_CACHE"
        case localSourceCache = "LOCAL_SOURCE_CACHE"
        case localCustomCache = "LOCAL_CUSTOM_CACHE"
        public var description: String { return self.rawValue }
    }

    public enum CacheType: String, CustomStringConvertible, Codable {
        case noCache = "NO_CACHE"
        case s3 = "S3"
        case local = "LOCAL"
        public var description: String { return self.rawValue }
    }

    public enum ComputeType: String, CustomStringConvertible, Codable {
        case buildGeneral1Small = "BUILD_GENERAL1_SMALL"
        case buildGeneral1Medium = "BUILD_GENERAL1_MEDIUM"
        case buildGeneral1Large = "BUILD_GENERAL1_LARGE"
        case buildGeneral12Xlarge = "BUILD_GENERAL1_2XLARGE"
        public var description: String { return self.rawValue }
    }

    public enum CredentialProviderType: String, CustomStringConvertible, Codable {
        case secretsManager = "SECRETS_MANAGER"
        public var description: String { return self.rawValue }
    }

    public enum EnvironmentType: String, CustomStringConvertible, Codable {
        case windowsContainer = "WINDOWS_CONTAINER"
        case linuxContainer = "LINUX_CONTAINER"
        case linuxGpuContainer = "LINUX_GPU_CONTAINER"
        case armContainer = "ARM_CONTAINER"
        public var description: String { return self.rawValue }
    }

    public enum EnvironmentVariableType: String, CustomStringConvertible, Codable {
        case plaintext = "PLAINTEXT"
        case parameterStore = "PARAMETER_STORE"
        case secretsManager = "SECRETS_MANAGER"
        public var description: String { return self.rawValue }
    }

    public enum FileSystemType: String, CustomStringConvertible, Codable {
        case efs = "EFS"
        public var description: String { return self.rawValue }
    }

    public enum ImagePullCredentialsType: String, CustomStringConvertible, Codable {
        case codebuild = "CODEBUILD"
        case serviceRole = "SERVICE_ROLE"
        public var description: String { return self.rawValue }
    }

    public enum LanguageType: String, CustomStringConvertible, Codable {
        case java = "JAVA"
        case python = "PYTHON"
        case nodeJs = "NODE_JS"
        case ruby = "RUBY"
        case golang = "GOLANG"
        case docker = "DOCKER"
        case android = "ANDROID"
        case dotnet = "DOTNET"
        case base = "BASE"
        case php = "PHP"
        public var description: String { return self.rawValue }
    }

    public enum LogsConfigStatusType: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public enum PlatformType: String, CustomStringConvertible, Codable {
        case debian = "DEBIAN"
        case amazonLinux = "AMAZON_LINUX"
        case ubuntu = "UBUNTU"
        case windowsServer = "WINDOWS_SERVER"
        public var description: String { return self.rawValue }
    }

    public enum ProjectSortByType: String, CustomStringConvertible, Codable {
        case name = "NAME"
        case createdTime = "CREATED_TIME"
        case lastModifiedTime = "LAST_MODIFIED_TIME"
        public var description: String { return self.rawValue }
    }

    public enum ReportExportConfigType: String, CustomStringConvertible, Codable {
        case s3 = "S3"
        case noExport = "NO_EXPORT"
        public var description: String { return self.rawValue }
    }

    public enum ReportGroupSortByType: String, CustomStringConvertible, Codable {
        case name = "NAME"
        case createdTime = "CREATED_TIME"
        case lastModifiedTime = "LAST_MODIFIED_TIME"
        public var description: String { return self.rawValue }
    }

    public enum ReportPackagingType: String, CustomStringConvertible, Codable {
        case zip = "ZIP"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum ReportStatusType: String, CustomStringConvertible, Codable {
        case generating = "GENERATING"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        case incomplete = "INCOMPLETE"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public enum ReportType: String, CustomStringConvertible, Codable {
        case test = "TEST"
        public var description: String { return self.rawValue }
    }

    public enum ServerType: String, CustomStringConvertible, Codable {
        case github = "GITHUB"
        case bitbucket = "BITBUCKET"
        case githubEnterprise = "GITHUB_ENTERPRISE"
        public var description: String { return self.rawValue }
    }

    public enum SharedResourceSortByType: String, CustomStringConvertible, Codable {
        case arn = "ARN"
        case modifiedTime = "MODIFIED_TIME"
        public var description: String { return self.rawValue }
    }

    public enum SortOrderType: String, CustomStringConvertible, Codable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    public enum SourceAuthType: String, CustomStringConvertible, Codable {
        case oauth = "OAUTH"
        public var description: String { return self.rawValue }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case codecommit = "CODECOMMIT"
        case codepipeline = "CODEPIPELINE"
        case github = "GITHUB"
        case s3 = "S3"
        case bitbucket = "BITBUCKET"
        case githubEnterprise = "GITHUB_ENTERPRISE"
        case noSource = "NO_SOURCE"
        public var description: String { return self.rawValue }
    }

    public enum StatusType: String, CustomStringConvertible, Codable {
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        case fault = "FAULT"
        case timedOut = "TIMED_OUT"
        case inProgress = "IN_PROGRESS"
        case stopped = "STOPPED"
        public var description: String { return self.rawValue }
    }

    public enum WebhookFilterType: String, CustomStringConvertible, Codable {
        case event = "EVENT"
        case baseRef = "BASE_REF"
        case headRef = "HEAD_REF"
        case actorAccountId = "ACTOR_ACCOUNT_ID"
        case filePath = "FILE_PATH"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct BatchDeleteBuildsInput: AWSEncodableShape {

        /// The IDs of the builds to delete.
        public let ids: [String]

        public init(ids: [String]) {
            self.ids = ids
        }

        public func validate(name: String) throws {
            try self.ids.forEach {
                try validate($0, name: "ids[]", parent: name, min: 1)
            }
            try validate(self.ids, name:"ids", parent: name, max: 100)
            try validate(self.ids, name:"ids", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case ids = "ids"
        }
    }

    public struct BatchDeleteBuildsOutput: AWSDecodableShape {

        /// The IDs of the builds that were successfully deleted.
        public let buildsDeleted: [String]?
        /// Information about any builds that could not be successfully deleted.
        public let buildsNotDeleted: [BuildNotDeleted]?

        public init(buildsDeleted: [String]? = nil, buildsNotDeleted: [BuildNotDeleted]? = nil) {
            self.buildsDeleted = buildsDeleted
            self.buildsNotDeleted = buildsNotDeleted
        }

        private enum CodingKeys: String, CodingKey {
            case buildsDeleted = "buildsDeleted"
            case buildsNotDeleted = "buildsNotDeleted"
        }
    }

    public struct BatchGetBuildsInput: AWSEncodableShape {

        /// The IDs of the builds.
        public let ids: [String]

        public init(ids: [String]) {
            self.ids = ids
        }

        public func validate(name: String) throws {
            try self.ids.forEach {
                try validate($0, name: "ids[]", parent: name, min: 1)
            }
            try validate(self.ids, name:"ids", parent: name, max: 100)
            try validate(self.ids, name:"ids", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case ids = "ids"
        }
    }

    public struct BatchGetBuildsOutput: AWSDecodableShape {

        /// Information about the requested builds.
        public let builds: [Build]?
        /// The IDs of builds for which information could not be found.
        public let buildsNotFound: [String]?

        public init(builds: [Build]? = nil, buildsNotFound: [String]? = nil) {
            self.builds = builds
            self.buildsNotFound = buildsNotFound
        }

        private enum CodingKeys: String, CodingKey {
            case builds = "builds"
            case buildsNotFound = "buildsNotFound"
        }
    }

    public struct BatchGetProjectsInput: AWSEncodableShape {

        /// The names or ARNs of the build projects. To get information about a project shared with your AWS account, its ARN must be specified. You cannot specify a shared project using its name.
        public let names: [String]

        public init(names: [String]) {
            self.names = names
        }

        public func validate(name: String) throws {
            try self.names.forEach {
                try validate($0, name: "names[]", parent: name, min: 1)
            }
            try validate(self.names, name:"names", parent: name, max: 100)
            try validate(self.names, name:"names", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case names = "names"
        }
    }

    public struct BatchGetProjectsOutput: AWSDecodableShape {

        /// Information about the requested build projects.
        public let projects: [Project]?
        /// The names of build projects for which information could not be found.
        public let projectsNotFound: [String]?

        public init(projects: [Project]? = nil, projectsNotFound: [String]? = nil) {
            self.projects = projects
            self.projectsNotFound = projectsNotFound
        }

        private enum CodingKeys: String, CodingKey {
            case projects = "projects"
            case projectsNotFound = "projectsNotFound"
        }
    }

    public struct BatchGetReportGroupsInput: AWSEncodableShape {

        ///  An array of report group ARNs that identify the report groups to return. 
        public let reportGroupArns: [String]

        public init(reportGroupArns: [String]) {
            self.reportGroupArns = reportGroupArns
        }

        public func validate(name: String) throws {
            try self.reportGroupArns.forEach {
                try validate($0, name: "reportGroupArns[]", parent: name, min: 1)
            }
            try validate(self.reportGroupArns, name:"reportGroupArns", parent: name, max: 100)
            try validate(self.reportGroupArns, name:"reportGroupArns", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case reportGroupArns = "reportGroupArns"
        }
    }

    public struct BatchGetReportGroupsOutput: AWSDecodableShape {

        ///  The array of report groups returned by BatchGetReportGroups. 
        public let reportGroups: [ReportGroup]?
        ///  An array of ARNs passed to BatchGetReportGroups that are not associated with a ReportGroup. 
        public let reportGroupsNotFound: [String]?

        public init(reportGroups: [ReportGroup]? = nil, reportGroupsNotFound: [String]? = nil) {
            self.reportGroups = reportGroups
            self.reportGroupsNotFound = reportGroupsNotFound
        }

        private enum CodingKeys: String, CodingKey {
            case reportGroups = "reportGroups"
            case reportGroupsNotFound = "reportGroupsNotFound"
        }
    }

    public struct BatchGetReportsInput: AWSEncodableShape {

        ///  An array of ARNs that identify the Report objects to return. 
        public let reportArns: [String]

        public init(reportArns: [String]) {
            self.reportArns = reportArns
        }

        public func validate(name: String) throws {
            try self.reportArns.forEach {
                try validate($0, name: "reportArns[]", parent: name, min: 1)
            }
            try validate(self.reportArns, name:"reportArns", parent: name, max: 100)
            try validate(self.reportArns, name:"reportArns", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case reportArns = "reportArns"
        }
    }

    public struct BatchGetReportsOutput: AWSDecodableShape {

        ///  The array of Report objects returned by BatchGetReports. 
        public let reports: [Report]?
        ///  An array of ARNs passed to BatchGetReportGroups that are not associated with a Report. 
        public let reportsNotFound: [String]?

        public init(reports: [Report]? = nil, reportsNotFound: [String]? = nil) {
            self.reports = reports
            self.reportsNotFound = reportsNotFound
        }

        private enum CodingKeys: String, CodingKey {
            case reports = "reports"
            case reportsNotFound = "reportsNotFound"
        }
    }

    public struct Build: AWSDecodableShape {

        /// The Amazon Resource Name (ARN) of the build.
        public let arn: String?
        /// Information about the output artifacts for the build.
        public let artifacts: BuildArtifacts?
        /// Whether the build is complete. True if complete; otherwise, false.
        public let buildComplete: Bool?
        /// The number of the build. For each project, the buildNumber of its first build is 1. The buildNumber of each subsequent build is incremented by 1. If a build is deleted, the buildNumber of other builds does not change.
        public let buildNumber: Int64?
        /// The current status of the build. Valid values include:    FAILED: The build failed.    FAULT: The build faulted.    IN_PROGRESS: The build is still in progress.    STOPPED: The build stopped.    SUCCEEDED: The build succeeded.    TIMED_OUT: The build timed out.  
        public let buildStatus: StatusType?
        /// Information about the cache for the build.
        public let cache: ProjectCache?
        /// The current build phase.
        public let currentPhase: String?
        /// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output artifacts.   You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key.   You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/alias-name ).
        public let encryptionKey: String?
        /// When the build process ended, expressed in Unix time format.
        public let endTime: TimeStamp?
        /// Information about the build environment for this build.
        public let environment: ProjectEnvironment?
        ///  A list of exported environment variables for this build. 
        public let exportedEnvironmentVariables: [ExportedEnvironmentVariable]?
        ///  An array of ProjectFileSystemLocation objects for a CodeBuild build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System. 
        public let fileSystemLocations: [ProjectFileSystemLocation]?
        /// The unique ID for the build.
        public let id: String?
        /// The entity that started the build. Valid values include:   If AWS CodePipeline started the build, the pipeline's name (for example, codepipeline/my-demo-pipeline).   If an AWS Identity and Access Management (IAM) user started the build, the user's name (for example, MyUserName).   If the Jenkins plugin for AWS CodeBuild started the build, the string CodeBuild-Jenkins-Plugin.  
        public let initiator: String?
        /// Information about the build's logs in Amazon CloudWatch Logs.
        public let logs: LogsLocation?
        /// Describes a network interface.
        public let networkInterface: NetworkInterface?
        /// Information about all previous build phases that are complete and information about any current build phase that is not yet complete.
        public let phases: [BuildPhase]?
        /// The name of the AWS CodeBuild project.
        public let projectName: String?
        ///  The number of minutes a build is allowed to be queued before it times out. 
        public let queuedTimeoutInMinutes: Int?
        ///  An array of the ARNs associated with this build's reports. 
        public let reportArns: [String]?
        ///  An identifier for the version of this build's source code.     For AWS CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID.     For AWS CodePipeline, the source revision provided by AWS CodePipeline.     For Amazon Simple Storage Service (Amazon S3), this does not apply.   
        public let resolvedSourceVersion: String?
        ///  An array of ProjectArtifacts objects. 
        public let secondaryArtifacts: [BuildArtifacts]?
        ///  An array of ProjectSource objects. 
        public let secondarySources: [ProjectSource]?
        ///  An array of ProjectSourceVersion objects. Each ProjectSourceVersion must be one of:    For AWS CodeCommit: the commit ID, branch, or Git tag to use.   For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example, pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Amazon Simple Storage Service (Amazon S3): the version ID of the object that represents the build input ZIP file to use.  
        public let secondarySourceVersions: [ProjectSourceVersion]?
        /// The name of a service role used for this build.
        public let serviceRole: String?
        /// Information about the source code to be built.
        public let source: ProjectSource?
        /// Any version identifier for the version of the source code to be built. If sourceVersion is specified at the project level, then this sourceVersion (at the build level) takes precedence.   For more information, see Source Version Sample with CodeBuild in the AWS CodeBuild User Guide. 
        public let sourceVersion: String?
        /// When the build process started, expressed in Unix time format.
        public let startTime: TimeStamp?
        /// How long, in minutes, for AWS CodeBuild to wait before timing out this build if it does not get marked as completed.
        public let timeoutInMinutes: Int?
        /// If your AWS CodeBuild project accesses resources in an Amazon VPC, you provide this parameter that identifies the VPC ID and the list of security group IDs and subnet IDs. The security groups and subnets must belong to the same VPC. You must provide at least one security group and one subnet ID.
        public let vpcConfig: VpcConfig?

        public init(arn: String? = nil, artifacts: BuildArtifacts? = nil, buildComplete: Bool? = nil, buildNumber: Int64? = nil, buildStatus: StatusType? = nil, cache: ProjectCache? = nil, currentPhase: String? = nil, encryptionKey: String? = nil, endTime: TimeStamp? = nil, environment: ProjectEnvironment? = nil, exportedEnvironmentVariables: [ExportedEnvironmentVariable]? = nil, fileSystemLocations: [ProjectFileSystemLocation]? = nil, id: String? = nil, initiator: String? = nil, logs: LogsLocation? = nil, networkInterface: NetworkInterface? = nil, phases: [BuildPhase]? = nil, projectName: String? = nil, queuedTimeoutInMinutes: Int? = nil, reportArns: [String]? = nil, resolvedSourceVersion: String? = nil, secondaryArtifacts: [BuildArtifacts]? = nil, secondarySources: [ProjectSource]? = nil, secondarySourceVersions: [ProjectSourceVersion]? = nil, serviceRole: String? = nil, source: ProjectSource? = nil, sourceVersion: String? = nil, startTime: TimeStamp? = nil, timeoutInMinutes: Int? = nil, vpcConfig: VpcConfig? = nil) {
            self.arn = arn
            self.artifacts = artifacts
            self.buildComplete = buildComplete
            self.buildNumber = buildNumber
            self.buildStatus = buildStatus
            self.cache = cache
            self.currentPhase = currentPhase
            self.encryptionKey = encryptionKey
            self.endTime = endTime
            self.environment = environment
            self.exportedEnvironmentVariables = exportedEnvironmentVariables
            self.fileSystemLocations = fileSystemLocations
            self.id = id
            self.initiator = initiator
            self.logs = logs
            self.networkInterface = networkInterface
            self.phases = phases
            self.projectName = projectName
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.reportArns = reportArns
            self.resolvedSourceVersion = resolvedSourceVersion
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySources = secondarySources
            self.secondarySourceVersions = secondarySourceVersions
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.startTime = startTime
            self.timeoutInMinutes = timeoutInMinutes
            self.vpcConfig = vpcConfig
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case artifacts = "artifacts"
            case buildComplete = "buildComplete"
            case buildNumber = "buildNumber"
            case buildStatus = "buildStatus"
            case cache = "cache"
            case currentPhase = "currentPhase"
            case encryptionKey = "encryptionKey"
            case endTime = "endTime"
            case environment = "environment"
            case exportedEnvironmentVariables = "exportedEnvironmentVariables"
            case fileSystemLocations = "fileSystemLocations"
            case id = "id"
            case initiator = "initiator"
            case logs = "logs"
            case networkInterface = "networkInterface"
            case phases = "phases"
            case projectName = "projectName"
            case queuedTimeoutInMinutes = "queuedTimeoutInMinutes"
            case reportArns = "reportArns"
            case resolvedSourceVersion = "resolvedSourceVersion"
            case secondaryArtifacts = "secondaryArtifacts"
            case secondarySources = "secondarySources"
            case secondarySourceVersions = "secondarySourceVersions"
            case serviceRole = "serviceRole"
            case source = "source"
            case sourceVersion = "sourceVersion"
            case startTime = "startTime"
            case timeoutInMinutes = "timeoutInMinutes"
            case vpcConfig = "vpcConfig"
        }
    }

    public struct BuildArtifacts: AWSDecodableShape {

        ///  An identifier for this artifact definition. 
        public let artifactIdentifier: String?
        ///  Information that tells you if encryption for build artifacts is disabled. 
        public let encryptionDisabled: Bool?
        /// Information about the location of the build artifacts.
        public let location: String?
        /// The MD5 hash of the build artifact. You can use this hash along with a checksum tool to confirm file integrity and authenticity.  This value is available only if the build project's packaging value is set to ZIP. 
        public let md5sum: String?
        ///  If this flag is set, a name specified in the buildspec file overrides the artifact name. The name specified in a buildspec file is calculated at build time and uses the Shell Command Language. For example, you can append a date and time to your artifact name so that it is always unique. 
        public let overrideArtifactName: Bool?
        /// The SHA-256 hash of the build artifact. You can use this hash along with a checksum tool to confirm file integrity and authenticity.  This value is available only if the build project's packaging value is set to ZIP. 
        public let sha256sum: String?

        public init(artifactIdentifier: String? = nil, encryptionDisabled: Bool? = nil, location: String? = nil, md5sum: String? = nil, overrideArtifactName: Bool? = nil, sha256sum: String? = nil) {
            self.artifactIdentifier = artifactIdentifier
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.md5sum = md5sum
            self.overrideArtifactName = overrideArtifactName
            self.sha256sum = sha256sum
        }

        private enum CodingKeys: String, CodingKey {
            case artifactIdentifier = "artifactIdentifier"
            case encryptionDisabled = "encryptionDisabled"
            case location = "location"
            case md5sum = "md5sum"
            case overrideArtifactName = "overrideArtifactName"
            case sha256sum = "sha256sum"
        }
    }

    public struct BuildNotDeleted: AWSDecodableShape {

        /// The ID of the build that could not be successfully deleted.
        public let id: String?
        /// Additional information about the build that could not be successfully deleted.
        public let statusCode: String?

        public init(id: String? = nil, statusCode: String? = nil) {
            self.id = id
            self.statusCode = statusCode
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case statusCode = "statusCode"
        }
    }

    public struct BuildPhase: AWSDecodableShape {

        /// Additional information about a build phase, especially to help troubleshoot a failed build.
        public let contexts: [PhaseContext]?
        /// How long, in seconds, between the starting and ending times of the build's phase.
        public let durationInSeconds: Int64?
        /// When the build phase ended, expressed in Unix time format.
        public let endTime: TimeStamp?
        /// The current status of the build phase. Valid values include:    FAILED: The build phase failed.    FAULT: The build phase faulted.    IN_PROGRESS: The build phase is still in progress.    QUEUED: The build has been submitted and is queued behind other submitted builds.    STOPPED: The build phase stopped.    SUCCEEDED: The build phase succeeded.    TIMED_OUT: The build phase timed out.  
        public let phaseStatus: StatusType?
        /// The name of the build phase. Valid values include:    BUILD: Core build activities typically occur in this build phase.    COMPLETED: The build has been completed.    DOWNLOAD_SOURCE: Source code is being downloaded in this build phase.    FINALIZING: The build process is completing in this build phase.    INSTALL: Installation activities typically occur in this build phase.    POST_BUILD: Post-build activities typically occur in this build phase.    PRE_BUILD: Pre-build activities typically occur in this build phase.    PROVISIONING: The build environment is being set up.    QUEUED: The build has been submitted and is queued behind other submitted builds.    SUBMITTED: The build has been submitted.    UPLOAD_ARTIFACTS: Build output artifacts are being uploaded to the output location.  
        public let phaseType: BuildPhaseType?
        /// When the build phase started, expressed in Unix time format.
        public let startTime: TimeStamp?

        public init(contexts: [PhaseContext]? = nil, durationInSeconds: Int64? = nil, endTime: TimeStamp? = nil, phaseStatus: StatusType? = nil, phaseType: BuildPhaseType? = nil, startTime: TimeStamp? = nil) {
            self.contexts = contexts
            self.durationInSeconds = durationInSeconds
            self.endTime = endTime
            self.phaseStatus = phaseStatus
            self.phaseType = phaseType
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case contexts = "contexts"
            case durationInSeconds = "durationInSeconds"
            case endTime = "endTime"
            case phaseStatus = "phaseStatus"
            case phaseType = "phaseType"
            case startTime = "startTime"
        }
    }

    public struct CloudWatchLogsConfig: AWSEncodableShape & AWSDecodableShape {

        ///  The group name of the logs in Amazon CloudWatch Logs. For more information, see Working with Log Groups and Log Streams. 
        public let groupName: String?
        /// The current status of the logs in Amazon CloudWatch Logs for a build project. Valid values are:    ENABLED: Amazon CloudWatch Logs are enabled for this build project.    DISABLED: Amazon CloudWatch Logs are not enabled for this build project.  
        public let status: LogsConfigStatusType
        ///  The prefix of the stream name of the Amazon CloudWatch Logs. For more information, see Working with Log Groups and Log Streams. 
        public let streamName: String?

        public init(groupName: String? = nil, status: LogsConfigStatusType, streamName: String? = nil) {
            self.groupName = groupName
            self.status = status
            self.streamName = streamName
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
            case status = "status"
            case streamName = "streamName"
        }
    }

    public struct CreateProjectInput: AWSEncodableShape {

        /// Information about the build output artifacts for the build project.
        public let artifacts: ProjectArtifacts
        /// Set this to true to generate a publicly accessible URL for your project's build badge.
        public let badgeEnabled: Bool?
        /// Stores recently used information so that it can be quickly accessed at a later time.
        public let cache: ProjectCache?
        /// A description that makes the build project easy to identify.
        public let description: String?
        /// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output artifacts.   You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key.   You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/alias-name ).
        public let encryptionKey: String?
        /// Information about the build environment for the build project.
        public let environment: ProjectEnvironment
        ///  An array of ProjectFileSystemLocation objects for a CodeBuild build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System. 
        public let fileSystemLocations: [ProjectFileSystemLocation]?
        ///  Information about logs for the build project. These can be logs in Amazon CloudWatch Logs, logs uploaded to a specified S3 bucket, or both. 
        public let logsConfig: LogsConfig?
        /// The name of the build project.
        public let name: String
        ///  The number of minutes a build is allowed to be queued before it times out. 
        public let queuedTimeoutInMinutes: Int?
        ///  An array of ProjectArtifacts objects. 
        public let secondaryArtifacts: [ProjectArtifacts]?
        ///  An array of ProjectSource objects. 
        public let secondarySources: [ProjectSource]?
        ///  An array of ProjectSourceVersion objects. If secondarySourceVersions is specified at the build level, then they take precedence over these secondarySourceVersions (at the project level). 
        public let secondarySourceVersions: [ProjectSourceVersion]?
        /// The ARN of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        public let serviceRole: String
        /// Information about the build input source code for the build project.
        public let source: ProjectSource
        ///  A version of the build input to be built for this project. If not specified, the latest version is used. If specified, it must be one of:    For AWS CodeCommit: the commit ID, branch, or Git tag to use.   For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Amazon Simple Storage Service (Amazon S3): the version ID of the object that represents the build input ZIP file to use.    If sourceVersion is specified at the build level, then that version takes precedence over this sourceVersion (at the project level).   For more information, see Source Version Sample with CodeBuild in the AWS CodeBuild User Guide. 
        public let sourceVersion: String?
        /// A set of tags for this build project. These tags are available for use by AWS services that support AWS CodeBuild build project tags.
        public let tags: [Tag]?
        /// How long, in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait before it times out any build that has not been marked as completed. The default is 60 minutes.
        public let timeoutInMinutes: Int?
        /// VpcConfig enables AWS CodeBuild to access resources in an Amazon VPC.
        public let vpcConfig: VpcConfig?

        public init(artifacts: ProjectArtifacts, badgeEnabled: Bool? = nil, cache: ProjectCache? = nil, description: String? = nil, encryptionKey: String? = nil, environment: ProjectEnvironment, fileSystemLocations: [ProjectFileSystemLocation]? = nil, logsConfig: LogsConfig? = nil, name: String, queuedTimeoutInMinutes: Int? = nil, secondaryArtifacts: [ProjectArtifacts]? = nil, secondarySources: [ProjectSource]? = nil, secondarySourceVersions: [ProjectSourceVersion]? = nil, serviceRole: String, source: ProjectSource, sourceVersion: String? = nil, tags: [Tag]? = nil, timeoutInMinutes: Int? = nil, vpcConfig: VpcConfig? = nil) {
            self.artifacts = artifacts
            self.badgeEnabled = badgeEnabled
            self.cache = cache
            self.description = description
            self.encryptionKey = encryptionKey
            self.environment = environment
            self.fileSystemLocations = fileSystemLocations
            self.logsConfig = logsConfig
            self.name = name
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySources = secondarySources
            self.secondarySourceVersions = secondarySourceVersions
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.tags = tags
            self.timeoutInMinutes = timeoutInMinutes
            self.vpcConfig = vpcConfig
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 255)
            try validate(self.description, name:"description", parent: name, min: 0)
            try validate(self.encryptionKey, name:"encryptionKey", parent: name, min: 1)
            try self.environment.validate(name: "\(name).environment")
            try validate(self.name, name:"name", parent: name, max: 255)
            try validate(self.name, name:"name", parent: name, min: 2)
            try validate(self.name, name:"name", parent: name, pattern: "[A-Za-z0-9][A-Za-z0-9\\-_]{1,254}")
            try validate(self.queuedTimeoutInMinutes, name:"queuedTimeoutInMinutes", parent: name, max: 480)
            try validate(self.queuedTimeoutInMinutes, name:"queuedTimeoutInMinutes", parent: name, min: 5)
            try validate(self.secondaryArtifacts, name:"secondaryArtifacts", parent: name, max: 12)
            try validate(self.secondaryArtifacts, name:"secondaryArtifacts", parent: name, min: 0)
            try self.secondarySources?.forEach {
                try $0.validate(name: "\(name).secondarySources[]")
            }
            try validate(self.secondarySources, name:"secondarySources", parent: name, max: 12)
            try validate(self.secondarySources, name:"secondarySources", parent: name, min: 0)
            try validate(self.secondarySourceVersions, name:"secondarySourceVersions", parent: name, max: 12)
            try validate(self.secondarySourceVersions, name:"secondarySourceVersions", parent: name, min: 0)
            try validate(self.serviceRole, name:"serviceRole", parent: name, min: 1)
            try self.source.validate(name: "\(name).source")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 0)
            try validate(self.timeoutInMinutes, name:"timeoutInMinutes", parent: name, max: 480)
            try validate(self.timeoutInMinutes, name:"timeoutInMinutes", parent: name, min: 5)
            try self.vpcConfig?.validate(name: "\(name).vpcConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case artifacts = "artifacts"
            case badgeEnabled = "badgeEnabled"
            case cache = "cache"
            case description = "description"
            case encryptionKey = "encryptionKey"
            case environment = "environment"
            case fileSystemLocations = "fileSystemLocations"
            case logsConfig = "logsConfig"
            case name = "name"
            case queuedTimeoutInMinutes = "queuedTimeoutInMinutes"
            case secondaryArtifacts = "secondaryArtifacts"
            case secondarySources = "secondarySources"
            case secondarySourceVersions = "secondarySourceVersions"
            case serviceRole = "serviceRole"
            case source = "source"
            case sourceVersion = "sourceVersion"
            case tags = "tags"
            case timeoutInMinutes = "timeoutInMinutes"
            case vpcConfig = "vpcConfig"
        }
    }

    public struct CreateProjectOutput: AWSDecodableShape {

        /// Information about the build project that was created.
        public let project: Project?

        public init(project: Project? = nil) {
            self.project = project
        }

        private enum CodingKeys: String, CodingKey {
            case project = "project"
        }
    }

    public struct CreateReportGroupInput: AWSEncodableShape {

        ///  A ReportExportConfig object that contains information about where the report group test results are exported. 
        public let exportConfig: ReportExportConfig
        ///  The name of the report group. 
        public let name: String
        ///  The type of report group. 
        public let `type`: ReportType

        public init(exportConfig: ReportExportConfig, name: String, type: ReportType) {
            self.exportConfig = exportConfig
            self.name = name
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try self.exportConfig.validate(name: "\(name).exportConfig")
            try validate(self.name, name:"name", parent: name, max: 128)
            try validate(self.name, name:"name", parent: name, min: 2)
        }

        private enum CodingKeys: String, CodingKey {
            case exportConfig = "exportConfig"
            case name = "name"
            case `type` = "type"
        }
    }

    public struct CreateReportGroupOutput: AWSDecodableShape {

        ///  Information about the report group that was created. 
        public let reportGroup: ReportGroup?

        public init(reportGroup: ReportGroup? = nil) {
            self.reportGroup = reportGroup
        }

        private enum CodingKeys: String, CodingKey {
            case reportGroup = "reportGroup"
        }
    }

    public struct CreateWebhookInput: AWSEncodableShape {

        /// A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If branchFilter is empty, then all branches are built.   It is recommended that you use filterGroups instead of branchFilter.  
        public let branchFilter: String?
        ///  An array of arrays of WebhookFilter objects used to determine which webhooks are triggered. At least one WebhookFilter in the array must specify EVENT as its type.   For a build to be triggered, at least one filter group in the filterGroups array must pass. For a filter group to pass, each of its filters must pass. 
        public let filterGroups: [[WebhookFilter]]?
        /// The name of the AWS CodeBuild project.
        public let projectName: String

        public init(branchFilter: String? = nil, filterGroups: [[WebhookFilter]]? = nil, projectName: String) {
            self.branchFilter = branchFilter
            self.filterGroups = filterGroups
            self.projectName = projectName
        }

        public func validate(name: String) throws {
            try validate(self.projectName, name:"projectName", parent: name, max: 255)
            try validate(self.projectName, name:"projectName", parent: name, min: 2)
            try validate(self.projectName, name:"projectName", parent: name, pattern: "[A-Za-z0-9][A-Za-z0-9\\-_]{1,254}")
        }

        private enum CodingKeys: String, CodingKey {
            case branchFilter = "branchFilter"
            case filterGroups = "filterGroups"
            case projectName = "projectName"
        }
    }

    public struct CreateWebhookOutput: AWSDecodableShape {

        /// Information about a webhook that connects repository events to a build project in AWS CodeBuild.
        public let webhook: Webhook?

        public init(webhook: Webhook? = nil) {
            self.webhook = webhook
        }

        private enum CodingKeys: String, CodingKey {
            case webhook = "webhook"
        }
    }

    public struct DeleteProjectInput: AWSEncodableShape {

        /// The name of the build project.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct DeleteProjectOutput: AWSDecodableShape {


        public init() {
        }

    }

    public struct DeleteReportGroupInput: AWSEncodableShape {

        ///  The ARN of the report group to delete. 
        public let arn: String

        public init(arn: String) {
            self.arn = arn
        }

        public func validate(name: String) throws {
            try validate(self.arn, name:"arn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public struct DeleteReportGroupOutput: AWSDecodableShape {


        public init() {
        }

    }

    public struct DeleteReportInput: AWSEncodableShape {

        ///  The ARN of the report to delete. 
        public let arn: String

        public init(arn: String) {
            self.arn = arn
        }

        public func validate(name: String) throws {
            try validate(self.arn, name:"arn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public struct DeleteReportOutput: AWSDecodableShape {


        public init() {
        }

    }

    public struct DeleteResourcePolicyInput: AWSEncodableShape {

        ///  The ARN of the resource that is associated with the resource policy. 
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct DeleteResourcePolicyOutput: AWSDecodableShape {


        public init() {
        }

    }

    public struct DeleteSourceCredentialsInput: AWSEncodableShape {

        ///  The Amazon Resource Name (ARN) of the token.
        public let arn: String

        public init(arn: String) {
            self.arn = arn
        }

        public func validate(name: String) throws {
            try validate(self.arn, name:"arn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public struct DeleteSourceCredentialsOutput: AWSDecodableShape {

        ///  The Amazon Resource Name (ARN) of the token. 
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public struct DeleteWebhookInput: AWSEncodableShape {

        /// The name of the AWS CodeBuild project.
        public let projectName: String

        public init(projectName: String) {
            self.projectName = projectName
        }

        public func validate(name: String) throws {
            try validate(self.projectName, name:"projectName", parent: name, max: 255)
            try validate(self.projectName, name:"projectName", parent: name, min: 2)
            try validate(self.projectName, name:"projectName", parent: name, pattern: "[A-Za-z0-9][A-Za-z0-9\\-_]{1,254}")
        }

        private enum CodingKeys: String, CodingKey {
            case projectName = "projectName"
        }
    }

    public struct DeleteWebhookOutput: AWSDecodableShape {


        public init() {
        }

    }

    public struct DescribeTestCasesInput: AWSEncodableShape {

        ///  A TestCaseFilter object used to filter the returned reports. 
        public let filter: TestCaseFilter?
        ///  The maximum number of paginated test cases returned per response. Use nextToken to iterate pages in the list of returned TestCase objects. The default value is 100. 
        public let maxResults: Int?
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. 
        public let nextToken: String?
        ///  The ARN of the report for which test cases are returned. 
        public let reportArn: String

        public init(filter: TestCaseFilter? = nil, maxResults: Int? = nil, nextToken: String? = nil, reportArn: String) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.reportArn = reportArn
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "filter"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case reportArn = "reportArn"
        }
    }

    public struct DescribeTestCasesOutput: AWSDecodableShape {

        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. 
        public let nextToken: String?
        ///  The returned list of test cases. 
        public let testCases: [TestCase]?

        public init(nextToken: String? = nil, testCases: [TestCase]? = nil) {
            self.nextToken = nextToken
            self.testCases = testCases
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case testCases = "testCases"
        }
    }

    public struct EnvironmentImage: AWSDecodableShape {

        /// The description of the Docker image.
        public let description: String?
        /// The name of the Docker image.
        public let name: String?
        /// A list of environment image versions.
        public let versions: [String]?

        public init(description: String? = nil, name: String? = nil, versions: [String]? = nil) {
            self.description = description
            self.name = name
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
            case versions = "versions"
        }
    }

    public struct EnvironmentLanguage: AWSDecodableShape {

        /// The list of Docker images that are related by the specified programming language.
        public let images: [EnvironmentImage]?
        /// The programming language for the Docker images.
        public let language: LanguageType?

        public init(images: [EnvironmentImage]? = nil, language: LanguageType? = nil) {
            self.images = images
            self.language = language
        }

        private enum CodingKeys: String, CodingKey {
            case images = "images"
            case language = "language"
        }
    }

    public struct EnvironmentPlatform: AWSDecodableShape {

        /// The list of programming languages that are available for the specified platform.
        public let languages: [EnvironmentLanguage]?
        /// The platform's name.
        public let platform: PlatformType?

        public init(languages: [EnvironmentLanguage]? = nil, platform: PlatformType? = nil) {
            self.languages = languages
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case languages = "languages"
            case platform = "platform"
        }
    }

    public struct EnvironmentVariable: AWSEncodableShape & AWSDecodableShape {

        /// The name or key of the environment variable.
        public let name: String
        /// The type of environment variable. Valid values include:    PARAMETER_STORE: An environment variable stored in Amazon EC2 Systems Manager Parameter Store.    PLAINTEXT: An environment variable in plain text format. This is the default value.    SECRETS_MANAGER: An environment variable stored in AWS Secrets Manager.  
        public let `type`: EnvironmentVariableType?
        /// The value of the environment variable.  We strongly discourage the use of PLAINTEXT environment variables to store sensitive values, especially AWS secret key IDs and secret access keys. PLAINTEXT environment variables can be displayed in plain text using the AWS CodeBuild console and the AWS Command Line Interface (AWS CLI). For sensitive values, we recommend you use an environment variable of type PARAMETER_STORE or SECRETS_MANAGER. 
        public let value: String

        public init(name: String, type: EnvironmentVariableType? = nil, value: String) {
            self.name = name
            self.`type` = `type`
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.name, name:"name", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case `type` = "type"
            case value = "value"
        }
    }

    public struct ExportedEnvironmentVariable: AWSDecodableShape {

        ///  The name of this exported environment variable. 
        public let name: String?
        ///  The value assigned to this exported environment variable.    During a build, the value of a variable is available starting with the install phase. It can be updated between the start of the install phase and the end of the post_build phase. After the post_build phase ends, the value of exported variables cannot change. 
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case value = "value"
        }
    }

    public struct GetResourcePolicyInput: AWSEncodableShape {

        ///  The ARN of the resource that is associated with the resource policy. 
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try validate(self.resourceArn, name:"resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct GetResourcePolicyOutput: AWSDecodableShape {

        ///  The resource policy for the resource identified by the input ARN parameter. 
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "policy"
        }
    }

    public struct GitSubmodulesConfig: AWSEncodableShape & AWSDecodableShape {

        ///  Set to true to fetch Git submodules for your AWS CodeBuild build project. 
        public let fetchSubmodules: Bool

        public init(fetchSubmodules: Bool) {
            self.fetchSubmodules = fetchSubmodules
        }

        private enum CodingKeys: String, CodingKey {
            case fetchSubmodules = "fetchSubmodules"
        }
    }

    public struct ImportSourceCredentialsInput: AWSEncodableShape {

        ///  The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API and must be created using the AWS CodeBuild console. 
        public let authType: AuthType
        ///  The source provider used for this project. 
        public let serverType: ServerType
        ///  Set to false to prevent overwriting the repository source credentials. Set to true to overwrite the repository source credentials. The default value is true. 
        public let shouldOverwrite: Bool?
        ///  For GitHub or GitHub Enterprise, this is the personal access token. For Bitbucket, this is the app password. 
        public let token: String
        ///  The Bitbucket username when the authType is BASIC_AUTH. This parameter is not valid for other types of source providers or connections. 
        public let username: String?

        public init(authType: AuthType, serverType: ServerType, shouldOverwrite: Bool? = nil, token: String, username: String? = nil) {
            self.authType = authType
            self.serverType = serverType
            self.shouldOverwrite = shouldOverwrite
            self.token = token
            self.username = username
        }

        public func validate(name: String) throws {
            try validate(self.token, name:"token", parent: name, min: 1)
            try validate(self.username, name:"username", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case authType = "authType"
            case serverType = "serverType"
            case shouldOverwrite = "shouldOverwrite"
            case token = "token"
            case username = "username"
        }
    }

    public struct ImportSourceCredentialsOutput: AWSDecodableShape {

        ///  The Amazon Resource Name (ARN) of the token. 
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public struct InvalidateProjectCacheInput: AWSEncodableShape {

        /// The name of the AWS CodeBuild build project that the cache is reset for.
        public let projectName: String

        public init(projectName: String) {
            self.projectName = projectName
        }

        public func validate(name: String) throws {
            try validate(self.projectName, name:"projectName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case projectName = "projectName"
        }
    }

    public struct InvalidateProjectCacheOutput: AWSDecodableShape {


        public init() {
        }

    }

    public struct ListBuildsForProjectInput: AWSEncodableShape {

        /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        /// The name of the AWS CodeBuild project.
        public let projectName: String
        /// The order to list build IDs. Valid values include:    ASCENDING: List the build IDs in ascending order by build ID.    DESCENDING: List the build IDs in descending order by build ID.  
        public let sortOrder: SortOrderType?

        public init(nextToken: String? = nil, projectName: String, sortOrder: SortOrderType? = nil) {
            self.nextToken = nextToken
            self.projectName = projectName
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try validate(self.projectName, name:"projectName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case projectName = "projectName"
            case sortOrder = "sortOrder"
        }
    }

    public struct ListBuildsForProjectOutput: AWSDecodableShape {

        /// A list of build IDs for the specified build project, with each build ID representing a single build.
        public let ids: [String]?
        /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call.
        public let nextToken: String?

        public init(ids: [String]? = nil, nextToken: String? = nil) {
            self.ids = ids
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ids = "ids"
            case nextToken = "nextToken"
        }
    }

    public struct ListBuildsInput: AWSEncodableShape {

        /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        /// The order to list build IDs. Valid values include:    ASCENDING: List the build IDs in ascending order by build ID.    DESCENDING: List the build IDs in descending order by build ID.  
        public let sortOrder: SortOrderType?

        public init(nextToken: String? = nil, sortOrder: SortOrderType? = nil) {
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case sortOrder = "sortOrder"
        }
    }

    public struct ListBuildsOutput: AWSDecodableShape {

        /// A list of build IDs, with each build ID representing a single build.
        public let ids: [String]?
        /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call.
        public let nextToken: String?

        public init(ids: [String]? = nil, nextToken: String? = nil) {
            self.ids = ids
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ids = "ids"
            case nextToken = "nextToken"
        }
    }

    public struct ListCuratedEnvironmentImagesInput: AWSEncodableShape {


        public init() {
        }

    }

    public struct ListCuratedEnvironmentImagesOutput: AWSDecodableShape {

        /// Information about supported platforms for Docker images that are managed by AWS CodeBuild.
        public let platforms: [EnvironmentPlatform]?

        public init(platforms: [EnvironmentPlatform]? = nil) {
            self.platforms = platforms
        }

        private enum CodingKeys: String, CodingKey {
            case platforms = "platforms"
        }
    }

    public struct ListProjectsInput: AWSEncodableShape {

        /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        /// The criterion to be used to list build project names. Valid values include:    CREATED_TIME: List based on when each build project was created.    LAST_MODIFIED_TIME: List based on when information about each build project was last changed.    NAME: List based on each build project's name.   Use sortOrder to specify in what order to list the build project names based on the preceding criteria.
        public let sortBy: ProjectSortByType?
        /// The order in which to list build projects. Valid values include:    ASCENDING: List in ascending order.    DESCENDING: List in descending order.   Use sortBy to specify the criterion to be used to list build project names.
        public let sortOrder: SortOrderType?

        public init(nextToken: String? = nil, sortBy: ProjectSortByType? = nil, sortOrder: SortOrderType? = nil) {
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case sortBy = "sortBy"
            case sortOrder = "sortOrder"
        }
    }

    public struct ListProjectsOutput: AWSDecodableShape {

        /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call.
        public let nextToken: String?
        /// The list of build project names, with each build project name representing a single build project.
        public let projects: [String]?

        public init(nextToken: String? = nil, projects: [String]? = nil) {
            self.nextToken = nextToken
            self.projects = projects
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case projects = "projects"
        }
    }

    public struct ListReportGroupsInput: AWSEncodableShape {

        ///  The maximum number of paginated report groups returned per response. Use nextToken to iterate pages in the list of returned ReportGroup objects. The default value is 100. 
        public let maxResults: Int?
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. 
        public let nextToken: String?
        ///  The criterion to be used to list build report groups. Valid values include:     CREATED_TIME: List based on when each report group was created.    LAST_MODIFIED_TIME: List based on when each report group was last changed.    NAME: List based on each report group's name.  
        public let sortBy: ReportGroupSortByType?
        ///  Used to specify the order to sort the list of returned report groups. Valid values are ASCENDING and DESCENDING. 
        public let sortOrder: SortOrderType?

        public init(maxResults: Int? = nil, nextToken: String? = nil, sortBy: ReportGroupSortByType? = nil, sortOrder: SortOrderType? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case sortBy = "sortBy"
            case sortOrder = "sortOrder"
        }
    }

    public struct ListReportGroupsOutput: AWSDecodableShape {

        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. 
        public let nextToken: String?
        ///  The list of ARNs for the report groups in the current AWS account. 
        public let reportGroups: [String]?

        public init(nextToken: String? = nil, reportGroups: [String]? = nil) {
            self.nextToken = nextToken
            self.reportGroups = reportGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reportGroups = "reportGroups"
        }
    }

    public struct ListReportsForReportGroupInput: AWSEncodableShape {

        ///  A ReportFilter object used to filter the returned reports. 
        public let filter: ReportFilter?
        ///  The maximum number of paginated reports in this report group returned per response. Use nextToken to iterate pages in the list of returned Report objects. The default value is 100. 
        public let maxResults: Int?
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. 
        public let nextToken: String?
        ///  The ARN of the report group for which you want to return report ARNs. 
        public let reportGroupArn: String
        ///  Use to specify whether the results are returned in ascending or descending order. 
        public let sortOrder: SortOrderType?

        public init(filter: ReportFilter? = nil, maxResults: Int? = nil, nextToken: String? = nil, reportGroupArn: String, sortOrder: SortOrderType? = nil) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.reportGroupArn = reportGroupArn
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "filter"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case reportGroupArn = "reportGroupArn"
            case sortOrder = "sortOrder"
        }
    }

    public struct ListReportsForReportGroupOutput: AWSDecodableShape {

        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. 
        public let nextToken: String?
        ///  The list of returned report group ARNs. 
        public let reports: [String]?

        public init(nextToken: String? = nil, reports: [String]? = nil) {
            self.nextToken = nextToken
            self.reports = reports
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reports = "reports"
        }
    }

    public struct ListReportsInput: AWSEncodableShape {

        ///  A ReportFilter object used to filter the returned reports. 
        public let filter: ReportFilter?
        ///  The maximum number of paginated reports returned per response. Use nextToken to iterate pages in the list of returned Report objects. The default value is 100. 
        public let maxResults: Int?
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. 
        public let nextToken: String?
        ///  Specifies the sort order for the list of returned reports. Valid values are:     ASCENDING: return reports in chronological order based on their creation date.     DESCENDING: return reports in the reverse chronological order based on their creation date.   
        public let sortOrder: SortOrderType?

        public init(filter: ReportFilter? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortOrder: SortOrderType? = nil) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "filter"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case sortOrder = "sortOrder"
        }
    }

    public struct ListReportsOutput: AWSDecodableShape {

        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. 
        public let nextToken: String?
        ///  The list of returned ARNs for the reports in the current AWS account. 
        public let reports: [String]?

        public init(nextToken: String? = nil, reports: [String]? = nil) {
            self.nextToken = nextToken
            self.reports = reports
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reports = "reports"
        }
    }

    public struct ListSharedProjectsInput: AWSEncodableShape {

        ///  The maximum number of paginated shared build projects returned per response. Use nextToken to iterate pages in the list of returned Project objects. The default value is 100. 
        public let maxResults: Int?
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. 
        public let nextToken: String?
        ///  The criterion to be used to list build projects shared with the current AWS account or user. Valid values include:     ARN: List based on the ARN.     MODIFIED_TIME: List based on when information about the shared project was last changed.   
        public let sortBy: SharedResourceSortByType?
        /// The order in which to list shared build projects. Valid values include:    ASCENDING: List in ascending order.    DESCENDING: List in descending order.  
        public let sortOrder: SortOrderType?

        public init(maxResults: Int? = nil, nextToken: String? = nil, sortBy: SharedResourceSortByType? = nil, sortOrder: SortOrderType? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case sortBy = "sortBy"
            case sortOrder = "sortOrder"
        }
    }

    public struct ListSharedProjectsOutput: AWSDecodableShape {

        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. 
        public let nextToken: String?
        ///  The list of ARNs for the build projects shared with the current AWS account or user. 
        public let projects: [String]?

        public init(nextToken: String? = nil, projects: [String]? = nil) {
            self.nextToken = nextToken
            self.projects = projects
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case projects = "projects"
        }
    }

    public struct ListSharedReportGroupsInput: AWSEncodableShape {

        ///  The maximum number of paginated shared report groups per response. Use nextToken to iterate pages in the list of returned ReportGroup objects. The default value is 100. 
        public let maxResults: Int?
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. 
        public let nextToken: String?
        ///  The criterion to be used to list report groups shared with the current AWS account or user. Valid values include:     ARN: List based on the ARN.     MODIFIED_TIME: List based on when information about the shared report group was last changed.   
        public let sortBy: SharedResourceSortByType?
        /// The order in which to list shared report groups. Valid values include:    ASCENDING: List in ascending order.    DESCENDING: List in descending order.  
        public let sortOrder: SortOrderType?

        public init(maxResults: Int? = nil, nextToken: String? = nil, sortBy: SharedResourceSortByType? = nil, sortOrder: SortOrderType? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case sortBy = "sortBy"
            case sortOrder = "sortOrder"
        }
    }

    public struct ListSharedReportGroupsOutput: AWSDecodableShape {

        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned. 
        public let nextToken: String?
        ///  The list of ARNs for the report groups shared with the current AWS account or user. 
        public let reportGroups: [String]?

        public init(nextToken: String? = nil, reportGroups: [String]? = nil) {
            self.nextToken = nextToken
            self.reportGroups = reportGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reportGroups = "reportGroups"
        }
    }

    public struct ListSourceCredentialsInput: AWSEncodableShape {


        public init() {
        }

    }

    public struct ListSourceCredentialsOutput: AWSDecodableShape {

        ///  A list of SourceCredentialsInfo objects. Each SourceCredentialsInfo object includes the authentication type, token ARN, and type of source provider for one set of credentials. 
        public let sourceCredentialsInfos: [SourceCredentialsInfo]?

        public init(sourceCredentialsInfos: [SourceCredentialsInfo]? = nil) {
            self.sourceCredentialsInfos = sourceCredentialsInfos
        }

        private enum CodingKeys: String, CodingKey {
            case sourceCredentialsInfos = "sourceCredentialsInfos"
        }
    }

    public struct LogsConfig: AWSEncodableShape & AWSDecodableShape {

        ///  Information about Amazon CloudWatch Logs for a build project. Amazon CloudWatch Logs are enabled by default. 
        public let cloudWatchLogs: CloudWatchLogsConfig?
        ///  Information about logs built to an S3 bucket for a build project. S3 logs are not enabled by default. 
        public let s3Logs: S3LogsConfig?

        public init(cloudWatchLogs: CloudWatchLogsConfig? = nil, s3Logs: S3LogsConfig? = nil) {
            self.cloudWatchLogs = cloudWatchLogs
            self.s3Logs = s3Logs
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogs = "cloudWatchLogs"
            case s3Logs = "s3Logs"
        }
    }

    public struct LogsLocation: AWSDecodableShape {

        ///  Information about Amazon CloudWatch Logs for a build project. 
        public let cloudWatchLogs: CloudWatchLogsConfig?
        ///  The ARN of Amazon CloudWatch Logs for a build project. Its format is arn:${Partition}:logs:${Region}:${Account}:log-group:${LogGroupName}:log-stream:${LogStreamName}. For more information, see Resources Defined by Amazon CloudWatch Logs. 
        public let cloudWatchLogsArn: String?
        /// The URL to an individual build log in Amazon CloudWatch Logs.
        public let deepLink: String?
        /// The name of the Amazon CloudWatch Logs group for the build logs.
        public let groupName: String?
        ///  The URL to a build log in an S3 bucket. 
        public let s3DeepLink: String?
        ///  Information about S3 logs for a build project. 
        public let s3Logs: S3LogsConfig?
        ///  The ARN of S3 logs for a build project. Its format is arn:${Partition}:s3:::${BucketName}/${ObjectName}. For more information, see Resources Defined by Amazon S3. 
        public let s3LogsArn: String?
        /// The name of the Amazon CloudWatch Logs stream for the build logs.
        public let streamName: String?

        public init(cloudWatchLogs: CloudWatchLogsConfig? = nil, cloudWatchLogsArn: String? = nil, deepLink: String? = nil, groupName: String? = nil, s3DeepLink: String? = nil, s3Logs: S3LogsConfig? = nil, s3LogsArn: String? = nil, streamName: String? = nil) {
            self.cloudWatchLogs = cloudWatchLogs
            self.cloudWatchLogsArn = cloudWatchLogsArn
            self.deepLink = deepLink
            self.groupName = groupName
            self.s3DeepLink = s3DeepLink
            self.s3Logs = s3Logs
            self.s3LogsArn = s3LogsArn
            self.streamName = streamName
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogs = "cloudWatchLogs"
            case cloudWatchLogsArn = "cloudWatchLogsArn"
            case deepLink = "deepLink"
            case groupName = "groupName"
            case s3DeepLink = "s3DeepLink"
            case s3Logs = "s3Logs"
            case s3LogsArn = "s3LogsArn"
            case streamName = "streamName"
        }
    }

    public struct NetworkInterface: AWSDecodableShape {

        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(networkInterfaceId: String? = nil, subnetId: String? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case subnetId = "subnetId"
        }
    }

    public struct PhaseContext: AWSDecodableShape {

        /// An explanation of the build phase's context. This might include a command ID and an exit code.
        public let message: String?
        /// The status code for the context of the build phase.
        public let statusCode: String?

        public init(message: String? = nil, statusCode: String? = nil) {
            self.message = message
            self.statusCode = statusCode
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case statusCode = "statusCode"
        }
    }

    public struct Project: AWSDecodableShape {

        /// The Amazon Resource Name (ARN) of the build project.
        public let arn: String?
        /// Information about the build output artifacts for the build project.
        public let artifacts: ProjectArtifacts?
        /// Information about the build badge for the build project.
        public let badge: ProjectBadge?
        /// Information about the cache for the build project.
        public let cache: ProjectCache?
        /// When the build project was created, expressed in Unix time format.
        public let created: TimeStamp?
        /// A description that makes the build project easy to identify.
        public let description: String?
        /// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output artifacts.   You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key.   You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/alias-name ).
        public let encryptionKey: String?
        /// Information about the build environment for this build project.
        public let environment: ProjectEnvironment?
        ///  An array of ProjectFileSystemLocation objects for a CodeBuild build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System. 
        public let fileSystemLocations: [ProjectFileSystemLocation]?
        /// When the build project's settings were last modified, expressed in Unix time format.
        public let lastModified: TimeStamp?
        ///  Information about logs for the build project. A project can create logs in Amazon CloudWatch Logs, an S3 bucket, or both. 
        public let logsConfig: LogsConfig?
        /// The name of the build project.
        public let name: String?
        ///  The number of minutes a build is allowed to be queued before it times out. 
        public let queuedTimeoutInMinutes: Int?
        ///  An array of ProjectArtifacts objects. 
        public let secondaryArtifacts: [ProjectArtifacts]?
        ///  An array of ProjectSource objects. 
        public let secondarySources: [ProjectSource]?
        ///  An array of ProjectSourceVersion objects. If secondarySourceVersions is specified at the build level, then they take over these secondarySourceVersions (at the project level). 
        public let secondarySourceVersions: [ProjectSourceVersion]?
        /// The ARN of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        public let serviceRole: String?
        /// Information about the build input source code for this build project.
        public let source: ProjectSource?
        /// A version of the build input to be built for this project. If not specified, the latest version is used. If specified, it must be one of:   For AWS CodeCommit: the commit ID, branch, or Git tag to use.   For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Amazon Simple Storage Service (Amazon S3): the version ID of the object that represents the build input ZIP file to use.    If sourceVersion is specified at the build level, then that version takes precedence over this sourceVersion (at the project level).   For more information, see Source Version Sample with CodeBuild in the AWS CodeBuild User Guide. 
        public let sourceVersion: String?
        /// The tags for this build project. These tags are available for use by AWS services that support AWS CodeBuild build project tags.
        public let tags: [Tag]?
        /// How long, in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait before timing out any related build that did not get marked as completed. The default is 60 minutes.
        public let timeoutInMinutes: Int?
        /// Information about the VPC configuration that AWS CodeBuild accesses.
        public let vpcConfig: VpcConfig?
        /// Information about a webhook that connects repository events to a build project in AWS CodeBuild.
        public let webhook: Webhook?

        public init(arn: String? = nil, artifacts: ProjectArtifacts? = nil, badge: ProjectBadge? = nil, cache: ProjectCache? = nil, created: TimeStamp? = nil, description: String? = nil, encryptionKey: String? = nil, environment: ProjectEnvironment? = nil, fileSystemLocations: [ProjectFileSystemLocation]? = nil, lastModified: TimeStamp? = nil, logsConfig: LogsConfig? = nil, name: String? = nil, queuedTimeoutInMinutes: Int? = nil, secondaryArtifacts: [ProjectArtifacts]? = nil, secondarySources: [ProjectSource]? = nil, secondarySourceVersions: [ProjectSourceVersion]? = nil, serviceRole: String? = nil, source: ProjectSource? = nil, sourceVersion: String? = nil, tags: [Tag]? = nil, timeoutInMinutes: Int? = nil, vpcConfig: VpcConfig? = nil, webhook: Webhook? = nil) {
            self.arn = arn
            self.artifacts = artifacts
            self.badge = badge
            self.cache = cache
            self.created = created
            self.description = description
            self.encryptionKey = encryptionKey
            self.environment = environment
            self.fileSystemLocations = fileSystemLocations
            self.lastModified = lastModified
            self.logsConfig = logsConfig
            self.name = name
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySources = secondarySources
            self.secondarySourceVersions = secondarySourceVersions
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.tags = tags
            self.timeoutInMinutes = timeoutInMinutes
            self.vpcConfig = vpcConfig
            self.webhook = webhook
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case artifacts = "artifacts"
            case badge = "badge"
            case cache = "cache"
            case created = "created"
            case description = "description"
            case encryptionKey = "encryptionKey"
            case environment = "environment"
            case fileSystemLocations = "fileSystemLocations"
            case lastModified = "lastModified"
            case logsConfig = "logsConfig"
            case name = "name"
            case queuedTimeoutInMinutes = "queuedTimeoutInMinutes"
            case secondaryArtifacts = "secondaryArtifacts"
            case secondarySources = "secondarySources"
            case secondarySourceVersions = "secondarySourceVersions"
            case serviceRole = "serviceRole"
            case source = "source"
            case sourceVersion = "sourceVersion"
            case tags = "tags"
            case timeoutInMinutes = "timeoutInMinutes"
            case vpcConfig = "vpcConfig"
            case webhook = "webhook"
        }
    }

    public struct ProjectArtifacts: AWSEncodableShape & AWSDecodableShape {

        ///  An identifier for this artifact definition. 
        public let artifactIdentifier: String?
        ///  Set to true if you do not want your output artifacts encrypted. This option is valid only if your artifacts type is Amazon Simple Storage Service (Amazon S3). If this is set with another artifacts type, an invalidInputException is thrown. 
        public let encryptionDisabled: Bool?
        /// Information about the build output artifact location:   If type is set to CODEPIPELINE, AWS CodePipeline ignores this value if specified. This is because AWS CodePipeline manages its build output locations instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.   If type is set to S3, this is the name of the output bucket.  
        public let location: String?
        /// Along with path and namespaceType, the pattern that AWS CodeBuild uses to name and store the output artifact:   If type is set to CODEPIPELINE, AWS CodePipeline ignores this value if specified. This is because AWS CodePipeline manages its build output names instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.   If type is set to S3, this is the name of the output artifact object. If you set the name to be a forward slash ("/"), the artifact is stored in the root of the output bucket.   For example:    If path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to MyArtifact.zip, then the output artifact is stored in MyArtifacts/build-ID/MyArtifact.zip.     If path is empty, namespaceType is set to NONE, and name is set to "/", the output artifact is stored in the root of the output bucket.     If path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to "/", the output artifact is stored in MyArtifacts/build-ID .   
        public let name: String?
        /// Along with path and name, the pattern that AWS CodeBuild uses to determine the name and location to store the output artifact:   If type is set to CODEPIPELINE, AWS CodePipeline ignores this value if specified. This is because AWS CodePipeline manages its build output names instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.   If type is set to S3, valid values include:    BUILD_ID: Include the build ID in the location of the build output artifact.    NONE: Do not include the build ID. This is the default if namespaceType is not specified.     For example, if path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to MyArtifact.zip, the output artifact is stored in MyArtifacts/build-ID/MyArtifact.zip.
        public let namespaceType: ArtifactNamespace?
        ///  If this flag is set, a name specified in the buildspec file overrides the artifact name. The name specified in a buildspec file is calculated at build time and uses the Shell Command Language. For example, you can append a date and time to your artifact name so that it is always unique. 
        public let overrideArtifactName: Bool?
        /// The type of build output artifact to create:   If type is set to CODEPIPELINE, AWS CodePipeline ignores this value if specified. This is because AWS CodePipeline manages its build output artifacts instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.   If type is set to S3, valid values include:    NONE: AWS CodeBuild creates in the output bucket a folder that contains the build output. This is the default if packaging is not specified.    ZIP: AWS CodeBuild creates in the output bucket a ZIP file that contains the build output.    
        public let packaging: ArtifactPackaging?
        /// Along with namespaceType and name, the pattern that AWS CodeBuild uses to name and store the output artifact:   If type is set to CODEPIPELINE, AWS CodePipeline ignores this value if specified. This is because AWS CodePipeline manages its build output names instead of AWS CodeBuild.   If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.   If type is set to S3, this is the path to the output artifact. If path is not specified, path is not used.   For example, if path is set to MyArtifacts, namespaceType is set to NONE, and name is set to MyArtifact.zip, the output artifact is stored in the output bucket at MyArtifacts/MyArtifact.zip.
        public let path: String?
        /// The type of build output artifact. Valid values include:    CODEPIPELINE: The build project has build output generated through AWS CodePipeline.   The CODEPIPELINE type is not supported for secondaryArtifacts.     NO_ARTIFACTS: The build project does not produce any build output.    S3: The build project stores build output in Amazon Simple Storage Service (Amazon S3).  
        public let `type`: ArtifactsType

        public init(artifactIdentifier: String? = nil, encryptionDisabled: Bool? = nil, location: String? = nil, name: String? = nil, namespaceType: ArtifactNamespace? = nil, overrideArtifactName: Bool? = nil, packaging: ArtifactPackaging? = nil, path: String? = nil, type: ArtifactsType) {
            self.artifactIdentifier = artifactIdentifier
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.name = name
            self.namespaceType = namespaceType
            self.overrideArtifactName = overrideArtifactName
            self.packaging = packaging
            self.path = path
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case artifactIdentifier = "artifactIdentifier"
            case encryptionDisabled = "encryptionDisabled"
            case location = "location"
            case name = "name"
            case namespaceType = "namespaceType"
            case overrideArtifactName = "overrideArtifactName"
            case packaging = "packaging"
            case path = "path"
            case `type` = "type"
        }
    }

    public struct ProjectBadge: AWSDecodableShape {

        /// Set this to true to generate a publicly accessible URL for your project's build badge.
        public let badgeEnabled: Bool?
        /// The publicly-accessible URL through which you can access the build badge for your project.  The publicly accessible URL through which you can access the build badge for your project. 
        public let badgeRequestUrl: String?

        public init(badgeEnabled: Bool? = nil, badgeRequestUrl: String? = nil) {
            self.badgeEnabled = badgeEnabled
            self.badgeRequestUrl = badgeRequestUrl
        }

        private enum CodingKeys: String, CodingKey {
            case badgeEnabled = "badgeEnabled"
            case badgeRequestUrl = "badgeRequestUrl"
        }
    }

    public struct ProjectCache: AWSEncodableShape & AWSDecodableShape {

        /// Information about the cache location:     NO_CACHE or LOCAL: This value is ignored.    S3: This is the S3 bucket name/prefix.  
        public let location: String?
        ///  If you use a LOCAL cache, the local cache mode. You can use one or more local cache modes at the same time.     LOCAL_SOURCE_CACHE mode caches Git metadata for primary and secondary sources. After the cache is created, subsequent builds pull only the change between commits. This mode is a good choice for projects with a clean working directory and a source that is a large Git repository. If you choose this option and your project does not use a Git repository (GitHub, GitHub Enterprise, or Bitbucket), the option is ignored.     LOCAL_DOCKER_LAYER_CACHE mode caches existing Docker layers. This mode is a good choice for projects that build or pull large Docker images. It can prevent the performance issues caused by pulling large Docker images down from the network.      You can use a Docker layer cache in the Linux environment only.     The privileged flag must be set so that your project has the required Docker permissions.     You should consider the security implications before you use a Docker layer cache.          LOCAL_CUSTOM_CACHE mode caches directories you specify in the buildspec file. This mode is a good choice if your build scenario is not suited to one of the other three local cache modes. If you use a custom cache:     Only directories can be specified for caching. You cannot specify individual files.     Symlinks are used to reference cached directories.     Cached directories are linked to your build before it downloads its project sources. Cached items are overridden if a source item has the same name. Directories are specified using cache paths in the buildspec file.     
        public let modes: [CacheMode]?
        /// The type of cache used by the build project. Valid values include:    NO_CACHE: The build project does not use any cache.    S3: The build project reads and writes from and to S3.    LOCAL: The build project stores a cache locally on a build host that is only available to that build host.  
        public let `type`: CacheType

        public init(location: String? = nil, modes: [CacheMode]? = nil, type: CacheType) {
            self.location = location
            self.modes = modes
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case location = "location"
            case modes = "modes"
            case `type` = "type"
        }
    }

    public struct ProjectEnvironment: AWSEncodableShape & AWSDecodableShape {

        /// The certificate to use with this build project.
        public let certificate: String?
        /// Information about the compute resources the build project uses. Available values include:    BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds.    BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds.    BUILD_GENERAL1_LARGE: Use up to 16 GB memory and 8 vCPUs for builds, depending on your environment type.    BUILD_GENERAL1_2XLARGE: Use up to 145 GB memory, 72 vCPUs, and 824 GB of SSD storage for builds. This compute type supports Docker images up to 100 GB uncompressed.    If you use BUILD_GENERAL1_LARGE:     For environment type LINUX_CONTAINER, you can use up to 15 GB memory and 8 vCPUs for builds.     For environment type LINUX_GPU_CONTAINER, you can use up to 255 GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.    For environment type ARM_CONTAINER, you can use up to 16 GB memory and 8 vCPUs on ARM-based processors for builds.    For more information, see Build Environment Compute Types in the AWS CodeBuild User Guide. 
        public let computeType: ComputeType
        /// A set of environment variables to make available to builds for this build project.
        public let environmentVariables: [EnvironmentVariable]?
        /// The image tag or image digest that identifies the Docker image to use for this build project. Use the following formats:   For an image tag: registry/repository:tag. For example, to specify an image with the tag "latest," use registry/repository:latest.   For an image digest: registry/repository@digest. For example, to specify an image with the digest "sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf," use registry/repository@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf.  
        public let image: String
        ///  The type of credentials AWS CodeBuild uses to pull images in your build. There are two valid values:     CODEBUILD specifies that AWS CodeBuild uses its own credentials. This requires that you modify your ECR repository policy to trust AWS CodeBuild's service principal.     SERVICE_ROLE specifies that AWS CodeBuild uses your build project's service role.     When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. 
        public let imagePullCredentialsType: ImagePullCredentialsType?
        /// Enables running the Docker daemon inside a Docker container. Set to true only if the build project is used to build Docker images. Otherwise, a build that attempts to interact with the Docker daemon fails. The default setting is false. You can initialize the Docker daemon during the install phase of your build by adding one of the following sets of commands to the install phase of your buildspec file: If the operating system's base image is Ubuntu Linux:  - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&amp;   - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"  If the operating system's base image is Alpine Linux and the previous command does not work, add the -t argument to timeout:  - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&amp;   - timeout -t 15 sh -c "until docker info; do echo .; sleep 1; done" 
        public let privilegedMode: Bool?
        ///  The credentials for access to a private registry.
        public let registryCredential: RegistryCredential?
        /// The type of build environment to use for related builds.   The environment type ARM_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), Asia Pacific (Mumbai), Asia Pacific (Tokyo), Asia Pacific (Sydney), and EU (Frankfurt).   The environment type LINUX_CONTAINER with compute type build.general1.2xlarge is available only in regions US East (N. Virginia), US East (N. Virginia), US West (Oregon), Canada (Central), EU (Ireland), EU (London), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul), Asia Pacific (Singapore), Asia Pacific (Sydney), China (Beijing), and China (Ningxia).   The environment type LINUX_GPU_CONTAINER is available only in regions US East (N. Virginia), US East (N. Virginia), US West (Oregon), Canada (Central), EU (Ireland), EU (London), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul), Asia Pacific (Singapore), Asia Pacific (Sydney) , China (Beijing), and China (Ningxia).  
        public let `type`: EnvironmentType

        public init(certificate: String? = nil, computeType: ComputeType, environmentVariables: [EnvironmentVariable]? = nil, image: String, imagePullCredentialsType: ImagePullCredentialsType? = nil, privilegedMode: Bool? = nil, registryCredential: RegistryCredential? = nil, type: EnvironmentType) {
            self.certificate = certificate
            self.computeType = computeType
            self.environmentVariables = environmentVariables
            self.image = image
            self.imagePullCredentialsType = imagePullCredentialsType
            self.privilegedMode = privilegedMode
            self.registryCredential = registryCredential
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try self.environmentVariables?.forEach {
                try $0.validate(name: "\(name).environmentVariables[]")
            }
            try validate(self.image, name:"image", parent: name, min: 1)
            try self.registryCredential?.validate(name: "\(name).registryCredential")
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "certificate"
            case computeType = "computeType"
            case environmentVariables = "environmentVariables"
            case image = "image"
            case imagePullCredentialsType = "imagePullCredentialsType"
            case privilegedMode = "privilegedMode"
            case registryCredential = "registryCredential"
            case `type` = "type"
        }
    }

    public struct ProjectFileSystemLocation: AWSEncodableShape & AWSDecodableShape {

        ///  The name used to access a file system created by Amazon EFS. CodeBuild creates an environment variable by appending the identifier in all capital letters to CODEBUILD_. For example, if you specify my-efs for identifier, a new environment variable is create named CODEBUILD_MY-EFS.   The identifier is used to mount your file system. 
        public let identifier: String?
        ///  A string that specifies the location of the file system created by Amazon EFS. Its format is efs-dns-name:/directory-path. You can find the DNS name of file system when you view it in the AWS EFS console. The directory path is a path to a directory in the file system that CodeBuild mounts. For example, if the DNS name of a file system is fs-abcd1234.efs.us-west-2.amazonaws.com, and its mount directory is my-efs-mount-directory, then the location is fs-abcd1234.efs.us-west-2.amazonaws.com:/my-efs-mount-directory.   The directory path in the format efs-dns-name:/directory-path is optional. If you do not specify a directory path, the location is only the DNS name and CodeBuild mounts the entire file system. 
        public let location: String?
        ///  The mount options for a file system created by AWS EFS. The default mount options used by CodeBuild are nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2. For more information, see Recommended NFS Mount Options. 
        public let mountOptions: String?
        ///  The location in the container where you mount the file system. 
        public let mountPoint: String?
        ///  The type of the file system. The one supported type is EFS. 
        public let `type`: FileSystemType?

        public init(identifier: String? = nil, location: String? = nil, mountOptions: String? = nil, mountPoint: String? = nil, type: FileSystemType? = nil) {
            self.identifier = identifier
            self.location = location
            self.mountOptions = mountOptions
            self.mountPoint = mountPoint
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "identifier"
            case location = "location"
            case mountOptions = "mountOptions"
            case mountPoint = "mountPoint"
            case `type` = "type"
        }
    }

    public struct ProjectSource: AWSEncodableShape & AWSDecodableShape {

        /// Information about the authorization settings for AWS CodeBuild to access the source code to be built. This information is for the AWS CodeBuild console's use only. Your code should not get or set this information directly.
        public let auth: SourceAuth?
        /// The buildspec file declaration to use for the builds in this build project.  If this value is set, it can be either an inline buildspec definition, the path to an alternate buildspec file relative to the value of the built-in CODEBUILD_SRC_DIR environment variable, or the path to an S3 bucket. The bucket must be in the same AWS Region as the build project. Specify the buildspec file using its ARN (for example, arn:aws:s3:::my-codebuild-sample2/buildspec.yml). If this value is not provided or is set to an empty string, the source code must contain a buildspec file in its root directory. For more information, see Buildspec File Name and Storage Location. 
        public let buildspec: String?
        /// Information about the Git clone depth for the build project.
        public let gitCloneDepth: Int?
        ///  Information about the Git submodules configuration for the build project. 
        public let gitSubmodulesConfig: GitSubmodulesConfig?
        /// Enable this flag to ignore SSL warnings while connecting to the project source code.
        public let insecureSsl: Bool?
        /// Information about the location of the source code to be built. Valid values include:   For source code settings that are specified in the source action of a pipeline in AWS CodePipeline, location should not be specified. If it is specified, AWS CodePipeline ignores it. This is because AWS CodePipeline uses the settings in a pipeline's source action instead of this value.   For source code in an AWS CodeCommit repository, the HTTPS clone URL to the repository that contains the source code and the buildspec file (for example, https://git-codecommit.region-ID.amazonaws.com/v1/repos/repo-name ).   For source code in an Amazon Simple Storage Service (Amazon S3) input bucket, one of the following.     The path to the ZIP file that contains the source code (for example,  bucket-name/path/to/object-name.zip).     The path to the folder that contains the source code (for example,  bucket-name/path/to/source-code/folder/).      For source code in a GitHub repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your AWS account to your GitHub account. Use the AWS CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with GitHub, on the GitHub Authorize application page, for Organization access, choose Request access next to each repository you want to allow AWS CodeBuild to have access to, and then choose Authorize application. (After you have connected to your GitHub account, you do not need to finish creating the build project. You can leave the AWS CodeBuild console.) To instruct AWS CodeBuild to use this connection, in the source object, set the auth object's type value to OAUTH.   For source code in a Bitbucket repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your AWS account to your Bitbucket account. Use the AWS CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with Bitbucket, on the Bitbucket Confirm access to your account page, choose Grant access. (After you have connected to your Bitbucket account, you do not need to finish creating the build project. You can leave the AWS CodeBuild console.) To instruct AWS CodeBuild to use this connection, in the source object, set the auth object's type value to OAUTH.  
        public let location: String?
        ///  Set to true to report the status of a build's start and finish to your source provider. This option is valid only when your source provider is GitHub, GitHub Enterprise, or Bitbucket. If this is set and you use a different source provider, an invalidInputException is thrown.    The status of a build triggered by a webhook is always reported to your source provider.  
        public let reportBuildStatus: Bool?
        ///  An identifier for this project source. 
        public let sourceIdentifier: String?
        /// The type of repository that contains the source code to be built. Valid values include:    BITBUCKET: The source code is in a Bitbucket repository.    CODECOMMIT: The source code is in an AWS CodeCommit repository.    CODEPIPELINE: The source code settings are specified in the source action of a pipeline in AWS CodePipeline.    GITHUB: The source code is in a GitHub repository.    GITHUB_ENTERPRISE: The source code is in a GitHub Enterprise repository.    NO_SOURCE: The project does not have input source code.    S3: The source code is in an Amazon Simple Storage Service (Amazon S3) input bucket.  
        public let `type`: SourceType

        public init(auth: SourceAuth? = nil, buildspec: String? = nil, gitCloneDepth: Int? = nil, gitSubmodulesConfig: GitSubmodulesConfig? = nil, insecureSsl: Bool? = nil, location: String? = nil, reportBuildStatus: Bool? = nil, sourceIdentifier: String? = nil, type: SourceType) {
            self.auth = auth
            self.buildspec = buildspec
            self.gitCloneDepth = gitCloneDepth
            self.gitSubmodulesConfig = gitSubmodulesConfig
            self.insecureSsl = insecureSsl
            self.location = location
            self.reportBuildStatus = reportBuildStatus
            self.sourceIdentifier = sourceIdentifier
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try validate(self.gitCloneDepth, name:"gitCloneDepth", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case auth = "auth"
            case buildspec = "buildspec"
            case gitCloneDepth = "gitCloneDepth"
            case gitSubmodulesConfig = "gitSubmodulesConfig"
            case insecureSsl = "insecureSsl"
            case location = "location"
            case reportBuildStatus = "reportBuildStatus"
            case sourceIdentifier = "sourceIdentifier"
            case `type` = "type"
        }
    }

    public struct ProjectSourceVersion: AWSEncodableShape & AWSDecodableShape {

        /// An identifier for a source in the build project.
        public let sourceIdentifier: String
        /// The source version for the corresponding source identifier. If specified, must be one of:   For AWS CodeCommit: the commit ID, branch, or Git tag to use.   For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example, pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Amazon Simple Storage Service (Amazon S3): the version ID of the object that represents the build input ZIP file to use.    For more information, see Source Version Sample with CodeBuild in the AWS CodeBuild User Guide. 
        public let sourceVersion: String

        public init(sourceIdentifier: String, sourceVersion: String) {
            self.sourceIdentifier = sourceIdentifier
            self.sourceVersion = sourceVersion
        }

        private enum CodingKeys: String, CodingKey {
            case sourceIdentifier = "sourceIdentifier"
            case sourceVersion = "sourceVersion"
        }
    }

    public struct PutResourcePolicyInput: AWSEncodableShape {

        ///  A JSON-formatted resource policy. For more information, see Sharing a Project and Sharing a Report Group in the AWS CodeBuild User Guide. 
        public let policy: String
        ///  The ARN of the Project or ReportGroup resource you want to associate with a resource policy. 
        public let resourceArn: String

        public init(policy: String, resourceArn: String) {
            self.policy = policy
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try validate(self.policy, name:"policy", parent: name, min: 1)
            try validate(self.resourceArn, name:"resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "policy"
            case resourceArn = "resourceArn"
        }
    }

    public struct PutResourcePolicyOutput: AWSDecodableShape {

        ///  The ARN of the Project or ReportGroup resource that is associated with a resource policy. 
        public let resourceArn: String?

        public init(resourceArn: String? = nil) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct RegistryCredential: AWSEncodableShape & AWSDecodableShape {

        ///  The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.    The credential can use the name of the credentials only if they exist in your current AWS Region.  
        public let credential: String
        ///  The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager. 
        public let credentialProvider: CredentialProviderType

        public init(credential: String, credentialProvider: CredentialProviderType) {
            self.credential = credential
            self.credentialProvider = credentialProvider
        }

        public func validate(name: String) throws {
            try validate(self.credential, name:"credential", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case credential = "credential"
            case credentialProvider = "credentialProvider"
        }
    }

    public struct Report: AWSDecodableShape {

        ///  The ARN of the report run. 
        public let arn: String?
        ///  The date and time this report run occurred. 
        public let created: TimeStamp?
        ///  The ARN of the build run that generated this report. 
        public let executionId: String?
        ///  The date and time a report expires. A report expires 30 days after it is created. An expired report is not available to view in CodeBuild. 
        public let expired: TimeStamp?
        ///  Information about where the raw data used to generate this report was exported. 
        public let exportConfig: ReportExportConfig?
        ///  The name of the report that was run. 
        public let name: String?
        ///  The ARN of the report group associated with this report. 
        public let reportGroupArn: String?
        ///  The status of this report. 
        public let status: ReportStatusType?
        ///  A TestReportSummary object that contains information about this test report. 
        public let testSummary: TestReportSummary?
        ///  A boolean that specifies if this report run is truncated. The list of test cases is truncated after the maximum number of test cases is reached. 
        public let truncated: Bool?
        ///  The type of the report that was run. 
        public let `type`: ReportType?

        public init(arn: String? = nil, created: TimeStamp? = nil, executionId: String? = nil, expired: TimeStamp? = nil, exportConfig: ReportExportConfig? = nil, name: String? = nil, reportGroupArn: String? = nil, status: ReportStatusType? = nil, testSummary: TestReportSummary? = nil, truncated: Bool? = nil, type: ReportType? = nil) {
            self.arn = arn
            self.created = created
            self.executionId = executionId
            self.expired = expired
            self.exportConfig = exportConfig
            self.name = name
            self.reportGroupArn = reportGroupArn
            self.status = status
            self.testSummary = testSummary
            self.truncated = truncated
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case created = "created"
            case executionId = "executionId"
            case expired = "expired"
            case exportConfig = "exportConfig"
            case name = "name"
            case reportGroupArn = "reportGroupArn"
            case status = "status"
            case testSummary = "testSummary"
            case truncated = "truncated"
            case `type` = "type"
        }
    }

    public struct ReportExportConfig: AWSEncodableShape & AWSDecodableShape {

        ///  The export configuration type. Valid values are:     S3: The report results are exported to an S3 bucket.     NO_EXPORT: The report results are not exported.   
        public let exportConfigType: ReportExportConfigType?
        ///  A S3ReportExportConfig object that contains information about the S3 bucket where the run of a report is exported. 
        public let s3Destination: S3ReportExportConfig?

        public init(exportConfigType: ReportExportConfigType? = nil, s3Destination: S3ReportExportConfig? = nil) {
            self.exportConfigType = exportConfigType
            self.s3Destination = s3Destination
        }

        public func validate(name: String) throws {
            try self.s3Destination?.validate(name: "\(name).s3Destination")
        }

        private enum CodingKeys: String, CodingKey {
            case exportConfigType = "exportConfigType"
            case s3Destination = "s3Destination"
        }
    }

    public struct ReportFilter: AWSEncodableShape {

        ///  The status used to filter reports. You can filter using one status only. 
        public let status: ReportStatusType?

        public init(status: ReportStatusType? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct ReportGroup: AWSDecodableShape {

        ///  The ARN of a ReportGroup. 
        public let arn: String?
        ///  The date and time this ReportGroup was created. 
        public let created: TimeStamp?
        ///  Information about the destination where the raw data of this ReportGroup is exported. 
        public let exportConfig: ReportExportConfig?
        ///  The date and time this ReportGroup was last modified. 
        public let lastModified: TimeStamp?
        ///  The name of a ReportGroup. 
        public let name: String?
        ///  The type of the ReportGroup. The one valid value is TEST. 
        public let `type`: ReportType?

        public init(arn: String? = nil, created: TimeStamp? = nil, exportConfig: ReportExportConfig? = nil, lastModified: TimeStamp? = nil, name: String? = nil, type: ReportType? = nil) {
            self.arn = arn
            self.created = created
            self.exportConfig = exportConfig
            self.lastModified = lastModified
            self.name = name
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case created = "created"
            case exportConfig = "exportConfig"
            case lastModified = "lastModified"
            case name = "name"
            case `type` = "type"
        }
    }

    public struct S3LogsConfig: AWSEncodableShape & AWSDecodableShape {

        ///  Set to true if you do not want your S3 build log output encrypted. By default S3 build logs are encrypted. 
        public let encryptionDisabled: Bool?
        ///  The ARN of an S3 bucket and the path prefix for S3 logs. If your Amazon S3 bucket name is my-bucket, and your path prefix is build-log, then acceptable formats are my-bucket/build-log or arn:aws:s3:::my-bucket/build-log. 
        public let location: String?
        /// The current status of the S3 build logs. Valid values are:    ENABLED: S3 build logs are enabled for this build project.    DISABLED: S3 build logs are not enabled for this build project.  
        public let status: LogsConfigStatusType

        public init(encryptionDisabled: Bool? = nil, location: String? = nil, status: LogsConfigStatusType) {
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case encryptionDisabled = "encryptionDisabled"
            case location = "location"
            case status = "status"
        }
    }

    public struct S3ReportExportConfig: AWSEncodableShape & AWSDecodableShape {

        ///  The name of the S3 bucket where the raw data of a report are exported. 
        public let bucket: String?
        ///  A boolean value that specifies if the results of a report are encrypted. 
        public let encryptionDisabled: Bool?
        ///  The encryption key for the report's encrypted raw data. 
        public let encryptionKey: String?
        ///  The type of build output artifact to create. Valid values include:     NONE: AWS CodeBuild creates the raw data in the output bucket. This is the default if packaging is not specified.     ZIP: AWS CodeBuild creates a ZIP file with the raw data in the output bucket.   
        public let packaging: ReportPackagingType?
        ///  The path to the exported report's raw data results. 
        public let path: String?

        public init(bucket: String? = nil, encryptionDisabled: Bool? = nil, encryptionKey: String? = nil, packaging: ReportPackagingType? = nil, path: String? = nil) {
            self.bucket = bucket
            self.encryptionDisabled = encryptionDisabled
            self.encryptionKey = encryptionKey
            self.packaging = packaging
            self.path = path
        }

        public func validate(name: String) throws {
            try validate(self.bucket, name:"bucket", parent: name, min: 1)
            try validate(self.encryptionKey, name:"encryptionKey", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "bucket"
            case encryptionDisabled = "encryptionDisabled"
            case encryptionKey = "encryptionKey"
            case packaging = "packaging"
            case path = "path"
        }
    }

    public struct SourceAuth: AWSEncodableShape & AWSDecodableShape {

        /// The resource value that applies to the specified authorization type.
        public let resource: String?
        ///   This data type is deprecated and is no longer accurate or used.   The authorization type to use. The only valid value is OAUTH, which represents the OAuth authorization type.
        public let `type`: SourceAuthType

        public init(resource: String? = nil, type: SourceAuthType) {
            self.resource = resource
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "resource"
            case `type` = "type"
        }
    }

    public struct SourceCredentialsInfo: AWSDecodableShape {

        ///  The Amazon Resource Name (ARN) of the token. 
        public let arn: String?
        ///  The type of authentication used by the credentials. Valid options are OAUTH, BASIC_AUTH, or PERSONAL_ACCESS_TOKEN. 
        public let authType: AuthType?
        ///  The type of source provider. The valid options are GITHUB, GITHUB_ENTERPRISE, or BITBUCKET. 
        public let serverType: ServerType?

        public init(arn: String? = nil, authType: AuthType? = nil, serverType: ServerType? = nil) {
            self.arn = arn
            self.authType = authType
            self.serverType = serverType
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case authType = "authType"
            case serverType = "serverType"
        }
    }

    public struct StartBuildInput: AWSEncodableShape {

        /// Build output artifact settings that override, for this build only, the latest ones already defined in the build project.
        public let artifactsOverride: ProjectArtifacts?
        /// A buildspec file declaration that overrides, for this build only, the latest one already defined in the build project.  If this value is set, it can be either an inline buildspec definition, the path to an alternate buildspec file relative to the value of the built-in CODEBUILD_SRC_DIR environment variable, or the path to an S3 bucket. The bucket must be in the same AWS Region as the build project. Specify the buildspec file using its ARN (for example, arn:aws:s3:::my-codebuild-sample2/buildspec.yml). If this value is not provided or is set to an empty string, the source code must contain a buildspec file in its root directory. For more information, see Buildspec File Name and Storage Location. 
        public let buildspecOverride: String?
        /// A ProjectCache object specified for this build that overrides the one defined in the build project.
        public let cacheOverride: ProjectCache?
        /// The name of a certificate for this build that overrides the one specified in the build project.
        public let certificateOverride: String?
        /// The name of a compute type for this build that overrides the one specified in the build project.
        public let computeTypeOverride: ComputeType?
        /// The AWS Key Management Service (AWS KMS) customer master key (CMK) that overrides the one specified in the build project. The CMK key encrypts the build output artifacts.   You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key.   You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/alias-name ).
        public let encryptionKeyOverride: String?
        /// A container type for this build that overrides the one specified in the build project.
        public let environmentTypeOverride: EnvironmentType?
        /// A set of environment variables that overrides, for this build only, the latest ones already defined in the build project.
        public let environmentVariablesOverride: [EnvironmentVariable]?
        /// The user-defined depth of history, with a minimum value of 0, that overrides, for this build only, any previous depth of history defined in the build project.
        public let gitCloneDepthOverride: Int?
        ///  Information about the Git submodules configuration for this build of an AWS CodeBuild build project. 
        public let gitSubmodulesConfigOverride: GitSubmodulesConfig?
        /// A unique, case sensitive identifier you provide to ensure the idempotency of the StartBuild request. The token is included in the StartBuild request and is valid for 12 hours. If you repeat the StartBuild request with the same token, but change a parameter, AWS CodeBuild returns a parameter mismatch error. 
        public let idempotencyToken: String?
        /// The name of an image for this build that overrides the one specified in the build project.
        public let imageOverride: String?
        ///  The type of credentials AWS CodeBuild uses to pull images in your build. There are two valid values:     CODEBUILD specifies that AWS CodeBuild uses its own credentials. This requires that you modify your ECR repository policy to trust AWS CodeBuild's service principal.    SERVICE_ROLE specifies that AWS CodeBuild uses your build project's service role.     When using a cross-account or private registry image, you must use SERVICE_ROLE credentials. When using an AWS CodeBuild curated image, you must use CODEBUILD credentials. 
        public let imagePullCredentialsTypeOverride: ImagePullCredentialsType?
        /// Enable this flag to override the insecure SSL setting that is specified in the build project. The insecure SSL setting determines whether to ignore SSL warnings while connecting to the project source code. This override applies only if the build's source is GitHub Enterprise.
        public let insecureSslOverride: Bool?
        ///  Log settings for this build that override the log settings defined in the build project. 
        public let logsConfigOverride: LogsConfig?
        /// Enable this flag to override privileged mode in the build project.
        public let privilegedModeOverride: Bool?
        /// The name of the AWS CodeBuild build project to start running a build.
        public let projectName: String
        ///  The number of minutes a build is allowed to be queued before it times out. 
        public let queuedTimeoutInMinutesOverride: Int?
        ///  The credentials for access to a private registry. 
        public let registryCredentialOverride: RegistryCredential?
        ///  Set to true to report to your source provider the status of a build's start and completion. If you use this option with a source provider other than GitHub, GitHub Enterprise, or Bitbucket, an invalidInputException is thrown.    The status of a build triggered by a webhook is always reported to your source provider.  
        public let reportBuildStatusOverride: Bool?
        ///  An array of ProjectArtifacts objects. 
        public let secondaryArtifactsOverride: [ProjectArtifacts]?
        ///  An array of ProjectSource objects. 
        public let secondarySourcesOverride: [ProjectSource]?
        ///  An array of ProjectSourceVersion objects that specify one or more versions of the project's secondary sources to be used for this build only. 
        public let secondarySourcesVersionOverride: [ProjectSourceVersion]?
        /// The name of a service role for this build that overrides the one specified in the build project.
        public let serviceRoleOverride: String?
        /// An authorization type for this build that overrides the one defined in the build project. This override applies only if the build project's source is BitBucket or GitHub.
        public let sourceAuthOverride: SourceAuth?
        /// A location that overrides, for this build, the source location for the one defined in the build project.
        public let sourceLocationOverride: String?
        /// A source input type, for this build, that overrides the source input defined in the build project.
        public let sourceTypeOverride: SourceType?
        /// A version of the build input to be built, for this build only. If not specified, the latest version is used. If specified, must be one of:   For AWS CodeCommit: the commit ID, branch, or Git tag to use.   For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Amazon Simple Storage Service (Amazon S3): the version ID of the object that represents the build input ZIP file to use.    If sourceVersion is specified at the project level, then this sourceVersion (at the build level) takes precedence.   For more information, see Source Version Sample with CodeBuild in the AWS CodeBuild User Guide. 
        public let sourceVersion: String?
        /// The number of build timeout minutes, from 5 to 480 (8 hours), that overrides, for this build only, the latest setting already defined in the build project.
        public let timeoutInMinutesOverride: Int?

        public init(artifactsOverride: ProjectArtifacts? = nil, buildspecOverride: String? = nil, cacheOverride: ProjectCache? = nil, certificateOverride: String? = nil, computeTypeOverride: ComputeType? = nil, encryptionKeyOverride: String? = nil, environmentTypeOverride: EnvironmentType? = nil, environmentVariablesOverride: [EnvironmentVariable]? = nil, gitCloneDepthOverride: Int? = nil, gitSubmodulesConfigOverride: GitSubmodulesConfig? = nil, idempotencyToken: String? = nil, imageOverride: String? = nil, imagePullCredentialsTypeOverride: ImagePullCredentialsType? = nil, insecureSslOverride: Bool? = nil, logsConfigOverride: LogsConfig? = nil, privilegedModeOverride: Bool? = nil, projectName: String, queuedTimeoutInMinutesOverride: Int? = nil, registryCredentialOverride: RegistryCredential? = nil, reportBuildStatusOverride: Bool? = nil, secondaryArtifactsOverride: [ProjectArtifacts]? = nil, secondarySourcesOverride: [ProjectSource]? = nil, secondarySourcesVersionOverride: [ProjectSourceVersion]? = nil, serviceRoleOverride: String? = nil, sourceAuthOverride: SourceAuth? = nil, sourceLocationOverride: String? = nil, sourceTypeOverride: SourceType? = nil, sourceVersion: String? = nil, timeoutInMinutesOverride: Int? = nil) {
            self.artifactsOverride = artifactsOverride
            self.buildspecOverride = buildspecOverride
            self.cacheOverride = cacheOverride
            self.certificateOverride = certificateOverride
            self.computeTypeOverride = computeTypeOverride
            self.encryptionKeyOverride = encryptionKeyOverride
            self.environmentTypeOverride = environmentTypeOverride
            self.environmentVariablesOverride = environmentVariablesOverride
            self.gitCloneDepthOverride = gitCloneDepthOverride
            self.gitSubmodulesConfigOverride = gitSubmodulesConfigOverride
            self.idempotencyToken = idempotencyToken
            self.imageOverride = imageOverride
            self.imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverride
            self.insecureSslOverride = insecureSslOverride
            self.logsConfigOverride = logsConfigOverride
            self.privilegedModeOverride = privilegedModeOverride
            self.projectName = projectName
            self.queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverride
            self.registryCredentialOverride = registryCredentialOverride
            self.reportBuildStatusOverride = reportBuildStatusOverride
            self.secondaryArtifactsOverride = secondaryArtifactsOverride
            self.secondarySourcesOverride = secondarySourcesOverride
            self.secondarySourcesVersionOverride = secondarySourcesVersionOverride
            self.serviceRoleOverride = serviceRoleOverride
            self.sourceAuthOverride = sourceAuthOverride
            self.sourceLocationOverride = sourceLocationOverride
            self.sourceTypeOverride = sourceTypeOverride
            self.sourceVersion = sourceVersion
            self.timeoutInMinutesOverride = timeoutInMinutesOverride
        }

        public func validate(name: String) throws {
            try validate(self.encryptionKeyOverride, name:"encryptionKeyOverride", parent: name, min: 1)
            try self.environmentVariablesOverride?.forEach {
                try $0.validate(name: "\(name).environmentVariablesOverride[]")
            }
            try validate(self.gitCloneDepthOverride, name:"gitCloneDepthOverride", parent: name, min: 0)
            try validate(self.imageOverride, name:"imageOverride", parent: name, min: 1)
            try validate(self.projectName, name:"projectName", parent: name, min: 1)
            try validate(self.queuedTimeoutInMinutesOverride, name:"queuedTimeoutInMinutesOverride", parent: name, max: 480)
            try validate(self.queuedTimeoutInMinutesOverride, name:"queuedTimeoutInMinutesOverride", parent: name, min: 5)
            try self.registryCredentialOverride?.validate(name: "\(name).registryCredentialOverride")
            try validate(self.secondaryArtifactsOverride, name:"secondaryArtifactsOverride", parent: name, max: 12)
            try validate(self.secondaryArtifactsOverride, name:"secondaryArtifactsOverride", parent: name, min: 0)
            try self.secondarySourcesOverride?.forEach {
                try $0.validate(name: "\(name).secondarySourcesOverride[]")
            }
            try validate(self.secondarySourcesOverride, name:"secondarySourcesOverride", parent: name, max: 12)
            try validate(self.secondarySourcesOverride, name:"secondarySourcesOverride", parent: name, min: 0)
            try validate(self.secondarySourcesVersionOverride, name:"secondarySourcesVersionOverride", parent: name, max: 12)
            try validate(self.secondarySourcesVersionOverride, name:"secondarySourcesVersionOverride", parent: name, min: 0)
            try validate(self.serviceRoleOverride, name:"serviceRoleOverride", parent: name, min: 1)
            try validate(self.timeoutInMinutesOverride, name:"timeoutInMinutesOverride", parent: name, max: 480)
            try validate(self.timeoutInMinutesOverride, name:"timeoutInMinutesOverride", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case artifactsOverride = "artifactsOverride"
            case buildspecOverride = "buildspecOverride"
            case cacheOverride = "cacheOverride"
            case certificateOverride = "certificateOverride"
            case computeTypeOverride = "computeTypeOverride"
            case encryptionKeyOverride = "encryptionKeyOverride"
            case environmentTypeOverride = "environmentTypeOverride"
            case environmentVariablesOverride = "environmentVariablesOverride"
            case gitCloneDepthOverride = "gitCloneDepthOverride"
            case gitSubmodulesConfigOverride = "gitSubmodulesConfigOverride"
            case idempotencyToken = "idempotencyToken"
            case imageOverride = "imageOverride"
            case imagePullCredentialsTypeOverride = "imagePullCredentialsTypeOverride"
            case insecureSslOverride = "insecureSslOverride"
            case logsConfigOverride = "logsConfigOverride"
            case privilegedModeOverride = "privilegedModeOverride"
            case projectName = "projectName"
            case queuedTimeoutInMinutesOverride = "queuedTimeoutInMinutesOverride"
            case registryCredentialOverride = "registryCredentialOverride"
            case reportBuildStatusOverride = "reportBuildStatusOverride"
            case secondaryArtifactsOverride = "secondaryArtifactsOverride"
            case secondarySourcesOverride = "secondarySourcesOverride"
            case secondarySourcesVersionOverride = "secondarySourcesVersionOverride"
            case serviceRoleOverride = "serviceRoleOverride"
            case sourceAuthOverride = "sourceAuthOverride"
            case sourceLocationOverride = "sourceLocationOverride"
            case sourceTypeOverride = "sourceTypeOverride"
            case sourceVersion = "sourceVersion"
            case timeoutInMinutesOverride = "timeoutInMinutesOverride"
        }
    }

    public struct StartBuildOutput: AWSDecodableShape {

        /// Information about the build to be run.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case build = "build"
        }
    }

    public struct StopBuildInput: AWSEncodableShape {

        /// The ID of the build.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try validate(self.id, name:"id", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
        }
    }

    public struct StopBuildOutput: AWSDecodableShape {

        /// Information about the build.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case build = "build"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {

        /// The tag's key.
        public let key: String?
        /// The tag's value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try validate(self.key, name:"key", parent: name, max: 127)
            try validate(self.key, name:"key", parent: name, min: 1)
            try validate(self.key, name:"key", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=@+\\-]*)$")
            try validate(self.value, name:"value", parent: name, max: 255)
            try validate(self.value, name:"value", parent: name, min: 1)
            try validate(self.value, name:"value", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=@+\\-]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct TestCase: AWSDecodableShape {

        ///  The number of nanoseconds it took to run this test case. 
        public let durationInNanoSeconds: Int64?
        ///  The date and time a test case expires. A test case expires 30 days after it is created. An expired test case is not available to view in CodeBuild. 
        public let expired: TimeStamp?
        ///  A message associated with a test case. For example, an error message or stack trace. 
        public let message: String?
        ///  The name of the test case. 
        public let name: String?
        ///  A string that is applied to a series of related test cases. CodeBuild generates the prefix. The prefix depends on the framework used to generate the tests. 
        public let prefix: String?
        ///  The ARN of the report to which the test case belongs. 
        public let reportArn: String?
        ///  The status returned by the test case after it was run. Valid statuses are SUCCEEDED, FAILED, ERROR, SKIPPED, and UNKNOWN. 
        public let status: String?
        ///  The path to the raw data file that contains the test result. 
        public let testRawDataPath: String?

        public init(durationInNanoSeconds: Int64? = nil, expired: TimeStamp? = nil, message: String? = nil, name: String? = nil, prefix: String? = nil, reportArn: String? = nil, status: String? = nil, testRawDataPath: String? = nil) {
            self.durationInNanoSeconds = durationInNanoSeconds
            self.expired = expired
            self.message = message
            self.name = name
            self.prefix = prefix
            self.reportArn = reportArn
            self.status = status
            self.testRawDataPath = testRawDataPath
        }

        private enum CodingKeys: String, CodingKey {
            case durationInNanoSeconds = "durationInNanoSeconds"
            case expired = "expired"
            case message = "message"
            case name = "name"
            case prefix = "prefix"
            case reportArn = "reportArn"
            case status = "status"
            case testRawDataPath = "testRawDataPath"
        }
    }

    public struct TestCaseFilter: AWSEncodableShape {

        ///  The status used to filter test cases. Valid statuses are SUCCEEDED, FAILED, ERROR, SKIPPED, and UNKNOWN. A TestCaseFilter can have one status. 
        public let status: String?

        public init(status: String? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct TestReportSummary: AWSDecodableShape {

        ///  The number of nanoseconds it took to run all of the test cases in this report. 
        public let durationInNanoSeconds: Int64
        ///  A map that contains the number of each type of status returned by the test results in this TestReportSummary. 
        public let statusCounts: [String: Int]
        ///  The number of test cases in this TestReportSummary. The total includes truncated test cases. 
        public let total: Int

        public init(durationInNanoSeconds: Int64, statusCounts: [String: Int], total: Int) {
            self.durationInNanoSeconds = durationInNanoSeconds
            self.statusCounts = statusCounts
            self.total = total
        }

        private enum CodingKeys: String, CodingKey {
            case durationInNanoSeconds = "durationInNanoSeconds"
            case statusCounts = "statusCounts"
            case total = "total"
        }
    }

    public struct UpdateProjectInput: AWSEncodableShape {

        /// Information to be changed about the build output artifacts for the build project.
        public let artifacts: ProjectArtifacts?
        /// Set this to true to generate a publicly accessible URL for your project's build badge.
        public let badgeEnabled: Bool?
        /// Stores recently used information so that it can be quickly accessed at a later time.
        public let cache: ProjectCache?
        /// A new or replacement description of the build project.
        public let description: String?
        /// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output artifacts.   You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key.   You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/alias-name ).
        public let encryptionKey: String?
        /// Information to be changed about the build environment for the build project.
        public let environment: ProjectEnvironment?
        ///  An array of ProjectFileSystemLocation objects for a CodeBuild build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System. 
        public let fileSystemLocations: [ProjectFileSystemLocation]?
        ///  Information about logs for the build project. A project can create logs in Amazon CloudWatch Logs, logs in an S3 bucket, or both. 
        public let logsConfig: LogsConfig?
        /// The name of the build project.  You cannot change a build project's name. 
        public let name: String
        ///  The number of minutes a build is allowed to be queued before it times out. 
        public let queuedTimeoutInMinutes: Int?
        ///  An array of ProjectSource objects. 
        public let secondaryArtifacts: [ProjectArtifacts]?
        ///  An array of ProjectSource objects. 
        public let secondarySources: [ProjectSource]?
        ///  An array of ProjectSourceVersion objects. If secondarySourceVersions is specified at the build level, then they take over these secondarySourceVersions (at the project level). 
        public let secondarySourceVersions: [ProjectSourceVersion]?
        /// The replacement ARN of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        public let serviceRole: String?
        /// Information to be changed about the build input source code for the build project.
        public let source: ProjectSource?
        ///  A version of the build input to be built for this project. If not specified, the latest version is used. If specified, it must be one of:    For AWS CodeCommit: the commit ID, branch, or Git tag to use.   For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Amazon Simple Storage Service (Amazon S3): the version ID of the object that represents the build input ZIP file to use.    If sourceVersion is specified at the build level, then that version takes precedence over this sourceVersion (at the project level).   For more information, see Source Version Sample with CodeBuild in the AWS CodeBuild User Guide. 
        public let sourceVersion: String?
        /// The replacement set of tags for this build project. These tags are available for use by AWS services that support AWS CodeBuild build project tags.
        public let tags: [Tag]?
        /// The replacement value in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait before timing out any related build that did not get marked as completed.
        public let timeoutInMinutes: Int?
        /// VpcConfig enables AWS CodeBuild to access resources in an Amazon VPC.
        public let vpcConfig: VpcConfig?

        public init(artifacts: ProjectArtifacts? = nil, badgeEnabled: Bool? = nil, cache: ProjectCache? = nil, description: String? = nil, encryptionKey: String? = nil, environment: ProjectEnvironment? = nil, fileSystemLocations: [ProjectFileSystemLocation]? = nil, logsConfig: LogsConfig? = nil, name: String, queuedTimeoutInMinutes: Int? = nil, secondaryArtifacts: [ProjectArtifacts]? = nil, secondarySources: [ProjectSource]? = nil, secondarySourceVersions: [ProjectSourceVersion]? = nil, serviceRole: String? = nil, source: ProjectSource? = nil, sourceVersion: String? = nil, tags: [Tag]? = nil, timeoutInMinutes: Int? = nil, vpcConfig: VpcConfig? = nil) {
            self.artifacts = artifacts
            self.badgeEnabled = badgeEnabled
            self.cache = cache
            self.description = description
            self.encryptionKey = encryptionKey
            self.environment = environment
            self.fileSystemLocations = fileSystemLocations
            self.logsConfig = logsConfig
            self.name = name
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySources = secondarySources
            self.secondarySourceVersions = secondarySourceVersions
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.tags = tags
            self.timeoutInMinutes = timeoutInMinutes
            self.vpcConfig = vpcConfig
        }

        public func validate(name: String) throws {
            try validate(self.description, name:"description", parent: name, max: 255)
            try validate(self.description, name:"description", parent: name, min: 0)
            try validate(self.encryptionKey, name:"encryptionKey", parent: name, min: 1)
            try self.environment?.validate(name: "\(name).environment")
            try validate(self.name, name:"name", parent: name, min: 1)
            try validate(self.queuedTimeoutInMinutes, name:"queuedTimeoutInMinutes", parent: name, max: 480)
            try validate(self.queuedTimeoutInMinutes, name:"queuedTimeoutInMinutes", parent: name, min: 5)
            try validate(self.secondaryArtifacts, name:"secondaryArtifacts", parent: name, max: 12)
            try validate(self.secondaryArtifacts, name:"secondaryArtifacts", parent: name, min: 0)
            try self.secondarySources?.forEach {
                try $0.validate(name: "\(name).secondarySources[]")
            }
            try validate(self.secondarySources, name:"secondarySources", parent: name, max: 12)
            try validate(self.secondarySources, name:"secondarySources", parent: name, min: 0)
            try validate(self.secondarySourceVersions, name:"secondarySourceVersions", parent: name, max: 12)
            try validate(self.secondarySourceVersions, name:"secondarySourceVersions", parent: name, min: 0)
            try validate(self.serviceRole, name:"serviceRole", parent: name, min: 1)
            try self.source?.validate(name: "\(name).source")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try validate(self.tags, name:"tags", parent: name, max: 50)
            try validate(self.tags, name:"tags", parent: name, min: 0)
            try validate(self.timeoutInMinutes, name:"timeoutInMinutes", parent: name, max: 480)
            try validate(self.timeoutInMinutes, name:"timeoutInMinutes", parent: name, min: 5)
            try self.vpcConfig?.validate(name: "\(name).vpcConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case artifacts = "artifacts"
            case badgeEnabled = "badgeEnabled"
            case cache = "cache"
            case description = "description"
            case encryptionKey = "encryptionKey"
            case environment = "environment"
            case fileSystemLocations = "fileSystemLocations"
            case logsConfig = "logsConfig"
            case name = "name"
            case queuedTimeoutInMinutes = "queuedTimeoutInMinutes"
            case secondaryArtifacts = "secondaryArtifacts"
            case secondarySources = "secondarySources"
            case secondarySourceVersions = "secondarySourceVersions"
            case serviceRole = "serviceRole"
            case source = "source"
            case sourceVersion = "sourceVersion"
            case tags = "tags"
            case timeoutInMinutes = "timeoutInMinutes"
            case vpcConfig = "vpcConfig"
        }
    }

    public struct UpdateProjectOutput: AWSDecodableShape {

        /// Information about the build project that was changed.
        public let project: Project?

        public init(project: Project? = nil) {
            self.project = project
        }

        private enum CodingKeys: String, CodingKey {
            case project = "project"
        }
    }

    public struct UpdateReportGroupInput: AWSEncodableShape {

        ///  The ARN of the report group to update. 
        public let arn: String
        ///  Used to specify an updated export type. Valid values are:     S3: The report results are exported to an S3 bucket.     NO_EXPORT: The report results are not exported.   
        public let exportConfig: ReportExportConfig?

        public init(arn: String, exportConfig: ReportExportConfig? = nil) {
            self.arn = arn
            self.exportConfig = exportConfig
        }

        public func validate(name: String) throws {
            try validate(self.arn, name:"arn", parent: name, min: 1)
            try self.exportConfig?.validate(name: "\(name).exportConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case exportConfig = "exportConfig"
        }
    }

    public struct UpdateReportGroupOutput: AWSDecodableShape {

        ///  Information about the updated report group. 
        public let reportGroup: ReportGroup?

        public init(reportGroup: ReportGroup? = nil) {
            self.reportGroup = reportGroup
        }

        private enum CodingKeys: String, CodingKey {
            case reportGroup = "reportGroup"
        }
    }

    public struct UpdateWebhookInput: AWSEncodableShape {

        /// A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If branchFilter is empty, then all branches are built.   It is recommended that you use filterGroups instead of branchFilter.  
        public let branchFilter: String?
        ///  An array of arrays of WebhookFilter objects used to determine if a webhook event can trigger a build. A filter group must contain at least one EVENT WebhookFilter. 
        public let filterGroups: [[WebhookFilter]]?
        /// The name of the AWS CodeBuild project.
        public let projectName: String
        ///  A boolean value that specifies whether the associated GitHub repository's secret token should be updated. If you use Bitbucket for your repository, rotateSecret is ignored. 
        public let rotateSecret: Bool?

        public init(branchFilter: String? = nil, filterGroups: [[WebhookFilter]]? = nil, projectName: String, rotateSecret: Bool? = nil) {
            self.branchFilter = branchFilter
            self.filterGroups = filterGroups
            self.projectName = projectName
            self.rotateSecret = rotateSecret
        }

        public func validate(name: String) throws {
            try validate(self.projectName, name:"projectName", parent: name, max: 255)
            try validate(self.projectName, name:"projectName", parent: name, min: 2)
            try validate(self.projectName, name:"projectName", parent: name, pattern: "[A-Za-z0-9][A-Za-z0-9\\-_]{1,254}")
        }

        private enum CodingKeys: String, CodingKey {
            case branchFilter = "branchFilter"
            case filterGroups = "filterGroups"
            case projectName = "projectName"
            case rotateSecret = "rotateSecret"
        }
    }

    public struct UpdateWebhookOutput: AWSDecodableShape {

        ///  Information about a repository's webhook that is associated with a project in AWS CodeBuild. 
        public let webhook: Webhook?

        public init(webhook: Webhook? = nil) {
            self.webhook = webhook
        }

        private enum CodingKeys: String, CodingKey {
            case webhook = "webhook"
        }
    }

    public struct VpcConfig: AWSEncodableShape & AWSDecodableShape {

        /// A list of one or more security groups IDs in your Amazon VPC.
        public let securityGroupIds: [String]?
        /// A list of one or more subnet IDs in your Amazon VPC.
        public let subnets: [String]?
        /// The ID of the Amazon VPC.
        public let vpcId: String?

        public init(securityGroupIds: [String]? = nil, subnets: [String]? = nil, vpcId: String? = nil) {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
            self.vpcId = vpcId
        }

        public func validate(name: String) throws {
            try self.securityGroupIds?.forEach {
                try validate($0, name: "securityGroupIds[]", parent: name, min: 1)
            }
            try validate(self.securityGroupIds, name:"securityGroupIds", parent: name, max: 5)
            try self.subnets?.forEach {
                try validate($0, name: "subnets[]", parent: name, min: 1)
            }
            try validate(self.subnets, name:"subnets", parent: name, max: 16)
            try validate(self.vpcId, name:"vpcId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds = "securityGroupIds"
            case subnets = "subnets"
            case vpcId = "vpcId"
        }
    }

    public struct Webhook: AWSDecodableShape {

        /// A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If branchFilter is empty, then all branches are built.   It is recommended that you use filterGroups instead of branchFilter.  
        public let branchFilter: String?
        ///  An array of arrays of WebhookFilter objects used to determine which webhooks are triggered. At least one WebhookFilter in the array must specify EVENT as its type.   For a build to be triggered, at least one filter group in the filterGroups array must pass. For a filter group to pass, each of its filters must pass. 
        public let filterGroups: [[WebhookFilter]]?
        ///  A timestamp that indicates the last time a repository's secret token was modified. 
        public let lastModifiedSecret: TimeStamp?
        ///  The AWS CodeBuild endpoint where webhook events are sent.
        public let payloadUrl: String?
        ///  The secret token of the associated repository.    A Bitbucket webhook does not support secret.  
        public let secret: String?
        /// The URL to the webhook.
        public let url: String?

        public init(branchFilter: String? = nil, filterGroups: [[WebhookFilter]]? = nil, lastModifiedSecret: TimeStamp? = nil, payloadUrl: String? = nil, secret: String? = nil, url: String? = nil) {
            self.branchFilter = branchFilter
            self.filterGroups = filterGroups
            self.lastModifiedSecret = lastModifiedSecret
            self.payloadUrl = payloadUrl
            self.secret = secret
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case branchFilter = "branchFilter"
            case filterGroups = "filterGroups"
            case lastModifiedSecret = "lastModifiedSecret"
            case payloadUrl = "payloadUrl"
            case secret = "secret"
            case url = "url"
        }
    }

    public struct WebhookFilter: AWSEncodableShape & AWSDecodableShape {

        ///  Used to indicate that the pattern determines which webhook events do not trigger a build. If true, then a webhook event that does not match the pattern triggers a build. If false, then a webhook event that matches the pattern triggers a build. 
        public let excludeMatchedPattern: Bool?
        ///  For a WebHookFilter that uses EVENT type, a comma-separated string that specifies one or more events. For example, the webhook filter PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED allows all push, pull request created, and pull request updated events to trigger a build.   For a WebHookFilter that uses any of the other filter types, a regular expression pattern. For example, a WebHookFilter that uses HEAD_REF for its type and the pattern ^refs/heads/ triggers a build when the head reference is a branch with a reference name refs/heads/branch-name. 
        public let pattern: String
        ///  The type of webhook filter. There are five webhook filter types: EVENT, ACTOR_ACCOUNT_ID, HEAD_REF, BASE_REF, and FILE_PATH.    EVENT    A webhook event triggers a build when the provided pattern matches one of four event types: PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED, and PULL_REQUEST_REOPENED. The EVENT patterns are specified as a comma-separated string. For example, PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED filters all push, pull request created, and pull request updated events.    The PULL_REQUEST_REOPENED works with GitHub and GitHub Enterprise only.     ACTOR_ACCOUNT_ID    A webhook event triggers a build when a GitHub, GitHub Enterprise, or Bitbucket account ID matches the regular expression pattern.    HEAD_REF    A webhook event triggers a build when the head reference matches the regular expression pattern. For example, refs/heads/branch-name and refs/tags/tag-name.   Works with GitHub and GitHub Enterprise push, GitHub and GitHub Enterprise pull request, Bitbucket push, and Bitbucket pull request events.    BASE_REF    A webhook event triggers a build when the base reference matches the regular expression pattern. For example, refs/heads/branch-name.    Works with pull request events only.     FILE_PATH    A webhook triggers a build when the path of a changed file matches the regular expression pattern.    Works with GitHub and GitHub Enterprise push events only.    
        public let `type`: WebhookFilterType

        public init(excludeMatchedPattern: Bool? = nil, pattern: String, type: WebhookFilterType) {
            self.excludeMatchedPattern = excludeMatchedPattern
            self.pattern = pattern
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case excludeMatchedPattern = "excludeMatchedPattern"
            case pattern = "pattern"
            case `type` = "type"
        }
    }
}
