// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

@_exported import AWSSDKSwiftCore
import Foundation
import NIO

/**
Client object for interacting with AWS LakeFormation service.

AWS Lake Formation Defines the public endpoint for the AWS Lake Formation service.
*/
public struct LakeFormation {

    //MARK: Member variables

    public let client: AWSClient

    //MARK: Initialization

    /// Initialize the LakeFormation client
    /// - parameters:
    ///     - accessKeyId: Public access key provided by AWS
    ///     - secretAccessKey: Private access key provided by AWS
    ///     - sessionToken: Token provided by STS.AssumeRole() which allows access to another AWS account
    ///     - region: Region of server you want to communicate with
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middlewares: Array of middlewares to apply to requests and responses
    ///     - eventLoopGroupProvider: EventLoopGroup to use. Use `useAWSClientShared` if the client shall manage its own EventLoopGroup.
    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil, middlewares: [AWSServiceMiddleware] = [], eventLoopGroupProvider: AWSClient.EventLoopGroupProvider = .useAWSClientShared) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            sessionToken: sessionToken,
            region: region,
            amzTarget: "AWSLakeFormation",
            service: "lakeformation",
            serviceProtocol: ServiceProtocol(type: .json, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2017-03-31",
            endpoint: endpoint,
            middlewares: middlewares,
            possibleErrorTypes: [LakeFormationErrorType.self],
            eventLoopGroupProvider: eventLoopGroupProvider
        )
    }
    
    //MARK: API Calls

    ///  Batch operation to grant permissions to the principal.
    public func batchGrantPermissions(_ input: BatchGrantPermissionsRequest) -> EventLoopFuture<BatchGrantPermissionsResponse> {
        return client.send(operation: "BatchGrantPermissions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Batch operation to revoke permissions from the principal.
    public func batchRevokePermissions(_ input: BatchRevokePermissionsRequest) -> EventLoopFuture<BatchRevokePermissionsResponse> {
        return client.send(operation: "BatchRevokePermissions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deregisters the resource as managed by the Data Catalog. When you deregister a path, Lake Formation removes the path from the inline policy attached to your service-linked role.
    public func deregisterResource(_ input: DeregisterResourceRequest) -> EventLoopFuture<DeregisterResourceResponse> {
        return client.send(operation: "DeregisterResource", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the current data access role for the given resource registered in AWS Lake Formation.
    public func describeResource(_ input: DescribeResourceRequest) -> EventLoopFuture<DescribeResourceResponse> {
        return client.send(operation: "DescribeResource", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the list of the data lake administrators of a Lake Formation-managed data lake. 
    public func getDataLakeSettings(_ input: GetDataLakeSettingsRequest) -> EventLoopFuture<GetDataLakeSettingsResponse> {
        return client.send(operation: "GetDataLakeSettings", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns the Lake Formation permissions for a specified table or database resource located at a path in Amazon S3. GetEffectivePermissionsForPath will not return databases and tables if the catalog is encrypted.
    public func getEffectivePermissionsForPath(_ input: GetEffectivePermissionsForPathRequest) -> EventLoopFuture<GetEffectivePermissionsForPathResponse> {
        return client.send(operation: "GetEffectivePermissionsForPath", path: "/", httpMethod: "POST", input: input)
    }

    ///  Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. For information about permissions, see Security and Access Control to Metadata and Data.
    public func grantPermissions(_ input: GrantPermissionsRequest) -> EventLoopFuture<GrantPermissionsResponse> {
        return client.send(operation: "GrantPermissions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Returns a list of the principal permissions on the resource, filtered by the permissions of the caller. For example, if you are granted an ALTER permission, you are able to see only the principal permissions for ALTER. This operation returns only those permissions that have been explicitly granted. For information about permissions, see Security and Access Control to Metadata and Data.
    public func listPermissions(_ input: ListPermissionsRequest) -> EventLoopFuture<ListPermissionsResponse> {
        return client.send(operation: "ListPermissions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Lists the resources registered to be managed by the Data Catalog.
    public func listResources(_ input: ListResourcesRequest) -> EventLoopFuture<ListResourcesResponse> {
        return client.send(operation: "ListResources", path: "/", httpMethod: "POST", input: input)
    }

    ///  Sets the list of data lake administrators who have admin privileges on all resources managed by Lake Formation. For more information on admin privileges, see Granting Lake Formation Permissions. This API replaces the current list of data lake admins with the new list being passed. To add an admin, fetch the current list and add the new admin to that list and pass that list in this API.
    public func putDataLakeSettings(_ input: PutDataLakeSettingsRequest) -> EventLoopFuture<PutDataLakeSettingsResponse> {
        return client.send(operation: "PutDataLakeSettings", path: "/", httpMethod: "POST", input: input)
    }

    ///  Registers the resource as managed by the Data Catalog. To add or update data, Lake Formation needs read/write access to the chosen Amazon S3 path. Choose a role that you know has permission to do this, or choose the AWSServiceRoleForLakeFormationDataAccess service-linked role. When you register the first Amazon S3 path, the service-linked role and a new inline policy are created on your behalf. Lake Formation adds the first path to the inline policy and attaches it to the service-linked role. When you register subsequent paths, Lake Formation adds the path to the existing policy. The following request registers a new location and gives AWS Lake Formation permission to use the service-linked role to access that location.  ResourceArn = arn:aws:s3:::my-bucket UseServiceLinkedRole = true  If UseServiceLinkedRole is not set to true, you must provide or set the RoleArn:  arn:aws:iam::12345:role/my-data-access-role 
    public func registerResource(_ input: RegisterResourceRequest) -> EventLoopFuture<RegisterResourceResponse> {
        return client.send(operation: "RegisterResource", path: "/", httpMethod: "POST", input: input)
    }

    ///  Revokes permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.
    public func revokePermissions(_ input: RevokePermissionsRequest) -> EventLoopFuture<RevokePermissionsResponse> {
        return client.send(operation: "RevokePermissions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates the data access role used for vending access to the given (registered) resource in AWS Lake Formation. 
    public func updateResource(_ input: UpdateResourceRequest) -> EventLoopFuture<UpdateResourceResponse> {
        return client.send(operation: "UpdateResource", path: "/", httpMethod: "POST", input: input)
    }
}
