//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for ElasticLoadBalancing
public struct ElasticLoadBalancingErrorType: AWSErrorType {
    enum Code: String {
        case accessPointNotFoundException = "LoadBalancerNotFound"
        case certificateNotFoundException = "CertificateNotFound"
        case dependencyThrottleException = "DependencyThrottle"
        case duplicateAccessPointNameException = "DuplicateLoadBalancerName"
        case duplicateListenerException = "DuplicateListener"
        case duplicatePolicyNameException = "DuplicatePolicyName"
        case duplicateTagKeysException = "DuplicateTagKeys"
        case invalidConfigurationRequestException = "InvalidConfigurationRequest"
        case invalidEndPointException = "InvalidInstance"
        case invalidSchemeException = "InvalidScheme"
        case invalidSecurityGroupException = "InvalidSecurityGroup"
        case invalidSubnetException = "InvalidSubnet"
        case listenerNotFoundException = "ListenerNotFound"
        case loadBalancerAttributeNotFoundException = "LoadBalancerAttributeNotFound"
        case operationNotPermittedException = "OperationNotPermitted"
        case policyNotFoundException = "PolicyNotFound"
        case policyTypeNotFoundException = "PolicyTypeNotFound"
        case subnetNotFoundException = "SubnetNotFound"
        case tooManyAccessPointsException = "TooManyLoadBalancers"
        case tooManyPoliciesException = "TooManyPolicies"
        case tooManyTagsException = "TooManyTags"
        case unsupportedProtocolException = "UnsupportedProtocol"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var accessPointNotFoundException: Self { .init(.accessPointNotFoundException) }
    public static var certificateNotFoundException: Self { .init(.certificateNotFoundException) }
    public static var dependencyThrottleException: Self { .init(.dependencyThrottleException) }
    public static var duplicateAccessPointNameException: Self { .init(.duplicateAccessPointNameException) }
    public static var duplicateListenerException: Self { .init(.duplicateListenerException) }
    public static var duplicatePolicyNameException: Self { .init(.duplicatePolicyNameException) }
    public static var duplicateTagKeysException: Self { .init(.duplicateTagKeysException) }
    public static var invalidConfigurationRequestException: Self { .init(.invalidConfigurationRequestException) }
    public static var invalidEndPointException: Self { .init(.invalidEndPointException) }
    public static var invalidSchemeException: Self { .init(.invalidSchemeException) }
    public static var invalidSecurityGroupException: Self { .init(.invalidSecurityGroupException) }
    public static var invalidSubnetException: Self { .init(.invalidSubnetException) }
    public static var listenerNotFoundException: Self { .init(.listenerNotFoundException) }
    public static var loadBalancerAttributeNotFoundException: Self { .init(.loadBalancerAttributeNotFoundException) }
    public static var operationNotPermittedException: Self { .init(.operationNotPermittedException) }
    public static var policyNotFoundException: Self { .init(.policyNotFoundException) }
    public static var policyTypeNotFoundException: Self { .init(.policyTypeNotFoundException) }
    public static var subnetNotFoundException: Self { .init(.subnetNotFoundException) }
    public static var tooManyAccessPointsException: Self { .init(.tooManyAccessPointsException) }
    public static var tooManyPoliciesException: Self { .init(.tooManyPoliciesException) }
    public static var tooManyTagsException: Self { .init(.tooManyTagsException) }
    public static var unsupportedProtocolException: Self { .init(.unsupportedProtocolException) }
}

extension ElasticLoadBalancingErrorType: Equatable {
    public static func == (lhs: ElasticLoadBalancingErrorType, rhs: ElasticLoadBalancingErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension ElasticLoadBalancingErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
