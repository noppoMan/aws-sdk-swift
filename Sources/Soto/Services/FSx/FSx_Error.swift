//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for FSx
public struct FSxErrorType: AWSErrorType {
    enum Code: String {
        case activeDirectoryError = "ActiveDirectoryError"
        case backupInProgress = "BackupInProgress"
        case backupNotFound = "BackupNotFound"
        case backupRestoring = "BackupRestoring"
        case badRequest = "BadRequest"
        case dataRepositoryTaskEnded = "DataRepositoryTaskEnded"
        case dataRepositoryTaskExecuting = "DataRepositoryTaskExecuting"
        case dataRepositoryTaskNotFound = "DataRepositoryTaskNotFound"
        case fileSystemNotFound = "FileSystemNotFound"
        case incompatibleParameterError = "IncompatibleParameterError"
        case internalServerError = "InternalServerError"
        case invalidExportPath = "InvalidExportPath"
        case invalidImportPath = "InvalidImportPath"
        case invalidNetworkSettings = "InvalidNetworkSettings"
        case invalidPerUnitStorageThroughput = "InvalidPerUnitStorageThroughput"
        case missingFileSystemConfiguration = "MissingFileSystemConfiguration"
        case notServiceResourceError = "NotServiceResourceError"
        case resourceDoesNotSupportTagging = "ResourceDoesNotSupportTagging"
        case resourceNotFound = "ResourceNotFound"
        case serviceLimitExceeded = "ServiceLimitExceeded"
        case unsupportedOperation = "UnsupportedOperation"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var activeDirectoryError: Self { .init(.activeDirectoryError) }
    public static var backupInProgress: Self { .init(.backupInProgress) }
    public static var backupNotFound: Self { .init(.backupNotFound) }
    public static var backupRestoring: Self { .init(.backupRestoring) }
    public static var badRequest: Self { .init(.badRequest) }
    public static var dataRepositoryTaskEnded: Self { .init(.dataRepositoryTaskEnded) }
    public static var dataRepositoryTaskExecuting: Self { .init(.dataRepositoryTaskExecuting) }
    public static var dataRepositoryTaskNotFound: Self { .init(.dataRepositoryTaskNotFound) }
    public static var fileSystemNotFound: Self { .init(.fileSystemNotFound) }
    public static var incompatibleParameterError: Self { .init(.incompatibleParameterError) }
    public static var internalServerError: Self { .init(.internalServerError) }
    public static var invalidExportPath: Self { .init(.invalidExportPath) }
    public static var invalidImportPath: Self { .init(.invalidImportPath) }
    public static var invalidNetworkSettings: Self { .init(.invalidNetworkSettings) }
    public static var invalidPerUnitStorageThroughput: Self { .init(.invalidPerUnitStorageThroughput) }
    public static var missingFileSystemConfiguration: Self { .init(.missingFileSystemConfiguration) }
    public static var notServiceResourceError: Self { .init(.notServiceResourceError) }
    public static var resourceDoesNotSupportTagging: Self { .init(.resourceDoesNotSupportTagging) }
    public static var resourceNotFound: Self { .init(.resourceNotFound) }
    public static var serviceLimitExceeded: Self { .init(.serviceLimitExceeded) }
    public static var unsupportedOperation: Self { .init(.unsupportedOperation) }
}

extension FSxErrorType: Equatable {
    public static func == (lhs: FSxErrorType, rhs: FSxErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension FSxErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
