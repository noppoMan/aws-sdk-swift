//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for WorkSpaces
public struct WorkSpacesErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case invalidParameterValuesException = "InvalidParameterValuesException"
        case invalidResourceStateException = "InvalidResourceStateException"
        case operationInProgressException = "OperationInProgressException"
        case operationNotSupportedException = "OperationNotSupportedException"
        case resourceAlreadyExistsException = "ResourceAlreadyExistsException"
        case resourceAssociatedException = "ResourceAssociatedException"
        case resourceCreationFailedException = "ResourceCreationFailedException"
        case resourceLimitExceededException = "ResourceLimitExceededException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case resourceUnavailableException = "ResourceUnavailableException"
        case unsupportedNetworkConfigurationException = "UnsupportedNetworkConfigurationException"
        case unsupportedWorkspaceConfigurationException = "UnsupportedWorkspaceConfigurationException"
        case workspacesDefaultRoleNotFoundException = "WorkspacesDefaultRoleNotFoundException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize WorkSpaces
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    public static var invalidParameterValuesException: Self { .init(.invalidParameterValuesException) }
    public static var invalidResourceStateException: Self { .init(.invalidResourceStateException) }
    public static var operationInProgressException: Self { .init(.operationInProgressException) }
    public static var operationNotSupportedException: Self { .init(.operationNotSupportedException) }
    public static var resourceAlreadyExistsException: Self { .init(.resourceAlreadyExistsException) }
    public static var resourceAssociatedException: Self { .init(.resourceAssociatedException) }
    public static var resourceCreationFailedException: Self { .init(.resourceCreationFailedException) }
    public static var resourceLimitExceededException: Self { .init(.resourceLimitExceededException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var resourceUnavailableException: Self { .init(.resourceUnavailableException) }
    public static var unsupportedNetworkConfigurationException: Self { .init(.unsupportedNetworkConfigurationException) }
    public static var unsupportedWorkspaceConfigurationException: Self { .init(.unsupportedWorkspaceConfigurationException) }
    public static var workspacesDefaultRoleNotFoundException: Self { .init(.workspacesDefaultRoleNotFoundException) }
}

extension WorkSpacesErrorType: Equatable {
    public static func == (lhs: WorkSpacesErrorType, rhs: WorkSpacesErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension WorkSpacesErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
