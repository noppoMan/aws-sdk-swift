//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for MigrationHub
public struct MigrationHubErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case dryRunOperation = "DryRunOperation"
        case homeRegionNotSetException = "HomeRegionNotSetException"
        case internalServerError = "InternalServerError"
        case invalidInputException = "InvalidInputException"
        case policyErrorException = "PolicyErrorException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case serviceUnavailableException = "ServiceUnavailableException"
        case throttlingException = "ThrottlingException"
        case unauthorizedOperation = "UnauthorizedOperation"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    public static var dryRunOperation: Self { .init(.dryRunOperation) }
    public static var homeRegionNotSetException: Self { .init(.homeRegionNotSetException) }
    public static var internalServerError: Self { .init(.internalServerError) }
    public static var invalidInputException: Self { .init(.invalidInputException) }
    public static var policyErrorException: Self { .init(.policyErrorException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var serviceUnavailableException: Self { .init(.serviceUnavailableException) }
    public static var throttlingException: Self { .init(.throttlingException) }
    public static var unauthorizedOperation: Self { .init(.unauthorizedOperation) }
}

extension MigrationHubErrorType: Equatable {
    public static func == (lhs: MigrationHubErrorType, rhs: MigrationHubErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension MigrationHubErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
