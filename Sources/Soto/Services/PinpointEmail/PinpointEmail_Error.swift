//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for PinpointEmail
public enum PinpointEmailErrorType: AWSErrorType {
    case accountSuspendedException(message: String?)
    case alreadyExistsException(message: String?)
    case badRequestException(message: String?)
    case concurrentModificationException(message: String?)
    case limitExceededException(message: String?)
    case mailFromDomainNotVerifiedException(message: String?)
    case messageRejected(message: String?)
    case notFoundException(message: String?)
    case sendingPausedException(message: String?)
    case tooManyRequestsException(message: String?)
}

extension PinpointEmailErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "AccountSuspendedException":
            self = .accountSuspendedException(message: message)
        case "AlreadyExistsException":
            self = .alreadyExistsException(message: message)
        case "BadRequestException":
            self = .badRequestException(message: message)
        case "ConcurrentModificationException":
            self = .concurrentModificationException(message: message)
        case "LimitExceededException":
            self = .limitExceededException(message: message)
        case "MailFromDomainNotVerifiedException":
            self = .mailFromDomainNotVerifiedException(message: message)
        case "MessageRejected":
            self = .messageRejected(message: message)
        case "NotFoundException":
            self = .notFoundException(message: message)
        case "SendingPausedException":
            self = .sendingPausedException(message: message)
        case "TooManyRequestsException":
            self = .tooManyRequestsException(message: message)
        default:
            return nil
        }
    }
}

extension PinpointEmailErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .accountSuspendedException(let message):
            return "AccountSuspendedException: \(message ?? "")"
        case .alreadyExistsException(let message):
            return "AlreadyExistsException: \(message ?? "")"
        case .badRequestException(let message):
            return "BadRequestException: \(message ?? "")"
        case .concurrentModificationException(let message):
            return "ConcurrentModificationException: \(message ?? "")"
        case .limitExceededException(let message):
            return "LimitExceededException: \(message ?? "")"
        case .mailFromDomainNotVerifiedException(let message):
            return "MailFromDomainNotVerifiedException: \(message ?? "")"
        case .messageRejected(let message):
            return "MessageRejected: \(message ?? "")"
        case .notFoundException(let message):
            return "NotFoundException: \(message ?? "")"
        case .sendingPausedException(let message):
            return "SendingPausedException: \(message ?? "")"
        case .tooManyRequestsException(let message):
            return "TooManyRequestsException: \(message ?? "")"
        }
    }
}
