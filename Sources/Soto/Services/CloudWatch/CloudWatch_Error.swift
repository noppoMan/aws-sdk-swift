//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for CloudWatch
public struct CloudWatchErrorType: AWSErrorType {
    enum Code: String {
        case concurrentModificationException = "ConcurrentModificationException"
        case dashboardInvalidInputError = "InvalidParameterInput"
        case internalServiceFault = "InternalServiceError"
        case invalidFormatFault = "InvalidFormat"
        case invalidNextToken = "InvalidNextToken"
        case invalidParameterCombinationException = "InvalidParameterCombination"
        case invalidParameterValueException = "InvalidParameterValue"
        case limitExceededException = "LimitExceededException"
        case limitExceededFault = "LimitExceeded"
        case missingRequiredParameterException = "MissingParameter"
        case resourceNotFound = "ResourceNotFound"
        case resourceNotFoundException = "ResourceNotFoundException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize CloudWatch
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var concurrentModificationException: Self { .init(.concurrentModificationException) }
    public static var dashboardInvalidInputError: Self { .init(.dashboardInvalidInputError) }
    public static var internalServiceFault: Self { .init(.internalServiceFault) }
    public static var invalidFormatFault: Self { .init(.invalidFormatFault) }
    public static var invalidNextToken: Self { .init(.invalidNextToken) }
    public static var invalidParameterCombinationException: Self { .init(.invalidParameterCombinationException) }
    public static var invalidParameterValueException: Self { .init(.invalidParameterValueException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var limitExceededFault: Self { .init(.limitExceededFault) }
    public static var missingRequiredParameterException: Self { .init(.missingRequiredParameterException) }
    public static var resourceNotFound: Self { .init(.resourceNotFound) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
}

extension CloudWatchErrorType: Equatable {
    public static func == (lhs: CloudWatchErrorType, rhs: CloudWatchErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension CloudWatchErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
