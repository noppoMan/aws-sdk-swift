//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Organizations
public struct OrganizationsErrorType: AWSErrorType {
    enum Code: String {
        case aWSOrganizationsNotInUseException = "AWSOrganizationsNotInUseException"
        case accessDeniedException = "AccessDeniedException"
        case accessDeniedForDependencyException = "AccessDeniedForDependencyException"
        case accountAlreadyRegisteredException = "AccountAlreadyRegisteredException"
        case accountNotFoundException = "AccountNotFoundException"
        case accountNotRegisteredException = "AccountNotRegisteredException"
        case accountOwnerNotVerifiedException = "AccountOwnerNotVerifiedException"
        case alreadyInOrganizationException = "AlreadyInOrganizationException"
        case childNotFoundException = "ChildNotFoundException"
        case concurrentModificationException = "ConcurrentModificationException"
        case constraintViolationException = "ConstraintViolationException"
        case createAccountStatusNotFoundException = "CreateAccountStatusNotFoundException"
        case destinationParentNotFoundException = "DestinationParentNotFoundException"
        case duplicateAccountException = "DuplicateAccountException"
        case duplicateHandshakeException = "DuplicateHandshakeException"
        case duplicateOrganizationalUnitException = "DuplicateOrganizationalUnitException"
        case duplicatePolicyAttachmentException = "DuplicatePolicyAttachmentException"
        case duplicatePolicyException = "DuplicatePolicyException"
        case effectivePolicyNotFoundException = "EffectivePolicyNotFoundException"
        case finalizingOrganizationException = "FinalizingOrganizationException"
        case handshakeAlreadyInStateException = "HandshakeAlreadyInStateException"
        case handshakeConstraintViolationException = "HandshakeConstraintViolationException"
        case handshakeNotFoundException = "HandshakeNotFoundException"
        case invalidHandshakeTransitionException = "InvalidHandshakeTransitionException"
        case invalidInputException = "InvalidInputException"
        case malformedPolicyDocumentException = "MalformedPolicyDocumentException"
        case masterCannotLeaveOrganizationException = "MasterCannotLeaveOrganizationException"
        case organizationNotEmptyException = "OrganizationNotEmptyException"
        case organizationalUnitNotEmptyException = "OrganizationalUnitNotEmptyException"
        case organizationalUnitNotFoundException = "OrganizationalUnitNotFoundException"
        case parentNotFoundException = "ParentNotFoundException"
        case policyChangesInProgressException = "PolicyChangesInProgressException"
        case policyInUseException = "PolicyInUseException"
        case policyNotAttachedException = "PolicyNotAttachedException"
        case policyNotFoundException = "PolicyNotFoundException"
        case policyTypeAlreadyEnabledException = "PolicyTypeAlreadyEnabledException"
        case policyTypeNotAvailableForOrganizationException = "PolicyTypeNotAvailableForOrganizationException"
        case policyTypeNotEnabledException = "PolicyTypeNotEnabledException"
        case rootNotFoundException = "RootNotFoundException"
        case serviceException = "ServiceException"
        case sourceParentNotFoundException = "SourceParentNotFoundException"
        case targetNotFoundException = "TargetNotFoundException"
        case tooManyRequestsException = "TooManyRequestsException"
        case unsupportedAPIEndpointException = "UnsupportedAPIEndpointException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var aWSOrganizationsNotInUseException: Self { .init(.aWSOrganizationsNotInUseException) }
    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    public static var accessDeniedForDependencyException: Self { .init(.accessDeniedForDependencyException) }
    public static var accountAlreadyRegisteredException: Self { .init(.accountAlreadyRegisteredException) }
    public static var accountNotFoundException: Self { .init(.accountNotFoundException) }
    public static var accountNotRegisteredException: Self { .init(.accountNotRegisteredException) }
    public static var accountOwnerNotVerifiedException: Self { .init(.accountOwnerNotVerifiedException) }
    public static var alreadyInOrganizationException: Self { .init(.alreadyInOrganizationException) }
    public static var childNotFoundException: Self { .init(.childNotFoundException) }
    public static var concurrentModificationException: Self { .init(.concurrentModificationException) }
    public static var constraintViolationException: Self { .init(.constraintViolationException) }
    public static var createAccountStatusNotFoundException: Self { .init(.createAccountStatusNotFoundException) }
    public static var destinationParentNotFoundException: Self { .init(.destinationParentNotFoundException) }
    public static var duplicateAccountException: Self { .init(.duplicateAccountException) }
    public static var duplicateHandshakeException: Self { .init(.duplicateHandshakeException) }
    public static var duplicateOrganizationalUnitException: Self { .init(.duplicateOrganizationalUnitException) }
    public static var duplicatePolicyAttachmentException: Self { .init(.duplicatePolicyAttachmentException) }
    public static var duplicatePolicyException: Self { .init(.duplicatePolicyException) }
    public static var effectivePolicyNotFoundException: Self { .init(.effectivePolicyNotFoundException) }
    public static var finalizingOrganizationException: Self { .init(.finalizingOrganizationException) }
    public static var handshakeAlreadyInStateException: Self { .init(.handshakeAlreadyInStateException) }
    public static var handshakeConstraintViolationException: Self { .init(.handshakeConstraintViolationException) }
    public static var handshakeNotFoundException: Self { .init(.handshakeNotFoundException) }
    public static var invalidHandshakeTransitionException: Self { .init(.invalidHandshakeTransitionException) }
    public static var invalidInputException: Self { .init(.invalidInputException) }
    public static var malformedPolicyDocumentException: Self { .init(.malformedPolicyDocumentException) }
    public static var masterCannotLeaveOrganizationException: Self { .init(.masterCannotLeaveOrganizationException) }
    public static var organizationNotEmptyException: Self { .init(.organizationNotEmptyException) }
    public static var organizationalUnitNotEmptyException: Self { .init(.organizationalUnitNotEmptyException) }
    public static var organizationalUnitNotFoundException: Self { .init(.organizationalUnitNotFoundException) }
    public static var parentNotFoundException: Self { .init(.parentNotFoundException) }
    public static var policyChangesInProgressException: Self { .init(.policyChangesInProgressException) }
    public static var policyInUseException: Self { .init(.policyInUseException) }
    public static var policyNotAttachedException: Self { .init(.policyNotAttachedException) }
    public static var policyNotFoundException: Self { .init(.policyNotFoundException) }
    public static var policyTypeAlreadyEnabledException: Self { .init(.policyTypeAlreadyEnabledException) }
    public static var policyTypeNotAvailableForOrganizationException: Self { .init(.policyTypeNotAvailableForOrganizationException) }
    public static var policyTypeNotEnabledException: Self { .init(.policyTypeNotEnabledException) }
    public static var rootNotFoundException: Self { .init(.rootNotFoundException) }
    public static var serviceException: Self { .init(.serviceException) }
    public static var sourceParentNotFoundException: Self { .init(.sourceParentNotFoundException) }
    public static var targetNotFoundException: Self { .init(.targetNotFoundException) }
    public static var tooManyRequestsException: Self { .init(.tooManyRequestsException) }
    public static var unsupportedAPIEndpointException: Self { .init(.unsupportedAPIEndpointException) }
}

extension OrganizationsErrorType: Equatable {
    public static func == (lhs: OrganizationsErrorType, rhs: OrganizationsErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension OrganizationsErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
