//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Glue
public struct GlueErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case alreadyExistsException = "AlreadyExistsException"
        case concurrentModificationException = "ConcurrentModificationException"
        case concurrentRunsExceededException = "ConcurrentRunsExceededException"
        case conditionCheckFailureException = "ConditionCheckFailureException"
        case conflictException = "ConflictException"
        case crawlerNotRunningException = "CrawlerNotRunningException"
        case crawlerRunningException = "CrawlerRunningException"
        case crawlerStoppingException = "CrawlerStoppingException"
        case entityNotFoundException = "EntityNotFoundException"
        case glueEncryptionException = "GlueEncryptionException"
        case idempotentParameterMismatchException = "IdempotentParameterMismatchException"
        case illegalWorkflowStateException = "IllegalWorkflowStateException"
        case internalServiceException = "InternalServiceException"
        case invalidInputException = "InvalidInputException"
        case mLTransformNotReadyException = "MLTransformNotReadyException"
        case noScheduleException = "NoScheduleException"
        case operationTimeoutException = "OperationTimeoutException"
        case resourceNumberLimitExceededException = "ResourceNumberLimitExceededException"
        case schedulerNotRunningException = "SchedulerNotRunningException"
        case schedulerRunningException = "SchedulerRunningException"
        case schedulerTransitioningException = "SchedulerTransitioningException"
        case validationException = "ValidationException"
        case versionMismatchException = "VersionMismatchException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    public static var alreadyExistsException: Self { .init(.alreadyExistsException) }
    public static var concurrentModificationException: Self { .init(.concurrentModificationException) }
    public static var concurrentRunsExceededException: Self { .init(.concurrentRunsExceededException) }
    public static var conditionCheckFailureException: Self { .init(.conditionCheckFailureException) }
    public static var conflictException: Self { .init(.conflictException) }
    public static var crawlerNotRunningException: Self { .init(.crawlerNotRunningException) }
    public static var crawlerRunningException: Self { .init(.crawlerRunningException) }
    public static var crawlerStoppingException: Self { .init(.crawlerStoppingException) }
    public static var entityNotFoundException: Self { .init(.entityNotFoundException) }
    public static var glueEncryptionException: Self { .init(.glueEncryptionException) }
    public static var idempotentParameterMismatchException: Self { .init(.idempotentParameterMismatchException) }
    public static var illegalWorkflowStateException: Self { .init(.illegalWorkflowStateException) }
    public static var internalServiceException: Self { .init(.internalServiceException) }
    public static var invalidInputException: Self { .init(.invalidInputException) }
    public static var mLTransformNotReadyException: Self { .init(.mLTransformNotReadyException) }
    public static var noScheduleException: Self { .init(.noScheduleException) }
    public static var operationTimeoutException: Self { .init(.operationTimeoutException) }
    public static var resourceNumberLimitExceededException: Self { .init(.resourceNumberLimitExceededException) }
    public static var schedulerNotRunningException: Self { .init(.schedulerNotRunningException) }
    public static var schedulerRunningException: Self { .init(.schedulerRunningException) }
    public static var schedulerTransitioningException: Self { .init(.schedulerTransitioningException) }
    public static var validationException: Self { .init(.validationException) }
    public static var versionMismatchException: Self { .init(.versionMismatchException) }
}

extension GlueErrorType: Equatable {
    public static func == (lhs: GlueErrorType, rhs: GlueErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension GlueErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
