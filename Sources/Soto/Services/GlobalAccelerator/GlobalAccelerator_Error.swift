//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for GlobalAccelerator
public struct GlobalAcceleratorErrorType: AWSErrorType {
    enum Code: String {
        case acceleratorNotDisabledException = "AcceleratorNotDisabledException"
        case acceleratorNotFoundException = "AcceleratorNotFoundException"
        case accessDeniedException = "AccessDeniedException"
        case associatedEndpointGroupFoundException = "AssociatedEndpointGroupFoundException"
        case associatedListenerFoundException = "AssociatedListenerFoundException"
        case byoipCidrNotFoundException = "ByoipCidrNotFoundException"
        case endpointGroupAlreadyExistsException = "EndpointGroupAlreadyExistsException"
        case endpointGroupNotFoundException = "EndpointGroupNotFoundException"
        case incorrectCidrStateException = "IncorrectCidrStateException"
        case internalServiceErrorException = "InternalServiceErrorException"
        case invalidArgumentException = "InvalidArgumentException"
        case invalidNextTokenException = "InvalidNextTokenException"
        case invalidPortRangeException = "InvalidPortRangeException"
        case limitExceededException = "LimitExceededException"
        case listenerNotFoundException = "ListenerNotFoundException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var acceleratorNotDisabledException: Self { .init(.acceleratorNotDisabledException) }
    public static var acceleratorNotFoundException: Self { .init(.acceleratorNotFoundException) }
    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    public static var associatedEndpointGroupFoundException: Self { .init(.associatedEndpointGroupFoundException) }
    public static var associatedListenerFoundException: Self { .init(.associatedListenerFoundException) }
    public static var byoipCidrNotFoundException: Self { .init(.byoipCidrNotFoundException) }
    public static var endpointGroupAlreadyExistsException: Self { .init(.endpointGroupAlreadyExistsException) }
    public static var endpointGroupNotFoundException: Self { .init(.endpointGroupNotFoundException) }
    public static var incorrectCidrStateException: Self { .init(.incorrectCidrStateException) }
    public static var internalServiceErrorException: Self { .init(.internalServiceErrorException) }
    public static var invalidArgumentException: Self { .init(.invalidArgumentException) }
    public static var invalidNextTokenException: Self { .init(.invalidNextTokenException) }
    public static var invalidPortRangeException: Self { .init(.invalidPortRangeException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var listenerNotFoundException: Self { .init(.listenerNotFoundException) }
}

extension GlobalAcceleratorErrorType: Equatable {
    public static func == (lhs: GlobalAcceleratorErrorType, rhs: GlobalAcceleratorErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension GlobalAcceleratorErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
