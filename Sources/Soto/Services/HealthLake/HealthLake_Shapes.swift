//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension HealthLake {
    // MARK: Enums

    public enum DatastoreStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case creating = "CREATING"
        case deleted = "DELETED"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public enum FHIRVersion: String, CustomStringConvertible, Codable {
        case r4 = "R4"
        public var description: String { return self.rawValue }
    }

    public enum JobStatus: String, CustomStringConvertible, Codable {
        case completed = "COMPLETED"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        case submitted = "SUBMITTED"
        public var description: String { return self.rawValue }
    }

    public enum PreloadDataType: String, CustomStringConvertible, Codable {
        case synthea = "SYNTHEA"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct CreateFHIRDatastoreRequest: AWSEncodableShape {
        /// Optional user provided token used for ensuring idempotency.
        public let clientToken: String?
        /// The user generated name for the datastore.
        public let datastoreName: String?
        /// The FHIR version of the datastore. The only supported version is R4.
        public let datastoreTypeVersion: FHIRVersion
        /// Optional parameter to preload data upon creation of the datastore. Currently, the only supported preloaded data is synthetic data generated from Synthea.
        public let preloadDataConfig: PreloadDataConfig?

        public init(clientToken: String? = CreateFHIRDatastoreRequest.idempotencyToken(), datastoreName: String? = nil, datastoreTypeVersion: FHIRVersion, preloadDataConfig: PreloadDataConfig? = nil) {
            self.clientToken = clientToken
            self.datastoreName = datastoreName
            self.datastoreTypeVersion = datastoreTypeVersion
            self.preloadDataConfig = preloadDataConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 64)
            try self.validate(self.clientToken, name: "clientToken", parent: name, min: 1)
            try self.validate(self.clientToken, name: "clientToken", parent: name, pattern: "^[a-zA-Z0-9-]+$")
            try self.validate(self.datastoreName, name: "datastoreName", parent: name, max: 256)
            try self.validate(self.datastoreName, name: "datastoreName", parent: name, min: 1)
            try self.validate(self.datastoreName, name: "datastoreName", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case datastoreName = "DatastoreName"
            case datastoreTypeVersion = "DatastoreTypeVersion"
            case preloadDataConfig = "PreloadDataConfig"
        }
    }

    public struct CreateFHIRDatastoreResponse: AWSDecodableShape {
        /// The datastore ARN is generated during the creation of the datastore and can be found in the output from the initial datastore creation call.
        public let datastoreArn: String
        /// The AWS endpoint for the created datastore. For preview, only US-east-1 endpoints are supported.
        public let datastoreEndpoint: String
        /// The AWS-generated datastore id. This id is in the output from the initial datastore creation call.
        public let datastoreId: String
        /// The status of the FHIR datastore. Possible statuses are ‘CREATING’, ‘ACTIVE’, ‘DELETING’, ‘DELETED’.
        public let datastoreStatus: DatastoreStatus

        public init(datastoreArn: String, datastoreEndpoint: String, datastoreId: String, datastoreStatus: DatastoreStatus) {
            self.datastoreArn = datastoreArn
            self.datastoreEndpoint = datastoreEndpoint
            self.datastoreId = datastoreId
            self.datastoreStatus = datastoreStatus
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreArn = "DatastoreArn"
            case datastoreEndpoint = "DatastoreEndpoint"
            case datastoreId = "DatastoreId"
            case datastoreStatus = "DatastoreStatus"
        }
    }

    public struct DatastoreFilter: AWSEncodableShape {
        /// A filter that allows the user to set cutoff dates for records. All datastores created after the specified date will be included in the results.
        public let createdAfter: Date?
        /// A filter that allows the user to set cutoff dates for records. All datastores created before the specified date will be included in the results.
        public let createdBefore: Date?
        /// Allows the user to filter datastore results by name.
        public let datastoreName: String?
        /// Allows the user to filter datastore results by status.
        public let datastoreStatus: DatastoreStatus?

        public init(createdAfter: Date? = nil, createdBefore: Date? = nil, datastoreName: String? = nil, datastoreStatus: DatastoreStatus? = nil) {
            self.createdAfter = createdAfter
            self.createdBefore = createdBefore
            self.datastoreName = datastoreName
            self.datastoreStatus = datastoreStatus
        }

        public func validate(name: String) throws {
            try self.validate(self.datastoreName, name: "datastoreName", parent: name, max: 256)
            try self.validate(self.datastoreName, name: "datastoreName", parent: name, min: 1)
            try self.validate(self.datastoreName, name: "datastoreName", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case createdAfter = "CreatedAfter"
            case createdBefore = "CreatedBefore"
            case datastoreName = "DatastoreName"
            case datastoreStatus = "DatastoreStatus"
        }
    }

    public struct DatastoreProperties: AWSDecodableShape {
        /// The time that a datastore was created.
        public let createdAt: Date?
        /// The Amazon Resource Name used in the creation of the datastore.
        public let datastoreArn: String
        /// The AWS endpoint for the datastore. Each datastore will have it's own endpoint with datastore ID in the endpoint URL.
        public let datastoreEndpoint: String
        /// The AWS-generated ID number for the datastore.
        public let datastoreId: String
        /// The user-generated name for the datastore.
        public let datastoreName: String?
        /// The status of the datastore. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.
        public let datastoreStatus: DatastoreStatus
        /// The FHIR version. Only R4 version data is supported.
        public let datastoreTypeVersion: FHIRVersion
        /// The preloaded data configuration for the datastore. Only data preloaded from Synthea is supported.
        public let preloadDataConfig: PreloadDataConfig?

        public init(createdAt: Date? = nil, datastoreArn: String, datastoreEndpoint: String, datastoreId: String, datastoreName: String? = nil, datastoreStatus: DatastoreStatus, datastoreTypeVersion: FHIRVersion, preloadDataConfig: PreloadDataConfig? = nil) {
            self.createdAt = createdAt
            self.datastoreArn = datastoreArn
            self.datastoreEndpoint = datastoreEndpoint
            self.datastoreId = datastoreId
            self.datastoreName = datastoreName
            self.datastoreStatus = datastoreStatus
            self.datastoreTypeVersion = datastoreTypeVersion
            self.preloadDataConfig = preloadDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "CreatedAt"
            case datastoreArn = "DatastoreArn"
            case datastoreEndpoint = "DatastoreEndpoint"
            case datastoreId = "DatastoreId"
            case datastoreName = "DatastoreName"
            case datastoreStatus = "DatastoreStatus"
            case datastoreTypeVersion = "DatastoreTypeVersion"
            case preloadDataConfig = "PreloadDataConfig"
        }
    }

    public struct DeleteFHIRDatastoreRequest: AWSEncodableShape {
        ///  The AWS-generated ID for the datastore to be deleted.
        public let datastoreId: String?

        public init(datastoreId: String? = nil) {
            self.datastoreId = datastoreId
        }

        public func validate(name: String) throws {
            try self.validate(self.datastoreId, name: "datastoreId", parent: name, max: 32)
            try self.validate(self.datastoreId, name: "datastoreId", parent: name, min: 1)
            try self.validate(self.datastoreId, name: "datastoreId", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreId = "DatastoreId"
        }
    }

    public struct DeleteFHIRDatastoreResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that gives Amazon HealthLake access permission.
        public let datastoreArn: String
        /// The AWS endpoint for the datastore the user has requested to be deleted.
        public let datastoreEndpoint: String
        /// The AWS-generated ID for the datastore to be deleted.
        public let datastoreId: String
        /// The status of the datastore that the user has requested to be deleted.
        public let datastoreStatus: DatastoreStatus

        public init(datastoreArn: String, datastoreEndpoint: String, datastoreId: String, datastoreStatus: DatastoreStatus) {
            self.datastoreArn = datastoreArn
            self.datastoreEndpoint = datastoreEndpoint
            self.datastoreId = datastoreId
            self.datastoreStatus = datastoreStatus
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreArn = "DatastoreArn"
            case datastoreEndpoint = "DatastoreEndpoint"
            case datastoreId = "DatastoreId"
            case datastoreStatus = "DatastoreStatus"
        }
    }

    public struct DescribeFHIRDatastoreRequest: AWSEncodableShape {
        /// The AWS-generated datastore id. This is part of the ‘CreateFHIRDatastore’ output.
        public let datastoreId: String?

        public init(datastoreId: String? = nil) {
            self.datastoreId = datastoreId
        }

        public func validate(name: String) throws {
            try self.validate(self.datastoreId, name: "datastoreId", parent: name, max: 32)
            try self.validate(self.datastoreId, name: "datastoreId", parent: name, min: 1)
            try self.validate(self.datastoreId, name: "datastoreId", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreId = "DatastoreId"
        }
    }

    public struct DescribeFHIRDatastoreResponse: AWSDecodableShape {
        /// All properties associated with a datastore, including the datastore ID, datastore ARN, datastore name, datastore status, created at, datastore type version, and datastore endpoint.
        public let datastoreProperties: DatastoreProperties

        public init(datastoreProperties: DatastoreProperties) {
            self.datastoreProperties = datastoreProperties
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreProperties = "DatastoreProperties"
        }
    }

    public struct DescribeFHIRImportJobRequest: AWSEncodableShape {
        /// The AWS-generated ID of the datastore.
        public let datastoreId: String
        /// The AWS-generated job ID.
        public let jobId: String

        public init(datastoreId: String, jobId: String) {
            self.datastoreId = datastoreId
            self.jobId = jobId
        }

        public func validate(name: String) throws {
            try self.validate(self.datastoreId, name: "datastoreId", parent: name, max: 32)
            try self.validate(self.datastoreId, name: "datastoreId", parent: name, min: 1)
            try self.validate(self.datastoreId, name: "datastoreId", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$")
            try self.validate(self.jobId, name: "jobId", parent: name, max: 32)
            try self.validate(self.jobId, name: "jobId", parent: name, min: 1)
            try self.validate(self.jobId, name: "jobId", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreId = "DatastoreId"
            case jobId = "JobId"
        }
    }

    public struct DescribeFHIRImportJobResponse: AWSDecodableShape {
        /// The properties of the Import job request, including the ID, ARN, name, and the status of the datastore.
        public let importJobProperties: ImportJobProperties

        public init(importJobProperties: ImportJobProperties) {
            self.importJobProperties = importJobProperties
        }

        private enum CodingKeys: String, CodingKey {
            case importJobProperties = "ImportJobProperties"
        }
    }

    public struct ImportJobProperties: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that gives Amazon HealthLake access to your input data.
        public let dataAccessRoleArn: String?
        /// The datastore id used when the Import job was created.
        public let datastoreId: String
        /// The time that the Import job was completed.
        public let endTime: Date?
        /// The input data configuration that was supplied when the Import job was created.
        public let inputDataConfig: InputDataConfig
        /// The AWS-generated id number for the Import job.
        public let jobId: String
        /// The user-generated name for an Import job.
        public let jobName: String?
        /// The job status for an Import job. Possible statuses are SUBMITTED, IN_PROGRESS, COMPLETED, FAILED.
        public let jobStatus: JobStatus
        /// An explanation of any errors that may have occurred during the FHIR import job.
        public let message: String?
        /// The time that the Import job was submitted for processing.
        public let submitTime: Date

        public init(dataAccessRoleArn: String? = nil, datastoreId: String, endTime: Date? = nil, inputDataConfig: InputDataConfig, jobId: String, jobName: String? = nil, jobStatus: JobStatus, message: String? = nil, submitTime: Date) {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.datastoreId = datastoreId
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.message = message
            self.submitTime = submitTime
        }

        private enum CodingKeys: String, CodingKey {
            case dataAccessRoleArn = "DataAccessRoleArn"
            case datastoreId = "DatastoreId"
            case endTime = "EndTime"
            case inputDataConfig = "InputDataConfig"
            case jobId = "JobId"
            case jobName = "JobName"
            case jobStatus = "JobStatus"
            case message = "Message"
            case submitTime = "SubmitTime"
        }
    }

    public struct InputDataConfig: AWSEncodableShape & AWSDecodableShape {
        /// The S3Uri is the user specified S3 location of the FHIR data to be imported into Amazon HealthLake.
        public let s3Uri: String?

        public init(s3Uri: String? = nil) {
            self.s3Uri = s3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, max: 1024)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, pattern: "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?")
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
        }
    }

    public struct ListFHIRDatastoresRequest: AWSEncodableShape {
        /// Lists all filters associated with a FHIR datastore request.
        public let filter: DatastoreFilter?
        /// The maximum number of datastores returned in a single page of a ListFHIRDatastoresRequest call.
        public let maxResults: Int?
        /// Fetches the next page of datastores when results are paginated.
        public let nextToken: String?

        public init(filter: DatastoreFilter? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.filter?.validate(name: "\(name).filter")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 500)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "\\p{ASCII}{0,8192}")
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListFHIRDatastoresResponse: AWSDecodableShape {
        /// All properties associated with the listed datastores.
        public let datastorePropertiesList: [DatastoreProperties]
        /// Pagination token that can be used to retrieve the next page of results.
        public let nextToken: String?

        public init(datastorePropertiesList: [DatastoreProperties], nextToken: String? = nil) {
            self.datastorePropertiesList = datastorePropertiesList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case datastorePropertiesList = "DatastorePropertiesList"
            case nextToken = "NextToken"
        }
    }

    public struct PreloadDataConfig: AWSEncodableShape & AWSDecodableShape {
        /// The type of preloaded data. Only Synthea preloaded data is supported.
        public let preloadDataType: PreloadDataType

        public init(preloadDataType: PreloadDataType) {
            self.preloadDataType = preloadDataType
        }

        private enum CodingKeys: String, CodingKey {
            case preloadDataType = "PreloadDataType"
        }
    }

    public struct StartFHIRImportJobRequest: AWSEncodableShape {
        /// Optional user provided token used for ensuring idempotency.
        public let clientToken: String
        /// The Amazon Resource Name (ARN) that gives Amazon HealthLake access permission.
        public let dataAccessRoleArn: String
        /// The AWS-generated datastore ID.
        public let datastoreId: String
        /// The input properties of the FHIR Import job in the StartFHIRImport job request.
        public let inputDataConfig: InputDataConfig
        /// The name of the FHIR Import job in the StartFHIRImport job request.
        public let jobName: String?

        public init(clientToken: String = StartFHIRImportJobRequest.idempotencyToken(), dataAccessRoleArn: String, datastoreId: String, inputDataConfig: InputDataConfig, jobName: String? = nil) {
            self.clientToken = clientToken
            self.dataAccessRoleArn = dataAccessRoleArn
            self.datastoreId = datastoreId
            self.inputDataConfig = inputDataConfig
            self.jobName = jobName
        }

        public func validate(name: String) throws {
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 64)
            try self.validate(self.clientToken, name: "clientToken", parent: name, min: 1)
            try self.validate(self.clientToken, name: "clientToken", parent: name, pattern: "^[a-zA-Z0-9-]+$")
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, max: 2048)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, min: 20)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, pattern: "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+")
            try self.validate(self.datastoreId, name: "datastoreId", parent: name, max: 32)
            try self.validate(self.datastoreId, name: "datastoreId", parent: name, min: 1)
            try self.validate(self.datastoreId, name: "datastoreId", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$")
            try self.inputDataConfig.validate(name: "\(name).inputDataConfig")
            try self.validate(self.jobName, name: "jobName", parent: name, max: 64)
            try self.validate(self.jobName, name: "jobName", parent: name, min: 1)
            try self.validate(self.jobName, name: "jobName", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case datastoreId = "DatastoreId"
            case inputDataConfig = "InputDataConfig"
            case jobName = "JobName"
        }
    }

    public struct StartFHIRImportJobResponse: AWSDecodableShape {
        /// The AWS-generated datastore ID.
        public let datastoreId: String?
        /// The AWS-generated job ID.
        public let jobId: String
        /// The status of an import job.
        public let jobStatus: JobStatus

        public init(datastoreId: String? = nil, jobId: String, jobStatus: JobStatus) {
            self.datastoreId = datastoreId
            self.jobId = jobId
            self.jobStatus = jobStatus
        }

        private enum CodingKeys: String, CodingKey {
            case datastoreId = "DatastoreId"
            case jobId = "JobId"
            case jobStatus = "JobStatus"
        }
    }
}
