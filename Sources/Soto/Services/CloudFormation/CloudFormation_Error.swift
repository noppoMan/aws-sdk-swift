//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for CloudFormation
public struct CloudFormationErrorType: AWSErrorType {
    enum Code: String {
        case alreadyExistsException = "AlreadyExistsException"
        case cFNRegistryException = "CFNRegistryException"
        case changeSetNotFoundException = "ChangeSetNotFound"
        case createdButModifiedException = "CreatedButModifiedException"
        case insufficientCapabilitiesException = "InsufficientCapabilitiesException"
        case invalidChangeSetStatusException = "InvalidChangeSetStatus"
        case invalidOperationException = "InvalidOperationException"
        case invalidStateTransitionException = "InvalidStateTransition"
        case limitExceededException = "LimitExceededException"
        case nameAlreadyExistsException = "NameAlreadyExistsException"
        case operationIdAlreadyExistsException = "OperationIdAlreadyExistsException"
        case operationInProgressException = "OperationInProgressException"
        case operationNotFoundException = "OperationNotFoundException"
        case operationStatusCheckFailedException = "ConditionalCheckFailed"
        case stackInstanceNotFoundException = "StackInstanceNotFoundException"
        case stackSetNotEmptyException = "StackSetNotEmptyException"
        case stackSetNotFoundException = "StackSetNotFoundException"
        case staleRequestException = "StaleRequestException"
        case tokenAlreadyExistsException = "TokenAlreadyExistsException"
        case typeNotFoundException = "TypeNotFoundException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize CloudFormation
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var alreadyExistsException: Self { .init(.alreadyExistsException) }
    public static var cFNRegistryException: Self { .init(.cFNRegistryException) }
    public static var changeSetNotFoundException: Self { .init(.changeSetNotFoundException) }
    public static var createdButModifiedException: Self { .init(.createdButModifiedException) }
    public static var insufficientCapabilitiesException: Self { .init(.insufficientCapabilitiesException) }
    public static var invalidChangeSetStatusException: Self { .init(.invalidChangeSetStatusException) }
    public static var invalidOperationException: Self { .init(.invalidOperationException) }
    public static var invalidStateTransitionException: Self { .init(.invalidStateTransitionException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var nameAlreadyExistsException: Self { .init(.nameAlreadyExistsException) }
    public static var operationIdAlreadyExistsException: Self { .init(.operationIdAlreadyExistsException) }
    public static var operationInProgressException: Self { .init(.operationInProgressException) }
    public static var operationNotFoundException: Self { .init(.operationNotFoundException) }
    public static var operationStatusCheckFailedException: Self { .init(.operationStatusCheckFailedException) }
    public static var stackInstanceNotFoundException: Self { .init(.stackInstanceNotFoundException) }
    public static var stackSetNotEmptyException: Self { .init(.stackSetNotEmptyException) }
    public static var stackSetNotFoundException: Self { .init(.stackSetNotFoundException) }
    public static var staleRequestException: Self { .init(.staleRequestException) }
    public static var tokenAlreadyExistsException: Self { .init(.tokenAlreadyExistsException) }
    public static var typeNotFoundException: Self { .init(.typeNotFoundException) }
}

extension CloudFormationErrorType: Equatable {
    public static func == (lhs: CloudFormationErrorType, rhs: CloudFormationErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension CloudFormationErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
