//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for AlexaForBusiness
public struct AlexaForBusinessErrorType: AWSErrorType {
    enum Code: String {
        case alreadyExistsException = "AlreadyExistsException"
        case concurrentModificationException = "ConcurrentModificationException"
        case deviceNotRegisteredException = "DeviceNotRegisteredException"
        case invalidCertificateAuthorityException = "InvalidCertificateAuthorityException"
        case invalidDeviceException = "InvalidDeviceException"
        case invalidSecretsManagerResourceException = "InvalidSecretsManagerResourceException"
        case invalidServiceLinkedRoleStateException = "InvalidServiceLinkedRoleStateException"
        case invalidUserStatusException = "InvalidUserStatusException"
        case limitExceededException = "LimitExceededException"
        case nameInUseException = "NameInUseException"
        case notFoundException = "NotFoundException"
        case resourceAssociatedException = "ResourceAssociatedException"
        case resourceInUseException = "ResourceInUseException"
        case skillNotLinkedException = "SkillNotLinkedException"
        case unauthorizedException = "UnauthorizedException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize AlexaForBusiness
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var alreadyExistsException: Self { .init(.alreadyExistsException) }
    public static var concurrentModificationException: Self { .init(.concurrentModificationException) }
    public static var deviceNotRegisteredException: Self { .init(.deviceNotRegisteredException) }
    public static var invalidCertificateAuthorityException: Self { .init(.invalidCertificateAuthorityException) }
    public static var invalidDeviceException: Self { .init(.invalidDeviceException) }
    public static var invalidSecretsManagerResourceException: Self { .init(.invalidSecretsManagerResourceException) }
    public static var invalidServiceLinkedRoleStateException: Self { .init(.invalidServiceLinkedRoleStateException) }
    public static var invalidUserStatusException: Self { .init(.invalidUserStatusException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var nameInUseException: Self { .init(.nameInUseException) }
    public static var notFoundException: Self { .init(.notFoundException) }
    public static var resourceAssociatedException: Self { .init(.resourceAssociatedException) }
    public static var resourceInUseException: Self { .init(.resourceInUseException) }
    public static var skillNotLinkedException: Self { .init(.skillNotLinkedException) }
    public static var unauthorizedException: Self { .init(.unauthorizedException) }
}

extension AlexaForBusinessErrorType: Equatable {
    public static func == (lhs: AlexaForBusinessErrorType, rhs: AlexaForBusinessErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension AlexaForBusinessErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
