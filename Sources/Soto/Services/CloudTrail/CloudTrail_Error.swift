//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for CloudTrail
public struct CloudTrailErrorType: AWSErrorType {
    enum Code: String {
        case cloudTrailARNInvalidException = "CloudTrailARNInvalidException"
        case cloudTrailAccessNotEnabledException = "CloudTrailAccessNotEnabledException"
        case cloudWatchLogsDeliveryUnavailableException = "CloudWatchLogsDeliveryUnavailableException"
        case insightNotEnabledException = "InsightNotEnabledException"
        case insufficientDependencyServiceAccessPermissionException = "InsufficientDependencyServiceAccessPermissionException"
        case insufficientEncryptionPolicyException = "InsufficientEncryptionPolicyException"
        case insufficientS3BucketPolicyException = "InsufficientS3BucketPolicyException"
        case insufficientSnsTopicPolicyException = "InsufficientSnsTopicPolicyException"
        case invalidCloudWatchLogsLogGroupArnException = "InvalidCloudWatchLogsLogGroupArnException"
        case invalidCloudWatchLogsRoleArnException = "InvalidCloudWatchLogsRoleArnException"
        case invalidEventCategoryException = "InvalidEventCategoryException"
        case invalidEventSelectorsException = "InvalidEventSelectorsException"
        case invalidHomeRegionException = "InvalidHomeRegionException"
        case invalidInsightSelectorsException = "InvalidInsightSelectorsException"
        case invalidKmsKeyIdException = "InvalidKmsKeyIdException"
        case invalidLookupAttributesException = "InvalidLookupAttributesException"
        case invalidMaxResultsException = "InvalidMaxResultsException"
        case invalidNextTokenException = "InvalidNextTokenException"
        case invalidParameterCombinationException = "InvalidParameterCombinationException"
        case invalidS3BucketNameException = "InvalidS3BucketNameException"
        case invalidS3PrefixException = "InvalidS3PrefixException"
        case invalidSnsTopicNameException = "InvalidSnsTopicNameException"
        case invalidTagParameterException = "InvalidTagParameterException"
        case invalidTimeRangeException = "InvalidTimeRangeException"
        case invalidTokenException = "InvalidTokenException"
        case invalidTrailNameException = "InvalidTrailNameException"
        case kmsException = "KmsException"
        case kmsKeyDisabledException = "KmsKeyDisabledException"
        case kmsKeyNotFoundException = "KmsKeyNotFoundException"
        case maximumNumberOfTrailsExceededException = "MaximumNumberOfTrailsExceededException"
        case notOrganizationMasterAccountException = "NotOrganizationMasterAccountException"
        case operationNotPermittedException = "OperationNotPermittedException"
        case organizationNotInAllFeaturesModeException = "OrganizationNotInAllFeaturesModeException"
        case organizationsNotInUseException = "OrganizationsNotInUseException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case resourceTypeNotSupportedException = "ResourceTypeNotSupportedException"
        case s3BucketDoesNotExistException = "S3BucketDoesNotExistException"
        case tagsLimitExceededException = "TagsLimitExceededException"
        case trailAlreadyExistsException = "TrailAlreadyExistsException"
        case trailNotFoundException = "TrailNotFoundException"
        case trailNotProvidedException = "TrailNotProvidedException"
        case unsupportedOperationException = "UnsupportedOperationException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var cloudTrailARNInvalidException: Self { .init(.cloudTrailARNInvalidException) }
    public static var cloudTrailAccessNotEnabledException: Self { .init(.cloudTrailAccessNotEnabledException) }
    public static var cloudWatchLogsDeliveryUnavailableException: Self { .init(.cloudWatchLogsDeliveryUnavailableException) }
    public static var insightNotEnabledException: Self { .init(.insightNotEnabledException) }
    public static var insufficientDependencyServiceAccessPermissionException: Self { .init(.insufficientDependencyServiceAccessPermissionException) }
    public static var insufficientEncryptionPolicyException: Self { .init(.insufficientEncryptionPolicyException) }
    public static var insufficientS3BucketPolicyException: Self { .init(.insufficientS3BucketPolicyException) }
    public static var insufficientSnsTopicPolicyException: Self { .init(.insufficientSnsTopicPolicyException) }
    public static var invalidCloudWatchLogsLogGroupArnException: Self { .init(.invalidCloudWatchLogsLogGroupArnException) }
    public static var invalidCloudWatchLogsRoleArnException: Self { .init(.invalidCloudWatchLogsRoleArnException) }
    public static var invalidEventCategoryException: Self { .init(.invalidEventCategoryException) }
    public static var invalidEventSelectorsException: Self { .init(.invalidEventSelectorsException) }
    public static var invalidHomeRegionException: Self { .init(.invalidHomeRegionException) }
    public static var invalidInsightSelectorsException: Self { .init(.invalidInsightSelectorsException) }
    public static var invalidKmsKeyIdException: Self { .init(.invalidKmsKeyIdException) }
    public static var invalidLookupAttributesException: Self { .init(.invalidLookupAttributesException) }
    public static var invalidMaxResultsException: Self { .init(.invalidMaxResultsException) }
    public static var invalidNextTokenException: Self { .init(.invalidNextTokenException) }
    public static var invalidParameterCombinationException: Self { .init(.invalidParameterCombinationException) }
    public static var invalidS3BucketNameException: Self { .init(.invalidS3BucketNameException) }
    public static var invalidS3PrefixException: Self { .init(.invalidS3PrefixException) }
    public static var invalidSnsTopicNameException: Self { .init(.invalidSnsTopicNameException) }
    public static var invalidTagParameterException: Self { .init(.invalidTagParameterException) }
    public static var invalidTimeRangeException: Self { .init(.invalidTimeRangeException) }
    public static var invalidTokenException: Self { .init(.invalidTokenException) }
    public static var invalidTrailNameException: Self { .init(.invalidTrailNameException) }
    public static var kmsException: Self { .init(.kmsException) }
    public static var kmsKeyDisabledException: Self { .init(.kmsKeyDisabledException) }
    public static var kmsKeyNotFoundException: Self { .init(.kmsKeyNotFoundException) }
    public static var maximumNumberOfTrailsExceededException: Self { .init(.maximumNumberOfTrailsExceededException) }
    public static var notOrganizationMasterAccountException: Self { .init(.notOrganizationMasterAccountException) }
    public static var operationNotPermittedException: Self { .init(.operationNotPermittedException) }
    public static var organizationNotInAllFeaturesModeException: Self { .init(.organizationNotInAllFeaturesModeException) }
    public static var organizationsNotInUseException: Self { .init(.organizationsNotInUseException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var resourceTypeNotSupportedException: Self { .init(.resourceTypeNotSupportedException) }
    public static var s3BucketDoesNotExistException: Self { .init(.s3BucketDoesNotExistException) }
    public static var tagsLimitExceededException: Self { .init(.tagsLimitExceededException) }
    public static var trailAlreadyExistsException: Self { .init(.trailAlreadyExistsException) }
    public static var trailNotFoundException: Self { .init(.trailNotFoundException) }
    public static var trailNotProvidedException: Self { .init(.trailNotProvidedException) }
    public static var unsupportedOperationException: Self { .init(.unsupportedOperationException) }
}

extension CloudTrailErrorType: Equatable {
    public static func == (lhs: CloudTrailErrorType, rhs: CloudTrailErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension CloudTrailErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
