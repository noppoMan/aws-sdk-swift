//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for ACMPCA
public struct ACMPCAErrorType: AWSErrorType {
    enum Code: String {
        case certificateMismatchException = "CertificateMismatchException"
        case concurrentModificationException = "ConcurrentModificationException"
        case invalidArgsException = "InvalidArgsException"
        case invalidArnException = "InvalidArnException"
        case invalidNextTokenException = "InvalidNextTokenException"
        case invalidPolicyException = "InvalidPolicyException"
        case invalidRequestException = "InvalidRequestException"
        case invalidStateException = "InvalidStateException"
        case invalidTagException = "InvalidTagException"
        case limitExceededException = "LimitExceededException"
        case lockoutPreventedException = "LockoutPreventedException"
        case malformedCSRException = "MalformedCSRException"
        case malformedCertificateException = "MalformedCertificateException"
        case permissionAlreadyExistsException = "PermissionAlreadyExistsException"
        case requestAlreadyProcessedException = "RequestAlreadyProcessedException"
        case requestFailedException = "RequestFailedException"
        case requestInProgressException = "RequestInProgressException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case tooManyTagsException = "TooManyTagsException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var certificateMismatchException: Self { .init(.certificateMismatchException) }
    public static var concurrentModificationException: Self { .init(.concurrentModificationException) }
    public static var invalidArgsException: Self { .init(.invalidArgsException) }
    public static var invalidArnException: Self { .init(.invalidArnException) }
    public static var invalidNextTokenException: Self { .init(.invalidNextTokenException) }
    public static var invalidPolicyException: Self { .init(.invalidPolicyException) }
    public static var invalidRequestException: Self { .init(.invalidRequestException) }
    public static var invalidStateException: Self { .init(.invalidStateException) }
    public static var invalidTagException: Self { .init(.invalidTagException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var lockoutPreventedException: Self { .init(.lockoutPreventedException) }
    public static var malformedCSRException: Self { .init(.malformedCSRException) }
    public static var malformedCertificateException: Self { .init(.malformedCertificateException) }
    public static var permissionAlreadyExistsException: Self { .init(.permissionAlreadyExistsException) }
    public static var requestAlreadyProcessedException: Self { .init(.requestAlreadyProcessedException) }
    public static var requestFailedException: Self { .init(.requestFailedException) }
    public static var requestInProgressException: Self { .init(.requestInProgressException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var tooManyTagsException: Self { .init(.tooManyTagsException) }
}

extension ACMPCAErrorType: Equatable {
    public static func == (lhs: ACMPCAErrorType, rhs: ACMPCAErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension ACMPCAErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
