//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for SFN
public struct SFNErrorType: AWSErrorType {
    enum Code: String {
        case activityDoesNotExist = "ActivityDoesNotExist"
        case activityLimitExceeded = "ActivityLimitExceeded"
        case activityWorkerLimitExceeded = "ActivityWorkerLimitExceeded"
        case executionAlreadyExists = "ExecutionAlreadyExists"
        case executionDoesNotExist = "ExecutionDoesNotExist"
        case executionLimitExceeded = "ExecutionLimitExceeded"
        case invalidArn = "InvalidArn"
        case invalidDefinition = "InvalidDefinition"
        case invalidExecutionInput = "InvalidExecutionInput"
        case invalidLoggingConfiguration = "InvalidLoggingConfiguration"
        case invalidName = "InvalidName"
        case invalidOutput = "InvalidOutput"
        case invalidToken = "InvalidToken"
        case invalidTracingConfiguration = "InvalidTracingConfiguration"
        case missingRequiredParameter = "MissingRequiredParameter"
        case resourceNotFound = "ResourceNotFound"
        case stateMachineAlreadyExists = "StateMachineAlreadyExists"
        case stateMachineDeleting = "StateMachineDeleting"
        case stateMachineDoesNotExist = "StateMachineDoesNotExist"
        case stateMachineLimitExceeded = "StateMachineLimitExceeded"
        case stateMachineTypeNotSupported = "StateMachineTypeNotSupported"
        case taskDoesNotExist = "TaskDoesNotExist"
        case taskTimedOut = "TaskTimedOut"
        case tooManyTags = "TooManyTags"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize SFN
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var activityDoesNotExist: Self { .init(.activityDoesNotExist) }
    public static var activityLimitExceeded: Self { .init(.activityLimitExceeded) }
    public static var activityWorkerLimitExceeded: Self { .init(.activityWorkerLimitExceeded) }
    public static var executionAlreadyExists: Self { .init(.executionAlreadyExists) }
    public static var executionDoesNotExist: Self { .init(.executionDoesNotExist) }
    public static var executionLimitExceeded: Self { .init(.executionLimitExceeded) }
    public static var invalidArn: Self { .init(.invalidArn) }
    public static var invalidDefinition: Self { .init(.invalidDefinition) }
    public static var invalidExecutionInput: Self { .init(.invalidExecutionInput) }
    public static var invalidLoggingConfiguration: Self { .init(.invalidLoggingConfiguration) }
    public static var invalidName: Self { .init(.invalidName) }
    public static var invalidOutput: Self { .init(.invalidOutput) }
    public static var invalidToken: Self { .init(.invalidToken) }
    public static var invalidTracingConfiguration: Self { .init(.invalidTracingConfiguration) }
    public static var missingRequiredParameter: Self { .init(.missingRequiredParameter) }
    public static var resourceNotFound: Self { .init(.resourceNotFound) }
    public static var stateMachineAlreadyExists: Self { .init(.stateMachineAlreadyExists) }
    public static var stateMachineDeleting: Self { .init(.stateMachineDeleting) }
    public static var stateMachineDoesNotExist: Self { .init(.stateMachineDoesNotExist) }
    public static var stateMachineLimitExceeded: Self { .init(.stateMachineLimitExceeded) }
    public static var stateMachineTypeNotSupported: Self { .init(.stateMachineTypeNotSupported) }
    public static var taskDoesNotExist: Self { .init(.taskDoesNotExist) }
    public static var taskTimedOut: Self { .init(.taskTimedOut) }
    public static var tooManyTags: Self { .init(.tooManyTags) }
}

extension SFNErrorType: Equatable {
    public static func == (lhs: SFNErrorType, rhs: SFNErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension SFNErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
