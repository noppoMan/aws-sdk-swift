//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for ECR
public struct ECRErrorType: AWSErrorType {
    enum Code: String {
        case emptyUploadException = "EmptyUploadException"
        case imageAlreadyExistsException = "ImageAlreadyExistsException"
        case imageDigestDoesNotMatchException = "ImageDigestDoesNotMatchException"
        case imageNotFoundException = "ImageNotFoundException"
        case imageTagAlreadyExistsException = "ImageTagAlreadyExistsException"
        case invalidLayerException = "InvalidLayerException"
        case invalidLayerPartException = "InvalidLayerPartException"
        case invalidParameterException = "InvalidParameterException"
        case invalidTagParameterException = "InvalidTagParameterException"
        case kmsException = "KmsException"
        case layerAlreadyExistsException = "LayerAlreadyExistsException"
        case layerInaccessibleException = "LayerInaccessibleException"
        case layerPartTooSmallException = "LayerPartTooSmallException"
        case layersNotFoundException = "LayersNotFoundException"
        case lifecyclePolicyNotFoundException = "LifecyclePolicyNotFoundException"
        case lifecyclePolicyPreviewInProgressException = "LifecyclePolicyPreviewInProgressException"
        case lifecyclePolicyPreviewNotFoundException = "LifecyclePolicyPreviewNotFoundException"
        case limitExceededException = "LimitExceededException"
        case referencedImagesNotFoundException = "ReferencedImagesNotFoundException"
        case repositoryAlreadyExistsException = "RepositoryAlreadyExistsException"
        case repositoryNotEmptyException = "RepositoryNotEmptyException"
        case repositoryNotFoundException = "RepositoryNotFoundException"
        case repositoryPolicyNotFoundException = "RepositoryPolicyNotFoundException"
        case scanNotFoundException = "ScanNotFoundException"
        case serverException = "ServerException"
        case tooManyTagsException = "TooManyTagsException"
        case unsupportedImageTypeException = "UnsupportedImageTypeException"
        case uploadNotFoundException = "UploadNotFoundException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize ECR
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var emptyUploadException: Self { .init(.emptyUploadException) }
    public static var imageAlreadyExistsException: Self { .init(.imageAlreadyExistsException) }
    public static var imageDigestDoesNotMatchException: Self { .init(.imageDigestDoesNotMatchException) }
    public static var imageNotFoundException: Self { .init(.imageNotFoundException) }
    public static var imageTagAlreadyExistsException: Self { .init(.imageTagAlreadyExistsException) }
    public static var invalidLayerException: Self { .init(.invalidLayerException) }
    public static var invalidLayerPartException: Self { .init(.invalidLayerPartException) }
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    public static var invalidTagParameterException: Self { .init(.invalidTagParameterException) }
    public static var kmsException: Self { .init(.kmsException) }
    public static var layerAlreadyExistsException: Self { .init(.layerAlreadyExistsException) }
    public static var layerInaccessibleException: Self { .init(.layerInaccessibleException) }
    public static var layerPartTooSmallException: Self { .init(.layerPartTooSmallException) }
    public static var layersNotFoundException: Self { .init(.layersNotFoundException) }
    public static var lifecyclePolicyNotFoundException: Self { .init(.lifecyclePolicyNotFoundException) }
    public static var lifecyclePolicyPreviewInProgressException: Self { .init(.lifecyclePolicyPreviewInProgressException) }
    public static var lifecyclePolicyPreviewNotFoundException: Self { .init(.lifecyclePolicyPreviewNotFoundException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var referencedImagesNotFoundException: Self { .init(.referencedImagesNotFoundException) }
    public static var repositoryAlreadyExistsException: Self { .init(.repositoryAlreadyExistsException) }
    public static var repositoryNotEmptyException: Self { .init(.repositoryNotEmptyException) }
    public static var repositoryNotFoundException: Self { .init(.repositoryNotFoundException) }
    public static var repositoryPolicyNotFoundException: Self { .init(.repositoryPolicyNotFoundException) }
    public static var scanNotFoundException: Self { .init(.scanNotFoundException) }
    public static var serverException: Self { .init(.serverException) }
    public static var tooManyTagsException: Self { .init(.tooManyTagsException) }
    public static var unsupportedImageTypeException: Self { .init(.unsupportedImageTypeException) }
    public static var uploadNotFoundException: Self { .init(.uploadNotFoundException) }
}

extension ECRErrorType: Equatable {
    public static func == (lhs: ECRErrorType, rhs: ECRErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension ECRErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
