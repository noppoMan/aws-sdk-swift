//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Lambda
public struct LambdaErrorType: AWSErrorType {
    enum Code: String {
        case codeStorageExceededException = "CodeStorageExceededException"
        case eC2AccessDeniedException = "EC2AccessDeniedException"
        case eC2ThrottledException = "EC2ThrottledException"
        case eC2UnexpectedException = "EC2UnexpectedException"
        case eFSIOException = "EFSIOException"
        case eFSMountConnectivityException = "EFSMountConnectivityException"
        case eFSMountFailureException = "EFSMountFailureException"
        case eFSMountTimeoutException = "EFSMountTimeoutException"
        case eNILimitReachedException = "ENILimitReachedException"
        case invalidParameterValueException = "InvalidParameterValueException"
        case invalidRequestContentException = "InvalidRequestContentException"
        case invalidRuntimeException = "InvalidRuntimeException"
        case invalidSecurityGroupIDException = "InvalidSecurityGroupIDException"
        case invalidSubnetIDException = "InvalidSubnetIDException"
        case invalidZipFileException = "InvalidZipFileException"
        case kMSAccessDeniedException = "KMSAccessDeniedException"
        case kMSDisabledException = "KMSDisabledException"
        case kMSInvalidStateException = "KMSInvalidStateException"
        case kMSNotFoundException = "KMSNotFoundException"
        case policyLengthExceededException = "PolicyLengthExceededException"
        case preconditionFailedException = "PreconditionFailedException"
        case provisionedConcurrencyConfigNotFoundException = "ProvisionedConcurrencyConfigNotFoundException"
        case requestTooLargeException = "RequestTooLargeException"
        case resourceConflictException = "ResourceConflictException"
        case resourceInUseException = "ResourceInUseException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case resourceNotReadyException = "ResourceNotReadyException"
        case serviceException = "ServiceException"
        case subnetIPAddressLimitReachedException = "SubnetIPAddressLimitReachedException"
        case tooManyRequestsException = "TooManyRequestsException"
        case unsupportedMediaTypeException = "UnsupportedMediaTypeException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var codeStorageExceededException: Self { .init(.codeStorageExceededException) }
    public static var eC2AccessDeniedException: Self { .init(.eC2AccessDeniedException) }
    public static var eC2ThrottledException: Self { .init(.eC2ThrottledException) }
    public static var eC2UnexpectedException: Self { .init(.eC2UnexpectedException) }
    public static var eFSIOException: Self { .init(.eFSIOException) }
    public static var eFSMountConnectivityException: Self { .init(.eFSMountConnectivityException) }
    public static var eFSMountFailureException: Self { .init(.eFSMountFailureException) }
    public static var eFSMountTimeoutException: Self { .init(.eFSMountTimeoutException) }
    public static var eNILimitReachedException: Self { .init(.eNILimitReachedException) }
    public static var invalidParameterValueException: Self { .init(.invalidParameterValueException) }
    public static var invalidRequestContentException: Self { .init(.invalidRequestContentException) }
    public static var invalidRuntimeException: Self { .init(.invalidRuntimeException) }
    public static var invalidSecurityGroupIDException: Self { .init(.invalidSecurityGroupIDException) }
    public static var invalidSubnetIDException: Self { .init(.invalidSubnetIDException) }
    public static var invalidZipFileException: Self { .init(.invalidZipFileException) }
    public static var kMSAccessDeniedException: Self { .init(.kMSAccessDeniedException) }
    public static var kMSDisabledException: Self { .init(.kMSDisabledException) }
    public static var kMSInvalidStateException: Self { .init(.kMSInvalidStateException) }
    public static var kMSNotFoundException: Self { .init(.kMSNotFoundException) }
    public static var policyLengthExceededException: Self { .init(.policyLengthExceededException) }
    public static var preconditionFailedException: Self { .init(.preconditionFailedException) }
    public static var provisionedConcurrencyConfigNotFoundException: Self { .init(.provisionedConcurrencyConfigNotFoundException) }
    public static var requestTooLargeException: Self { .init(.requestTooLargeException) }
    public static var resourceConflictException: Self { .init(.resourceConflictException) }
    public static var resourceInUseException: Self { .init(.resourceInUseException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var resourceNotReadyException: Self { .init(.resourceNotReadyException) }
    public static var serviceException: Self { .init(.serviceException) }
    public static var subnetIPAddressLimitReachedException: Self { .init(.subnetIPAddressLimitReachedException) }
    public static var tooManyRequestsException: Self { .init(.tooManyRequestsException) }
    public static var unsupportedMediaTypeException: Self { .init(.unsupportedMediaTypeException) }
}

extension LambdaErrorType: Equatable {
    public static func == (lhs: LambdaErrorType, rhs: LambdaErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension LambdaErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
