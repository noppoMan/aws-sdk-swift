//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for ImportExport
public struct ImportExportErrorType: AWSErrorType {
    enum Code: String {
        case bucketPermissionException = "BucketPermissionException"
        case canceledJobIdException = "CanceledJobIdException"
        case createJobQuotaExceededException = "CreateJobQuotaExceededException"
        case expiredJobIdException = "ExpiredJobIdException"
        case invalidAccessKeyIdException = "InvalidAccessKeyIdException"
        case invalidAddressException = "InvalidAddressException"
        case invalidCustomsException = "InvalidCustomsException"
        case invalidFileSystemException = "InvalidFileSystemException"
        case invalidJobIdException = "InvalidJobIdException"
        case invalidManifestFieldException = "InvalidManifestFieldException"
        case invalidParameterException = "InvalidParameterException"
        case invalidVersionException = "InvalidVersionException"
        case malformedManifestException = "MalformedManifestException"
        case missingCustomsException = "MissingCustomsException"
        case missingManifestFieldException = "MissingManifestFieldException"
        case missingParameterException = "MissingParameterException"
        case multipleRegionsException = "MultipleRegionsException"
        case noSuchBucketException = "NoSuchBucketException"
        case unableToCancelJobIdException = "UnableToCancelJobIdException"
        case unableToUpdateJobIdException = "UnableToUpdateJobIdException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var bucketPermissionException: Self { .init(.bucketPermissionException) }
    public static var canceledJobIdException: Self { .init(.canceledJobIdException) }
    public static var createJobQuotaExceededException: Self { .init(.createJobQuotaExceededException) }
    public static var expiredJobIdException: Self { .init(.expiredJobIdException) }
    public static var invalidAccessKeyIdException: Self { .init(.invalidAccessKeyIdException) }
    public static var invalidAddressException: Self { .init(.invalidAddressException) }
    public static var invalidCustomsException: Self { .init(.invalidCustomsException) }
    public static var invalidFileSystemException: Self { .init(.invalidFileSystemException) }
    public static var invalidJobIdException: Self { .init(.invalidJobIdException) }
    public static var invalidManifestFieldException: Self { .init(.invalidManifestFieldException) }
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    public static var invalidVersionException: Self { .init(.invalidVersionException) }
    public static var malformedManifestException: Self { .init(.malformedManifestException) }
    public static var missingCustomsException: Self { .init(.missingCustomsException) }
    public static var missingManifestFieldException: Self { .init(.missingManifestFieldException) }
    public static var missingParameterException: Self { .init(.missingParameterException) }
    public static var multipleRegionsException: Self { .init(.multipleRegionsException) }
    public static var noSuchBucketException: Self { .init(.noSuchBucketException) }
    public static var unableToCancelJobIdException: Self { .init(.unableToCancelJobIdException) }
    public static var unableToUpdateJobIdException: Self { .init(.unableToUpdateJobIdException) }
}

extension ImportExportErrorType: Equatable {
    public static func == (lhs: ImportExportErrorType, rhs: ImportExportErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension ImportExportErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
