//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for ImportExport
public enum ImportExportErrorType: AWSErrorType {
    case bucketPermissionException(message: String?)
    case canceledJobIdException(message: String?)
    case createJobQuotaExceededException(message: String?)
    case expiredJobIdException(message: String?)
    case invalidAccessKeyIdException(message: String?)
    case invalidAddressException(message: String?)
    case invalidCustomsException(message: String?)
    case invalidFileSystemException(message: String?)
    case invalidJobIdException(message: String?)
    case invalidManifestFieldException(message: String?)
    case invalidParameterException(message: String?)
    case invalidVersionException(message: String?)
    case malformedManifestException(message: String?)
    case missingCustomsException(message: String?)
    case missingManifestFieldException(message: String?)
    case missingParameterException(message: String?)
    case multipleRegionsException(message: String?)
    case noSuchBucketException(message: String?)
    case unableToCancelJobIdException(message: String?)
    case unableToUpdateJobIdException(message: String?)
}

extension ImportExportErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "BucketPermissionException":
            self = .bucketPermissionException(message: message)
        case "CanceledJobIdException":
            self = .canceledJobIdException(message: message)
        case "CreateJobQuotaExceededException":
            self = .createJobQuotaExceededException(message: message)
        case "ExpiredJobIdException":
            self = .expiredJobIdException(message: message)
        case "InvalidAccessKeyIdException":
            self = .invalidAccessKeyIdException(message: message)
        case "InvalidAddressException":
            self = .invalidAddressException(message: message)
        case "InvalidCustomsException":
            self = .invalidCustomsException(message: message)
        case "InvalidFileSystemException":
            self = .invalidFileSystemException(message: message)
        case "InvalidJobIdException":
            self = .invalidJobIdException(message: message)
        case "InvalidManifestFieldException":
            self = .invalidManifestFieldException(message: message)
        case "InvalidParameterException":
            self = .invalidParameterException(message: message)
        case "InvalidVersionException":
            self = .invalidVersionException(message: message)
        case "MalformedManifestException":
            self = .malformedManifestException(message: message)
        case "MissingCustomsException":
            self = .missingCustomsException(message: message)
        case "MissingManifestFieldException":
            self = .missingManifestFieldException(message: message)
        case "MissingParameterException":
            self = .missingParameterException(message: message)
        case "MultipleRegionsException":
            self = .multipleRegionsException(message: message)
        case "NoSuchBucketException":
            self = .noSuchBucketException(message: message)
        case "UnableToCancelJobIdException":
            self = .unableToCancelJobIdException(message: message)
        case "UnableToUpdateJobIdException":
            self = .unableToUpdateJobIdException(message: message)
        default:
            return nil
        }
    }
}

extension ImportExportErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .bucketPermissionException(let message):
            return "BucketPermissionException: \(message ?? "")"
        case .canceledJobIdException(let message):
            return "CanceledJobIdException: \(message ?? "")"
        case .createJobQuotaExceededException(let message):
            return "CreateJobQuotaExceededException: \(message ?? "")"
        case .expiredJobIdException(let message):
            return "ExpiredJobIdException: \(message ?? "")"
        case .invalidAccessKeyIdException(let message):
            return "InvalidAccessKeyIdException: \(message ?? "")"
        case .invalidAddressException(let message):
            return "InvalidAddressException: \(message ?? "")"
        case .invalidCustomsException(let message):
            return "InvalidCustomsException: \(message ?? "")"
        case .invalidFileSystemException(let message):
            return "InvalidFileSystemException: \(message ?? "")"
        case .invalidJobIdException(let message):
            return "InvalidJobIdException: \(message ?? "")"
        case .invalidManifestFieldException(let message):
            return "InvalidManifestFieldException: \(message ?? "")"
        case .invalidParameterException(let message):
            return "InvalidParameterException: \(message ?? "")"
        case .invalidVersionException(let message):
            return "InvalidVersionException: \(message ?? "")"
        case .malformedManifestException(let message):
            return "MalformedManifestException: \(message ?? "")"
        case .missingCustomsException(let message):
            return "MissingCustomsException: \(message ?? "")"
        case .missingManifestFieldException(let message):
            return "MissingManifestFieldException: \(message ?? "")"
        case .missingParameterException(let message):
            return "MissingParameterException: \(message ?? "")"
        case .multipleRegionsException(let message):
            return "MultipleRegionsException: \(message ?? "")"
        case .noSuchBucketException(let message):
            return "NoSuchBucketException: \(message ?? "")"
        case .unableToCancelJobIdException(let message):
            return "UnableToCancelJobIdException: \(message ?? "")"
        case .unableToUpdateJobIdException(let message):
            return "UnableToUpdateJobIdException: \(message ?? "")"
        }
    }
}
