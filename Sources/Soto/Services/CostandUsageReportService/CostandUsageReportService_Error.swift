//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for CostandUsageReportService
public enum CostandUsageReportServiceErrorType: AWSErrorType {
    case duplicateReportNameException(message: String?)
    case internalErrorException(message: String?)
    case reportLimitReachedException(message: String?)
    case validationException(message: String?)
}

extension CostandUsageReportServiceErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "DuplicateReportNameException":
            self = .duplicateReportNameException(message: message)
        case "InternalErrorException":
            self = .internalErrorException(message: message)
        case "ReportLimitReachedException":
            self = .reportLimitReachedException(message: message)
        case "ValidationException":
            self = .validationException(message: message)
        default:
            return nil
        }
    }
}

extension CostandUsageReportServiceErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .duplicateReportNameException(let message):
            return "DuplicateReportNameException: \(message ?? "")"
        case .internalErrorException(let message):
            return "InternalErrorException: \(message ?? "")"
        case .reportLimitReachedException(let message):
            return "ReportLimitReachedException: \(message ?? "")"
        case .validationException(let message):
            return "ValidationException: \(message ?? "")"
        }
    }
}
