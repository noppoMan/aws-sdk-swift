//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Polly
public struct PollyErrorType: AWSErrorType {
    enum Code: String {
        case engineNotSupportedException = "EngineNotSupportedException"
        case invalidLexiconException = "InvalidLexiconException"
        case invalidNextTokenException = "InvalidNextTokenException"
        case invalidS3BucketException = "InvalidS3BucketException"
        case invalidS3KeyException = "InvalidS3KeyException"
        case invalidSampleRateException = "InvalidSampleRateException"
        case invalidSnsTopicArnException = "InvalidSnsTopicArnException"
        case invalidSsmlException = "InvalidSsmlException"
        case invalidTaskIdException = "InvalidTaskIdException"
        case languageNotSupportedException = "LanguageNotSupportedException"
        case lexiconNotFoundException = "LexiconNotFoundException"
        case lexiconSizeExceededException = "LexiconSizeExceededException"
        case marksNotSupportedForFormatException = "MarksNotSupportedForFormatException"
        case maxLexemeLengthExceededException = "MaxLexemeLengthExceededException"
        case maxLexiconsNumberExceededException = "MaxLexiconsNumberExceededException"
        case serviceFailureException = "ServiceFailureException"
        case ssmlMarksNotSupportedForTextTypeException = "SsmlMarksNotSupportedForTextTypeException"
        case synthesisTaskNotFoundException = "SynthesisTaskNotFoundException"
        case textLengthExceededException = "TextLengthExceededException"
        case unsupportedPlsAlphabetException = "UnsupportedPlsAlphabetException"
        case unsupportedPlsLanguageException = "UnsupportedPlsLanguageException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var engineNotSupportedException: Self { .init(.engineNotSupportedException) }
    public static var invalidLexiconException: Self { .init(.invalidLexiconException) }
    public static var invalidNextTokenException: Self { .init(.invalidNextTokenException) }
    public static var invalidS3BucketException: Self { .init(.invalidS3BucketException) }
    public static var invalidS3KeyException: Self { .init(.invalidS3KeyException) }
    public static var invalidSampleRateException: Self { .init(.invalidSampleRateException) }
    public static var invalidSnsTopicArnException: Self { .init(.invalidSnsTopicArnException) }
    public static var invalidSsmlException: Self { .init(.invalidSsmlException) }
    public static var invalidTaskIdException: Self { .init(.invalidTaskIdException) }
    public static var languageNotSupportedException: Self { .init(.languageNotSupportedException) }
    public static var lexiconNotFoundException: Self { .init(.lexiconNotFoundException) }
    public static var lexiconSizeExceededException: Self { .init(.lexiconSizeExceededException) }
    public static var marksNotSupportedForFormatException: Self { .init(.marksNotSupportedForFormatException) }
    public static var maxLexemeLengthExceededException: Self { .init(.maxLexemeLengthExceededException) }
    public static var maxLexiconsNumberExceededException: Self { .init(.maxLexiconsNumberExceededException) }
    public static var serviceFailureException: Self { .init(.serviceFailureException) }
    public static var ssmlMarksNotSupportedForTextTypeException: Self { .init(.ssmlMarksNotSupportedForTextTypeException) }
    public static var synthesisTaskNotFoundException: Self { .init(.synthesisTaskNotFoundException) }
    public static var textLengthExceededException: Self { .init(.textLengthExceededException) }
    public static var unsupportedPlsAlphabetException: Self { .init(.unsupportedPlsAlphabetException) }
    public static var unsupportedPlsLanguageException: Self { .init(.unsupportedPlsLanguageException) }
}

extension PollyErrorType: Equatable {
    public static func == (lhs: PollyErrorType, rhs: PollyErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension PollyErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
