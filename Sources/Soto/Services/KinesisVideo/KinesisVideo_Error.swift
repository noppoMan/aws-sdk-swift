//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for KinesisVideo
public struct KinesisVideoErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case accountChannelLimitExceededException = "AccountChannelLimitExceededException"
        case accountStreamLimitExceededException = "AccountStreamLimitExceededException"
        case clientLimitExceededException = "ClientLimitExceededException"
        case deviceStreamLimitExceededException = "DeviceStreamLimitExceededException"
        case invalidArgumentException = "InvalidArgumentException"
        case invalidDeviceException = "InvalidDeviceException"
        case invalidResourceFormatException = "InvalidResourceFormatException"
        case notAuthorizedException = "NotAuthorizedException"
        case resourceInUseException = "ResourceInUseException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case tagsPerResourceExceededLimitException = "TagsPerResourceExceededLimitException"
        case versionMismatchException = "VersionMismatchException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize KinesisVideo
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    public static var accountChannelLimitExceededException: Self { .init(.accountChannelLimitExceededException) }
    public static var accountStreamLimitExceededException: Self { .init(.accountStreamLimitExceededException) }
    public static var clientLimitExceededException: Self { .init(.clientLimitExceededException) }
    public static var deviceStreamLimitExceededException: Self { .init(.deviceStreamLimitExceededException) }
    public static var invalidArgumentException: Self { .init(.invalidArgumentException) }
    public static var invalidDeviceException: Self { .init(.invalidDeviceException) }
    public static var invalidResourceFormatException: Self { .init(.invalidResourceFormatException) }
    public static var notAuthorizedException: Self { .init(.notAuthorizedException) }
    public static var resourceInUseException: Self { .init(.resourceInUseException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var tagsPerResourceExceededLimitException: Self { .init(.tagsPerResourceExceededLimitException) }
    public static var versionMismatchException: Self { .init(.versionMismatchException) }
}

extension KinesisVideoErrorType: Equatable {
    public static func == (lhs: KinesisVideoErrorType, rhs: KinesisVideoErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension KinesisVideoErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
