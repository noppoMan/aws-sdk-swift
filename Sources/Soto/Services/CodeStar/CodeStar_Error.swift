//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for CodeStar
public struct CodeStarErrorType: AWSErrorType {
    enum Code: String {
        case concurrentModificationException = "ConcurrentModificationException"
        case invalidNextTokenException = "InvalidNextTokenException"
        case invalidServiceRoleException = "InvalidServiceRoleException"
        case limitExceededException = "LimitExceededException"
        case projectAlreadyExistsException = "ProjectAlreadyExistsException"
        case projectConfigurationException = "ProjectConfigurationException"
        case projectCreationFailedException = "ProjectCreationFailedException"
        case projectNotFoundException = "ProjectNotFoundException"
        case teamMemberAlreadyAssociatedException = "TeamMemberAlreadyAssociatedException"
        case teamMemberNotFoundException = "TeamMemberNotFoundException"
        case userProfileAlreadyExistsException = "UserProfileAlreadyExistsException"
        case userProfileNotFoundException = "UserProfileNotFoundException"
        case validationException = "ValidationException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize CodeStar
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var concurrentModificationException: Self { .init(.concurrentModificationException) }
    public static var invalidNextTokenException: Self { .init(.invalidNextTokenException) }
    public static var invalidServiceRoleException: Self { .init(.invalidServiceRoleException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var projectAlreadyExistsException: Self { .init(.projectAlreadyExistsException) }
    public static var projectConfigurationException: Self { .init(.projectConfigurationException) }
    public static var projectCreationFailedException: Self { .init(.projectCreationFailedException) }
    public static var projectNotFoundException: Self { .init(.projectNotFoundException) }
    public static var teamMemberAlreadyAssociatedException: Self { .init(.teamMemberAlreadyAssociatedException) }
    public static var teamMemberNotFoundException: Self { .init(.teamMemberNotFoundException) }
    public static var userProfileAlreadyExistsException: Self { .init(.userProfileAlreadyExistsException) }
    public static var userProfileNotFoundException: Self { .init(.userProfileNotFoundException) }
    public static var validationException: Self { .init(.validationException) }
}

extension CodeStarErrorType: Equatable {
    public static func == (lhs: CodeStarErrorType, rhs: CodeStarErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension CodeStarErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
