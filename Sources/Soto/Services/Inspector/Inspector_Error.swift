//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Inspector
public enum InspectorErrorType: AWSErrorType {
    case accessDeniedException(message: String?)
    case agentsAlreadyRunningAssessmentException(message: String?)
    case assessmentRunInProgressException(message: String?)
    case internalException(message: String?)
    case invalidCrossAccountRoleException(message: String?)
    case invalidInputException(message: String?)
    case limitExceededException(message: String?)
    case noSuchEntityException(message: String?)
    case previewGenerationInProgressException(message: String?)
    case serviceTemporarilyUnavailableException(message: String?)
    case unsupportedFeatureException(message: String?)
}

extension InspectorErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "AccessDeniedException":
            self = .accessDeniedException(message: message)
        case "AgentsAlreadyRunningAssessmentException":
            self = .agentsAlreadyRunningAssessmentException(message: message)
        case "AssessmentRunInProgressException":
            self = .assessmentRunInProgressException(message: message)
        case "InternalException":
            self = .internalException(message: message)
        case "InvalidCrossAccountRoleException":
            self = .invalidCrossAccountRoleException(message: message)
        case "InvalidInputException":
            self = .invalidInputException(message: message)
        case "LimitExceededException":
            self = .limitExceededException(message: message)
        case "NoSuchEntityException":
            self = .noSuchEntityException(message: message)
        case "PreviewGenerationInProgressException":
            self = .previewGenerationInProgressException(message: message)
        case "ServiceTemporarilyUnavailableException":
            self = .serviceTemporarilyUnavailableException(message: message)
        case "UnsupportedFeatureException":
            self = .unsupportedFeatureException(message: message)
        default:
            return nil
        }
    }
}

extension InspectorErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .accessDeniedException(let message):
            return "AccessDeniedException: \(message ?? "")"
        case .agentsAlreadyRunningAssessmentException(let message):
            return "AgentsAlreadyRunningAssessmentException: \(message ?? "")"
        case .assessmentRunInProgressException(let message):
            return "AssessmentRunInProgressException: \(message ?? "")"
        case .internalException(let message):
            return "InternalException: \(message ?? "")"
        case .invalidCrossAccountRoleException(let message):
            return "InvalidCrossAccountRoleException: \(message ?? "")"
        case .invalidInputException(let message):
            return "InvalidInputException: \(message ?? "")"
        case .limitExceededException(let message):
            return "LimitExceededException: \(message ?? "")"
        case .noSuchEntityException(let message):
            return "NoSuchEntityException: \(message ?? "")"
        case .previewGenerationInProgressException(let message):
            return "PreviewGenerationInProgressException: \(message ?? "")"
        case .serviceTemporarilyUnavailableException(let message):
            return "ServiceTemporarilyUnavailableException: \(message ?? "")"
        case .unsupportedFeatureException(let message):
            return "UnsupportedFeatureException: \(message ?? "")"
        }
    }
}
