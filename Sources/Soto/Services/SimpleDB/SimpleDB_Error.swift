//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for SimpleDB
public enum SimpleDBErrorType: AWSErrorType {
    case attributeDoesNotExist(message: String?)
    case duplicateItemName(message: String?)
    case invalidNextToken(message: String?)
    case invalidNumberPredicates(message: String?)
    case invalidNumberValueTests(message: String?)
    case invalidParameterValue(message: String?)
    case invalidQueryExpression(message: String?)
    case missingParameter(message: String?)
    case noSuchDomain(message: String?)
    case numberDomainAttributesExceeded(message: String?)
    case numberDomainBytesExceeded(message: String?)
    case numberDomainsExceeded(message: String?)
    case numberItemAttributesExceeded(message: String?)
    case numberSubmittedAttributesExceeded(message: String?)
    case numberSubmittedItemsExceeded(message: String?)
    case requestTimeout(message: String?)
    case tooManyRequestedAttributes(message: String?)
}

extension SimpleDBErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "AttributeDoesNotExist":
            self = .attributeDoesNotExist(message: message)
        case "DuplicateItemName":
            self = .duplicateItemName(message: message)
        case "InvalidNextToken":
            self = .invalidNextToken(message: message)
        case "InvalidNumberPredicates":
            self = .invalidNumberPredicates(message: message)
        case "InvalidNumberValueTests":
            self = .invalidNumberValueTests(message: message)
        case "InvalidParameterValue":
            self = .invalidParameterValue(message: message)
        case "InvalidQueryExpression":
            self = .invalidQueryExpression(message: message)
        case "MissingParameter":
            self = .missingParameter(message: message)
        case "NoSuchDomain":
            self = .noSuchDomain(message: message)
        case "NumberDomainAttributesExceeded":
            self = .numberDomainAttributesExceeded(message: message)
        case "NumberDomainBytesExceeded":
            self = .numberDomainBytesExceeded(message: message)
        case "NumberDomainsExceeded":
            self = .numberDomainsExceeded(message: message)
        case "NumberItemAttributesExceeded":
            self = .numberItemAttributesExceeded(message: message)
        case "NumberSubmittedAttributesExceeded":
            self = .numberSubmittedAttributesExceeded(message: message)
        case "NumberSubmittedItemsExceeded":
            self = .numberSubmittedItemsExceeded(message: message)
        case "RequestTimeout":
            self = .requestTimeout(message: message)
        case "TooManyRequestedAttributes":
            self = .tooManyRequestedAttributes(message: message)
        default:
            return nil
        }
    }
}

extension SimpleDBErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .attributeDoesNotExist(let message):
            return "AttributeDoesNotExist: \(message ?? "")"
        case .duplicateItemName(let message):
            return "DuplicateItemName: \(message ?? "")"
        case .invalidNextToken(let message):
            return "InvalidNextToken: \(message ?? "")"
        case .invalidNumberPredicates(let message):
            return "InvalidNumberPredicates: \(message ?? "")"
        case .invalidNumberValueTests(let message):
            return "InvalidNumberValueTests: \(message ?? "")"
        case .invalidParameterValue(let message):
            return "InvalidParameterValue: \(message ?? "")"
        case .invalidQueryExpression(let message):
            return "InvalidQueryExpression: \(message ?? "")"
        case .missingParameter(let message):
            return "MissingParameter: \(message ?? "")"
        case .noSuchDomain(let message):
            return "NoSuchDomain: \(message ?? "")"
        case .numberDomainAttributesExceeded(let message):
            return "NumberDomainAttributesExceeded: \(message ?? "")"
        case .numberDomainBytesExceeded(let message):
            return "NumberDomainBytesExceeded: \(message ?? "")"
        case .numberDomainsExceeded(let message):
            return "NumberDomainsExceeded: \(message ?? "")"
        case .numberItemAttributesExceeded(let message):
            return "NumberItemAttributesExceeded: \(message ?? "")"
        case .numberSubmittedAttributesExceeded(let message):
            return "NumberSubmittedAttributesExceeded: \(message ?? "")"
        case .numberSubmittedItemsExceeded(let message):
            return "NumberSubmittedItemsExceeded: \(message ?? "")"
        case .requestTimeout(let message):
            return "RequestTimeout: \(message ?? "")"
        case .tooManyRequestedAttributes(let message):
            return "TooManyRequestedAttributes: \(message ?? "")"
        }
    }
}
