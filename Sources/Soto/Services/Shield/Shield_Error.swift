//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Shield
public enum ShieldErrorType: AWSErrorType {
    case accessDeniedException(message: String?)
    case accessDeniedForDependencyException(message: String?)
    case internalErrorException(message: String?)
    case invalidOperationException(message: String?)
    case invalidPaginationTokenException(message: String?)
    case invalidParameterException(message: String?)
    case invalidResourceException(message: String?)
    case limitsExceededException(message: String?)
    case lockedSubscriptionException(message: String?)
    case noAssociatedRoleException(message: String?)
    case optimisticLockException(message: String?)
    case resourceAlreadyExistsException(message: String?)
    case resourceNotFoundException(message: String?)
}

extension ShieldErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "AccessDeniedException":
            self = .accessDeniedException(message: message)
        case "AccessDeniedForDependencyException":
            self = .accessDeniedForDependencyException(message: message)
        case "InternalErrorException":
            self = .internalErrorException(message: message)
        case "InvalidOperationException":
            self = .invalidOperationException(message: message)
        case "InvalidPaginationTokenException":
            self = .invalidPaginationTokenException(message: message)
        case "InvalidParameterException":
            self = .invalidParameterException(message: message)
        case "InvalidResourceException":
            self = .invalidResourceException(message: message)
        case "LimitsExceededException":
            self = .limitsExceededException(message: message)
        case "LockedSubscriptionException":
            self = .lockedSubscriptionException(message: message)
        case "NoAssociatedRoleException":
            self = .noAssociatedRoleException(message: message)
        case "OptimisticLockException":
            self = .optimisticLockException(message: message)
        case "ResourceAlreadyExistsException":
            self = .resourceAlreadyExistsException(message: message)
        case "ResourceNotFoundException":
            self = .resourceNotFoundException(message: message)
        default:
            return nil
        }
    }
}

extension ShieldErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .accessDeniedException(let message):
            return "AccessDeniedException: \(message ?? "")"
        case .accessDeniedForDependencyException(let message):
            return "AccessDeniedForDependencyException: \(message ?? "")"
        case .internalErrorException(let message):
            return "InternalErrorException: \(message ?? "")"
        case .invalidOperationException(let message):
            return "InvalidOperationException: \(message ?? "")"
        case .invalidPaginationTokenException(let message):
            return "InvalidPaginationTokenException: \(message ?? "")"
        case .invalidParameterException(let message):
            return "InvalidParameterException: \(message ?? "")"
        case .invalidResourceException(let message):
            return "InvalidResourceException: \(message ?? "")"
        case .limitsExceededException(let message):
            return "LimitsExceededException: \(message ?? "")"
        case .lockedSubscriptionException(let message):
            return "LockedSubscriptionException: \(message ?? "")"
        case .noAssociatedRoleException(let message):
            return "NoAssociatedRoleException: \(message ?? "")"
        case .optimisticLockException(let message):
            return "OptimisticLockException: \(message ?? "")"
        case .resourceAlreadyExistsException(let message):
            return "ResourceAlreadyExistsException: \(message ?? "")"
        case .resourceNotFoundException(let message):
            return "ResourceNotFoundException: \(message ?? "")"
        }
    }
}
