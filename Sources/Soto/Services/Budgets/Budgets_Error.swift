//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Budgets
public struct BudgetsErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case creationLimitExceededException = "CreationLimitExceededException"
        case duplicateRecordException = "DuplicateRecordException"
        case expiredNextTokenException = "ExpiredNextTokenException"
        case internalErrorException = "InternalErrorException"
        case invalidNextTokenException = "InvalidNextTokenException"
        case invalidParameterException = "InvalidParameterException"
        case notFoundException = "NotFoundException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    public static var creationLimitExceededException: Self { .init(.creationLimitExceededException) }
    public static var duplicateRecordException: Self { .init(.duplicateRecordException) }
    public static var expiredNextTokenException: Self { .init(.expiredNextTokenException) }
    public static var internalErrorException: Self { .init(.internalErrorException) }
    public static var invalidNextTokenException: Self { .init(.invalidNextTokenException) }
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    public static var notFoundException: Self { .init(.notFoundException) }
}

extension BudgetsErrorType: Equatable {
    public static func == (lhs: BudgetsErrorType, rhs: BudgetsErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension BudgetsErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
