//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for SES
public enum SESErrorType: AWSErrorType {
    case accountSendingPausedException(message: String?)
    case alreadyExistsException(message: String?)
    case cannotDeleteException(message: String?)
    case configurationSetAlreadyExistsException(message: String?)
    case configurationSetDoesNotExistException(message: String?)
    case configurationSetSendingPausedException(message: String?)
    case customVerificationEmailInvalidContentException(message: String?)
    case customVerificationEmailTemplateAlreadyExistsException(message: String?)
    case customVerificationEmailTemplateDoesNotExistException(message: String?)
    case eventDestinationAlreadyExistsException(message: String?)
    case eventDestinationDoesNotExistException(message: String?)
    case fromEmailAddressNotVerifiedException(message: String?)
    case invalidCloudWatchDestinationException(message: String?)
    case invalidConfigurationSetException(message: String?)
    case invalidDeliveryOptionsException(message: String?)
    case invalidFirehoseDestinationException(message: String?)
    case invalidLambdaFunctionException(message: String?)
    case invalidPolicyException(message: String?)
    case invalidRenderingParameterException(message: String?)
    case invalidS3ConfigurationException(message: String?)
    case invalidSNSDestinationException(message: String?)
    case invalidSnsTopicException(message: String?)
    case invalidTemplateException(message: String?)
    case invalidTrackingOptionsException(message: String?)
    case limitExceededException(message: String?)
    case mailFromDomainNotVerifiedException(message: String?)
    case messageRejected(message: String?)
    case missingRenderingAttributeException(message: String?)
    case productionAccessNotGrantedException(message: String?)
    case ruleDoesNotExistException(message: String?)
    case ruleSetDoesNotExistException(message: String?)
    case templateDoesNotExistException(message: String?)
    case trackingOptionsAlreadyExistsException(message: String?)
    case trackingOptionsDoesNotExistException(message: String?)
}

extension SESErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "AccountSendingPausedException":
            self = .accountSendingPausedException(message: message)
        case "AlreadyExists":
            self = .alreadyExistsException(message: message)
        case "CannotDelete":
            self = .cannotDeleteException(message: message)
        case "ConfigurationSetAlreadyExists":
            self = .configurationSetAlreadyExistsException(message: message)
        case "ConfigurationSetDoesNotExist":
            self = .configurationSetDoesNotExistException(message: message)
        case "ConfigurationSetSendingPausedException":
            self = .configurationSetSendingPausedException(message: message)
        case "CustomVerificationEmailInvalidContent":
            self = .customVerificationEmailInvalidContentException(message: message)
        case "CustomVerificationEmailTemplateAlreadyExists":
            self = .customVerificationEmailTemplateAlreadyExistsException(message: message)
        case "CustomVerificationEmailTemplateDoesNotExist":
            self = .customVerificationEmailTemplateDoesNotExistException(message: message)
        case "EventDestinationAlreadyExists":
            self = .eventDestinationAlreadyExistsException(message: message)
        case "EventDestinationDoesNotExist":
            self = .eventDestinationDoesNotExistException(message: message)
        case "FromEmailAddressNotVerified":
            self = .fromEmailAddressNotVerifiedException(message: message)
        case "InvalidCloudWatchDestination":
            self = .invalidCloudWatchDestinationException(message: message)
        case "InvalidConfigurationSet":
            self = .invalidConfigurationSetException(message: message)
        case "InvalidDeliveryOptions":
            self = .invalidDeliveryOptionsException(message: message)
        case "InvalidFirehoseDestination":
            self = .invalidFirehoseDestinationException(message: message)
        case "InvalidLambdaFunction":
            self = .invalidLambdaFunctionException(message: message)
        case "InvalidPolicy":
            self = .invalidPolicyException(message: message)
        case "InvalidRenderingParameter":
            self = .invalidRenderingParameterException(message: message)
        case "InvalidS3Configuration":
            self = .invalidS3ConfigurationException(message: message)
        case "InvalidSNSDestination":
            self = .invalidSNSDestinationException(message: message)
        case "InvalidSnsTopic":
            self = .invalidSnsTopicException(message: message)
        case "InvalidTemplate":
            self = .invalidTemplateException(message: message)
        case "InvalidTrackingOptions":
            self = .invalidTrackingOptionsException(message: message)
        case "LimitExceeded":
            self = .limitExceededException(message: message)
        case "MailFromDomainNotVerifiedException":
            self = .mailFromDomainNotVerifiedException(message: message)
        case "MessageRejected":
            self = .messageRejected(message: message)
        case "MissingRenderingAttribute":
            self = .missingRenderingAttributeException(message: message)
        case "ProductionAccessNotGranted":
            self = .productionAccessNotGrantedException(message: message)
        case "RuleDoesNotExist":
            self = .ruleDoesNotExistException(message: message)
        case "RuleSetDoesNotExist":
            self = .ruleSetDoesNotExistException(message: message)
        case "TemplateDoesNotExist":
            self = .templateDoesNotExistException(message: message)
        case "TrackingOptionsAlreadyExistsException":
            self = .trackingOptionsAlreadyExistsException(message: message)
        case "TrackingOptionsDoesNotExistException":
            self = .trackingOptionsDoesNotExistException(message: message)
        default:
            return nil
        }
    }
}

extension SESErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .accountSendingPausedException(let message):
            return "AccountSendingPausedException: \(message ?? "")"
        case .alreadyExistsException(let message):
            return "AlreadyExists: \(message ?? "")"
        case .cannotDeleteException(let message):
            return "CannotDelete: \(message ?? "")"
        case .configurationSetAlreadyExistsException(let message):
            return "ConfigurationSetAlreadyExists: \(message ?? "")"
        case .configurationSetDoesNotExistException(let message):
            return "ConfigurationSetDoesNotExist: \(message ?? "")"
        case .configurationSetSendingPausedException(let message):
            return "ConfigurationSetSendingPausedException: \(message ?? "")"
        case .customVerificationEmailInvalidContentException(let message):
            return "CustomVerificationEmailInvalidContent: \(message ?? "")"
        case .customVerificationEmailTemplateAlreadyExistsException(let message):
            return "CustomVerificationEmailTemplateAlreadyExists: \(message ?? "")"
        case .customVerificationEmailTemplateDoesNotExistException(let message):
            return "CustomVerificationEmailTemplateDoesNotExist: \(message ?? "")"
        case .eventDestinationAlreadyExistsException(let message):
            return "EventDestinationAlreadyExists: \(message ?? "")"
        case .eventDestinationDoesNotExistException(let message):
            return "EventDestinationDoesNotExist: \(message ?? "")"
        case .fromEmailAddressNotVerifiedException(let message):
            return "FromEmailAddressNotVerified: \(message ?? "")"
        case .invalidCloudWatchDestinationException(let message):
            return "InvalidCloudWatchDestination: \(message ?? "")"
        case .invalidConfigurationSetException(let message):
            return "InvalidConfigurationSet: \(message ?? "")"
        case .invalidDeliveryOptionsException(let message):
            return "InvalidDeliveryOptions: \(message ?? "")"
        case .invalidFirehoseDestinationException(let message):
            return "InvalidFirehoseDestination: \(message ?? "")"
        case .invalidLambdaFunctionException(let message):
            return "InvalidLambdaFunction: \(message ?? "")"
        case .invalidPolicyException(let message):
            return "InvalidPolicy: \(message ?? "")"
        case .invalidRenderingParameterException(let message):
            return "InvalidRenderingParameter: \(message ?? "")"
        case .invalidS3ConfigurationException(let message):
            return "InvalidS3Configuration: \(message ?? "")"
        case .invalidSNSDestinationException(let message):
            return "InvalidSNSDestination: \(message ?? "")"
        case .invalidSnsTopicException(let message):
            return "InvalidSnsTopic: \(message ?? "")"
        case .invalidTemplateException(let message):
            return "InvalidTemplate: \(message ?? "")"
        case .invalidTrackingOptionsException(let message):
            return "InvalidTrackingOptions: \(message ?? "")"
        case .limitExceededException(let message):
            return "LimitExceeded: \(message ?? "")"
        case .mailFromDomainNotVerifiedException(let message):
            return "MailFromDomainNotVerifiedException: \(message ?? "")"
        case .messageRejected(let message):
            return "MessageRejected: \(message ?? "")"
        case .missingRenderingAttributeException(let message):
            return "MissingRenderingAttribute: \(message ?? "")"
        case .productionAccessNotGrantedException(let message):
            return "ProductionAccessNotGranted: \(message ?? "")"
        case .ruleDoesNotExistException(let message):
            return "RuleDoesNotExist: \(message ?? "")"
        case .ruleSetDoesNotExistException(let message):
            return "RuleSetDoesNotExist: \(message ?? "")"
        case .templateDoesNotExistException(let message):
            return "TemplateDoesNotExist: \(message ?? "")"
        case .trackingOptionsAlreadyExistsException(let message):
            return "TrackingOptionsAlreadyExistsException: \(message ?? "")"
        case .trackingOptionsDoesNotExistException(let message):
            return "TrackingOptionsDoesNotExistException: \(message ?? "")"
        }
    }
}
