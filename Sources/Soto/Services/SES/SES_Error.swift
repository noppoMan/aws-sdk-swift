//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for SES
public struct SESErrorType: AWSErrorType {
    enum Code: String {
        case accountSendingPausedException = "AccountSendingPausedException"
        case alreadyExistsException = "AlreadyExists"
        case cannotDeleteException = "CannotDelete"
        case configurationSetAlreadyExistsException = "ConfigurationSetAlreadyExists"
        case configurationSetDoesNotExistException = "ConfigurationSetDoesNotExist"
        case configurationSetSendingPausedException = "ConfigurationSetSendingPausedException"
        case customVerificationEmailInvalidContentException = "CustomVerificationEmailInvalidContent"
        case customVerificationEmailTemplateAlreadyExistsException = "CustomVerificationEmailTemplateAlreadyExists"
        case customVerificationEmailTemplateDoesNotExistException = "CustomVerificationEmailTemplateDoesNotExist"
        case eventDestinationAlreadyExistsException = "EventDestinationAlreadyExists"
        case eventDestinationDoesNotExistException = "EventDestinationDoesNotExist"
        case fromEmailAddressNotVerifiedException = "FromEmailAddressNotVerified"
        case invalidCloudWatchDestinationException = "InvalidCloudWatchDestination"
        case invalidConfigurationSetException = "InvalidConfigurationSet"
        case invalidDeliveryOptionsException = "InvalidDeliveryOptions"
        case invalidFirehoseDestinationException = "InvalidFirehoseDestination"
        case invalidLambdaFunctionException = "InvalidLambdaFunction"
        case invalidPolicyException = "InvalidPolicy"
        case invalidRenderingParameterException = "InvalidRenderingParameter"
        case invalidS3ConfigurationException = "InvalidS3Configuration"
        case invalidSNSDestinationException = "InvalidSNSDestination"
        case invalidSnsTopicException = "InvalidSnsTopic"
        case invalidTemplateException = "InvalidTemplate"
        case invalidTrackingOptionsException = "InvalidTrackingOptions"
        case limitExceededException = "LimitExceeded"
        case mailFromDomainNotVerifiedException = "MailFromDomainNotVerifiedException"
        case messageRejected = "MessageRejected"
        case missingRenderingAttributeException = "MissingRenderingAttribute"
        case productionAccessNotGrantedException = "ProductionAccessNotGranted"
        case ruleDoesNotExistException = "RuleDoesNotExist"
        case ruleSetDoesNotExistException = "RuleSetDoesNotExist"
        case templateDoesNotExistException = "TemplateDoesNotExist"
        case trackingOptionsAlreadyExistsException = "TrackingOptionsAlreadyExistsException"
        case trackingOptionsDoesNotExistException = "TrackingOptionsDoesNotExistException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var accountSendingPausedException: Self { .init(.accountSendingPausedException) }
    public static var alreadyExistsException: Self { .init(.alreadyExistsException) }
    public static var cannotDeleteException: Self { .init(.cannotDeleteException) }
    public static var configurationSetAlreadyExistsException: Self { .init(.configurationSetAlreadyExistsException) }
    public static var configurationSetDoesNotExistException: Self { .init(.configurationSetDoesNotExistException) }
    public static var configurationSetSendingPausedException: Self { .init(.configurationSetSendingPausedException) }
    public static var customVerificationEmailInvalidContentException: Self { .init(.customVerificationEmailInvalidContentException) }
    public static var customVerificationEmailTemplateAlreadyExistsException: Self { .init(.customVerificationEmailTemplateAlreadyExistsException) }
    public static var customVerificationEmailTemplateDoesNotExistException: Self { .init(.customVerificationEmailTemplateDoesNotExistException) }
    public static var eventDestinationAlreadyExistsException: Self { .init(.eventDestinationAlreadyExistsException) }
    public static var eventDestinationDoesNotExistException: Self { .init(.eventDestinationDoesNotExistException) }
    public static var fromEmailAddressNotVerifiedException: Self { .init(.fromEmailAddressNotVerifiedException) }
    public static var invalidCloudWatchDestinationException: Self { .init(.invalidCloudWatchDestinationException) }
    public static var invalidConfigurationSetException: Self { .init(.invalidConfigurationSetException) }
    public static var invalidDeliveryOptionsException: Self { .init(.invalidDeliveryOptionsException) }
    public static var invalidFirehoseDestinationException: Self { .init(.invalidFirehoseDestinationException) }
    public static var invalidLambdaFunctionException: Self { .init(.invalidLambdaFunctionException) }
    public static var invalidPolicyException: Self { .init(.invalidPolicyException) }
    public static var invalidRenderingParameterException: Self { .init(.invalidRenderingParameterException) }
    public static var invalidS3ConfigurationException: Self { .init(.invalidS3ConfigurationException) }
    public static var invalidSNSDestinationException: Self { .init(.invalidSNSDestinationException) }
    public static var invalidSnsTopicException: Self { .init(.invalidSnsTopicException) }
    public static var invalidTemplateException: Self { .init(.invalidTemplateException) }
    public static var invalidTrackingOptionsException: Self { .init(.invalidTrackingOptionsException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var mailFromDomainNotVerifiedException: Self { .init(.mailFromDomainNotVerifiedException) }
    public static var messageRejected: Self { .init(.messageRejected) }
    public static var missingRenderingAttributeException: Self { .init(.missingRenderingAttributeException) }
    public static var productionAccessNotGrantedException: Self { .init(.productionAccessNotGrantedException) }
    public static var ruleDoesNotExistException: Self { .init(.ruleDoesNotExistException) }
    public static var ruleSetDoesNotExistException: Self { .init(.ruleSetDoesNotExistException) }
    public static var templateDoesNotExistException: Self { .init(.templateDoesNotExistException) }
    public static var trackingOptionsAlreadyExistsException: Self { .init(.trackingOptionsAlreadyExistsException) }
    public static var trackingOptionsDoesNotExistException: Self { .init(.trackingOptionsDoesNotExistException) }
}

extension SESErrorType: Equatable {
    public static func == (lhs: SESErrorType, rhs: SESErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension SESErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
