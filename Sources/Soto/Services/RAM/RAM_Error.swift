//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for RAM
public struct RAMErrorType: AWSErrorType {
    enum Code: String {
        case idempotentParameterMismatchException = "IdempotentParameterMismatchException"
        case invalidClientTokenException = "InvalidClientTokenException"
        case invalidMaxResultsException = "InvalidMaxResultsException"
        case invalidNextTokenException = "InvalidNextTokenException"
        case invalidParameterException = "InvalidParameterException"
        case invalidResourceTypeException = "InvalidResourceTypeException"
        case invalidStateTransitionException = "InvalidStateTransitionException"
        case malformedArnException = "MalformedArnException"
        case missingRequiredParameterException = "MissingRequiredParameterException"
        case operationNotPermittedException = "OperationNotPermittedException"
        case resourceArnNotFoundException = "ResourceArnNotFoundException"
        case resourceShareInvitationAlreadyAcceptedException = "ResourceShareInvitationAlreadyAcceptedException"
        case resourceShareInvitationAlreadyRejectedException = "ResourceShareInvitationAlreadyRejectedException"
        case resourceShareInvitationArnNotFoundException = "ResourceShareInvitationArnNotFoundException"
        case resourceShareInvitationExpiredException = "ResourceShareInvitationExpiredException"
        case resourceShareLimitExceededException = "ResourceShareLimitExceededException"
        case serverInternalException = "ServerInternalException"
        case serviceUnavailableException = "ServiceUnavailableException"
        case tagLimitExceededException = "TagLimitExceededException"
        case tagPolicyViolationException = "TagPolicyViolationException"
        case unknownResourceException = "UnknownResourceException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var idempotentParameterMismatchException: Self { .init(.idempotentParameterMismatchException) }
    public static var invalidClientTokenException: Self { .init(.invalidClientTokenException) }
    public static var invalidMaxResultsException: Self { .init(.invalidMaxResultsException) }
    public static var invalidNextTokenException: Self { .init(.invalidNextTokenException) }
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    public static var invalidResourceTypeException: Self { .init(.invalidResourceTypeException) }
    public static var invalidStateTransitionException: Self { .init(.invalidStateTransitionException) }
    public static var malformedArnException: Self { .init(.malformedArnException) }
    public static var missingRequiredParameterException: Self { .init(.missingRequiredParameterException) }
    public static var operationNotPermittedException: Self { .init(.operationNotPermittedException) }
    public static var resourceArnNotFoundException: Self { .init(.resourceArnNotFoundException) }
    public static var resourceShareInvitationAlreadyAcceptedException: Self { .init(.resourceShareInvitationAlreadyAcceptedException) }
    public static var resourceShareInvitationAlreadyRejectedException: Self { .init(.resourceShareInvitationAlreadyRejectedException) }
    public static var resourceShareInvitationArnNotFoundException: Self { .init(.resourceShareInvitationArnNotFoundException) }
    public static var resourceShareInvitationExpiredException: Self { .init(.resourceShareInvitationExpiredException) }
    public static var resourceShareLimitExceededException: Self { .init(.resourceShareLimitExceededException) }
    public static var serverInternalException: Self { .init(.serverInternalException) }
    public static var serviceUnavailableException: Self { .init(.serviceUnavailableException) }
    public static var tagLimitExceededException: Self { .init(.tagLimitExceededException) }
    public static var tagPolicyViolationException: Self { .init(.tagPolicyViolationException) }
    public static var unknownResourceException: Self { .init(.unknownResourceException) }
}

extension RAMErrorType: Equatable {
    public static func == (lhs: RAMErrorType, rhs: RAMErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension RAMErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
