//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for DirectoryService
public enum DirectoryServiceErrorType: AWSErrorType {
    case accessDeniedException(message: String?)
    case authenticationFailedException(message: String?)
    case certificateAlreadyExistsException(message: String?)
    case certificateDoesNotExistException(message: String?)
    case certificateInUseException(message: String?)
    case certificateLimitExceededException(message: String?)
    case clientException(message: String?)
    case directoryAlreadySharedException(message: String?)
    case directoryDoesNotExistException(message: String?)
    case directoryLimitExceededException(message: String?)
    case directoryNotSharedException(message: String?)
    case directoryUnavailableException(message: String?)
    case domainControllerLimitExceededException(message: String?)
    case entityAlreadyExistsException(message: String?)
    case entityDoesNotExistException(message: String?)
    case insufficientPermissionsException(message: String?)
    case invalidCertificateException(message: String?)
    case invalidLDAPSStatusException(message: String?)
    case invalidNextTokenException(message: String?)
    case invalidParameterException(message: String?)
    case invalidPasswordException(message: String?)
    case invalidTargetException(message: String?)
    case ipRouteLimitExceededException(message: String?)
    case noAvailableCertificateException(message: String?)
    case organizationsException(message: String?)
    case serviceException(message: String?)
    case shareLimitExceededException(message: String?)
    case snapshotLimitExceededException(message: String?)
    case tagLimitExceededException(message: String?)
    case unsupportedOperationException(message: String?)
    case userDoesNotExistException(message: String?)
}

extension DirectoryServiceErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "AccessDeniedException":
            self = .accessDeniedException(message: message)
        case "AuthenticationFailedException":
            self = .authenticationFailedException(message: message)
        case "CertificateAlreadyExistsException":
            self = .certificateAlreadyExistsException(message: message)
        case "CertificateDoesNotExistException":
            self = .certificateDoesNotExistException(message: message)
        case "CertificateInUseException":
            self = .certificateInUseException(message: message)
        case "CertificateLimitExceededException":
            self = .certificateLimitExceededException(message: message)
        case "ClientException":
            self = .clientException(message: message)
        case "DirectoryAlreadySharedException":
            self = .directoryAlreadySharedException(message: message)
        case "DirectoryDoesNotExistException":
            self = .directoryDoesNotExistException(message: message)
        case "DirectoryLimitExceededException":
            self = .directoryLimitExceededException(message: message)
        case "DirectoryNotSharedException":
            self = .directoryNotSharedException(message: message)
        case "DirectoryUnavailableException":
            self = .directoryUnavailableException(message: message)
        case "DomainControllerLimitExceededException":
            self = .domainControllerLimitExceededException(message: message)
        case "EntityAlreadyExistsException":
            self = .entityAlreadyExistsException(message: message)
        case "EntityDoesNotExistException":
            self = .entityDoesNotExistException(message: message)
        case "InsufficientPermissionsException":
            self = .insufficientPermissionsException(message: message)
        case "InvalidCertificateException":
            self = .invalidCertificateException(message: message)
        case "InvalidLDAPSStatusException":
            self = .invalidLDAPSStatusException(message: message)
        case "InvalidNextTokenException":
            self = .invalidNextTokenException(message: message)
        case "InvalidParameterException":
            self = .invalidParameterException(message: message)
        case "InvalidPasswordException":
            self = .invalidPasswordException(message: message)
        case "InvalidTargetException":
            self = .invalidTargetException(message: message)
        case "IpRouteLimitExceededException":
            self = .ipRouteLimitExceededException(message: message)
        case "NoAvailableCertificateException":
            self = .noAvailableCertificateException(message: message)
        case "OrganizationsException":
            self = .organizationsException(message: message)
        case "ServiceException":
            self = .serviceException(message: message)
        case "ShareLimitExceededException":
            self = .shareLimitExceededException(message: message)
        case "SnapshotLimitExceededException":
            self = .snapshotLimitExceededException(message: message)
        case "TagLimitExceededException":
            self = .tagLimitExceededException(message: message)
        case "UnsupportedOperationException":
            self = .unsupportedOperationException(message: message)
        case "UserDoesNotExistException":
            self = .userDoesNotExistException(message: message)
        default:
            return nil
        }
    }
}

extension DirectoryServiceErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .accessDeniedException(let message):
            return "AccessDeniedException: \(message ?? "")"
        case .authenticationFailedException(let message):
            return "AuthenticationFailedException: \(message ?? "")"
        case .certificateAlreadyExistsException(let message):
            return "CertificateAlreadyExistsException: \(message ?? "")"
        case .certificateDoesNotExistException(let message):
            return "CertificateDoesNotExistException: \(message ?? "")"
        case .certificateInUseException(let message):
            return "CertificateInUseException: \(message ?? "")"
        case .certificateLimitExceededException(let message):
            return "CertificateLimitExceededException: \(message ?? "")"
        case .clientException(let message):
            return "ClientException: \(message ?? "")"
        case .directoryAlreadySharedException(let message):
            return "DirectoryAlreadySharedException: \(message ?? "")"
        case .directoryDoesNotExistException(let message):
            return "DirectoryDoesNotExistException: \(message ?? "")"
        case .directoryLimitExceededException(let message):
            return "DirectoryLimitExceededException: \(message ?? "")"
        case .directoryNotSharedException(let message):
            return "DirectoryNotSharedException: \(message ?? "")"
        case .directoryUnavailableException(let message):
            return "DirectoryUnavailableException: \(message ?? "")"
        case .domainControllerLimitExceededException(let message):
            return "DomainControllerLimitExceededException: \(message ?? "")"
        case .entityAlreadyExistsException(let message):
            return "EntityAlreadyExistsException: \(message ?? "")"
        case .entityDoesNotExistException(let message):
            return "EntityDoesNotExistException: \(message ?? "")"
        case .insufficientPermissionsException(let message):
            return "InsufficientPermissionsException: \(message ?? "")"
        case .invalidCertificateException(let message):
            return "InvalidCertificateException: \(message ?? "")"
        case .invalidLDAPSStatusException(let message):
            return "InvalidLDAPSStatusException: \(message ?? "")"
        case .invalidNextTokenException(let message):
            return "InvalidNextTokenException: \(message ?? "")"
        case .invalidParameterException(let message):
            return "InvalidParameterException: \(message ?? "")"
        case .invalidPasswordException(let message):
            return "InvalidPasswordException: \(message ?? "")"
        case .invalidTargetException(let message):
            return "InvalidTargetException: \(message ?? "")"
        case .ipRouteLimitExceededException(let message):
            return "IpRouteLimitExceededException: \(message ?? "")"
        case .noAvailableCertificateException(let message):
            return "NoAvailableCertificateException: \(message ?? "")"
        case .organizationsException(let message):
            return "OrganizationsException: \(message ?? "")"
        case .serviceException(let message):
            return "ServiceException: \(message ?? "")"
        case .shareLimitExceededException(let message):
            return "ShareLimitExceededException: \(message ?? "")"
        case .snapshotLimitExceededException(let message):
            return "SnapshotLimitExceededException: \(message ?? "")"
        case .tagLimitExceededException(let message):
            return "TagLimitExceededException: \(message ?? "")"
        case .unsupportedOperationException(let message):
            return "UnsupportedOperationException: \(message ?? "")"
        case .userDoesNotExistException(let message):
            return "UserDoesNotExistException: \(message ?? "")"
        }
    }
}
