//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for DirectoryService
public struct DirectoryServiceErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case authenticationFailedException = "AuthenticationFailedException"
        case certificateAlreadyExistsException = "CertificateAlreadyExistsException"
        case certificateDoesNotExistException = "CertificateDoesNotExistException"
        case certificateInUseException = "CertificateInUseException"
        case certificateLimitExceededException = "CertificateLimitExceededException"
        case clientException = "ClientException"
        case directoryAlreadySharedException = "DirectoryAlreadySharedException"
        case directoryDoesNotExistException = "DirectoryDoesNotExistException"
        case directoryLimitExceededException = "DirectoryLimitExceededException"
        case directoryNotSharedException = "DirectoryNotSharedException"
        case directoryUnavailableException = "DirectoryUnavailableException"
        case domainControllerLimitExceededException = "DomainControllerLimitExceededException"
        case entityAlreadyExistsException = "EntityAlreadyExistsException"
        case entityDoesNotExistException = "EntityDoesNotExistException"
        case insufficientPermissionsException = "InsufficientPermissionsException"
        case invalidCertificateException = "InvalidCertificateException"
        case invalidLDAPSStatusException = "InvalidLDAPSStatusException"
        case invalidNextTokenException = "InvalidNextTokenException"
        case invalidParameterException = "InvalidParameterException"
        case invalidPasswordException = "InvalidPasswordException"
        case invalidTargetException = "InvalidTargetException"
        case ipRouteLimitExceededException = "IpRouteLimitExceededException"
        case noAvailableCertificateException = "NoAvailableCertificateException"
        case organizationsException = "OrganizationsException"
        case serviceException = "ServiceException"
        case shareLimitExceededException = "ShareLimitExceededException"
        case snapshotLimitExceededException = "SnapshotLimitExceededException"
        case tagLimitExceededException = "TagLimitExceededException"
        case unsupportedOperationException = "UnsupportedOperationException"
        case userDoesNotExistException = "UserDoesNotExistException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize DirectoryService
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    public static var authenticationFailedException: Self { .init(.authenticationFailedException) }
    public static var certificateAlreadyExistsException: Self { .init(.certificateAlreadyExistsException) }
    public static var certificateDoesNotExistException: Self { .init(.certificateDoesNotExistException) }
    public static var certificateInUseException: Self { .init(.certificateInUseException) }
    public static var certificateLimitExceededException: Self { .init(.certificateLimitExceededException) }
    public static var clientException: Self { .init(.clientException) }
    public static var directoryAlreadySharedException: Self { .init(.directoryAlreadySharedException) }
    public static var directoryDoesNotExistException: Self { .init(.directoryDoesNotExistException) }
    public static var directoryLimitExceededException: Self { .init(.directoryLimitExceededException) }
    public static var directoryNotSharedException: Self { .init(.directoryNotSharedException) }
    public static var directoryUnavailableException: Self { .init(.directoryUnavailableException) }
    public static var domainControllerLimitExceededException: Self { .init(.domainControllerLimitExceededException) }
    public static var entityAlreadyExistsException: Self { .init(.entityAlreadyExistsException) }
    public static var entityDoesNotExistException: Self { .init(.entityDoesNotExistException) }
    public static var insufficientPermissionsException: Self { .init(.insufficientPermissionsException) }
    public static var invalidCertificateException: Self { .init(.invalidCertificateException) }
    public static var invalidLDAPSStatusException: Self { .init(.invalidLDAPSStatusException) }
    public static var invalidNextTokenException: Self { .init(.invalidNextTokenException) }
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    public static var invalidPasswordException: Self { .init(.invalidPasswordException) }
    public static var invalidTargetException: Self { .init(.invalidTargetException) }
    public static var ipRouteLimitExceededException: Self { .init(.ipRouteLimitExceededException) }
    public static var noAvailableCertificateException: Self { .init(.noAvailableCertificateException) }
    public static var organizationsException: Self { .init(.organizationsException) }
    public static var serviceException: Self { .init(.serviceException) }
    public static var shareLimitExceededException: Self { .init(.shareLimitExceededException) }
    public static var snapshotLimitExceededException: Self { .init(.snapshotLimitExceededException) }
    public static var tagLimitExceededException: Self { .init(.tagLimitExceededException) }
    public static var unsupportedOperationException: Self { .init(.unsupportedOperationException) }
    public static var userDoesNotExistException: Self { .init(.userDoesNotExistException) }
}

extension DirectoryServiceErrorType: Equatable {
    public static func == (lhs: DirectoryServiceErrorType, rhs: DirectoryServiceErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension DirectoryServiceErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
