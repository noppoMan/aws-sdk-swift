//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Connect
public enum ConnectErrorType: AWSErrorType {
    case contactFlowNotPublishedException(message: String?)
    case contactNotFoundException(message: String?)
    case destinationNotAllowedException(message: String?)
    case duplicateResourceException(message: String?)
    case internalServiceException(message: String?)
    case invalidContactFlowException(message: String?)
    case invalidParameterException(message: String?)
    case invalidRequestException(message: String?)
    case limitExceededException(message: String?)
    case outboundContactNotPermittedException(message: String?)
    case resourceNotFoundException(message: String?)
    case throttlingException(message: String?)
    case userNotFoundException(message: String?)
}

extension ConnectErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "ContactFlowNotPublishedException":
            self = .contactFlowNotPublishedException(message: message)
        case "ContactNotFoundException":
            self = .contactNotFoundException(message: message)
        case "DestinationNotAllowedException":
            self = .destinationNotAllowedException(message: message)
        case "DuplicateResourceException":
            self = .duplicateResourceException(message: message)
        case "InternalServiceException":
            self = .internalServiceException(message: message)
        case "InvalidContactFlowException":
            self = .invalidContactFlowException(message: message)
        case "InvalidParameterException":
            self = .invalidParameterException(message: message)
        case "InvalidRequestException":
            self = .invalidRequestException(message: message)
        case "LimitExceededException":
            self = .limitExceededException(message: message)
        case "OutboundContactNotPermittedException":
            self = .outboundContactNotPermittedException(message: message)
        case "ResourceNotFoundException":
            self = .resourceNotFoundException(message: message)
        case "ThrottlingException":
            self = .throttlingException(message: message)
        case "UserNotFoundException":
            self = .userNotFoundException(message: message)
        default:
            return nil
        }
    }
}

extension ConnectErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .contactFlowNotPublishedException(let message):
            return "ContactFlowNotPublishedException: \(message ?? "")"
        case .contactNotFoundException(let message):
            return "ContactNotFoundException: \(message ?? "")"
        case .destinationNotAllowedException(let message):
            return "DestinationNotAllowedException: \(message ?? "")"
        case .duplicateResourceException(let message):
            return "DuplicateResourceException: \(message ?? "")"
        case .internalServiceException(let message):
            return "InternalServiceException: \(message ?? "")"
        case .invalidContactFlowException(let message):
            return "InvalidContactFlowException: \(message ?? "")"
        case .invalidParameterException(let message):
            return "InvalidParameterException: \(message ?? "")"
        case .invalidRequestException(let message):
            return "InvalidRequestException: \(message ?? "")"
        case .limitExceededException(let message):
            return "LimitExceededException: \(message ?? "")"
        case .outboundContactNotPermittedException(let message):
            return "OutboundContactNotPermittedException: \(message ?? "")"
        case .resourceNotFoundException(let message):
            return "ResourceNotFoundException: \(message ?? "")"
        case .throttlingException(let message):
            return "ThrottlingException: \(message ?? "")"
        case .userNotFoundException(let message):
            return "UserNotFoundException: \(message ?? "")"
        }
    }
}
