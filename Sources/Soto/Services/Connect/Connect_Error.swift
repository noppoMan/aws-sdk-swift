//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Connect
public struct ConnectErrorType: AWSErrorType {
    enum Code: String {
        case contactFlowNotPublishedException = "ContactFlowNotPublishedException"
        case contactNotFoundException = "ContactNotFoundException"
        case destinationNotAllowedException = "DestinationNotAllowedException"
        case duplicateResourceException = "DuplicateResourceException"
        case internalServiceException = "InternalServiceException"
        case invalidContactFlowException = "InvalidContactFlowException"
        case invalidParameterException = "InvalidParameterException"
        case invalidRequestException = "InvalidRequestException"
        case limitExceededException = "LimitExceededException"
        case outboundContactNotPermittedException = "OutboundContactNotPermittedException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case throttlingException = "ThrottlingException"
        case userNotFoundException = "UserNotFoundException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var contactFlowNotPublishedException: Self { .init(.contactFlowNotPublishedException) }
    public static var contactNotFoundException: Self { .init(.contactNotFoundException) }
    public static var destinationNotAllowedException: Self { .init(.destinationNotAllowedException) }
    public static var duplicateResourceException: Self { .init(.duplicateResourceException) }
    public static var internalServiceException: Self { .init(.internalServiceException) }
    public static var invalidContactFlowException: Self { .init(.invalidContactFlowException) }
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    public static var invalidRequestException: Self { .init(.invalidRequestException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var outboundContactNotPermittedException: Self { .init(.outboundContactNotPermittedException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var throttlingException: Self { .init(.throttlingException) }
    public static var userNotFoundException: Self { .init(.userNotFoundException) }
}

extension ConnectErrorType: Equatable {
    public static func == (lhs: ConnectErrorType, rhs: ConnectErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension ConnectErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
