//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Textract
public struct TextractErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case badDocumentException = "BadDocumentException"
        case documentTooLargeException = "DocumentTooLargeException"
        case humanLoopQuotaExceededException = "HumanLoopQuotaExceededException"
        case idempotentParameterMismatchException = "IdempotentParameterMismatchException"
        case internalServerError = "InternalServerError"
        case invalidJobIdException = "InvalidJobIdException"
        case invalidParameterException = "InvalidParameterException"
        case invalidS3ObjectException = "InvalidS3ObjectException"
        case limitExceededException = "LimitExceededException"
        case provisionedThroughputExceededException = "ProvisionedThroughputExceededException"
        case throttlingException = "ThrottlingException"
        case unsupportedDocumentException = "UnsupportedDocumentException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize Textract
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    public static var badDocumentException: Self { .init(.badDocumentException) }
    public static var documentTooLargeException: Self { .init(.documentTooLargeException) }
    public static var humanLoopQuotaExceededException: Self { .init(.humanLoopQuotaExceededException) }
    public static var idempotentParameterMismatchException: Self { .init(.idempotentParameterMismatchException) }
    public static var internalServerError: Self { .init(.internalServerError) }
    public static var invalidJobIdException: Self { .init(.invalidJobIdException) }
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    public static var invalidS3ObjectException: Self { .init(.invalidS3ObjectException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var provisionedThroughputExceededException: Self { .init(.provisionedThroughputExceededException) }
    public static var throttlingException: Self { .init(.throttlingException) }
    public static var unsupportedDocumentException: Self { .init(.unsupportedDocumentException) }
}

extension TextractErrorType: Equatable {
    public static func == (lhs: TextractErrorType, rhs: TextractErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension TextractErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
