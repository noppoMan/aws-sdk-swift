//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for ServiceQuotas
public struct ServiceQuotasErrorType: AWSErrorType {
    enum Code: String {
        case aWSServiceAccessNotEnabledException = "AWSServiceAccessNotEnabledException"
        case accessDeniedException = "AccessDeniedException"
        case dependencyAccessDeniedException = "DependencyAccessDeniedException"
        case illegalArgumentException = "IllegalArgumentException"
        case invalidPaginationTokenException = "InvalidPaginationTokenException"
        case invalidResourceStateException = "InvalidResourceStateException"
        case noAvailableOrganizationException = "NoAvailableOrganizationException"
        case noSuchResourceException = "NoSuchResourceException"
        case organizationNotInAllFeaturesModeException = "OrganizationNotInAllFeaturesModeException"
        case quotaExceededException = "QuotaExceededException"
        case resourceAlreadyExistsException = "ResourceAlreadyExistsException"
        case serviceException = "ServiceException"
        case serviceQuotaTemplateNotInUseException = "ServiceQuotaTemplateNotInUseException"
        case templatesNotAvailableInRegionException = "TemplatesNotAvailableInRegionException"
        case tooManyRequestsException = "TooManyRequestsException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var aWSServiceAccessNotEnabledException: Self { .init(.aWSServiceAccessNotEnabledException) }
    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    public static var dependencyAccessDeniedException: Self { .init(.dependencyAccessDeniedException) }
    public static var illegalArgumentException: Self { .init(.illegalArgumentException) }
    public static var invalidPaginationTokenException: Self { .init(.invalidPaginationTokenException) }
    public static var invalidResourceStateException: Self { .init(.invalidResourceStateException) }
    public static var noAvailableOrganizationException: Self { .init(.noAvailableOrganizationException) }
    public static var noSuchResourceException: Self { .init(.noSuchResourceException) }
    public static var organizationNotInAllFeaturesModeException: Self { .init(.organizationNotInAllFeaturesModeException) }
    public static var quotaExceededException: Self { .init(.quotaExceededException) }
    public static var resourceAlreadyExistsException: Self { .init(.resourceAlreadyExistsException) }
    public static var serviceException: Self { .init(.serviceException) }
    public static var serviceQuotaTemplateNotInUseException: Self { .init(.serviceQuotaTemplateNotInUseException) }
    public static var templatesNotAvailableInRegionException: Self { .init(.templatesNotAvailableInRegionException) }
    public static var tooManyRequestsException: Self { .init(.tooManyRequestsException) }
}

extension ServiceQuotasErrorType: Equatable {
    public static func == (lhs: ServiceQuotasErrorType, rhs: ServiceQuotasErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension ServiceQuotasErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
