//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for ElasticBeanstalk
public struct ElasticBeanstalkErrorType: AWSErrorType {
    enum Code: String {
        case codeBuildNotInServiceRegionException = "CodeBuildNotInServiceRegionException"
        case elasticBeanstalkServiceException = "ElasticBeanstalkServiceException"
        case insufficientPrivilegesException = "InsufficientPrivilegesException"
        case invalidRequestException = "InvalidRequestException"
        case managedActionInvalidStateException = "ManagedActionInvalidStateException"
        case operationInProgressException = "OperationInProgressFailure"
        case platformVersionStillReferencedException = "PlatformVersionStillReferencedException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case resourceTypeNotSupportedException = "ResourceTypeNotSupportedException"
        case s3LocationNotInServiceRegionException = "S3LocationNotInServiceRegionException"
        case s3SubscriptionRequiredException = "S3SubscriptionRequiredException"
        case sourceBundleDeletionException = "SourceBundleDeletionFailure"
        case tooManyApplicationVersionsException = "TooManyApplicationVersionsException"
        case tooManyApplicationsException = "TooManyApplicationsException"
        case tooManyBucketsException = "TooManyBucketsException"
        case tooManyConfigurationTemplatesException = "TooManyConfigurationTemplatesException"
        case tooManyEnvironmentsException = "TooManyEnvironmentsException"
        case tooManyPlatformsException = "TooManyPlatformsException"
        case tooManyTagsException = "TooManyTagsException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var codeBuildNotInServiceRegionException: Self { .init(.codeBuildNotInServiceRegionException) }
    public static var elasticBeanstalkServiceException: Self { .init(.elasticBeanstalkServiceException) }
    public static var insufficientPrivilegesException: Self { .init(.insufficientPrivilegesException) }
    public static var invalidRequestException: Self { .init(.invalidRequestException) }
    public static var managedActionInvalidStateException: Self { .init(.managedActionInvalidStateException) }
    public static var operationInProgressException: Self { .init(.operationInProgressException) }
    public static var platformVersionStillReferencedException: Self { .init(.platformVersionStillReferencedException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var resourceTypeNotSupportedException: Self { .init(.resourceTypeNotSupportedException) }
    public static var s3LocationNotInServiceRegionException: Self { .init(.s3LocationNotInServiceRegionException) }
    public static var s3SubscriptionRequiredException: Self { .init(.s3SubscriptionRequiredException) }
    public static var sourceBundleDeletionException: Self { .init(.sourceBundleDeletionException) }
    public static var tooManyApplicationVersionsException: Self { .init(.tooManyApplicationVersionsException) }
    public static var tooManyApplicationsException: Self { .init(.tooManyApplicationsException) }
    public static var tooManyBucketsException: Self { .init(.tooManyBucketsException) }
    public static var tooManyConfigurationTemplatesException: Self { .init(.tooManyConfigurationTemplatesException) }
    public static var tooManyEnvironmentsException: Self { .init(.tooManyEnvironmentsException) }
    public static var tooManyPlatformsException: Self { .init(.tooManyPlatformsException) }
    public static var tooManyTagsException: Self { .init(.tooManyTagsException) }
}

extension ElasticBeanstalkErrorType: Equatable {
    public static func == (lhs: ElasticBeanstalkErrorType, rhs: ElasticBeanstalkErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension ElasticBeanstalkErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
