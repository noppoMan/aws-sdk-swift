//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for ElasticBeanstalk
public enum ElasticBeanstalkErrorType: AWSErrorType {
    case codeBuildNotInServiceRegionException(message: String?)
    case elasticBeanstalkServiceException(message: String?)
    case insufficientPrivilegesException(message: String?)
    case invalidRequestException(message: String?)
    case managedActionInvalidStateException(message: String?)
    case operationInProgressException(message: String?)
    case platformVersionStillReferencedException(message: String?)
    case resourceNotFoundException(message: String?)
    case resourceTypeNotSupportedException(message: String?)
    case s3LocationNotInServiceRegionException(message: String?)
    case s3SubscriptionRequiredException(message: String?)
    case sourceBundleDeletionException(message: String?)
    case tooManyApplicationVersionsException(message: String?)
    case tooManyApplicationsException(message: String?)
    case tooManyBucketsException(message: String?)
    case tooManyConfigurationTemplatesException(message: String?)
    case tooManyEnvironmentsException(message: String?)
    case tooManyPlatformsException(message: String?)
    case tooManyTagsException(message: String?)
}

extension ElasticBeanstalkErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "CodeBuildNotInServiceRegionException":
            self = .codeBuildNotInServiceRegionException(message: message)
        case "ElasticBeanstalkServiceException":
            self = .elasticBeanstalkServiceException(message: message)
        case "InsufficientPrivilegesException":
            self = .insufficientPrivilegesException(message: message)
        case "InvalidRequestException":
            self = .invalidRequestException(message: message)
        case "ManagedActionInvalidStateException":
            self = .managedActionInvalidStateException(message: message)
        case "OperationInProgressFailure":
            self = .operationInProgressException(message: message)
        case "PlatformVersionStillReferencedException":
            self = .platformVersionStillReferencedException(message: message)
        case "ResourceNotFoundException":
            self = .resourceNotFoundException(message: message)
        case "ResourceTypeNotSupportedException":
            self = .resourceTypeNotSupportedException(message: message)
        case "S3LocationNotInServiceRegionException":
            self = .s3LocationNotInServiceRegionException(message: message)
        case "S3SubscriptionRequiredException":
            self = .s3SubscriptionRequiredException(message: message)
        case "SourceBundleDeletionFailure":
            self = .sourceBundleDeletionException(message: message)
        case "TooManyApplicationVersionsException":
            self = .tooManyApplicationVersionsException(message: message)
        case "TooManyApplicationsException":
            self = .tooManyApplicationsException(message: message)
        case "TooManyBucketsException":
            self = .tooManyBucketsException(message: message)
        case "TooManyConfigurationTemplatesException":
            self = .tooManyConfigurationTemplatesException(message: message)
        case "TooManyEnvironmentsException":
            self = .tooManyEnvironmentsException(message: message)
        case "TooManyPlatformsException":
            self = .tooManyPlatformsException(message: message)
        case "TooManyTagsException":
            self = .tooManyTagsException(message: message)
        default:
            return nil
        }
    }
}

extension ElasticBeanstalkErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .codeBuildNotInServiceRegionException(let message):
            return "CodeBuildNotInServiceRegionException: \(message ?? "")"
        case .elasticBeanstalkServiceException(let message):
            return "ElasticBeanstalkServiceException: \(message ?? "")"
        case .insufficientPrivilegesException(let message):
            return "InsufficientPrivilegesException: \(message ?? "")"
        case .invalidRequestException(let message):
            return "InvalidRequestException: \(message ?? "")"
        case .managedActionInvalidStateException(let message):
            return "ManagedActionInvalidStateException: \(message ?? "")"
        case .operationInProgressException(let message):
            return "OperationInProgressFailure: \(message ?? "")"
        case .platformVersionStillReferencedException(let message):
            return "PlatformVersionStillReferencedException: \(message ?? "")"
        case .resourceNotFoundException(let message):
            return "ResourceNotFoundException: \(message ?? "")"
        case .resourceTypeNotSupportedException(let message):
            return "ResourceTypeNotSupportedException: \(message ?? "")"
        case .s3LocationNotInServiceRegionException(let message):
            return "S3LocationNotInServiceRegionException: \(message ?? "")"
        case .s3SubscriptionRequiredException(let message):
            return "S3SubscriptionRequiredException: \(message ?? "")"
        case .sourceBundleDeletionException(let message):
            return "SourceBundleDeletionFailure: \(message ?? "")"
        case .tooManyApplicationVersionsException(let message):
            return "TooManyApplicationVersionsException: \(message ?? "")"
        case .tooManyApplicationsException(let message):
            return "TooManyApplicationsException: \(message ?? "")"
        case .tooManyBucketsException(let message):
            return "TooManyBucketsException: \(message ?? "")"
        case .tooManyConfigurationTemplatesException(let message):
            return "TooManyConfigurationTemplatesException: \(message ?? "")"
        case .tooManyEnvironmentsException(let message):
            return "TooManyEnvironmentsException: \(message ?? "")"
        case .tooManyPlatformsException(let message):
            return "TooManyPlatformsException: \(message ?? "")"
        case .tooManyTagsException(let message):
            return "TooManyTagsException: \(message ?? "")"
        }
    }
}
