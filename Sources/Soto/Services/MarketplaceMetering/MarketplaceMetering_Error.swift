//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for MarketplaceMetering
public enum MarketplaceMeteringErrorType: AWSErrorType {
    case customerNotEntitledException(message: String?)
    case disabledApiException(message: String?)
    case duplicateRequestException(message: String?)
    case expiredTokenException(message: String?)
    case internalServiceErrorException(message: String?)
    case invalidCustomerIdentifierException(message: String?)
    case invalidEndpointRegionException(message: String?)
    case invalidProductCodeException(message: String?)
    case invalidPublicKeyVersionException(message: String?)
    case invalidRegionException(message: String?)
    case invalidTokenException(message: String?)
    case invalidUsageDimensionException(message: String?)
    case platformNotSupportedException(message: String?)
    case throttlingException(message: String?)
    case timestampOutOfBoundsException(message: String?)
}

extension MarketplaceMeteringErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "CustomerNotEntitledException":
            self = .customerNotEntitledException(message: message)
        case "DisabledApiException":
            self = .disabledApiException(message: message)
        case "DuplicateRequestException":
            self = .duplicateRequestException(message: message)
        case "ExpiredTokenException":
            self = .expiredTokenException(message: message)
        case "InternalServiceErrorException":
            self = .internalServiceErrorException(message: message)
        case "InvalidCustomerIdentifierException":
            self = .invalidCustomerIdentifierException(message: message)
        case "InvalidEndpointRegionException":
            self = .invalidEndpointRegionException(message: message)
        case "InvalidProductCodeException":
            self = .invalidProductCodeException(message: message)
        case "InvalidPublicKeyVersionException":
            self = .invalidPublicKeyVersionException(message: message)
        case "InvalidRegionException":
            self = .invalidRegionException(message: message)
        case "InvalidTokenException":
            self = .invalidTokenException(message: message)
        case "InvalidUsageDimensionException":
            self = .invalidUsageDimensionException(message: message)
        case "PlatformNotSupportedException":
            self = .platformNotSupportedException(message: message)
        case "ThrottlingException":
            self = .throttlingException(message: message)
        case "TimestampOutOfBoundsException":
            self = .timestampOutOfBoundsException(message: message)
        default:
            return nil
        }
    }
}

extension MarketplaceMeteringErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .customerNotEntitledException(let message):
            return "CustomerNotEntitledException: \(message ?? "")"
        case .disabledApiException(let message):
            return "DisabledApiException: \(message ?? "")"
        case .duplicateRequestException(let message):
            return "DuplicateRequestException: \(message ?? "")"
        case .expiredTokenException(let message):
            return "ExpiredTokenException: \(message ?? "")"
        case .internalServiceErrorException(let message):
            return "InternalServiceErrorException: \(message ?? "")"
        case .invalidCustomerIdentifierException(let message):
            return "InvalidCustomerIdentifierException: \(message ?? "")"
        case .invalidEndpointRegionException(let message):
            return "InvalidEndpointRegionException: \(message ?? "")"
        case .invalidProductCodeException(let message):
            return "InvalidProductCodeException: \(message ?? "")"
        case .invalidPublicKeyVersionException(let message):
            return "InvalidPublicKeyVersionException: \(message ?? "")"
        case .invalidRegionException(let message):
            return "InvalidRegionException: \(message ?? "")"
        case .invalidTokenException(let message):
            return "InvalidTokenException: \(message ?? "")"
        case .invalidUsageDimensionException(let message):
            return "InvalidUsageDimensionException: \(message ?? "")"
        case .platformNotSupportedException(let message):
            return "PlatformNotSupportedException: \(message ?? "")"
        case .throttlingException(let message):
            return "ThrottlingException: \(message ?? "")"
        case .timestampOutOfBoundsException(let message):
            return "TimestampOutOfBoundsException: \(message ?? "")"
        }
    }
}
