//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Translate
public struct TranslateErrorType: AWSErrorType {
    enum Code: String {
        case detectedLanguageLowConfidenceException = "DetectedLanguageLowConfidenceException"
        case internalServerException = "InternalServerException"
        case invalidFilterException = "InvalidFilterException"
        case invalidParameterValueException = "InvalidParameterValueException"
        case invalidRequestException = "InvalidRequestException"
        case limitExceededException = "LimitExceededException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case serviceUnavailableException = "ServiceUnavailableException"
        case textSizeLimitExceededException = "TextSizeLimitExceededException"
        case tooManyRequestsException = "TooManyRequestsException"
        case unsupportedLanguagePairException = "UnsupportedLanguagePairException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize Translate
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var detectedLanguageLowConfidenceException: Self { .init(.detectedLanguageLowConfidenceException) }
    public static var internalServerException: Self { .init(.internalServerException) }
    public static var invalidFilterException: Self { .init(.invalidFilterException) }
    public static var invalidParameterValueException: Self { .init(.invalidParameterValueException) }
    public static var invalidRequestException: Self { .init(.invalidRequestException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var serviceUnavailableException: Self { .init(.serviceUnavailableException) }
    public static var textSizeLimitExceededException: Self { .init(.textSizeLimitExceededException) }
    public static var tooManyRequestsException: Self { .init(.tooManyRequestsException) }
    public static var unsupportedLanguagePairException: Self { .init(.unsupportedLanguagePairException) }
}

extension TranslateErrorType: Equatable {
    public static func == (lhs: TranslateErrorType, rhs: TranslateErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension TranslateErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
