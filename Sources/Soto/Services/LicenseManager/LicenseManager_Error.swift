//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for LicenseManager
public struct LicenseManagerErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case authorizationException = "AuthorizationException"
        case failedDependencyException = "FailedDependencyException"
        case filterLimitExceededException = "FilterLimitExceededException"
        case invalidParameterValueException = "InvalidParameterValueException"
        case invalidResourceStateException = "InvalidResourceStateException"
        case licenseUsageException = "LicenseUsageException"
        case rateLimitExceededException = "RateLimitExceededException"
        case resourceLimitExceededException = "ResourceLimitExceededException"
        case serverInternalException = "ServerInternalException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    public static var authorizationException: Self { .init(.authorizationException) }
    public static var failedDependencyException: Self { .init(.failedDependencyException) }
    public static var filterLimitExceededException: Self { .init(.filterLimitExceededException) }
    public static var invalidParameterValueException: Self { .init(.invalidParameterValueException) }
    public static var invalidResourceStateException: Self { .init(.invalidResourceStateException) }
    public static var licenseUsageException: Self { .init(.licenseUsageException) }
    public static var rateLimitExceededException: Self { .init(.rateLimitExceededException) }
    public static var resourceLimitExceededException: Self { .init(.resourceLimitExceededException) }
    public static var serverInternalException: Self { .init(.serverInternalException) }
}

extension LicenseManagerErrorType: Equatable {
    public static func == (lhs: LicenseManagerErrorType, rhs: LicenseManagerErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension LicenseManagerErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
