//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for LicenseManager
public enum LicenseManagerErrorType: AWSErrorType {
    case accessDeniedException(message: String?)
    case authorizationException(message: String?)
    case failedDependencyException(message: String?)
    case filterLimitExceededException(message: String?)
    case invalidParameterValueException(message: String?)
    case invalidResourceStateException(message: String?)
    case licenseUsageException(message: String?)
    case rateLimitExceededException(message: String?)
    case resourceLimitExceededException(message: String?)
    case serverInternalException(message: String?)
}

extension LicenseManagerErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "AccessDeniedException":
            self = .accessDeniedException(message: message)
        case "AuthorizationException":
            self = .authorizationException(message: message)
        case "FailedDependencyException":
            self = .failedDependencyException(message: message)
        case "FilterLimitExceededException":
            self = .filterLimitExceededException(message: message)
        case "InvalidParameterValueException":
            self = .invalidParameterValueException(message: message)
        case "InvalidResourceStateException":
            self = .invalidResourceStateException(message: message)
        case "LicenseUsageException":
            self = .licenseUsageException(message: message)
        case "RateLimitExceededException":
            self = .rateLimitExceededException(message: message)
        case "ResourceLimitExceededException":
            self = .resourceLimitExceededException(message: message)
        case "ServerInternalException":
            self = .serverInternalException(message: message)
        default:
            return nil
        }
    }
}

extension LicenseManagerErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .accessDeniedException(let message):
            return "AccessDeniedException: \(message ?? "")"
        case .authorizationException(let message):
            return "AuthorizationException: \(message ?? "")"
        case .failedDependencyException(let message):
            return "FailedDependencyException: \(message ?? "")"
        case .filterLimitExceededException(let message):
            return "FilterLimitExceededException: \(message ?? "")"
        case .invalidParameterValueException(let message):
            return "InvalidParameterValueException: \(message ?? "")"
        case .invalidResourceStateException(let message):
            return "InvalidResourceStateException: \(message ?? "")"
        case .licenseUsageException(let message):
            return "LicenseUsageException: \(message ?? "")"
        case .rateLimitExceededException(let message):
            return "RateLimitExceededException: \(message ?? "")"
        case .resourceLimitExceededException(let message):
            return "ResourceLimitExceededException: \(message ?? "")"
        case .serverInternalException(let message):
            return "ServerInternalException: \(message ?? "")"
        }
    }
}
