//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for CostExplorer
public enum CostExplorerErrorType: AWSErrorType {
    case billExpirationException(message: String?)
    case dataUnavailableException(message: String?)
    case invalidNextTokenException(message: String?)
    case limitExceededException(message: String?)
    case requestChangedException(message: String?)
    case resourceNotFoundException(message: String?)
    case serviceQuotaExceededException(message: String?)
    case unknownMonitorException(message: String?)
    case unknownSubscriptionException(message: String?)
    case unresolvableUsageUnitException(message: String?)
}

extension CostExplorerErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "BillExpirationException":
            self = .billExpirationException(message: message)
        case "DataUnavailableException":
            self = .dataUnavailableException(message: message)
        case "InvalidNextTokenException":
            self = .invalidNextTokenException(message: message)
        case "LimitExceededException":
            self = .limitExceededException(message: message)
        case "RequestChangedException":
            self = .requestChangedException(message: message)
        case "ResourceNotFoundException":
            self = .resourceNotFoundException(message: message)
        case "ServiceQuotaExceededException":
            self = .serviceQuotaExceededException(message: message)
        case "UnknownMonitorException":
            self = .unknownMonitorException(message: message)
        case "UnknownSubscriptionException":
            self = .unknownSubscriptionException(message: message)
        case "UnresolvableUsageUnitException":
            self = .unresolvableUsageUnitException(message: message)
        default:
            return nil
        }
    }
}

extension CostExplorerErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .billExpirationException(let message):
            return "BillExpirationException: \(message ?? "")"
        case .dataUnavailableException(let message):
            return "DataUnavailableException: \(message ?? "")"
        case .invalidNextTokenException(let message):
            return "InvalidNextTokenException: \(message ?? "")"
        case .limitExceededException(let message):
            return "LimitExceededException: \(message ?? "")"
        case .requestChangedException(let message):
            return "RequestChangedException: \(message ?? "")"
        case .resourceNotFoundException(let message):
            return "ResourceNotFoundException: \(message ?? "")"
        case .serviceQuotaExceededException(let message):
            return "ServiceQuotaExceededException: \(message ?? "")"
        case .unknownMonitorException(let message):
            return "UnknownMonitorException: \(message ?? "")"
        case .unknownSubscriptionException(let message):
            return "UnknownSubscriptionException: \(message ?? "")"
        case .unresolvableUsageUnitException(let message):
            return "UnresolvableUsageUnitException: \(message ?? "")"
        }
    }
}
