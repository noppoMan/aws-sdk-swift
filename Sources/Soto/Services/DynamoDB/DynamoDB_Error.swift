//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for DynamoDB
public struct DynamoDBErrorType: AWSErrorType {
    enum Code: String {
        case backupInUseException = "BackupInUseException"
        case backupNotFoundException = "BackupNotFoundException"
        case conditionalCheckFailedException = "ConditionalCheckFailedException"
        case continuousBackupsUnavailableException = "ContinuousBackupsUnavailableException"
        case globalTableAlreadyExistsException = "GlobalTableAlreadyExistsException"
        case globalTableNotFoundException = "GlobalTableNotFoundException"
        case idempotentParameterMismatchException = "IdempotentParameterMismatchException"
        case indexNotFoundException = "IndexNotFoundException"
        case internalServerError = "InternalServerError"
        case invalidRestoreTimeException = "InvalidRestoreTimeException"
        case itemCollectionSizeLimitExceededException = "ItemCollectionSizeLimitExceededException"
        case limitExceededException = "LimitExceededException"
        case pointInTimeRecoveryUnavailableException = "PointInTimeRecoveryUnavailableException"
        case provisionedThroughputExceededException = "ProvisionedThroughputExceededException"
        case replicaAlreadyExistsException = "ReplicaAlreadyExistsException"
        case replicaNotFoundException = "ReplicaNotFoundException"
        case requestLimitExceeded = "RequestLimitExceeded"
        case resourceInUseException = "ResourceInUseException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case tableAlreadyExistsException = "TableAlreadyExistsException"
        case tableInUseException = "TableInUseException"
        case tableNotFoundException = "TableNotFoundException"
        case transactionCanceledException = "TransactionCanceledException"
        case transactionConflictException = "TransactionConflictException"
        case transactionInProgressException = "TransactionInProgressException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize DynamoDB
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var backupInUseException: Self { .init(.backupInUseException) }
    public static var backupNotFoundException: Self { .init(.backupNotFoundException) }
    public static var conditionalCheckFailedException: Self { .init(.conditionalCheckFailedException) }
    public static var continuousBackupsUnavailableException: Self { .init(.continuousBackupsUnavailableException) }
    public static var globalTableAlreadyExistsException: Self { .init(.globalTableAlreadyExistsException) }
    public static var globalTableNotFoundException: Self { .init(.globalTableNotFoundException) }
    public static var idempotentParameterMismatchException: Self { .init(.idempotentParameterMismatchException) }
    public static var indexNotFoundException: Self { .init(.indexNotFoundException) }
    public static var internalServerError: Self { .init(.internalServerError) }
    public static var invalidRestoreTimeException: Self { .init(.invalidRestoreTimeException) }
    public static var itemCollectionSizeLimitExceededException: Self { .init(.itemCollectionSizeLimitExceededException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var pointInTimeRecoveryUnavailableException: Self { .init(.pointInTimeRecoveryUnavailableException) }
    public static var provisionedThroughputExceededException: Self { .init(.provisionedThroughputExceededException) }
    public static var replicaAlreadyExistsException: Self { .init(.replicaAlreadyExistsException) }
    public static var replicaNotFoundException: Self { .init(.replicaNotFoundException) }
    public static var requestLimitExceeded: Self { .init(.requestLimitExceeded) }
    public static var resourceInUseException: Self { .init(.resourceInUseException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var tableAlreadyExistsException: Self { .init(.tableAlreadyExistsException) }
    public static var tableInUseException: Self { .init(.tableInUseException) }
    public static var tableNotFoundException: Self { .init(.tableNotFoundException) }
    public static var transactionCanceledException: Self { .init(.transactionCanceledException) }
    public static var transactionConflictException: Self { .init(.transactionConflictException) }
    public static var transactionInProgressException: Self { .init(.transactionInProgressException) }
}

extension DynamoDBErrorType: Equatable {
    public static func == (lhs: DynamoDBErrorType, rhs: DynamoDBErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension DynamoDBErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
