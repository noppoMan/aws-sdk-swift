//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension DevOpsGuru {
    // MARK: Enums

    public enum AnomalySeverity: String, CustomStringConvertible, Codable {
        case high = "HIGH"
        case low = "LOW"
        case medium = "MEDIUM"
        public var description: String { return self.rawValue }
    }

    public enum AnomalyStatus: String, CustomStringConvertible, Codable {
        case closed = "CLOSED"
        case ongoing = "ONGOING"
        public var description: String { return self.rawValue }
    }

    public enum CloudWatchMetricsStat: String, CustomStringConvertible, Codable {
        case average = "Average"
        case maximum = "Maximum"
        case minimum = "Minimum"
        case p50
        case p90
        case p99
        case samplecount = "SampleCount"
        case sum = "Sum"
        public var description: String { return self.rawValue }
    }

    public enum EventClass: String, CustomStringConvertible, Codable {
        case configChange = "CONFIG_CHANGE"
        case deployment = "DEPLOYMENT"
        case infrastructure = "INFRASTRUCTURE"
        case schemaChange = "SCHEMA_CHANGE"
        case securityChange = "SECURITY_CHANGE"
        public var description: String { return self.rawValue }
    }

    public enum EventDataSource: String, CustomStringConvertible, Codable {
        case awsCloudTrail = "AWS_CLOUD_TRAIL"
        case awsCodeDeploy = "AWS_CODE_DEPLOY"
        public var description: String { return self.rawValue }
    }

    public enum InsightFeedbackOption: String, CustomStringConvertible, Codable {
        case alertTooSensitive = "ALERT_TOO_SENSITIVE"
        case dataIncorrect = "DATA_INCORRECT"
        case dataNoisyAnomaly = "DATA_NOISY_ANOMALY"
        case recommendationUseful = "RECOMMENDATION_USEFUL"
        case validCollection = "VALID_COLLECTION"
        public var description: String { return self.rawValue }
    }

    public enum InsightSeverity: String, CustomStringConvertible, Codable {
        case high = "HIGH"
        case low = "LOW"
        case medium = "MEDIUM"
        public var description: String { return self.rawValue }
    }

    public enum InsightStatus: String, CustomStringConvertible, Codable {
        case closed = "CLOSED"
        case ongoing = "ONGOING"
        public var description: String { return self.rawValue }
    }

    public enum InsightType: String, CustomStringConvertible, Codable {
        case proactive = "PROACTIVE"
        case reactive = "REACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum OptInStatus: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum UpdateResourceCollectionAction: String, CustomStringConvertible, Codable {
        case add = "ADD"
        case remove = "REMOVE"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AddNotificationChannelRequest: AWSEncodableShape {
        public let config: NotificationChannelConfig

        public init(config: NotificationChannelConfig) {
            self.config = config
        }

        public func validate(name: String) throws {
            try self.config.validate(name: "\(name).config")
        }

        private enum CodingKeys: String, CodingKey {
            case config = "Config"
        }
    }

    public struct AddNotificationChannelResponse: AWSDecodableShape {
        public let id: String?

        public init(id: String? = nil) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct AnomalySourceDetails: AWSDecodableShape {
        public let cloudWatchMetrics: [CloudWatchMetricsDetail]?

        public init(cloudWatchMetrics: [CloudWatchMetricsDetail]? = nil) {
            self.cloudWatchMetrics = cloudWatchMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchMetrics = "CloudWatchMetrics"
        }
    }

    public struct AnomalyTimeRange: AWSDecodableShape {
        @OptionalCustomCoding<UnixEpochDateCoder>
        public var endTime: Date?
        @CustomCoding<UnixEpochDateCoder>
        public var startTime: Date

        public init(endTime: Date? = nil, startTime: Date) {
            self.endTime = endTime
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case startTime = "StartTime"
        }
    }

    public struct CloudFormationCollection: AWSEncodableShape & AWSDecodableShape {
        public let stackNames: [String]?

        public init(stackNames: [String]? = nil) {
            self.stackNames = stackNames
        }

        public func validate(name: String) throws {
            try self.stackNames?.forEach {
                try validate($0, name: "stackNames[]", parent: name, max: 128)
                try validate($0, name: "stackNames[]", parent: name, min: 1)
                try validate($0, name: "stackNames[]", parent: name, pattern: "^[a-zA-Z*]+[a-zA-Z0-9-]*$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case stackNames = "StackNames"
        }
    }

    public struct CloudFormationCollectionFilter: AWSDecodableShape {
        public let stackNames: [String]?

        public init(stackNames: [String]? = nil) {
            self.stackNames = stackNames
        }

        private enum CodingKeys: String, CodingKey {
            case stackNames = "StackNames"
        }
    }

    public struct CloudFormationHealth: AWSDecodableShape {
        public let insight: InsightHealth?
        public let stackName: String?

        public init(insight: InsightHealth? = nil, stackName: String? = nil) {
            self.insight = insight
            self.stackName = stackName
        }

        private enum CodingKeys: String, CodingKey {
            case insight = "Insight"
            case stackName = "StackName"
        }
    }

    public struct CloudWatchMetricsDetail: AWSDecodableShape {
        public let dimensions: [CloudWatchMetricsDimension]?
        public let metricName: String?
        public let namespace: String?
        public let period: Int?
        public let stat: CloudWatchMetricsStat?
        public let unit: String?

        public init(dimensions: [CloudWatchMetricsDimension]? = nil, metricName: String? = nil, namespace: String? = nil, period: Int? = nil, stat: CloudWatchMetricsStat? = nil, unit: String? = nil) {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.period = period
            self.stat = stat
            self.unit = unit
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case period = "Period"
            case stat = "Stat"
            case unit = "Unit"
        }
    }

    public struct CloudWatchMetricsDimension: AWSDecodableShape {
        public let name: String?
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct DescribeAccountHealthRequest: AWSEncodableShape {
        public init() {}
    }

    public struct DescribeAccountHealthResponse: AWSDecodableShape {
        public let metricsAnalyzed: Int?
        public let openProactiveInsights: Int?
        public let openReactiveInsights: Int?

        public init(metricsAnalyzed: Int? = nil, openProactiveInsights: Int? = nil, openReactiveInsights: Int? = nil) {
            self.metricsAnalyzed = metricsAnalyzed
            self.openProactiveInsights = openProactiveInsights
            self.openReactiveInsights = openReactiveInsights
        }

        private enum CodingKeys: String, CodingKey {
            case metricsAnalyzed = "MetricsAnalyzed"
            case openProactiveInsights = "OpenProactiveInsights"
            case openReactiveInsights = "OpenReactiveInsights"
        }
    }

    public struct DescribeAccountOverviewRequest: AWSEncodableShape {
        @CustomCoding<UnixEpochDateCoder>
        public var fromTime: Date
        @OptionalCustomCoding<UnixEpochDateCoder>
        public var toTime: Date?

        public init(fromTime: Date, toTime: Date? = nil) {
            self.fromTime = fromTime
            self.toTime = toTime
        }

        private enum CodingKeys: String, CodingKey {
            case fromTime = "FromTime"
            case toTime = "ToTime"
        }
    }

    public struct DescribeAccountOverviewResponse: AWSDecodableShape {
        public let meanTimeToRecoverInMilliseconds: Int64?
        public let proactiveInsights: Int?
        public let reactiveInsights: Int?

        public init(meanTimeToRecoverInMilliseconds: Int64? = nil, proactiveInsights: Int? = nil, reactiveInsights: Int? = nil) {
            self.meanTimeToRecoverInMilliseconds = meanTimeToRecoverInMilliseconds
            self.proactiveInsights = proactiveInsights
            self.reactiveInsights = reactiveInsights
        }

        private enum CodingKeys: String, CodingKey {
            case meanTimeToRecoverInMilliseconds = "MeanTimeToRecoverInMilliseconds"
            case proactiveInsights = "ProactiveInsights"
            case reactiveInsights = "ReactiveInsights"
        }
    }

    public struct DescribeAnomalyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "id", location: .uri(locationName: "Id"))
        ]

        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeAnomalyResponse: AWSDecodableShape {
        public let proactiveAnomaly: ProactiveAnomaly?
        public let reactiveAnomaly: ReactiveAnomaly?

        public init(proactiveAnomaly: ProactiveAnomaly? = nil, reactiveAnomaly: ReactiveAnomaly? = nil) {
            self.proactiveAnomaly = proactiveAnomaly
            self.reactiveAnomaly = reactiveAnomaly
        }

        private enum CodingKeys: String, CodingKey {
            case proactiveAnomaly = "ProactiveAnomaly"
            case reactiveAnomaly = "ReactiveAnomaly"
        }
    }

    public struct DescribeInsightRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "id", location: .uri(locationName: "Id"))
        ]

        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeInsightResponse: AWSDecodableShape {
        public let proactiveInsight: ProactiveInsight?
        public let reactiveInsight: ReactiveInsight?

        public init(proactiveInsight: ProactiveInsight? = nil, reactiveInsight: ReactiveInsight? = nil) {
            self.proactiveInsight = proactiveInsight
            self.reactiveInsight = reactiveInsight
        }

        private enum CodingKeys: String, CodingKey {
            case proactiveInsight = "ProactiveInsight"
            case reactiveInsight = "ReactiveInsight"
        }
    }

    public struct DescribeResourceCollectionHealthRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "resourceCollectionType", location: .uri(locationName: "ResourceCollectionType"))
        ]

        public let nextToken: String?
        public let resourceCollectionType: String

        public init(nextToken: String? = nil, resourceCollectionType: String) {
            self.nextToken = nextToken
            self.resourceCollectionType = resourceCollectionType
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeResourceCollectionHealthResponse: AWSDecodableShape {
        public let cloudFormation: [CloudFormationHealth]?
        public let nextToken: String?

        public init(cloudFormation: [CloudFormationHealth]? = nil, nextToken: String? = nil) {
            self.cloudFormation = cloudFormation
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFormation = "CloudFormation"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeServiceIntegrationRequest: AWSEncodableShape {
        public init() {}
    }

    public struct DescribeServiceIntegrationResponse: AWSDecodableShape {
        public let serviceIntegration: ServiceIntegrationConfig?

        public init(serviceIntegration: ServiceIntegrationConfig? = nil) {
            self.serviceIntegration = serviceIntegration
        }

        private enum CodingKeys: String, CodingKey {
            case serviceIntegration = "ServiceIntegration"
        }
    }

    public struct EndTimeRange: AWSEncodableShape {
        @OptionalCustomCoding<UnixEpochDateCoder>
        public var fromTime: Date?
        @OptionalCustomCoding<UnixEpochDateCoder>
        public var toTime: Date?

        public init(fromTime: Date? = nil, toTime: Date? = nil) {
            self.fromTime = fromTime
            self.toTime = toTime
        }

        private enum CodingKeys: String, CodingKey {
            case fromTime = "FromTime"
            case toTime = "ToTime"
        }
    }

    public struct Event: AWSDecodableShape {
        public let dataSource: EventDataSource?
        public let eventClass: EventClass?
        public let eventSource: String?
        public let id: String?
        public let name: String?
        public let resourceCollection: ResourceCollection?
        public let resources: [EventResource]?
        @OptionalCustomCoding<UnixEpochDateCoder>
        public var time: Date?

        public init(dataSource: EventDataSource? = nil, eventClass: EventClass? = nil, eventSource: String? = nil, id: String? = nil, name: String? = nil, resourceCollection: ResourceCollection? = nil, resources: [EventResource]? = nil, time: Date? = nil) {
            self.dataSource = dataSource
            self.eventClass = eventClass
            self.eventSource = eventSource
            self.id = id
            self.name = name
            self.resourceCollection = resourceCollection
            self.resources = resources
            self.time = time
        }

        private enum CodingKeys: String, CodingKey {
            case dataSource = "DataSource"
            case eventClass = "EventClass"
            case eventSource = "EventSource"
            case id = "Id"
            case name = "Name"
            case resourceCollection = "ResourceCollection"
            case resources = "Resources"
            case time = "Time"
        }
    }

    public struct EventResource: AWSDecodableShape {
        public let arn: String?
        public let name: String?
        public let type: String?

        public init(arn: String? = nil, name: String? = nil, type: String? = nil) {
            self.arn = arn
            self.name = name
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case name = "Name"
            case type = "Type"
        }
    }

    public struct EventTimeRange: AWSEncodableShape {
        @CustomCoding<UnixEpochDateCoder>
        public var fromTime: Date
        @CustomCoding<UnixEpochDateCoder>
        public var toTime: Date

        public init(fromTime: Date, toTime: Date) {
            self.fromTime = fromTime
            self.toTime = toTime
        }

        private enum CodingKeys: String, CodingKey {
            case fromTime = "FromTime"
            case toTime = "ToTime"
        }
    }

    public struct GetResourceCollectionRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "resourceCollectionType", location: .uri(locationName: "ResourceCollectionType"))
        ]

        public let nextToken: String?
        public let resourceCollectionType: String

        public init(nextToken: String? = nil, resourceCollectionType: String) {
            self.nextToken = nextToken
            self.resourceCollectionType = resourceCollectionType
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetResourceCollectionResponse: AWSDecodableShape {
        public let nextToken: String?
        public let resourceCollection: ResourceCollectionFilter?

        public init(nextToken: String? = nil, resourceCollection: ResourceCollectionFilter? = nil) {
            self.nextToken = nextToken
            self.resourceCollection = resourceCollection
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceCollection = "ResourceCollection"
        }
    }

    public struct InsightFeedback: AWSEncodableShape {
        public let feedback: InsightFeedbackOption?
        public let id: String?

        public init(feedback: InsightFeedbackOption? = nil, id: String? = nil) {
            self.feedback = feedback
            self.id = id
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 100)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[\\w-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case feedback = "Feedback"
            case id = "Id"
        }
    }

    public struct InsightHealth: AWSDecodableShape {
        public let meanTimeToRecoverInMilliseconds: Int64?
        public let openProactiveInsights: Int?
        public let openReactiveInsights: Int?

        public init(meanTimeToRecoverInMilliseconds: Int64? = nil, openProactiveInsights: Int? = nil, openReactiveInsights: Int? = nil) {
            self.meanTimeToRecoverInMilliseconds = meanTimeToRecoverInMilliseconds
            self.openProactiveInsights = openProactiveInsights
            self.openReactiveInsights = openReactiveInsights
        }

        private enum CodingKeys: String, CodingKey {
            case meanTimeToRecoverInMilliseconds = "MeanTimeToRecoverInMilliseconds"
            case openProactiveInsights = "OpenProactiveInsights"
            case openReactiveInsights = "OpenReactiveInsights"
        }
    }

    public struct InsightTimeRange: AWSDecodableShape {
        @OptionalCustomCoding<UnixEpochDateCoder>
        public var endTime: Date?
        @CustomCoding<UnixEpochDateCoder>
        public var startTime: Date

        public init(endTime: Date? = nil, startTime: Date) {
            self.endTime = endTime
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case startTime = "StartTime"
        }
    }

    public struct ListAnomaliesForInsightRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "insightId", location: .uri(locationName: "InsightId"))
        ]

        public let insightId: String
        public let maxResults: Int?
        public let nextToken: String?
        public let startTimeRange: StartTimeRange?

        public init(insightId: String, maxResults: Int? = nil, nextToken: String? = nil, startTimeRange: StartTimeRange? = nil) {
            self.insightId = insightId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.startTimeRange = startTimeRange
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 500)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 36)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 36)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case startTimeRange = "StartTimeRange"
        }
    }

    public struct ListAnomaliesForInsightResponse: AWSDecodableShape {
        public let nextToken: String?
        public let proactiveAnomalies: [ProactiveAnomalySummary]?
        public let reactiveAnomalies: [ReactiveAnomalySummary]?

        public init(nextToken: String? = nil, proactiveAnomalies: [ProactiveAnomalySummary]? = nil, reactiveAnomalies: [ReactiveAnomalySummary]? = nil) {
            self.nextToken = nextToken
            self.proactiveAnomalies = proactiveAnomalies
            self.reactiveAnomalies = reactiveAnomalies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case proactiveAnomalies = "ProactiveAnomalies"
            case reactiveAnomalies = "ReactiveAnomalies"
        }
    }

    public struct ListEventsFilters: AWSEncodableShape {
        public let dataSource: EventDataSource?
        public let eventClass: EventClass?
        public let eventSource: String?
        public let eventTimeRange: EventTimeRange?
        public let insightId: String?
        public let resourceCollection: ResourceCollection?

        public init(dataSource: EventDataSource? = nil, eventClass: EventClass? = nil, eventSource: String? = nil, eventTimeRange: EventTimeRange? = nil, insightId: String? = nil, resourceCollection: ResourceCollection? = nil) {
            self.dataSource = dataSource
            self.eventClass = eventClass
            self.eventSource = eventSource
            self.eventTimeRange = eventTimeRange
            self.insightId = insightId
            self.resourceCollection = resourceCollection
        }

        public func validate(name: String) throws {
            try self.validate(self.eventSource, name: "eventSource", parent: name, max: 50)
            try self.validate(self.eventSource, name: "eventSource", parent: name, min: 10)
            try self.validate(self.eventSource, name: "eventSource", parent: name, pattern: "^[a-z]+[a-z0-9]*\\.amazonaws\\.com|aws\\.events$")
            try self.validate(self.insightId, name: "insightId", parent: name, max: 100)
            try self.validate(self.insightId, name: "insightId", parent: name, min: 1)
            try self.validate(self.insightId, name: "insightId", parent: name, pattern: "^[\\w-]*$")
            try self.resourceCollection?.validate(name: "\(name).resourceCollection")
        }

        private enum CodingKeys: String, CodingKey {
            case dataSource = "DataSource"
            case eventClass = "EventClass"
            case eventSource = "EventSource"
            case eventTimeRange = "EventTimeRange"
            case insightId = "InsightId"
            case resourceCollection = "ResourceCollection"
        }
    }

    public struct ListEventsRequest: AWSEncodableShape {
        public let filters: ListEventsFilters
        public let maxResults: Int?
        public let nextToken: String?

        public init(filters: ListEventsFilters, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.filters.validate(name: "\(name).filters")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 200)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 36)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 36)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListEventsResponse: AWSDecodableShape {
        public let events: [Event]?
        public let nextToken: String?

        public init(events: [Event]? = nil, nextToken: String? = nil) {
            self.events = events
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case nextToken = "NextToken"
        }
    }

    public struct ListInsightsAnyStatusFilter: AWSEncodableShape {
        public let startTimeRange: StartTimeRange
        public let type: InsightType

        public init(startTimeRange: StartTimeRange, type: InsightType) {
            self.startTimeRange = startTimeRange
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case startTimeRange = "StartTimeRange"
            case type = "Type"
        }
    }

    public struct ListInsightsClosedStatusFilter: AWSEncodableShape {
        public let endTimeRange: EndTimeRange
        public let type: InsightType

        public init(endTimeRange: EndTimeRange, type: InsightType) {
            self.endTimeRange = endTimeRange
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case endTimeRange = "EndTimeRange"
            case type = "Type"
        }
    }

    public struct ListInsightsOngoingStatusFilter: AWSEncodableShape {
        public let type: InsightType

        public init(type: InsightType) {
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case type = "Type"
        }
    }

    public struct ListInsightsRequest: AWSEncodableShape {
        public let maxResults: Int?
        public let nextToken: String?
        public let statusFilter: ListInsightsStatusFilter

        public init(maxResults: Int? = nil, nextToken: String? = nil, statusFilter: ListInsightsStatusFilter) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.statusFilter = statusFilter
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 36)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 36)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case statusFilter = "StatusFilter"
        }
    }

    public struct ListInsightsResponse: AWSDecodableShape {
        public let nextToken: String?
        public let proactiveInsights: [ProactiveInsightSummary]?
        public let reactiveInsights: [ReactiveInsightSummary]?

        public init(nextToken: String? = nil, proactiveInsights: [ProactiveInsightSummary]? = nil, reactiveInsights: [ReactiveInsightSummary]? = nil) {
            self.nextToken = nextToken
            self.proactiveInsights = proactiveInsights
            self.reactiveInsights = reactiveInsights
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case proactiveInsights = "ProactiveInsights"
            case reactiveInsights = "ReactiveInsights"
        }
    }

    public struct ListInsightsStatusFilter: AWSEncodableShape {
        public let any: ListInsightsAnyStatusFilter?
        public let closed: ListInsightsClosedStatusFilter?
        public let ongoing: ListInsightsOngoingStatusFilter?

        public init(any: ListInsightsAnyStatusFilter? = nil, closed: ListInsightsClosedStatusFilter? = nil, ongoing: ListInsightsOngoingStatusFilter? = nil) {
            self.any = any
            self.closed = closed
            self.ongoing = ongoing
        }

        private enum CodingKeys: String, CodingKey {
            case any = "Any"
            case closed = "Closed"
            case ongoing = "Ongoing"
        }
    }

    public struct ListNotificationChannelsRequest: AWSEncodableShape {
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 36)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 36)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct ListNotificationChannelsResponse: AWSDecodableShape {
        public let channels: [NotificationChannel]?
        public let nextToken: String?

        public init(channels: [NotificationChannel]? = nil, nextToken: String? = nil) {
            self.channels = channels
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case channels = "Channels"
            case nextToken = "NextToken"
        }
    }

    public struct ListRecommendationsRequest: AWSEncodableShape {
        public let insightId: String
        public let nextToken: String?

        public init(insightId: String, nextToken: String? = nil) {
            self.insightId = insightId
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.insightId, name: "insightId", parent: name, max: 100)
            try self.validate(self.insightId, name: "insightId", parent: name, min: 1)
            try self.validate(self.insightId, name: "insightId", parent: name, pattern: "^[\\w-]*$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 36)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 36)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")
        }

        private enum CodingKeys: String, CodingKey {
            case insightId = "InsightId"
            case nextToken = "NextToken"
        }
    }

    public struct ListRecommendationsResponse: AWSDecodableShape {
        public let nextToken: String?
        public let recommendations: [Recommendation]?

        public init(nextToken: String? = nil, recommendations: [Recommendation]? = nil) {
            self.nextToken = nextToken
            self.recommendations = recommendations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case recommendations = "Recommendations"
        }
    }

    public struct NotificationChannel: AWSDecodableShape {
        public let config: NotificationChannelConfig?
        public let id: String?

        public init(config: NotificationChannelConfig? = nil, id: String? = nil) {
            self.config = config
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case config = "Config"
            case id = "Id"
        }
    }

    public struct NotificationChannelConfig: AWSEncodableShape & AWSDecodableShape {
        public let sns: SnsChannelConfig

        public init(sns: SnsChannelConfig) {
            self.sns = sns
        }

        public func validate(name: String) throws {
            try self.sns.validate(name: "\(name).sns")
        }

        private enum CodingKeys: String, CodingKey {
            case sns = "Sns"
        }
    }

    public struct OpsCenterIntegration: AWSDecodableShape {
        public let optInStatus: OptInStatus?

        public init(optInStatus: OptInStatus? = nil) {
            self.optInStatus = optInStatus
        }

        private enum CodingKeys: String, CodingKey {
            case optInStatus = "OptInStatus"
        }
    }

    public struct OpsCenterIntegrationConfig: AWSEncodableShape {
        public let optInStatus: OptInStatus?

        public init(optInStatus: OptInStatus? = nil) {
            self.optInStatus = optInStatus
        }

        private enum CodingKeys: String, CodingKey {
            case optInStatus = "OptInStatus"
        }
    }

    public struct PredictionTimeRange: AWSDecodableShape {
        @OptionalCustomCoding<UnixEpochDateCoder>
        public var endTime: Date?
        @CustomCoding<UnixEpochDateCoder>
        public var startTime: Date

        public init(endTime: Date? = nil, startTime: Date) {
            self.endTime = endTime
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case startTime = "StartTime"
        }
    }

    public struct ProactiveAnomaly: AWSDecodableShape {
        public let anomalyTimeRange: AnomalyTimeRange?
        public let associatedInsightId: String?
        public let id: String?
        public let limit: Double?
        public let predictionTimeRange: PredictionTimeRange?
        public let resourceCollection: ResourceCollection?
        public let severity: AnomalySeverity?
        public let sourceDetails: AnomalySourceDetails?
        public let status: AnomalyStatus?
        @OptionalCustomCoding<UnixEpochDateCoder>
        public var updateTime: Date?

        public init(anomalyTimeRange: AnomalyTimeRange? = nil, associatedInsightId: String? = nil, id: String? = nil, limit: Double? = nil, predictionTimeRange: PredictionTimeRange? = nil, resourceCollection: ResourceCollection? = nil, severity: AnomalySeverity? = nil, sourceDetails: AnomalySourceDetails? = nil, status: AnomalyStatus? = nil, updateTime: Date? = nil) {
            self.anomalyTimeRange = anomalyTimeRange
            self.associatedInsightId = associatedInsightId
            self.id = id
            self.limit = limit
            self.predictionTimeRange = predictionTimeRange
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.sourceDetails = sourceDetails
            self.status = status
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case anomalyTimeRange = "AnomalyTimeRange"
            case associatedInsightId = "AssociatedInsightId"
            case id = "Id"
            case limit = "Limit"
            case predictionTimeRange = "PredictionTimeRange"
            case resourceCollection = "ResourceCollection"
            case severity = "Severity"
            case sourceDetails = "SourceDetails"
            case status = "Status"
            case updateTime = "UpdateTime"
        }
    }

    public struct ProactiveAnomalySummary: AWSDecodableShape {
        public let anomalyTimeRange: AnomalyTimeRange?
        public let associatedInsightId: String?
        public let id: String?
        public let limit: Double?
        public let predictionTimeRange: PredictionTimeRange?
        public let resourceCollection: ResourceCollection?
        public let severity: AnomalySeverity?
        public let sourceDetails: AnomalySourceDetails?
        public let status: AnomalyStatus?
        @OptionalCustomCoding<UnixEpochDateCoder>
        public var updateTime: Date?

        public init(anomalyTimeRange: AnomalyTimeRange? = nil, associatedInsightId: String? = nil, id: String? = nil, limit: Double? = nil, predictionTimeRange: PredictionTimeRange? = nil, resourceCollection: ResourceCollection? = nil, severity: AnomalySeverity? = nil, sourceDetails: AnomalySourceDetails? = nil, status: AnomalyStatus? = nil, updateTime: Date? = nil) {
            self.anomalyTimeRange = anomalyTimeRange
            self.associatedInsightId = associatedInsightId
            self.id = id
            self.limit = limit
            self.predictionTimeRange = predictionTimeRange
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.sourceDetails = sourceDetails
            self.status = status
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case anomalyTimeRange = "AnomalyTimeRange"
            case associatedInsightId = "AssociatedInsightId"
            case id = "Id"
            case limit = "Limit"
            case predictionTimeRange = "PredictionTimeRange"
            case resourceCollection = "ResourceCollection"
            case severity = "Severity"
            case sourceDetails = "SourceDetails"
            case status = "Status"
            case updateTime = "UpdateTime"
        }
    }

    public struct ProactiveInsight: AWSDecodableShape {
        public let id: String?
        public let insightTimeRange: InsightTimeRange?
        public let name: String?
        public let predictionTimeRange: PredictionTimeRange?
        public let resourceCollection: ResourceCollection?
        public let severity: InsightSeverity?
        public let ssmOpsItemId: String?
        public let status: InsightStatus?

        public init(id: String? = nil, insightTimeRange: InsightTimeRange? = nil, name: String? = nil, predictionTimeRange: PredictionTimeRange? = nil, resourceCollection: ResourceCollection? = nil, severity: InsightSeverity? = nil, ssmOpsItemId: String? = nil, status: InsightStatus? = nil) {
            self.id = id
            self.insightTimeRange = insightTimeRange
            self.name = name
            self.predictionTimeRange = predictionTimeRange
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.ssmOpsItemId = ssmOpsItemId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case insightTimeRange = "InsightTimeRange"
            case name = "Name"
            case predictionTimeRange = "PredictionTimeRange"
            case resourceCollection = "ResourceCollection"
            case severity = "Severity"
            case ssmOpsItemId = "SsmOpsItemId"
            case status = "Status"
        }
    }

    public struct ProactiveInsightSummary: AWSDecodableShape {
        public let id: String?
        public let insightTimeRange: InsightTimeRange?
        public let name: String?
        public let predictionTimeRange: PredictionTimeRange?
        public let resourceCollection: ResourceCollection?
        public let severity: InsightSeverity?
        public let status: InsightStatus?

        public init(id: String? = nil, insightTimeRange: InsightTimeRange? = nil, name: String? = nil, predictionTimeRange: PredictionTimeRange? = nil, resourceCollection: ResourceCollection? = nil, severity: InsightSeverity? = nil, status: InsightStatus? = nil) {
            self.id = id
            self.insightTimeRange = insightTimeRange
            self.name = name
            self.predictionTimeRange = predictionTimeRange
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case insightTimeRange = "InsightTimeRange"
            case name = "Name"
            case predictionTimeRange = "PredictionTimeRange"
            case resourceCollection = "ResourceCollection"
            case severity = "Severity"
            case status = "Status"
        }
    }

    public struct PutFeedbackRequest: AWSEncodableShape {
        public let insightFeedback: InsightFeedback?

        public init(insightFeedback: InsightFeedback? = nil) {
            self.insightFeedback = insightFeedback
        }

        public func validate(name: String) throws {
            try self.insightFeedback?.validate(name: "\(name).insightFeedback")
        }

        private enum CodingKeys: String, CodingKey {
            case insightFeedback = "InsightFeedback"
        }
    }

    public struct PutFeedbackResponse: AWSDecodableShape {
        public init() {}
    }

    public struct ReactiveAnomaly: AWSDecodableShape {
        public let anomalyTimeRange: AnomalyTimeRange?
        public let associatedInsightId: String?
        public let id: String?
        public let resourceCollection: ResourceCollection?
        public let severity: AnomalySeverity?
        public let sourceDetails: AnomalySourceDetails?
        public let status: AnomalyStatus?

        public init(anomalyTimeRange: AnomalyTimeRange? = nil, associatedInsightId: String? = nil, id: String? = nil, resourceCollection: ResourceCollection? = nil, severity: AnomalySeverity? = nil, sourceDetails: AnomalySourceDetails? = nil, status: AnomalyStatus? = nil) {
            self.anomalyTimeRange = anomalyTimeRange
            self.associatedInsightId = associatedInsightId
            self.id = id
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.sourceDetails = sourceDetails
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case anomalyTimeRange = "AnomalyTimeRange"
            case associatedInsightId = "AssociatedInsightId"
            case id = "Id"
            case resourceCollection = "ResourceCollection"
            case severity = "Severity"
            case sourceDetails = "SourceDetails"
            case status = "Status"
        }
    }

    public struct ReactiveAnomalySummary: AWSDecodableShape {
        public let anomalyTimeRange: AnomalyTimeRange?
        public let associatedInsightId: String?
        public let id: String?
        public let resourceCollection: ResourceCollection?
        public let severity: AnomalySeverity?
        public let sourceDetails: AnomalySourceDetails?
        public let status: AnomalyStatus?

        public init(anomalyTimeRange: AnomalyTimeRange? = nil, associatedInsightId: String? = nil, id: String? = nil, resourceCollection: ResourceCollection? = nil, severity: AnomalySeverity? = nil, sourceDetails: AnomalySourceDetails? = nil, status: AnomalyStatus? = nil) {
            self.anomalyTimeRange = anomalyTimeRange
            self.associatedInsightId = associatedInsightId
            self.id = id
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.sourceDetails = sourceDetails
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case anomalyTimeRange = "AnomalyTimeRange"
            case associatedInsightId = "AssociatedInsightId"
            case id = "Id"
            case resourceCollection = "ResourceCollection"
            case severity = "Severity"
            case sourceDetails = "SourceDetails"
            case status = "Status"
        }
    }

    public struct ReactiveInsight: AWSDecodableShape {
        public let id: String?
        public let insightTimeRange: InsightTimeRange?
        public let name: String?
        public let resourceCollection: ResourceCollection?
        public let severity: InsightSeverity?
        public let ssmOpsItemId: String?
        public let status: InsightStatus?

        public init(id: String? = nil, insightTimeRange: InsightTimeRange? = nil, name: String? = nil, resourceCollection: ResourceCollection? = nil, severity: InsightSeverity? = nil, ssmOpsItemId: String? = nil, status: InsightStatus? = nil) {
            self.id = id
            self.insightTimeRange = insightTimeRange
            self.name = name
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.ssmOpsItemId = ssmOpsItemId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case insightTimeRange = "InsightTimeRange"
            case name = "Name"
            case resourceCollection = "ResourceCollection"
            case severity = "Severity"
            case ssmOpsItemId = "SsmOpsItemId"
            case status = "Status"
        }
    }

    public struct ReactiveInsightSummary: AWSDecodableShape {
        public let id: String?
        public let insightTimeRange: InsightTimeRange?
        public let name: String?
        public let resourceCollection: ResourceCollection?
        public let severity: InsightSeverity?
        public let status: InsightStatus?

        public init(id: String? = nil, insightTimeRange: InsightTimeRange? = nil, name: String? = nil, resourceCollection: ResourceCollection? = nil, severity: InsightSeverity? = nil, status: InsightStatus? = nil) {
            self.id = id
            self.insightTimeRange = insightTimeRange
            self.name = name
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case insightTimeRange = "InsightTimeRange"
            case name = "Name"
            case resourceCollection = "ResourceCollection"
            case severity = "Severity"
            case status = "Status"
        }
    }

    public struct Recommendation: AWSDecodableShape {
        public let description: String?
        public let link: String?
        public let name: String?
        public let reason: String?
        public let relatedAnomalies: [RecommendationRelatedAnomaly]?
        public let relatedEvents: [RecommendationRelatedEvent]?

        public init(description: String? = nil, link: String? = nil, name: String? = nil, reason: String? = nil, relatedAnomalies: [RecommendationRelatedAnomaly]? = nil, relatedEvents: [RecommendationRelatedEvent]? = nil) {
            self.description = description
            self.link = link
            self.name = name
            self.reason = reason
            self.relatedAnomalies = relatedAnomalies
            self.relatedEvents = relatedEvents
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case link = "Link"
            case name = "Name"
            case reason = "Reason"
            case relatedAnomalies = "RelatedAnomalies"
            case relatedEvents = "RelatedEvents"
        }
    }

    public struct RecommendationRelatedAnomaly: AWSDecodableShape {
        public let resources: [RecommendationRelatedAnomalyResource]?
        public let sourceDetails: [RecommendationRelatedAnomalySourceDetail]?

        public init(resources: [RecommendationRelatedAnomalyResource]? = nil, sourceDetails: [RecommendationRelatedAnomalySourceDetail]? = nil) {
            self.resources = resources
            self.sourceDetails = sourceDetails
        }

        private enum CodingKeys: String, CodingKey {
            case resources = "Resources"
            case sourceDetails = "SourceDetails"
        }
    }

    public struct RecommendationRelatedAnomalyResource: AWSDecodableShape {
        public let name: String?
        public let type: String?

        public init(name: String? = nil, type: String? = nil) {
            self.name = name
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
        }
    }

    public struct RecommendationRelatedAnomalySourceDetail: AWSDecodableShape {
        public let cloudWatchMetrics: [RecommendationRelatedCloudWatchMetricsSourceDetail]?

        public init(cloudWatchMetrics: [RecommendationRelatedCloudWatchMetricsSourceDetail]? = nil) {
            self.cloudWatchMetrics = cloudWatchMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchMetrics = "CloudWatchMetrics"
        }
    }

    public struct RecommendationRelatedCloudWatchMetricsSourceDetail: AWSDecodableShape {
        public let metricName: String?
        public let namespace: String?

        public init(metricName: String? = nil, namespace: String? = nil) {
            self.metricName = metricName
            self.namespace = namespace
        }

        private enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case namespace = "Namespace"
        }
    }

    public struct RecommendationRelatedEvent: AWSDecodableShape {
        public let name: String?
        public let resources: [RecommendationRelatedEventResource]?

        public init(name: String? = nil, resources: [RecommendationRelatedEventResource]? = nil) {
            self.name = name
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case resources = "Resources"
        }
    }

    public struct RecommendationRelatedEventResource: AWSDecodableShape {
        public let name: String?
        public let type: String?

        public init(name: String? = nil, type: String? = nil) {
            self.name = name
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case type = "Type"
        }
    }

    public struct RemoveNotificationChannelRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "id", location: .uri(locationName: "Id"))
        ]

        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct RemoveNotificationChannelResponse: AWSDecodableShape {
        public init() {}
    }

    public struct ResourceCollection: AWSEncodableShape & AWSDecodableShape {
        public let cloudFormation: CloudFormationCollection?

        public init(cloudFormation: CloudFormationCollection? = nil) {
            self.cloudFormation = cloudFormation
        }

        public func validate(name: String) throws {
            try self.cloudFormation?.validate(name: "\(name).cloudFormation")
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFormation = "CloudFormation"
        }
    }

    public struct ResourceCollectionFilter: AWSDecodableShape {
        public let cloudFormation: CloudFormationCollectionFilter?

        public init(cloudFormation: CloudFormationCollectionFilter? = nil) {
            self.cloudFormation = cloudFormation
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFormation = "CloudFormation"
        }
    }

    public struct SearchInsightsFilters: AWSEncodableShape {
        public let resourceCollection: ResourceCollection?
        public let severities: [InsightSeverity]?
        public let statuses: [InsightStatus]?

        public init(resourceCollection: ResourceCollection? = nil, severities: [InsightSeverity]? = nil, statuses: [InsightStatus]? = nil) {
            self.resourceCollection = resourceCollection
            self.severities = severities
            self.statuses = statuses
        }

        public func validate(name: String) throws {
            try self.resourceCollection?.validate(name: "\(name).resourceCollection")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceCollection = "ResourceCollection"
            case severities = "Severities"
            case statuses = "Statuses"
        }
    }

    public struct SearchInsightsRequest: AWSEncodableShape {
        public let filters: SearchInsightsFilters?
        public let maxResults: Int?
        public let nextToken: String?
        public let startTimeRange: StartTimeRange
        public let type: InsightType

        public init(filters: SearchInsightsFilters? = nil, maxResults: Int? = nil, nextToken: String? = nil, startTimeRange: StartTimeRange, type: InsightType) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.startTimeRange = startTimeRange
            self.type = type
        }

        public func validate(name: String) throws {
            try self.filters?.validate(name: "\(name).filters")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 36)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 36)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case startTimeRange = "StartTimeRange"
            case type = "Type"
        }
    }

    public struct SearchInsightsResponse: AWSDecodableShape {
        public let nextToken: String?
        public let proactiveInsights: [ProactiveInsightSummary]?
        public let reactiveInsights: [ReactiveInsightSummary]?

        public init(nextToken: String? = nil, proactiveInsights: [ProactiveInsightSummary]? = nil, reactiveInsights: [ReactiveInsightSummary]? = nil) {
            self.nextToken = nextToken
            self.proactiveInsights = proactiveInsights
            self.reactiveInsights = reactiveInsights
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case proactiveInsights = "ProactiveInsights"
            case reactiveInsights = "ReactiveInsights"
        }
    }

    public struct ServiceIntegrationConfig: AWSDecodableShape {
        public let opsCenter: OpsCenterIntegration?

        public init(opsCenter: OpsCenterIntegration? = nil) {
            self.opsCenter = opsCenter
        }

        private enum CodingKeys: String, CodingKey {
            case opsCenter = "OpsCenter"
        }
    }

    public struct SnsChannelConfig: AWSEncodableShape & AWSDecodableShape {
        public let topicArn: String?

        public init(topicArn: String? = nil) {
            self.topicArn = topicArn
        }

        public func validate(name: String) throws {
            try self.validate(self.topicArn, name: "topicArn", parent: name, max: 1024)
            try self.validate(self.topicArn, name: "topicArn", parent: name, min: 36)
            try self.validate(self.topicArn, name: "topicArn", parent: name, pattern: "^arn:aws[a-z0-9-]*:sns:[a-z0-9-]+:\\d{12}:[^:]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
        }
    }

    public struct StartTimeRange: AWSEncodableShape {
        @OptionalCustomCoding<UnixEpochDateCoder>
        public var fromTime: Date?
        @OptionalCustomCoding<UnixEpochDateCoder>
        public var toTime: Date?

        public init(fromTime: Date? = nil, toTime: Date? = nil) {
            self.fromTime = fromTime
            self.toTime = toTime
        }

        private enum CodingKeys: String, CodingKey {
            case fromTime = "FromTime"
            case toTime = "ToTime"
        }
    }

    public struct UpdateCloudFormationCollectionFilter: AWSEncodableShape {
        public let stackNames: [String]?

        public init(stackNames: [String]? = nil) {
            self.stackNames = stackNames
        }

        public func validate(name: String) throws {
            try self.stackNames?.forEach {
                try validate($0, name: "stackNames[]", parent: name, max: 128)
                try validate($0, name: "stackNames[]", parent: name, min: 1)
                try validate($0, name: "stackNames[]", parent: name, pattern: "^[a-zA-Z*]+[a-zA-Z0-9-]*$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case stackNames = "StackNames"
        }
    }

    public struct UpdateResourceCollectionFilter: AWSEncodableShape {
        public let cloudFormation: UpdateCloudFormationCollectionFilter?

        public init(cloudFormation: UpdateCloudFormationCollectionFilter? = nil) {
            self.cloudFormation = cloudFormation
        }

        public func validate(name: String) throws {
            try self.cloudFormation?.validate(name: "\(name).cloudFormation")
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFormation = "CloudFormation"
        }
    }

    public struct UpdateResourceCollectionRequest: AWSEncodableShape {
        public let action: UpdateResourceCollectionAction
        public let resourceCollection: UpdateResourceCollectionFilter

        public init(action: UpdateResourceCollectionAction, resourceCollection: UpdateResourceCollectionFilter) {
            self.action = action
            self.resourceCollection = resourceCollection
        }

        public func validate(name: String) throws {
            try self.resourceCollection.validate(name: "\(name).resourceCollection")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case resourceCollection = "ResourceCollection"
        }
    }

    public struct UpdateResourceCollectionResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateServiceIntegrationConfig: AWSEncodableShape {
        public let opsCenter: OpsCenterIntegrationConfig?

        public init(opsCenter: OpsCenterIntegrationConfig? = nil) {
            self.opsCenter = opsCenter
        }

        private enum CodingKeys: String, CodingKey {
            case opsCenter = "OpsCenter"
        }
    }

    public struct UpdateServiceIntegrationRequest: AWSEncodableShape {
        public let serviceIntegration: UpdateServiceIntegrationConfig

        public init(serviceIntegration: UpdateServiceIntegrationConfig) {
            self.serviceIntegration = serviceIntegration
        }

        private enum CodingKeys: String, CodingKey {
            case serviceIntegration = "ServiceIntegration"
        }
    }

    public struct UpdateServiceIntegrationResponse: AWSDecodableShape {
        public init() {}
    }
}
