//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for DeviceFarm
public enum DeviceFarmErrorType: AWSErrorType {
    case argumentException(message: String?)
    case cannotDeleteException(message: String?)
    case idempotencyException(message: String?)
    case internalServiceException(message: String?)
    case invalidOperationException(message: String?)
    case limitExceededException(message: String?)
    case notEligibleException(message: String?)
    case notFoundException(message: String?)
    case serviceAccountException(message: String?)
    case tagOperationException(message: String?)
    case tagPolicyException(message: String?)
    case tooManyTagsException(message: String?)
}

extension DeviceFarmErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "ArgumentException":
            self = .argumentException(message: message)
        case "CannotDeleteException":
            self = .cannotDeleteException(message: message)
        case "IdempotencyException":
            self = .idempotencyException(message: message)
        case "InternalServiceException":
            self = .internalServiceException(message: message)
        case "InvalidOperationException":
            self = .invalidOperationException(message: message)
        case "LimitExceededException":
            self = .limitExceededException(message: message)
        case "NotEligibleException":
            self = .notEligibleException(message: message)
        case "NotFoundException":
            self = .notFoundException(message: message)
        case "ServiceAccountException":
            self = .serviceAccountException(message: message)
        case "TagOperationException":
            self = .tagOperationException(message: message)
        case "TagPolicyException":
            self = .tagPolicyException(message: message)
        case "TooManyTagsException":
            self = .tooManyTagsException(message: message)
        default:
            return nil
        }
    }
}

extension DeviceFarmErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .argumentException(let message):
            return "ArgumentException: \(message ?? "")"
        case .cannotDeleteException(let message):
            return "CannotDeleteException: \(message ?? "")"
        case .idempotencyException(let message):
            return "IdempotencyException: \(message ?? "")"
        case .internalServiceException(let message):
            return "InternalServiceException: \(message ?? "")"
        case .invalidOperationException(let message):
            return "InvalidOperationException: \(message ?? "")"
        case .limitExceededException(let message):
            return "LimitExceededException: \(message ?? "")"
        case .notEligibleException(let message):
            return "NotEligibleException: \(message ?? "")"
        case .notFoundException(let message):
            return "NotFoundException: \(message ?? "")"
        case .serviceAccountException(let message):
            return "ServiceAccountException: \(message ?? "")"
        case .tagOperationException(let message):
            return "TagOperationException: \(message ?? "")"
        case .tagPolicyException(let message):
            return "TagPolicyException: \(message ?? "")"
        case .tooManyTagsException(let message):
            return "TooManyTagsException: \(message ?? "")"
        }
    }
}
