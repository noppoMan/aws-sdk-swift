//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for SNS
public struct SNSErrorType: AWSErrorType {
    enum Code: String {
        case authorizationErrorException = "AuthorizationError"
        case concurrentAccessException = "ConcurrentAccess"
        case endpointDisabledException = "EndpointDisabled"
        case filterPolicyLimitExceededException = "FilterPolicyLimitExceeded"
        case internalErrorException = "InternalError"
        case invalidParameterException = "InvalidParameter"
        case invalidParameterValueException = "ParameterValueInvalid"
        case invalidSecurityException = "InvalidSecurity"
        case kMSAccessDeniedException = "KMSAccessDenied"
        case kMSDisabledException = "KMSDisabled"
        case kMSInvalidStateException = "KMSInvalidState"
        case kMSNotFoundException = "KMSNotFound"
        case kMSOptInRequired = "KMSOptInRequired"
        case kMSThrottlingException = "KMSThrottling"
        case notFoundException = "NotFound"
        case platformApplicationDisabledException = "PlatformApplicationDisabled"
        case resourceNotFoundException = "ResourceNotFound"
        case staleTagException = "StaleTag"
        case subscriptionLimitExceededException = "SubscriptionLimitExceeded"
        case tagLimitExceededException = "TagLimitExceeded"
        case tagPolicyException = "TagPolicy"
        case throttledException = "Throttled"
        case topicLimitExceededException = "TopicLimitExceeded"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize SNS
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var authorizationErrorException: Self { .init(.authorizationErrorException) }
    public static var concurrentAccessException: Self { .init(.concurrentAccessException) }
    public static var endpointDisabledException: Self { .init(.endpointDisabledException) }
    public static var filterPolicyLimitExceededException: Self { .init(.filterPolicyLimitExceededException) }
    public static var internalErrorException: Self { .init(.internalErrorException) }
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    public static var invalidParameterValueException: Self { .init(.invalidParameterValueException) }
    public static var invalidSecurityException: Self { .init(.invalidSecurityException) }
    public static var kMSAccessDeniedException: Self { .init(.kMSAccessDeniedException) }
    public static var kMSDisabledException: Self { .init(.kMSDisabledException) }
    public static var kMSInvalidStateException: Self { .init(.kMSInvalidStateException) }
    public static var kMSNotFoundException: Self { .init(.kMSNotFoundException) }
    public static var kMSOptInRequired: Self { .init(.kMSOptInRequired) }
    public static var kMSThrottlingException: Self { .init(.kMSThrottlingException) }
    public static var notFoundException: Self { .init(.notFoundException) }
    public static var platformApplicationDisabledException: Self { .init(.platformApplicationDisabledException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var staleTagException: Self { .init(.staleTagException) }
    public static var subscriptionLimitExceededException: Self { .init(.subscriptionLimitExceededException) }
    public static var tagLimitExceededException: Self { .init(.tagLimitExceededException) }
    public static var tagPolicyException: Self { .init(.tagPolicyException) }
    public static var throttledException: Self { .init(.throttledException) }
    public static var topicLimitExceededException: Self { .init(.topicLimitExceededException) }
}

extension SNSErrorType: Equatable {
    public static func == (lhs: SNSErrorType, rhs: SNSErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension SNSErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
