//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Snowball
public struct SnowballErrorType: AWSErrorType {
    enum Code: String {
        case clusterLimitExceededException = "ClusterLimitExceededException"
        case ec2RequestFailedException = "Ec2RequestFailedException"
        case invalidAddressException = "InvalidAddressException"
        case invalidInputCombinationException = "InvalidInputCombinationException"
        case invalidJobStateException = "InvalidJobStateException"
        case invalidNextTokenException = "InvalidNextTokenException"
        case invalidResourceException = "InvalidResourceException"
        case kMSRequestFailedException = "KMSRequestFailedException"
        case unsupportedAddressException = "UnsupportedAddressException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize Snowball
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var clusterLimitExceededException: Self { .init(.clusterLimitExceededException) }
    public static var ec2RequestFailedException: Self { .init(.ec2RequestFailedException) }
    public static var invalidAddressException: Self { .init(.invalidAddressException) }
    public static var invalidInputCombinationException: Self { .init(.invalidInputCombinationException) }
    public static var invalidJobStateException: Self { .init(.invalidJobStateException) }
    public static var invalidNextTokenException: Self { .init(.invalidNextTokenException) }
    public static var invalidResourceException: Self { .init(.invalidResourceException) }
    public static var kMSRequestFailedException: Self { .init(.kMSRequestFailedException) }
    public static var unsupportedAddressException: Self { .init(.unsupportedAddressException) }
}

extension SnowballErrorType: Equatable {
    public static func == (lhs: SnowballErrorType, rhs: SnowballErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension SnowballErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
