//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

@_exported import SotoCore

import SotoCore

// MARK: Waiters

extension MediaConnect {
    public func waitUntilFlowActive(
        _ input: DescribeFlowRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSPathMatcher(path: \DescribeFlowResponse.flow?.status, expected: .active)),
                .init(state: .retry, matcher: AWSPathMatcher(path: \DescribeFlowResponse.flow?.status, expected: .starting)),
                .init(state: .retry, matcher: AWSPathMatcher(path: \DescribeFlowResponse.flow?.status, expected: .updating)),
                .init(state: .retry, matcher: AWSErrorStatusMatcher(500)),
                .init(state: .retry, matcher: AWSErrorStatusMatcher(503)),
                .init(state: .failure, matcher: AWSPathMatcher(path: \DescribeFlowResponse.flow?.status, expected: .error)),
            ],
            minDelayTime: .seconds(3),
            command: describeFlow
        )
        return self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func waitUntilFlowDeleted(
        _ input: DescribeFlowRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSErrorStatusMatcher(404)),
                .init(state: .retry, matcher: AWSPathMatcher(path: \DescribeFlowResponse.flow?.status, expected: .deleting)),
                .init(state: .retry, matcher: AWSErrorStatusMatcher(500)),
                .init(state: .retry, matcher: AWSErrorStatusMatcher(503)),
                .init(state: .failure, matcher: AWSPathMatcher(path: \DescribeFlowResponse.flow?.status, expected: .error)),
            ],
            minDelayTime: .seconds(3),
            command: describeFlow
        )
        return self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func waitUntilFlowStandby(
        _ input: DescribeFlowRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSPathMatcher(path: \DescribeFlowResponse.flow?.status, expected: .standby)),
                .init(state: .retry, matcher: AWSPathMatcher(path: \DescribeFlowResponse.flow?.status, expected: .stopping)),
                .init(state: .retry, matcher: AWSErrorStatusMatcher(500)),
                .init(state: .retry, matcher: AWSErrorStatusMatcher(503)),
                .init(state: .failure, matcher: AWSPathMatcher(path: \DescribeFlowResponse.flow?.status, expected: .error)),
            ],
            minDelayTime: .seconds(3),
            command: describeFlow
        )
        return self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }
}
