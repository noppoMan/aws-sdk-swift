//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for CognitoIdentityProvider
public enum CognitoIdentityProviderErrorType: AWSErrorType {
    case aliasExistsException(message: String?)
    case codeDeliveryFailureException(message: String?)
    case codeMismatchException(message: String?)
    case concurrentModificationException(message: String?)
    case duplicateProviderException(message: String?)
    case enableSoftwareTokenMFAException(message: String?)
    case expiredCodeException(message: String?)
    case groupExistsException(message: String?)
    case internalErrorException(message: String?)
    case invalidEmailRoleAccessPolicyException(message: String?)
    case invalidLambdaResponseException(message: String?)
    case invalidOAuthFlowException(message: String?)
    case invalidParameterException(message: String?)
    case invalidPasswordException(message: String?)
    case invalidSmsRoleAccessPolicyException(message: String?)
    case invalidSmsRoleTrustRelationshipException(message: String?)
    case invalidUserPoolConfigurationException(message: String?)
    case limitExceededException(message: String?)
    case mFAMethodNotFoundException(message: String?)
    case notAuthorizedException(message: String?)
    case passwordResetRequiredException(message: String?)
    case preconditionNotMetException(message: String?)
    case resourceNotFoundException(message: String?)
    case scopeDoesNotExistException(message: String?)
    case softwareTokenMFANotFoundException(message: String?)
    case tooManyFailedAttemptsException(message: String?)
    case tooManyRequestsException(message: String?)
    case unexpectedLambdaException(message: String?)
    case unsupportedIdentityProviderException(message: String?)
    case unsupportedUserStateException(message: String?)
    case userImportInProgressException(message: String?)
    case userLambdaValidationException(message: String?)
    case userNotConfirmedException(message: String?)
    case userNotFoundException(message: String?)
    case userPoolAddOnNotEnabledException(message: String?)
    case userPoolTaggingException(message: String?)
    case usernameExistsException(message: String?)
}

extension CognitoIdentityProviderErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "AliasExistsException":
            self = .aliasExistsException(message: message)
        case "CodeDeliveryFailureException":
            self = .codeDeliveryFailureException(message: message)
        case "CodeMismatchException":
            self = .codeMismatchException(message: message)
        case "ConcurrentModificationException":
            self = .concurrentModificationException(message: message)
        case "DuplicateProviderException":
            self = .duplicateProviderException(message: message)
        case "EnableSoftwareTokenMFAException":
            self = .enableSoftwareTokenMFAException(message: message)
        case "ExpiredCodeException":
            self = .expiredCodeException(message: message)
        case "GroupExistsException":
            self = .groupExistsException(message: message)
        case "InternalErrorException":
            self = .internalErrorException(message: message)
        case "InvalidEmailRoleAccessPolicyException":
            self = .invalidEmailRoleAccessPolicyException(message: message)
        case "InvalidLambdaResponseException":
            self = .invalidLambdaResponseException(message: message)
        case "InvalidOAuthFlowException":
            self = .invalidOAuthFlowException(message: message)
        case "InvalidParameterException":
            self = .invalidParameterException(message: message)
        case "InvalidPasswordException":
            self = .invalidPasswordException(message: message)
        case "InvalidSmsRoleAccessPolicyException":
            self = .invalidSmsRoleAccessPolicyException(message: message)
        case "InvalidSmsRoleTrustRelationshipException":
            self = .invalidSmsRoleTrustRelationshipException(message: message)
        case "InvalidUserPoolConfigurationException":
            self = .invalidUserPoolConfigurationException(message: message)
        case "LimitExceededException":
            self = .limitExceededException(message: message)
        case "MFAMethodNotFoundException":
            self = .mFAMethodNotFoundException(message: message)
        case "NotAuthorizedException":
            self = .notAuthorizedException(message: message)
        case "PasswordResetRequiredException":
            self = .passwordResetRequiredException(message: message)
        case "PreconditionNotMetException":
            self = .preconditionNotMetException(message: message)
        case "ResourceNotFoundException":
            self = .resourceNotFoundException(message: message)
        case "ScopeDoesNotExistException":
            self = .scopeDoesNotExistException(message: message)
        case "SoftwareTokenMFANotFoundException":
            self = .softwareTokenMFANotFoundException(message: message)
        case "TooManyFailedAttemptsException":
            self = .tooManyFailedAttemptsException(message: message)
        case "TooManyRequestsException":
            self = .tooManyRequestsException(message: message)
        case "UnexpectedLambdaException":
            self = .unexpectedLambdaException(message: message)
        case "UnsupportedIdentityProviderException":
            self = .unsupportedIdentityProviderException(message: message)
        case "UnsupportedUserStateException":
            self = .unsupportedUserStateException(message: message)
        case "UserImportInProgressException":
            self = .userImportInProgressException(message: message)
        case "UserLambdaValidationException":
            self = .userLambdaValidationException(message: message)
        case "UserNotConfirmedException":
            self = .userNotConfirmedException(message: message)
        case "UserNotFoundException":
            self = .userNotFoundException(message: message)
        case "UserPoolAddOnNotEnabledException":
            self = .userPoolAddOnNotEnabledException(message: message)
        case "UserPoolTaggingException":
            self = .userPoolTaggingException(message: message)
        case "UsernameExistsException":
            self = .usernameExistsException(message: message)
        default:
            return nil
        }
    }
}

extension CognitoIdentityProviderErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .aliasExistsException(let message):
            return "AliasExistsException: \(message ?? "")"
        case .codeDeliveryFailureException(let message):
            return "CodeDeliveryFailureException: \(message ?? "")"
        case .codeMismatchException(let message):
            return "CodeMismatchException: \(message ?? "")"
        case .concurrentModificationException(let message):
            return "ConcurrentModificationException: \(message ?? "")"
        case .duplicateProviderException(let message):
            return "DuplicateProviderException: \(message ?? "")"
        case .enableSoftwareTokenMFAException(let message):
            return "EnableSoftwareTokenMFAException: \(message ?? "")"
        case .expiredCodeException(let message):
            return "ExpiredCodeException: \(message ?? "")"
        case .groupExistsException(let message):
            return "GroupExistsException: \(message ?? "")"
        case .internalErrorException(let message):
            return "InternalErrorException: \(message ?? "")"
        case .invalidEmailRoleAccessPolicyException(let message):
            return "InvalidEmailRoleAccessPolicyException: \(message ?? "")"
        case .invalidLambdaResponseException(let message):
            return "InvalidLambdaResponseException: \(message ?? "")"
        case .invalidOAuthFlowException(let message):
            return "InvalidOAuthFlowException: \(message ?? "")"
        case .invalidParameterException(let message):
            return "InvalidParameterException: \(message ?? "")"
        case .invalidPasswordException(let message):
            return "InvalidPasswordException: \(message ?? "")"
        case .invalidSmsRoleAccessPolicyException(let message):
            return "InvalidSmsRoleAccessPolicyException: \(message ?? "")"
        case .invalidSmsRoleTrustRelationshipException(let message):
            return "InvalidSmsRoleTrustRelationshipException: \(message ?? "")"
        case .invalidUserPoolConfigurationException(let message):
            return "InvalidUserPoolConfigurationException: \(message ?? "")"
        case .limitExceededException(let message):
            return "LimitExceededException: \(message ?? "")"
        case .mFAMethodNotFoundException(let message):
            return "MFAMethodNotFoundException: \(message ?? "")"
        case .notAuthorizedException(let message):
            return "NotAuthorizedException: \(message ?? "")"
        case .passwordResetRequiredException(let message):
            return "PasswordResetRequiredException: \(message ?? "")"
        case .preconditionNotMetException(let message):
            return "PreconditionNotMetException: \(message ?? "")"
        case .resourceNotFoundException(let message):
            return "ResourceNotFoundException: \(message ?? "")"
        case .scopeDoesNotExistException(let message):
            return "ScopeDoesNotExistException: \(message ?? "")"
        case .softwareTokenMFANotFoundException(let message):
            return "SoftwareTokenMFANotFoundException: \(message ?? "")"
        case .tooManyFailedAttemptsException(let message):
            return "TooManyFailedAttemptsException: \(message ?? "")"
        case .tooManyRequestsException(let message):
            return "TooManyRequestsException: \(message ?? "")"
        case .unexpectedLambdaException(let message):
            return "UnexpectedLambdaException: \(message ?? "")"
        case .unsupportedIdentityProviderException(let message):
            return "UnsupportedIdentityProviderException: \(message ?? "")"
        case .unsupportedUserStateException(let message):
            return "UnsupportedUserStateException: \(message ?? "")"
        case .userImportInProgressException(let message):
            return "UserImportInProgressException: \(message ?? "")"
        case .userLambdaValidationException(let message):
            return "UserLambdaValidationException: \(message ?? "")"
        case .userNotConfirmedException(let message):
            return "UserNotConfirmedException: \(message ?? "")"
        case .userNotFoundException(let message):
            return "UserNotFoundException: \(message ?? "")"
        case .userPoolAddOnNotEnabledException(let message):
            return "UserPoolAddOnNotEnabledException: \(message ?? "")"
        case .userPoolTaggingException(let message):
            return "UserPoolTaggingException: \(message ?? "")"
        case .usernameExistsException(let message):
            return "UsernameExistsException: \(message ?? "")"
        }
    }
}
