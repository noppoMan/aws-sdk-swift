//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for CognitoIdentityProvider
public struct CognitoIdentityProviderErrorType: AWSErrorType {
    enum Code: String {
        case aliasExistsException = "AliasExistsException"
        case codeDeliveryFailureException = "CodeDeliveryFailureException"
        case codeMismatchException = "CodeMismatchException"
        case concurrentModificationException = "ConcurrentModificationException"
        case duplicateProviderException = "DuplicateProviderException"
        case enableSoftwareTokenMFAException = "EnableSoftwareTokenMFAException"
        case expiredCodeException = "ExpiredCodeException"
        case groupExistsException = "GroupExistsException"
        case internalErrorException = "InternalErrorException"
        case invalidEmailRoleAccessPolicyException = "InvalidEmailRoleAccessPolicyException"
        case invalidLambdaResponseException = "InvalidLambdaResponseException"
        case invalidOAuthFlowException = "InvalidOAuthFlowException"
        case invalidParameterException = "InvalidParameterException"
        case invalidPasswordException = "InvalidPasswordException"
        case invalidSmsRoleAccessPolicyException = "InvalidSmsRoleAccessPolicyException"
        case invalidSmsRoleTrustRelationshipException = "InvalidSmsRoleTrustRelationshipException"
        case invalidUserPoolConfigurationException = "InvalidUserPoolConfigurationException"
        case limitExceededException = "LimitExceededException"
        case mFAMethodNotFoundException = "MFAMethodNotFoundException"
        case notAuthorizedException = "NotAuthorizedException"
        case passwordResetRequiredException = "PasswordResetRequiredException"
        case preconditionNotMetException = "PreconditionNotMetException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case scopeDoesNotExistException = "ScopeDoesNotExistException"
        case softwareTokenMFANotFoundException = "SoftwareTokenMFANotFoundException"
        case tooManyFailedAttemptsException = "TooManyFailedAttemptsException"
        case tooManyRequestsException = "TooManyRequestsException"
        case unexpectedLambdaException = "UnexpectedLambdaException"
        case unsupportedIdentityProviderException = "UnsupportedIdentityProviderException"
        case unsupportedUserStateException = "UnsupportedUserStateException"
        case userImportInProgressException = "UserImportInProgressException"
        case userLambdaValidationException = "UserLambdaValidationException"
        case userNotConfirmedException = "UserNotConfirmedException"
        case userNotFoundException = "UserNotFoundException"
        case userPoolAddOnNotEnabledException = "UserPoolAddOnNotEnabledException"
        case userPoolTaggingException = "UserPoolTaggingException"
        case usernameExistsException = "UsernameExistsException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var aliasExistsException: Self { .init(.aliasExistsException) }
    public static var codeDeliveryFailureException: Self { .init(.codeDeliveryFailureException) }
    public static var codeMismatchException: Self { .init(.codeMismatchException) }
    public static var concurrentModificationException: Self { .init(.concurrentModificationException) }
    public static var duplicateProviderException: Self { .init(.duplicateProviderException) }
    public static var enableSoftwareTokenMFAException: Self { .init(.enableSoftwareTokenMFAException) }
    public static var expiredCodeException: Self { .init(.expiredCodeException) }
    public static var groupExistsException: Self { .init(.groupExistsException) }
    public static var internalErrorException: Self { .init(.internalErrorException) }
    public static var invalidEmailRoleAccessPolicyException: Self { .init(.invalidEmailRoleAccessPolicyException) }
    public static var invalidLambdaResponseException: Self { .init(.invalidLambdaResponseException) }
    public static var invalidOAuthFlowException: Self { .init(.invalidOAuthFlowException) }
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    public static var invalidPasswordException: Self { .init(.invalidPasswordException) }
    public static var invalidSmsRoleAccessPolicyException: Self { .init(.invalidSmsRoleAccessPolicyException) }
    public static var invalidSmsRoleTrustRelationshipException: Self { .init(.invalidSmsRoleTrustRelationshipException) }
    public static var invalidUserPoolConfigurationException: Self { .init(.invalidUserPoolConfigurationException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var mFAMethodNotFoundException: Self { .init(.mFAMethodNotFoundException) }
    public static var notAuthorizedException: Self { .init(.notAuthorizedException) }
    public static var passwordResetRequiredException: Self { .init(.passwordResetRequiredException) }
    public static var preconditionNotMetException: Self { .init(.preconditionNotMetException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var scopeDoesNotExistException: Self { .init(.scopeDoesNotExistException) }
    public static var softwareTokenMFANotFoundException: Self { .init(.softwareTokenMFANotFoundException) }
    public static var tooManyFailedAttemptsException: Self { .init(.tooManyFailedAttemptsException) }
    public static var tooManyRequestsException: Self { .init(.tooManyRequestsException) }
    public static var unexpectedLambdaException: Self { .init(.unexpectedLambdaException) }
    public static var unsupportedIdentityProviderException: Self { .init(.unsupportedIdentityProviderException) }
    public static var unsupportedUserStateException: Self { .init(.unsupportedUserStateException) }
    public static var userImportInProgressException: Self { .init(.userImportInProgressException) }
    public static var userLambdaValidationException: Self { .init(.userLambdaValidationException) }
    public static var userNotConfirmedException: Self { .init(.userNotConfirmedException) }
    public static var userNotFoundException: Self { .init(.userNotFoundException) }
    public static var userPoolAddOnNotEnabledException: Self { .init(.userPoolAddOnNotEnabledException) }
    public static var userPoolTaggingException: Self { .init(.userPoolTaggingException) }
    public static var usernameExistsException: Self { .init(.usernameExistsException) }
}

extension CognitoIdentityProviderErrorType: Equatable {
    public static func == (lhs: CognitoIdentityProviderErrorType, rhs: CognitoIdentityProviderErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension CognitoIdentityProviderErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
