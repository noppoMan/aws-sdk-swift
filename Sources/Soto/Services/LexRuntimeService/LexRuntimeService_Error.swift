//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for LexRuntimeService
public struct LexRuntimeServiceErrorType: AWSErrorType {
    enum Code: String {
        case badGatewayException = "BadGatewayException"
        case badRequestException = "BadRequestException"
        case conflictException = "ConflictException"
        case dependencyFailedException = "DependencyFailedException"
        case internalFailureException = "InternalFailureException"
        case limitExceededException = "LimitExceededException"
        case loopDetectedException = "LoopDetectedException"
        case notAcceptableException = "NotAcceptableException"
        case notFoundException = "NotFoundException"
        case requestTimeoutException = "RequestTimeoutException"
        case unsupportedMediaTypeException = "UnsupportedMediaTypeException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize LexRuntimeService
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var badGatewayException: Self { .init(.badGatewayException) }
    public static var badRequestException: Self { .init(.badRequestException) }
    public static var conflictException: Self { .init(.conflictException) }
    public static var dependencyFailedException: Self { .init(.dependencyFailedException) }
    public static var internalFailureException: Self { .init(.internalFailureException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var loopDetectedException: Self { .init(.loopDetectedException) }
    public static var notAcceptableException: Self { .init(.notAcceptableException) }
    public static var notFoundException: Self { .init(.notFoundException) }
    public static var requestTimeoutException: Self { .init(.requestTimeoutException) }
    public static var unsupportedMediaTypeException: Self { .init(.unsupportedMediaTypeException) }
}

extension LexRuntimeServiceErrorType: Equatable {
    public static func == (lhs: LexRuntimeServiceErrorType, rhs: LexRuntimeServiceErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension LexRuntimeServiceErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
