//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

@_exported import SotoCore

import SotoCore

// MARK: Waiters

extension SageMaker {
    public func EndpointDeletedWaiter(
        _ input: DescribeEndpointInput,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSErrorCodeMatcher("ValidationException")),
                .init(state: .failure, matcher: AWSPathMatcher(path: \DescribeEndpointOutput.endpointStatus, expected: .failed)),
            ],
            command: describeEndpoint
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func EndpointInServiceWaiter(
        _ input: DescribeEndpointInput,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSPathMatcher(path: \DescribeEndpointOutput.endpointStatus, expected: .inservice)),
                .init(state: .failure, matcher: AWSPathMatcher(path: \DescribeEndpointOutput.endpointStatus, expected: .failed)),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationException")),
            ],
            command: describeEndpoint
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func NotebookInstanceDeletedWaiter(
        _ input: DescribeNotebookInstanceInput,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSErrorCodeMatcher("ValidationException")),
                .init(state: .failure, matcher: AWSPathMatcher(path: \DescribeNotebookInstanceOutput.notebookInstanceStatus, expected: .failed)),
            ],
            command: describeNotebookInstance
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func NotebookInstanceInServiceWaiter(
        _ input: DescribeNotebookInstanceInput,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSPathMatcher(path: \DescribeNotebookInstanceOutput.notebookInstanceStatus, expected: .inservice)),
                .init(state: .failure, matcher: AWSPathMatcher(path: \DescribeNotebookInstanceOutput.notebookInstanceStatus, expected: .failed)),
            ],
            command: describeNotebookInstance
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func NotebookInstanceStoppedWaiter(
        _ input: DescribeNotebookInstanceInput,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSPathMatcher(path: \DescribeNotebookInstanceOutput.notebookInstanceStatus, expected: .stopped)),
                .init(state: .failure, matcher: AWSPathMatcher(path: \DescribeNotebookInstanceOutput.notebookInstanceStatus, expected: .failed)),
            ],
            command: describeNotebookInstance
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func ProcessingJobCompletedOrStoppedWaiter(
        _ input: DescribeProcessingJobRequest,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSPathMatcher(path: \DescribeProcessingJobResponse.processingJobStatus, expected: .completed)),
                .init(state: .success, matcher: AWSPathMatcher(path: \DescribeProcessingJobResponse.processingJobStatus, expected: .stopped)),
                .init(state: .failure, matcher: AWSPathMatcher(path: \DescribeProcessingJobResponse.processingJobStatus, expected: .failed)),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationException")),
            ],
            command: describeProcessingJob
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func TrainingJobCompletedOrStoppedWaiter(
        _ input: DescribeTrainingJobRequest,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSPathMatcher(path: \DescribeTrainingJobResponse.trainingJobStatus, expected: .completed)),
                .init(state: .success, matcher: AWSPathMatcher(path: \DescribeTrainingJobResponse.trainingJobStatus, expected: .stopped)),
                .init(state: .failure, matcher: AWSPathMatcher(path: \DescribeTrainingJobResponse.trainingJobStatus, expected: .failed)),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationException")),
            ],
            command: describeTrainingJob
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func TransformJobCompletedOrStoppedWaiter(
        _ input: DescribeTransformJobRequest,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSPathMatcher(path: \DescribeTransformJobResponse.transformJobStatus, expected: .completed)),
                .init(state: .success, matcher: AWSPathMatcher(path: \DescribeTransformJobResponse.transformJobStatus, expected: .stopped)),
                .init(state: .failure, matcher: AWSPathMatcher(path: \DescribeTransformJobResponse.transformJobStatus, expected: .failed)),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationException")),
            ],
            command: describeTransformJob
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }
}
