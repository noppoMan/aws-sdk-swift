//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import SotoCore

extension SageMaker {
    // MARK: Enums

    public enum AlgorithmSortBy: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        public var description: String { return self.rawValue }
    }

    public enum AlgorithmStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"
        case deleting = "Deleting"
        public var description: String { return self.rawValue }
    }

    public enum AppInstanceType: String, CustomStringConvertible, Codable {
        case system
        case mlT3Micro = "ml.t3.micro"
        case mlT3Small = "ml.t3.small"
        case mlT3Medium = "ml.t3.medium"
        case mlT3Large = "ml.t3.large"
        case mlT3Xlarge = "ml.t3.xlarge"
        case mlT32Xlarge = "ml.t3.2xlarge"
        case mlM5Large = "ml.m5.large"
        case mlM5Xlarge = "ml.m5.xlarge"
        case mlM52Xlarge = "ml.m5.2xlarge"
        case mlM54Xlarge = "ml.m5.4xlarge"
        case mlM58Xlarge = "ml.m5.8xlarge"
        case mlM512Xlarge = "ml.m5.12xlarge"
        case mlM516Xlarge = "ml.m5.16xlarge"
        case mlM524Xlarge = "ml.m5.24xlarge"
        case mlC5Large = "ml.c5.large"
        case mlC5Xlarge = "ml.c5.xlarge"
        case mlC52Xlarge = "ml.c5.2xlarge"
        case mlC54Xlarge = "ml.c5.4xlarge"
        case mlC59Xlarge = "ml.c5.9xlarge"
        case mlC512Xlarge = "ml.c5.12xlarge"
        case mlC518Xlarge = "ml.c5.18xlarge"
        case mlC524Xlarge = "ml.c5.24xlarge"
        case mlP32Xlarge = "ml.p3.2xlarge"
        case mlP38Xlarge = "ml.p3.8xlarge"
        case mlP316Xlarge = "ml.p3.16xlarge"
        case mlG4DnXlarge = "ml.g4dn.xlarge"
        case mlG4Dn2Xlarge = "ml.g4dn.2xlarge"
        case mlG4Dn4Xlarge = "ml.g4dn.4xlarge"
        case mlG4Dn8Xlarge = "ml.g4dn.8xlarge"
        case mlG4Dn12Xlarge = "ml.g4dn.12xlarge"
        case mlG4Dn16Xlarge = "ml.g4dn.16xlarge"
        public var description: String { return self.rawValue }
    }

    public enum AppSortKey: String, CustomStringConvertible, Codable {
        case creationtime = "CreationTime"
        public var description: String { return self.rawValue }
    }

    public enum AppStatus: String, CustomStringConvertible, Codable {
        case deleted = "Deleted"
        case deleting = "Deleting"
        case failed = "Failed"
        case inservice = "InService"
        case pending = "Pending"
        public var description: String { return self.rawValue }
    }

    public enum AppType: String, CustomStringConvertible, Codable {
        case jupyterserver = "JupyterServer"
        case kernelgateway = "KernelGateway"
        case tensorboard = "TensorBoard"
        public var description: String { return self.rawValue }
    }

    public enum AssemblyType: String, CustomStringConvertible, Codable {
        case none = "None"
        case line = "Line"
        public var description: String { return self.rawValue }
    }

    public enum AuthMode: String, CustomStringConvertible, Codable {
        case sso = "SSO"
        case iam = "IAM"
        public var description: String { return self.rawValue }
    }

    public enum AutoMLJobObjectiveType: String, CustomStringConvertible, Codable {
        case maximize = "Maximize"
        case minimize = "Minimize"
        public var description: String { return self.rawValue }
    }

    public enum AutoMLJobSecondaryStatus: String, CustomStringConvertible, Codable {
        case starting = "Starting"
        case analyzingdata = "AnalyzingData"
        case featureengineering = "FeatureEngineering"
        case modeltuning = "ModelTuning"
        case maxcandidatesreached = "MaxCandidatesReached"
        case failed = "Failed"
        case stopped = "Stopped"
        case maxautomljobruntimereached = "MaxAutoMLJobRuntimeReached"
        case stopping = "Stopping"
        case candidatedefinitionsgenerated = "CandidateDefinitionsGenerated"
        public var description: String { return self.rawValue }
    }

    public enum AutoMLJobStatus: String, CustomStringConvertible, Codable {
        case completed = "Completed"
        case inprogress = "InProgress"
        case failed = "Failed"
        case stopped = "Stopped"
        case stopping = "Stopping"
        public var description: String { return self.rawValue }
    }

    public enum AutoMLMetricEnum: String, CustomStringConvertible, Codable {
        case accuracy = "Accuracy"
        case mse = "MSE"
        case f1 = "F1"
        case f1macro = "F1macro"
        case auc = "AUC"
        public var description: String { return self.rawValue }
    }

    public enum AutoMLS3DataType: String, CustomStringConvertible, Codable {
        case manifestfile = "ManifestFile"
        case s3prefix = "S3Prefix"
        public var description: String { return self.rawValue }
    }

    public enum AutoMLSortBy: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        case status = "Status"
        public var description: String { return self.rawValue }
    }

    public enum AutoMLSortOrder: String, CustomStringConvertible, Codable {
        case ascending = "Ascending"
        case descending = "Descending"
        public var description: String { return self.rawValue }
    }

    public enum AwsManagedHumanLoopRequestSource: String, CustomStringConvertible, Codable {
        case awsRekognitionDetectmoderationlabelsImageV3 = "AWS/Rekognition/DetectModerationLabels/Image/V3"
        case awsTextractAnalyzedocumentFormsV1 = "AWS/Textract/AnalyzeDocument/Forms/V1"
        public var description: String { return self.rawValue }
    }

    public enum BatchStrategy: String, CustomStringConvertible, Codable {
        case multirecord = "MultiRecord"
        case singlerecord = "SingleRecord"
        public var description: String { return self.rawValue }
    }

    public enum BooleanOperator: String, CustomStringConvertible, Codable {
        case and = "And"
        case or = "Or"
        public var description: String { return self.rawValue }
    }

    public enum CandidateSortBy: String, CustomStringConvertible, Codable {
        case creationtime = "CreationTime"
        case status = "Status"
        case finalobjectivemetricvalue = "FinalObjectiveMetricValue"
        public var description: String { return self.rawValue }
    }

    public enum CandidateStatus: String, CustomStringConvertible, Codable {
        case completed = "Completed"
        case inprogress = "InProgress"
        case failed = "Failed"
        case stopped = "Stopped"
        case stopping = "Stopping"
        public var description: String { return self.rawValue }
    }

    public enum CandidateStepType: String, CustomStringConvertible, Codable {
        case awsSagemakerTrainingjob = "AWS::SageMaker::TrainingJob"
        case awsSagemakerTransformjob = "AWS::SageMaker::TransformJob"
        case awsSagemakerProcessingjob = "AWS::SageMaker::ProcessingJob"
        public var description: String { return self.rawValue }
    }

    public enum CaptureMode: String, CustomStringConvertible, Codable {
        case input = "Input"
        case output = "Output"
        public var description: String { return self.rawValue }
    }

    public enum CaptureStatus: String, CustomStringConvertible, Codable {
        case started = "Started"
        case stopped = "Stopped"
        public var description: String { return self.rawValue }
    }

    public enum CodeRepositorySortBy: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        case lastmodifiedtime = "LastModifiedTime"
        public var description: String { return self.rawValue }
    }

    public enum CodeRepositorySortOrder: String, CustomStringConvertible, Codable {
        case ascending = "Ascending"
        case descending = "Descending"
        public var description: String { return self.rawValue }
    }

    public enum CompilationJobStatus: String, CustomStringConvertible, Codable {
        case inprogress = "INPROGRESS"
        case completed = "COMPLETED"
        case failed = "FAILED"
        case starting = "STARTING"
        case stopping = "STOPPING"
        case stopped = "STOPPED"
        public var description: String { return self.rawValue }
    }

    public enum CompressionType: String, CustomStringConvertible, Codable {
        case none = "None"
        case gzip = "Gzip"
        public var description: String { return self.rawValue }
    }

    public enum ContainerMode: String, CustomStringConvertible, Codable {
        case singlemodel = "SingleModel"
        case multimodel = "MultiModel"
        public var description: String { return self.rawValue }
    }

    public enum ContentClassifier: String, CustomStringConvertible, Codable {
        case freeofpersonallyidentifiableinformation = "FreeOfPersonallyIdentifiableInformation"
        case freeofadultcontent = "FreeOfAdultContent"
        public var description: String { return self.rawValue }
    }

    public enum DetailedAlgorithmStatus: String, CustomStringConvertible, Codable {
        case notstarted = "NotStarted"
        case inprogress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum DetailedModelPackageStatus: String, CustomStringConvertible, Codable {
        case notstarted = "NotStarted"
        case inprogress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum DirectInternetAccess: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public enum DomainStatus: String, CustomStringConvertible, Codable {
        case deleting = "Deleting"
        case failed = "Failed"
        case inservice = "InService"
        case pending = "Pending"
        public var description: String { return self.rawValue }
    }

    public enum EndpointConfigSortKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        public var description: String { return self.rawValue }
    }

    public enum EndpointSortKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        case status = "Status"
        public var description: String { return self.rawValue }
    }

    public enum EndpointStatus: String, CustomStringConvertible, Codable {
        case outofservice = "OutOfService"
        case creating = "Creating"
        case updating = "Updating"
        case systemupdating = "SystemUpdating"
        case rollingback = "RollingBack"
        case inservice = "InService"
        case deleting = "Deleting"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum ExecutionStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case completed = "Completed"
        case completedwithviolations = "CompletedWithViolations"
        case inprogress = "InProgress"
        case failed = "Failed"
        case stopping = "Stopping"
        case stopped = "Stopped"
        public var description: String { return self.rawValue }
    }

    public enum FileSystemAccessMode: String, CustomStringConvertible, Codable {
        case rw
        case ro
        public var description: String { return self.rawValue }
    }

    public enum FileSystemType: String, CustomStringConvertible, Codable {
        case efs = "EFS"
        case fsxlustre = "FSxLustre"
        public var description: String { return self.rawValue }
    }

    public enum FlowDefinitionStatus: String, CustomStringConvertible, Codable {
        case initializing = "Initializing"
        case active = "Active"
        case failed = "Failed"
        case deleting = "Deleting"
        public var description: String { return self.rawValue }
    }

    public enum Framework: String, CustomStringConvertible, Codable {
        case tensorflow = "TENSORFLOW"
        case keras = "KERAS"
        case mxnet = "MXNET"
        case onnx = "ONNX"
        case pytorch = "PYTORCH"
        case xgboost = "XGBOOST"
        case tflite = "TFLITE"
        public var description: String { return self.rawValue }
    }

    public enum HumanTaskUiStatus: String, CustomStringConvertible, Codable {
        case active = "Active"
        case deleting = "Deleting"
        public var description: String { return self.rawValue }
    }

    public enum HyperParameterScalingType: String, CustomStringConvertible, Codable {
        case auto = "Auto"
        case linear = "Linear"
        case logarithmic = "Logarithmic"
        case reverselogarithmic = "ReverseLogarithmic"
        public var description: String { return self.rawValue }
    }

    public enum HyperParameterTuningJobObjectiveType: String, CustomStringConvertible, Codable {
        case maximize = "Maximize"
        case minimize = "Minimize"
        public var description: String { return self.rawValue }
    }

    public enum HyperParameterTuningJobSortByOptions: String, CustomStringConvertible, Codable {
        case name = "Name"
        case status = "Status"
        case creationtime = "CreationTime"
        public var description: String { return self.rawValue }
    }

    public enum HyperParameterTuningJobStatus: String, CustomStringConvertible, Codable {
        case completed = "Completed"
        case inprogress = "InProgress"
        case failed = "Failed"
        case stopped = "Stopped"
        case stopping = "Stopping"
        public var description: String { return self.rawValue }
    }

    public enum HyperParameterTuningJobStrategyType: String, CustomStringConvertible, Codable {
        case bayesian = "Bayesian"
        case random = "Random"
        public var description: String { return self.rawValue }
    }

    public enum HyperParameterTuningJobWarmStartType: String, CustomStringConvertible, Codable {
        case identicaldataandalgorithm = "IdenticalDataAndAlgorithm"
        case transferlearning = "TransferLearning"
        public var description: String { return self.rawValue }
    }

    public enum InstanceType: String, CustomStringConvertible, Codable {
        case mlT2Medium = "ml.t2.medium"
        case mlT2Large = "ml.t2.large"
        case mlT2Xlarge = "ml.t2.xlarge"
        case mlT22Xlarge = "ml.t2.2xlarge"
        case mlT3Medium = "ml.t3.medium"
        case mlT3Large = "ml.t3.large"
        case mlT3Xlarge = "ml.t3.xlarge"
        case mlT32Xlarge = "ml.t3.2xlarge"
        case mlM4Xlarge = "ml.m4.xlarge"
        case mlM42Xlarge = "ml.m4.2xlarge"
        case mlM44Xlarge = "ml.m4.4xlarge"
        case mlM410Xlarge = "ml.m4.10xlarge"
        case mlM416Xlarge = "ml.m4.16xlarge"
        case mlM5Xlarge = "ml.m5.xlarge"
        case mlM52Xlarge = "ml.m5.2xlarge"
        case mlM54Xlarge = "ml.m5.4xlarge"
        case mlM512Xlarge = "ml.m5.12xlarge"
        case mlM524Xlarge = "ml.m5.24xlarge"
        case mlC4Xlarge = "ml.c4.xlarge"
        case mlC42Xlarge = "ml.c4.2xlarge"
        case mlC44Xlarge = "ml.c4.4xlarge"
        case mlC48Xlarge = "ml.c4.8xlarge"
        case mlC5Xlarge = "ml.c5.xlarge"
        case mlC52Xlarge = "ml.c5.2xlarge"
        case mlC54Xlarge = "ml.c5.4xlarge"
        case mlC59Xlarge = "ml.c5.9xlarge"
        case mlC518Xlarge = "ml.c5.18xlarge"
        case mlC5DXlarge = "ml.c5d.xlarge"
        case mlC5D2Xlarge = "ml.c5d.2xlarge"
        case mlC5D4Xlarge = "ml.c5d.4xlarge"
        case mlC5D9Xlarge = "ml.c5d.9xlarge"
        case mlC5D18Xlarge = "ml.c5d.18xlarge"
        case mlP2Xlarge = "ml.p2.xlarge"
        case mlP28Xlarge = "ml.p2.8xlarge"
        case mlP216Xlarge = "ml.p2.16xlarge"
        case mlP32Xlarge = "ml.p3.2xlarge"
        case mlP38Xlarge = "ml.p3.8xlarge"
        case mlP316Xlarge = "ml.p3.16xlarge"
        public var description: String { return self.rawValue }
    }

    public enum JoinSource: String, CustomStringConvertible, Codable {
        case input = "Input"
        case none = "None"
        public var description: String { return self.rawValue }
    }

    public enum LabelingJobStatus: String, CustomStringConvertible, Codable {
        case initializing = "Initializing"
        case inprogress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"
        case stopping = "Stopping"
        case stopped = "Stopped"
        public var description: String { return self.rawValue }
    }

    public enum ListCompilationJobsSortBy: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        case status = "Status"
        public var description: String { return self.rawValue }
    }

    public enum ListLabelingJobsForWorkteamSortByOptions: String, CustomStringConvertible, Codable {
        case creationtime = "CreationTime"
        public var description: String { return self.rawValue }
    }

    public enum ListWorkforcesSortByOptions: String, CustomStringConvertible, Codable {
        case name = "Name"
        case createdate = "CreateDate"
        public var description: String { return self.rawValue }
    }

    public enum ListWorkteamsSortByOptions: String, CustomStringConvertible, Codable {
        case name = "Name"
        case createdate = "CreateDate"
        public var description: String { return self.rawValue }
    }

    public enum ModelPackageSortBy: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        public var description: String { return self.rawValue }
    }

    public enum ModelPackageStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inprogress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"
        case deleting = "Deleting"
        public var description: String { return self.rawValue }
    }

    public enum ModelSortKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        public var description: String { return self.rawValue }
    }

    public enum MonitoringExecutionSortKey: String, CustomStringConvertible, Codable {
        case creationtime = "CreationTime"
        case scheduledtime = "ScheduledTime"
        case status = "Status"
        public var description: String { return self.rawValue }
    }

    public enum MonitoringScheduleSortKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        case status = "Status"
        public var description: String { return self.rawValue }
    }

    public enum NotebookInstanceAcceleratorType: String, CustomStringConvertible, Codable {
        case mlEia1Medium = "ml.eia1.medium"
        case mlEia1Large = "ml.eia1.large"
        case mlEia1Xlarge = "ml.eia1.xlarge"
        case mlEia2Medium = "ml.eia2.medium"
        case mlEia2Large = "ml.eia2.large"
        case mlEia2Xlarge = "ml.eia2.xlarge"
        public var description: String { return self.rawValue }
    }

    public enum NotebookInstanceLifecycleConfigSortKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        case lastmodifiedtime = "LastModifiedTime"
        public var description: String { return self.rawValue }
    }

    public enum NotebookInstanceLifecycleConfigSortOrder: String, CustomStringConvertible, Codable {
        case ascending = "Ascending"
        case descending = "Descending"
        public var description: String { return self.rawValue }
    }

    public enum NotebookInstanceSortKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        case status = "Status"
        public var description: String { return self.rawValue }
    }

    public enum NotebookInstanceSortOrder: String, CustomStringConvertible, Codable {
        case ascending = "Ascending"
        case descending = "Descending"
        public var description: String { return self.rawValue }
    }

    public enum NotebookInstanceStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inservice = "InService"
        case stopping = "Stopping"
        case stopped = "Stopped"
        case failed = "Failed"
        case deleting = "Deleting"
        case updating = "Updating"
        public var description: String { return self.rawValue }
    }

    public enum NotebookOutputOption: String, CustomStringConvertible, Codable {
        case allowed = "Allowed"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public enum ObjectiveStatus: String, CustomStringConvertible, Codable {
        case succeeded = "Succeeded"
        case pending = "Pending"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum `Operator`: String, CustomStringConvertible, Codable {
        case equals = "Equals"
        case notequals = "NotEquals"
        case greaterthan = "GreaterThan"
        case greaterthanorequalto = "GreaterThanOrEqualTo"
        case lessthan = "LessThan"
        case lessthanorequalto = "LessThanOrEqualTo"
        case contains = "Contains"
        case exists = "Exists"
        case notexists = "NotExists"
        case `in` = "In"
        public var description: String { return self.rawValue }
    }

    public enum OrderKey: String, CustomStringConvertible, Codable {
        case ascending = "Ascending"
        case descending = "Descending"
        public var description: String { return self.rawValue }
    }

    public enum ParameterType: String, CustomStringConvertible, Codable {
        case integer = "Integer"
        case continuous = "Continuous"
        case categorical = "Categorical"
        case freetext = "FreeText"
        public var description: String { return self.rawValue }
    }

    public enum ProblemType: String, CustomStringConvertible, Codable {
        case binaryclassification = "BinaryClassification"
        case multiclassclassification = "MulticlassClassification"
        case regression = "Regression"
        public var description: String { return self.rawValue }
    }

    public enum ProcessingInstanceType: String, CustomStringConvertible, Codable {
        case mlT3Medium = "ml.t3.medium"
        case mlT3Large = "ml.t3.large"
        case mlT3Xlarge = "ml.t3.xlarge"
        case mlT32Xlarge = "ml.t3.2xlarge"
        case mlM4Xlarge = "ml.m4.xlarge"
        case mlM42Xlarge = "ml.m4.2xlarge"
        case mlM44Xlarge = "ml.m4.4xlarge"
        case mlM410Xlarge = "ml.m4.10xlarge"
        case mlM416Xlarge = "ml.m4.16xlarge"
        case mlC4Xlarge = "ml.c4.xlarge"
        case mlC42Xlarge = "ml.c4.2xlarge"
        case mlC44Xlarge = "ml.c4.4xlarge"
        case mlC48Xlarge = "ml.c4.8xlarge"
        case mlP2Xlarge = "ml.p2.xlarge"
        case mlP28Xlarge = "ml.p2.8xlarge"
        case mlP216Xlarge = "ml.p2.16xlarge"
        case mlP32Xlarge = "ml.p3.2xlarge"
        case mlP38Xlarge = "ml.p3.8xlarge"
        case mlP316Xlarge = "ml.p3.16xlarge"
        case mlC5Xlarge = "ml.c5.xlarge"
        case mlC52Xlarge = "ml.c5.2xlarge"
        case mlC54Xlarge = "ml.c5.4xlarge"
        case mlC59Xlarge = "ml.c5.9xlarge"
        case mlC518Xlarge = "ml.c5.18xlarge"
        case mlM5Large = "ml.m5.large"
        case mlM5Xlarge = "ml.m5.xlarge"
        case mlM52Xlarge = "ml.m5.2xlarge"
        case mlM54Xlarge = "ml.m5.4xlarge"
        case mlM512Xlarge = "ml.m5.12xlarge"
        case mlM524Xlarge = "ml.m5.24xlarge"
        case mlR5Large = "ml.r5.large"
        case mlR5Xlarge = "ml.r5.xlarge"
        case mlR52Xlarge = "ml.r5.2xlarge"
        case mlR54Xlarge = "ml.r5.4xlarge"
        case mlR58Xlarge = "ml.r5.8xlarge"
        case mlR512Xlarge = "ml.r5.12xlarge"
        case mlR516Xlarge = "ml.r5.16xlarge"
        case mlR524Xlarge = "ml.r5.24xlarge"
        public var description: String { return self.rawValue }
    }

    public enum ProcessingJobStatus: String, CustomStringConvertible, Codable {
        case inprogress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"
        case stopping = "Stopping"
        case stopped = "Stopped"
        public var description: String { return self.rawValue }
    }

    public enum ProcessingS3CompressionType: String, CustomStringConvertible, Codable {
        case none = "None"
        case gzip = "Gzip"
        public var description: String { return self.rawValue }
    }

    public enum ProcessingS3DataDistributionType: String, CustomStringConvertible, Codable {
        case fullyreplicated = "FullyReplicated"
        case shardedbys3key = "ShardedByS3Key"
        public var description: String { return self.rawValue }
    }

    public enum ProcessingS3DataType: String, CustomStringConvertible, Codable {
        case manifestfile = "ManifestFile"
        case s3prefix = "S3Prefix"
        public var description: String { return self.rawValue }
    }

    public enum ProcessingS3InputMode: String, CustomStringConvertible, Codable {
        case pipe = "Pipe"
        case file = "File"
        public var description: String { return self.rawValue }
    }

    public enum ProcessingS3UploadMode: String, CustomStringConvertible, Codable {
        case continuous = "Continuous"
        case endofjob = "EndOfJob"
        public var description: String { return self.rawValue }
    }

    public enum ProductionVariantAcceleratorType: String, CustomStringConvertible, Codable {
        case mlEia1Medium = "ml.eia1.medium"
        case mlEia1Large = "ml.eia1.large"
        case mlEia1Xlarge = "ml.eia1.xlarge"
        case mlEia2Medium = "ml.eia2.medium"
        case mlEia2Large = "ml.eia2.large"
        case mlEia2Xlarge = "ml.eia2.xlarge"
        public var description: String { return self.rawValue }
    }

    public enum ProductionVariantInstanceType: String, CustomStringConvertible, Codable {
        case mlT2Medium = "ml.t2.medium"
        case mlT2Large = "ml.t2.large"
        case mlT2Xlarge = "ml.t2.xlarge"
        case mlT22Xlarge = "ml.t2.2xlarge"
        case mlM4Xlarge = "ml.m4.xlarge"
        case mlM42Xlarge = "ml.m4.2xlarge"
        case mlM44Xlarge = "ml.m4.4xlarge"
        case mlM410Xlarge = "ml.m4.10xlarge"
        case mlM416Xlarge = "ml.m4.16xlarge"
        case mlM5Large = "ml.m5.large"
        case mlM5Xlarge = "ml.m5.xlarge"
        case mlM52Xlarge = "ml.m5.2xlarge"
        case mlM54Xlarge = "ml.m5.4xlarge"
        case mlM512Xlarge = "ml.m5.12xlarge"
        case mlM524Xlarge = "ml.m5.24xlarge"
        case mlM5DLarge = "ml.m5d.large"
        case mlM5DXlarge = "ml.m5d.xlarge"
        case mlM5D2Xlarge = "ml.m5d.2xlarge"
        case mlM5D4Xlarge = "ml.m5d.4xlarge"
        case mlM5D12Xlarge = "ml.m5d.12xlarge"
        case mlM5D24Xlarge = "ml.m5d.24xlarge"
        case mlC4Large = "ml.c4.large"
        case mlC4Xlarge = "ml.c4.xlarge"
        case mlC42Xlarge = "ml.c4.2xlarge"
        case mlC44Xlarge = "ml.c4.4xlarge"
        case mlC48Xlarge = "ml.c4.8xlarge"
        case mlP2Xlarge = "ml.p2.xlarge"
        case mlP28Xlarge = "ml.p2.8xlarge"
        case mlP216Xlarge = "ml.p2.16xlarge"
        case mlP32Xlarge = "ml.p3.2xlarge"
        case mlP38Xlarge = "ml.p3.8xlarge"
        case mlP316Xlarge = "ml.p3.16xlarge"
        case mlC5Large = "ml.c5.large"
        case mlC5Xlarge = "ml.c5.xlarge"
        case mlC52Xlarge = "ml.c5.2xlarge"
        case mlC54Xlarge = "ml.c5.4xlarge"
        case mlC59Xlarge = "ml.c5.9xlarge"
        case mlC518Xlarge = "ml.c5.18xlarge"
        case mlC5DLarge = "ml.c5d.large"
        case mlC5DXlarge = "ml.c5d.xlarge"
        case mlC5D2Xlarge = "ml.c5d.2xlarge"
        case mlC5D4Xlarge = "ml.c5d.4xlarge"
        case mlC5D9Xlarge = "ml.c5d.9xlarge"
        case mlC5D18Xlarge = "ml.c5d.18xlarge"
        case mlG4DnXlarge = "ml.g4dn.xlarge"
        case mlG4Dn2Xlarge = "ml.g4dn.2xlarge"
        case mlG4Dn4Xlarge = "ml.g4dn.4xlarge"
        case mlG4Dn8Xlarge = "ml.g4dn.8xlarge"
        case mlG4Dn12Xlarge = "ml.g4dn.12xlarge"
        case mlG4Dn16Xlarge = "ml.g4dn.16xlarge"
        case mlR5Large = "ml.r5.large"
        case mlR5Xlarge = "ml.r5.xlarge"
        case mlR52Xlarge = "ml.r5.2xlarge"
        case mlR54Xlarge = "ml.r5.4xlarge"
        case mlR512Xlarge = "ml.r5.12xlarge"
        case mlR524Xlarge = "ml.r5.24xlarge"
        case mlR5DLarge = "ml.r5d.large"
        case mlR5DXlarge = "ml.r5d.xlarge"
        case mlR5D2Xlarge = "ml.r5d.2xlarge"
        case mlR5D4Xlarge = "ml.r5d.4xlarge"
        case mlR5D12Xlarge = "ml.r5d.12xlarge"
        case mlR5D24Xlarge = "ml.r5d.24xlarge"
        case mlInf1Xlarge = "ml.inf1.xlarge"
        case mlInf12Xlarge = "ml.inf1.2xlarge"
        case mlInf16Xlarge = "ml.inf1.6xlarge"
        case mlInf124Xlarge = "ml.inf1.24xlarge"
        public var description: String { return self.rawValue }
    }

    public enum RecordWrapper: String, CustomStringConvertible, Codable {
        case none = "None"
        case recordio = "RecordIO"
        public var description: String { return self.rawValue }
    }

    public enum RepositoryAccessMode: String, CustomStringConvertible, Codable {
        case platform = "Platform"
        case vpc = "Vpc"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case trainingjob = "TrainingJob"
        case experiment = "Experiment"
        case experimenttrial = "ExperimentTrial"
        case experimenttrialcomponent = "ExperimentTrialComponent"
        public var description: String { return self.rawValue }
    }

    public enum RetentionType: String, CustomStringConvertible, Codable {
        case retain = "Retain"
        case delete = "Delete"
        public var description: String { return self.rawValue }
    }

    public enum RootAccess: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public enum RuleEvaluationStatus: String, CustomStringConvertible, Codable {
        case inprogress = "InProgress"
        case noissuesfound = "NoIssuesFound"
        case issuesfound = "IssuesFound"
        case error = "Error"
        case stopping = "Stopping"
        case stopped = "Stopped"
        public var description: String { return self.rawValue }
    }

    public enum S3DataDistribution: String, CustomStringConvertible, Codable {
        case fullyreplicated = "FullyReplicated"
        case shardedbys3key = "ShardedByS3Key"
        public var description: String { return self.rawValue }
    }

    public enum S3DataType: String, CustomStringConvertible, Codable {
        case manifestfile = "ManifestFile"
        case s3prefix = "S3Prefix"
        case augmentedmanifestfile = "AugmentedManifestFile"
        public var description: String { return self.rawValue }
    }

    public enum ScheduleStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case failed = "Failed"
        case scheduled = "Scheduled"
        case stopped = "Stopped"
        public var description: String { return self.rawValue }
    }

    public enum SearchSortOrder: String, CustomStringConvertible, Codable {
        case ascending = "Ascending"
        case descending = "Descending"
        public var description: String { return self.rawValue }
    }

    public enum SecondaryStatus: String, CustomStringConvertible, Codable {
        case starting = "Starting"
        case launchingmlinstances = "LaunchingMLInstances"
        case preparingtrainingstack = "PreparingTrainingStack"
        case downloading = "Downloading"
        case downloadingtrainingimage = "DownloadingTrainingImage"
        case training = "Training"
        case uploading = "Uploading"
        case stopping = "Stopping"
        case stopped = "Stopped"
        case maxruntimeexceeded = "MaxRuntimeExceeded"
        case completed = "Completed"
        case failed = "Failed"
        case interrupted = "Interrupted"
        case maxwaittimeexceeded = "MaxWaitTimeExceeded"
        public var description: String { return self.rawValue }
    }

    public enum SortBy: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        case status = "Status"
        public var description: String { return self.rawValue }
    }

    public enum SortExperimentsBy: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        public var description: String { return self.rawValue }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable {
        case ascending = "Ascending"
        case descending = "Descending"
        public var description: String { return self.rawValue }
    }

    public enum SortTrialComponentsBy: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        public var description: String { return self.rawValue }
    }

    public enum SortTrialsBy: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        public var description: String { return self.rawValue }
    }

    public enum SplitType: String, CustomStringConvertible, Codable {
        case none = "None"
        case line = "Line"
        case recordio = "RecordIO"
        case tfrecord = "TFRecord"
        public var description: String { return self.rawValue }
    }

    public enum TargetDevice: String, CustomStringConvertible, Codable {
        case lambda
        case mlM4 = "ml_m4"
        case mlM5 = "ml_m5"
        case mlC4 = "ml_c4"
        case mlC5 = "ml_c5"
        case mlP2 = "ml_p2"
        case mlP3 = "ml_p3"
        case mlG4Dn = "ml_g4dn"
        case mlInf1 = "ml_inf1"
        case jetsonTx1 = "jetson_tx1"
        case jetsonTx2 = "jetson_tx2"
        case jetsonNano = "jetson_nano"
        case jetsonXavier = "jetson_xavier"
        case rasp3b
        case imx8qm
        case deeplens
        case rk3399
        case rk3288
        case aisage
        case sbeC = "sbe_c"
        case qcs605
        case qcs603
        case sitaraAm57X = "sitara_am57x"
        case ambaCv22 = "amba_cv22"
        case x86Win32 = "x86_win32"
        case x86Win64 = "x86_win64"
        public var description: String { return self.rawValue }
    }

    public enum TargetPlatformAccelerator: String, CustomStringConvertible, Codable {
        case intelGraphics = "INTEL_GRAPHICS"
        case mali = "MALI"
        case nvidia = "NVIDIA"
        public var description: String { return self.rawValue }
    }

    public enum TargetPlatformArch: String, CustomStringConvertible, Codable {
        case x8664 = "X86_64"
        case x86 = "X86"
        case arm64 = "ARM64"
        case armEabi = "ARM_EABI"
        case armEabihf = "ARM_EABIHF"
        public var description: String { return self.rawValue }
    }

    public enum TargetPlatformOs: String, CustomStringConvertible, Codable {
        case android = "ANDROID"
        case linux = "LINUX"
        public var description: String { return self.rawValue }
    }

    public enum TrainingInputMode: String, CustomStringConvertible, Codable {
        case pipe = "Pipe"
        case file = "File"
        public var description: String { return self.rawValue }
    }

    public enum TrainingInstanceType: String, CustomStringConvertible, Codable {
        case mlM4Xlarge = "ml.m4.xlarge"
        case mlM42Xlarge = "ml.m4.2xlarge"
        case mlM44Xlarge = "ml.m4.4xlarge"
        case mlM410Xlarge = "ml.m4.10xlarge"
        case mlM416Xlarge = "ml.m4.16xlarge"
        case mlG4DnXlarge = "ml.g4dn.xlarge"
        case mlG4Dn2Xlarge = "ml.g4dn.2xlarge"
        case mlG4Dn4Xlarge = "ml.g4dn.4xlarge"
        case mlG4Dn8Xlarge = "ml.g4dn.8xlarge"
        case mlG4Dn12Xlarge = "ml.g4dn.12xlarge"
        case mlG4Dn16Xlarge = "ml.g4dn.16xlarge"
        case mlM5Large = "ml.m5.large"
        case mlM5Xlarge = "ml.m5.xlarge"
        case mlM52Xlarge = "ml.m5.2xlarge"
        case mlM54Xlarge = "ml.m5.4xlarge"
        case mlM512Xlarge = "ml.m5.12xlarge"
        case mlM524Xlarge = "ml.m5.24xlarge"
        case mlC4Xlarge = "ml.c4.xlarge"
        case mlC42Xlarge = "ml.c4.2xlarge"
        case mlC44Xlarge = "ml.c4.4xlarge"
        case mlC48Xlarge = "ml.c4.8xlarge"
        case mlP2Xlarge = "ml.p2.xlarge"
        case mlP28Xlarge = "ml.p2.8xlarge"
        case mlP216Xlarge = "ml.p2.16xlarge"
        case mlP32Xlarge = "ml.p3.2xlarge"
        case mlP38Xlarge = "ml.p3.8xlarge"
        case mlP316Xlarge = "ml.p3.16xlarge"
        case mlP3Dn24Xlarge = "ml.p3dn.24xlarge"
        case mlC5Xlarge = "ml.c5.xlarge"
        case mlC52Xlarge = "ml.c5.2xlarge"
        case mlC54Xlarge = "ml.c5.4xlarge"
        case mlC59Xlarge = "ml.c5.9xlarge"
        case mlC518Xlarge = "ml.c5.18xlarge"
        case mlC5NXlarge = "ml.c5n.xlarge"
        case mlC5N2Xlarge = "ml.c5n.2xlarge"
        case mlC5N4Xlarge = "ml.c5n.4xlarge"
        case mlC5N9Xlarge = "ml.c5n.9xlarge"
        case mlC5N18Xlarge = "ml.c5n.18xlarge"
        public var description: String { return self.rawValue }
    }

    public enum TrainingJobEarlyStoppingType: String, CustomStringConvertible, Codable {
        case off = "Off"
        case auto = "Auto"
        public var description: String { return self.rawValue }
    }

    public enum TrainingJobSortByOptions: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        case status = "Status"
        case finalobjectivemetricvalue = "FinalObjectiveMetricValue"
        public var description: String { return self.rawValue }
    }

    public enum TrainingJobStatus: String, CustomStringConvertible, Codable {
        case inprogress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"
        case stopping = "Stopping"
        case stopped = "Stopped"
        public var description: String { return self.rawValue }
    }

    public enum TransformInstanceType: String, CustomStringConvertible, Codable {
        case mlM4Xlarge = "ml.m4.xlarge"
        case mlM42Xlarge = "ml.m4.2xlarge"
        case mlM44Xlarge = "ml.m4.4xlarge"
        case mlM410Xlarge = "ml.m4.10xlarge"
        case mlM416Xlarge = "ml.m4.16xlarge"
        case mlC4Xlarge = "ml.c4.xlarge"
        case mlC42Xlarge = "ml.c4.2xlarge"
        case mlC44Xlarge = "ml.c4.4xlarge"
        case mlC48Xlarge = "ml.c4.8xlarge"
        case mlP2Xlarge = "ml.p2.xlarge"
        case mlP28Xlarge = "ml.p2.8xlarge"
        case mlP216Xlarge = "ml.p2.16xlarge"
        case mlP32Xlarge = "ml.p3.2xlarge"
        case mlP38Xlarge = "ml.p3.8xlarge"
        case mlP316Xlarge = "ml.p3.16xlarge"
        case mlC5Xlarge = "ml.c5.xlarge"
        case mlC52Xlarge = "ml.c5.2xlarge"
        case mlC54Xlarge = "ml.c5.4xlarge"
        case mlC59Xlarge = "ml.c5.9xlarge"
        case mlC518Xlarge = "ml.c5.18xlarge"
        case mlM5Large = "ml.m5.large"
        case mlM5Xlarge = "ml.m5.xlarge"
        case mlM52Xlarge = "ml.m5.2xlarge"
        case mlM54Xlarge = "ml.m5.4xlarge"
        case mlM512Xlarge = "ml.m5.12xlarge"
        case mlM524Xlarge = "ml.m5.24xlarge"
        public var description: String { return self.rawValue }
    }

    public enum TransformJobStatus: String, CustomStringConvertible, Codable {
        case inprogress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"
        case stopping = "Stopping"
        case stopped = "Stopped"
        public var description: String { return self.rawValue }
    }

    public enum TrialComponentPrimaryStatus: String, CustomStringConvertible, Codable {
        case inprogress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"
        case stopping = "Stopping"
        case stopped = "Stopped"
        public var description: String { return self.rawValue }
    }

    public enum UserProfileSortKey: String, CustomStringConvertible, Codable {
        case creationtime = "CreationTime"
        case lastmodifiedtime = "LastModifiedTime"
        public var description: String { return self.rawValue }
    }

    public enum UserProfileStatus: String, CustomStringConvertible, Codable {
        case deleting = "Deleting"
        case failed = "Failed"
        case inservice = "InService"
        case pending = "Pending"
        public var description: String { return self.rawValue }
    }

    public enum VariantPropertyType: String, CustomStringConvertible, Codable {
        case desiredinstancecount = "DesiredInstanceCount"
        case desiredweight = "DesiredWeight"
        case datacaptureconfig = "DataCaptureConfig"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AddTagsInput: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource that you want to tag.
        public let resourceArn: String
        /// An array of Tag objects. Each tag is a key-value pair. Only the key parameter is required. If you don't specify a value, Amazon SageMaker sets the value to an empty string.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 256)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "arn:.*")
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct AddTagsOutput: AWSDecodableShape {
        /// A list of tags associated with the Amazon SageMaker resource.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct AlgorithmSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The name of the algorithm resource to use for the training job. This must be an algorithm resource that you created or subscribe to on AWS Marketplace. If you specify a value for this parameter, you can't specify a value for TrainingImage.
        public let algorithmName: String?
        /// To generate and save time-series metrics during training, set to true. The default is false and time-series metrics aren't generated except in the following cases:   You use one of the Amazon SageMaker built-in algorithms   You use one of the following Prebuilt Amazon SageMaker Docker Images:   Tensorflow (version &gt;= 1.15)   MXNet (version &gt;= 1.6)   PyTorch (version &gt;= 1.3)     You specify at least one MetricDefinition
        public let enableSageMakerMetricsTimeSeries: Bool?
        /// A list of metric definition objects. Each object specifies the metric name and regular expressions used to parse algorithm logs. Amazon SageMaker publishes each metric to Amazon CloudWatch.
        public let metricDefinitions: [MetricDefinition]?
        /// The registry path of the Docker image that contains the training algorithm. For information about docker registry paths for built-in algorithms, see Algorithms Provided by Amazon SageMaker: Common Parameters. Amazon SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information, see Using Your Own Algorithms with Amazon SageMaker.
        public let trainingImage: String?
        /// The input mode that the algorithm supports. For the input modes that Amazon SageMaker algorithms support, see Algorithms. If an algorithm supports the File input mode, Amazon SageMaker downloads the training data from S3 to the provisioned ML storage Volume, and mounts the directory to docker volume for training container. If an algorithm supports the Pipe input mode, Amazon SageMaker streams data directly from S3 to the container.   In File mode, make sure you provision ML storage volume with sufficient capacity to accommodate the data download from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container use ML storage volume to also store intermediate information, if any.   For distributed algorithms using File mode, training data is distributed uniformly, and your training duration is predictable if the input data objects size is approximately same. Amazon SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed where one host in a training cluster is overloaded, thus becoming bottleneck in training.
        public let trainingInputMode: TrainingInputMode

        public init(algorithmName: String? = nil, enableSageMakerMetricsTimeSeries: Bool? = nil, metricDefinitions: [MetricDefinition]? = nil, trainingImage: String? = nil, trainingInputMode: TrainingInputMode) {
            self.algorithmName = algorithmName
            self.enableSageMakerMetricsTimeSeries = enableSageMakerMetricsTimeSeries
            self.metricDefinitions = metricDefinitions
            self.trainingImage = trainingImage
            self.trainingInputMode = trainingInputMode
        }

        public func validate(name: String) throws {
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, max: 170)
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, min: 1)
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, pattern: "(arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:[a-z\\-]*\\/)?([a-zA-Z0-9]([a-zA-Z0-9-]){0,62})(?<!-)$")
            try self.metricDefinitions?.forEach {
                try $0.validate(name: "\(name).metricDefinitions[]")
            }
            try self.validate(self.metricDefinitions, name: "metricDefinitions", parent: name, max: 40)
            try self.validate(self.metricDefinitions, name: "metricDefinitions", parent: name, min: 0)
            try self.validate(self.trainingImage, name: "trainingImage", parent: name, max: 255)
            try self.validate(self.trainingImage, name: "trainingImage", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmName = "AlgorithmName"
            case enableSageMakerMetricsTimeSeries = "EnableSageMakerMetricsTimeSeries"
            case metricDefinitions = "MetricDefinitions"
            case trainingImage = "TrainingImage"
            case trainingInputMode = "TrainingInputMode"
        }
    }

    public struct AlgorithmStatusDetails: AWSDecodableShape {
        /// The status of the scan of the algorithm's Docker image container.
        public let imageScanStatuses: [AlgorithmStatusItem]?
        /// The status of algorithm validation.
        public let validationStatuses: [AlgorithmStatusItem]?

        public init(imageScanStatuses: [AlgorithmStatusItem]? = nil, validationStatuses: [AlgorithmStatusItem]? = nil) {
            self.imageScanStatuses = imageScanStatuses
            self.validationStatuses = validationStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case imageScanStatuses = "ImageScanStatuses"
            case validationStatuses = "ValidationStatuses"
        }
    }

    public struct AlgorithmStatusItem: AWSDecodableShape {
        /// if the overall status is Failed, the reason for the failure.
        public let failureReason: String?
        /// The name of the algorithm for which the overall status is being reported.
        public let name: String
        /// The current status.
        public let status: DetailedAlgorithmStatus

        public init(failureReason: String? = nil, name: String, status: DetailedAlgorithmStatus) {
            self.failureReason = failureReason
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case failureReason = "FailureReason"
            case name = "Name"
            case status = "Status"
        }
    }

    public struct AlgorithmSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the algorithm.
        public let algorithmArn: String
        /// A brief description of the algorithm.
        public let algorithmDescription: String?
        /// The name of the algorithm that is described by the summary.
        public let algorithmName: String
        /// The overall status of the algorithm.
        public let algorithmStatus: AlgorithmStatus
        /// A timestamp that shows when the algorithm was created.
        public let creationTime: TimeStamp

        public init(algorithmArn: String, algorithmDescription: String? = nil, algorithmName: String, algorithmStatus: AlgorithmStatus, creationTime: TimeStamp) {
            self.algorithmArn = algorithmArn
            self.algorithmDescription = algorithmDescription
            self.algorithmName = algorithmName
            self.algorithmStatus = algorithmStatus
            self.creationTime = creationTime
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmArn = "AlgorithmArn"
            case algorithmDescription = "AlgorithmDescription"
            case algorithmName = "AlgorithmName"
            case algorithmStatus = "AlgorithmStatus"
            case creationTime = "CreationTime"
        }
    }

    public struct AlgorithmValidationProfile: AWSEncodableShape & AWSDecodableShape {
        /// The name of the profile for the algorithm. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
        public let profileName: String
        /// The TrainingJobDefinition object that describes the training job that Amazon SageMaker runs to validate your algorithm.
        public let trainingJobDefinition: TrainingJobDefinition
        /// The TransformJobDefinition object that describes the transform job that Amazon SageMaker runs to validate your algorithm.
        public let transformJobDefinition: TransformJobDefinition?

        public init(profileName: String, trainingJobDefinition: TrainingJobDefinition, transformJobDefinition: TransformJobDefinition? = nil) {
            self.profileName = profileName
            self.trainingJobDefinition = trainingJobDefinition
            self.transformJobDefinition = transformJobDefinition
        }

        public func validate(name: String) throws {
            try self.validate(self.profileName, name: "profileName", parent: name, max: 63)
            try self.validate(self.profileName, name: "profileName", parent: name, min: 1)
            try self.validate(self.profileName, name: "profileName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.trainingJobDefinition.validate(name: "\(name).trainingJobDefinition")
            try self.transformJobDefinition?.validate(name: "\(name).transformJobDefinition")
        }

        private enum CodingKeys: String, CodingKey {
            case profileName = "ProfileName"
            case trainingJobDefinition = "TrainingJobDefinition"
            case transformJobDefinition = "TransformJobDefinition"
        }
    }

    public struct AlgorithmValidationSpecification: AWSEncodableShape & AWSDecodableShape {
        /// An array of AlgorithmValidationProfile objects, each of which specifies a training job and batch transform job that Amazon SageMaker runs to validate your algorithm.
        public let validationProfiles: [AlgorithmValidationProfile]
        /// The IAM roles that Amazon SageMaker uses to run the training jobs.
        public let validationRole: String

        public init(validationProfiles: [AlgorithmValidationProfile], validationRole: String) {
            self.validationProfiles = validationProfiles
            self.validationRole = validationRole
        }

        public func validate(name: String) throws {
            try self.validationProfiles.forEach {
                try $0.validate(name: "\(name).validationProfiles[]")
            }
            try self.validate(self.validationProfiles, name: "validationProfiles", parent: name, max: 1)
            try self.validate(self.validationProfiles, name: "validationProfiles", parent: name, min: 1)
            try self.validate(self.validationRole, name: "validationRole", parent: name, max: 2048)
            try self.validate(self.validationRole, name: "validationRole", parent: name, min: 20)
            try self.validate(self.validationRole, name: "validationRole", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case validationProfiles = "ValidationProfiles"
            case validationRole = "ValidationRole"
        }
    }

    public struct AnnotationConsolidationConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of a Lambda function implements the logic for annotation consolidation and to process output data. This parameter is required for all labeling jobs. For built-in task types, use one of the following Amazon SageMaker Ground Truth Lambda function ARNs for AnnotationConsolidationLambdaArn. For custom labeling workflows, see Post-annotation Lambda.   Bounding box - Finds the most similar boxes from different workers based on the Jaccard index of the boxes.    arn:aws:lambda:us-east-1:432418664414:function:ACS-BoundingBox   arn:aws:lambda:us-east-2:266458841044:function:ACS-BoundingBox   arn:aws:lambda:us-west-2:081040173940:function:ACS-BoundingBox   arn:aws:lambda:eu-west-1:568282634449:function:ACS-BoundingBox   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-BoundingBox   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-BoundingBox   arn:aws:lambda:ap-south-1:565803892007:function:ACS-BoundingBox   arn:aws:lambda:eu-central-1:203001061592:function:ACS-BoundingBox   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-BoundingBox   arn:aws:lambda:eu-west-2:487402164563:function:ACS-BoundingBox   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-BoundingBox   arn:aws:lambda:ca-central-1:918755190332:function:ACS-BoundingBox     Image classification - Uses a variant of the Expectation Maximization approach to estimate the true class of an image based on annotations from individual workers.    arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClass   arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClass   arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClass   arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClass   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClass   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClass   arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClass   arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClass   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClass   arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClass   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClass   arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClass     Multi-label image classification - Uses a variant of the Expectation Maximization approach to estimate the true classes of an image based on annotations from individual workers.    arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClassMultiLabel   arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClassMultiLabel   arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClassMultiLabel   arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClassMultiLabel   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClassMultiLabel   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClassMultiLabel   arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClassMultiLabel   arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClassMultiLabel   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClassMultiLabel   arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClassMultiLabel   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClassMultiLabel   arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClassMultiLabel     Semantic segmentation - Treats each pixel in an image as a multi-class classification and treats pixel annotations from workers as "votes" for the correct label.    arn:aws:lambda:us-east-1:432418664414:function:ACS-SemanticSegmentation   arn:aws:lambda:us-east-2:266458841044:function:ACS-SemanticSegmentation   arn:aws:lambda:us-west-2:081040173940:function:ACS-SemanticSegmentation   arn:aws:lambda:eu-west-1:568282634449:function:ACS-SemanticSegmentation   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-SemanticSegmentation   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-SemanticSegmentation   arn:aws:lambda:ap-south-1:565803892007:function:ACS-SemanticSegmentation   arn:aws:lambda:eu-central-1:203001061592:function:ACS-SemanticSegmentation   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-SemanticSegmentation   arn:aws:lambda:eu-west-2:487402164563:function:ACS-SemanticSegmentation   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-SemanticSegmentation   arn:aws:lambda:ca-central-1:918755190332:function:ACS-SemanticSegmentation     Text classification - Uses a variant of the Expectation Maximization approach to estimate the true class of text based on annotations from individual workers.    arn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClass   arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClass   arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClass   arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClass   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClass   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClass   arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClass   arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClass   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClass   arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClass   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClass   arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClass     Multi-label text classification - Uses a variant of the Expectation Maximization approach to estimate the true classes of text based on annotations from individual workers.    arn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClassMultiLabel   arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClassMultiLabel   arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClassMultiLabel   arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClassMultiLabel   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClassMultiLabel   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClassMultiLabel   arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClassMultiLabel   arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClassMultiLabel   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClassMultiLabel   arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClassMultiLabel   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClassMultiLabel   arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClassMultiLabel     Named entity recognition - Groups similar selections and calculates aggregate boundaries, resolving to most-assigned label.    arn:aws:lambda:us-east-1:432418664414:function:ACS-NamedEntityRecognition   arn:aws:lambda:us-east-2:266458841044:function:ACS-NamedEntityRecognition   arn:aws:lambda:us-west-2:081040173940:function:ACS-NamedEntityRecognition   arn:aws:lambda:eu-west-1:568282634449:function:ACS-NamedEntityRecognition   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-NamedEntityRecognition   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-NamedEntityRecognition   arn:aws:lambda:ap-south-1:565803892007:function:ACS-NamedEntityRecognition   arn:aws:lambda:eu-central-1:203001061592:function:ACS-NamedEntityRecognition   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-NamedEntityRecognition   arn:aws:lambda:eu-west-2:487402164563:function:ACS-NamedEntityRecognition   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-NamedEntityRecognition   arn:aws:lambda:ca-central-1:918755190332:function:ACS-NamedEntityRecognition     Named entity recognition - Groups similar selections and calculates aggregate boundaries, resolving to most-assigned label.    arn:aws:lambda:us-east-1:432418664414:function:ACS-NamedEntityRecognition   arn:aws:lambda:us-east-2:266458841044:function:ACS-NamedEntityRecognition   arn:aws:lambda:us-west-2:081040173940:function:ACS-NamedEntityRecognition   arn:aws:lambda:eu-west-1:568282634449:function:ACS-NamedEntityRecognition   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-NamedEntityRecognition   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-NamedEntityRecognition   arn:aws:lambda:ap-south-1:565803892007:function:ACS-NamedEntityRecognition   arn:aws:lambda:eu-central-1:203001061592:function:ACS-NamedEntityRecognition   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-NamedEntityRecognition   arn:aws:lambda:eu-west-2:487402164563:function:ACS-NamedEntityRecognition   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-NamedEntityRecognition   arn:aws:lambda:ca-central-1:918755190332:function:ACS-NamedEntityRecognition     Video Classification - Use this task type when you need workers to classify videos using predefined labels that you specify. Workers are shown videos and are asked to choose one label for each video.    arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoMultiClass   arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoMultiClass   arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoMultiClass   arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoMultiClass   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoMultiClass   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoMultiClass   arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoMultiClass   arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoMultiClass   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoMultiClass   arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoMultiClass   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoMultiClass   arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoMultiClass     Video Frame Object Detection - Use this task type to have workers identify and locate objects in a sequence of video frames (images extracted from a video) using bounding boxes. For example, you can use this task to ask workers to identify and localize various objects in a series of video frames, such as cars, bikes, and pedestrians.    arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectDetection   arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectDetection   arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectDetection   arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectDetection   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectDetection   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectDetection   arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectDetection   arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectDetection   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectDetection   arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectDetection   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectDetection   arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectDetection     Video Frame Object Tracking - Use this task type to have workers track the movement of objects in a sequence of video frames (images extracted from a video) using bounding boxes. For example, you can use this task to ask workers to track the movement of objects, such as cars, bikes, and pedestrians.     arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectTracking   arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectTracking   arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectTracking   arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectTracking   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectTracking   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectTracking   arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectTracking   arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectTracking   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectTracking   arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectTracking   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectTracking   arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectTracking     3D point cloud object detection - Use this task type when you want workers to classify objects in a 3D point cloud by drawing 3D cuboids around objects. For example, you can use this task type to ask workers to identify different types of objects in a point cloud, such as cars, bikes, and pedestrians.    arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectDetection   arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectDetection   arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectDetection   arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectDetection   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectDetection   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectDetection   arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectDetection   arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectDetection   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectDetection   arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectDetection   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectDetection   arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectDetection     3D point cloud object tracking - Use this task type when you want workers to draw 3D cuboids around objects that appear in a sequence of 3D point cloud frames. For example, you can use this task type to ask workers to track the movement of vehicles across multiple point cloud frames.     arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectTracking   arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectTracking   arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectTracking   arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectTracking   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectTracking   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectTracking   arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectTracking   arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectTracking   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectTracking   arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectTracking   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectTracking   arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectTracking     3D point cloud semantic segmentation - Use this task type when you want workers to create a point-level semantic segmentation masks by painting objects in a 3D point cloud using different colors where each color is assigned to one of the classes you specify.    arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudSemanticSegmentation   arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudSemanticSegmentation   arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudSemanticSegmentation   arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudSemanticSegmentation   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudSemanticSegmentation   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudSemanticSegmentation   arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudSemanticSegmentation   arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudSemanticSegmentation   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudSemanticSegmentation   arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudSemanticSegmentation   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudSemanticSegmentation   arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudSemanticSegmentation     Use the following ARNs for Label Verification and Adjustment Jobs  Use label verification and adjustment jobs to review and adjust labels. To learn more, see Verify and Adjust Labels .  Semantic segmentation adjustment - Treats each pixel in an image as a multi-class classification and treats pixel adjusted annotations from workers as "votes" for the correct label.    arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentSemanticSegmentation   arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentSemanticSegmentation   arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentSemanticSegmentation   arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentSemanticSegmentation   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentSemanticSegmentation   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentSemanticSegmentation   arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentSemanticSegmentation   arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentSemanticSegmentation   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentSemanticSegmentation   arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentSemanticSegmentation   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentSemanticSegmentation   arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentSemanticSegmentation     Semantic segmentation verification - Uses a variant of the Expectation Maximization approach to estimate the true class of verification judgment for semantic segmentation labels based on annotations from individual workers.    arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationSemanticSegmentation   arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationSemanticSegmentation   arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationSemanticSegmentation   arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationSemanticSegmentation   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationSemanticSegmentation   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationSemanticSegmentation   arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationSemanticSegmentation   arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationSemanticSegmentation   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationSemanticSegmentation   arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationSemanticSegmentation   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationSemanticSegmentation   arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationSemanticSegmentation     Bounding box verification - Uses a variant of the Expectation Maximization approach to estimate the true class of verification judgement for bounding box labels based on annotations from individual workers.    arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationBoundingBox   arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationBoundingBox   arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationBoundingBox   arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationBoundingBox   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationBoundingBox   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationBoundingBox   arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationBoundingBox   arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationBoundingBox   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationBoundingBox   arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationBoundingBox   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationBoundingBox   arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationBoundingBox     Bounding box adjustment - Finds the most similar boxes from different workers based on the Jaccard index of the adjusted annotations.    arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentBoundingBox   arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentBoundingBox   arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentBoundingBox   arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentBoundingBox   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentBoundingBox   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentBoundingBox   arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentBoundingBox   arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentBoundingBox   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentBoundingBox   arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentBoundingBox   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentBoundingBox   arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentBoundingBox     Video Frame Object Detection Adjustment - Use this task type when you want workers to adjust bounding boxes that workers have added to video frames to classify and localize objects in a sequence of video frames.    arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectDetection   arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectDetection   arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectDetection   arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectDetection   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectDetection   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectDetection   arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectDetection   arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectDetection   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectDetection   arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectDetection   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectDetection   arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectDetection     Video Frame Object Tracking Adjustment - Use this task type when you want workers to adjust bounding boxes that workers have added to video frames to track object movement across a sequence of video frames.    arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectTracking   arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectTracking   arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectTracking   arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectTracking   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectTracking   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectTracking   arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectTracking   arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectTracking   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectTracking   arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectTracking   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectTracking   arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectTracking     3D point cloud object detection adjustment - Use this task type when you want workers to adjust 3D cuboids around objects in a 3D point cloud.     arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectDetection   arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectDetection   arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectDetection   arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectDetection   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectDetection   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectDetection   arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectDetection   arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectDetection   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectDetection   arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectDetection   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectDetection   arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectDetection     3D point cloud object tracking adjustment - Use this task type when you want workers to adjust 3D cuboids around objects that appear in a sequence of 3D point cloud frames.    arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectTracking   arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectTracking   arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectTracking   arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectTracking   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectTracking   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectTracking   arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectTracking   arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectTracking   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectTracking   arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectTracking   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectTracking   arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectTracking     3D point cloud semantic segmentation adjustment - Use this task type when you want workers to adjust a point-level semantic segmentation masks using a paint tool.    arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudSemanticSegmentation   arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudSemanticSegmentation   arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudSemanticSegmentation   arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudSemanticSegmentation   arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudSemanticSegmentation   arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudSemanticSegmentation   arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudSemanticSegmentation   arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudSemanticSegmentation   arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudSemanticSegmentation   arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudSemanticSegmentation   arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudSemanticSegmentation   arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        public let annotationConsolidationLambdaArn: String

        public init(annotationConsolidationLambdaArn: String) {
            self.annotationConsolidationLambdaArn = annotationConsolidationLambdaArn
        }

        public func validate(name: String) throws {
            try self.validate(self.annotationConsolidationLambdaArn, name: "annotationConsolidationLambdaArn", parent: name, max: 2048)
            try self.validate(self.annotationConsolidationLambdaArn, name: "annotationConsolidationLambdaArn", parent: name, pattern: "arn:aws[a-z\\-]*:lambda:[a-z]{2}-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_\\.]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?")
        }

        private enum CodingKeys: String, CodingKey {
            case annotationConsolidationLambdaArn = "AnnotationConsolidationLambdaArn"
        }
    }

    public struct AppDetails: AWSDecodableShape {
        /// The name of the app.
        public let appName: String?
        /// The type of app.
        public let appType: AppType?
        /// The creation time.
        public let creationTime: TimeStamp?
        /// The domain ID.
        public let domainId: String?
        /// The status.
        public let status: AppStatus?
        /// The user profile name.
        public let userProfileName: String?

        public init(appName: String? = nil, appType: AppType? = nil, creationTime: TimeStamp? = nil, domainId: String? = nil, status: AppStatus? = nil, userProfileName: String? = nil) {
            self.appName = appName
            self.appType = appType
            self.creationTime = creationTime
            self.domainId = domainId
            self.status = status
            self.userProfileName = userProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case appName = "AppName"
            case appType = "AppType"
            case creationTime = "CreationTime"
            case domainId = "DomainId"
            case status = "Status"
            case userProfileName = "UserProfileName"
        }
    }

    public struct AppSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The arguments for a container used to run a processing job.
        public let containerArguments: [String]?
        /// The entrypoint for a container used to run a processing job.
        public let containerEntrypoint: [String]?
        /// The container image to be run by the processing job.
        public let imageUri: String

        public init(containerArguments: [String]? = nil, containerEntrypoint: [String]? = nil, imageUri: String) {
            self.containerArguments = containerArguments
            self.containerEntrypoint = containerEntrypoint
            self.imageUri = imageUri
        }

        public func validate(name: String) throws {
            try self.containerArguments?.forEach {
                try validate($0, name: "containerArguments[]", parent: name, max: 256)
                try validate($0, name: "containerArguments[]", parent: name, pattern: ".*")
            }
            try self.validate(self.containerArguments, name: "containerArguments", parent: name, max: 100)
            try self.validate(self.containerArguments, name: "containerArguments", parent: name, min: 1)
            try self.containerEntrypoint?.forEach {
                try validate($0, name: "containerEntrypoint[]", parent: name, max: 256)
                try validate($0, name: "containerEntrypoint[]", parent: name, pattern: ".*")
            }
            try self.validate(self.containerEntrypoint, name: "containerEntrypoint", parent: name, max: 100)
            try self.validate(self.containerEntrypoint, name: "containerEntrypoint", parent: name, min: 1)
            try self.validate(self.imageUri, name: "imageUri", parent: name, max: 255)
            try self.validate(self.imageUri, name: "imageUri", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case containerArguments = "ContainerArguments"
            case containerEntrypoint = "ContainerEntrypoint"
            case imageUri = "ImageUri"
        }
    }

    public struct AssociateTrialComponentRequest: AWSEncodableShape {
        /// The name of the component to associated with the trial.
        public let trialComponentName: String
        /// The name of the trial to associate with.
        public let trialName: String

        public init(trialComponentName: String, trialName: String) {
            self.trialComponentName = trialComponentName
            self.trialName = trialName
        }

        public func validate(name: String) throws {
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, max: 82)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, min: 1)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.trialName, name: "trialName", parent: name, max: 82)
            try self.validate(self.trialName, name: "trialName", parent: name, min: 1)
            try self.validate(self.trialName, name: "trialName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case trialComponentName = "TrialComponentName"
            case trialName = "TrialName"
        }
    }

    public struct AssociateTrialComponentResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the trial.
        public let trialArn: String?
        /// The ARN of the trial component.
        public let trialComponentArn: String?

        public init(trialArn: String? = nil, trialComponentArn: String? = nil) {
            self.trialArn = trialArn
            self.trialComponentArn = trialComponentArn
        }

        private enum CodingKeys: String, CodingKey {
            case trialArn = "TrialArn"
            case trialComponentArn = "TrialComponentArn"
        }
    }

    public struct AutoMLCandidate: AWSDecodableShape {
        /// The candidate name.
        public let candidateName: String
        /// The candidate's status.
        public let candidateStatus: CandidateStatus
        /// The candidate's steps.
        public let candidateSteps: [AutoMLCandidateStep]
        /// The creation time.
        public let creationTime: TimeStamp
        /// The end time.
        public let endTime: TimeStamp?
        /// The failure reason.
        public let failureReason: String?
        public let finalAutoMLJobObjectiveMetric: FinalAutoMLJobObjectiveMetric?
        /// The inference containers.
        public let inferenceContainers: [AutoMLContainerDefinition]?
        /// The last modified time.
        public let lastModifiedTime: TimeStamp
        /// The objective status.
        public let objectiveStatus: ObjectiveStatus

        public init(candidateName: String, candidateStatus: CandidateStatus, candidateSteps: [AutoMLCandidateStep], creationTime: TimeStamp, endTime: TimeStamp? = nil, failureReason: String? = nil, finalAutoMLJobObjectiveMetric: FinalAutoMLJobObjectiveMetric? = nil, inferenceContainers: [AutoMLContainerDefinition]? = nil, lastModifiedTime: TimeStamp, objectiveStatus: ObjectiveStatus) {
            self.candidateName = candidateName
            self.candidateStatus = candidateStatus
            self.candidateSteps = candidateSteps
            self.creationTime = creationTime
            self.endTime = endTime
            self.failureReason = failureReason
            self.finalAutoMLJobObjectiveMetric = finalAutoMLJobObjectiveMetric
            self.inferenceContainers = inferenceContainers
            self.lastModifiedTime = lastModifiedTime
            self.objectiveStatus = objectiveStatus
        }

        private enum CodingKeys: String, CodingKey {
            case candidateName = "CandidateName"
            case candidateStatus = "CandidateStatus"
            case candidateSteps = "CandidateSteps"
            case creationTime = "CreationTime"
            case endTime = "EndTime"
            case failureReason = "FailureReason"
            case finalAutoMLJobObjectiveMetric = "FinalAutoMLJobObjectiveMetric"
            case inferenceContainers = "InferenceContainers"
            case lastModifiedTime = "LastModifiedTime"
            case objectiveStatus = "ObjectiveStatus"
        }
    }

    public struct AutoMLCandidateStep: AWSDecodableShape {
        /// The ARN for the Candidate's step.
        public let candidateStepArn: String
        /// The name for the Candidate's step.
        public let candidateStepName: String
        /// Whether the Candidate is at the transform, training, or processing step.
        public let candidateStepType: CandidateStepType

        public init(candidateStepArn: String, candidateStepName: String, candidateStepType: CandidateStepType) {
            self.candidateStepArn = candidateStepArn
            self.candidateStepName = candidateStepName
            self.candidateStepType = candidateStepType
        }

        private enum CodingKeys: String, CodingKey {
            case candidateStepArn = "CandidateStepArn"
            case candidateStepName = "CandidateStepName"
            case candidateStepType = "CandidateStepType"
        }
    }

    public struct AutoMLChannel: AWSEncodableShape & AWSDecodableShape {
        /// You can use Gzip or None. The default value is None.
        public let compressionType: CompressionType?
        /// The data source.
        public let dataSource: AutoMLDataSource
        /// The name of the target variable in supervised learning, a.k.a. 'y'.
        public let targetAttributeName: String

        public init(compressionType: CompressionType? = nil, dataSource: AutoMLDataSource, targetAttributeName: String) {
            self.compressionType = compressionType
            self.dataSource = dataSource
            self.targetAttributeName = targetAttributeName
        }

        public func validate(name: String) throws {
            try self.dataSource.validate(name: "\(name).dataSource")
            try self.validate(self.targetAttributeName, name: "targetAttributeName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case compressionType = "CompressionType"
            case dataSource = "DataSource"
            case targetAttributeName = "TargetAttributeName"
        }
    }

    public struct AutoMLContainerDefinition: AWSDecodableShape {
        /// Environment variables to set in the container. Refer to ContainerDefinition for more details.
        public let environment: [String: String]?
        /// The ECR path of the container. Refer to ContainerDefinition for more details.
        public let image: String
        /// The location of the model artifacts. Refer to ContainerDefinition for more details.
        public let modelDataUrl: String

        public init(environment: [String: String]? = nil, image: String, modelDataUrl: String) {
            self.environment = environment
            self.image = image
            self.modelDataUrl = modelDataUrl
        }

        private enum CodingKeys: String, CodingKey {
            case environment = "Environment"
            case image = "Image"
            case modelDataUrl = "ModelDataUrl"
        }
    }

    public struct AutoMLDataSource: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon S3 location of the input data.  The input data must be in CSV format and contain at least 1000 rows.
        public let s3DataSource: AutoMLS3DataSource

        public init(s3DataSource: AutoMLS3DataSource) {
            self.s3DataSource = s3DataSource
        }

        public func validate(name: String) throws {
            try self.s3DataSource.validate(name: "\(name).s3DataSource")
        }

        private enum CodingKeys: String, CodingKey {
            case s3DataSource = "S3DataSource"
        }
    }

    public struct AutoMLJobArtifacts: AWSDecodableShape {
        /// The URL to the notebook location.
        public let candidateDefinitionNotebookLocation: String?
        /// The URL to the notebook location.
        public let dataExplorationNotebookLocation: String?

        public init(candidateDefinitionNotebookLocation: String? = nil, dataExplorationNotebookLocation: String? = nil) {
            self.candidateDefinitionNotebookLocation = candidateDefinitionNotebookLocation
            self.dataExplorationNotebookLocation = dataExplorationNotebookLocation
        }

        private enum CodingKeys: String, CodingKey {
            case candidateDefinitionNotebookLocation = "CandidateDefinitionNotebookLocation"
            case dataExplorationNotebookLocation = "DataExplorationNotebookLocation"
        }
    }

    public struct AutoMLJobCompletionCriteria: AWSEncodableShape & AWSDecodableShape {
        /// The maximum time, in seconds, an AutoML job is allowed to wait for a trial to complete. It must be equal to or greater than MaxRuntimePerTrainingJobInSeconds.
        public let maxAutoMLJobRuntimeInSeconds: Int?
        /// The maximum number of times a training job is allowed to run.
        public let maxCandidates: Int?
        /// The maximum time, in seconds, a job is allowed to run.
        public let maxRuntimePerTrainingJobInSeconds: Int?

        public init(maxAutoMLJobRuntimeInSeconds: Int? = nil, maxCandidates: Int? = nil, maxRuntimePerTrainingJobInSeconds: Int? = nil) {
            self.maxAutoMLJobRuntimeInSeconds = maxAutoMLJobRuntimeInSeconds
            self.maxCandidates = maxCandidates
            self.maxRuntimePerTrainingJobInSeconds = maxRuntimePerTrainingJobInSeconds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxAutoMLJobRuntimeInSeconds, name: "maxAutoMLJobRuntimeInSeconds", parent: name, min: 1)
            try self.validate(self.maxCandidates, name: "maxCandidates", parent: name, min: 1)
            try self.validate(self.maxRuntimePerTrainingJobInSeconds, name: "maxRuntimePerTrainingJobInSeconds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxAutoMLJobRuntimeInSeconds = "MaxAutoMLJobRuntimeInSeconds"
            case maxCandidates = "MaxCandidates"
            case maxRuntimePerTrainingJobInSeconds = "MaxRuntimePerTrainingJobInSeconds"
        }
    }

    public struct AutoMLJobConfig: AWSEncodableShape & AWSDecodableShape {
        /// How long a job is allowed to run, or how many candidates a job is allowed to generate.
        public let completionCriteria: AutoMLJobCompletionCriteria?
        /// Security configuration for traffic encryption or Amazon VPC settings.
        public let securityConfig: AutoMLSecurityConfig?

        public init(completionCriteria: AutoMLJobCompletionCriteria? = nil, securityConfig: AutoMLSecurityConfig? = nil) {
            self.completionCriteria = completionCriteria
            self.securityConfig = securityConfig
        }

        public func validate(name: String) throws {
            try self.completionCriteria?.validate(name: "\(name).completionCriteria")
            try self.securityConfig?.validate(name: "\(name).securityConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case completionCriteria = "CompletionCriteria"
            case securityConfig = "SecurityConfig"
        }
    }

    public struct AutoMLJobObjective: AWSEncodableShape & AWSDecodableShape {
        /// The name of the objective metric used to measure the predictive quality of a machine learning system. This metric is optimized during training to provide the best estimate for model parameter values from data. Here are the options:    MSE: The mean squared error (MSE) is the average of the squared differences between the predicted and actual values. It is used for regression. MSE values are always positive, the better a model is at predicting the actual values the smaller the MSE value. When the data contains outliers, they tend to dominate the MSE which might cause subpar prediction performance.    Accuracy: The ratio of the number correctly classified items to the total number (correctly and incorrectly) classified. It is used for binary and multiclass classification. Measures how close the predicted class values are to the actual values. Accuracy values vary between zero and one, one being perfect accuracy and zero perfect inaccuracy.    F1: The F1 score is the harmonic mean of the precision and recall. It is used for binary classification into classes traditionally referred to as positive and negative. Predictions are said to be true when they match their actual (correct) class; false when they do not. Precision is the ratio of the true positive predictions to all positive predictions (including the false positives) in a data set and measures the quality of the prediction when it predicts the positive class. Recall (or sensitivity) is the ratio of the true positive predictions to all actual positive instances and measures how completely a model predicts the actual class members in a data set. The standard F1 score weighs precision and recall equally. But which metric is paramount typically depends on specific aspects of a problem. F1 scores vary between zero and one, one being the best possible performance and zero the worst.    AUC: The area under the curve (AUC) metric is used to compare and evaluate binary classification by algorithms such as logistic regression that return probabilities. A threshold is needed to map the probabilities into classifications. The relevant curve is the receiver operating characteristic curve that plots the true positive rate (TPR) of predictions (or recall) against the false positive rate (FPR) as a function of the threshold value, above which a prediction is considered positive. Increasing the threshold results in fewer false positives but more false negatives. AUC is the area under this receiver operating characteristic curve and so provides an aggregated measure of the model performance across all possible classification thresholds. The AUC score can also be interpreted as the probability that a randomly selected positive data point is more likely to be predicted positive than a randomly selected negative example. AUC scores vary between zero and one, one being perfect accuracy and one half not better than a random classifier. Values less that one half predict worse than a random predictor and such consistently bad predictors can be inverted to obtain better than random predictors.    F1macro: The F1macro score applies F1 scoring to multiclass classification. In this context, you have multiple classes to predict. You just calculate the precision and recall for each class as you did for the positive class in binary classification. Then used these values to calculate the F1 score for each class and average them to obtain the F1macro score. F1macro scores vary between zero and one, one being the best possible performance and zero the worst.   If you do not specify a metric explicitly, the default behavior is to automatically use:    MSE: for regression.    F1: for binary classification    Accuracy: for multiclass classification.
        public let metricName: AutoMLMetricEnum

        public init(metricName: AutoMLMetricEnum) {
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
        }
    }

    public struct AutoMLJobSummary: AWSDecodableShape {
        /// The ARN of the job.
        public let autoMLJobArn: String
        /// The name of the object you are requesting.
        public let autoMLJobName: String
        /// The job's secondary status.
        public let autoMLJobSecondaryStatus: AutoMLJobSecondaryStatus
        /// The job's status.
        public let autoMLJobStatus: AutoMLJobStatus
        /// When the job was created.
        public let creationTime: TimeStamp
        /// The end time of an AutoML job.
        public let endTime: TimeStamp?
        /// The failure reason of a job.
        public let failureReason: String?
        /// When the job was last modified.
        public let lastModifiedTime: TimeStamp

        public init(autoMLJobArn: String, autoMLJobName: String, autoMLJobSecondaryStatus: AutoMLJobSecondaryStatus, autoMLJobStatus: AutoMLJobStatus, creationTime: TimeStamp, endTime: TimeStamp? = nil, failureReason: String? = nil, lastModifiedTime: TimeStamp) {
            self.autoMLJobArn = autoMLJobArn
            self.autoMLJobName = autoMLJobName
            self.autoMLJobSecondaryStatus = autoMLJobSecondaryStatus
            self.autoMLJobStatus = autoMLJobStatus
            self.creationTime = creationTime
            self.endTime = endTime
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
        }

        private enum CodingKeys: String, CodingKey {
            case autoMLJobArn = "AutoMLJobArn"
            case autoMLJobName = "AutoMLJobName"
            case autoMLJobSecondaryStatus = "AutoMLJobSecondaryStatus"
            case autoMLJobStatus = "AutoMLJobStatus"
            case creationTime = "CreationTime"
            case endTime = "EndTime"
            case failureReason = "FailureReason"
            case lastModifiedTime = "LastModifiedTime"
        }
    }

    public struct AutoMLOutputDataConfig: AWSEncodableShape & AWSDecodableShape {
        /// The AWS KMS encryption key ID.
        public let kmsKeyId: String?
        /// The Amazon S3 output path. Must be 128 characters or less.
        public let s3OutputPath: String

        public init(kmsKeyId: String? = nil, s3OutputPath: String) {
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
        }

        public func validate(name: String) throws {
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, pattern: ".*")
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, max: 1024)
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case s3OutputPath = "S3OutputPath"
        }
    }

    public struct AutoMLS3DataSource: AWSEncodableShape & AWSDecodableShape {
        /// The data type.
        public let s3DataType: AutoMLS3DataType
        /// The URL to the Amazon S3 data source.
        public let s3Uri: String

        public init(s3DataType: AutoMLS3DataType, s3Uri: String) {
            self.s3DataType = s3DataType
            self.s3Uri = s3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, max: 1024)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case s3DataType = "S3DataType"
            case s3Uri = "S3Uri"
        }
    }

    public struct AutoMLSecurityConfig: AWSEncodableShape & AWSDecodableShape {
        /// Whether to use traffic encryption between the container layers.
        public let enableInterContainerTrafficEncryption: Bool?
        /// The key used to encrypt stored data.
        public let volumeKmsKeyId: String?
        /// VPC configuration.
        public let vpcConfig: VpcConfig?

        public init(enableInterContainerTrafficEncryption: Bool? = nil, volumeKmsKeyId: String? = nil, vpcConfig: VpcConfig? = nil) {
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.volumeKmsKeyId, name: "volumeKmsKeyId", parent: name, max: 2048)
            try self.validate(self.volumeKmsKeyId, name: "volumeKmsKeyId", parent: name, pattern: ".*")
            try self.vpcConfig?.validate(name: "\(name).vpcConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
            case volumeKmsKeyId = "VolumeKmsKeyId"
            case vpcConfig = "VpcConfig"
        }
    }

    public struct CaptureContentTypeHeader: AWSEncodableShape & AWSDecodableShape {
        public let csvContentTypes: [String]?
        public let jsonContentTypes: [String]?

        public init(csvContentTypes: [String]? = nil, jsonContentTypes: [String]? = nil) {
            self.csvContentTypes = csvContentTypes
            self.jsonContentTypes = jsonContentTypes
        }

        public func validate(name: String) throws {
            try self.csvContentTypes?.forEach {
                try validate($0, name: "csvContentTypes[]", parent: name, max: 256)
                try validate($0, name: "csvContentTypes[]", parent: name, min: 1)
                try validate($0, name: "csvContentTypes[]", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*\\/[a-zA-Z0-9](-*[a-zA-Z0-9.])*")
            }
            try self.validate(self.csvContentTypes, name: "csvContentTypes", parent: name, max: 10)
            try self.validate(self.csvContentTypes, name: "csvContentTypes", parent: name, min: 1)
            try self.jsonContentTypes?.forEach {
                try validate($0, name: "jsonContentTypes[]", parent: name, max: 256)
                try validate($0, name: "jsonContentTypes[]", parent: name, min: 1)
                try validate($0, name: "jsonContentTypes[]", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*\\/[a-zA-Z0-9](-*[a-zA-Z0-9.])*")
            }
            try self.validate(self.jsonContentTypes, name: "jsonContentTypes", parent: name, max: 10)
            try self.validate(self.jsonContentTypes, name: "jsonContentTypes", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case csvContentTypes = "CsvContentTypes"
            case jsonContentTypes = "JsonContentTypes"
        }
    }

    public struct CaptureOption: AWSEncodableShape & AWSDecodableShape {
        public let captureMode: CaptureMode

        public init(captureMode: CaptureMode) {
            self.captureMode = captureMode
        }

        private enum CodingKeys: String, CodingKey {
            case captureMode = "CaptureMode"
        }
    }

    public struct CategoricalParameterRange: AWSEncodableShape & AWSDecodableShape {
        /// The name of the categorical hyperparameter to tune.
        public let name: String
        /// A list of the categories for the hyperparameter.
        public let values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 256)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*")
            try self.values.forEach {
                try validate($0, name: "values[]", parent: name, max: 256)
                try validate($0, name: "values[]", parent: name, pattern: ".*")
            }
            try self.validate(self.values, name: "values", parent: name, max: 20)
            try self.validate(self.values, name: "values", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    public struct CategoricalParameterRangeSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The allowed categories for the hyperparameter.
        public let values: [String]

        public init(values: [String]) {
            self.values = values
        }

        public func validate(name: String) throws {
            try self.values.forEach {
                try validate($0, name: "values[]", parent: name, max: 256)
                try validate($0, name: "values[]", parent: name, pattern: ".*")
            }
            try self.validate(self.values, name: "values", parent: name, max: 20)
            try self.validate(self.values, name: "values", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
        }
    }

    public struct Channel: AWSEncodableShape & AWSDecodableShape {
        /// The name of the channel.
        public let channelName: String
        /// If training data is compressed, the compression type. The default value is None. CompressionType is used only in Pipe input mode. In File mode, leave this field unset or set it to None.
        public let compressionType: CompressionType?
        /// The MIME type of the data.
        public let contentType: String?
        /// The location of the channel data.
        public let dataSource: DataSource
        /// (Optional) The input mode to use for the data channel in a training job. If you don't set a value for InputMode, Amazon SageMaker uses the value set for TrainingInputMode. Use this parameter to override the TrainingInputMode setting in a AlgorithmSpecification request when you have a channel that needs a different input mode from the training job's general setting. To download the data from Amazon Simple Storage Service (Amazon S3) to the provisioned ML storage volume, and mount the directory to a Docker volume, use File input mode. To stream data directly from Amazon S3 to the container, choose Pipe input mode. To use a model for incremental training, choose File input model.
        public let inputMode: TrainingInputMode?
        ///  Specify RecordIO as the value when input data is in raw format but the training algorithm requires the RecordIO format. In this case, Amazon SageMaker wraps each individual S3 object in a RecordIO record. If the input data is already in RecordIO format, you don't need to set this attribute. For more information, see Create a Dataset Using RecordIO.  In File mode, leave this field unset or set it to None.
        public let recordWrapperType: RecordWrapper?
        /// A configuration for a shuffle option for input data in a channel. If you use S3Prefix for S3DataType, this shuffles the results of the S3 key prefix matches. If you use ManifestFile, the order of the S3 object references in the ManifestFile is shuffled. If you use AugmentedManifestFile, the order of the JSON lines in the AugmentedManifestFile is shuffled. The shuffling order is determined using the Seed value. For Pipe input mode, shuffling is done at the start of every epoch. With large datasets this ensures that the order of the training data is different for each epoch, it helps reduce bias and possible overfitting. In a multi-node training job when ShuffleConfig is combined with S3DataDistributionType of ShardedByS3Key, the data is shuffled across nodes so that the content sent to a particular node on the first epoch might be sent to a different node on the second epoch.
        public let shuffleConfig: ShuffleConfig?

        public init(channelName: String, compressionType: CompressionType? = nil, contentType: String? = nil, dataSource: DataSource, inputMode: TrainingInputMode? = nil, recordWrapperType: RecordWrapper? = nil, shuffleConfig: ShuffleConfig? = nil) {
            self.channelName = channelName
            self.compressionType = compressionType
            self.contentType = contentType
            self.dataSource = dataSource
            self.inputMode = inputMode
            self.recordWrapperType = recordWrapperType
            self.shuffleConfig = shuffleConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.channelName, name: "channelName", parent: name, max: 64)
            try self.validate(self.channelName, name: "channelName", parent: name, min: 1)
            try self.validate(self.channelName, name: "channelName", parent: name, pattern: "[A-Za-z0-9\\.\\-_]+")
            try self.validate(self.contentType, name: "contentType", parent: name, max: 256)
            try self.validate(self.contentType, name: "contentType", parent: name, pattern: ".*")
            try self.dataSource.validate(name: "\(name).dataSource")
        }

        private enum CodingKeys: String, CodingKey {
            case channelName = "ChannelName"
            case compressionType = "CompressionType"
            case contentType = "ContentType"
            case dataSource = "DataSource"
            case inputMode = "InputMode"
            case recordWrapperType = "RecordWrapperType"
            case shuffleConfig = "ShuffleConfig"
        }
    }

    public struct ChannelSpecification: AWSEncodableShape & AWSDecodableShape {
        /// A brief description of the channel.
        public let description: String?
        /// Indicates whether the channel is required by the algorithm.
        public let isRequired: Bool?
        /// The name of the channel.
        public let name: String
        /// The allowed compression types, if data compression is used.
        public let supportedCompressionTypes: [CompressionType]?
        /// The supported MIME types for the data.
        public let supportedContentTypes: [String]
        /// The allowed input mode, either FILE or PIPE. In FILE mode, Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used input mode. In PIPE mode, Amazon SageMaker streams input data from the source directly to your algorithm without using the EBS volume.
        public let supportedInputModes: [TrainingInputMode]

        public init(description: String? = nil, isRequired: Bool? = nil, name: String, supportedCompressionTypes: [CompressionType]? = nil, supportedContentTypes: [String], supportedInputModes: [TrainingInputMode]) {
            self.description = description
            self.isRequired = isRequired
            self.name = name
            self.supportedCompressionTypes = supportedCompressionTypes
            self.supportedContentTypes = supportedContentTypes
            self.supportedInputModes = supportedInputModes
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.validate(self.description, name: "description", parent: name, pattern: "[\\p{L}\\p{M}\\p{Z}\\p{S}\\p{N}\\p{P}]*")
            try self.validate(self.name, name: "name", parent: name, max: 64)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "[A-Za-z0-9\\.\\-_]+")
            try self.supportedContentTypes.forEach {
                try validate($0, name: "supportedContentTypes[]", parent: name, max: 256)
                try validate($0, name: "supportedContentTypes[]", parent: name, pattern: ".*")
            }
            try self.validate(self.supportedInputModes, name: "supportedInputModes", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case isRequired = "IsRequired"
            case name = "Name"
            case supportedCompressionTypes = "SupportedCompressionTypes"
            case supportedContentTypes = "SupportedContentTypes"
            case supportedInputModes = "SupportedInputModes"
        }
    }

    public struct CheckpointConfig: AWSEncodableShape & AWSDecodableShape {
        /// (Optional) The local directory where checkpoints are written. The default directory is /opt/ml/checkpoints/.
        public let localPath: String?
        /// Identifies the S3 path where you want Amazon SageMaker to store checkpoints. For example, s3://bucket-name/key-name-prefix.
        public let s3Uri: String

        public init(localPath: String? = nil, s3Uri: String) {
            self.localPath = localPath
            self.s3Uri = s3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.localPath, name: "localPath", parent: name, max: 4096)
            try self.validate(self.localPath, name: "localPath", parent: name, pattern: ".*")
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, max: 1024)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case localPath = "LocalPath"
            case s3Uri = "S3Uri"
        }
    }

    public struct CodeRepositorySummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Git repository.
        public let codeRepositoryArn: String
        /// The name of the Git repository.
        public let codeRepositoryName: String
        /// The date and time that the Git repository was created.
        public let creationTime: TimeStamp
        /// Configuration details for the Git repository, including the URL where it is located and the ARN of the AWS Secrets Manager secret that contains the credentials used to access the repository.
        public let gitConfig: GitConfig?
        /// The date and time that the Git repository was last modified.
        public let lastModifiedTime: TimeStamp

        public init(codeRepositoryArn: String, codeRepositoryName: String, creationTime: TimeStamp, gitConfig: GitConfig? = nil, lastModifiedTime: TimeStamp) {
            self.codeRepositoryArn = codeRepositoryArn
            self.codeRepositoryName = codeRepositoryName
            self.creationTime = creationTime
            self.gitConfig = gitConfig
            self.lastModifiedTime = lastModifiedTime
        }

        private enum CodingKeys: String, CodingKey {
            case codeRepositoryArn = "CodeRepositoryArn"
            case codeRepositoryName = "CodeRepositoryName"
            case creationTime = "CreationTime"
            case gitConfig = "GitConfig"
            case lastModifiedTime = "LastModifiedTime"
        }
    }

    public struct CognitoConfig: AWSEncodableShape & AWSDecodableShape {
        /// The client ID for your Amazon Cognito user pool.
        public let clientId: String
        /// A  user pool is a user directory in Amazon Cognito. With a user pool, your users can sign in to your web or mobile app through Amazon Cognito. Your users can also sign in through social identity providers like Google, Facebook, Amazon, or Apple, and through SAML identity providers.
        public let userPool: String

        public init(clientId: String, userPool: String) {
            self.clientId = clientId
            self.userPool = userPool
        }

        public func validate(name: String) throws {
            try self.validate(self.clientId, name: "clientId", parent: name, max: 128)
            try self.validate(self.clientId, name: "clientId", parent: name, min: 1)
            try self.validate(self.clientId, name: "clientId", parent: name, pattern: "[\\w+-]+")
            try self.validate(self.userPool, name: "userPool", parent: name, max: 55)
            try self.validate(self.userPool, name: "userPool", parent: name, min: 1)
            try self.validate(self.userPool, name: "userPool", parent: name, pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userPool = "UserPool"
        }
    }

    public struct CognitoMemberDefinition: AWSEncodableShape & AWSDecodableShape {
        /// An identifier for an application client. You must create the app client ID using Amazon Cognito.
        public let clientId: String
        /// An identifier for a user group.
        public let userGroup: String
        /// An identifier for a user pool. The user pool must be in the same region as the service that you are calling.
        public let userPool: String

        public init(clientId: String, userGroup: String, userPool: String) {
            self.clientId = clientId
            self.userGroup = userGroup
            self.userPool = userPool
        }

        public func validate(name: String) throws {
            try self.validate(self.clientId, name: "clientId", parent: name, max: 128)
            try self.validate(self.clientId, name: "clientId", parent: name, min: 1)
            try self.validate(self.clientId, name: "clientId", parent: name, pattern: "[\\w+-]+")
            try self.validate(self.userGroup, name: "userGroup", parent: name, max: 128)
            try self.validate(self.userGroup, name: "userGroup", parent: name, min: 1)
            try self.validate(self.userGroup, name: "userGroup", parent: name, pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            try self.validate(self.userPool, name: "userPool", parent: name, max: 55)
            try self.validate(self.userPool, name: "userPool", parent: name, min: 1)
            try self.validate(self.userPool, name: "userPool", parent: name, pattern: "[\\w-]+_[0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "ClientId"
            case userGroup = "UserGroup"
            case userPool = "UserPool"
        }
    }

    public struct CollectionConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The name of the tensor collection. The name must be unique relative to other rule configuration names.
        public let collectionName: String?
        /// Parameter values for the tensor collection. The allowed parameters are "name", "include_regex", "reduction_config", "save_config", "tensor_names", and "save_histogram".
        public let collectionParameters: [String: String]?

        public init(collectionName: String? = nil, collectionParameters: [String: String]? = nil) {
            self.collectionName = collectionName
            self.collectionParameters = collectionParameters
        }

        public func validate(name: String) throws {
            try self.validate(self.collectionName, name: "collectionName", parent: name, max: 256)
            try self.validate(self.collectionName, name: "collectionName", parent: name, min: 1)
            try self.validate(self.collectionName, name: "collectionName", parent: name, pattern: ".*")
            try self.collectionParameters?.forEach {
                try validate($0.key, name: "collectionParameters.key", parent: name, max: 256)
                try validate($0.key, name: "collectionParameters.key", parent: name, min: 1)
                try validate($0.key, name: "collectionParameters.key", parent: name, pattern: ".*")
                try validate($0.value, name: "collectionParameters[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "collectionParameters[\"\($0.key)\"]", parent: name, pattern: ".*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case collectionName = "CollectionName"
            case collectionParameters = "CollectionParameters"
        }
    }

    public struct CompilationJobSummary: AWSDecodableShape {
        /// The time when the model compilation job completed.
        public let compilationEndTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the model compilation job.
        public let compilationJobArn: String
        /// The name of the model compilation job that you want a summary for.
        public let compilationJobName: String
        /// The status of the model compilation job.
        public let compilationJobStatus: CompilationJobStatus
        /// The time when the model compilation job started.
        public let compilationStartTime: TimeStamp?
        /// The type of device that the model will run on after the compilation job has completed.
        public let compilationTargetDevice: TargetDevice?
        /// The type of accelerator that the model will run on after the compilation job has completed.
        public let compilationTargetPlatformAccelerator: TargetPlatformAccelerator?
        /// The type of architecture that the model will run on after the compilation job has completed.
        public let compilationTargetPlatformArch: TargetPlatformArch?
        /// The type of OS that the model will run on after the compilation job has completed.
        public let compilationTargetPlatformOs: TargetPlatformOs?
        /// The time when the model compilation job was created.
        public let creationTime: TimeStamp
        /// The time when the model compilation job was last modified.
        public let lastModifiedTime: TimeStamp?

        public init(compilationEndTime: TimeStamp? = nil, compilationJobArn: String, compilationJobName: String, compilationJobStatus: CompilationJobStatus, compilationStartTime: TimeStamp? = nil, compilationTargetDevice: TargetDevice? = nil, compilationTargetPlatformAccelerator: TargetPlatformAccelerator? = nil, compilationTargetPlatformArch: TargetPlatformArch? = nil, compilationTargetPlatformOs: TargetPlatformOs? = nil, creationTime: TimeStamp, lastModifiedTime: TimeStamp? = nil) {
            self.compilationEndTime = compilationEndTime
            self.compilationJobArn = compilationJobArn
            self.compilationJobName = compilationJobName
            self.compilationJobStatus = compilationJobStatus
            self.compilationStartTime = compilationStartTime
            self.compilationTargetDevice = compilationTargetDevice
            self.compilationTargetPlatformAccelerator = compilationTargetPlatformAccelerator
            self.compilationTargetPlatformArch = compilationTargetPlatformArch
            self.compilationTargetPlatformOs = compilationTargetPlatformOs
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
        }

        private enum CodingKeys: String, CodingKey {
            case compilationEndTime = "CompilationEndTime"
            case compilationJobArn = "CompilationJobArn"
            case compilationJobName = "CompilationJobName"
            case compilationJobStatus = "CompilationJobStatus"
            case compilationStartTime = "CompilationStartTime"
            case compilationTargetDevice = "CompilationTargetDevice"
            case compilationTargetPlatformAccelerator = "CompilationTargetPlatformAccelerator"
            case compilationTargetPlatformArch = "CompilationTargetPlatformArch"
            case compilationTargetPlatformOs = "CompilationTargetPlatformOs"
            case creationTime = "CreationTime"
            case lastModifiedTime = "LastModifiedTime"
        }
    }

    public struct ContainerDefinition: AWSEncodableShape & AWSDecodableShape {
        /// This parameter is ignored for models that contain only a PrimaryContainer. When a ContainerDefinition is part of an inference pipeline, the value of the parameter uniquely identifies the container for the purposes of logging and metrics. For information, see Use Logs and Metrics to Monitor an Inference Pipeline. If you don't specify a value for this parameter for a ContainerDefinition that is part of an inference pipeline, a unique name is automatically assigned based on the position of the ContainerDefinition in the pipeline. If you specify a value for the ContainerHostName for any ContainerDefinition that is part of an inference pipeline, you must specify a value for the ContainerHostName parameter of every ContainerDefinition in that pipeline.
        public let containerHostname: String?
        /// The environment variables to set in the Docker container. Each key and value in the Environment string to string map can have length of up to 1024. We support up to 16 entries in the map.
        public let environment: [String: String]?
        /// The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored. If you are using your own custom algorithm instead of an algorithm provided by Amazon SageMaker, the inference code must meet Amazon SageMaker requirements. Amazon SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information, see Using Your Own Algorithms with Amazon SageMaker
        public let image: String?
        /// Specifies whether the model container is in Amazon ECR or a private Docker registry in your Amazon Virtual Private Cloud (VPC). For information about storing containers in a private Docker registry, see Use a Private Docker Registry for Real-Time Inference Containers
        public let imageConfig: ImageConfig?
        /// Whether the container hosts a single model or multiple models.
        public let mode: ContainerMode?
        /// The S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix). The S3 path is required for Amazon SageMaker built-in algorithms, but not if you use your own algorithms. For more information on built-in algorithms, see Common Parameters.  If you provide a value for this parameter, Amazon SageMaker uses AWS Security Token Service to download model artifacts from the S3 path you provide. AWS STS is activated in your IAM user account by default. If you previously deactivated AWS STS for a region, you need to reactivate AWS STS for that region. For more information, see Activating and Deactivating AWS STS in an AWS Region in the AWS Identity and Access Management User Guide.  If you use a built-in algorithm to create a model, Amazon SageMaker requires that you provide a S3 path to the model artifacts in ModelDataUrl.
        public let modelDataUrl: String?
        /// The name or Amazon Resource Name (ARN) of the model package to use to create the model.
        public let modelPackageName: String?

        public init(containerHostname: String? = nil, environment: [String: String]? = nil, image: String? = nil, imageConfig: ImageConfig? = nil, mode: ContainerMode? = nil, modelDataUrl: String? = nil, modelPackageName: String? = nil) {
            self.containerHostname = containerHostname
            self.environment = environment
            self.image = image
            self.imageConfig = imageConfig
            self.mode = mode
            self.modelDataUrl = modelDataUrl
            self.modelPackageName = modelPackageName
        }

        public func validate(name: String) throws {
            try self.validate(self.containerHostname, name: "containerHostname", parent: name, max: 63)
            try self.validate(self.containerHostname, name: "containerHostname", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.environment?.forEach {
                try validate($0.key, name: "environment.key", parent: name, max: 1024)
                try validate($0.key, name: "environment.key", parent: name, pattern: "[a-zA-Z_][a-zA-Z0-9_]*")
                try validate($0.value, name: "environment[\"\($0.key)\"]", parent: name, max: 1024)
                try validate($0.value, name: "environment[\"\($0.key)\"]", parent: name, pattern: "[\\S\\s]*")
            }
            try self.validate(self.image, name: "image", parent: name, max: 255)
            try self.validate(self.image, name: "image", parent: name, pattern: "[\\S]+")
            try self.validate(self.modelDataUrl, name: "modelDataUrl", parent: name, max: 1024)
            try self.validate(self.modelDataUrl, name: "modelDataUrl", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
            try self.validate(self.modelPackageName, name: "modelPackageName", parent: name, max: 170)
            try self.validate(self.modelPackageName, name: "modelPackageName", parent: name, min: 1)
            try self.validate(self.modelPackageName, name: "modelPackageName", parent: name, pattern: "(arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:[a-z\\-]*\\/)?([a-zA-Z0-9]([a-zA-Z0-9-]){0,62})(?<!-)$")
        }

        private enum CodingKeys: String, CodingKey {
            case containerHostname = "ContainerHostname"
            case environment = "Environment"
            case image = "Image"
            case imageConfig = "ImageConfig"
            case mode = "Mode"
            case modelDataUrl = "ModelDataUrl"
            case modelPackageName = "ModelPackageName"
        }
    }

    public struct ContinuousParameterRange: AWSEncodableShape & AWSDecodableShape {
        /// The maximum value for the hyperparameter. The tuning job uses floating-point values between MinValue value and this value for tuning.
        public let maxValue: String
        /// The minimum value for the hyperparameter. The tuning job uses floating-point values between this value and MaxValuefor tuning.
        public let minValue: String
        /// The name of the continuous hyperparameter to tune.
        public let name: String
        /// The scale that hyperparameter tuning uses to search the hyperparameter range. For information about choosing a hyperparameter scale, see Hyperparameter Scaling. One of the following values:  Auto  Amazon SageMaker hyperparameter tuning chooses the best scale for the hyperparameter.  Linear  Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale.  Logarithmic  Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale. Logarithmic scaling works only for ranges that have only values greater than 0.  ReverseLogarithmic  Hyperparameter tuning searches the values in the hyperparameter range by using a reverse logarithmic scale. Reverse logarithmic scaling works only for ranges that are entirely within the range 0&lt;=x&lt;1.0.
        public let scalingType: HyperParameterScalingType?

        public init(maxValue: String, minValue: String, name: String, scalingType: HyperParameterScalingType? = nil) {
            self.maxValue = maxValue
            self.minValue = minValue
            self.name = name
            self.scalingType = scalingType
        }

        public func validate(name: String) throws {
            try self.validate(self.maxValue, name: "maxValue", parent: name, max: 256)
            try self.validate(self.maxValue, name: "maxValue", parent: name, pattern: ".*")
            try self.validate(self.minValue, name: "minValue", parent: name, max: 256)
            try self.validate(self.minValue, name: "minValue", parent: name, pattern: ".*")
            try self.validate(self.name, name: "name", parent: name, max: 256)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxValue = "MaxValue"
            case minValue = "MinValue"
            case name = "Name"
            case scalingType = "ScalingType"
        }
    }

    public struct ContinuousParameterRangeSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The maximum floating-point value allowed.
        public let maxValue: String
        /// The minimum floating-point value allowed.
        public let minValue: String

        public init(maxValue: String, minValue: String) {
            self.maxValue = maxValue
            self.minValue = minValue
        }

        public func validate(name: String) throws {
            try self.validate(self.maxValue, name: "maxValue", parent: name, max: 256)
            try self.validate(self.maxValue, name: "maxValue", parent: name, pattern: ".*")
            try self.validate(self.minValue, name: "minValue", parent: name, max: 256)
            try self.validate(self.minValue, name: "minValue", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxValue = "MaxValue"
            case minValue = "MinValue"
        }
    }

    public struct CreateAlgorithmInput: AWSEncodableShape {
        /// A description of the algorithm.
        public let algorithmDescription: String?
        /// The name of the algorithm.
        public let algorithmName: String
        /// Whether to certify the algorithm so that it can be listed in AWS Marketplace.
        public let certifyForMarketplace: Bool?
        /// Specifies details about inference jobs that the algorithm runs, including the following:   The Amazon ECR paths of containers that contain the inference code and model artifacts.   The instance types that the algorithm supports for transform jobs and real-time endpoints used for inference.   The input and output content formats that the algorithm supports for inference.
        public let inferenceSpecification: InferenceSpecification?
        /// Specifies details about training jobs run by this algorithm, including the following:   The Amazon ECR path of the container and the version digest of the algorithm.   The hyperparameters that the algorithm supports.   The instance types that the algorithm supports for training.   Whether the algorithm supports distributed training.   The metrics that the algorithm emits to Amazon CloudWatch.   Which metrics that the algorithm emits can be used as the objective metric for hyperparameter tuning jobs.   The input channels that the algorithm supports for training data. For example, an algorithm might support train, validation, and test channels.
        public let trainingSpecification: TrainingSpecification
        /// Specifies configurations for one or more training jobs and that Amazon SageMaker runs to test the algorithm's training code and, optionally, one or more batch transform jobs that Amazon SageMaker runs to test the algorithm's inference code.
        public let validationSpecification: AlgorithmValidationSpecification?

        public init(algorithmDescription: String? = nil, algorithmName: String, certifyForMarketplace: Bool? = nil, inferenceSpecification: InferenceSpecification? = nil, trainingSpecification: TrainingSpecification, validationSpecification: AlgorithmValidationSpecification? = nil) {
            self.algorithmDescription = algorithmDescription
            self.algorithmName = algorithmName
            self.certifyForMarketplace = certifyForMarketplace
            self.inferenceSpecification = inferenceSpecification
            self.trainingSpecification = trainingSpecification
            self.validationSpecification = validationSpecification
        }

        public func validate(name: String) throws {
            try self.validate(self.algorithmDescription, name: "algorithmDescription", parent: name, max: 1024)
            try self.validate(self.algorithmDescription, name: "algorithmDescription", parent: name, pattern: "[\\p{L}\\p{M}\\p{Z}\\p{S}\\p{N}\\p{P}]*")
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, max: 63)
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, min: 1)
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.inferenceSpecification?.validate(name: "\(name).inferenceSpecification")
            try self.trainingSpecification.validate(name: "\(name).trainingSpecification")
            try self.validationSpecification?.validate(name: "\(name).validationSpecification")
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmDescription = "AlgorithmDescription"
            case algorithmName = "AlgorithmName"
            case certifyForMarketplace = "CertifyForMarketplace"
            case inferenceSpecification = "InferenceSpecification"
            case trainingSpecification = "TrainingSpecification"
            case validationSpecification = "ValidationSpecification"
        }
    }

    public struct CreateAlgorithmOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the new algorithm.
        public let algorithmArn: String

        public init(algorithmArn: String) {
            self.algorithmArn = algorithmArn
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmArn = "AlgorithmArn"
        }
    }

    public struct CreateAppRequest: AWSEncodableShape {
        /// The name of the app.
        public let appName: String
        /// The type of app.
        public let appType: AppType
        /// The domain ID.
        public let domainId: String
        /// The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        public let resourceSpec: ResourceSpec?
        /// Each tag consists of a key and an optional value. Tag keys must be unique per resource.
        public let tags: [Tag]?
        /// The user profile name.
        public let userProfileName: String

        public init(appName: String, appType: AppType, domainId: String, resourceSpec: ResourceSpec? = nil, tags: [Tag]? = nil, userProfileName: String) {
            self.appName = appName
            self.appType = appType
            self.domainId = domainId
            self.resourceSpec = resourceSpec
            self.tags = tags
            self.userProfileName = userProfileName
        }

        public func validate(name: String) throws {
            try self.validate(self.appName, name: "appName", parent: name, max: 63)
            try self.validate(self.appName, name: "appName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.domainId, name: "domainId", parent: name, max: 63)
            try self.resourceSpec?.validate(name: "\(name).resourceSpec")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, max: 63)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case appName = "AppName"
            case appType = "AppType"
            case domainId = "DomainId"
            case resourceSpec = "ResourceSpec"
            case tags = "Tags"
            case userProfileName = "UserProfileName"
        }
    }

    public struct CreateAppResponse: AWSDecodableShape {
        /// The App's Amazon Resource Name (ARN).
        public let appArn: String?

        public init(appArn: String? = nil) {
            self.appArn = appArn
        }

        private enum CodingKeys: String, CodingKey {
            case appArn = "AppArn"
        }
    }

    public struct CreateAutoMLJobRequest: AWSEncodableShape {
        /// Contains CompletionCriteria and SecurityConfig.
        public let autoMLJobConfig: AutoMLJobConfig?
        /// Identifies an Autopilot job. Must be unique to your account and is case-insensitive.
        public let autoMLJobName: String
        /// Defines the objective of a an AutoML job. You provide a AutoMLJobObjective$MetricName and Autopilot infers whether to minimize or maximize it. If a metric is not specified, the most commonly used ObjectiveMetric for problem type is automaically selected.
        public let autoMLJobObjective: AutoMLJobObjective?
        /// Generates possible candidates without training a model. A candidate is a combination of data preprocessors, algorithms, and algorithm parameter settings.
        public let generateCandidateDefinitionsOnly: Bool?
        /// Similar to InputDataConfig supported by Tuning. Format(s) supported: CSV. Minimum of 1000 rows.
        public let inputDataConfig: [AutoMLChannel]
        /// Similar to OutputDataConfig supported by Tuning. Format(s) supported: CSV.
        public let outputDataConfig: AutoMLOutputDataConfig
        /// Defines the kind of preprocessing and algorithms intended for the candidates. Options include: BinaryClassification, MulticlassClassification, and Regression.
        public let problemType: ProblemType?
        /// The ARN of the role that is used to access the data.
        public let roleArn: String
        /// Each tag consists of a key and an optional value. Tag keys must be unique per resource.
        public let tags: [Tag]?

        public init(autoMLJobConfig: AutoMLJobConfig? = nil, autoMLJobName: String, autoMLJobObjective: AutoMLJobObjective? = nil, generateCandidateDefinitionsOnly: Bool? = nil, inputDataConfig: [AutoMLChannel], outputDataConfig: AutoMLOutputDataConfig, problemType: ProblemType? = nil, roleArn: String, tags: [Tag]? = nil) {
            self.autoMLJobConfig = autoMLJobConfig
            self.autoMLJobName = autoMLJobName
            self.autoMLJobObjective = autoMLJobObjective
            self.generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnly
            self.inputDataConfig = inputDataConfig
            self.outputDataConfig = outputDataConfig
            self.problemType = problemType
            self.roleArn = roleArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.autoMLJobConfig?.validate(name: "\(name).autoMLJobConfig")
            try self.validate(self.autoMLJobName, name: "autoMLJobName", parent: name, max: 32)
            try self.validate(self.autoMLJobName, name: "autoMLJobName", parent: name, min: 1)
            try self.validate(self.autoMLJobName, name: "autoMLJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.inputDataConfig.forEach {
                try $0.validate(name: "\(name).inputDataConfig[]")
            }
            try self.validate(self.inputDataConfig, name: "inputDataConfig", parent: name, max: 20)
            try self.validate(self.inputDataConfig, name: "inputDataConfig", parent: name, min: 1)
            try self.outputDataConfig.validate(name: "\(name).outputDataConfig")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 2048)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 20)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case autoMLJobConfig = "AutoMLJobConfig"
            case autoMLJobName = "AutoMLJobName"
            case autoMLJobObjective = "AutoMLJobObjective"
            case generateCandidateDefinitionsOnly = "GenerateCandidateDefinitionsOnly"
            case inputDataConfig = "InputDataConfig"
            case outputDataConfig = "OutputDataConfig"
            case problemType = "ProblemType"
            case roleArn = "RoleArn"
            case tags = "Tags"
        }
    }

    public struct CreateAutoMLJobResponse: AWSDecodableShape {
        /// When a job is created, it is assigned a unique ARN.
        public let autoMLJobArn: String

        public init(autoMLJobArn: String) {
            self.autoMLJobArn = autoMLJobArn
        }

        private enum CodingKeys: String, CodingKey {
            case autoMLJobArn = "AutoMLJobArn"
        }
    }

    public struct CreateCodeRepositoryInput: AWSEncodableShape {
        /// The name of the Git repository. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
        public let codeRepositoryName: String
        /// Specifies details about the repository, including the URL where the repository is located, the default branch, and credentials to use to access the repository.
        public let gitConfig: GitConfig

        public init(codeRepositoryName: String, gitConfig: GitConfig) {
            self.codeRepositoryName = codeRepositoryName
            self.gitConfig = gitConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.codeRepositoryName, name: "codeRepositoryName", parent: name, max: 63)
            try self.validate(self.codeRepositoryName, name: "codeRepositoryName", parent: name, min: 1)
            try self.validate(self.codeRepositoryName, name: "codeRepositoryName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.gitConfig.validate(name: "\(name).gitConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case codeRepositoryName = "CodeRepositoryName"
            case gitConfig = "GitConfig"
        }
    }

    public struct CreateCodeRepositoryOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the new repository.
        public let codeRepositoryArn: String

        public init(codeRepositoryArn: String) {
            self.codeRepositoryArn = codeRepositoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case codeRepositoryArn = "CodeRepositoryArn"
        }
    }

    public struct CreateCompilationJobRequest: AWSEncodableShape {
        /// A name for the model compilation job. The name must be unique within the AWS Region and within your AWS account.
        public let compilationJobName: String
        /// Provides information about the location of input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.
        public let inputConfig: InputConfig
        /// Provides information about the output location for the compiled model and the target device the model runs on.
        public let outputConfig: OutputConfig
        /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.  During model compilation, Amazon SageMaker needs your permission to:   Read input data from an S3 bucket   Write model artifacts to an S3 bucket   Write logs to Amazon CloudWatch Logs   Publish metrics to Amazon CloudWatch   You grant permissions for all of these tasks to an IAM role. To pass this role to Amazon SageMaker, the caller of this API must have the iam:PassRole permission. For more information, see Amazon SageMaker Roles.
        public let roleArn: String
        /// Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.
        public let stoppingCondition: StoppingCondition

        public init(compilationJobName: String, inputConfig: InputConfig, outputConfig: OutputConfig, roleArn: String, stoppingCondition: StoppingCondition) {
            self.compilationJobName = compilationJobName
            self.inputConfig = inputConfig
            self.outputConfig = outputConfig
            self.roleArn = roleArn
            self.stoppingCondition = stoppingCondition
        }

        public func validate(name: String) throws {
            try self.validate(self.compilationJobName, name: "compilationJobName", parent: name, max: 63)
            try self.validate(self.compilationJobName, name: "compilationJobName", parent: name, min: 1)
            try self.validate(self.compilationJobName, name: "compilationJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.inputConfig.validate(name: "\(name).inputConfig")
            try self.outputConfig.validate(name: "\(name).outputConfig")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 2048)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 20)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
            try self.stoppingCondition.validate(name: "\(name).stoppingCondition")
        }

        private enum CodingKeys: String, CodingKey {
            case compilationJobName = "CompilationJobName"
            case inputConfig = "InputConfig"
            case outputConfig = "OutputConfig"
            case roleArn = "RoleArn"
            case stoppingCondition = "StoppingCondition"
        }
    }

    public struct CreateCompilationJobResponse: AWSDecodableShape {
        /// If the action is successful, the service sends back an HTTP 200 response. Amazon SageMaker returns the following data in JSON format:    CompilationJobArn: The Amazon Resource Name (ARN) of the compiled job.
        public let compilationJobArn: String

        public init(compilationJobArn: String) {
            self.compilationJobArn = compilationJobArn
        }

        private enum CodingKeys: String, CodingKey {
            case compilationJobArn = "CompilationJobArn"
        }
    }

    public struct CreateDomainRequest: AWSEncodableShape {
        /// The mode of authentication that members use to access the domain.
        public let authMode: AuthMode
        /// The default user settings.
        public let defaultUserSettings: UserSettings
        /// A name for the domain.
        public let domainName: String
        /// The AWS Key Management Service (KMS) encryption key ID. Encryption with a customer master key (CMK) is not supported.
        public let homeEfsFileSystemKmsKeyId: String?
        /// The VPC subnets to use for communication with the EFS volume.
        public let subnetIds: [String]
        /// Tags to associated with the Domain. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API.
        public let tags: [Tag]?
        /// The ID of the Amazon Virtual Private Cloud (VPC) to use for communication with the EFS volume.
        public let vpcId: String

        public init(authMode: AuthMode, defaultUserSettings: UserSettings, domainName: String, homeEfsFileSystemKmsKeyId: String? = nil, subnetIds: [String], tags: [Tag]? = nil, vpcId: String) {
            self.authMode = authMode
            self.defaultUserSettings = defaultUserSettings
            self.domainName = domainName
            self.homeEfsFileSystemKmsKeyId = homeEfsFileSystemKmsKeyId
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcId = vpcId
        }

        public func validate(name: String) throws {
            try self.defaultUserSettings.validate(name: "\(name).defaultUserSettings")
            try self.validate(self.domainName, name: "domainName", parent: name, max: 63)
            try self.validate(self.domainName, name: "domainName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.homeEfsFileSystemKmsKeyId, name: "homeEfsFileSystemKmsKeyId", parent: name, max: 2048)
            try self.validate(self.homeEfsFileSystemKmsKeyId, name: "homeEfsFileSystemKmsKeyId", parent: name, pattern: ".*")
            try self.subnetIds.forEach {
                try validate($0, name: "subnetIds[]", parent: name, max: 32)
                try validate($0, name: "subnetIds[]", parent: name, pattern: "[-0-9a-zA-Z]+")
            }
            try self.validate(self.subnetIds, name: "subnetIds", parent: name, max: 16)
            try self.validate(self.subnetIds, name: "subnetIds", parent: name, min: 1)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.validate(self.vpcId, name: "vpcId", parent: name, max: 32)
            try self.validate(self.vpcId, name: "vpcId", parent: name, pattern: "[-0-9a-zA-Z]+")
        }

        private enum CodingKeys: String, CodingKey {
            case authMode = "AuthMode"
            case defaultUserSettings = "DefaultUserSettings"
            case domainName = "DomainName"
            case homeEfsFileSystemKmsKeyId = "HomeEfsFileSystemKmsKeyId"
            case subnetIds = "SubnetIds"
            case tags = "Tags"
            case vpcId = "VpcId"
        }
    }

    public struct CreateDomainResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the created domain.
        public let domainArn: String?
        /// The URL to the created domain.
        public let url: String?

        public init(domainArn: String? = nil, url: String? = nil) {
            self.domainArn = domainArn
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case domainArn = "DomainArn"
            case url = "Url"
        }
    }

    public struct CreateEndpointConfigInput: AWSEncodableShape {
        public let dataCaptureConfig: DataCaptureConfig?
        /// The name of the endpoint configuration. You specify this name in a CreateEndpoint request.
        public let endpointConfigName: String
        /// The Amazon Resource Name (ARN) of a AWS Key Management Service key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint. The KmsKeyId can be any of the following formats:    Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias    The KMS key policy must grant permission to the IAM role that you specify in your CreateEndpoint, UpdateEndpoint requests. For more information, refer to the AWS Key Management Service section Using Key Policies in AWS KMS    Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a KmsKeyId when using an instance type with local storage. If any of the models that you specify in the ProductionVariants parameter use nitro-based instances with local storage, do not specify a value for the KmsKeyId parameter. If you specify a value for KmsKeyId when using any nitro-based instances with local storage, the call to CreateEndpointConfig fails. For a list of instance types that support local instance storage, see Instance Store Volumes. For more information about local instance storage encryption, see SSD Instance Store Volumes.
        public let kmsKeyId: String?
        /// An list of ProductionVariant objects, one for each model that you want to host at this endpoint.
        public let productionVariants: [ProductionVariant]
        /// A list of key-value pairs. For more information, see Using Cost Allocation Tags in the  AWS Billing and Cost Management User Guide.
        public let tags: [Tag]?

        public init(dataCaptureConfig: DataCaptureConfig? = nil, endpointConfigName: String, kmsKeyId: String? = nil, productionVariants: [ProductionVariant], tags: [Tag]? = nil) {
            self.dataCaptureConfig = dataCaptureConfig
            self.endpointConfigName = endpointConfigName
            self.kmsKeyId = kmsKeyId
            self.productionVariants = productionVariants
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.dataCaptureConfig?.validate(name: "\(name).dataCaptureConfig")
            try self.validate(self.endpointConfigName, name: "endpointConfigName", parent: name, max: 63)
            try self.validate(self.endpointConfigName, name: "endpointConfigName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, pattern: ".*")
            try self.productionVariants.forEach {
                try $0.validate(name: "\(name).productionVariants[]")
            }
            try self.validate(self.productionVariants, name: "productionVariants", parent: name, max: 10)
            try self.validate(self.productionVariants, name: "productionVariants", parent: name, min: 1)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case dataCaptureConfig = "DataCaptureConfig"
            case endpointConfigName = "EndpointConfigName"
            case kmsKeyId = "KmsKeyId"
            case productionVariants = "ProductionVariants"
            case tags = "Tags"
        }
    }

    public struct CreateEndpointConfigOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the endpoint configuration.
        public let endpointConfigArn: String

        public init(endpointConfigArn: String) {
            self.endpointConfigArn = endpointConfigArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigArn = "EndpointConfigArn"
        }
    }

    public struct CreateEndpointInput: AWSEncodableShape {
        /// The name of an endpoint configuration. For more information, see CreateEndpointConfig.
        public let endpointConfigName: String
        /// The name of the endpoint. The name must be unique within an AWS Region in your AWS account.
        public let endpointName: String
        /// An array of key-value pairs. For more information, see Using Cost Allocation Tagsin the AWS Billing and Cost Management User Guide.
        public let tags: [Tag]?

        public init(endpointConfigName: String, endpointName: String, tags: [Tag]? = nil) {
            self.endpointConfigName = endpointConfigName
            self.endpointName = endpointName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.endpointConfigName, name: "endpointConfigName", parent: name, max: 63)
            try self.validate(self.endpointConfigName, name: "endpointConfigName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.endpointName, name: "endpointName", parent: name, max: 63)
            try self.validate(self.endpointName, name: "endpointName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigName = "EndpointConfigName"
            case endpointName = "EndpointName"
            case tags = "Tags"
        }
    }

    public struct CreateEndpointOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the endpoint.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct CreateExperimentRequest: AWSEncodableShape {
        /// The description of the experiment.
        public let description: String?
        /// The name of the experiment as displayed. The name doesn't need to be unique. If you don't specify DisplayName, the value in ExperimentName is displayed.
        public let displayName: String?
        /// The name of the experiment. The name must be unique in your AWS account and is not case-sensitive.
        public let experimentName: String
        /// A list of tags to associate with the experiment. You can use Search API to search on the tags.
        public let tags: [Tag]?

        public init(description: String? = nil, displayName: String? = nil, experimentName: String, tags: [Tag]? = nil) {
            self.description = description
            self.displayName = displayName
            self.experimentName = experimentName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 3072)
            try self.validate(self.description, name: "description", parent: name, pattern: ".*")
            try self.validate(self.displayName, name: "displayName", parent: name, max: 82)
            try self.validate(self.displayName, name: "displayName", parent: name, min: 1)
            try self.validate(self.displayName, name: "displayName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.experimentName, name: "experimentName", parent: name, max: 82)
            try self.validate(self.experimentName, name: "experimentName", parent: name, min: 1)
            try self.validate(self.experimentName, name: "experimentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case displayName = "DisplayName"
            case experimentName = "ExperimentName"
            case tags = "Tags"
        }
    }

    public struct CreateExperimentResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the experiment.
        public let experimentArn: String?

        public init(experimentArn: String? = nil) {
            self.experimentArn = experimentArn
        }

        private enum CodingKeys: String, CodingKey {
            case experimentArn = "ExperimentArn"
        }
    }

    public struct CreateFlowDefinitionRequest: AWSEncodableShape {
        /// The name of your flow definition.
        public let flowDefinitionName: String
        /// An object containing information about the events that trigger a human workflow.
        public let humanLoopActivationConfig: HumanLoopActivationConfig?
        /// An object containing information about the tasks the human reviewers will perform.
        public let humanLoopConfig: HumanLoopConfig
        /// Container for configuring the source of human task requests. Use to specify if Amazon Rekognition or Amazon Textract is used as an integration source.
        public let humanLoopRequestSource: HumanLoopRequestSource?
        /// An object containing information about where the human review results will be uploaded.
        public let outputConfig: FlowDefinitionOutputConfig
        /// The Amazon Resource Name (ARN) of the role needed to call other services on your behalf. For example, arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole-20180111T151298.
        public let roleArn: String
        /// An array of key-value pairs that contain metadata to help you categorize and organize a flow definition. Each tag consists of a key and a value, both of which you define.
        public let tags: [Tag]?

        public init(flowDefinitionName: String, humanLoopActivationConfig: HumanLoopActivationConfig? = nil, humanLoopConfig: HumanLoopConfig, humanLoopRequestSource: HumanLoopRequestSource? = nil, outputConfig: FlowDefinitionOutputConfig, roleArn: String, tags: [Tag]? = nil) {
            self.flowDefinitionName = flowDefinitionName
            self.humanLoopActivationConfig = humanLoopActivationConfig
            self.humanLoopConfig = humanLoopConfig
            self.humanLoopRequestSource = humanLoopRequestSource
            self.outputConfig = outputConfig
            self.roleArn = roleArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.flowDefinitionName, name: "flowDefinitionName", parent: name, max: 63)
            try self.validate(self.flowDefinitionName, name: "flowDefinitionName", parent: name, min: 1)
            try self.validate(self.flowDefinitionName, name: "flowDefinitionName", parent: name, pattern: "^[a-z0-9](-*[a-z0-9])*")
            try self.humanLoopActivationConfig?.validate(name: "\(name).humanLoopActivationConfig")
            try self.humanLoopConfig.validate(name: "\(name).humanLoopConfig")
            try self.outputConfig.validate(name: "\(name).outputConfig")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 2048)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 20)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case flowDefinitionName = "FlowDefinitionName"
            case humanLoopActivationConfig = "HumanLoopActivationConfig"
            case humanLoopConfig = "HumanLoopConfig"
            case humanLoopRequestSource = "HumanLoopRequestSource"
            case outputConfig = "OutputConfig"
            case roleArn = "RoleArn"
            case tags = "Tags"
        }
    }

    public struct CreateFlowDefinitionResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the flow definition you create.
        public let flowDefinitionArn: String

        public init(flowDefinitionArn: String) {
            self.flowDefinitionArn = flowDefinitionArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowDefinitionArn = "FlowDefinitionArn"
        }
    }

    public struct CreateHumanTaskUiRequest: AWSEncodableShape {
        /// The name of the user interface you are creating.
        public let humanTaskUiName: String
        /// An array of key-value pairs that contain metadata to help you categorize and organize a human review workflow user interface. Each tag consists of a key and a value, both of which you define.
        public let tags: [Tag]?
        public let uiTemplate: UiTemplate

        public init(humanTaskUiName: String, tags: [Tag]? = nil, uiTemplate: UiTemplate) {
            self.humanTaskUiName = humanTaskUiName
            self.tags = tags
            self.uiTemplate = uiTemplate
        }

        public func validate(name: String) throws {
            try self.validate(self.humanTaskUiName, name: "humanTaskUiName", parent: name, max: 63)
            try self.validate(self.humanTaskUiName, name: "humanTaskUiName", parent: name, min: 1)
            try self.validate(self.humanTaskUiName, name: "humanTaskUiName", parent: name, pattern: "^[a-z0-9](-*[a-z0-9])*")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.uiTemplate.validate(name: "\(name).uiTemplate")
        }

        private enum CodingKeys: String, CodingKey {
            case humanTaskUiName = "HumanTaskUiName"
            case tags = "Tags"
            case uiTemplate = "UiTemplate"
        }
    }

    public struct CreateHumanTaskUiResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the human review workflow user interface you create.
        public let humanTaskUiArn: String

        public init(humanTaskUiArn: String) {
            self.humanTaskUiArn = humanTaskUiArn
        }

        private enum CodingKeys: String, CodingKey {
            case humanTaskUiArn = "HumanTaskUiArn"
        }
    }

    public struct CreateHyperParameterTuningJobRequest: AWSEncodableShape {
        /// The HyperParameterTuningJobConfig object that describes the tuning job, including the search strategy, the objective metric used to evaluate training jobs, ranges of parameters to search, and resource limits for the tuning job. For more information, see How Hyperparameter Tuning Works.
        public let hyperParameterTuningJobConfig: HyperParameterTuningJobConfig
        /// The name of the tuning job. This name is the prefix for the names of all training jobs that this tuning job launches. The name must be unique within the same AWS account and AWS Region. The name must have { } to { } characters. Valid characters are a-z, A-Z, 0-9, and : + = @ _ % - (hyphen). The name is not case sensitive.
        public let hyperParameterTuningJobName: String
        /// An array of key-value pairs. You can use tags to categorize your AWS resources in different ways, for example, by purpose, owner, or environment. For more information, see AWS Tagging Strategies. Tags that you specify for the tuning job are also added to all training jobs that the tuning job launches.
        public let tags: [Tag]?
        /// The HyperParameterTrainingJobDefinition object that describes the training jobs that this tuning job launches, including static hyperparameters, input data configuration, output data configuration, resource configuration, and stopping condition.
        public let trainingJobDefinition: HyperParameterTrainingJobDefinition?
        /// A list of the HyperParameterTrainingJobDefinition objects launched for this tuning job.
        public let trainingJobDefinitions: [HyperParameterTrainingJobDefinition]?
        /// Specifies the configuration for starting the hyperparameter tuning job using one or more previous tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job. All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric. If you specify IDENTICAL_DATA_AND_ALGORITHM as the WarmStartType value for the warm start configuration, the training job that performs the best in the new tuning job is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.  All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.
        public let warmStartConfig: HyperParameterTuningJobWarmStartConfig?

        public init(hyperParameterTuningJobConfig: HyperParameterTuningJobConfig, hyperParameterTuningJobName: String, tags: [Tag]? = nil, trainingJobDefinition: HyperParameterTrainingJobDefinition? = nil, trainingJobDefinitions: [HyperParameterTrainingJobDefinition]? = nil, warmStartConfig: HyperParameterTuningJobWarmStartConfig? = nil) {
            self.hyperParameterTuningJobConfig = hyperParameterTuningJobConfig
            self.hyperParameterTuningJobName = hyperParameterTuningJobName
            self.tags = tags
            self.trainingJobDefinition = trainingJobDefinition
            self.trainingJobDefinitions = trainingJobDefinitions
            self.warmStartConfig = warmStartConfig
        }

        public func validate(name: String) throws {
            try self.hyperParameterTuningJobConfig.validate(name: "\(name).hyperParameterTuningJobConfig")
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, max: 32)
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, min: 1)
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.trainingJobDefinition?.validate(name: "\(name).trainingJobDefinition")
            try self.trainingJobDefinitions?.forEach {
                try $0.validate(name: "\(name).trainingJobDefinitions[]")
            }
            try self.validate(self.trainingJobDefinitions, name: "trainingJobDefinitions", parent: name, max: 10)
            try self.validate(self.trainingJobDefinitions, name: "trainingJobDefinitions", parent: name, min: 1)
            try self.warmStartConfig?.validate(name: "\(name).warmStartConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case hyperParameterTuningJobConfig = "HyperParameterTuningJobConfig"
            case hyperParameterTuningJobName = "HyperParameterTuningJobName"
            case tags = "Tags"
            case trainingJobDefinition = "TrainingJobDefinition"
            case trainingJobDefinitions = "TrainingJobDefinitions"
            case warmStartConfig = "WarmStartConfig"
        }
    }

    public struct CreateHyperParameterTuningJobResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the tuning job. Amazon SageMaker assigns an ARN to a hyperparameter tuning job when you create it.
        public let hyperParameterTuningJobArn: String

        public init(hyperParameterTuningJobArn: String) {
            self.hyperParameterTuningJobArn = hyperParameterTuningJobArn
        }

        private enum CodingKeys: String, CodingKey {
            case hyperParameterTuningJobArn = "HyperParameterTuningJobArn"
        }
    }

    public struct CreateLabelingJobRequest: AWSEncodableShape {
        /// Configures the labeling task and how it is presented to workers; including, but not limited to price, keywords, and batch size (task count).
        public let humanTaskConfig: HumanTaskConfig
        /// Input data for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects.
        public let inputConfig: LabelingJobInputConfig
        /// The attribute name to use for the label in the output manifest file. This is the key for the key/value pair formed with the label that a worker assigns to the object. The name can't end with "-metadata". If you are running a semantic segmentation labeling job, the attribute name must end with "-ref". If you are running any other kind of labeling job, the attribute name must not end with "-ref".
        public let labelAttributeName: String
        /// The S3 URL of the file that defines the categories used to label the data objects. For 3D point cloud task types, see Create a Labeling Category Configuration File for 3D Point Cloud Labeling Jobs.  For all other built-in task types and custom tasks, your label category configuration file must be a JSON file in the following format. Identify the labels you want to use by replacing label_1, label_2,...,label_n with your label categories.  {    "document-version": "2018-11-28"    "labels": [    {    "label": "label_1"    },    {    "label": "label_2"    },    ...    {    "label": "label_n"    }    ]   }
        public let labelCategoryConfigS3Uri: String?
        /// Configures the information required to perform automated data labeling.
        public let labelingJobAlgorithmsConfig: LabelingJobAlgorithmsConfig?
        /// The name of the labeling job. This name is used to identify the job in a list of labeling jobs.
        public let labelingJobName: String
        /// The location of the output data and the AWS Key Management Service key ID for the key used to encrypt the output data, if any.
        public let outputConfig: LabelingJobOutputConfig
        /// The Amazon Resource Number (ARN) that Amazon SageMaker assumes to perform tasks on your behalf during data labeling. You must grant this role the necessary permissions so that Amazon SageMaker can successfully complete data labeling.
        public let roleArn: String
        /// A set of conditions for stopping the labeling job. If any of the conditions are met, the job is automatically stopped. You can use these conditions to control the cost of data labeling.
        public let stoppingConditions: LabelingJobStoppingConditions?
        /// An array of key/value pairs. For more information, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
        public let tags: [Tag]?

        public init(humanTaskConfig: HumanTaskConfig, inputConfig: LabelingJobInputConfig, labelAttributeName: String, labelCategoryConfigS3Uri: String? = nil, labelingJobAlgorithmsConfig: LabelingJobAlgorithmsConfig? = nil, labelingJobName: String, outputConfig: LabelingJobOutputConfig, roleArn: String, stoppingConditions: LabelingJobStoppingConditions? = nil, tags: [Tag]? = nil) {
            self.humanTaskConfig = humanTaskConfig
            self.inputConfig = inputConfig
            self.labelAttributeName = labelAttributeName
            self.labelCategoryConfigS3Uri = labelCategoryConfigS3Uri
            self.labelingJobAlgorithmsConfig = labelingJobAlgorithmsConfig
            self.labelingJobName = labelingJobName
            self.outputConfig = outputConfig
            self.roleArn = roleArn
            self.stoppingConditions = stoppingConditions
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.humanTaskConfig.validate(name: "\(name).humanTaskConfig")
            try self.inputConfig.validate(name: "\(name).inputConfig")
            try self.validate(self.labelAttributeName, name: "labelAttributeName", parent: name, max: 127)
            try self.validate(self.labelAttributeName, name: "labelAttributeName", parent: name, min: 1)
            try self.validate(self.labelAttributeName, name: "labelAttributeName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.labelCategoryConfigS3Uri, name: "labelCategoryConfigS3Uri", parent: name, max: 1024)
            try self.validate(self.labelCategoryConfigS3Uri, name: "labelCategoryConfigS3Uri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
            try self.labelingJobAlgorithmsConfig?.validate(name: "\(name).labelingJobAlgorithmsConfig")
            try self.validate(self.labelingJobName, name: "labelingJobName", parent: name, max: 63)
            try self.validate(self.labelingJobName, name: "labelingJobName", parent: name, min: 1)
            try self.validate(self.labelingJobName, name: "labelingJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.outputConfig.validate(name: "\(name).outputConfig")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 2048)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 20)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
            try self.stoppingConditions?.validate(name: "\(name).stoppingConditions")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case humanTaskConfig = "HumanTaskConfig"
            case inputConfig = "InputConfig"
            case labelAttributeName = "LabelAttributeName"
            case labelCategoryConfigS3Uri = "LabelCategoryConfigS3Uri"
            case labelingJobAlgorithmsConfig = "LabelingJobAlgorithmsConfig"
            case labelingJobName = "LabelingJobName"
            case outputConfig = "OutputConfig"
            case roleArn = "RoleArn"
            case stoppingConditions = "StoppingConditions"
            case tags = "Tags"
        }
    }

    public struct CreateLabelingJobResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the labeling job. You use this ARN to identify the labeling job.
        public let labelingJobArn: String

        public init(labelingJobArn: String) {
            self.labelingJobArn = labelingJobArn
        }

        private enum CodingKeys: String, CodingKey {
            case labelingJobArn = "LabelingJobArn"
        }
    }

    public struct CreateModelInput: AWSEncodableShape {
        /// Specifies the containers in the inference pipeline.
        public let containers: [ContainerDefinition]?
        /// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
        public let enableNetworkIsolation: Bool?
        /// The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker can assume to access model artifacts and docker image for deployment on ML compute instances or for batch transform jobs. Deploying on ML compute instances is part of model hosting. For more information, see Amazon SageMaker Roles.   To be able to pass this role to Amazon SageMaker, the caller of this API must have the iam:PassRole permission.
        public let executionRoleArn: String
        /// The name of the new model.
        public let modelName: String
        /// The location of the primary docker image containing inference code, associated artifacts, and custom environment map that the inference code uses when the model is deployed for predictions.
        public let primaryContainer: ContainerDefinition?
        /// An array of key-value pairs. For more information, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
        public let tags: [Tag]?
        /// A VpcConfig object that specifies the VPC that you want your model to connect to. Control access to and from your model container by configuring the VPC. VpcConfig is used in hosting services and in batch transform. For more information, see Protect Endpoints by Using an Amazon Virtual Private Cloud and Protect Data in Batch Transform Jobs by Using an Amazon Virtual Private Cloud.
        public let vpcConfig: VpcConfig?

        public init(containers: [ContainerDefinition]? = nil, enableNetworkIsolation: Bool? = nil, executionRoleArn: String, modelName: String, primaryContainer: ContainerDefinition? = nil, tags: [Tag]? = nil, vpcConfig: VpcConfig? = nil) {
            self.containers = containers
            self.enableNetworkIsolation = enableNetworkIsolation
            self.executionRoleArn = executionRoleArn
            self.modelName = modelName
            self.primaryContainer = primaryContainer
            self.tags = tags
            self.vpcConfig = vpcConfig
        }

        public func validate(name: String) throws {
            try self.containers?.forEach {
                try $0.validate(name: "\(name).containers[]")
            }
            try self.validate(self.containers, name: "containers", parent: name, max: 5)
            try self.validate(self.executionRoleArn, name: "executionRoleArn", parent: name, max: 2048)
            try self.validate(self.executionRoleArn, name: "executionRoleArn", parent: name, min: 20)
            try self.validate(self.executionRoleArn, name: "executionRoleArn", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
            try self.validate(self.modelName, name: "modelName", parent: name, max: 63)
            try self.validate(self.modelName, name: "modelName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.primaryContainer?.validate(name: "\(name).primaryContainer")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.vpcConfig?.validate(name: "\(name).vpcConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case containers = "Containers"
            case enableNetworkIsolation = "EnableNetworkIsolation"
            case executionRoleArn = "ExecutionRoleArn"
            case modelName = "ModelName"
            case primaryContainer = "PrimaryContainer"
            case tags = "Tags"
            case vpcConfig = "VpcConfig"
        }
    }

    public struct CreateModelOutput: AWSDecodableShape {
        /// The ARN of the model created in Amazon SageMaker.
        public let modelArn: String

        public init(modelArn: String) {
            self.modelArn = modelArn
        }

        private enum CodingKeys: String, CodingKey {
            case modelArn = "ModelArn"
        }
    }

    public struct CreateModelPackageInput: AWSEncodableShape {
        /// Whether to certify the model package for listing on AWS Marketplace.
        public let certifyForMarketplace: Bool?
        /// Specifies details about inference jobs that can be run with models based on this model package, including the following:   The Amazon ECR paths of containers that contain the inference code and model artifacts.   The instance types that the model package supports for transform jobs and real-time endpoints used for inference.   The input and output content formats that the model package supports for inference.
        public let inferenceSpecification: InferenceSpecification?
        /// A description of the model package.
        public let modelPackageDescription: String?
        /// The name of the model package. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
        public let modelPackageName: String
        /// Details about the algorithm that was used to create the model package.
        public let sourceAlgorithmSpecification: SourceAlgorithmSpecification?
        /// Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package.
        public let validationSpecification: ModelPackageValidationSpecification?

        public init(certifyForMarketplace: Bool? = nil, inferenceSpecification: InferenceSpecification? = nil, modelPackageDescription: String? = nil, modelPackageName: String, sourceAlgorithmSpecification: SourceAlgorithmSpecification? = nil, validationSpecification: ModelPackageValidationSpecification? = nil) {
            self.certifyForMarketplace = certifyForMarketplace
            self.inferenceSpecification = inferenceSpecification
            self.modelPackageDescription = modelPackageDescription
            self.modelPackageName = modelPackageName
            self.sourceAlgorithmSpecification = sourceAlgorithmSpecification
            self.validationSpecification = validationSpecification
        }

        public func validate(name: String) throws {
            try self.inferenceSpecification?.validate(name: "\(name).inferenceSpecification")
            try self.validate(self.modelPackageDescription, name: "modelPackageDescription", parent: name, max: 1024)
            try self.validate(self.modelPackageDescription, name: "modelPackageDescription", parent: name, pattern: "[\\p{L}\\p{M}\\p{Z}\\p{S}\\p{N}\\p{P}]*")
            try self.validate(self.modelPackageName, name: "modelPackageName", parent: name, max: 63)
            try self.validate(self.modelPackageName, name: "modelPackageName", parent: name, min: 1)
            try self.validate(self.modelPackageName, name: "modelPackageName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.sourceAlgorithmSpecification?.validate(name: "\(name).sourceAlgorithmSpecification")
            try self.validationSpecification?.validate(name: "\(name).validationSpecification")
        }

        private enum CodingKeys: String, CodingKey {
            case certifyForMarketplace = "CertifyForMarketplace"
            case inferenceSpecification = "InferenceSpecification"
            case modelPackageDescription = "ModelPackageDescription"
            case modelPackageName = "ModelPackageName"
            case sourceAlgorithmSpecification = "SourceAlgorithmSpecification"
            case validationSpecification = "ValidationSpecification"
        }
    }

    public struct CreateModelPackageOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the new model package.
        public let modelPackageArn: String

        public init(modelPackageArn: String) {
            self.modelPackageArn = modelPackageArn
        }

        private enum CodingKeys: String, CodingKey {
            case modelPackageArn = "ModelPackageArn"
        }
    }

    public struct CreateMonitoringScheduleRequest: AWSEncodableShape {
        /// The configuration object that specifies the monitoring schedule and defines the monitoring job.
        public let monitoringScheduleConfig: MonitoringScheduleConfig
        /// The name of the monitoring schedule. The name must be unique within an AWS Region within an AWS account.
        public let monitoringScheduleName: String
        /// (Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
        public let tags: [Tag]?

        public init(monitoringScheduleConfig: MonitoringScheduleConfig, monitoringScheduleName: String, tags: [Tag]? = nil) {
            self.monitoringScheduleConfig = monitoringScheduleConfig
            self.monitoringScheduleName = monitoringScheduleName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.monitoringScheduleConfig.validate(name: "\(name).monitoringScheduleConfig")
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, max: 63)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, min: 1)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case monitoringScheduleConfig = "MonitoringScheduleConfig"
            case monitoringScheduleName = "MonitoringScheduleName"
            case tags = "Tags"
        }
    }

    public struct CreateMonitoringScheduleResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the monitoring schedule.
        public let monitoringScheduleArn: String

        public init(monitoringScheduleArn: String) {
            self.monitoringScheduleArn = monitoringScheduleArn
        }

        private enum CodingKeys: String, CodingKey {
            case monitoringScheduleArn = "MonitoringScheduleArn"
        }
    }

    public struct CreateNotebookInstanceInput: AWSEncodableShape {
        /// A list of Elastic Inference (EI) instance types to associate with this notebook instance. Currently, only one instance type can be associated with a notebook instance. For more information, see Using Elastic Inference in Amazon SageMaker.
        public let acceleratorTypes: [NotebookInstanceAcceleratorType]?
        /// An array of up to three Git repositories to associate with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in AWS CodeCommit or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see Associating Git Repositories with Amazon SageMaker Notebook Instances.
        public let additionalCodeRepositories: [String]?
        /// A Git repository to associate with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in AWS CodeCommit or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see Associating Git Repositories with Amazon SageMaker Notebook Instances.
        public let defaultCodeRepository: String?
        /// Sets whether Amazon SageMaker provides internet access to the notebook instance. If you set this to Disabled this notebook instance will be able to access resources only in your VPC, and will not be able to connect to Amazon SageMaker training and endpoint services unless your configure a NAT Gateway in your VPC. For more information, see Notebook Instances Are Internet-Enabled by Default. You can set the value of this parameter to Disabled only if you set a value for the SubnetId parameter.
        public let directInternetAccess: DirectInternetAccess?
        /// The type of ML compute instance to launch for the notebook instance.
        public let instanceType: InstanceType
        /// The Amazon Resource Name (ARN) of a AWS Key Management Service key that Amazon SageMaker uses to encrypt data on the storage volume attached to your notebook instance. The KMS key you provide must be enabled. For information, see Enabling and Disabling Keys in the AWS Key Management Service Developer Guide.
        public let kmsKeyId: String?
        /// The name of a lifecycle configuration to associate with the notebook instance. For information about lifestyle configurations, see Step 2.1: (Optional) Customize a Notebook Instance.
        public let lifecycleConfigName: String?
        /// The name of the new notebook instance.
        public let notebookInstanceName: String
        ///  When you send any requests to AWS resources from the notebook instance, Amazon SageMaker assumes this role to perform tasks on your behalf. You must grant this role necessary permissions so Amazon SageMaker can perform these tasks. The policy must allow the Amazon SageMaker service principal (sagemaker.amazonaws.com) permissions to assume this role. For more information, see Amazon SageMaker Roles.   To be able to pass this role to Amazon SageMaker, the caller of this API must have the iam:PassRole permission.
        public let roleArn: String
        /// Whether root access is enabled or disabled for users of the notebook instance. The default value is Enabled.  Lifecycle configurations need root access to be able to set up a notebook instance. Because of this, lifecycle configurations associated with a notebook instance always run with root access even if you disable root access for users.
        public let rootAccess: RootAccess?
        /// The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be for the same VPC as specified in the subnet.
        public let securityGroupIds: [String]?
        /// The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance.
        public let subnetId: String?
        /// A list of tags to associate with the notebook instance. You can add tags later by using the CreateTags API.
        public let tags: [Tag]?
        /// The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB.
        public let volumeSizeInGB: Int?

        public init(acceleratorTypes: [NotebookInstanceAcceleratorType]? = nil, additionalCodeRepositories: [String]? = nil, defaultCodeRepository: String? = nil, directInternetAccess: DirectInternetAccess? = nil, instanceType: InstanceType, kmsKeyId: String? = nil, lifecycleConfigName: String? = nil, notebookInstanceName: String, roleArn: String, rootAccess: RootAccess? = nil, securityGroupIds: [String]? = nil, subnetId: String? = nil, tags: [Tag]? = nil, volumeSizeInGB: Int? = nil) {
            self.acceleratorTypes = acceleratorTypes
            self.additionalCodeRepositories = additionalCodeRepositories
            self.defaultCodeRepository = defaultCodeRepository
            self.directInternetAccess = directInternetAccess
            self.instanceType = instanceType
            self.kmsKeyId = kmsKeyId
            self.lifecycleConfigName = lifecycleConfigName
            self.notebookInstanceName = notebookInstanceName
            self.roleArn = roleArn
            self.rootAccess = rootAccess
            self.securityGroupIds = securityGroupIds
            self.subnetId = subnetId
            self.tags = tags
            self.volumeSizeInGB = volumeSizeInGB
        }

        public func validate(name: String) throws {
            try self.additionalCodeRepositories?.forEach {
                try validate($0, name: "additionalCodeRepositories[]", parent: name, max: 1024)
                try validate($0, name: "additionalCodeRepositories[]", parent: name, min: 1)
                try validate($0, name: "additionalCodeRepositories[]", parent: name, pattern: "^https://([^/]+)/?(.*)$|^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            }
            try self.validate(self.additionalCodeRepositories, name: "additionalCodeRepositories", parent: name, max: 3)
            try self.validate(self.defaultCodeRepository, name: "defaultCodeRepository", parent: name, max: 1024)
            try self.validate(self.defaultCodeRepository, name: "defaultCodeRepository", parent: name, min: 1)
            try self.validate(self.defaultCodeRepository, name: "defaultCodeRepository", parent: name, pattern: "^https://([^/]+)/?(.*)$|^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, pattern: ".*")
            try self.validate(self.lifecycleConfigName, name: "lifecycleConfigName", parent: name, max: 63)
            try self.validate(self.lifecycleConfigName, name: "lifecycleConfigName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, max: 63)
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 2048)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 20)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
            try self.securityGroupIds?.forEach {
                try validate($0, name: "securityGroupIds[]", parent: name, max: 32)
                try validate($0, name: "securityGroupIds[]", parent: name, pattern: "[-0-9a-zA-Z]+")
            }
            try self.validate(self.securityGroupIds, name: "securityGroupIds", parent: name, max: 5)
            try self.validate(self.subnetId, name: "subnetId", parent: name, max: 32)
            try self.validate(self.subnetId, name: "subnetId", parent: name, pattern: "[-0-9a-zA-Z]+")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.validate(self.volumeSizeInGB, name: "volumeSizeInGB", parent: name, max: 16384)
            try self.validate(self.volumeSizeInGB, name: "volumeSizeInGB", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case acceleratorTypes = "AcceleratorTypes"
            case additionalCodeRepositories = "AdditionalCodeRepositories"
            case defaultCodeRepository = "DefaultCodeRepository"
            case directInternetAccess = "DirectInternetAccess"
            case instanceType = "InstanceType"
            case kmsKeyId = "KmsKeyId"
            case lifecycleConfigName = "LifecycleConfigName"
            case notebookInstanceName = "NotebookInstanceName"
            case roleArn = "RoleArn"
            case rootAccess = "RootAccess"
            case securityGroupIds = "SecurityGroupIds"
            case subnetId = "SubnetId"
            case tags = "Tags"
            case volumeSizeInGB = "VolumeSizeInGB"
        }
    }

    public struct CreateNotebookInstanceLifecycleConfigInput: AWSEncodableShape {
        /// The name of the lifecycle configuration.
        public let notebookInstanceLifecycleConfigName: String
        /// A shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.
        public let onCreate: [NotebookInstanceLifecycleHook]?
        /// A shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.
        public let onStart: [NotebookInstanceLifecycleHook]?

        public init(notebookInstanceLifecycleConfigName: String, onCreate: [NotebookInstanceLifecycleHook]? = nil, onStart: [NotebookInstanceLifecycleHook]? = nil) {
            self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
            self.onCreate = onCreate
            self.onStart = onStart
        }

        public func validate(name: String) throws {
            try self.validate(self.notebookInstanceLifecycleConfigName, name: "notebookInstanceLifecycleConfigName", parent: name, max: 63)
            try self.validate(self.notebookInstanceLifecycleConfigName, name: "notebookInstanceLifecycleConfigName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.onCreate?.forEach {
                try $0.validate(name: "\(name).onCreate[]")
            }
            try self.validate(self.onCreate, name: "onCreate", parent: name, max: 1)
            try self.onStart?.forEach {
                try $0.validate(name: "\(name).onStart[]")
            }
            try self.validate(self.onStart, name: "onStart", parent: name, max: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
            case onCreate = "OnCreate"
            case onStart = "OnStart"
        }
    }

    public struct CreateNotebookInstanceLifecycleConfigOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the lifecycle configuration.
        public let notebookInstanceLifecycleConfigArn: String?

        public init(notebookInstanceLifecycleConfigArn: String? = nil) {
            self.notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArn
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceLifecycleConfigArn = "NotebookInstanceLifecycleConfigArn"
        }
    }

    public struct CreateNotebookInstanceOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the notebook instance.
        public let notebookInstanceArn: String?

        public init(notebookInstanceArn: String? = nil) {
            self.notebookInstanceArn = notebookInstanceArn
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceArn = "NotebookInstanceArn"
        }
    }

    public struct CreatePresignedDomainUrlRequest: AWSEncodableShape {
        /// The domain ID.
        public let domainId: String
        /// The session expiration duration in seconds.
        public let sessionExpirationDurationInSeconds: Int?
        /// The name of the UserProfile to sign-in as.
        public let userProfileName: String

        public init(domainId: String, sessionExpirationDurationInSeconds: Int? = nil, userProfileName: String) {
            self.domainId = domainId
            self.sessionExpirationDurationInSeconds = sessionExpirationDurationInSeconds
            self.userProfileName = userProfileName
        }

        public func validate(name: String) throws {
            try self.validate(self.domainId, name: "domainId", parent: name, max: 63)
            try self.validate(self.sessionExpirationDurationInSeconds, name: "sessionExpirationDurationInSeconds", parent: name, max: 43200)
            try self.validate(self.sessionExpirationDurationInSeconds, name: "sessionExpirationDurationInSeconds", parent: name, min: 1800)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, max: 63)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case domainId = "DomainId"
            case sessionExpirationDurationInSeconds = "SessionExpirationDurationInSeconds"
            case userProfileName = "UserProfileName"
        }
    }

    public struct CreatePresignedDomainUrlResponse: AWSDecodableShape {
        /// The presigned URL.
        public let authorizedUrl: String?

        public init(authorizedUrl: String? = nil) {
            self.authorizedUrl = authorizedUrl
        }

        private enum CodingKeys: String, CodingKey {
            case authorizedUrl = "AuthorizedUrl"
        }
    }

    public struct CreatePresignedNotebookInstanceUrlInput: AWSEncodableShape {
        /// The name of the notebook instance.
        public let notebookInstanceName: String
        /// The duration of the session, in seconds. The default is 12 hours.
        public let sessionExpirationDurationInSeconds: Int?

        public init(notebookInstanceName: String, sessionExpirationDurationInSeconds: Int? = nil) {
            self.notebookInstanceName = notebookInstanceName
            self.sessionExpirationDurationInSeconds = sessionExpirationDurationInSeconds
        }

        public func validate(name: String) throws {
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, max: 63)
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.sessionExpirationDurationInSeconds, name: "sessionExpirationDurationInSeconds", parent: name, max: 43200)
            try self.validate(self.sessionExpirationDurationInSeconds, name: "sessionExpirationDurationInSeconds", parent: name, min: 1800)
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceName = "NotebookInstanceName"
            case sessionExpirationDurationInSeconds = "SessionExpirationDurationInSeconds"
        }
    }

    public struct CreatePresignedNotebookInstanceUrlOutput: AWSDecodableShape {
        /// A JSON object that contains the URL string.
        public let authorizedUrl: String?

        public init(authorizedUrl: String? = nil) {
            self.authorizedUrl = authorizedUrl
        }

        private enum CodingKeys: String, CodingKey {
            case authorizedUrl = "AuthorizedUrl"
        }
    }

    public struct CreateProcessingJobRequest: AWSEncodableShape {
        /// Configures the processing job to run a specified Docker container image.
        public let appSpecification: AppSpecification
        /// Sets the environment variables in the Docker container.
        public let environment: [String: String]?
        public let experimentConfig: ExperimentConfig?
        /// Networking options for a processing job.
        public let networkConfig: NetworkConfig?
        /// For each input, data is downloaded from S3 into the processing container before the processing job begins running if "S3InputMode" is set to File.
        public let processingInputs: [ProcessingInput]?
        ///  The name of the processing job. The name must be unique within an AWS Region in the AWS account.
        public let processingJobName: String
        /// Output configuration for the processing job.
        public let processingOutputConfig: ProcessingOutputConfig?
        /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
        public let processingResources: ProcessingResources
        /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        public let roleArn: String
        /// The time limit for how long the processing job is allowed to run.
        public let stoppingCondition: ProcessingStoppingCondition?
        /// (Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
        public let tags: [Tag]?

        public init(appSpecification: AppSpecification, environment: [String: String]? = nil, experimentConfig: ExperimentConfig? = nil, networkConfig: NetworkConfig? = nil, processingInputs: [ProcessingInput]? = nil, processingJobName: String, processingOutputConfig: ProcessingOutputConfig? = nil, processingResources: ProcessingResources, roleArn: String, stoppingCondition: ProcessingStoppingCondition? = nil, tags: [Tag]? = nil) {
            self.appSpecification = appSpecification
            self.environment = environment
            self.experimentConfig = experimentConfig
            self.networkConfig = networkConfig
            self.processingInputs = processingInputs
            self.processingJobName = processingJobName
            self.processingOutputConfig = processingOutputConfig
            self.processingResources = processingResources
            self.roleArn = roleArn
            self.stoppingCondition = stoppingCondition
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.appSpecification.validate(name: "\(name).appSpecification")
            try self.environment?.forEach {
                try validate($0.key, name: "environment.key", parent: name, max: 256)
                try validate($0.key, name: "environment.key", parent: name, pattern: "[a-zA-Z_][a-zA-Z0-9_]*")
                try validate($0.value, name: "environment[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "environment[\"\($0.key)\"]", parent: name, pattern: "[\\S\\s]*")
            }
            try self.experimentConfig?.validate(name: "\(name).experimentConfig")
            try self.networkConfig?.validate(name: "\(name).networkConfig")
            try self.processingInputs?.forEach {
                try $0.validate(name: "\(name).processingInputs[]")
            }
            try self.validate(self.processingInputs, name: "processingInputs", parent: name, max: 10)
            try self.validate(self.processingInputs, name: "processingInputs", parent: name, min: 0)
            try self.validate(self.processingJobName, name: "processingJobName", parent: name, max: 63)
            try self.validate(self.processingJobName, name: "processingJobName", parent: name, min: 1)
            try self.validate(self.processingJobName, name: "processingJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.processingOutputConfig?.validate(name: "\(name).processingOutputConfig")
            try self.processingResources.validate(name: "\(name).processingResources")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 2048)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 20)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
            try self.stoppingCondition?.validate(name: "\(name).stoppingCondition")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case appSpecification = "AppSpecification"
            case environment = "Environment"
            case experimentConfig = "ExperimentConfig"
            case networkConfig = "NetworkConfig"
            case processingInputs = "ProcessingInputs"
            case processingJobName = "ProcessingJobName"
            case processingOutputConfig = "ProcessingOutputConfig"
            case processingResources = "ProcessingResources"
            case roleArn = "RoleArn"
            case stoppingCondition = "StoppingCondition"
            case tags = "Tags"
        }
    }

    public struct CreateProcessingJobResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the processing job.
        public let processingJobArn: String

        public init(processingJobArn: String) {
            self.processingJobArn = processingJobArn
        }

        private enum CodingKeys: String, CodingKey {
            case processingJobArn = "ProcessingJobArn"
        }
    }

    public struct CreateTrainingJobRequest: AWSEncodableShape {
        /// The registry path of the Docker image that contains the training algorithm and algorithm-specific metadata, including the input mode. For more information about algorithms provided by Amazon SageMaker, see Algorithms. For information about providing your own algorithms, see Using Your Own Algorithms with Amazon SageMaker.
        public let algorithmSpecification: AlgorithmSpecification
        /// Contains information about the output location for managed spot training checkpoint data.
        public let checkpointConfig: CheckpointConfig?
        public let debugHookConfig: DebugHookConfig?
        /// Configuration information for debugging rules.
        public let debugRuleConfigurations: [DebugRuleConfiguration]?
        /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training. For more information, see Protect Communications Between ML Compute Instances in a Distributed Training Job.
        public let enableInterContainerTrafficEncryption: Bool?
        /// To train models using managed spot training, choose True. Managed spot training provides a fully managed and scalable infrastructure for training machine learning models. this option is useful when training jobs can be interrupted and when there is flexibility when the training job is run.  The complete and intermediate results of jobs are stored in an Amazon S3 bucket, and can be used as a starting point to train models incrementally. Amazon SageMaker provides metrics and logs in CloudWatch. They can be used to see when managed spot training jobs are running, interrupted, resumed, or completed.
        public let enableManagedSpotTraining: Bool?
        /// Isolates the training container. No inbound or outbound network calls can be made, except for calls between peers within a training cluster for distributed training. If you enable network isolation for training jobs that are configured to use a VPC, Amazon SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.
        public let enableNetworkIsolation: Bool?
        public let experimentConfig: ExperimentConfig?
        /// Algorithm-specific parameters that influence the quality of the model. You set hyperparameters before you start the learning process. For a list of hyperparameters for each training algorithm provided by Amazon SageMaker, see Algorithms.  You can specify a maximum of 100 hyperparameters. Each hyperparameter is a key-value pair. Each key and value is limited to 256 characters, as specified by the Length Constraint.
        public let hyperParameters: [String: String]?
        /// An array of Channel objects. Each channel is a named input source. InputDataConfig describes the input data and its location.  Algorithms can accept input data from one or more channels. For example, an algorithm might have two channels of input data, training_data and validation_data. The configuration for each channel provides the S3, EFS, or FSx location where the input data is stored. It also provides information about the stored data: the MIME type, compression method, and whether the data is wrapped in RecordIO format.  Depending on the input mode that the algorithm supports, Amazon SageMaker either copies input data files from an S3 bucket to a local directory in the Docker container, or makes it available as input streams. For example, if you specify an EFS location, input data files will be made available as input streams. They do not need to be downloaded.
        public let inputDataConfig: [Channel]?
        /// Specifies the path to the S3 location where you want to store model artifacts. Amazon SageMaker creates subfolders for the artifacts.
        public let outputDataConfig: OutputDataConfig
        /// The resources, including the ML compute instances and ML storage volumes, to use for model training.  ML storage volumes store model artifacts and incremental states. Training algorithms might also use ML storage volumes for scratch space. If you want Amazon SageMaker to use the ML storage volume to store the training data, choose File as the TrainingInputMode in the algorithm specification. For distributed training algorithms, specify an instance count greater than 1.
        public let resourceConfig: ResourceConfig
        /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.  During model training, Amazon SageMaker needs your permission to read input data from an S3 bucket, download a Docker image that contains training code, write model artifacts to an S3 bucket, write logs to Amazon CloudWatch Logs, and publish metrics to Amazon CloudWatch. You grant permissions for all of these tasks to an IAM role. For more information, see Amazon SageMaker Roles.   To be able to pass this role to Amazon SageMaker, the caller of this API must have the iam:PassRole permission.
        public let roleArn: String
        /// Specifies a limit to how long a model training job can run. When the job reaches the time limit, Amazon SageMaker ends the training job. Use this API to cap model training costs. To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
        public let stoppingCondition: StoppingCondition
        /// An array of key-value pairs. For more information, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
        public let tags: [Tag]?
        public let tensorBoardOutputConfig: TensorBoardOutputConfig?
        /// The name of the training job. The name must be unique within an AWS Region in an AWS account.
        public let trainingJobName: String
        /// A VpcConfig object that specifies the VPC that you want your training job to connect to. Control access to and from your training container by configuring the VPC. For more information, see Protect Training Jobs by Using an Amazon Virtual Private Cloud.
        public let vpcConfig: VpcConfig?

        public init(algorithmSpecification: AlgorithmSpecification, checkpointConfig: CheckpointConfig? = nil, debugHookConfig: DebugHookConfig? = nil, debugRuleConfigurations: [DebugRuleConfiguration]? = nil, enableInterContainerTrafficEncryption: Bool? = nil, enableManagedSpotTraining: Bool? = nil, enableNetworkIsolation: Bool? = nil, experimentConfig: ExperimentConfig? = nil, hyperParameters: [String: String]? = nil, inputDataConfig: [Channel]? = nil, outputDataConfig: OutputDataConfig, resourceConfig: ResourceConfig, roleArn: String, stoppingCondition: StoppingCondition, tags: [Tag]? = nil, tensorBoardOutputConfig: TensorBoardOutputConfig? = nil, trainingJobName: String, vpcConfig: VpcConfig? = nil) {
            self.algorithmSpecification = algorithmSpecification
            self.checkpointConfig = checkpointConfig
            self.debugHookConfig = debugHookConfig
            self.debugRuleConfigurations = debugRuleConfigurations
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableManagedSpotTraining = enableManagedSpotTraining
            self.enableNetworkIsolation = enableNetworkIsolation
            self.experimentConfig = experimentConfig
            self.hyperParameters = hyperParameters
            self.inputDataConfig = inputDataConfig
            self.outputDataConfig = outputDataConfig
            self.resourceConfig = resourceConfig
            self.roleArn = roleArn
            self.stoppingCondition = stoppingCondition
            self.tags = tags
            self.tensorBoardOutputConfig = tensorBoardOutputConfig
            self.trainingJobName = trainingJobName
            self.vpcConfig = vpcConfig
        }

        public func validate(name: String) throws {
            try self.algorithmSpecification.validate(name: "\(name).algorithmSpecification")
            try self.checkpointConfig?.validate(name: "\(name).checkpointConfig")
            try self.debugHookConfig?.validate(name: "\(name).debugHookConfig")
            try self.debugRuleConfigurations?.forEach {
                try $0.validate(name: "\(name).debugRuleConfigurations[]")
            }
            try self.validate(self.debugRuleConfigurations, name: "debugRuleConfigurations", parent: name, max: 20)
            try self.validate(self.debugRuleConfigurations, name: "debugRuleConfigurations", parent: name, min: 0)
            try self.experimentConfig?.validate(name: "\(name).experimentConfig")
            try self.hyperParameters?.forEach {
                try validate($0.key, name: "hyperParameters.key", parent: name, max: 256)
                try validate($0.key, name: "hyperParameters.key", parent: name, pattern: ".*")
                try validate($0.value, name: "hyperParameters[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "hyperParameters[\"\($0.key)\"]", parent: name, pattern: ".*")
            }
            try self.inputDataConfig?.forEach {
                try $0.validate(name: "\(name).inputDataConfig[]")
            }
            try self.validate(self.inputDataConfig, name: "inputDataConfig", parent: name, max: 20)
            try self.validate(self.inputDataConfig, name: "inputDataConfig", parent: name, min: 1)
            try self.outputDataConfig.validate(name: "\(name).outputDataConfig")
            try self.resourceConfig.validate(name: "\(name).resourceConfig")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 2048)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 20)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
            try self.stoppingCondition.validate(name: "\(name).stoppingCondition")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.tensorBoardOutputConfig?.validate(name: "\(name).tensorBoardOutputConfig")
            try self.validate(self.trainingJobName, name: "trainingJobName", parent: name, max: 63)
            try self.validate(self.trainingJobName, name: "trainingJobName", parent: name, min: 1)
            try self.validate(self.trainingJobName, name: "trainingJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.vpcConfig?.validate(name: "\(name).vpcConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmSpecification = "AlgorithmSpecification"
            case checkpointConfig = "CheckpointConfig"
            case debugHookConfig = "DebugHookConfig"
            case debugRuleConfigurations = "DebugRuleConfigurations"
            case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
            case enableManagedSpotTraining = "EnableManagedSpotTraining"
            case enableNetworkIsolation = "EnableNetworkIsolation"
            case experimentConfig = "ExperimentConfig"
            case hyperParameters = "HyperParameters"
            case inputDataConfig = "InputDataConfig"
            case outputDataConfig = "OutputDataConfig"
            case resourceConfig = "ResourceConfig"
            case roleArn = "RoleArn"
            case stoppingCondition = "StoppingCondition"
            case tags = "Tags"
            case tensorBoardOutputConfig = "TensorBoardOutputConfig"
            case trainingJobName = "TrainingJobName"
            case vpcConfig = "VpcConfig"
        }
    }

    public struct CreateTrainingJobResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the training job.
        public let trainingJobArn: String

        public init(trainingJobArn: String) {
            self.trainingJobArn = trainingJobArn
        }

        private enum CodingKeys: String, CodingKey {
            case trainingJobArn = "TrainingJobArn"
        }
    }

    public struct CreateTransformJobRequest: AWSEncodableShape {
        /// Specifies the number of records to include in a mini-batch for an HTTP inference request. A record  is a single unit of input data that inference can be made on. For example, a single line in a CSV file is a record.  To enable the batch strategy, you must set the SplitType property to Line, RecordIO, or TFRecord. To use only one record when making an HTTP invocation request to a container, set BatchStrategy to SingleRecord and SplitType to Line. To fit as many records in a mini-batch as can fit within the MaxPayloadInMB limit, set BatchStrategy to MultiRecord and SplitType to Line.
        public let batchStrategy: BatchStrategy?
        /// The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see Associate Prediction Results with their Corresponding Input Records.
        public let dataProcessing: DataProcessing?
        /// The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.
        public let environment: [String: String]?
        public let experimentConfig: ExperimentConfig?
        /// The maximum number of parallel requests that can be sent to each instance in a transform job. If MaxConcurrentTransforms is set to 0 or left unset, Amazon SageMaker checks the optional execution-parameters to determine the settings for your chosen algorithm. If the execution-parameters endpoint is not enabled, the default value is 1. For more information on execution-parameters, see How Containers Serve Requests. For built-in algorithms, you don't need to set a value for MaxConcurrentTransforms.
        public let maxConcurrentTransforms: Int?
        /// The maximum allowed size of the payload, in MB. A payload is the data portion of a record (without metadata). The value in MaxPayloadInMB must be greater than, or equal to, the size of a single record. To estimate the size of a record in MB, divide the size of your dataset by the number of records. To ensure that the records fit within the maximum payload size, we recommend using a slightly larger value. The default value is 6 MB.  For cases where the payload might be arbitrarily large and is transmitted using HTTP chunked encoding, set the value to 0. This feature works only in supported algorithms. Currently, Amazon SageMaker built-in algorithms do not support HTTP chunked encoding.
        public let maxPayloadInMB: Int?
        /// Configures the timeout and maximum number of retries for processing a transform job invocation.
        public let modelClientConfig: ModelClientConfig?
        /// The name of the model that you want to use for the transform job. ModelName must be the name of an existing Amazon SageMaker model within an AWS Region in an AWS account.
        public let modelName: String
        /// (Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
        public let tags: [Tag]?
        /// Describes the input source and the way the transform job consumes it.
        public let transformInput: TransformInput
        /// The name of the transform job. The name must be unique within an AWS Region in an AWS account.
        public let transformJobName: String
        /// Describes the results of the transform job.
        public let transformOutput: TransformOutput
        /// Describes the resources, including ML instance types and ML instance count, to use for the transform job.
        public let transformResources: TransformResources

        public init(batchStrategy: BatchStrategy? = nil, dataProcessing: DataProcessing? = nil, environment: [String: String]? = nil, experimentConfig: ExperimentConfig? = nil, maxConcurrentTransforms: Int? = nil, maxPayloadInMB: Int? = nil, modelClientConfig: ModelClientConfig? = nil, modelName: String, tags: [Tag]? = nil, transformInput: TransformInput, transformJobName: String, transformOutput: TransformOutput, transformResources: TransformResources) {
            self.batchStrategy = batchStrategy
            self.dataProcessing = dataProcessing
            self.environment = environment
            self.experimentConfig = experimentConfig
            self.maxConcurrentTransforms = maxConcurrentTransforms
            self.maxPayloadInMB = maxPayloadInMB
            self.modelClientConfig = modelClientConfig
            self.modelName = modelName
            self.tags = tags
            self.transformInput = transformInput
            self.transformJobName = transformJobName
            self.transformOutput = transformOutput
            self.transformResources = transformResources
        }

        public func validate(name: String) throws {
            try self.dataProcessing?.validate(name: "\(name).dataProcessing")
            try self.environment?.forEach {
                try validate($0.key, name: "environment.key", parent: name, max: 1024)
                try validate($0.key, name: "environment.key", parent: name, pattern: "[a-zA-Z_][a-zA-Z0-9_]*")
                try validate($0.value, name: "environment[\"\($0.key)\"]", parent: name, max: 10240)
                try validate($0.value, name: "environment[\"\($0.key)\"]", parent: name, pattern: "[\\S\\s]*")
            }
            try self.experimentConfig?.validate(name: "\(name).experimentConfig")
            try self.validate(self.maxConcurrentTransforms, name: "maxConcurrentTransforms", parent: name, min: 0)
            try self.validate(self.maxPayloadInMB, name: "maxPayloadInMB", parent: name, min: 0)
            try self.modelClientConfig?.validate(name: "\(name).modelClientConfig")
            try self.validate(self.modelName, name: "modelName", parent: name, max: 63)
            try self.validate(self.modelName, name: "modelName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.transformInput.validate(name: "\(name).transformInput")
            try self.validate(self.transformJobName, name: "transformJobName", parent: name, max: 63)
            try self.validate(self.transformJobName, name: "transformJobName", parent: name, min: 1)
            try self.validate(self.transformJobName, name: "transformJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.transformOutput.validate(name: "\(name).transformOutput")
            try self.transformResources.validate(name: "\(name).transformResources")
        }

        private enum CodingKeys: String, CodingKey {
            case batchStrategy = "BatchStrategy"
            case dataProcessing = "DataProcessing"
            case environment = "Environment"
            case experimentConfig = "ExperimentConfig"
            case maxConcurrentTransforms = "MaxConcurrentTransforms"
            case maxPayloadInMB = "MaxPayloadInMB"
            case modelClientConfig = "ModelClientConfig"
            case modelName = "ModelName"
            case tags = "Tags"
            case transformInput = "TransformInput"
            case transformJobName = "TransformJobName"
            case transformOutput = "TransformOutput"
            case transformResources = "TransformResources"
        }
    }

    public struct CreateTransformJobResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the transform job.
        public let transformJobArn: String

        public init(transformJobArn: String) {
            self.transformJobArn = transformJobArn
        }

        private enum CodingKeys: String, CodingKey {
            case transformJobArn = "TransformJobArn"
        }
    }

    public struct CreateTrialComponentRequest: AWSEncodableShape {
        /// The name of the component as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialComponentName is displayed.
        public let displayName: String?
        /// When the component ended.
        public let endTime: TimeStamp?
        /// The input artifacts for the component. Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and instance types.
        public let inputArtifacts: [String: TrialComponentArtifact]?
        /// The output artifacts for the component. Examples of output artifacts are metrics, snapshots, logs, and images.
        public let outputArtifacts: [String: TrialComponentArtifact]?
        /// The hyperparameters for the component.
        public let parameters: [String: TrialComponentParameterValue]?
        /// When the component started.
        public let startTime: TimeStamp?
        /// The status of the component. States include:   InProgress   Completed   Failed
        public let status: TrialComponentStatus?
        /// A list of tags to associate with the component. You can use Search API to search on the tags.
        public let tags: [Tag]?
        /// The name of the component. The name must be unique in your AWS account and is not case-sensitive.
        public let trialComponentName: String

        public init(displayName: String? = nil, endTime: TimeStamp? = nil, inputArtifacts: [String: TrialComponentArtifact]? = nil, outputArtifacts: [String: TrialComponentArtifact]? = nil, parameters: [String: TrialComponentParameterValue]? = nil, startTime: TimeStamp? = nil, status: TrialComponentStatus? = nil, tags: [Tag]? = nil, trialComponentName: String) {
            self.displayName = displayName
            self.endTime = endTime
            self.inputArtifacts = inputArtifacts
            self.outputArtifacts = outputArtifacts
            self.parameters = parameters
            self.startTime = startTime
            self.status = status
            self.tags = tags
            self.trialComponentName = trialComponentName
        }

        public func validate(name: String) throws {
            try self.validate(self.displayName, name: "displayName", parent: name, max: 82)
            try self.validate(self.displayName, name: "displayName", parent: name, min: 1)
            try self.validate(self.displayName, name: "displayName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.inputArtifacts?.forEach {
                try validate($0.key, name: "inputArtifacts.key", parent: name, max: 64)
                try validate($0.key, name: "inputArtifacts.key", parent: name, pattern: ".*")
                try $0.value.validate(name: "\(name).inputArtifacts[\"\($0.key)\"]")
            }
            try self.outputArtifacts?.forEach {
                try validate($0.key, name: "outputArtifacts.key", parent: name, max: 64)
                try validate($0.key, name: "outputArtifacts.key", parent: name, pattern: ".*")
                try $0.value.validate(name: "\(name).outputArtifacts[\"\($0.key)\"]")
            }
            try self.parameters?.forEach {
                try validate($0.key, name: "parameters.key", parent: name, max: 256)
                try validate($0.key, name: "parameters.key", parent: name, pattern: ".*")
                try $0.value.validate(name: "\(name).parameters[\"\($0.key)\"]")
            }
            try self.status?.validate(name: "\(name).status")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, max: 82)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, min: 1)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case endTime = "EndTime"
            case inputArtifacts = "InputArtifacts"
            case outputArtifacts = "OutputArtifacts"
            case parameters = "Parameters"
            case startTime = "StartTime"
            case status = "Status"
            case tags = "Tags"
            case trialComponentName = "TrialComponentName"
        }
    }

    public struct CreateTrialComponentResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the trial component.
        public let trialComponentArn: String?

        public init(trialComponentArn: String? = nil) {
            self.trialComponentArn = trialComponentArn
        }

        private enum CodingKeys: String, CodingKey {
            case trialComponentArn = "TrialComponentArn"
        }
    }

    public struct CreateTrialRequest: AWSEncodableShape {
        /// The name of the trial as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialName is displayed.
        public let displayName: String?
        /// The name of the experiment to associate the trial with.
        public let experimentName: String
        /// A list of tags to associate with the trial. You can use Search API to search on the tags.
        public let tags: [Tag]?
        /// The name of the trial. The name must be unique in your AWS account and is not case-sensitive.
        public let trialName: String

        public init(displayName: String? = nil, experimentName: String, tags: [Tag]? = nil, trialName: String) {
            self.displayName = displayName
            self.experimentName = experimentName
            self.tags = tags
            self.trialName = trialName
        }

        public func validate(name: String) throws {
            try self.validate(self.displayName, name: "displayName", parent: name, max: 82)
            try self.validate(self.displayName, name: "displayName", parent: name, min: 1)
            try self.validate(self.displayName, name: "displayName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.experimentName, name: "experimentName", parent: name, max: 82)
            try self.validate(self.experimentName, name: "experimentName", parent: name, min: 1)
            try self.validate(self.experimentName, name: "experimentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.validate(self.trialName, name: "trialName", parent: name, max: 82)
            try self.validate(self.trialName, name: "trialName", parent: name, min: 1)
            try self.validate(self.trialName, name: "trialName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case experimentName = "ExperimentName"
            case tags = "Tags"
            case trialName = "TrialName"
        }
    }

    public struct CreateTrialResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the trial.
        public let trialArn: String?

        public init(trialArn: String? = nil) {
            self.trialArn = trialArn
        }

        private enum CodingKeys: String, CodingKey {
            case trialArn = "TrialArn"
        }
    }

    public struct CreateUserProfileRequest: AWSEncodableShape {
        /// The ID of the associated Domain.
        public let domainId: String
        /// A specifier for the type of value specified in SingleSignOnUserValue. Currently, the only supported value is "UserName". If the Domain's AuthMode is SSO, this field is required. If the Domain's AuthMode is not SSO, this field cannot be specified.
        public let singleSignOnUserIdentifier: String?
        /// The username of the associated AWS Single Sign-On User for this UserProfile. If the Domain's AuthMode is SSO, this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not SSO, this field cannot be specified.
        public let singleSignOnUserValue: String?
        /// Each tag consists of a key and an optional value. Tag keys must be unique per resource.
        public let tags: [Tag]?
        /// A name for the UserProfile.
        public let userProfileName: String
        /// A collection of settings.
        public let userSettings: UserSettings?

        public init(domainId: String, singleSignOnUserIdentifier: String? = nil, singleSignOnUserValue: String? = nil, tags: [Tag]? = nil, userProfileName: String, userSettings: UserSettings? = nil) {
            self.domainId = domainId
            self.singleSignOnUserIdentifier = singleSignOnUserIdentifier
            self.singleSignOnUserValue = singleSignOnUserValue
            self.tags = tags
            self.userProfileName = userProfileName
            self.userSettings = userSettings
        }

        public func validate(name: String) throws {
            try self.validate(self.domainId, name: "domainId", parent: name, max: 63)
            try self.validate(self.singleSignOnUserIdentifier, name: "singleSignOnUserIdentifier", parent: name, pattern: "UserName")
            try self.validate(self.singleSignOnUserValue, name: "singleSignOnUserValue", parent: name, max: 256)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, max: 63)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.userSettings?.validate(name: "\(name).userSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case domainId = "DomainId"
            case singleSignOnUserIdentifier = "SingleSignOnUserIdentifier"
            case singleSignOnUserValue = "SingleSignOnUserValue"
            case tags = "Tags"
            case userProfileName = "UserProfileName"
            case userSettings = "UserSettings"
        }
    }

    public struct CreateUserProfileResponse: AWSDecodableShape {
        /// The user profile Amazon Resource Name (ARN).
        public let userProfileArn: String?

        public init(userProfileArn: String? = nil) {
            self.userProfileArn = userProfileArn
        }

        private enum CodingKeys: String, CodingKey {
            case userProfileArn = "UserProfileArn"
        }
    }

    public struct CreateWorkforceRequest: AWSEncodableShape {
        /// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single  Amazon Cognito user pool. Do not use OidcConfig if you specify values for CognitoConfig.
        public let cognitoConfig: CognitoConfig?
        /// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Do not use CognitoConfig if you specify values for OidcConfig.
        public let oidcConfig: OidcConfig?
        public let sourceIpConfig: SourceIpConfig?
        /// An array of key-value pairs that contain metadata to help you categorize and organize our workforce. Each tag consists of a key and a value, both of which you define.
        public let tags: [Tag]?
        /// The name of the private workforce.
        public let workforceName: String

        public init(cognitoConfig: CognitoConfig? = nil, oidcConfig: OidcConfig? = nil, sourceIpConfig: SourceIpConfig? = nil, tags: [Tag]? = nil, workforceName: String) {
            self.cognitoConfig = cognitoConfig
            self.oidcConfig = oidcConfig
            self.sourceIpConfig = sourceIpConfig
            self.tags = tags
            self.workforceName = workforceName
        }

        public func validate(name: String) throws {
            try self.cognitoConfig?.validate(name: "\(name).cognitoConfig")
            try self.oidcConfig?.validate(name: "\(name).oidcConfig")
            try self.sourceIpConfig?.validate(name: "\(name).sourceIpConfig")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.validate(self.workforceName, name: "workforceName", parent: name, max: 63)
            try self.validate(self.workforceName, name: "workforceName", parent: name, min: 1)
            try self.validate(self.workforceName, name: "workforceName", parent: name, pattern: "^[a-zA-Z0-9]([a-zA-Z0-9\\-])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case cognitoConfig = "CognitoConfig"
            case oidcConfig = "OidcConfig"
            case sourceIpConfig = "SourceIpConfig"
            case tags = "Tags"
            case workforceName = "WorkforceName"
        }
    }

    public struct CreateWorkforceResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the workforce.
        public let workforceArn: String

        public init(workforceArn: String) {
            self.workforceArn = workforceArn
        }

        private enum CodingKeys: String, CodingKey {
            case workforceArn = "WorkforceArn"
        }
    }

    public struct CreateWorkteamRequest: AWSEncodableShape {
        /// A description of the work team.
        public let description: String
        /// A list of MemberDefinition objects that contains objects that identify the workers that make up the work team.  Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use CognitoMemberDefinition. For workforces created using your own OIDC identity provider (IdP) use OidcMemberDefinition. Do not provide input for both of these parameters in a single request. For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito user groups within the user pool used to create a workforce. All of the CognitoMemberDefinition objects that make up the member definition must have the same ClientId and UserPool values. To add a Amazon Cognito user group to an existing worker pool, see Adding groups to a User Pool. For more information about user pools, see Amazon Cognito User Pools. For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in OidcMemberDefinition by listing those groups in Groups.
        public let memberDefinitions: [MemberDefinition]
        /// Configures notification of workers regarding available or expiring work items.
        public let notificationConfiguration: NotificationConfiguration?
        /// An array of key-value pairs. For more information, see Resource Tag and Using Cost Allocation Tags in the  AWS Billing and Cost Management User Guide.
        public let tags: [Tag]?
        /// The name of the workforce.
        public let workforceName: String?
        /// The name of the work team. Use this name to identify the work team.
        public let workteamName: String

        public init(description: String, memberDefinitions: [MemberDefinition], notificationConfiguration: NotificationConfiguration? = nil, tags: [Tag]? = nil, workforceName: String? = nil, workteamName: String) {
            self.description = description
            self.memberDefinitions = memberDefinitions
            self.notificationConfiguration = notificationConfiguration
            self.tags = tags
            self.workforceName = workforceName
            self.workteamName = workteamName
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, pattern: ".+")
            try self.memberDefinitions.forEach {
                try $0.validate(name: "\(name).memberDefinitions[]")
            }
            try self.validate(self.memberDefinitions, name: "memberDefinitions", parent: name, max: 10)
            try self.validate(self.memberDefinitions, name: "memberDefinitions", parent: name, min: 1)
            try self.notificationConfiguration?.validate(name: "\(name).notificationConfiguration")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.validate(self.workforceName, name: "workforceName", parent: name, max: 63)
            try self.validate(self.workforceName, name: "workforceName", parent: name, min: 1)
            try self.validate(self.workforceName, name: "workforceName", parent: name, pattern: "^[a-zA-Z0-9]([a-zA-Z0-9\\-])*$")
            try self.validate(self.workteamName, name: "workteamName", parent: name, max: 63)
            try self.validate(self.workteamName, name: "workteamName", parent: name, min: 1)
            try self.validate(self.workteamName, name: "workteamName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case memberDefinitions = "MemberDefinitions"
            case notificationConfiguration = "NotificationConfiguration"
            case tags = "Tags"
            case workforceName = "WorkforceName"
            case workteamName = "WorkteamName"
        }
    }

    public struct CreateWorkteamResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the work team. You can use this ARN to identify the work team.
        public let workteamArn: String?

        public init(workteamArn: String? = nil) {
            self.workteamArn = workteamArn
        }

        private enum CodingKeys: String, CodingKey {
            case workteamArn = "WorkteamArn"
        }
    }

    public struct DataCaptureConfig: AWSEncodableShape & AWSDecodableShape {
        public let captureContentTypeHeader: CaptureContentTypeHeader?
        public let captureOptions: [CaptureOption]
        public let destinationS3Uri: String
        public let enableCapture: Bool?
        public let initialSamplingPercentage: Int
        public let kmsKeyId: String?

        public init(captureContentTypeHeader: CaptureContentTypeHeader? = nil, captureOptions: [CaptureOption], destinationS3Uri: String, enableCapture: Bool? = nil, initialSamplingPercentage: Int, kmsKeyId: String? = nil) {
            self.captureContentTypeHeader = captureContentTypeHeader
            self.captureOptions = captureOptions
            self.destinationS3Uri = destinationS3Uri
            self.enableCapture = enableCapture
            self.initialSamplingPercentage = initialSamplingPercentage
            self.kmsKeyId = kmsKeyId
        }

        public func validate(name: String) throws {
            try self.captureContentTypeHeader?.validate(name: "\(name).captureContentTypeHeader")
            try self.validate(self.captureOptions, name: "captureOptions", parent: name, max: 2)
            try self.validate(self.captureOptions, name: "captureOptions", parent: name, min: 1)
            try self.validate(self.destinationS3Uri, name: "destinationS3Uri", parent: name, max: 512)
            try self.validate(self.destinationS3Uri, name: "destinationS3Uri", parent: name, pattern: "^(https|s3)://([^/])/?(.*)$")
            try self.validate(self.initialSamplingPercentage, name: "initialSamplingPercentage", parent: name, max: 100)
            try self.validate(self.initialSamplingPercentage, name: "initialSamplingPercentage", parent: name, min: 0)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case captureContentTypeHeader = "CaptureContentTypeHeader"
            case captureOptions = "CaptureOptions"
            case destinationS3Uri = "DestinationS3Uri"
            case enableCapture = "EnableCapture"
            case initialSamplingPercentage = "InitialSamplingPercentage"
            case kmsKeyId = "KmsKeyId"
        }
    }

    public struct DataCaptureConfigSummary: AWSDecodableShape {
        public let captureStatus: CaptureStatus
        public let currentSamplingPercentage: Int
        public let destinationS3Uri: String
        public let enableCapture: Bool
        public let kmsKeyId: String

        public init(captureStatus: CaptureStatus, currentSamplingPercentage: Int, destinationS3Uri: String, enableCapture: Bool, kmsKeyId: String) {
            self.captureStatus = captureStatus
            self.currentSamplingPercentage = currentSamplingPercentage
            self.destinationS3Uri = destinationS3Uri
            self.enableCapture = enableCapture
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case captureStatus = "CaptureStatus"
            case currentSamplingPercentage = "CurrentSamplingPercentage"
            case destinationS3Uri = "DestinationS3Uri"
            case enableCapture = "EnableCapture"
            case kmsKeyId = "KmsKeyId"
        }
    }

    public struct DataProcessing: AWSEncodableShape & AWSDecodableShape {
        /// A JSONPath expression used to select a portion of the input data to pass to the algorithm. Use the InputFilter parameter to exclude fields, such as an ID column, from the input. If you want Amazon SageMaker to pass the entire input dataset to the algorithm, accept the default value $. Examples: "$", "$[1:]", "$.features"
        public let inputFilter: String?
        /// Specifies the source of the data to join with the transformed data. The valid values are None and Input. The default value is None, which specifies not to join the input with the transformed data. If you want the batch transform job to join the original input data with the transformed data, set JoinSource to Input.  For JSON or JSONLines objects, such as a JSON array, Amazon SageMaker adds the transformed data to the input JSON object in an attribute called SageMakerOutput. The joined result for JSON must be a key-value pair object. If the input is not a key-value pair object, Amazon SageMaker creates a new JSON file. In the new JSON file, and the input data is stored under the SageMakerInput key and the results are stored in SageMakerOutput. For CSV files, Amazon SageMaker combines the transformed data with the input data at the end of the input data and stores it in the output file. The joined data has the joined input data followed by the transformed data and the output is a CSV file.
        public let joinSource: JoinSource?
        /// A JSONPath expression used to select a portion of the joined dataset to save in the output file for a batch transform job. If you want Amazon SageMaker to store the entire input dataset in the output file, leave the default value, $. If you specify indexes that aren't within the dimension size of the joined dataset, you get an error. Examples: "$", "$[0,5:]", "$['id','SageMakerOutput']"
        public let outputFilter: String?

        public init(inputFilter: String? = nil, joinSource: JoinSource? = nil, outputFilter: String? = nil) {
            self.inputFilter = inputFilter
            self.joinSource = joinSource
            self.outputFilter = outputFilter
        }

        public func validate(name: String) throws {
            try self.validate(self.inputFilter, name: "inputFilter", parent: name, max: 63)
            try self.validate(self.inputFilter, name: "inputFilter", parent: name, min: 0)
            try self.validate(self.outputFilter, name: "outputFilter", parent: name, max: 63)
            try self.validate(self.outputFilter, name: "outputFilter", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case inputFilter = "InputFilter"
            case joinSource = "JoinSource"
            case outputFilter = "OutputFilter"
        }
    }

    public struct DataSource: AWSEncodableShape & AWSDecodableShape {
        /// The file system that is associated with a channel.
        public let fileSystemDataSource: FileSystemDataSource?
        /// The S3 location of the data source that is associated with a channel.
        public let s3DataSource: S3DataSource?

        public init(fileSystemDataSource: FileSystemDataSource? = nil, s3DataSource: S3DataSource? = nil) {
            self.fileSystemDataSource = fileSystemDataSource
            self.s3DataSource = s3DataSource
        }

        public func validate(name: String) throws {
            try self.fileSystemDataSource?.validate(name: "\(name).fileSystemDataSource")
            try self.s3DataSource?.validate(name: "\(name).s3DataSource")
        }

        private enum CodingKeys: String, CodingKey {
            case fileSystemDataSource = "FileSystemDataSource"
            case s3DataSource = "S3DataSource"
        }
    }

    public struct DebugHookConfig: AWSEncodableShape & AWSDecodableShape {
        /// Configuration information for tensor collections.
        public let collectionConfigurations: [CollectionConfiguration]?
        /// Configuration information for the debug hook parameters.
        public let hookParameters: [String: String]?
        /// Path to local storage location for tensors. Defaults to /opt/ml/output/tensors/.
        public let localPath: String?
        /// Path to Amazon S3 storage location for tensors.
        public let s3OutputPath: String

        public init(collectionConfigurations: [CollectionConfiguration]? = nil, hookParameters: [String: String]? = nil, localPath: String? = nil, s3OutputPath: String) {
            self.collectionConfigurations = collectionConfigurations
            self.hookParameters = hookParameters
            self.localPath = localPath
            self.s3OutputPath = s3OutputPath
        }

        public func validate(name: String) throws {
            try self.collectionConfigurations?.forEach {
                try $0.validate(name: "\(name).collectionConfigurations[]")
            }
            try self.validate(self.collectionConfigurations, name: "collectionConfigurations", parent: name, max: 20)
            try self.validate(self.collectionConfigurations, name: "collectionConfigurations", parent: name, min: 0)
            try self.hookParameters?.forEach {
                try validate($0.key, name: "hookParameters.key", parent: name, max: 256)
                try validate($0.key, name: "hookParameters.key", parent: name, min: 1)
                try validate($0.key, name: "hookParameters.key", parent: name, pattern: ".*")
                try validate($0.value, name: "hookParameters[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "hookParameters[\"\($0.key)\"]", parent: name, pattern: ".*")
            }
            try self.validate(self.localPath, name: "localPath", parent: name, max: 4096)
            try self.validate(self.localPath, name: "localPath", parent: name, pattern: ".*")
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, max: 1024)
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case collectionConfigurations = "CollectionConfigurations"
            case hookParameters = "HookParameters"
            case localPath = "LocalPath"
            case s3OutputPath = "S3OutputPath"
        }
    }

    public struct DebugRuleConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The instance type to deploy for a training job.
        public let instanceType: ProcessingInstanceType?
        /// Path to local storage location for output of rules. Defaults to /opt/ml/processing/output/rule/.
        public let localPath: String?
        /// The name of the rule configuration. It must be unique relative to other rule configuration names.
        public let ruleConfigurationName: String
        /// The Amazon Elastic Container (ECR) Image for the managed rule evaluation.
        public let ruleEvaluatorImage: String
        ///  Runtime configuration for rule container.
        public let ruleParameters: [String: String]?
        /// Path to Amazon S3 storage location for rules.
        public let s3OutputPath: String?
        /// The size, in GB, of the ML storage volume attached to the processing instance.
        public let volumeSizeInGB: Int?

        public init(instanceType: ProcessingInstanceType? = nil, localPath: String? = nil, ruleConfigurationName: String, ruleEvaluatorImage: String, ruleParameters: [String: String]? = nil, s3OutputPath: String? = nil, volumeSizeInGB: Int? = nil) {
            self.instanceType = instanceType
            self.localPath = localPath
            self.ruleConfigurationName = ruleConfigurationName
            self.ruleEvaluatorImage = ruleEvaluatorImage
            self.ruleParameters = ruleParameters
            self.s3OutputPath = s3OutputPath
            self.volumeSizeInGB = volumeSizeInGB
        }

        public func validate(name: String) throws {
            try self.validate(self.localPath, name: "localPath", parent: name, max: 4096)
            try self.validate(self.localPath, name: "localPath", parent: name, pattern: ".*")
            try self.validate(self.ruleConfigurationName, name: "ruleConfigurationName", parent: name, max: 256)
            try self.validate(self.ruleConfigurationName, name: "ruleConfigurationName", parent: name, min: 1)
            try self.validate(self.ruleConfigurationName, name: "ruleConfigurationName", parent: name, pattern: ".*")
            try self.validate(self.ruleEvaluatorImage, name: "ruleEvaluatorImage", parent: name, max: 255)
            try self.validate(self.ruleEvaluatorImage, name: "ruleEvaluatorImage", parent: name, pattern: ".*")
            try self.ruleParameters?.forEach {
                try validate($0.key, name: "ruleParameters.key", parent: name, max: 256)
                try validate($0.key, name: "ruleParameters.key", parent: name, min: 1)
                try validate($0.key, name: "ruleParameters.key", parent: name, pattern: ".*")
                try validate($0.value, name: "ruleParameters[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "ruleParameters[\"\($0.key)\"]", parent: name, pattern: ".*")
            }
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, max: 1024)
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
            try self.validate(self.volumeSizeInGB, name: "volumeSizeInGB", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case localPath = "LocalPath"
            case ruleConfigurationName = "RuleConfigurationName"
            case ruleEvaluatorImage = "RuleEvaluatorImage"
            case ruleParameters = "RuleParameters"
            case s3OutputPath = "S3OutputPath"
            case volumeSizeInGB = "VolumeSizeInGB"
        }
    }

    public struct DebugRuleEvaluationStatus: AWSDecodableShape {
        /// Timestamp when the rule evaluation status was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The name of the rule configuration
        public let ruleConfigurationName: String?
        /// The Amazon Resource Name (ARN) of the rule evaluation job.
        public let ruleEvaluationJobArn: String?
        /// Status of the rule evaluation.
        public let ruleEvaluationStatus: RuleEvaluationStatus?
        /// Details from the rule evaluation.
        public let statusDetails: String?

        public init(lastModifiedTime: TimeStamp? = nil, ruleConfigurationName: String? = nil, ruleEvaluationJobArn: String? = nil, ruleEvaluationStatus: RuleEvaluationStatus? = nil, statusDetails: String? = nil) {
            self.lastModifiedTime = lastModifiedTime
            self.ruleConfigurationName = ruleConfigurationName
            self.ruleEvaluationJobArn = ruleEvaluationJobArn
            self.ruleEvaluationStatus = ruleEvaluationStatus
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedTime = "LastModifiedTime"
            case ruleConfigurationName = "RuleConfigurationName"
            case ruleEvaluationJobArn = "RuleEvaluationJobArn"
            case ruleEvaluationStatus = "RuleEvaluationStatus"
            case statusDetails = "StatusDetails"
        }
    }

    public struct DeleteAlgorithmInput: AWSEncodableShape {
        /// The name of the algorithm to delete.
        public let algorithmName: String

        public init(algorithmName: String) {
            self.algorithmName = algorithmName
        }

        public func validate(name: String) throws {
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, max: 63)
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, min: 1)
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmName = "AlgorithmName"
        }
    }

    public struct DeleteAppRequest: AWSEncodableShape {
        /// The name of the app.
        public let appName: String
        /// The type of app.
        public let appType: AppType
        /// The domain ID.
        public let domainId: String
        /// The user profile name.
        public let userProfileName: String

        public init(appName: String, appType: AppType, domainId: String, userProfileName: String) {
            self.appName = appName
            self.appType = appType
            self.domainId = domainId
            self.userProfileName = userProfileName
        }

        public func validate(name: String) throws {
            try self.validate(self.appName, name: "appName", parent: name, max: 63)
            try self.validate(self.appName, name: "appName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.domainId, name: "domainId", parent: name, max: 63)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, max: 63)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case appName = "AppName"
            case appType = "AppType"
            case domainId = "DomainId"
            case userProfileName = "UserProfileName"
        }
    }

    public struct DeleteCodeRepositoryInput: AWSEncodableShape {
        /// The name of the Git repository to delete.
        public let codeRepositoryName: String

        public init(codeRepositoryName: String) {
            self.codeRepositoryName = codeRepositoryName
        }

        public func validate(name: String) throws {
            try self.validate(self.codeRepositoryName, name: "codeRepositoryName", parent: name, max: 63)
            try self.validate(self.codeRepositoryName, name: "codeRepositoryName", parent: name, min: 1)
            try self.validate(self.codeRepositoryName, name: "codeRepositoryName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case codeRepositoryName = "CodeRepositoryName"
        }
    }

    public struct DeleteDomainRequest: AWSEncodableShape {
        /// The domain ID.
        public let domainId: String
        /// The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained (not automatically deleted).
        public let retentionPolicy: RetentionPolicy?

        public init(domainId: String, retentionPolicy: RetentionPolicy? = nil) {
            self.domainId = domainId
            self.retentionPolicy = retentionPolicy
        }

        public func validate(name: String) throws {
            try self.validate(self.domainId, name: "domainId", parent: name, max: 63)
        }

        private enum CodingKeys: String, CodingKey {
            case domainId = "DomainId"
            case retentionPolicy = "RetentionPolicy"
        }
    }

    public struct DeleteEndpointConfigInput: AWSEncodableShape {
        /// The name of the endpoint configuration that you want to delete.
        public let endpointConfigName: String

        public init(endpointConfigName: String) {
            self.endpointConfigName = endpointConfigName
        }

        public func validate(name: String) throws {
            try self.validate(self.endpointConfigName, name: "endpointConfigName", parent: name, max: 63)
            try self.validate(self.endpointConfigName, name: "endpointConfigName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigName = "EndpointConfigName"
        }
    }

    public struct DeleteEndpointInput: AWSEncodableShape {
        /// The name of the endpoint that you want to delete.
        public let endpointName: String

        public init(endpointName: String) {
            self.endpointName = endpointName
        }

        public func validate(name: String) throws {
            try self.validate(self.endpointName, name: "endpointName", parent: name, max: 63)
            try self.validate(self.endpointName, name: "endpointName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case endpointName = "EndpointName"
        }
    }

    public struct DeleteExperimentRequest: AWSEncodableShape {
        /// The name of the experiment to delete.
        public let experimentName: String

        public init(experimentName: String) {
            self.experimentName = experimentName
        }

        public func validate(name: String) throws {
            try self.validate(self.experimentName, name: "experimentName", parent: name, max: 82)
            try self.validate(self.experimentName, name: "experimentName", parent: name, min: 1)
            try self.validate(self.experimentName, name: "experimentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case experimentName = "ExperimentName"
        }
    }

    public struct DeleteExperimentResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the experiment that is being deleted.
        public let experimentArn: String?

        public init(experimentArn: String? = nil) {
            self.experimentArn = experimentArn
        }

        private enum CodingKeys: String, CodingKey {
            case experimentArn = "ExperimentArn"
        }
    }

    public struct DeleteFlowDefinitionRequest: AWSEncodableShape {
        /// The name of the flow definition you are deleting.
        public let flowDefinitionName: String

        public init(flowDefinitionName: String) {
            self.flowDefinitionName = flowDefinitionName
        }

        public func validate(name: String) throws {
            try self.validate(self.flowDefinitionName, name: "flowDefinitionName", parent: name, max: 63)
            try self.validate(self.flowDefinitionName, name: "flowDefinitionName", parent: name, min: 1)
            try self.validate(self.flowDefinitionName, name: "flowDefinitionName", parent: name, pattern: "^[a-z0-9](-*[a-z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case flowDefinitionName = "FlowDefinitionName"
        }
    }

    public struct DeleteFlowDefinitionResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteHumanTaskUiRequest: AWSEncodableShape {
        /// The name of the human task user interface (work task template) you want to delete.
        public let humanTaskUiName: String

        public init(humanTaskUiName: String) {
            self.humanTaskUiName = humanTaskUiName
        }

        public func validate(name: String) throws {
            try self.validate(self.humanTaskUiName, name: "humanTaskUiName", parent: name, max: 63)
            try self.validate(self.humanTaskUiName, name: "humanTaskUiName", parent: name, min: 1)
            try self.validate(self.humanTaskUiName, name: "humanTaskUiName", parent: name, pattern: "^[a-z0-9](-*[a-z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case humanTaskUiName = "HumanTaskUiName"
        }
    }

    public struct DeleteHumanTaskUiResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteModelInput: AWSEncodableShape {
        /// The name of the model to delete.
        public let modelName: String

        public init(modelName: String) {
            self.modelName = modelName
        }

        public func validate(name: String) throws {
            try self.validate(self.modelName, name: "modelName", parent: name, max: 63)
            try self.validate(self.modelName, name: "modelName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case modelName = "ModelName"
        }
    }

    public struct DeleteModelPackageInput: AWSEncodableShape {
        /// The name of the model package. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
        public let modelPackageName: String

        public init(modelPackageName: String) {
            self.modelPackageName = modelPackageName
        }

        public func validate(name: String) throws {
            try self.validate(self.modelPackageName, name: "modelPackageName", parent: name, max: 63)
            try self.validate(self.modelPackageName, name: "modelPackageName", parent: name, min: 1)
            try self.validate(self.modelPackageName, name: "modelPackageName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case modelPackageName = "ModelPackageName"
        }
    }

    public struct DeleteMonitoringScheduleRequest: AWSEncodableShape {
        /// The name of the monitoring schedule to delete.
        public let monitoringScheduleName: String

        public init(monitoringScheduleName: String) {
            self.monitoringScheduleName = monitoringScheduleName
        }

        public func validate(name: String) throws {
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, max: 63)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, min: 1)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case monitoringScheduleName = "MonitoringScheduleName"
        }
    }

    public struct DeleteNotebookInstanceInput: AWSEncodableShape {
        /// The name of the Amazon SageMaker notebook instance to delete.
        public let notebookInstanceName: String

        public init(notebookInstanceName: String) {
            self.notebookInstanceName = notebookInstanceName
        }

        public func validate(name: String) throws {
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, max: 63)
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceName = "NotebookInstanceName"
        }
    }

    public struct DeleteNotebookInstanceLifecycleConfigInput: AWSEncodableShape {
        /// The name of the lifecycle configuration to delete.
        public let notebookInstanceLifecycleConfigName: String

        public init(notebookInstanceLifecycleConfigName: String) {
            self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        }

        public func validate(name: String) throws {
            try self.validate(self.notebookInstanceLifecycleConfigName, name: "notebookInstanceLifecycleConfigName", parent: name, max: 63)
            try self.validate(self.notebookInstanceLifecycleConfigName, name: "notebookInstanceLifecycleConfigName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        }
    }

    public struct DeleteTagsInput: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource whose tags you want to delete.
        public let resourceArn: String
        /// An array or one or more tag keys to delete.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 256)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "arn:.*")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
                try validate($0, name: "tagKeys[]", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 50)
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagKeys = "TagKeys"
        }
    }

    public struct DeleteTagsOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteTrialComponentRequest: AWSEncodableShape {
        /// The name of the component to delete.
        public let trialComponentName: String

        public init(trialComponentName: String) {
            self.trialComponentName = trialComponentName
        }

        public func validate(name: String) throws {
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, max: 82)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, min: 1)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case trialComponentName = "TrialComponentName"
        }
    }

    public struct DeleteTrialComponentResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the component is being deleted.
        public let trialComponentArn: String?

        public init(trialComponentArn: String? = nil) {
            self.trialComponentArn = trialComponentArn
        }

        private enum CodingKeys: String, CodingKey {
            case trialComponentArn = "TrialComponentArn"
        }
    }

    public struct DeleteTrialRequest: AWSEncodableShape {
        /// The name of the trial to delete.
        public let trialName: String

        public init(trialName: String) {
            self.trialName = trialName
        }

        public func validate(name: String) throws {
            try self.validate(self.trialName, name: "trialName", parent: name, max: 82)
            try self.validate(self.trialName, name: "trialName", parent: name, min: 1)
            try self.validate(self.trialName, name: "trialName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case trialName = "TrialName"
        }
    }

    public struct DeleteTrialResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the trial that is being deleted.
        public let trialArn: String?

        public init(trialArn: String? = nil) {
            self.trialArn = trialArn
        }

        private enum CodingKeys: String, CodingKey {
            case trialArn = "TrialArn"
        }
    }

    public struct DeleteUserProfileRequest: AWSEncodableShape {
        /// The domain ID.
        public let domainId: String
        /// The user profile name.
        public let userProfileName: String

        public init(domainId: String, userProfileName: String) {
            self.domainId = domainId
            self.userProfileName = userProfileName
        }

        public func validate(name: String) throws {
            try self.validate(self.domainId, name: "domainId", parent: name, max: 63)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, max: 63)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case domainId = "DomainId"
            case userProfileName = "UserProfileName"
        }
    }

    public struct DeleteWorkforceRequest: AWSEncodableShape {
        /// The name of the workforce.
        public let workforceName: String

        public init(workforceName: String) {
            self.workforceName = workforceName
        }

        public func validate(name: String) throws {
            try self.validate(self.workforceName, name: "workforceName", parent: name, max: 63)
            try self.validate(self.workforceName, name: "workforceName", parent: name, min: 1)
            try self.validate(self.workforceName, name: "workforceName", parent: name, pattern: "^[a-zA-Z0-9]([a-zA-Z0-9\\-])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case workforceName = "WorkforceName"
        }
    }

    public struct DeleteWorkforceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteWorkteamRequest: AWSEncodableShape {
        /// The name of the work team to delete.
        public let workteamName: String

        public init(workteamName: String) {
            self.workteamName = workteamName
        }

        public func validate(name: String) throws {
            try self.validate(self.workteamName, name: "workteamName", parent: name, max: 63)
            try self.validate(self.workteamName, name: "workteamName", parent: name, min: 1)
            try self.validate(self.workteamName, name: "workteamName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case workteamName = "WorkteamName"
        }
    }

    public struct DeleteWorkteamResponse: AWSDecodableShape {
        /// Returns true if the work team was successfully deleted; otherwise, returns false.
        public let success: Bool

        public init(success: Bool) {
            self.success = success
        }

        private enum CodingKeys: String, CodingKey {
            case success = "Success"
        }
    }

    public struct DeployedImage: AWSDecodableShape {
        /// The date and time when the image path for the model resolved to the ResolvedImage
        public let resolutionTime: TimeStamp?
        /// The specific digest path of the image hosted in this ProductionVariant.
        public let resolvedImage: String?
        /// The image path you specified when you created the model.
        public let specifiedImage: String?

        public init(resolutionTime: TimeStamp? = nil, resolvedImage: String? = nil, specifiedImage: String? = nil) {
            self.resolutionTime = resolutionTime
            self.resolvedImage = resolvedImage
            self.specifiedImage = specifiedImage
        }

        private enum CodingKeys: String, CodingKey {
            case resolutionTime = "ResolutionTime"
            case resolvedImage = "ResolvedImage"
            case specifiedImage = "SpecifiedImage"
        }
    }

    public struct DescribeAlgorithmInput: AWSEncodableShape {
        /// The name of the algorithm to describe.
        public let algorithmName: String

        public init(algorithmName: String) {
            self.algorithmName = algorithmName
        }

        public func validate(name: String) throws {
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, max: 170)
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, min: 1)
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, pattern: "(arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:[a-z\\-]*\\/)?([a-zA-Z0-9]([a-zA-Z0-9-]){0,62})(?<!-)$")
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmName = "AlgorithmName"
        }
    }

    public struct DescribeAlgorithmOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the algorithm.
        public let algorithmArn: String
        /// A brief summary about the algorithm.
        public let algorithmDescription: String?
        /// The name of the algorithm being described.
        public let algorithmName: String
        /// The current status of the algorithm.
        public let algorithmStatus: AlgorithmStatus
        /// Details about the current status of the algorithm.
        public let algorithmStatusDetails: AlgorithmStatusDetails
        /// Whether the algorithm is certified to be listed in AWS Marketplace.
        public let certifyForMarketplace: Bool?
        /// A timestamp specifying when the algorithm was created.
        public let creationTime: TimeStamp
        /// Details about inference jobs that the algorithm runs.
        public let inferenceSpecification: InferenceSpecification?
        /// The product identifier of the algorithm.
        public let productId: String?
        /// Details about training jobs run by this algorithm.
        public let trainingSpecification: TrainingSpecification
        /// Details about configurations for one or more training jobs that Amazon SageMaker runs to test the algorithm.
        public let validationSpecification: AlgorithmValidationSpecification?

        public init(algorithmArn: String, algorithmDescription: String? = nil, algorithmName: String, algorithmStatus: AlgorithmStatus, algorithmStatusDetails: AlgorithmStatusDetails, certifyForMarketplace: Bool? = nil, creationTime: TimeStamp, inferenceSpecification: InferenceSpecification? = nil, productId: String? = nil, trainingSpecification: TrainingSpecification, validationSpecification: AlgorithmValidationSpecification? = nil) {
            self.algorithmArn = algorithmArn
            self.algorithmDescription = algorithmDescription
            self.algorithmName = algorithmName
            self.algorithmStatus = algorithmStatus
            self.algorithmStatusDetails = algorithmStatusDetails
            self.certifyForMarketplace = certifyForMarketplace
            self.creationTime = creationTime
            self.inferenceSpecification = inferenceSpecification
            self.productId = productId
            self.trainingSpecification = trainingSpecification
            self.validationSpecification = validationSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmArn = "AlgorithmArn"
            case algorithmDescription = "AlgorithmDescription"
            case algorithmName = "AlgorithmName"
            case algorithmStatus = "AlgorithmStatus"
            case algorithmStatusDetails = "AlgorithmStatusDetails"
            case certifyForMarketplace = "CertifyForMarketplace"
            case creationTime = "CreationTime"
            case inferenceSpecification = "InferenceSpecification"
            case productId = "ProductId"
            case trainingSpecification = "TrainingSpecification"
            case validationSpecification = "ValidationSpecification"
        }
    }

    public struct DescribeAppRequest: AWSEncodableShape {
        /// The name of the app.
        public let appName: String
        /// The type of app.
        public let appType: AppType
        /// The domain ID.
        public let domainId: String
        /// The user profile name.
        public let userProfileName: String

        public init(appName: String, appType: AppType, domainId: String, userProfileName: String) {
            self.appName = appName
            self.appType = appType
            self.domainId = domainId
            self.userProfileName = userProfileName
        }

        public func validate(name: String) throws {
            try self.validate(self.appName, name: "appName", parent: name, max: 63)
            try self.validate(self.appName, name: "appName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.domainId, name: "domainId", parent: name, max: 63)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, max: 63)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case appName = "AppName"
            case appType = "AppType"
            case domainId = "DomainId"
            case userProfileName = "UserProfileName"
        }
    }

    public struct DescribeAppResponse: AWSDecodableShape {
        /// The app's Amazon Resource Name (ARN).
        public let appArn: String?
        /// The name of the app.
        public let appName: String?
        /// The type of app.
        public let appType: AppType?
        /// The creation time.
        public let creationTime: TimeStamp?
        /// The domain ID.
        public let domainId: String?
        /// The failure reason.
        public let failureReason: String?
        /// The timestamp of the last health check.
        public let lastHealthCheckTimestamp: TimeStamp?
        /// The timestamp of the last user's activity.
        public let lastUserActivityTimestamp: TimeStamp?
        /// The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        public let resourceSpec: ResourceSpec?
        /// The status.
        public let status: AppStatus?
        /// The user profile name.
        public let userProfileName: String?

        public init(appArn: String? = nil, appName: String? = nil, appType: AppType? = nil, creationTime: TimeStamp? = nil, domainId: String? = nil, failureReason: String? = nil, lastHealthCheckTimestamp: TimeStamp? = nil, lastUserActivityTimestamp: TimeStamp? = nil, resourceSpec: ResourceSpec? = nil, status: AppStatus? = nil, userProfileName: String? = nil) {
            self.appArn = appArn
            self.appName = appName
            self.appType = appType
            self.creationTime = creationTime
            self.domainId = domainId
            self.failureReason = failureReason
            self.lastHealthCheckTimestamp = lastHealthCheckTimestamp
            self.lastUserActivityTimestamp = lastUserActivityTimestamp
            self.resourceSpec = resourceSpec
            self.status = status
            self.userProfileName = userProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case appArn = "AppArn"
            case appName = "AppName"
            case appType = "AppType"
            case creationTime = "CreationTime"
            case domainId = "DomainId"
            case failureReason = "FailureReason"
            case lastHealthCheckTimestamp = "LastHealthCheckTimestamp"
            case lastUserActivityTimestamp = "LastUserActivityTimestamp"
            case resourceSpec = "ResourceSpec"
            case status = "Status"
            case userProfileName = "UserProfileName"
        }
    }

    public struct DescribeAutoMLJobRequest: AWSEncodableShape {
        /// Request information about a job using that job's unique name.
        public let autoMLJobName: String

        public init(autoMLJobName: String) {
            self.autoMLJobName = autoMLJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.autoMLJobName, name: "autoMLJobName", parent: name, max: 32)
            try self.validate(self.autoMLJobName, name: "autoMLJobName", parent: name, min: 1)
            try self.validate(self.autoMLJobName, name: "autoMLJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoMLJobName = "AutoMLJobName"
        }
    }

    public struct DescribeAutoMLJobResponse: AWSDecodableShape {
        /// Returns the job's ARN.
        public let autoMLJobArn: String
        /// Returns information on the job's artifacts found in AutoMLJobArtifacts.
        public let autoMLJobArtifacts: AutoMLJobArtifacts?
        /// Returns the job's config.
        public let autoMLJobConfig: AutoMLJobConfig?
        /// Returns the name of a job.
        public let autoMLJobName: String
        /// Returns the job's objective.
        public let autoMLJobObjective: AutoMLJobObjective?
        /// Returns the job's AutoMLJobSecondaryStatus.
        public let autoMLJobSecondaryStatus: AutoMLJobSecondaryStatus
        /// Returns the job's AutoMLJobStatus.
        public let autoMLJobStatus: AutoMLJobStatus
        /// Returns the job's BestCandidate.
        public let bestCandidate: AutoMLCandidate?
        /// Returns the job's creation time.
        public let creationTime: TimeStamp
        /// Returns the job's end time.
        public let endTime: TimeStamp?
        /// Returns the job's FailureReason.
        public let failureReason: String?
        /// Returns the job's output from GenerateCandidateDefinitionsOnly.
        public let generateCandidateDefinitionsOnly: Bool?
        /// Returns the job's input data config.
        public let inputDataConfig: [AutoMLChannel]
        /// Returns the job's last modified time.
        public let lastModifiedTime: TimeStamp
        /// Returns the job's output data config.
        public let outputDataConfig: AutoMLOutputDataConfig
        /// Returns the job's problem type.
        public let problemType: ProblemType?
        /// This contains ProblemType, AutoMLJobObjective and CompletionCriteria. They're auto-inferred values, if not provided by you. If you do provide them, then they'll be the same as provided.
        public let resolvedAttributes: ResolvedAttributes?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that has read permission to the input data location and write permission to the output data location in Amazon S3.
        public let roleArn: String

        public init(autoMLJobArn: String, autoMLJobArtifacts: AutoMLJobArtifacts? = nil, autoMLJobConfig: AutoMLJobConfig? = nil, autoMLJobName: String, autoMLJobObjective: AutoMLJobObjective? = nil, autoMLJobSecondaryStatus: AutoMLJobSecondaryStatus, autoMLJobStatus: AutoMLJobStatus, bestCandidate: AutoMLCandidate? = nil, creationTime: TimeStamp, endTime: TimeStamp? = nil, failureReason: String? = nil, generateCandidateDefinitionsOnly: Bool? = nil, inputDataConfig: [AutoMLChannel], lastModifiedTime: TimeStamp, outputDataConfig: AutoMLOutputDataConfig, problemType: ProblemType? = nil, resolvedAttributes: ResolvedAttributes? = nil, roleArn: String) {
            self.autoMLJobArn = autoMLJobArn
            self.autoMLJobArtifacts = autoMLJobArtifacts
            self.autoMLJobConfig = autoMLJobConfig
            self.autoMLJobName = autoMLJobName
            self.autoMLJobObjective = autoMLJobObjective
            self.autoMLJobSecondaryStatus = autoMLJobSecondaryStatus
            self.autoMLJobStatus = autoMLJobStatus
            self.bestCandidate = bestCandidate
            self.creationTime = creationTime
            self.endTime = endTime
            self.failureReason = failureReason
            self.generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnly
            self.inputDataConfig = inputDataConfig
            self.lastModifiedTime = lastModifiedTime
            self.outputDataConfig = outputDataConfig
            self.problemType = problemType
            self.resolvedAttributes = resolvedAttributes
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case autoMLJobArn = "AutoMLJobArn"
            case autoMLJobArtifacts = "AutoMLJobArtifacts"
            case autoMLJobConfig = "AutoMLJobConfig"
            case autoMLJobName = "AutoMLJobName"
            case autoMLJobObjective = "AutoMLJobObjective"
            case autoMLJobSecondaryStatus = "AutoMLJobSecondaryStatus"
            case autoMLJobStatus = "AutoMLJobStatus"
            case bestCandidate = "BestCandidate"
            case creationTime = "CreationTime"
            case endTime = "EndTime"
            case failureReason = "FailureReason"
            case generateCandidateDefinitionsOnly = "GenerateCandidateDefinitionsOnly"
            case inputDataConfig = "InputDataConfig"
            case lastModifiedTime = "LastModifiedTime"
            case outputDataConfig = "OutputDataConfig"
            case problemType = "ProblemType"
            case resolvedAttributes = "ResolvedAttributes"
            case roleArn = "RoleArn"
        }
    }

    public struct DescribeCodeRepositoryInput: AWSEncodableShape {
        /// The name of the Git repository to describe.
        public let codeRepositoryName: String

        public init(codeRepositoryName: String) {
            self.codeRepositoryName = codeRepositoryName
        }

        public func validate(name: String) throws {
            try self.validate(self.codeRepositoryName, name: "codeRepositoryName", parent: name, max: 63)
            try self.validate(self.codeRepositoryName, name: "codeRepositoryName", parent: name, min: 1)
            try self.validate(self.codeRepositoryName, name: "codeRepositoryName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case codeRepositoryName = "CodeRepositoryName"
        }
    }

    public struct DescribeCodeRepositoryOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Git repository.
        public let codeRepositoryArn: String
        /// The name of the Git repository.
        public let codeRepositoryName: String
        /// The date and time that the repository was created.
        public let creationTime: TimeStamp
        /// Configuration details about the repository, including the URL where the repository is located, the default branch, and the Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the repository.
        public let gitConfig: GitConfig?
        /// The date and time that the repository was last changed.
        public let lastModifiedTime: TimeStamp

        public init(codeRepositoryArn: String, codeRepositoryName: String, creationTime: TimeStamp, gitConfig: GitConfig? = nil, lastModifiedTime: TimeStamp) {
            self.codeRepositoryArn = codeRepositoryArn
            self.codeRepositoryName = codeRepositoryName
            self.creationTime = creationTime
            self.gitConfig = gitConfig
            self.lastModifiedTime = lastModifiedTime
        }

        private enum CodingKeys: String, CodingKey {
            case codeRepositoryArn = "CodeRepositoryArn"
            case codeRepositoryName = "CodeRepositoryName"
            case creationTime = "CreationTime"
            case gitConfig = "GitConfig"
            case lastModifiedTime = "LastModifiedTime"
        }
    }

    public struct DescribeCompilationJobRequest: AWSEncodableShape {
        /// The name of the model compilation job that you want information about.
        public let compilationJobName: String

        public init(compilationJobName: String) {
            self.compilationJobName = compilationJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.compilationJobName, name: "compilationJobName", parent: name, max: 63)
            try self.validate(self.compilationJobName, name: "compilationJobName", parent: name, min: 1)
            try self.validate(self.compilationJobName, name: "compilationJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case compilationJobName = "CompilationJobName"
        }
    }

    public struct DescribeCompilationJobResponse: AWSDecodableShape {
        /// The time when the model compilation job on a compilation job instance ended. For a successful or stopped job, this is when the job's model artifacts have finished uploading. For a failed job, this is when Amazon SageMaker detected that the job failed.
        public let compilationEndTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker assumes to perform the model compilation job.
        public let compilationJobArn: String
        /// The name of the model compilation job.
        public let compilationJobName: String
        /// The status of the model compilation job.
        public let compilationJobStatus: CompilationJobStatus
        /// The time when the model compilation job started the CompilationJob instances.  You are billed for the time between this timestamp and the timestamp in the DescribeCompilationJobResponse$CompilationEndTime field. In Amazon CloudWatch Logs, the start time might be later than this time. That's because it takes time to download the compilation job, which depends on the size of the compilation job container.
        public let compilationStartTime: TimeStamp?
        /// The time that the model compilation job was created.
        public let creationTime: TimeStamp
        /// If a model compilation job failed, the reason it failed.
        public let failureReason: String
        /// Information about the location in Amazon S3 of the input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.
        public let inputConfig: InputConfig
        /// The time that the status of the model compilation job was last modified.
        public let lastModifiedTime: TimeStamp
        /// Information about the location in Amazon S3 that has been configured for storing the model artifacts used in the compilation job.
        public let modelArtifacts: ModelArtifacts
        /// Information about the output location for the compiled model and the target device that the model runs on.
        public let outputConfig: OutputConfig
        /// The Amazon Resource Name (ARN) of the model compilation job.
        public let roleArn: String
        /// Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.
        public let stoppingCondition: StoppingCondition

        public init(compilationEndTime: TimeStamp? = nil, compilationJobArn: String, compilationJobName: String, compilationJobStatus: CompilationJobStatus, compilationStartTime: TimeStamp? = nil, creationTime: TimeStamp, failureReason: String, inputConfig: InputConfig, lastModifiedTime: TimeStamp, modelArtifacts: ModelArtifacts, outputConfig: OutputConfig, roleArn: String, stoppingCondition: StoppingCondition) {
            self.compilationEndTime = compilationEndTime
            self.compilationJobArn = compilationJobArn
            self.compilationJobName = compilationJobName
            self.compilationJobStatus = compilationJobStatus
            self.compilationStartTime = compilationStartTime
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.inputConfig = inputConfig
            self.lastModifiedTime = lastModifiedTime
            self.modelArtifacts = modelArtifacts
            self.outputConfig = outputConfig
            self.roleArn = roleArn
            self.stoppingCondition = stoppingCondition
        }

        private enum CodingKeys: String, CodingKey {
            case compilationEndTime = "CompilationEndTime"
            case compilationJobArn = "CompilationJobArn"
            case compilationJobName = "CompilationJobName"
            case compilationJobStatus = "CompilationJobStatus"
            case compilationStartTime = "CompilationStartTime"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case inputConfig = "InputConfig"
            case lastModifiedTime = "LastModifiedTime"
            case modelArtifacts = "ModelArtifacts"
            case outputConfig = "OutputConfig"
            case roleArn = "RoleArn"
            case stoppingCondition = "StoppingCondition"
        }
    }

    public struct DescribeDomainRequest: AWSEncodableShape {
        /// The domain ID.
        public let domainId: String

        public init(domainId: String) {
            self.domainId = domainId
        }

        public func validate(name: String) throws {
            try self.validate(self.domainId, name: "domainId", parent: name, max: 63)
        }

        private enum CodingKeys: String, CodingKey {
            case domainId = "DomainId"
        }
    }

    public struct DescribeDomainResponse: AWSDecodableShape {
        /// The domain's authentication mode.
        public let authMode: AuthMode?
        /// The creation time.
        public let creationTime: TimeStamp?
        /// Settings which are applied to all UserProfile in this domain, if settings are not explicitly specified in a given UserProfile.
        public let defaultUserSettings: UserSettings?
        /// The domain's Amazon Resource Name (ARN).
        public let domainArn: String?
        /// The domain ID.
        public let domainId: String?
        /// The domain name.
        public let domainName: String?
        /// The failure reason.
        public let failureReason: String?
        /// The ID of the Amazon Elastic File System (EFS) managed by this Domain.
        public let homeEfsFileSystemId: String?
        /// The AWS Key Management Service encryption key ID.
        public let homeEfsFileSystemKmsKeyId: String?
        /// The last modified time.
        public let lastModifiedTime: TimeStamp?
        /// The SSO managed application instance ID.
        public let singleSignOnManagedApplicationInstanceId: String?
        /// The status.
        public let status: DomainStatus?
        /// Security setting to limit to a set of subnets.
        public let subnetIds: [String]?
        /// The domain's URL.
        public let url: String?
        /// The ID of the Amazon Virtual Private Cloud.
        public let vpcId: String?

        public init(authMode: AuthMode? = nil, creationTime: TimeStamp? = nil, defaultUserSettings: UserSettings? = nil, domainArn: String? = nil, domainId: String? = nil, domainName: String? = nil, failureReason: String? = nil, homeEfsFileSystemId: String? = nil, homeEfsFileSystemKmsKeyId: String? = nil, lastModifiedTime: TimeStamp? = nil, singleSignOnManagedApplicationInstanceId: String? = nil, status: DomainStatus? = nil, subnetIds: [String]? = nil, url: String? = nil, vpcId: String? = nil) {
            self.authMode = authMode
            self.creationTime = creationTime
            self.defaultUserSettings = defaultUserSettings
            self.domainArn = domainArn
            self.domainId = domainId
            self.domainName = domainName
            self.failureReason = failureReason
            self.homeEfsFileSystemId = homeEfsFileSystemId
            self.homeEfsFileSystemKmsKeyId = homeEfsFileSystemKmsKeyId
            self.lastModifiedTime = lastModifiedTime
            self.singleSignOnManagedApplicationInstanceId = singleSignOnManagedApplicationInstanceId
            self.status = status
            self.subnetIds = subnetIds
            self.url = url
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case authMode = "AuthMode"
            case creationTime = "CreationTime"
            case defaultUserSettings = "DefaultUserSettings"
            case domainArn = "DomainArn"
            case domainId = "DomainId"
            case domainName = "DomainName"
            case failureReason = "FailureReason"
            case homeEfsFileSystemId = "HomeEfsFileSystemId"
            case homeEfsFileSystemKmsKeyId = "HomeEfsFileSystemKmsKeyId"
            case lastModifiedTime = "LastModifiedTime"
            case singleSignOnManagedApplicationInstanceId = "SingleSignOnManagedApplicationInstanceId"
            case status = "Status"
            case subnetIds = "SubnetIds"
            case url = "Url"
            case vpcId = "VpcId"
        }
    }

    public struct DescribeEndpointConfigInput: AWSEncodableShape {
        /// The name of the endpoint configuration.
        public let endpointConfigName: String

        public init(endpointConfigName: String) {
            self.endpointConfigName = endpointConfigName
        }

        public func validate(name: String) throws {
            try self.validate(self.endpointConfigName, name: "endpointConfigName", parent: name, max: 63)
            try self.validate(self.endpointConfigName, name: "endpointConfigName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigName = "EndpointConfigName"
        }
    }

    public struct DescribeEndpointConfigOutput: AWSDecodableShape {
        /// A timestamp that shows when the endpoint configuration was created.
        public let creationTime: TimeStamp
        public let dataCaptureConfig: DataCaptureConfig?
        /// The Amazon Resource Name (ARN) of the endpoint configuration.
        public let endpointConfigArn: String
        /// Name of the Amazon SageMaker endpoint configuration.
        public let endpointConfigName: String
        /// AWS KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance.
        public let kmsKeyId: String?
        /// An array of ProductionVariant objects, one for each model that you want to host at this endpoint.
        public let productionVariants: [ProductionVariant]

        public init(creationTime: TimeStamp, dataCaptureConfig: DataCaptureConfig? = nil, endpointConfigArn: String, endpointConfigName: String, kmsKeyId: String? = nil, productionVariants: [ProductionVariant]) {
            self.creationTime = creationTime
            self.dataCaptureConfig = dataCaptureConfig
            self.endpointConfigArn = endpointConfigArn
            self.endpointConfigName = endpointConfigName
            self.kmsKeyId = kmsKeyId
            self.productionVariants = productionVariants
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case dataCaptureConfig = "DataCaptureConfig"
            case endpointConfigArn = "EndpointConfigArn"
            case endpointConfigName = "EndpointConfigName"
            case kmsKeyId = "KmsKeyId"
            case productionVariants = "ProductionVariants"
        }
    }

    public struct DescribeEndpointInput: AWSEncodableShape {
        /// The name of the endpoint.
        public let endpointName: String

        public init(endpointName: String) {
            self.endpointName = endpointName
        }

        public func validate(name: String) throws {
            try self.validate(self.endpointName, name: "endpointName", parent: name, max: 63)
            try self.validate(self.endpointName, name: "endpointName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case endpointName = "EndpointName"
        }
    }

    public struct DescribeEndpointOutput: AWSDecodableShape {
        /// A timestamp that shows when the endpoint was created.
        public let creationTime: TimeStamp
        public let dataCaptureConfig: DataCaptureConfigSummary?
        /// The Amazon Resource Name (ARN) of the endpoint.
        public let endpointArn: String
        /// The name of the endpoint configuration associated with this endpoint.
        public let endpointConfigName: String
        /// Name of the endpoint.
        public let endpointName: String
        /// The status of the endpoint.    OutOfService: Endpoint is not available to take incoming requests.    Creating: CreateEndpoint is executing.    Updating: UpdateEndpoint or UpdateEndpointWeightsAndCapacities is executing.    SystemUpdating: Endpoint is undergoing maintenance and cannot be updated or deleted or re-scaled until it has completed. This maintenance operation does not change any customer-specified values such as VPC config, KMS encryption, model, instance type, or instance count.    RollingBack: Endpoint fails to scale up or down or change its variant weight and is in the process of rolling back to its previous configuration. Once the rollback completes, endpoint returns to an InService status. This transitional status only applies to an endpoint that has autoscaling enabled and is undergoing variant weight or capacity changes as part of an UpdateEndpointWeightsAndCapacities call or when the UpdateEndpointWeightsAndCapacities operation is called explicitly.    InService: Endpoint is available to process incoming requests.    Deleting: DeleteEndpoint is executing.    Failed: Endpoint could not be created, updated, or re-scaled. Use DescribeEndpointOutput$FailureReason for information about the failure. DeleteEndpoint is the only operation that can be performed on a failed endpoint.
        public let endpointStatus: EndpointStatus
        /// If the status of the endpoint is Failed, the reason why it failed.
        public let failureReason: String?
        /// A timestamp that shows when the endpoint was last modified.
        public let lastModifiedTime: TimeStamp
        ///  An array of ProductionVariantSummary objects, one for each model hosted behind this endpoint.
        public let productionVariants: [ProductionVariantSummary]?

        public init(creationTime: TimeStamp, dataCaptureConfig: DataCaptureConfigSummary? = nil, endpointArn: String, endpointConfigName: String, endpointName: String, endpointStatus: EndpointStatus, failureReason: String? = nil, lastModifiedTime: TimeStamp, productionVariants: [ProductionVariantSummary]? = nil) {
            self.creationTime = creationTime
            self.dataCaptureConfig = dataCaptureConfig
            self.endpointArn = endpointArn
            self.endpointConfigName = endpointConfigName
            self.endpointName = endpointName
            self.endpointStatus = endpointStatus
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.productionVariants = productionVariants
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case dataCaptureConfig = "DataCaptureConfig"
            case endpointArn = "EndpointArn"
            case endpointConfigName = "EndpointConfigName"
            case endpointName = "EndpointName"
            case endpointStatus = "EndpointStatus"
            case failureReason = "FailureReason"
            case lastModifiedTime = "LastModifiedTime"
            case productionVariants = "ProductionVariants"
        }
    }

    public struct DescribeExperimentRequest: AWSEncodableShape {
        /// The name of the experiment to describe.
        public let experimentName: String

        public init(experimentName: String) {
            self.experimentName = experimentName
        }

        public func validate(name: String) throws {
            try self.validate(self.experimentName, name: "experimentName", parent: name, max: 82)
            try self.validate(self.experimentName, name: "experimentName", parent: name, min: 1)
            try self.validate(self.experimentName, name: "experimentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case experimentName = "ExperimentName"
        }
    }

    public struct DescribeExperimentResponse: AWSDecodableShape {
        /// Who created the experiment.
        public let createdBy: UserContext?
        /// When the experiment was created.
        public let creationTime: TimeStamp?
        /// The description of the experiment.
        public let description: String?
        /// The name of the experiment as displayed. If DisplayName isn't specified, ExperimentName is displayed.
        public let displayName: String?
        /// The Amazon Resource Name (ARN) of the experiment.
        public let experimentArn: String?
        /// The name of the experiment.
        public let experimentName: String?
        /// Who last modified the experiment.
        public let lastModifiedBy: UserContext?
        /// When the experiment was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The ARN of the source and, optionally, the type.
        public let source: ExperimentSource?

        public init(createdBy: UserContext? = nil, creationTime: TimeStamp? = nil, description: String? = nil, displayName: String? = nil, experimentArn: String? = nil, experimentName: String? = nil, lastModifiedBy: UserContext? = nil, lastModifiedTime: TimeStamp? = nil, source: ExperimentSource? = nil) {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.description = description
            self.displayName = displayName
            self.experimentArn = experimentArn
            self.experimentName = experimentName
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy = "CreatedBy"
            case creationTime = "CreationTime"
            case description = "Description"
            case displayName = "DisplayName"
            case experimentArn = "ExperimentArn"
            case experimentName = "ExperimentName"
            case lastModifiedBy = "LastModifiedBy"
            case lastModifiedTime = "LastModifiedTime"
            case source = "Source"
        }
    }

    public struct DescribeFlowDefinitionRequest: AWSEncodableShape {
        /// The name of the flow definition.
        public let flowDefinitionName: String

        public init(flowDefinitionName: String) {
            self.flowDefinitionName = flowDefinitionName
        }

        public func validate(name: String) throws {
            try self.validate(self.flowDefinitionName, name: "flowDefinitionName", parent: name, max: 63)
            try self.validate(self.flowDefinitionName, name: "flowDefinitionName", parent: name, min: 1)
            try self.validate(self.flowDefinitionName, name: "flowDefinitionName", parent: name, pattern: "^[a-z0-9](-*[a-z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case flowDefinitionName = "FlowDefinitionName"
        }
    }

    public struct DescribeFlowDefinitionResponse: AWSDecodableShape {
        /// The timestamp when the flow definition was created.
        public let creationTime: TimeStamp
        /// The reason your flow definition failed.
        public let failureReason: String?
        /// The Amazon Resource Name (ARN) of the flow defintion.
        public let flowDefinitionArn: String
        /// The Amazon Resource Name (ARN) of the flow definition.
        public let flowDefinitionName: String
        /// The status of the flow definition. Valid values are listed below.
        public let flowDefinitionStatus: FlowDefinitionStatus
        /// An object containing information about what triggers a human review workflow.
        public let humanLoopActivationConfig: HumanLoopActivationConfig?
        /// An object containing information about who works on the task, the workforce task price, and other task details.
        public let humanLoopConfig: HumanLoopConfig
        /// Container for configuring the source of human task requests. Used to specify if Amazon Rekognition or Amazon Textract is used as an integration source.
        public let humanLoopRequestSource: HumanLoopRequestSource?
        /// An object containing information about the output file.
        public let outputConfig: FlowDefinitionOutputConfig
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) execution role for the flow definition.
        public let roleArn: String

        public init(creationTime: TimeStamp, failureReason: String? = nil, flowDefinitionArn: String, flowDefinitionName: String, flowDefinitionStatus: FlowDefinitionStatus, humanLoopActivationConfig: HumanLoopActivationConfig? = nil, humanLoopConfig: HumanLoopConfig, humanLoopRequestSource: HumanLoopRequestSource? = nil, outputConfig: FlowDefinitionOutputConfig, roleArn: String) {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.flowDefinitionArn = flowDefinitionArn
            self.flowDefinitionName = flowDefinitionName
            self.flowDefinitionStatus = flowDefinitionStatus
            self.humanLoopActivationConfig = humanLoopActivationConfig
            self.humanLoopConfig = humanLoopConfig
            self.humanLoopRequestSource = humanLoopRequestSource
            self.outputConfig = outputConfig
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case flowDefinitionArn = "FlowDefinitionArn"
            case flowDefinitionName = "FlowDefinitionName"
            case flowDefinitionStatus = "FlowDefinitionStatus"
            case humanLoopActivationConfig = "HumanLoopActivationConfig"
            case humanLoopConfig = "HumanLoopConfig"
            case humanLoopRequestSource = "HumanLoopRequestSource"
            case outputConfig = "OutputConfig"
            case roleArn = "RoleArn"
        }
    }

    public struct DescribeHumanTaskUiRequest: AWSEncodableShape {
        /// The name of the human task user interface (worker task template) you want information about.
        public let humanTaskUiName: String

        public init(humanTaskUiName: String) {
            self.humanTaskUiName = humanTaskUiName
        }

        public func validate(name: String) throws {
            try self.validate(self.humanTaskUiName, name: "humanTaskUiName", parent: name, max: 63)
            try self.validate(self.humanTaskUiName, name: "humanTaskUiName", parent: name, min: 1)
            try self.validate(self.humanTaskUiName, name: "humanTaskUiName", parent: name, pattern: "^[a-z0-9](-*[a-z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case humanTaskUiName = "HumanTaskUiName"
        }
    }

    public struct DescribeHumanTaskUiResponse: AWSDecodableShape {
        /// The timestamp when the human task user interface was created.
        public let creationTime: TimeStamp
        /// The Amazon Resource Name (ARN) of the human task user interface (worker task template).
        public let humanTaskUiArn: String
        /// The name of the human task user interface (worker task template).
        public let humanTaskUiName: String
        /// The status of the human task user interface (worker task template). Valid values are listed below.
        public let humanTaskUiStatus: HumanTaskUiStatus?
        public let uiTemplate: UiTemplateInfo

        public init(creationTime: TimeStamp, humanTaskUiArn: String, humanTaskUiName: String, humanTaskUiStatus: HumanTaskUiStatus? = nil, uiTemplate: UiTemplateInfo) {
            self.creationTime = creationTime
            self.humanTaskUiArn = humanTaskUiArn
            self.humanTaskUiName = humanTaskUiName
            self.humanTaskUiStatus = humanTaskUiStatus
            self.uiTemplate = uiTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case humanTaskUiArn = "HumanTaskUiArn"
            case humanTaskUiName = "HumanTaskUiName"
            case humanTaskUiStatus = "HumanTaskUiStatus"
            case uiTemplate = "UiTemplate"
        }
    }

    public struct DescribeHyperParameterTuningJobRequest: AWSEncodableShape {
        /// The name of the tuning job.
        public let hyperParameterTuningJobName: String

        public init(hyperParameterTuningJobName: String) {
            self.hyperParameterTuningJobName = hyperParameterTuningJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, max: 32)
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, min: 1)
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        }
    }

    public struct DescribeHyperParameterTuningJobResponse: AWSDecodableShape {
        /// A TrainingJobSummary object that describes the training job that completed with the best current HyperParameterTuningJobObjective.
        public let bestTrainingJob: HyperParameterTrainingJobSummary?
        /// The date and time that the tuning job started.
        public let creationTime: TimeStamp
        /// If the tuning job failed, the reason it failed.
        public let failureReason: String?
        /// The date and time that the tuning job ended.
        public let hyperParameterTuningEndTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the tuning job.
        public let hyperParameterTuningJobArn: String
        /// The HyperParameterTuningJobConfig object that specifies the configuration of the tuning job.
        public let hyperParameterTuningJobConfig: HyperParameterTuningJobConfig
        /// The name of the tuning job.
        public let hyperParameterTuningJobName: String
        /// The status of the tuning job: InProgress, Completed, Failed, Stopping, or Stopped.
        public let hyperParameterTuningJobStatus: HyperParameterTuningJobStatus
        /// The date and time that the status of the tuning job was modified.
        public let lastModifiedTime: TimeStamp?
        /// The ObjectiveStatusCounters object that specifies the number of training jobs, categorized by the status of their final objective metric, that this tuning job launched.
        public let objectiveStatusCounters: ObjectiveStatusCounters
        /// If the hyperparameter tuning job is an warm start tuning job with a WarmStartType of IDENTICAL_DATA_AND_ALGORITHM, this is the TrainingJobSummary for the training job with the best objective metric value of all training jobs launched by this tuning job and all parent jobs specified for the warm start tuning job.
        public let overallBestTrainingJob: HyperParameterTrainingJobSummary?
        /// The HyperParameterTrainingJobDefinition object that specifies the definition of the training jobs that this tuning job launches.
        public let trainingJobDefinition: HyperParameterTrainingJobDefinition?
        /// A list of the HyperParameterTrainingJobDefinition objects launched for this tuning job.
        public let trainingJobDefinitions: [HyperParameterTrainingJobDefinition]?
        /// The TrainingJobStatusCounters object that specifies the number of training jobs, categorized by status, that this tuning job launched.
        public let trainingJobStatusCounters: TrainingJobStatusCounters
        /// The configuration for starting the hyperparameter parameter tuning job using one or more previous tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.
        public let warmStartConfig: HyperParameterTuningJobWarmStartConfig?

        public init(bestTrainingJob: HyperParameterTrainingJobSummary? = nil, creationTime: TimeStamp, failureReason: String? = nil, hyperParameterTuningEndTime: TimeStamp? = nil, hyperParameterTuningJobArn: String, hyperParameterTuningJobConfig: HyperParameterTuningJobConfig, hyperParameterTuningJobName: String, hyperParameterTuningJobStatus: HyperParameterTuningJobStatus, lastModifiedTime: TimeStamp? = nil, objectiveStatusCounters: ObjectiveStatusCounters, overallBestTrainingJob: HyperParameterTrainingJobSummary? = nil, trainingJobDefinition: HyperParameterTrainingJobDefinition? = nil, trainingJobDefinitions: [HyperParameterTrainingJobDefinition]? = nil, trainingJobStatusCounters: TrainingJobStatusCounters, warmStartConfig: HyperParameterTuningJobWarmStartConfig? = nil) {
            self.bestTrainingJob = bestTrainingJob
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.hyperParameterTuningEndTime = hyperParameterTuningEndTime
            self.hyperParameterTuningJobArn = hyperParameterTuningJobArn
            self.hyperParameterTuningJobConfig = hyperParameterTuningJobConfig
            self.hyperParameterTuningJobName = hyperParameterTuningJobName
            self.hyperParameterTuningJobStatus = hyperParameterTuningJobStatus
            self.lastModifiedTime = lastModifiedTime
            self.objectiveStatusCounters = objectiveStatusCounters
            self.overallBestTrainingJob = overallBestTrainingJob
            self.trainingJobDefinition = trainingJobDefinition
            self.trainingJobDefinitions = trainingJobDefinitions
            self.trainingJobStatusCounters = trainingJobStatusCounters
            self.warmStartConfig = warmStartConfig
        }

        private enum CodingKeys: String, CodingKey {
            case bestTrainingJob = "BestTrainingJob"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case hyperParameterTuningEndTime = "HyperParameterTuningEndTime"
            case hyperParameterTuningJobArn = "HyperParameterTuningJobArn"
            case hyperParameterTuningJobConfig = "HyperParameterTuningJobConfig"
            case hyperParameterTuningJobName = "HyperParameterTuningJobName"
            case hyperParameterTuningJobStatus = "HyperParameterTuningJobStatus"
            case lastModifiedTime = "LastModifiedTime"
            case objectiveStatusCounters = "ObjectiveStatusCounters"
            case overallBestTrainingJob = "OverallBestTrainingJob"
            case trainingJobDefinition = "TrainingJobDefinition"
            case trainingJobDefinitions = "TrainingJobDefinitions"
            case trainingJobStatusCounters = "TrainingJobStatusCounters"
            case warmStartConfig = "WarmStartConfig"
        }
    }

    public struct DescribeLabelingJobRequest: AWSEncodableShape {
        /// The name of the labeling job to return information for.
        public let labelingJobName: String

        public init(labelingJobName: String) {
            self.labelingJobName = labelingJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.labelingJobName, name: "labelingJobName", parent: name, max: 63)
            try self.validate(self.labelingJobName, name: "labelingJobName", parent: name, min: 1)
            try self.validate(self.labelingJobName, name: "labelingJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case labelingJobName = "LabelingJobName"
        }
    }

    public struct DescribeLabelingJobResponse: AWSDecodableShape {
        /// The date and time that the labeling job was created.
        public let creationTime: TimeStamp
        /// If the job failed, the reason that it failed.
        public let failureReason: String?
        /// Configuration information required for human workers to complete a labeling task.
        public let humanTaskConfig: HumanTaskConfig
        /// Input configuration information for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects.
        public let inputConfig: LabelingJobInputConfig
        /// A unique identifier for work done as part of a labeling job.
        public let jobReferenceCode: String
        /// The attribute used as the label in the output manifest file.
        public let labelAttributeName: String?
        /// The S3 location of the JSON file that defines the categories used to label data objects. Please note the following label-category limits:   Semantic segmentation labeling jobs using automated labeling: 20 labels   Box bounding labeling jobs (all): 10 labels   The file is a JSON structure in the following format:  {    "document-version": "2018-11-28"    "labels": [    {    "label": "label 1"    },    {    "label": "label 2"    },    ...    {    "label": "label n"    }    ]   }
        public let labelCategoryConfigS3Uri: String?
        /// Provides a breakdown of the number of data objects labeled by humans, the number of objects labeled by machine, the number of objects than couldn't be labeled, and the total number of objects labeled.
        public let labelCounters: LabelCounters
        /// Configuration information for automated data labeling.
        public let labelingJobAlgorithmsConfig: LabelingJobAlgorithmsConfig?
        /// The Amazon Resource Name (ARN) of the labeling job.
        public let labelingJobArn: String
        /// The name assigned to the labeling job when it was created.
        public let labelingJobName: String
        /// The location of the output produced by the labeling job.
        public let labelingJobOutput: LabelingJobOutput?
        /// The processing status of the labeling job.
        public let labelingJobStatus: LabelingJobStatus
        /// The date and time that the labeling job was last updated.
        public let lastModifiedTime: TimeStamp
        /// The location of the job's output data and the AWS Key Management Service key ID for the key used to encrypt the output data, if any.
        public let outputConfig: LabelingJobOutputConfig
        /// The Amazon Resource Name (ARN) that Amazon SageMaker assumes to perform tasks on your behalf during data labeling.
        public let roleArn: String
        /// A set of conditions for stopping a labeling job. If any of the conditions are met, the job is automatically stopped.
        public let stoppingConditions: LabelingJobStoppingConditions?
        /// An array of key/value pairs. For more information, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
        public let tags: [Tag]?

        public init(creationTime: TimeStamp, failureReason: String? = nil, humanTaskConfig: HumanTaskConfig, inputConfig: LabelingJobInputConfig, jobReferenceCode: String, labelAttributeName: String? = nil, labelCategoryConfigS3Uri: String? = nil, labelCounters: LabelCounters, labelingJobAlgorithmsConfig: LabelingJobAlgorithmsConfig? = nil, labelingJobArn: String, labelingJobName: String, labelingJobOutput: LabelingJobOutput? = nil, labelingJobStatus: LabelingJobStatus, lastModifiedTime: TimeStamp, outputConfig: LabelingJobOutputConfig, roleArn: String, stoppingConditions: LabelingJobStoppingConditions? = nil, tags: [Tag]? = nil) {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.humanTaskConfig = humanTaskConfig
            self.inputConfig = inputConfig
            self.jobReferenceCode = jobReferenceCode
            self.labelAttributeName = labelAttributeName
            self.labelCategoryConfigS3Uri = labelCategoryConfigS3Uri
            self.labelCounters = labelCounters
            self.labelingJobAlgorithmsConfig = labelingJobAlgorithmsConfig
            self.labelingJobArn = labelingJobArn
            self.labelingJobName = labelingJobName
            self.labelingJobOutput = labelingJobOutput
            self.labelingJobStatus = labelingJobStatus
            self.lastModifiedTime = lastModifiedTime
            self.outputConfig = outputConfig
            self.roleArn = roleArn
            self.stoppingConditions = stoppingConditions
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case humanTaskConfig = "HumanTaskConfig"
            case inputConfig = "InputConfig"
            case jobReferenceCode = "JobReferenceCode"
            case labelAttributeName = "LabelAttributeName"
            case labelCategoryConfigS3Uri = "LabelCategoryConfigS3Uri"
            case labelCounters = "LabelCounters"
            case labelingJobAlgorithmsConfig = "LabelingJobAlgorithmsConfig"
            case labelingJobArn = "LabelingJobArn"
            case labelingJobName = "LabelingJobName"
            case labelingJobOutput = "LabelingJobOutput"
            case labelingJobStatus = "LabelingJobStatus"
            case lastModifiedTime = "LastModifiedTime"
            case outputConfig = "OutputConfig"
            case roleArn = "RoleArn"
            case stoppingConditions = "StoppingConditions"
            case tags = "Tags"
        }
    }

    public struct DescribeModelInput: AWSEncodableShape {
        /// The name of the model.
        public let modelName: String

        public init(modelName: String) {
            self.modelName = modelName
        }

        public func validate(name: String) throws {
            try self.validate(self.modelName, name: "modelName", parent: name, max: 63)
            try self.validate(self.modelName, name: "modelName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case modelName = "ModelName"
        }
    }

    public struct DescribeModelOutput: AWSDecodableShape {
        /// The containers in the inference pipeline.
        public let containers: [ContainerDefinition]?
        /// A timestamp that shows when the model was created.
        public let creationTime: TimeStamp
        /// If True, no inbound or outbound network calls can be made to or from the model container.
        public let enableNetworkIsolation: Bool?
        /// The Amazon Resource Name (ARN) of the IAM role that you specified for the model.
        public let executionRoleArn: String
        /// The Amazon Resource Name (ARN) of the model.
        public let modelArn: String
        /// Name of the Amazon SageMaker model.
        public let modelName: String
        /// The location of the primary inference code, associated artifacts, and custom environment map that the inference code uses when it is deployed in production.
        public let primaryContainer: ContainerDefinition?
        /// A VpcConfig object that specifies the VPC that this model has access to. For more information, see Protect Endpoints by Using an Amazon Virtual Private Cloud
        public let vpcConfig: VpcConfig?

        public init(containers: [ContainerDefinition]? = nil, creationTime: TimeStamp, enableNetworkIsolation: Bool? = nil, executionRoleArn: String, modelArn: String, modelName: String, primaryContainer: ContainerDefinition? = nil, vpcConfig: VpcConfig? = nil) {
            self.containers = containers
            self.creationTime = creationTime
            self.enableNetworkIsolation = enableNetworkIsolation
            self.executionRoleArn = executionRoleArn
            self.modelArn = modelArn
            self.modelName = modelName
            self.primaryContainer = primaryContainer
            self.vpcConfig = vpcConfig
        }

        private enum CodingKeys: String, CodingKey {
            case containers = "Containers"
            case creationTime = "CreationTime"
            case enableNetworkIsolation = "EnableNetworkIsolation"
            case executionRoleArn = "ExecutionRoleArn"
            case modelArn = "ModelArn"
            case modelName = "ModelName"
            case primaryContainer = "PrimaryContainer"
            case vpcConfig = "VpcConfig"
        }
    }

    public struct DescribeModelPackageInput: AWSEncodableShape {
        /// The name of the model package to describe.
        public let modelPackageName: String

        public init(modelPackageName: String) {
            self.modelPackageName = modelPackageName
        }

        public func validate(name: String) throws {
            try self.validate(self.modelPackageName, name: "modelPackageName", parent: name, max: 170)
            try self.validate(self.modelPackageName, name: "modelPackageName", parent: name, min: 1)
            try self.validate(self.modelPackageName, name: "modelPackageName", parent: name, pattern: "(arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:[a-z\\-]*\\/)?([a-zA-Z0-9]([a-zA-Z0-9-]){0,62})(?<!-)$")
        }

        private enum CodingKeys: String, CodingKey {
            case modelPackageName = "ModelPackageName"
        }
    }

    public struct DescribeModelPackageOutput: AWSDecodableShape {
        /// Whether the model package is certified for listing on AWS Marketplace.
        public let certifyForMarketplace: Bool?
        /// A timestamp specifying when the model package was created.
        public let creationTime: TimeStamp
        /// Details about inference jobs that can be run with models based on this model package.
        public let inferenceSpecification: InferenceSpecification?
        /// The Amazon Resource Name (ARN) of the model package.
        public let modelPackageArn: String
        /// A brief summary of the model package.
        public let modelPackageDescription: String?
        /// The name of the model package being described.
        public let modelPackageName: String
        /// The current status of the model package.
        public let modelPackageStatus: ModelPackageStatus
        /// Details about the current status of the model package.
        public let modelPackageStatusDetails: ModelPackageStatusDetails
        /// Details about the algorithm that was used to create the model package.
        public let sourceAlgorithmSpecification: SourceAlgorithmSpecification?
        /// Configurations for one or more transform jobs that Amazon SageMaker runs to test the model package.
        public let validationSpecification: ModelPackageValidationSpecification?

        public init(certifyForMarketplace: Bool? = nil, creationTime: TimeStamp, inferenceSpecification: InferenceSpecification? = nil, modelPackageArn: String, modelPackageDescription: String? = nil, modelPackageName: String, modelPackageStatus: ModelPackageStatus, modelPackageStatusDetails: ModelPackageStatusDetails, sourceAlgorithmSpecification: SourceAlgorithmSpecification? = nil, validationSpecification: ModelPackageValidationSpecification? = nil) {
            self.certifyForMarketplace = certifyForMarketplace
            self.creationTime = creationTime
            self.inferenceSpecification = inferenceSpecification
            self.modelPackageArn = modelPackageArn
            self.modelPackageDescription = modelPackageDescription
            self.modelPackageName = modelPackageName
            self.modelPackageStatus = modelPackageStatus
            self.modelPackageStatusDetails = modelPackageStatusDetails
            self.sourceAlgorithmSpecification = sourceAlgorithmSpecification
            self.validationSpecification = validationSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case certifyForMarketplace = "CertifyForMarketplace"
            case creationTime = "CreationTime"
            case inferenceSpecification = "InferenceSpecification"
            case modelPackageArn = "ModelPackageArn"
            case modelPackageDescription = "ModelPackageDescription"
            case modelPackageName = "ModelPackageName"
            case modelPackageStatus = "ModelPackageStatus"
            case modelPackageStatusDetails = "ModelPackageStatusDetails"
            case sourceAlgorithmSpecification = "SourceAlgorithmSpecification"
            case validationSpecification = "ValidationSpecification"
        }
    }

    public struct DescribeMonitoringScheduleRequest: AWSEncodableShape {
        /// Name of a previously created monitoring schedule.
        public let monitoringScheduleName: String

        public init(monitoringScheduleName: String) {
            self.monitoringScheduleName = monitoringScheduleName
        }

        public func validate(name: String) throws {
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, max: 63)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, min: 1)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case monitoringScheduleName = "MonitoringScheduleName"
        }
    }

    public struct DescribeMonitoringScheduleResponse: AWSDecodableShape {
        /// The time at which the monitoring job was created.
        public let creationTime: TimeStamp
        ///  The name of the endpoint for the monitoring job.
        public let endpointName: String?
        /// A string, up to one KB in size, that contains the reason a monitoring job failed, if it failed.
        public let failureReason: String?
        /// The time at which the monitoring job was last modified.
        public let lastModifiedTime: TimeStamp
        /// Describes metadata on the last execution to run, if there was one.
        public let lastMonitoringExecutionSummary: MonitoringExecutionSummary?
        /// The Amazon Resource Name (ARN) of the monitoring schedule.
        public let monitoringScheduleArn: String
        /// The configuration object that specifies the monitoring schedule and defines the monitoring job.
        public let monitoringScheduleConfig: MonitoringScheduleConfig
        /// Name of the monitoring schedule.
        public let monitoringScheduleName: String
        /// The status of an monitoring job.
        public let monitoringScheduleStatus: ScheduleStatus

        public init(creationTime: TimeStamp, endpointName: String? = nil, failureReason: String? = nil, lastModifiedTime: TimeStamp, lastMonitoringExecutionSummary: MonitoringExecutionSummary? = nil, monitoringScheduleArn: String, monitoringScheduleConfig: MonitoringScheduleConfig, monitoringScheduleName: String, monitoringScheduleStatus: ScheduleStatus) {
            self.creationTime = creationTime
            self.endpointName = endpointName
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.lastMonitoringExecutionSummary = lastMonitoringExecutionSummary
            self.monitoringScheduleArn = monitoringScheduleArn
            self.monitoringScheduleConfig = monitoringScheduleConfig
            self.monitoringScheduleName = monitoringScheduleName
            self.monitoringScheduleStatus = monitoringScheduleStatus
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case endpointName = "EndpointName"
            case failureReason = "FailureReason"
            case lastModifiedTime = "LastModifiedTime"
            case lastMonitoringExecutionSummary = "LastMonitoringExecutionSummary"
            case monitoringScheduleArn = "MonitoringScheduleArn"
            case monitoringScheduleConfig = "MonitoringScheduleConfig"
            case monitoringScheduleName = "MonitoringScheduleName"
            case monitoringScheduleStatus = "MonitoringScheduleStatus"
        }
    }

    public struct DescribeNotebookInstanceInput: AWSEncodableShape {
        /// The name of the notebook instance that you want information about.
        public let notebookInstanceName: String

        public init(notebookInstanceName: String) {
            self.notebookInstanceName = notebookInstanceName
        }

        public func validate(name: String) throws {
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, max: 63)
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceName = "NotebookInstanceName"
        }
    }

    public struct DescribeNotebookInstanceLifecycleConfigInput: AWSEncodableShape {
        /// The name of the lifecycle configuration to describe.
        public let notebookInstanceLifecycleConfigName: String

        public init(notebookInstanceLifecycleConfigName: String) {
            self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        }

        public func validate(name: String) throws {
            try self.validate(self.notebookInstanceLifecycleConfigName, name: "notebookInstanceLifecycleConfigName", parent: name, max: 63)
            try self.validate(self.notebookInstanceLifecycleConfigName, name: "notebookInstanceLifecycleConfigName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        }
    }

    public struct DescribeNotebookInstanceLifecycleConfigOutput: AWSDecodableShape {
        /// A timestamp that tells when the lifecycle configuration was created.
        public let creationTime: TimeStamp?
        /// A timestamp that tells when the lifecycle configuration was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the lifecycle configuration.
        public let notebookInstanceLifecycleConfigArn: String?
        /// The name of the lifecycle configuration.
        public let notebookInstanceLifecycleConfigName: String?
        /// The shell script that runs only once, when you create a notebook instance.
        public let onCreate: [NotebookInstanceLifecycleHook]?
        /// The shell script that runs every time you start a notebook instance, including when you create the notebook instance.
        public let onStart: [NotebookInstanceLifecycleHook]?

        public init(creationTime: TimeStamp? = nil, lastModifiedTime: TimeStamp? = nil, notebookInstanceLifecycleConfigArn: String? = nil, notebookInstanceLifecycleConfigName: String? = nil, onCreate: [NotebookInstanceLifecycleHook]? = nil, onStart: [NotebookInstanceLifecycleHook]? = nil) {
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArn
            self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
            self.onCreate = onCreate
            self.onStart = onStart
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case lastModifiedTime = "LastModifiedTime"
            case notebookInstanceLifecycleConfigArn = "NotebookInstanceLifecycleConfigArn"
            case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
            case onCreate = "OnCreate"
            case onStart = "OnStart"
        }
    }

    public struct DescribeNotebookInstanceOutput: AWSDecodableShape {
        /// A list of the Elastic Inference (EI) instance types associated with this notebook instance. Currently only one EI instance type can be associated with a notebook instance. For more information, see Using Elastic Inference in Amazon SageMaker.
        public let acceleratorTypes: [NotebookInstanceAcceleratorType]?
        /// An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in AWS CodeCommit or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see Associating Git Repositories with Amazon SageMaker Notebook Instances.
        public let additionalCodeRepositories: [String]?
        /// A timestamp. Use this parameter to return the time when the notebook instance was created
        public let creationTime: TimeStamp?
        /// The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in AWS CodeCommit or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see Associating Git Repositories with Amazon SageMaker Notebook Instances.
        public let defaultCodeRepository: String?
        /// Describes whether Amazon SageMaker provides internet access to the notebook instance. If this value is set to Disabled, the notebook instance does not have internet access, and cannot connect to Amazon SageMaker training and endpoint services. For more information, see Notebook Instances Are Internet-Enabled by Default.
        public let directInternetAccess: DirectInternetAccess?
        /// If status is Failed, the reason it failed.
        public let failureReason: String?
        /// The type of ML compute instance running on the notebook instance.
        public let instanceType: InstanceType?
        /// The AWS KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance.
        public let kmsKeyId: String?
        /// A timestamp. Use this parameter to retrieve the time when the notebook instance was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The network interface IDs that Amazon SageMaker created at the time of creating the instance.
        public let networkInterfaceId: String?
        /// The Amazon Resource Name (ARN) of the notebook instance.
        public let notebookInstanceArn: String?
        /// Returns the name of a notebook instance lifecycle configuration. For information about notebook instance lifestyle configurations, see Step 2.1: (Optional) Customize a Notebook Instance
        public let notebookInstanceLifecycleConfigName: String?
        /// The name of the Amazon SageMaker notebook instance.
        public let notebookInstanceName: String?
        /// The status of the notebook instance.
        public let notebookInstanceStatus: NotebookInstanceStatus?
        /// The Amazon Resource Name (ARN) of the IAM role associated with the instance.
        public let roleArn: String?
        /// Whether root access is enabled or disabled for users of the notebook instance.  Lifecycle configurations need root access to be able to set up a notebook instance. Because of this, lifecycle configurations associated with a notebook instance always run with root access even if you disable root access for users.
        public let rootAccess: RootAccess?
        /// The IDs of the VPC security groups.
        public let securityGroups: [String]?
        /// The ID of the VPC subnet.
        public let subnetId: String?
        /// The URL that you use to connect to the Jupyter notebook that is running in your notebook instance.
        public let url: String?
        /// The size, in GB, of the ML storage volume attached to the notebook instance.
        public let volumeSizeInGB: Int?

        public init(acceleratorTypes: [NotebookInstanceAcceleratorType]? = nil, additionalCodeRepositories: [String]? = nil, creationTime: TimeStamp? = nil, defaultCodeRepository: String? = nil, directInternetAccess: DirectInternetAccess? = nil, failureReason: String? = nil, instanceType: InstanceType? = nil, kmsKeyId: String? = nil, lastModifiedTime: TimeStamp? = nil, networkInterfaceId: String? = nil, notebookInstanceArn: String? = nil, notebookInstanceLifecycleConfigName: String? = nil, notebookInstanceName: String? = nil, notebookInstanceStatus: NotebookInstanceStatus? = nil, roleArn: String? = nil, rootAccess: RootAccess? = nil, securityGroups: [String]? = nil, subnetId: String? = nil, url: String? = nil, volumeSizeInGB: Int? = nil) {
            self.acceleratorTypes = acceleratorTypes
            self.additionalCodeRepositories = additionalCodeRepositories
            self.creationTime = creationTime
            self.defaultCodeRepository = defaultCodeRepository
            self.directInternetAccess = directInternetAccess
            self.failureReason = failureReason
            self.instanceType = instanceType
            self.kmsKeyId = kmsKeyId
            self.lastModifiedTime = lastModifiedTime
            self.networkInterfaceId = networkInterfaceId
            self.notebookInstanceArn = notebookInstanceArn
            self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
            self.notebookInstanceName = notebookInstanceName
            self.notebookInstanceStatus = notebookInstanceStatus
            self.roleArn = roleArn
            self.rootAccess = rootAccess
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.url = url
            self.volumeSizeInGB = volumeSizeInGB
        }

        private enum CodingKeys: String, CodingKey {
            case acceleratorTypes = "AcceleratorTypes"
            case additionalCodeRepositories = "AdditionalCodeRepositories"
            case creationTime = "CreationTime"
            case defaultCodeRepository = "DefaultCodeRepository"
            case directInternetAccess = "DirectInternetAccess"
            case failureReason = "FailureReason"
            case instanceType = "InstanceType"
            case kmsKeyId = "KmsKeyId"
            case lastModifiedTime = "LastModifiedTime"
            case networkInterfaceId = "NetworkInterfaceId"
            case notebookInstanceArn = "NotebookInstanceArn"
            case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
            case notebookInstanceName = "NotebookInstanceName"
            case notebookInstanceStatus = "NotebookInstanceStatus"
            case roleArn = "RoleArn"
            case rootAccess = "RootAccess"
            case securityGroups = "SecurityGroups"
            case subnetId = "SubnetId"
            case url = "Url"
            case volumeSizeInGB = "VolumeSizeInGB"
        }
    }

    public struct DescribeProcessingJobRequest: AWSEncodableShape {
        /// The name of the processing job. The name must be unique within an AWS Region in the AWS account.
        public let processingJobName: String

        public init(processingJobName: String) {
            self.processingJobName = processingJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.processingJobName, name: "processingJobName", parent: name, max: 63)
            try self.validate(self.processingJobName, name: "processingJobName", parent: name, min: 1)
            try self.validate(self.processingJobName, name: "processingJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case processingJobName = "ProcessingJobName"
        }
    }

    public struct DescribeProcessingJobResponse: AWSDecodableShape {
        /// Configures the processing job to run a specified container image.
        public let appSpecification: AppSpecification
        /// The ARN of an AutoML job associated with this processing job.
        public let autoMLJobArn: String?
        /// The time at which the processing job was created.
        public let creationTime: TimeStamp
        /// The environment variables set in the Docker container.
        public let environment: [String: String]?
        /// An optional string, up to one KB in size, that contains metadata from the processing container when the processing job exits.
        public let exitMessage: String?
        /// The configuration information used to create an experiment.
        public let experimentConfig: ExperimentConfig?
        /// A string, up to one KB in size, that contains the reason a processing job failed, if it failed.
        public let failureReason: String?
        /// The time at which the processing job was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The ARN of a monitoring schedule for an endpoint associated with this processing job.
        public let monitoringScheduleArn: String?
        /// Networking options for a processing job.
        public let networkConfig: NetworkConfig?
        /// The time at which the processing job completed.
        public let processingEndTime: TimeStamp?
        /// The inputs for a processing job.
        public let processingInputs: [ProcessingInput]?
        /// The Amazon Resource Name (ARN) of the processing job.
        public let processingJobArn: String
        /// The name of the processing job. The name must be unique within an AWS Region in the AWS account.
        public let processingJobName: String
        /// Provides the status of a processing job.
        public let processingJobStatus: ProcessingJobStatus
        /// Output configuration for the processing job.
        public let processingOutputConfig: ProcessingOutputConfig?
        /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
        public let processingResources: ProcessingResources
        /// The time at which the processing job started.
        public let processingStartTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        public let roleArn: String?
        /// The time limit for how long the processing job is allowed to run.
        public let stoppingCondition: ProcessingStoppingCondition?
        /// The ARN of a training job associated with this processing job.
        public let trainingJobArn: String?

        public init(appSpecification: AppSpecification, autoMLJobArn: String? = nil, creationTime: TimeStamp, environment: [String: String]? = nil, exitMessage: String? = nil, experimentConfig: ExperimentConfig? = nil, failureReason: String? = nil, lastModifiedTime: TimeStamp? = nil, monitoringScheduleArn: String? = nil, networkConfig: NetworkConfig? = nil, processingEndTime: TimeStamp? = nil, processingInputs: [ProcessingInput]? = nil, processingJobArn: String, processingJobName: String, processingJobStatus: ProcessingJobStatus, processingOutputConfig: ProcessingOutputConfig? = nil, processingResources: ProcessingResources, processingStartTime: TimeStamp? = nil, roleArn: String? = nil, stoppingCondition: ProcessingStoppingCondition? = nil, trainingJobArn: String? = nil) {
            self.appSpecification = appSpecification
            self.autoMLJobArn = autoMLJobArn
            self.creationTime = creationTime
            self.environment = environment
            self.exitMessage = exitMessage
            self.experimentConfig = experimentConfig
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.monitoringScheduleArn = monitoringScheduleArn
            self.networkConfig = networkConfig
            self.processingEndTime = processingEndTime
            self.processingInputs = processingInputs
            self.processingJobArn = processingJobArn
            self.processingJobName = processingJobName
            self.processingJobStatus = processingJobStatus
            self.processingOutputConfig = processingOutputConfig
            self.processingResources = processingResources
            self.processingStartTime = processingStartTime
            self.roleArn = roleArn
            self.stoppingCondition = stoppingCondition
            self.trainingJobArn = trainingJobArn
        }

        private enum CodingKeys: String, CodingKey {
            case appSpecification = "AppSpecification"
            case autoMLJobArn = "AutoMLJobArn"
            case creationTime = "CreationTime"
            case environment = "Environment"
            case exitMessage = "ExitMessage"
            case experimentConfig = "ExperimentConfig"
            case failureReason = "FailureReason"
            case lastModifiedTime = "LastModifiedTime"
            case monitoringScheduleArn = "MonitoringScheduleArn"
            case networkConfig = "NetworkConfig"
            case processingEndTime = "ProcessingEndTime"
            case processingInputs = "ProcessingInputs"
            case processingJobArn = "ProcessingJobArn"
            case processingJobName = "ProcessingJobName"
            case processingJobStatus = "ProcessingJobStatus"
            case processingOutputConfig = "ProcessingOutputConfig"
            case processingResources = "ProcessingResources"
            case processingStartTime = "ProcessingStartTime"
            case roleArn = "RoleArn"
            case stoppingCondition = "StoppingCondition"
            case trainingJobArn = "TrainingJobArn"
        }
    }

    public struct DescribeSubscribedWorkteamRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the subscribed work team to describe.
        public let workteamArn: String

        public init(workteamArn: String) {
            self.workteamArn = workteamArn
        }

        public func validate(name: String) throws {
            try self.validate(self.workteamArn, name: "workteamArn", parent: name, max: 256)
            try self.validate(self.workteamArn, name: "workteamArn", parent: name, pattern: "arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:workteam/.*")
        }

        private enum CodingKeys: String, CodingKey {
            case workteamArn = "WorkteamArn"
        }
    }

    public struct DescribeSubscribedWorkteamResponse: AWSDecodableShape {
        /// A Workteam instance that contains information about the work team.
        public let subscribedWorkteam: SubscribedWorkteam

        public init(subscribedWorkteam: SubscribedWorkteam) {
            self.subscribedWorkteam = subscribedWorkteam
        }

        private enum CodingKeys: String, CodingKey {
            case subscribedWorkteam = "SubscribedWorkteam"
        }
    }

    public struct DescribeTrainingJobRequest: AWSEncodableShape {
        /// The name of the training job.
        public let trainingJobName: String

        public init(trainingJobName: String) {
            self.trainingJobName = trainingJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.trainingJobName, name: "trainingJobName", parent: name, max: 63)
            try self.validate(self.trainingJobName, name: "trainingJobName", parent: name, min: 1)
            try self.validate(self.trainingJobName, name: "trainingJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case trainingJobName = "TrainingJobName"
        }
    }

    public struct DescribeTrainingJobResponse: AWSDecodableShape {
        /// Information about the algorithm used for training, and algorithm metadata.
        public let algorithmSpecification: AlgorithmSpecification
        /// The Amazon Resource Name (ARN) of an AutoML job.
        public let autoMLJobArn: String?
        /// The billable time in seconds. You can calculate the savings from using managed spot training using the formula (1 - BillableTimeInSeconds / TrainingTimeInSeconds) * 100. For example, if BillableTimeInSeconds is 100 and TrainingTimeInSeconds is 500, the savings is 80%.
        public let billableTimeInSeconds: Int?
        public let checkpointConfig: CheckpointConfig?
        /// A timestamp that indicates when the training job was created.
        public let creationTime: TimeStamp
        public let debugHookConfig: DebugHookConfig?
        /// Configuration information for debugging rules.
        public let debugRuleConfigurations: [DebugRuleConfiguration]?
        /// Status about the debug rule evaluation.
        public let debugRuleEvaluationStatuses: [DebugRuleEvaluationStatus]?
        /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithms in distributed training.
        public let enableInterContainerTrafficEncryption: Bool?
        /// A Boolean indicating whether managed spot training is enabled (True) or not (False).
        public let enableManagedSpotTraining: Bool?
        /// If you want to allow inbound or outbound network calls, except for calls between peers within a training cluster for distributed training, choose True. If you enable network isolation for training jobs that are configured to use a VPC, Amazon SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.
        public let enableNetworkIsolation: Bool?
        public let experimentConfig: ExperimentConfig?
        /// If the training job failed, the reason it failed.
        public let failureReason: String?
        /// A collection of MetricData objects that specify the names, values, and dates and times that the training algorithm emitted to Amazon CloudWatch.
        public let finalMetricDataList: [MetricData]?
        /// Algorithm-specific parameters.
        public let hyperParameters: [String: String]?
        /// An array of Channel objects that describes each data input channel.
        public let inputDataConfig: [Channel]?
        /// The Amazon Resource Name (ARN) of the Amazon SageMaker Ground Truth labeling job that created the transform or training job.
        public let labelingJobArn: String?
        /// A timestamp that indicates when the status of the training job was last modified.
        public let lastModifiedTime: TimeStamp?
        /// Information about the Amazon S3 location that is configured for storing model artifacts.
        public let modelArtifacts: ModelArtifacts
        /// The S3 path where model artifacts that you configured when creating the job are stored. Amazon SageMaker creates subfolders for model artifacts.
        public let outputDataConfig: OutputDataConfig?
        /// Resources, including ML compute instances and ML storage volumes, that are configured for model training.
        public let resourceConfig: ResourceConfig
        /// The AWS Identity and Access Management (IAM) role configured for the training job.
        public let roleArn: String?
        ///  Provides detailed information about the state of the training job. For detailed information on the secondary status of the training job, see StatusMessage under SecondaryStatusTransition. Amazon SageMaker provides primary statuses and secondary statuses that apply to each of them:  InProgress     Starting - Starting the training job.    Downloading - An optional stage for algorithms that support File training input mode. It indicates that data is being downloaded to the ML storage volumes.    Training - Training is in progress.    Interrupted - The job stopped because the managed spot training instances were interrupted.     Uploading - Training is complete and the model artifacts are being uploaded to the S3 location.    Completed     Completed - The training job has completed.    Failed     Failed - The training job has failed. The reason for the failure is returned in the FailureReason field of DescribeTrainingJobResponse.    Stopped     MaxRuntimeExceeded - The job stopped because it exceeded the maximum allowed runtime.    MaxWaitTimeExceeded - The job stopped because it exceeded the maximum allowed wait time.    Stopped - The training job has stopped.    Stopping     Stopping - Stopping the training job.      Valid values for SecondaryStatus are subject to change.   We no longer support the following secondary statuses:    LaunchingMLInstances     PreparingTrainingStack     DownloadingTrainingImage
        public let secondaryStatus: SecondaryStatus
        /// A history of all of the secondary statuses that the training job has transitioned through.
        public let secondaryStatusTransitions: [SecondaryStatusTransition]?
        /// Specifies a limit to how long a model training job can run. It also specifies the maximum time to wait for a spot instance. When the job reaches the time limit, Amazon SageMaker ends the training job. Use this API to cap model training costs. To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
        public let stoppingCondition: StoppingCondition
        public let tensorBoardOutputConfig: TensorBoardOutputConfig?
        /// Indicates the time when the training job ends on training instances. You are billed for the time interval between the value of TrainingStartTime and this time. For successful jobs and stopped jobs, this is the time after model artifacts are uploaded. For failed jobs, this is the time when Amazon SageMaker detects a job failure.
        public let trainingEndTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the training job.
        public let trainingJobArn: String
        ///  Name of the model training job.
        public let trainingJobName: String
        /// The status of the training job. Amazon SageMaker provides the following training job statuses:    InProgress - The training is in progress.    Completed - The training job has completed.    Failed - The training job has failed. To see the reason for the failure, see the FailureReason field in the response to a DescribeTrainingJobResponse call.    Stopping - The training job is stopping.    Stopped - The training job has stopped.   For more detailed information, see SecondaryStatus.
        public let trainingJobStatus: TrainingJobStatus
        /// Indicates the time when the training job starts on training instances. You are billed for the time interval between this time and the value of TrainingEndTime. The start time in CloudWatch Logs might be later than this time. The difference is due to the time it takes to download the training data and to the size of the training container.
        public let trainingStartTime: TimeStamp?
        /// The training time in seconds.
        public let trainingTimeInSeconds: Int?
        /// The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the training job was launched by a hyperparameter tuning job.
        public let tuningJobArn: String?
        /// A VpcConfig object that specifies the VPC that this training job has access to. For more information, see Protect Training Jobs by Using an Amazon Virtual Private Cloud.
        public let vpcConfig: VpcConfig?

        public init(algorithmSpecification: AlgorithmSpecification, autoMLJobArn: String? = nil, billableTimeInSeconds: Int? = nil, checkpointConfig: CheckpointConfig? = nil, creationTime: TimeStamp, debugHookConfig: DebugHookConfig? = nil, debugRuleConfigurations: [DebugRuleConfiguration]? = nil, debugRuleEvaluationStatuses: [DebugRuleEvaluationStatus]? = nil, enableInterContainerTrafficEncryption: Bool? = nil, enableManagedSpotTraining: Bool? = nil, enableNetworkIsolation: Bool? = nil, experimentConfig: ExperimentConfig? = nil, failureReason: String? = nil, finalMetricDataList: [MetricData]? = nil, hyperParameters: [String: String]? = nil, inputDataConfig: [Channel]? = nil, labelingJobArn: String? = nil, lastModifiedTime: TimeStamp? = nil, modelArtifacts: ModelArtifacts, outputDataConfig: OutputDataConfig? = nil, resourceConfig: ResourceConfig, roleArn: String? = nil, secondaryStatus: SecondaryStatus, secondaryStatusTransitions: [SecondaryStatusTransition]? = nil, stoppingCondition: StoppingCondition, tensorBoardOutputConfig: TensorBoardOutputConfig? = nil, trainingEndTime: TimeStamp? = nil, trainingJobArn: String, trainingJobName: String, trainingJobStatus: TrainingJobStatus, trainingStartTime: TimeStamp? = nil, trainingTimeInSeconds: Int? = nil, tuningJobArn: String? = nil, vpcConfig: VpcConfig? = nil) {
            self.algorithmSpecification = algorithmSpecification
            self.autoMLJobArn = autoMLJobArn
            self.billableTimeInSeconds = billableTimeInSeconds
            self.checkpointConfig = checkpointConfig
            self.creationTime = creationTime
            self.debugHookConfig = debugHookConfig
            self.debugRuleConfigurations = debugRuleConfigurations
            self.debugRuleEvaluationStatuses = debugRuleEvaluationStatuses
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableManagedSpotTraining = enableManagedSpotTraining
            self.enableNetworkIsolation = enableNetworkIsolation
            self.experimentConfig = experimentConfig
            self.failureReason = failureReason
            self.finalMetricDataList = finalMetricDataList
            self.hyperParameters = hyperParameters
            self.inputDataConfig = inputDataConfig
            self.labelingJobArn = labelingJobArn
            self.lastModifiedTime = lastModifiedTime
            self.modelArtifacts = modelArtifacts
            self.outputDataConfig = outputDataConfig
            self.resourceConfig = resourceConfig
            self.roleArn = roleArn
            self.secondaryStatus = secondaryStatus
            self.secondaryStatusTransitions = secondaryStatusTransitions
            self.stoppingCondition = stoppingCondition
            self.tensorBoardOutputConfig = tensorBoardOutputConfig
            self.trainingEndTime = trainingEndTime
            self.trainingJobArn = trainingJobArn
            self.trainingJobName = trainingJobName
            self.trainingJobStatus = trainingJobStatus
            self.trainingStartTime = trainingStartTime
            self.trainingTimeInSeconds = trainingTimeInSeconds
            self.tuningJobArn = tuningJobArn
            self.vpcConfig = vpcConfig
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmSpecification = "AlgorithmSpecification"
            case autoMLJobArn = "AutoMLJobArn"
            case billableTimeInSeconds = "BillableTimeInSeconds"
            case checkpointConfig = "CheckpointConfig"
            case creationTime = "CreationTime"
            case debugHookConfig = "DebugHookConfig"
            case debugRuleConfigurations = "DebugRuleConfigurations"
            case debugRuleEvaluationStatuses = "DebugRuleEvaluationStatuses"
            case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
            case enableManagedSpotTraining = "EnableManagedSpotTraining"
            case enableNetworkIsolation = "EnableNetworkIsolation"
            case experimentConfig = "ExperimentConfig"
            case failureReason = "FailureReason"
            case finalMetricDataList = "FinalMetricDataList"
            case hyperParameters = "HyperParameters"
            case inputDataConfig = "InputDataConfig"
            case labelingJobArn = "LabelingJobArn"
            case lastModifiedTime = "LastModifiedTime"
            case modelArtifacts = "ModelArtifacts"
            case outputDataConfig = "OutputDataConfig"
            case resourceConfig = "ResourceConfig"
            case roleArn = "RoleArn"
            case secondaryStatus = "SecondaryStatus"
            case secondaryStatusTransitions = "SecondaryStatusTransitions"
            case stoppingCondition = "StoppingCondition"
            case tensorBoardOutputConfig = "TensorBoardOutputConfig"
            case trainingEndTime = "TrainingEndTime"
            case trainingJobArn = "TrainingJobArn"
            case trainingJobName = "TrainingJobName"
            case trainingJobStatus = "TrainingJobStatus"
            case trainingStartTime = "TrainingStartTime"
            case trainingTimeInSeconds = "TrainingTimeInSeconds"
            case tuningJobArn = "TuningJobArn"
            case vpcConfig = "VpcConfig"
        }
    }

    public struct DescribeTransformJobRequest: AWSEncodableShape {
        /// The name of the transform job that you want to view details of.
        public let transformJobName: String

        public init(transformJobName: String) {
            self.transformJobName = transformJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.transformJobName, name: "transformJobName", parent: name, max: 63)
            try self.validate(self.transformJobName, name: "transformJobName", parent: name, min: 1)
            try self.validate(self.transformJobName, name: "transformJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case transformJobName = "TransformJobName"
        }
    }

    public struct DescribeTransformJobResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the AutoML transform job.
        public let autoMLJobArn: String?
        /// Specifies the number of records to include in a mini-batch for an HTTP inference request. A record  is a single unit of input data that inference can be made on. For example, a single line in a CSV file is a record.  To enable the batch strategy, you must set SplitType to Line, RecordIO, or TFRecord.
        public let batchStrategy: BatchStrategy?
        /// A timestamp that shows when the transform Job was created.
        public let creationTime: TimeStamp
        public let dataProcessing: DataProcessing?
        /// The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.
        public let environment: [String: String]?
        public let experimentConfig: ExperimentConfig?
        /// If the transform job failed, FailureReason describes why it failed. A transform job creates a log file, which includes error messages, and stores it as an Amazon S3 object. For more information, see Log Amazon SageMaker Events with Amazon CloudWatch.
        public let failureReason: String?
        /// The Amazon Resource Name (ARN) of the Amazon SageMaker Ground Truth labeling job that created the transform or training job.
        public let labelingJobArn: String?
        /// The maximum number of parallel requests on each instance node that can be launched in a transform job. The default value is 1.
        public let maxConcurrentTransforms: Int?
        /// The maximum payload size, in MB, used in the transform job.
        public let maxPayloadInMB: Int?
        /// The timeout and maximum number of retries for processing a transform job invocation.
        public let modelClientConfig: ModelClientConfig?
        /// The name of the model used in the transform job.
        public let modelName: String
        /// Indicates when the transform job has been completed, or has stopped or failed. You are billed for the time interval between this time and the value of TransformStartTime.
        public let transformEndTime: TimeStamp?
        /// Describes the dataset to be transformed and the Amazon S3 location where it is stored.
        public let transformInput: TransformInput
        /// The Amazon Resource Name (ARN) of the transform job.
        public let transformJobArn: String
        /// The name of the transform job.
        public let transformJobName: String
        /// The status of the transform job. If the transform job failed, the reason is returned in the FailureReason field.
        public let transformJobStatus: TransformJobStatus
        /// Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.
        public let transformOutput: TransformOutput?
        /// Describes the resources, including ML instance types and ML instance count, to use for the transform job.
        public let transformResources: TransformResources
        /// Indicates when the transform job starts on ML instances. You are billed for the time interval between this time and the value of TransformEndTime.
        public let transformStartTime: TimeStamp?

        public init(autoMLJobArn: String? = nil, batchStrategy: BatchStrategy? = nil, creationTime: TimeStamp, dataProcessing: DataProcessing? = nil, environment: [String: String]? = nil, experimentConfig: ExperimentConfig? = nil, failureReason: String? = nil, labelingJobArn: String? = nil, maxConcurrentTransforms: Int? = nil, maxPayloadInMB: Int? = nil, modelClientConfig: ModelClientConfig? = nil, modelName: String, transformEndTime: TimeStamp? = nil, transformInput: TransformInput, transformJobArn: String, transformJobName: String, transformJobStatus: TransformJobStatus, transformOutput: TransformOutput? = nil, transformResources: TransformResources, transformStartTime: TimeStamp? = nil) {
            self.autoMLJobArn = autoMLJobArn
            self.batchStrategy = batchStrategy
            self.creationTime = creationTime
            self.dataProcessing = dataProcessing
            self.environment = environment
            self.experimentConfig = experimentConfig
            self.failureReason = failureReason
            self.labelingJobArn = labelingJobArn
            self.maxConcurrentTransforms = maxConcurrentTransforms
            self.maxPayloadInMB = maxPayloadInMB
            self.modelClientConfig = modelClientConfig
            self.modelName = modelName
            self.transformEndTime = transformEndTime
            self.transformInput = transformInput
            self.transformJobArn = transformJobArn
            self.transformJobName = transformJobName
            self.transformJobStatus = transformJobStatus
            self.transformOutput = transformOutput
            self.transformResources = transformResources
            self.transformStartTime = transformStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case autoMLJobArn = "AutoMLJobArn"
            case batchStrategy = "BatchStrategy"
            case creationTime = "CreationTime"
            case dataProcessing = "DataProcessing"
            case environment = "Environment"
            case experimentConfig = "ExperimentConfig"
            case failureReason = "FailureReason"
            case labelingJobArn = "LabelingJobArn"
            case maxConcurrentTransforms = "MaxConcurrentTransforms"
            case maxPayloadInMB = "MaxPayloadInMB"
            case modelClientConfig = "ModelClientConfig"
            case modelName = "ModelName"
            case transformEndTime = "TransformEndTime"
            case transformInput = "TransformInput"
            case transformJobArn = "TransformJobArn"
            case transformJobName = "TransformJobName"
            case transformJobStatus = "TransformJobStatus"
            case transformOutput = "TransformOutput"
            case transformResources = "TransformResources"
            case transformStartTime = "TransformStartTime"
        }
    }

    public struct DescribeTrialComponentRequest: AWSEncodableShape {
        /// The name of the trial component to describe.
        public let trialComponentName: String

        public init(trialComponentName: String) {
            self.trialComponentName = trialComponentName
        }

        public func validate(name: String) throws {
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, max: 82)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, min: 1)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case trialComponentName = "TrialComponentName"
        }
    }

    public struct DescribeTrialComponentResponse: AWSDecodableShape {
        /// Who created the component.
        public let createdBy: UserContext?
        /// When the component was created.
        public let creationTime: TimeStamp?
        /// The name of the component as displayed. If DisplayName isn't specified, TrialComponentName is displayed.
        public let displayName: String?
        /// When the component ended.
        public let endTime: TimeStamp?
        /// The input artifacts of the component.
        public let inputArtifacts: [String: TrialComponentArtifact]?
        /// Who last modified the component.
        public let lastModifiedBy: UserContext?
        /// When the component was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The metrics for the component.
        public let metrics: [TrialComponentMetricSummary]?
        /// The output artifacts of the component.
        public let outputArtifacts: [String: TrialComponentArtifact]?
        /// The hyperparameters of the component.
        public let parameters: [String: TrialComponentParameterValue]?
        /// The Amazon Resource Name (ARN) of the source and, optionally, the job type.
        public let source: TrialComponentSource?
        /// When the component started.
        public let startTime: TimeStamp?
        /// The status of the component. States include:   InProgress   Completed   Failed
        public let status: TrialComponentStatus?
        /// The Amazon Resource Name (ARN) of the trial component.
        public let trialComponentArn: String?
        /// The name of the trial component.
        public let trialComponentName: String?

        public init(createdBy: UserContext? = nil, creationTime: TimeStamp? = nil, displayName: String? = nil, endTime: TimeStamp? = nil, inputArtifacts: [String: TrialComponentArtifact]? = nil, lastModifiedBy: UserContext? = nil, lastModifiedTime: TimeStamp? = nil, metrics: [TrialComponentMetricSummary]? = nil, outputArtifacts: [String: TrialComponentArtifact]? = nil, parameters: [String: TrialComponentParameterValue]? = nil, source: TrialComponentSource? = nil, startTime: TimeStamp? = nil, status: TrialComponentStatus? = nil, trialComponentArn: String? = nil, trialComponentName: String? = nil) {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.displayName = displayName
            self.endTime = endTime
            self.inputArtifacts = inputArtifacts
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.metrics = metrics
            self.outputArtifacts = outputArtifacts
            self.parameters = parameters
            self.source = source
            self.startTime = startTime
            self.status = status
            self.trialComponentArn = trialComponentArn
            self.trialComponentName = trialComponentName
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy = "CreatedBy"
            case creationTime = "CreationTime"
            case displayName = "DisplayName"
            case endTime = "EndTime"
            case inputArtifacts = "InputArtifacts"
            case lastModifiedBy = "LastModifiedBy"
            case lastModifiedTime = "LastModifiedTime"
            case metrics = "Metrics"
            case outputArtifacts = "OutputArtifacts"
            case parameters = "Parameters"
            case source = "Source"
            case startTime = "StartTime"
            case status = "Status"
            case trialComponentArn = "TrialComponentArn"
            case trialComponentName = "TrialComponentName"
        }
    }

    public struct DescribeTrialRequest: AWSEncodableShape {
        /// The name of the trial to describe.
        public let trialName: String

        public init(trialName: String) {
            self.trialName = trialName
        }

        public func validate(name: String) throws {
            try self.validate(self.trialName, name: "trialName", parent: name, max: 82)
            try self.validate(self.trialName, name: "trialName", parent: name, min: 1)
            try self.validate(self.trialName, name: "trialName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case trialName = "TrialName"
        }
    }

    public struct DescribeTrialResponse: AWSDecodableShape {
        /// Who created the trial.
        public let createdBy: UserContext?
        /// When the trial was created.
        public let creationTime: TimeStamp?
        /// The name of the trial as displayed. If DisplayName isn't specified, TrialName is displayed.
        public let displayName: String?
        /// The name of the experiment the trial is part of.
        public let experimentName: String?
        /// Who last modified the trial.
        public let lastModifiedBy: UserContext?
        /// When the trial was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the source and, optionally, the job type.
        public let source: TrialSource?
        /// The Amazon Resource Name (ARN) of the trial.
        public let trialArn: String?
        /// The name of the trial.
        public let trialName: String?

        public init(createdBy: UserContext? = nil, creationTime: TimeStamp? = nil, displayName: String? = nil, experimentName: String? = nil, lastModifiedBy: UserContext? = nil, lastModifiedTime: TimeStamp? = nil, source: TrialSource? = nil, trialArn: String? = nil, trialName: String? = nil) {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.displayName = displayName
            self.experimentName = experimentName
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.source = source
            self.trialArn = trialArn
            self.trialName = trialName
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy = "CreatedBy"
            case creationTime = "CreationTime"
            case displayName = "DisplayName"
            case experimentName = "ExperimentName"
            case lastModifiedBy = "LastModifiedBy"
            case lastModifiedTime = "LastModifiedTime"
            case source = "Source"
            case trialArn = "TrialArn"
            case trialName = "TrialName"
        }
    }

    public struct DescribeUserProfileRequest: AWSEncodableShape {
        /// The domain ID.
        public let domainId: String
        /// The user profile name.
        public let userProfileName: String

        public init(domainId: String, userProfileName: String) {
            self.domainId = domainId
            self.userProfileName = userProfileName
        }

        public func validate(name: String) throws {
            try self.validate(self.domainId, name: "domainId", parent: name, max: 63)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, max: 63)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case domainId = "DomainId"
            case userProfileName = "UserProfileName"
        }
    }

    public struct DescribeUserProfileResponse: AWSDecodableShape {
        /// The creation time.
        public let creationTime: TimeStamp?
        /// The ID of the domain that contains the profile.
        public let domainId: String?
        /// The failure reason.
        public let failureReason: String?
        /// The ID of the user's profile in the Amazon Elastic File System (EFS) volume.
        public let homeEfsFileSystemUid: String?
        /// The last modified time.
        public let lastModifiedTime: TimeStamp?
        /// The SSO user identifier.
        public let singleSignOnUserIdentifier: String?
        /// The SSO user value.
        public let singleSignOnUserValue: String?
        /// The status.
        public let status: UserProfileStatus?
        /// The user profile Amazon Resource Name (ARN).
        public let userProfileArn: String?
        /// The user profile name.
        public let userProfileName: String?
        /// A collection of settings.
        public let userSettings: UserSettings?

        public init(creationTime: TimeStamp? = nil, domainId: String? = nil, failureReason: String? = nil, homeEfsFileSystemUid: String? = nil, lastModifiedTime: TimeStamp? = nil, singleSignOnUserIdentifier: String? = nil, singleSignOnUserValue: String? = nil, status: UserProfileStatus? = nil, userProfileArn: String? = nil, userProfileName: String? = nil, userSettings: UserSettings? = nil) {
            self.creationTime = creationTime
            self.domainId = domainId
            self.failureReason = failureReason
            self.homeEfsFileSystemUid = homeEfsFileSystemUid
            self.lastModifiedTime = lastModifiedTime
            self.singleSignOnUserIdentifier = singleSignOnUserIdentifier
            self.singleSignOnUserValue = singleSignOnUserValue
            self.status = status
            self.userProfileArn = userProfileArn
            self.userProfileName = userProfileName
            self.userSettings = userSettings
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case domainId = "DomainId"
            case failureReason = "FailureReason"
            case homeEfsFileSystemUid = "HomeEfsFileSystemUid"
            case lastModifiedTime = "LastModifiedTime"
            case singleSignOnUserIdentifier = "SingleSignOnUserIdentifier"
            case singleSignOnUserValue = "SingleSignOnUserValue"
            case status = "Status"
            case userProfileArn = "UserProfileArn"
            case userProfileName = "UserProfileName"
            case userSettings = "UserSettings"
        }
    }

    public struct DescribeWorkforceRequest: AWSEncodableShape {
        /// The name of the private workforce whose access you want to restrict. WorkforceName is automatically set to default when a workforce is created and cannot be modified.
        public let workforceName: String

        public init(workforceName: String) {
            self.workforceName = workforceName
        }

        public func validate(name: String) throws {
            try self.validate(self.workforceName, name: "workforceName", parent: name, max: 63)
            try self.validate(self.workforceName, name: "workforceName", parent: name, min: 1)
            try self.validate(self.workforceName, name: "workforceName", parent: name, pattern: "^[a-zA-Z0-9]([a-zA-Z0-9\\-])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case workforceName = "WorkforceName"
        }
    }

    public struct DescribeWorkforceResponse: AWSDecodableShape {
        /// A single private workforce, which is automatically created when you create your first private work team. You can create one private work force in each AWS Region. By default, any workforce-related API operation used in a specific region will apply to the workforce created in that region. To learn how to create a private workforce, see Create a Private Workforce.
        public let workforce: Workforce

        public init(workforce: Workforce) {
            self.workforce = workforce
        }

        private enum CodingKeys: String, CodingKey {
            case workforce = "Workforce"
        }
    }

    public struct DescribeWorkteamRequest: AWSEncodableShape {
        /// The name of the work team to return a description of.
        public let workteamName: String

        public init(workteamName: String) {
            self.workteamName = workteamName
        }

        public func validate(name: String) throws {
            try self.validate(self.workteamName, name: "workteamName", parent: name, max: 63)
            try self.validate(self.workteamName, name: "workteamName", parent: name, min: 1)
            try self.validate(self.workteamName, name: "workteamName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case workteamName = "WorkteamName"
        }
    }

    public struct DescribeWorkteamResponse: AWSDecodableShape {
        /// A Workteam instance that contains information about the work team.
        public let workteam: Workteam

        public init(workteam: Workteam) {
            self.workteam = workteam
        }

        private enum CodingKeys: String, CodingKey {
            case workteam = "Workteam"
        }
    }

    public struct DesiredWeightAndCapacity: AWSEncodableShape {
        /// The variant's capacity.
        public let desiredInstanceCount: Int?
        /// The variant's weight.
        public let desiredWeight: Float?
        /// The name of the variant to update.
        public let variantName: String

        public init(desiredInstanceCount: Int? = nil, desiredWeight: Float? = nil, variantName: String) {
            self.desiredInstanceCount = desiredInstanceCount
            self.desiredWeight = desiredWeight
            self.variantName = variantName
        }

        public func validate(name: String) throws {
            try self.validate(self.desiredInstanceCount, name: "desiredInstanceCount", parent: name, min: 1)
            try self.validate(self.desiredWeight, name: "desiredWeight", parent: name, min: 0)
            try self.validate(self.variantName, name: "variantName", parent: name, max: 63)
            try self.validate(self.variantName, name: "variantName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case desiredInstanceCount = "DesiredInstanceCount"
            case desiredWeight = "DesiredWeight"
            case variantName = "VariantName"
        }
    }

    public struct DisassociateTrialComponentRequest: AWSEncodableShape {
        /// The name of the component to disassociate from the trial.
        public let trialComponentName: String
        /// The name of the trial to disassociate from.
        public let trialName: String

        public init(trialComponentName: String, trialName: String) {
            self.trialComponentName = trialComponentName
            self.trialName = trialName
        }

        public func validate(name: String) throws {
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, max: 82)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, min: 1)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.trialName, name: "trialName", parent: name, max: 82)
            try self.validate(self.trialName, name: "trialName", parent: name, min: 1)
            try self.validate(self.trialName, name: "trialName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case trialComponentName = "TrialComponentName"
            case trialName = "TrialName"
        }
    }

    public struct DisassociateTrialComponentResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the trial.
        public let trialArn: String?
        /// The ARN of the trial component.
        public let trialComponentArn: String?

        public init(trialArn: String? = nil, trialComponentArn: String? = nil) {
            self.trialArn = trialArn
            self.trialComponentArn = trialComponentArn
        }

        private enum CodingKeys: String, CodingKey {
            case trialArn = "TrialArn"
            case trialComponentArn = "TrialComponentArn"
        }
    }

    public struct DomainDetails: AWSDecodableShape {
        /// The creation time.
        public let creationTime: TimeStamp?
        /// The domain's Amazon Resource Name (ARN).
        public let domainArn: String?
        /// The domain ID.
        public let domainId: String?
        /// The domain name.
        public let domainName: String?
        /// The last modified time.
        public let lastModifiedTime: TimeStamp?
        /// The status.
        public let status: DomainStatus?
        /// The domain's URL.
        public let url: String?

        public init(creationTime: TimeStamp? = nil, domainArn: String? = nil, domainId: String? = nil, domainName: String? = nil, lastModifiedTime: TimeStamp? = nil, status: DomainStatus? = nil, url: String? = nil) {
            self.creationTime = creationTime
            self.domainArn = domainArn
            self.domainId = domainId
            self.domainName = domainName
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case domainArn = "DomainArn"
            case domainId = "DomainId"
            case domainName = "DomainName"
            case lastModifiedTime = "LastModifiedTime"
            case status = "Status"
            case url = "Url"
        }
    }

    public struct EndpointConfigSummary: AWSDecodableShape {
        /// A timestamp that shows when the endpoint configuration was created.
        public let creationTime: TimeStamp
        /// The Amazon Resource Name (ARN) of the endpoint configuration.
        public let endpointConfigArn: String
        /// The name of the endpoint configuration.
        public let endpointConfigName: String

        public init(creationTime: TimeStamp, endpointConfigArn: String, endpointConfigName: String) {
            self.creationTime = creationTime
            self.endpointConfigArn = endpointConfigArn
            self.endpointConfigName = endpointConfigName
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case endpointConfigArn = "EndpointConfigArn"
            case endpointConfigName = "EndpointConfigName"
        }
    }

    public struct EndpointInput: AWSEncodableShape & AWSDecodableShape {
        /// An endpoint in customer's account which has enabled DataCaptureConfig enabled.
        public let endpointName: String
        /// Path to the filesystem where the endpoint data is available to the container.
        public let localPath: String
        /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        public let s3DataDistributionType: ProcessingS3DataDistributionType?
        /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        public let s3InputMode: ProcessingS3InputMode?

        public init(endpointName: String, localPath: String, s3DataDistributionType: ProcessingS3DataDistributionType? = nil, s3InputMode: ProcessingS3InputMode? = nil) {
            self.endpointName = endpointName
            self.localPath = localPath
            self.s3DataDistributionType = s3DataDistributionType
            self.s3InputMode = s3InputMode
        }

        public func validate(name: String) throws {
            try self.validate(self.endpointName, name: "endpointName", parent: name, max: 63)
            try self.validate(self.endpointName, name: "endpointName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.localPath, name: "localPath", parent: name, max: 256)
            try self.validate(self.localPath, name: "localPath", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case endpointName = "EndpointName"
            case localPath = "LocalPath"
            case s3DataDistributionType = "S3DataDistributionType"
            case s3InputMode = "S3InputMode"
        }
    }

    public struct EndpointSummary: AWSDecodableShape {
        /// A timestamp that shows when the endpoint was created.
        public let creationTime: TimeStamp
        /// The Amazon Resource Name (ARN) of the endpoint.
        public let endpointArn: String
        /// The name of the endpoint.
        public let endpointName: String
        /// The status of the endpoint.    OutOfService: Endpoint is not available to take incoming requests.    Creating: CreateEndpoint is executing.    Updating: UpdateEndpoint or UpdateEndpointWeightsAndCapacities is executing.    SystemUpdating: Endpoint is undergoing maintenance and cannot be updated or deleted or re-scaled until it has completed. This maintenance operation does not change any customer-specified values such as VPC config, KMS encryption, model, instance type, or instance count.    RollingBack: Endpoint fails to scale up or down or change its variant weight and is in the process of rolling back to its previous configuration. Once the rollback completes, endpoint returns to an InService status. This transitional status only applies to an endpoint that has autoscaling enabled and is undergoing variant weight or capacity changes as part of an UpdateEndpointWeightsAndCapacities call or when the UpdateEndpointWeightsAndCapacities operation is called explicitly.    InService: Endpoint is available to process incoming requests.    Deleting: DeleteEndpoint is executing.    Failed: Endpoint could not be created, updated, or re-scaled. Use DescribeEndpointOutput$FailureReason for information about the failure. DeleteEndpoint is the only operation that can be performed on a failed endpoint.   To get a list of endpoints with a specified status, use the ListEndpointsInput$StatusEquals filter.
        public let endpointStatus: EndpointStatus
        /// A timestamp that shows when the endpoint was last modified.
        public let lastModifiedTime: TimeStamp

        public init(creationTime: TimeStamp, endpointArn: String, endpointName: String, endpointStatus: EndpointStatus, lastModifiedTime: TimeStamp) {
            self.creationTime = creationTime
            self.endpointArn = endpointArn
            self.endpointName = endpointName
            self.endpointStatus = endpointStatus
            self.lastModifiedTime = lastModifiedTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case endpointArn = "EndpointArn"
            case endpointName = "EndpointName"
            case endpointStatus = "EndpointStatus"
            case lastModifiedTime = "LastModifiedTime"
        }
    }

    public struct Experiment: AWSDecodableShape {
        public let createdBy: UserContext?
        /// When the experiment was created.
        public let creationTime: TimeStamp?
        /// The description of the experiment.
        public let description: String?
        /// The name of the experiment as displayed. If DisplayName isn't specified, ExperimentName is displayed.
        public let displayName: String?
        /// The Amazon Resource Name (ARN) of the experiment.
        public let experimentArn: String?
        /// The name of the experiment.
        public let experimentName: String?
        public let lastModifiedBy: UserContext?
        /// When the experiment was last modified.
        public let lastModifiedTime: TimeStamp?
        public let source: ExperimentSource?
        /// The list of tags that are associated with the experiment. You can use Search API to search on the tags.
        public let tags: [Tag]?

        public init(createdBy: UserContext? = nil, creationTime: TimeStamp? = nil, description: String? = nil, displayName: String? = nil, experimentArn: String? = nil, experimentName: String? = nil, lastModifiedBy: UserContext? = nil, lastModifiedTime: TimeStamp? = nil, source: ExperimentSource? = nil, tags: [Tag]? = nil) {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.description = description
            self.displayName = displayName
            self.experimentArn = experimentArn
            self.experimentName = experimentName
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.source = source
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy = "CreatedBy"
            case creationTime = "CreationTime"
            case description = "Description"
            case displayName = "DisplayName"
            case experimentArn = "ExperimentArn"
            case experimentName = "ExperimentName"
            case lastModifiedBy = "LastModifiedBy"
            case lastModifiedTime = "LastModifiedTime"
            case source = "Source"
            case tags = "Tags"
        }
    }

    public struct ExperimentConfig: AWSEncodableShape & AWSDecodableShape {
        /// The name of an existing experiment to associate the trial component with.
        public let experimentName: String?
        /// The display name for the trial component. If this key isn't specified, the display name is the trial component name.
        public let trialComponentDisplayName: String?
        /// The name of an existing trial to associate the trial component with. If not specified, a new trial is created.
        public let trialName: String?

        public init(experimentName: String? = nil, trialComponentDisplayName: String? = nil, trialName: String? = nil) {
            self.experimentName = experimentName
            self.trialComponentDisplayName = trialComponentDisplayName
            self.trialName = trialName
        }

        public func validate(name: String) throws {
            try self.validate(self.experimentName, name: "experimentName", parent: name, max: 82)
            try self.validate(self.experimentName, name: "experimentName", parent: name, min: 1)
            try self.validate(self.experimentName, name: "experimentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.trialComponentDisplayName, name: "trialComponentDisplayName", parent: name, max: 82)
            try self.validate(self.trialComponentDisplayName, name: "trialComponentDisplayName", parent: name, min: 1)
            try self.validate(self.trialComponentDisplayName, name: "trialComponentDisplayName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.trialName, name: "trialName", parent: name, max: 82)
            try self.validate(self.trialName, name: "trialName", parent: name, min: 1)
            try self.validate(self.trialName, name: "trialName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case experimentName = "ExperimentName"
            case trialComponentDisplayName = "TrialComponentDisplayName"
            case trialName = "TrialName"
        }
    }

    public struct ExperimentSource: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the source.
        public let sourceArn: String
        /// The source type.
        public let sourceType: String?

        public init(sourceArn: String, sourceType: String? = nil) {
            self.sourceArn = sourceArn
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case sourceArn = "SourceArn"
            case sourceType = "SourceType"
        }
    }

    public struct ExperimentSummary: AWSDecodableShape {
        /// When the experiment was created.
        public let creationTime: TimeStamp?
        /// The name of the experiment as displayed. If DisplayName isn't specified, ExperimentName is displayed.
        public let displayName: String?
        /// The Amazon Resource Name (ARN) of the experiment.
        public let experimentArn: String?
        /// The name of the experiment.
        public let experimentName: String?
        public let experimentSource: ExperimentSource?
        /// When the experiment was last modified.
        public let lastModifiedTime: TimeStamp?

        public init(creationTime: TimeStamp? = nil, displayName: String? = nil, experimentArn: String? = nil, experimentName: String? = nil, experimentSource: ExperimentSource? = nil, lastModifiedTime: TimeStamp? = nil) {
            self.creationTime = creationTime
            self.displayName = displayName
            self.experimentArn = experimentArn
            self.experimentName = experimentName
            self.experimentSource = experimentSource
            self.lastModifiedTime = lastModifiedTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case displayName = "DisplayName"
            case experimentArn = "ExperimentArn"
            case experimentName = "ExperimentName"
            case experimentSource = "ExperimentSource"
            case lastModifiedTime = "LastModifiedTime"
        }
    }

    public struct FileSystemDataSource: AWSEncodableShape & AWSDecodableShape {
        /// The full path to the directory to associate with the channel.
        public let directoryPath: String
        /// The access mode of the mount of the directory associated with the channel. A directory can be mounted either in ro (read-only) or rw (read-write) mode.
        public let fileSystemAccessMode: FileSystemAccessMode
        /// The file system id.
        public let fileSystemId: String
        /// The file system type.
        public let fileSystemType: FileSystemType

        public init(directoryPath: String, fileSystemAccessMode: FileSystemAccessMode, fileSystemId: String, fileSystemType: FileSystemType) {
            self.directoryPath = directoryPath
            self.fileSystemAccessMode = fileSystemAccessMode
            self.fileSystemId = fileSystemId
            self.fileSystemType = fileSystemType
        }

        public func validate(name: String) throws {
            try self.validate(self.directoryPath, name: "directoryPath", parent: name, max: 4096)
            try self.validate(self.directoryPath, name: "directoryPath", parent: name, pattern: ".*")
            try self.validate(self.fileSystemId, name: "fileSystemId", parent: name, min: 11)
            try self.validate(self.fileSystemId, name: "fileSystemId", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case directoryPath = "DirectoryPath"
            case fileSystemAccessMode = "FileSystemAccessMode"
            case fileSystemId = "FileSystemId"
            case fileSystemType = "FileSystemType"
        }
    }

    public struct Filter: AWSEncodableShape {
        /// A resource property name. For example, TrainingJobName. For valid property names, see SearchRecord. You must specify a valid property for the resource.
        public let name: String
        /// A Boolean binary operator that is used to evaluate the filter. The operator field contains one of the following values:  Equals  The value of Name equals Value.  NotEquals  The value of Name doesn't equal Value.  Exists  The Name property exists.  NotExists  The Name property does not exist.  GreaterThan  The value of Name is greater than Value. Not supported for text properties.  GreaterThanOrEqualTo  The value of Name is greater than or equal to Value. Not supported for text properties.  LessThan  The value of Name is less than Value. Not supported for text properties.  LessThanOrEqualTo  The value of Name is less than or equal to Value. Not supported for text properties.  In  The value of Name is one of the comma delimited strings in Value. Only supported for text properties.  Contains  The value of Name contains the string Value. Only supported for text properties. A SearchExpression can include the Contains operator multiple times when the value of Name is one of the following:    Experiment.DisplayName     Experiment.ExperimentName     Experiment.Tags     Trial.DisplayName     Trial.TrialName     Trial.Tags     TrialComponent.DisplayName     TrialComponent.TrialComponentName     TrialComponent.Tags     TrialComponent.InputArtifacts     TrialComponent.OutputArtifacts    A SearchExpression can include only one Contains operator for all other values of Name. In these cases, if you include multiple Contains operators in the SearchExpression, the result is the following error message: "'CONTAINS' operator usage limit of 1 exceeded."
        public let `operator`: Operator?
        /// A value used with Name and Operator to determine which resources satisfy the filter's condition. For numerical properties, Value must be an integer or floating-point decimal. For timestamp properties, Value must be an ISO 8601 date-time string of the following format: YYYY-mm-dd'T'HH:MM:SS.
        public let value: String?

        public init(name: String, operator: Operator? = nil, value: String? = nil) {
            self.name = name
            self.`operator` = `operator`
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 255)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".+")
            try self.validate(self.value, name: "value", parent: name, max: 1024)
            try self.validate(self.value, name: "value", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, pattern: ".+")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case `operator` = "Operator"
            case value = "Value"
        }
    }

    public struct FinalAutoMLJobObjectiveMetric: AWSDecodableShape {
        /// The name of the metric with the best result. For a description of the possible objective metrics, see AutoMLJobObjective$MetricName.
        public let metricName: AutoMLMetricEnum
        /// The type of metric with the best result.
        public let `type`: AutoMLJobObjectiveType?
        /// The value of the metric with the best result.
        public let value: Float

        public init(metricName: AutoMLMetricEnum, type: AutoMLJobObjectiveType? = nil, value: Float) {
            self.metricName = metricName
            self.`type` = `type`
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case `type` = "Type"
            case value = "Value"
        }
    }

    public struct FinalHyperParameterTuningJobObjectiveMetric: AWSDecodableShape {
        /// The name of the objective metric.
        public let metricName: String
        /// Whether to minimize or maximize the objective metric. Valid values are Minimize and Maximize.
        public let `type`: HyperParameterTuningJobObjectiveType?
        /// The value of the objective metric.
        public let value: Float

        public init(metricName: String, type: HyperParameterTuningJobObjectiveType? = nil, value: Float) {
            self.metricName = metricName
            self.`type` = `type`
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case `type` = "Type"
            case value = "Value"
        }
    }

    public struct FlowDefinitionOutputConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Key Management Service (KMS) key ID for server-side encryption.
        public let kmsKeyId: String?
        /// The Amazon S3 path where the object containing human output will be made available.
        public let s3OutputPath: String

        public init(kmsKeyId: String? = nil, s3OutputPath: String) {
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
        }

        public func validate(name: String) throws {
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, pattern: ".*")
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, max: 1024)
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case s3OutputPath = "S3OutputPath"
        }
    }

    public struct FlowDefinitionSummary: AWSDecodableShape {
        /// The timestamp when SageMaker created the flow definition.
        public let creationTime: TimeStamp
        /// The reason why the flow definition creation failed. A failure reason is returned only when the flow definition status is Failed.
        public let failureReason: String?
        /// The Amazon Resource Name (ARN) of the flow definition.
        public let flowDefinitionArn: String
        /// The name of the flow definition.
        public let flowDefinitionName: String
        /// The status of the flow definition. Valid values:
        public let flowDefinitionStatus: FlowDefinitionStatus

        public init(creationTime: TimeStamp, failureReason: String? = nil, flowDefinitionArn: String, flowDefinitionName: String, flowDefinitionStatus: FlowDefinitionStatus) {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.flowDefinitionArn = flowDefinitionArn
            self.flowDefinitionName = flowDefinitionName
            self.flowDefinitionStatus = flowDefinitionStatus
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case flowDefinitionArn = "FlowDefinitionArn"
            case flowDefinitionName = "FlowDefinitionName"
            case flowDefinitionStatus = "FlowDefinitionStatus"
        }
    }

    public struct GetSearchSuggestionsRequest: AWSEncodableShape {
        /// The name of the Amazon SageMaker resource to search for.
        public let resource: ResourceType
        /// Limits the property names that are included in the response.
        public let suggestionQuery: SuggestionQuery?

        public init(resource: ResourceType, suggestionQuery: SuggestionQuery? = nil) {
            self.resource = resource
            self.suggestionQuery = suggestionQuery
        }

        public func validate(name: String) throws {
            try self.suggestionQuery?.validate(name: "\(name).suggestionQuery")
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
            case suggestionQuery = "SuggestionQuery"
        }
    }

    public struct GetSearchSuggestionsResponse: AWSDecodableShape {
        /// A list of property names for a Resource that match a SuggestionQuery.
        public let propertyNameSuggestions: [PropertyNameSuggestion]?

        public init(propertyNameSuggestions: [PropertyNameSuggestion]? = nil) {
            self.propertyNameSuggestions = propertyNameSuggestions
        }

        private enum CodingKeys: String, CodingKey {
            case propertyNameSuggestions = "PropertyNameSuggestions"
        }
    }

    public struct GitConfig: AWSEncodableShape & AWSDecodableShape {
        /// The default branch for the Git repository.
        public let branch: String?
        /// The URL where the Git repository is located.
        public let repositoryUrl: String
        /// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format:  {"username": UserName, "password": Password}
        public let secretArn: String?

        public init(branch: String? = nil, repositoryUrl: String, secretArn: String? = nil) {
            self.branch = branch
            self.repositoryUrl = repositoryUrl
            self.secretArn = secretArn
        }

        public func validate(name: String) throws {
            try self.validate(self.branch, name: "branch", parent: name, max: 1024)
            try self.validate(self.branch, name: "branch", parent: name, min: 1)
            try self.validate(self.branch, name: "branch", parent: name, pattern: "[^ ~^:?*\\[]+")
            try self.validate(self.repositoryUrl, name: "repositoryUrl", parent: name, pattern: "^https://([^/]+)/?(.*)$")
            try self.validate(self.secretArn, name: "secretArn", parent: name, max: 2048)
            try self.validate(self.secretArn, name: "secretArn", parent: name, min: 1)
            try self.validate(self.secretArn, name: "secretArn", parent: name, pattern: "arn:aws[a-z\\-]*:secretsmanager:[a-z0-9\\-]*:[0-9]{12}:secret:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case branch = "Branch"
            case repositoryUrl = "RepositoryUrl"
            case secretArn = "SecretArn"
        }
    }

    public struct GitConfigForUpdate: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format:  {"username": UserName, "password": Password}
        public let secretArn: String?

        public init(secretArn: String? = nil) {
            self.secretArn = secretArn
        }

        public func validate(name: String) throws {
            try self.validate(self.secretArn, name: "secretArn", parent: name, max: 2048)
            try self.validate(self.secretArn, name: "secretArn", parent: name, min: 1)
            try self.validate(self.secretArn, name: "secretArn", parent: name, pattern: "arn:aws[a-z\\-]*:secretsmanager:[a-z0-9\\-]*:[0-9]{12}:secret:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case secretArn = "SecretArn"
        }
    }

    public struct HumanLoopActivationConditionsConfig: AWSEncodableShape & AWSDecodableShape {
        /// JSON expressing use-case specific conditions declaratively. If any condition is matched, atomic tasks are created against the configured work team. The set of conditions is different for Rekognition and Textract. For more information about how to structure the JSON, see JSON Schema for Human Loop Activation Conditions in Amazon Augmented AI in the Amazon SageMaker Developer Guide.
        public let humanLoopActivationConditions: String

        public init(humanLoopActivationConditions: String) {
            self.humanLoopActivationConditions = humanLoopActivationConditions
        }

        public func validate(name: String) throws {
            try self.validate(self.humanLoopActivationConditions, name: "humanLoopActivationConditions", parent: name, max: 10240)
        }

        private enum CodingKeys: String, CodingKey {
            case humanLoopActivationConditions = "HumanLoopActivationConditions"
        }
    }

    public struct HumanLoopActivationConfig: AWSEncodableShape & AWSDecodableShape {
        /// Container structure for defining under what conditions SageMaker creates a human loop.
        public let humanLoopActivationConditionsConfig: HumanLoopActivationConditionsConfig

        public init(humanLoopActivationConditionsConfig: HumanLoopActivationConditionsConfig) {
            self.humanLoopActivationConditionsConfig = humanLoopActivationConditionsConfig
        }

        public func validate(name: String) throws {
            try self.humanLoopActivationConditionsConfig.validate(name: "\(name).humanLoopActivationConditionsConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case humanLoopActivationConditionsConfig = "HumanLoopActivationConditionsConfig"
        }
    }

    public struct HumanLoopConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the human task user interface.
        public let humanTaskUiArn: String
        public let publicWorkforceTaskPrice: PublicWorkforceTaskPrice?
        /// The length of time that a task remains available for labeling by human workers.
        public let taskAvailabilityLifetimeInSeconds: Int?
        /// The number of distinct workers who will perform the same task on each object. For example, if TaskCount is set to 3 for an image classification labeling job, three workers will classify each input image. Increasing TaskCount can improve label accuracy.
        public let taskCount: Int
        /// A description for the human worker task.
        public let taskDescription: String
        /// Keywords used to describe the task so that workers can discover the task.
        public let taskKeywords: [String]?
        /// The amount of time that a worker has to complete a task.
        public let taskTimeLimitInSeconds: Int?
        /// A title for the human worker task.
        public let taskTitle: String
        /// Amazon Resource Name (ARN) of a team of workers.
        public let workteamArn: String

        public init(humanTaskUiArn: String, publicWorkforceTaskPrice: PublicWorkforceTaskPrice? = nil, taskAvailabilityLifetimeInSeconds: Int? = nil, taskCount: Int, taskDescription: String, taskKeywords: [String]? = nil, taskTimeLimitInSeconds: Int? = nil, taskTitle: String, workteamArn: String) {
            self.humanTaskUiArn = humanTaskUiArn
            self.publicWorkforceTaskPrice = publicWorkforceTaskPrice
            self.taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSeconds
            self.taskCount = taskCount
            self.taskDescription = taskDescription
            self.taskKeywords = taskKeywords
            self.taskTimeLimitInSeconds = taskTimeLimitInSeconds
            self.taskTitle = taskTitle
            self.workteamArn = workteamArn
        }

        public func validate(name: String) throws {
            try self.validate(self.humanTaskUiArn, name: "humanTaskUiArn", parent: name, max: 1024)
            try self.validate(self.humanTaskUiArn, name: "humanTaskUiArn", parent: name, pattern: "arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:human-task-ui/.*")
            try self.publicWorkforceTaskPrice?.validate(name: "\(name).publicWorkforceTaskPrice")
            try self.validate(self.taskAvailabilityLifetimeInSeconds, name: "taskAvailabilityLifetimeInSeconds", parent: name, max: 864_000)
            try self.validate(self.taskAvailabilityLifetimeInSeconds, name: "taskAvailabilityLifetimeInSeconds", parent: name, min: 1)
            try self.validate(self.taskCount, name: "taskCount", parent: name, max: 3)
            try self.validate(self.taskCount, name: "taskCount", parent: name, min: 1)
            try self.validate(self.taskDescription, name: "taskDescription", parent: name, max: 255)
            try self.validate(self.taskDescription, name: "taskDescription", parent: name, min: 1)
            try self.validate(self.taskDescription, name: "taskDescription", parent: name, pattern: ".+")
            try self.taskKeywords?.forEach {
                try validate($0, name: "taskKeywords[]", parent: name, max: 30)
                try validate($0, name: "taskKeywords[]", parent: name, min: 1)
                try validate($0, name: "taskKeywords[]", parent: name, pattern: "^[A-Za-z0-9]+( [A-Za-z0-9]+)*$")
            }
            try self.validate(self.taskKeywords, name: "taskKeywords", parent: name, max: 5)
            try self.validate(self.taskKeywords, name: "taskKeywords", parent: name, min: 1)
            try self.validate(self.taskTimeLimitInSeconds, name: "taskTimeLimitInSeconds", parent: name, max: 28800)
            try self.validate(self.taskTimeLimitInSeconds, name: "taskTimeLimitInSeconds", parent: name, min: 30)
            try self.validate(self.taskTitle, name: "taskTitle", parent: name, max: 128)
            try self.validate(self.taskTitle, name: "taskTitle", parent: name, min: 1)
            try self.validate(self.taskTitle, name: "taskTitle", parent: name, pattern: "^[\\t\\n\\r -\\uD7FF\\uE000-\\uFFFD]*$")
            try self.validate(self.workteamArn, name: "workteamArn", parent: name, max: 256)
            try self.validate(self.workteamArn, name: "workteamArn", parent: name, pattern: "arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:workteam/.*")
        }

        private enum CodingKeys: String, CodingKey {
            case humanTaskUiArn = "HumanTaskUiArn"
            case publicWorkforceTaskPrice = "PublicWorkforceTaskPrice"
            case taskAvailabilityLifetimeInSeconds = "TaskAvailabilityLifetimeInSeconds"
            case taskCount = "TaskCount"
            case taskDescription = "TaskDescription"
            case taskKeywords = "TaskKeywords"
            case taskTimeLimitInSeconds = "TaskTimeLimitInSeconds"
            case taskTitle = "TaskTitle"
            case workteamArn = "WorkteamArn"
        }
    }

    public struct HumanLoopRequestSource: AWSEncodableShape & AWSDecodableShape {
        /// Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source. The default field settings and JSON parsing rules are different based on the integration source. Valid values:
        public let awsManagedHumanLoopRequestSource: AwsManagedHumanLoopRequestSource

        public init(awsManagedHumanLoopRequestSource: AwsManagedHumanLoopRequestSource) {
            self.awsManagedHumanLoopRequestSource = awsManagedHumanLoopRequestSource
        }

        private enum CodingKeys: String, CodingKey {
            case awsManagedHumanLoopRequestSource = "AwsManagedHumanLoopRequestSource"
        }
    }

    public struct HumanTaskConfig: AWSEncodableShape & AWSDecodableShape {
        /// Configures how labels are consolidated across human workers.
        public let annotationConsolidationConfig: AnnotationConsolidationConfig
        /// Defines the maximum number of data objects that can be labeled by human workers at the same time. Also referred to as batch size. Each object may have more than one worker at one time. The default value is 1000 objects.
        public let maxConcurrentTaskCount: Int?
        /// The number of human workers that will label an object.
        public let numberOfHumanWorkersPerDataObject: Int
        /// The Amazon Resource Name (ARN) of a Lambda function that is run before a data object is sent to a human worker. Use this function to provide input to a custom labeling job. For built-in task types, use one of the following Amazon SageMaker Ground Truth Lambda function ARNs for PreHumanTaskLambdaArn. For custom labeling workflows, see Pre-annotation Lambda.   Bounding box - Finds the most similar boxes from different workers based on the Jaccard index of the boxes.    arn:aws:lambda:us-east-1:432418664414:function:PRE-BoundingBox     arn:aws:lambda:us-east-2:266458841044:function:PRE-BoundingBox     arn:aws:lambda:us-west-2:081040173940:function:PRE-BoundingBox     arn:aws:lambda:ca-central-1:918755190332:function:PRE-BoundingBox     arn:aws:lambda:eu-west-1:568282634449:function:PRE-BoundingBox     arn:aws:lambda:eu-west-2:487402164563:function:PRE-BoundingBox     arn:aws:lambda:eu-central-1:203001061592:function:PRE-BoundingBox     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-BoundingBox     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-BoundingBox     arn:aws:lambda:ap-south-1:565803892007:function:PRE-BoundingBox     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-BoundingBox     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-BoundingBox     Image classification - Uses a variant of the Expectation Maximization approach to estimate the true class of an image based on annotations from individual workers.    arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClass     arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClass     arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClass     arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClass     arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClass     arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClass     arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClass     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClass     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClass     arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClass     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClass     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClass     Multi-label image classification - Uses a variant of the Expectation Maximization approach to estimate the true classes of an image based on annotations from individual workers.    arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClassMultiLabel     arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClassMultiLabel     arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClassMultiLabel     arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClassMultiLabel     arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClassMultiLabel     arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClassMultiLabel     arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClassMultiLabel     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClassMultiLabel     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClassMultiLabel     arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClassMultiLabel     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClassMultiLabel     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClassMultiLabel     Semantic segmentation - Treats each pixel in an image as a multi-class classification and treats pixel annotations from workers as "votes" for the correct label.    arn:aws:lambda:us-east-1:432418664414:function:PRE-SemanticSegmentation     arn:aws:lambda:us-east-2:266458841044:function:PRE-SemanticSegmentation     arn:aws:lambda:us-west-2:081040173940:function:PRE-SemanticSegmentation     arn:aws:lambda:ca-central-1:918755190332:function:PRE-SemanticSegmentation     arn:aws:lambda:eu-west-1:568282634449:function:PRE-SemanticSegmentation     arn:aws:lambda:eu-west-2:487402164563:function:PRE-SemanticSegmentation     arn:aws:lambda:eu-central-1:203001061592:function:PRE-SemanticSegmentation     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-SemanticSegmentation     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-SemanticSegmentation     arn:aws:lambda:ap-south-1:565803892007:function:PRE-SemanticSegmentation     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-SemanticSegmentation     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-SemanticSegmentation     Text classification - Uses a variant of the Expectation Maximization approach to estimate the true class of text based on annotations from individual workers.    arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClass     arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClass     arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClass     arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClass     arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClass     arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClass     arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClass     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClass     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClass     arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClass     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClass     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClass     Multi-label text classification - Uses a variant of the Expectation Maximization approach to estimate the true classes of text based on annotations from individual workers.    arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClassMultiLabel     arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClassMultiLabel     arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClassMultiLabel     arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClassMultiLabel     arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClassMultiLabel     arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClassMultiLabel     arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClassMultiLabel     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClassMultiLabel     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClassMultiLabel     arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClassMultiLabel     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClassMultiLabel     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClassMultiLabel     Named entity recognition - Groups similar selections and calculates aggregate boundaries, resolving to most-assigned label.    arn:aws:lambda:us-east-1:432418664414:function:PRE-NamedEntityRecognition     arn:aws:lambda:us-east-2:266458841044:function:PRE-NamedEntityRecognition     arn:aws:lambda:us-west-2:081040173940:function:PRE-NamedEntityRecognition     arn:aws:lambda:ca-central-1:918755190332:function:PRE-NamedEntityRecognition     arn:aws:lambda:eu-west-1:568282634449:function:PRE-NamedEntityRecognition     arn:aws:lambda:eu-west-2:487402164563:function:PRE-NamedEntityRecognition     arn:aws:lambda:eu-central-1:203001061592:function:PRE-NamedEntityRecognition     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-NamedEntityRecognition     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-NamedEntityRecognition     arn:aws:lambda:ap-south-1:565803892007:function:PRE-NamedEntityRecognition     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-NamedEntityRecognition     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-NamedEntityRecognition     Video Classification - Use this task type when you need workers to classify videos using predefined labels that you specify. Workers are shown videos and are asked to choose one label for each video.    arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoMultiClass     arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoMultiClass     arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoMultiClass     arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoMultiClass     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoMultiClass     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoMultiClass     arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoMultiClass     arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoMultiClass     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoMultiClass     arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoMultiClass     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoMultiClass     arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoMultiClass     Video Frame Object Detection - Use this task type to have workers identify and locate objects in a sequence of video frames (images extracted from a video) using bounding boxes. For example, you can use this task to ask workers to identify and localize various objects in a series of video frames, such as cars, bikes, and pedestrians.    arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectDetection     arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectDetection     arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectDetection     arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectDetection     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectDetection     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectDetection     arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectDetection     arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectDetection     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectDetection     arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectDetection     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectDetection     arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectDetection     Video Frame Object Tracking - Use this task type to have workers track the movement of objects in a sequence of video frames (images extracted from a video) using bounding boxes. For example, you can use this task to ask workers to track the movement of objects, such as cars, bikes, and pedestrians.     arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectTracking     arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectTracking     arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectTracking     arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectTracking     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectTracking     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectTracking     arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectTracking     arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectTracking     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectTracking     arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectTracking     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectTracking     arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectTracking     3D Point Cloud Modalities  Use the following pre-annotation lambdas for 3D point cloud labeling modality tasks. See 3D Point Cloud Task types  to learn more.   3D Point Cloud Object Detection - Use this task type when you want workers to classify objects in a 3D point cloud by drawing 3D cuboids around objects. For example, you can use this task type to ask workers to identify different types of objects in a point cloud, such as cars, bikes, and pedestrians.    arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectDetection     arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectDetection     arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectDetection     arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectDetection     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectDetection     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectDetection     arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectDetection     arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectDetection     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectDetection     arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectDetection     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectDetection     arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectDetection     3D Point Cloud Object Tracking - Use this task type when you want workers to draw 3D cuboids around objects that appear in a sequence of 3D point cloud frames. For example, you can use this task type to ask workers to track the movement of vehicles across multiple point cloud frames.     arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectTracking     arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectTracking     arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectTracking     arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectTracking     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectTracking     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectTracking     arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectTracking     arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectTracking     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectTracking     arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectTracking     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectTracking     arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectTracking     3D Point Cloud Semantic Segmentation - Use this task type when you want workers to create a point-level semantic segmentation masks by painting objects in a 3D point cloud using different colors where each color is assigned to one of the classes you specify.    arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudSemanticSegmentation     arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudSemanticSegmentation     arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudSemanticSegmentation     arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudSemanticSegmentation     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudSemanticSegmentation     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudSemanticSegmentation     arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudSemanticSegmentation     arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudSemanticSegmentation     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudSemanticSegmentation     arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudSemanticSegmentation     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudSemanticSegmentation     arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudSemanticSegmentation     Use the following ARNs for Label Verification and Adjustment Jobs  Use label verification and adjustment jobs to review and adjust labels. To learn more, see Verify and Adjust Labels .  Bounding box verification - Uses a variant of the Expectation Maximization approach to estimate the true class of verification judgement for bounding box labels based on annotations from individual workers.    arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectTracking     Bounding box adjustment - Finds the most similar boxes from different workers based on the Jaccard index of the adjusted annotations.    arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentBoundingBox     arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentBoundingBox     arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentBoundingBox     arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentBoundingBox     arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentBoundingBox     arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentBoundingBox     arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentBoundingBox     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentBoundingBox     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentBoundingBox     arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentBoundingBox     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentBoundingBox     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentBoundingBox     Semantic segmentation verification - Uses a variant of the Expectation Maximization approach to estimate the true class of verification judgment for semantic segmentation labels based on annotations from individual workers.    arn:aws:lambda:us-east-1:432418664414:function:PRE-VerificationSemanticSegmentation     arn:aws:lambda:us-east-2:266458841044:function:PRE-VerificationSemanticSegmentation     arn:aws:lambda:us-west-2:081040173940:function:PRE-VerificationSemanticSegmentation     arn:aws:lambda:ca-central-1:918755190332:function:PRE-VerificationSemanticSegmentation     arn:aws:lambda:eu-west-1:568282634449:function:PRE-VerificationSemanticSegmentation     arn:aws:lambda:eu-west-2:487402164563:function:PRE-VerificationSemanticSegmentation     arn:aws:lambda:eu-central-1:203001061592:function:PRE-VerificationSemanticSegmentation     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VerificationSemanticSegmentation     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VerificationSemanticSegmentation     arn:aws:lambda:ap-south-1:565803892007:function:PRE-VerificationSemanticSegmentation     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VerificationSemanticSegmentation     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VerificationSemanticSegmentation     Semantic segmentation adjustment - Treats each pixel in an image as a multi-class classification and treats pixel adjusted annotations from workers as "votes" for the correct label.    arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentSemanticSegmentation     arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentSemanticSegmentation     arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentSemanticSegmentation     arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentSemanticSegmentation     arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentSemanticSegmentation     arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentSemanticSegmentation     arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentSemanticSegmentation     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentSemanticSegmentation     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentSemanticSegmentation     arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentSemanticSegmentation     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentSemanticSegmentation     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentSemanticSegmentation     Video Frame Object Detection Adjustment - Use this task type when you want workers to adjust bounding boxes that workers have added to video frames to classify and localize objects in a sequence of video frames.    arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectDetection     arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectDetection     arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectDetection     arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectDetection     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectDetection     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectDetection     arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectDetection     arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectDetection     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectDetection     arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectDetection     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectDetection     arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectDetection     Video Frame Object Tracking Adjustment - Use this task type when you want workers to adjust bounding boxes that workers have added to video frames to track object movement across a sequence of video frames.    arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectTracking     arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectTracking     arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectTracking     arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectTracking     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectTracking     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectTracking     arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectTracking     arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectTracking     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectTracking     arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectTracking     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectTracking     arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectTracking     3D point cloud object detection adjustment - Adjust 3D cuboids in a point cloud frame.     arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectDetection     arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectDetection     arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectDetection     arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectDetection     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectDetection     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectDetection     arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectDetection     arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectDetection     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectDetection     arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectDetection     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectDetection     arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectDetection     3D point cloud object tracking adjustment - Adjust 3D cuboids across a sequence of point cloud frames.     arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectTracking     arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectTracking     3D point cloud semantic segmentation adjustment - Adjust semantic segmentation masks in a 3D point cloud.     arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudSemanticSegmentation     arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudSemanticSegmentation     arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudSemanticSegmentation     arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudSemanticSegmentation     arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudSemanticSegmentation     arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudSemanticSegmentation     arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudSemanticSegmentation     arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudSemanticSegmentation     arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudSemanticSegmentation     arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudSemanticSegmentation     arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudSemanticSegmentation     arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        public let preHumanTaskLambdaArn: String
        /// The price that you pay for each task performed by an Amazon Mechanical Turk worker.
        public let publicWorkforceTaskPrice: PublicWorkforceTaskPrice?
        /// The length of time that a task remains available for labeling by human workers. If you choose the Amazon Mechanical Turk workforce, the maximum is 12 hours (43200). The default value is 864000 seconds (10 days). For private and vendor workforces, the maximum is as listed.
        public let taskAvailabilityLifetimeInSeconds: Int?
        /// A description of the task for your human workers.
        public let taskDescription: String
        /// Keywords used to describe the task so that workers on Amazon Mechanical Turk can discover the task.
        public let taskKeywords: [String]?
        /// The amount of time that a worker has to complete a task.
        public let taskTimeLimitInSeconds: Int
        /// A title for the task for your human workers.
        public let taskTitle: String
        /// Information about the user interface that workers use to complete the labeling task.
        public let uiConfig: UiConfig
        /// The Amazon Resource Name (ARN) of the work team assigned to complete the tasks.
        public let workteamArn: String

        public init(annotationConsolidationConfig: AnnotationConsolidationConfig, maxConcurrentTaskCount: Int? = nil, numberOfHumanWorkersPerDataObject: Int, preHumanTaskLambdaArn: String, publicWorkforceTaskPrice: PublicWorkforceTaskPrice? = nil, taskAvailabilityLifetimeInSeconds: Int? = nil, taskDescription: String, taskKeywords: [String]? = nil, taskTimeLimitInSeconds: Int, taskTitle: String, uiConfig: UiConfig, workteamArn: String) {
            self.annotationConsolidationConfig = annotationConsolidationConfig
            self.maxConcurrentTaskCount = maxConcurrentTaskCount
            self.numberOfHumanWorkersPerDataObject = numberOfHumanWorkersPerDataObject
            self.preHumanTaskLambdaArn = preHumanTaskLambdaArn
            self.publicWorkforceTaskPrice = publicWorkforceTaskPrice
            self.taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSeconds
            self.taskDescription = taskDescription
            self.taskKeywords = taskKeywords
            self.taskTimeLimitInSeconds = taskTimeLimitInSeconds
            self.taskTitle = taskTitle
            self.uiConfig = uiConfig
            self.workteamArn = workteamArn
        }

        public func validate(name: String) throws {
            try self.annotationConsolidationConfig.validate(name: "\(name).annotationConsolidationConfig")
            try self.validate(self.maxConcurrentTaskCount, name: "maxConcurrentTaskCount", parent: name, max: 1000)
            try self.validate(self.maxConcurrentTaskCount, name: "maxConcurrentTaskCount", parent: name, min: 1)
            try self.validate(self.numberOfHumanWorkersPerDataObject, name: "numberOfHumanWorkersPerDataObject", parent: name, max: 9)
            try self.validate(self.numberOfHumanWorkersPerDataObject, name: "numberOfHumanWorkersPerDataObject", parent: name, min: 1)
            try self.validate(self.preHumanTaskLambdaArn, name: "preHumanTaskLambdaArn", parent: name, max: 2048)
            try self.validate(self.preHumanTaskLambdaArn, name: "preHumanTaskLambdaArn", parent: name, pattern: "arn:aws[a-z\\-]*:lambda:[a-z]{2}-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_\\.]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?")
            try self.publicWorkforceTaskPrice?.validate(name: "\(name).publicWorkforceTaskPrice")
            try self.validate(self.taskAvailabilityLifetimeInSeconds, name: "taskAvailabilityLifetimeInSeconds", parent: name, max: 864_000)
            try self.validate(self.taskAvailabilityLifetimeInSeconds, name: "taskAvailabilityLifetimeInSeconds", parent: name, min: 60)
            try self.validate(self.taskDescription, name: "taskDescription", parent: name, max: 255)
            try self.validate(self.taskDescription, name: "taskDescription", parent: name, min: 1)
            try self.validate(self.taskDescription, name: "taskDescription", parent: name, pattern: ".+")
            try self.taskKeywords?.forEach {
                try validate($0, name: "taskKeywords[]", parent: name, max: 30)
                try validate($0, name: "taskKeywords[]", parent: name, min: 1)
                try validate($0, name: "taskKeywords[]", parent: name, pattern: "^[A-Za-z0-9]+( [A-Za-z0-9]+)*$")
            }
            try self.validate(self.taskKeywords, name: "taskKeywords", parent: name, max: 5)
            try self.validate(self.taskKeywords, name: "taskKeywords", parent: name, min: 1)
            try self.validate(self.taskTimeLimitInSeconds, name: "taskTimeLimitInSeconds", parent: name, max: 604_800)
            try self.validate(self.taskTimeLimitInSeconds, name: "taskTimeLimitInSeconds", parent: name, min: 30)
            try self.validate(self.taskTitle, name: "taskTitle", parent: name, max: 128)
            try self.validate(self.taskTitle, name: "taskTitle", parent: name, min: 1)
            try self.validate(self.taskTitle, name: "taskTitle", parent: name, pattern: "^[\\t\\n\\r -\\uD7FF\\uE000-\\uFFFD]*$")
            try self.uiConfig.validate(name: "\(name).uiConfig")
            try self.validate(self.workteamArn, name: "workteamArn", parent: name, max: 256)
            try self.validate(self.workteamArn, name: "workteamArn", parent: name, pattern: "arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:workteam/.*")
        }

        private enum CodingKeys: String, CodingKey {
            case annotationConsolidationConfig = "AnnotationConsolidationConfig"
            case maxConcurrentTaskCount = "MaxConcurrentTaskCount"
            case numberOfHumanWorkersPerDataObject = "NumberOfHumanWorkersPerDataObject"
            case preHumanTaskLambdaArn = "PreHumanTaskLambdaArn"
            case publicWorkforceTaskPrice = "PublicWorkforceTaskPrice"
            case taskAvailabilityLifetimeInSeconds = "TaskAvailabilityLifetimeInSeconds"
            case taskDescription = "TaskDescription"
            case taskKeywords = "TaskKeywords"
            case taskTimeLimitInSeconds = "TaskTimeLimitInSeconds"
            case taskTitle = "TaskTitle"
            case uiConfig = "UiConfig"
            case workteamArn = "WorkteamArn"
        }
    }

    public struct HumanTaskUiSummary: AWSDecodableShape {
        /// A timestamp when SageMaker created the human task user interface.
        public let creationTime: TimeStamp
        /// The Amazon Resource Name (ARN) of the human task user interface.
        public let humanTaskUiArn: String
        /// The name of the human task user interface.
        public let humanTaskUiName: String

        public init(creationTime: TimeStamp, humanTaskUiArn: String, humanTaskUiName: String) {
            self.creationTime = creationTime
            self.humanTaskUiArn = humanTaskUiArn
            self.humanTaskUiName = humanTaskUiName
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case humanTaskUiArn = "HumanTaskUiArn"
            case humanTaskUiName = "HumanTaskUiName"
        }
    }

    public struct HyperParameterAlgorithmSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The name of the resource algorithm to use for the hyperparameter tuning job. If you specify a value for this parameter, do not specify a value for TrainingImage.
        public let algorithmName: String?
        /// An array of MetricDefinition objects that specify the metrics that the algorithm emits.
        public let metricDefinitions: [MetricDefinition]?
        ///  The registry path of the Docker image that contains the training algorithm. For information about Docker registry paths for built-in algorithms, see Algorithms Provided by Amazon SageMaker: Common Parameters. Amazon SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information, see Using Your Own Algorithms with Amazon SageMaker.
        public let trainingImage: String?
        /// The input mode that the algorithm supports: File or Pipe. In File input mode, Amazon SageMaker downloads the training data from Amazon S3 to the storage volume that is attached to the training instance and mounts the directory to the Docker volume for the training container. In Pipe input mode, Amazon SageMaker streams data directly from Amazon S3 to the container.  If you specify File mode, make sure that you provision the storage volume that is attached to the training instance with enough capacity to accommodate the training data downloaded from Amazon S3, the model artifacts, and intermediate information.  For more information about input modes, see Algorithms.
        public let trainingInputMode: TrainingInputMode

        public init(algorithmName: String? = nil, metricDefinitions: [MetricDefinition]? = nil, trainingImage: String? = nil, trainingInputMode: TrainingInputMode) {
            self.algorithmName = algorithmName
            self.metricDefinitions = metricDefinitions
            self.trainingImage = trainingImage
            self.trainingInputMode = trainingInputMode
        }

        public func validate(name: String) throws {
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, max: 170)
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, min: 1)
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, pattern: "(arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:[a-z\\-]*\\/)?([a-zA-Z0-9]([a-zA-Z0-9-]){0,62})(?<!-)$")
            try self.metricDefinitions?.forEach {
                try $0.validate(name: "\(name).metricDefinitions[]")
            }
            try self.validate(self.metricDefinitions, name: "metricDefinitions", parent: name, max: 40)
            try self.validate(self.metricDefinitions, name: "metricDefinitions", parent: name, min: 0)
            try self.validate(self.trainingImage, name: "trainingImage", parent: name, max: 255)
            try self.validate(self.trainingImage, name: "trainingImage", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmName = "AlgorithmName"
            case metricDefinitions = "MetricDefinitions"
            case trainingImage = "TrainingImage"
            case trainingInputMode = "TrainingInputMode"
        }
    }

    public struct HyperParameterSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The default value for this hyperparameter. If a default value is specified, a hyperparameter cannot be required.
        public let defaultValue: String?
        /// A brief description of the hyperparameter.
        public let description: String?
        /// Indicates whether this hyperparameter is required.
        public let isRequired: Bool?
        /// Indicates whether this hyperparameter is tunable in a hyperparameter tuning job.
        public let isTunable: Bool?
        /// The name of this hyperparameter. The name must be unique.
        public let name: String
        /// The allowed range for this hyperparameter.
        public let range: ParameterRange?
        /// The type of this hyperparameter. The valid types are Integer, Continuous, Categorical, and FreeText.
        public let `type`: ParameterType

        public init(defaultValue: String? = nil, description: String? = nil, isRequired: Bool? = nil, isTunable: Bool? = nil, name: String, range: ParameterRange? = nil, type: ParameterType) {
            self.defaultValue = defaultValue
            self.description = description
            self.isRequired = isRequired
            self.isTunable = isTunable
            self.name = name
            self.range = range
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try self.validate(self.defaultValue, name: "defaultValue", parent: name, max: 256)
            try self.validate(self.defaultValue, name: "defaultValue", parent: name, pattern: ".*")
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.validate(self.description, name: "description", parent: name, pattern: "[\\p{L}\\p{M}\\p{Z}\\p{S}\\p{N}\\p{P}]*")
            try self.validate(self.name, name: "name", parent: name, max: 256)
            try self.validate(self.name, name: "name", parent: name, pattern: "[\\p{L}\\p{M}\\p{Z}\\p{S}\\p{N}\\p{P}]*")
            try self.range?.validate(name: "\(name).range")
        }

        private enum CodingKeys: String, CodingKey {
            case defaultValue = "DefaultValue"
            case description = "Description"
            case isRequired = "IsRequired"
            case isTunable = "IsTunable"
            case name = "Name"
            case range = "Range"
            case `type` = "Type"
        }
    }

    public struct HyperParameterTrainingJobDefinition: AWSEncodableShape & AWSDecodableShape {
        /// The HyperParameterAlgorithmSpecification object that specifies the resource algorithm to use for the training jobs that the tuning job launches.
        public let algorithmSpecification: HyperParameterAlgorithmSpecification
        public let checkpointConfig: CheckpointConfig?
        /// The job definition name.
        public let definitionName: String?
        /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training.
        public let enableInterContainerTrafficEncryption: Bool?
        /// A Boolean indicating whether managed spot training is enabled (True) or not (False).
        public let enableManagedSpotTraining: Bool?
        /// Isolates the training container. No inbound or outbound network calls can be made, except for calls between peers within a training cluster for distributed training. If network isolation is used for training jobs that are configured to use a VPC, Amazon SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.
        public let enableNetworkIsolation: Bool?
        public let hyperParameterRanges: ParameterRanges?
        /// An array of Channel objects that specify the input for the training jobs that the tuning job launches.
        public let inputDataConfig: [Channel]?
        /// Specifies the path to the Amazon S3 bucket where you store model artifacts from the training jobs that the tuning job launches.
        public let outputDataConfig: OutputDataConfig
        /// The resources, including the compute instances and storage volumes, to use for the training jobs that the tuning job launches. Storage volumes store model artifacts and incremental states. Training algorithms might also use storage volumes for scratch space. If you want Amazon SageMaker to use the storage volume to store the training data, choose File as the TrainingInputMode in the algorithm specification. For distributed training algorithms, specify an instance count greater than 1.
        public let resourceConfig: ResourceConfig
        /// The Amazon Resource Name (ARN) of the IAM role associated with the training jobs that the tuning job launches.
        public let roleArn: String
        /// Specifies the values of hyperparameters that do not change for the tuning job.
        public let staticHyperParameters: [String: String]?
        /// Specifies a limit to how long a model hyperparameter training job can run. It also specifies how long you are willing to wait for a managed spot training job to complete. When the job reaches the a limit, Amazon SageMaker ends the training job. Use this API to cap model training costs.
        public let stoppingCondition: StoppingCondition
        public let tuningObjective: HyperParameterTuningJobObjective?
        /// The VpcConfig object that specifies the VPC that you want the training jobs that this hyperparameter tuning job launches to connect to. Control access to and from your training container by configuring the VPC. For more information, see Protect Training Jobs by Using an Amazon Virtual Private Cloud.
        public let vpcConfig: VpcConfig?

        public init(algorithmSpecification: HyperParameterAlgorithmSpecification, checkpointConfig: CheckpointConfig? = nil, definitionName: String? = nil, enableInterContainerTrafficEncryption: Bool? = nil, enableManagedSpotTraining: Bool? = nil, enableNetworkIsolation: Bool? = nil, hyperParameterRanges: ParameterRanges? = nil, inputDataConfig: [Channel]? = nil, outputDataConfig: OutputDataConfig, resourceConfig: ResourceConfig, roleArn: String, staticHyperParameters: [String: String]? = nil, stoppingCondition: StoppingCondition, tuningObjective: HyperParameterTuningJobObjective? = nil, vpcConfig: VpcConfig? = nil) {
            self.algorithmSpecification = algorithmSpecification
            self.checkpointConfig = checkpointConfig
            self.definitionName = definitionName
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableManagedSpotTraining = enableManagedSpotTraining
            self.enableNetworkIsolation = enableNetworkIsolation
            self.hyperParameterRanges = hyperParameterRanges
            self.inputDataConfig = inputDataConfig
            self.outputDataConfig = outputDataConfig
            self.resourceConfig = resourceConfig
            self.roleArn = roleArn
            self.staticHyperParameters = staticHyperParameters
            self.stoppingCondition = stoppingCondition
            self.tuningObjective = tuningObjective
            self.vpcConfig = vpcConfig
        }

        public func validate(name: String) throws {
            try self.algorithmSpecification.validate(name: "\(name).algorithmSpecification")
            try self.checkpointConfig?.validate(name: "\(name).checkpointConfig")
            try self.validate(self.definitionName, name: "definitionName", parent: name, max: 64)
            try self.validate(self.definitionName, name: "definitionName", parent: name, min: 1)
            try self.validate(self.definitionName, name: "definitionName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.hyperParameterRanges?.validate(name: "\(name).hyperParameterRanges")
            try self.inputDataConfig?.forEach {
                try $0.validate(name: "\(name).inputDataConfig[]")
            }
            try self.validate(self.inputDataConfig, name: "inputDataConfig", parent: name, max: 20)
            try self.validate(self.inputDataConfig, name: "inputDataConfig", parent: name, min: 1)
            try self.outputDataConfig.validate(name: "\(name).outputDataConfig")
            try self.resourceConfig.validate(name: "\(name).resourceConfig")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 2048)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 20)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
            try self.staticHyperParameters?.forEach {
                try validate($0.key, name: "staticHyperParameters.key", parent: name, max: 256)
                try validate($0.key, name: "staticHyperParameters.key", parent: name, pattern: ".*")
                try validate($0.value, name: "staticHyperParameters[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "staticHyperParameters[\"\($0.key)\"]", parent: name, pattern: ".*")
            }
            try self.stoppingCondition.validate(name: "\(name).stoppingCondition")
            try self.tuningObjective?.validate(name: "\(name).tuningObjective")
            try self.vpcConfig?.validate(name: "\(name).vpcConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmSpecification = "AlgorithmSpecification"
            case checkpointConfig = "CheckpointConfig"
            case definitionName = "DefinitionName"
            case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
            case enableManagedSpotTraining = "EnableManagedSpotTraining"
            case enableNetworkIsolation = "EnableNetworkIsolation"
            case hyperParameterRanges = "HyperParameterRanges"
            case inputDataConfig = "InputDataConfig"
            case outputDataConfig = "OutputDataConfig"
            case resourceConfig = "ResourceConfig"
            case roleArn = "RoleArn"
            case staticHyperParameters = "StaticHyperParameters"
            case stoppingCondition = "StoppingCondition"
            case tuningObjective = "TuningObjective"
            case vpcConfig = "VpcConfig"
        }
    }

    public struct HyperParameterTrainingJobSummary: AWSDecodableShape {
        /// The date and time that the training job was created.
        public let creationTime: TimeStamp
        /// The reason that the training job failed.
        public let failureReason: String?
        /// The FinalHyperParameterTuningJobObjectiveMetric object that specifies the value of the objective metric of the tuning job that launched this training job.
        public let finalHyperParameterTuningJobObjectiveMetric: FinalHyperParameterTuningJobObjectiveMetric?
        /// The status of the objective metric for the training job:   Succeeded: The final objective metric for the training job was evaluated by the hyperparameter tuning job and used in the hyperparameter tuning process.     Pending: The training job is in progress and evaluation of its final objective metric is pending.     Failed: The final objective metric for the training job was not evaluated, and was not used in the hyperparameter tuning process. This typically occurs when the training job failed or did not emit an objective metric.
        public let objectiveStatus: ObjectiveStatus?
        /// Specifies the time when the training job ends on training instances. You are billed for the time interval between the value of TrainingStartTime and this time. For successful jobs and stopped jobs, this is the time after model artifacts are uploaded. For failed jobs, this is the time when Amazon SageMaker detects a job failure.
        public let trainingEndTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the training job.
        public let trainingJobArn: String
        /// The training job definition name.
        public let trainingJobDefinitionName: String?
        /// The name of the training job.
        public let trainingJobName: String
        /// The status of the training job.
        public let trainingJobStatus: TrainingJobStatus
        /// The date and time that the training job started.
        public let trainingStartTime: TimeStamp?
        /// A list of the hyperparameters for which you specified ranges to search.
        public let tunedHyperParameters: [String: String]
        /// The HyperParameter tuning job that launched the training job.
        public let tuningJobName: String?

        public init(creationTime: TimeStamp, failureReason: String? = nil, finalHyperParameterTuningJobObjectiveMetric: FinalHyperParameterTuningJobObjectiveMetric? = nil, objectiveStatus: ObjectiveStatus? = nil, trainingEndTime: TimeStamp? = nil, trainingJobArn: String, trainingJobDefinitionName: String? = nil, trainingJobName: String, trainingJobStatus: TrainingJobStatus, trainingStartTime: TimeStamp? = nil, tunedHyperParameters: [String: String], tuningJobName: String? = nil) {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.finalHyperParameterTuningJobObjectiveMetric = finalHyperParameterTuningJobObjectiveMetric
            self.objectiveStatus = objectiveStatus
            self.trainingEndTime = trainingEndTime
            self.trainingJobArn = trainingJobArn
            self.trainingJobDefinitionName = trainingJobDefinitionName
            self.trainingJobName = trainingJobName
            self.trainingJobStatus = trainingJobStatus
            self.trainingStartTime = trainingStartTime
            self.tunedHyperParameters = tunedHyperParameters
            self.tuningJobName = tuningJobName
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case finalHyperParameterTuningJobObjectiveMetric = "FinalHyperParameterTuningJobObjectiveMetric"
            case objectiveStatus = "ObjectiveStatus"
            case trainingEndTime = "TrainingEndTime"
            case trainingJobArn = "TrainingJobArn"
            case trainingJobDefinitionName = "TrainingJobDefinitionName"
            case trainingJobName = "TrainingJobName"
            case trainingJobStatus = "TrainingJobStatus"
            case trainingStartTime = "TrainingStartTime"
            case tunedHyperParameters = "TunedHyperParameters"
            case tuningJobName = "TuningJobName"
        }
    }

    public struct HyperParameterTuningJobConfig: AWSEncodableShape & AWSDecodableShape {
        /// The HyperParameterTuningJobObjective object that specifies the objective metric for this tuning job.
        public let hyperParameterTuningJobObjective: HyperParameterTuningJobObjective?
        /// The ParameterRanges object that specifies the ranges of hyperparameters that this tuning job searches.
        public let parameterRanges: ParameterRanges?
        /// The ResourceLimits object that specifies the maximum number of training jobs and parallel training jobs for this tuning job.
        public let resourceLimits: ResourceLimits
        /// Specifies how hyperparameter tuning chooses the combinations of hyperparameter values to use for the training job it launches. To use the Bayesian search strategy, set this to Bayesian. To randomly search, set it to Random. For information about search strategies, see How Hyperparameter Tuning Works.
        public let strategy: HyperParameterTuningJobStrategyType
        /// Specifies whether to use early stopping for training jobs launched by the hyperparameter tuning job. This can be one of the following values (the default value is OFF):  OFF  Training jobs launched by the hyperparameter tuning job do not use early stopping.  AUTO  Amazon SageMaker stops training jobs launched by the hyperparameter tuning job when they are unlikely to perform better than previously completed training jobs. For more information, see Stop Training Jobs Early.
        public let trainingJobEarlyStoppingType: TrainingJobEarlyStoppingType?
        /// The tuning job's completion criteria.
        public let tuningJobCompletionCriteria: TuningJobCompletionCriteria?

        public init(hyperParameterTuningJobObjective: HyperParameterTuningJobObjective? = nil, parameterRanges: ParameterRanges? = nil, resourceLimits: ResourceLimits, strategy: HyperParameterTuningJobStrategyType, trainingJobEarlyStoppingType: TrainingJobEarlyStoppingType? = nil, tuningJobCompletionCriteria: TuningJobCompletionCriteria? = nil) {
            self.hyperParameterTuningJobObjective = hyperParameterTuningJobObjective
            self.parameterRanges = parameterRanges
            self.resourceLimits = resourceLimits
            self.strategy = strategy
            self.trainingJobEarlyStoppingType = trainingJobEarlyStoppingType
            self.tuningJobCompletionCriteria = tuningJobCompletionCriteria
        }

        public func validate(name: String) throws {
            try self.hyperParameterTuningJobObjective?.validate(name: "\(name).hyperParameterTuningJobObjective")
            try self.parameterRanges?.validate(name: "\(name).parameterRanges")
            try self.resourceLimits.validate(name: "\(name).resourceLimits")
        }

        private enum CodingKeys: String, CodingKey {
            case hyperParameterTuningJobObjective = "HyperParameterTuningJobObjective"
            case parameterRanges = "ParameterRanges"
            case resourceLimits = "ResourceLimits"
            case strategy = "Strategy"
            case trainingJobEarlyStoppingType = "TrainingJobEarlyStoppingType"
            case tuningJobCompletionCriteria = "TuningJobCompletionCriteria"
        }
    }

    public struct HyperParameterTuningJobObjective: AWSEncodableShape & AWSDecodableShape {
        /// The name of the metric to use for the objective metric.
        public let metricName: String
        /// Whether to minimize or maximize the objective metric.
        public let `type`: HyperParameterTuningJobObjectiveType

        public init(metricName: String, type: HyperParameterTuningJobObjectiveType) {
            self.metricName = metricName
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try self.validate(self.metricName, name: "metricName", parent: name, max: 255)
            try self.validate(self.metricName, name: "metricName", parent: name, min: 1)
            try self.validate(self.metricName, name: "metricName", parent: name, pattern: ".+")
        }

        private enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case `type` = "Type"
        }
    }

    public struct HyperParameterTuningJobSummary: AWSDecodableShape {
        /// The date and time that the tuning job was created.
        public let creationTime: TimeStamp
        /// The date and time that the tuning job ended.
        public let hyperParameterTuningEndTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the tuning job.
        public let hyperParameterTuningJobArn: String
        /// The name of the tuning job.
        public let hyperParameterTuningJobName: String
        /// The status of the tuning job.
        public let hyperParameterTuningJobStatus: HyperParameterTuningJobStatus
        /// The date and time that the tuning job was modified.
        public let lastModifiedTime: TimeStamp?
        /// The ObjectiveStatusCounters object that specifies the numbers of training jobs, categorized by objective metric status, that this tuning job launched.
        public let objectiveStatusCounters: ObjectiveStatusCounters
        /// The ResourceLimits object that specifies the maximum number of training jobs and parallel training jobs allowed for this tuning job.
        public let resourceLimits: ResourceLimits?
        /// Specifies the search strategy hyperparameter tuning uses to choose which hyperparameters to use for each iteration. Currently, the only valid value is Bayesian.
        public let strategy: HyperParameterTuningJobStrategyType
        /// The TrainingJobStatusCounters object that specifies the numbers of training jobs, categorized by status, that this tuning job launched.
        public let trainingJobStatusCounters: TrainingJobStatusCounters

        public init(creationTime: TimeStamp, hyperParameterTuningEndTime: TimeStamp? = nil, hyperParameterTuningJobArn: String, hyperParameterTuningJobName: String, hyperParameterTuningJobStatus: HyperParameterTuningJobStatus, lastModifiedTime: TimeStamp? = nil, objectiveStatusCounters: ObjectiveStatusCounters, resourceLimits: ResourceLimits? = nil, strategy: HyperParameterTuningJobStrategyType, trainingJobStatusCounters: TrainingJobStatusCounters) {
            self.creationTime = creationTime
            self.hyperParameterTuningEndTime = hyperParameterTuningEndTime
            self.hyperParameterTuningJobArn = hyperParameterTuningJobArn
            self.hyperParameterTuningJobName = hyperParameterTuningJobName
            self.hyperParameterTuningJobStatus = hyperParameterTuningJobStatus
            self.lastModifiedTime = lastModifiedTime
            self.objectiveStatusCounters = objectiveStatusCounters
            self.resourceLimits = resourceLimits
            self.strategy = strategy
            self.trainingJobStatusCounters = trainingJobStatusCounters
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case hyperParameterTuningEndTime = "HyperParameterTuningEndTime"
            case hyperParameterTuningJobArn = "HyperParameterTuningJobArn"
            case hyperParameterTuningJobName = "HyperParameterTuningJobName"
            case hyperParameterTuningJobStatus = "HyperParameterTuningJobStatus"
            case lastModifiedTime = "LastModifiedTime"
            case objectiveStatusCounters = "ObjectiveStatusCounters"
            case resourceLimits = "ResourceLimits"
            case strategy = "Strategy"
            case trainingJobStatusCounters = "TrainingJobStatusCounters"
        }
    }

    public struct HyperParameterTuningJobWarmStartConfig: AWSEncodableShape & AWSDecodableShape {
        /// An array of hyperparameter tuning jobs that are used as the starting point for the new hyperparameter tuning job. For more information about warm starting a hyperparameter tuning job, see Using a Previous Hyperparameter Tuning Job as a Starting Point. Hyperparameter tuning jobs created before October 1, 2018 cannot be used as parent jobs for warm start tuning jobs.
        public let parentHyperParameterTuningJobs: [ParentHyperParameterTuningJob]
        /// Specifies one of the following:  IDENTICAL_DATA_AND_ALGORITHM  The new hyperparameter tuning job uses the same input data and training image as the parent tuning jobs. You can change the hyperparameter ranges to search and the maximum number of training jobs that the hyperparameter tuning job launches. You cannot use a new version of the training algorithm, unless the changes in the new version do not affect the algorithm itself. For example, changes that improve logging or adding support for a different data format are allowed. You can also change hyperparameters from tunable to static, and from static to tunable, but the total number of static plus tunable hyperparameters must remain the same as it is in all parent jobs. The objective metric for the new tuning job must be the same as for all parent jobs.  TRANSFER_LEARNING  The new hyperparameter tuning job can include input data, hyperparameter ranges, maximum number of concurrent training jobs, and maximum number of training jobs that are different than those of its parent hyperparameter tuning jobs. The training image can also be a different version from the version used in the parent hyperparameter tuning job. You can also change hyperparameters from tunable to static, and from static to tunable, but the total number of static plus tunable hyperparameters must remain the same as it is in all parent jobs. The objective metric for the new tuning job must be the same as for all parent jobs.
        public let warmStartType: HyperParameterTuningJobWarmStartType

        public init(parentHyperParameterTuningJobs: [ParentHyperParameterTuningJob], warmStartType: HyperParameterTuningJobWarmStartType) {
            self.parentHyperParameterTuningJobs = parentHyperParameterTuningJobs
            self.warmStartType = warmStartType
        }

        public func validate(name: String) throws {
            try self.parentHyperParameterTuningJobs.forEach {
                try $0.validate(name: "\(name).parentHyperParameterTuningJobs[]")
            }
            try self.validate(self.parentHyperParameterTuningJobs, name: "parentHyperParameterTuningJobs", parent: name, max: 5)
            try self.validate(self.parentHyperParameterTuningJobs, name: "parentHyperParameterTuningJobs", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case parentHyperParameterTuningJobs = "ParentHyperParameterTuningJobs"
            case warmStartType = "WarmStartType"
        }
    }

    public struct ImageConfig: AWSEncodableShape & AWSDecodableShape {
        /// Set this to one of the following values:    Platform - The model image is hosted in Amazon ECR.    VPC - The model image is hosted in a private Docker registry in your VPC.
        public let repositoryAccessMode: RepositoryAccessMode

        public init(repositoryAccessMode: RepositoryAccessMode) {
            self.repositoryAccessMode = repositoryAccessMode
        }

        private enum CodingKeys: String, CodingKey {
            case repositoryAccessMode = "RepositoryAccessMode"
        }
    }

    public struct InferenceSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon ECR registry path of the Docker image that contains the inference code.
        public let containers: [ModelPackageContainerDefinition]
        /// The supported MIME types for the input data.
        public let supportedContentTypes: [String]
        /// A list of the instance types that are used to generate inferences in real-time.
        public let supportedRealtimeInferenceInstanceTypes: [ProductionVariantInstanceType]
        /// The supported MIME types for the output data.
        public let supportedResponseMIMETypes: [String]
        /// A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
        public let supportedTransformInstanceTypes: [TransformInstanceType]

        public init(containers: [ModelPackageContainerDefinition], supportedContentTypes: [String], supportedRealtimeInferenceInstanceTypes: [ProductionVariantInstanceType], supportedResponseMIMETypes: [String], supportedTransformInstanceTypes: [TransformInstanceType]) {
            self.containers = containers
            self.supportedContentTypes = supportedContentTypes
            self.supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypes
            self.supportedResponseMIMETypes = supportedResponseMIMETypes
            self.supportedTransformInstanceTypes = supportedTransformInstanceTypes
        }

        public func validate(name: String) throws {
            try self.containers.forEach {
                try $0.validate(name: "\(name).containers[]")
            }
            try self.validate(self.containers, name: "containers", parent: name, max: 1)
            try self.validate(self.containers, name: "containers", parent: name, min: 1)
            try self.supportedContentTypes.forEach {
                try validate($0, name: "supportedContentTypes[]", parent: name, max: 256)
                try validate($0, name: "supportedContentTypes[]", parent: name, pattern: ".*")
            }
            try self.supportedResponseMIMETypes.forEach {
                try validate($0, name: "supportedResponseMIMETypes[]", parent: name, max: 1024)
                try validate($0, name: "supportedResponseMIMETypes[]", parent: name, pattern: "^[-\\w]+\\/.+$")
            }
            try self.validate(self.supportedTransformInstanceTypes, name: "supportedTransformInstanceTypes", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case containers = "Containers"
            case supportedContentTypes = "SupportedContentTypes"
            case supportedRealtimeInferenceInstanceTypes = "SupportedRealtimeInferenceInstanceTypes"
            case supportedResponseMIMETypes = "SupportedResponseMIMETypes"
            case supportedTransformInstanceTypes = "SupportedTransformInstanceTypes"
        }
    }

    public struct InputConfig: AWSEncodableShape & AWSDecodableShape {
        /// Specifies the name and shape of the expected data inputs for your trained model with a JSON dictionary form. The data inputs are InputConfig$Framework specific.     TensorFlow: You must specify the name and shape (NHWC format) of the expected data inputs using a dictionary format for your trained model. The dictionary formats required for the console and CLI are different.   Examples for one input:   If using the console, {"input":[1,1024,1024,3]}    If using the CLI, {\"input\":[1,1024,1024,3]}      Examples for two inputs:   If using the console, {"data1": [1,28,28,1], "data2":[1,28,28,1]}    If using the CLI, {\"data1\": [1,28,28,1], \"data2\":[1,28,28,1]}         KERAS: You must specify the name and shape (NCHW format) of expected data inputs using a dictionary format for your trained model. Note that while Keras model artifacts should be uploaded in NHWC (channel-last) format, DataInputConfig should be specified in NCHW (channel-first) format. The dictionary formats required for the console and CLI are different.   Examples for one input:   If using the console, {"input_1":[1,3,224,224]}    If using the CLI, {\"input_1\":[1,3,224,224]}      Examples for two inputs:   If using the console, {"input_1": [1,3,224,224], "input_2":[1,3,224,224]}     If using the CLI, {\"input_1\": [1,3,224,224], \"input_2\":[1,3,224,224]}         MXNET/ONNX: You must specify the name and shape (NCHW format) of the expected data inputs in order using a dictionary format for your trained model. The dictionary formats required for the console and CLI are different.   Examples for one input:   If using the console, {"data":[1,3,1024,1024]}    If using the CLI, {\"data\":[1,3,1024,1024]}      Examples for two inputs:   If using the console, {"var1": [1,1,28,28], "var2":[1,1,28,28]}     If using the CLI, {\"var1\": [1,1,28,28], \"var2\":[1,1,28,28]}         PyTorch: You can either specify the name and shape (NCHW format) of expected data inputs in order using a dictionary format for your trained model or you can specify the shape only using a list format. The dictionary formats required for the console and CLI are different. The list formats for the console and CLI are the same.   Examples for one input in dictionary format:   If using the console, {"input0":[1,3,224,224]}    If using the CLI, {\"input0\":[1,3,224,224]}      Example for one input in list format: [[1,3,224,224]]    Examples for two inputs in dictionary format:   If using the console, {"input0":[1,3,224,224], "input1":[1,3,224,224]}    If using the CLI, {\"input0\":[1,3,224,224], \"input1\":[1,3,224,224]}       Example for two inputs in list format: [[1,3,224,224], [1,3,224,224]]       XGBOOST: input data name and shape are not needed.
        public let dataInputConfig: String
        /// Identifies the framework in which the model was trained. For example: TENSORFLOW.
        public let framework: Framework
        /// The S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        public let s3Uri: String

        public init(dataInputConfig: String, framework: Framework, s3Uri: String) {
            self.dataInputConfig = dataInputConfig
            self.framework = framework
            self.s3Uri = s3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.dataInputConfig, name: "dataInputConfig", parent: name, max: 1024)
            try self.validate(self.dataInputConfig, name: "dataInputConfig", parent: name, min: 1)
            try self.validate(self.dataInputConfig, name: "dataInputConfig", parent: name, pattern: "[\\S\\s]+")
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, max: 1024)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case dataInputConfig = "DataInputConfig"
            case framework = "Framework"
            case s3Uri = "S3Uri"
        }
    }

    public struct IntegerParameterRange: AWSEncodableShape & AWSDecodableShape {
        /// The maximum value of the hyperparameter to search.
        public let maxValue: String
        /// The minimum value of the hyperparameter to search.
        public let minValue: String
        /// The name of the hyperparameter to search.
        public let name: String
        /// The scale that hyperparameter tuning uses to search the hyperparameter range. For information about choosing a hyperparameter scale, see Hyperparameter Scaling. One of the following values:  Auto  Amazon SageMaker hyperparameter tuning chooses the best scale for the hyperparameter.  Linear  Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale.  Logarithmic  Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale. Logarithmic scaling works only for ranges that have only values greater than 0.
        public let scalingType: HyperParameterScalingType?

        public init(maxValue: String, minValue: String, name: String, scalingType: HyperParameterScalingType? = nil) {
            self.maxValue = maxValue
            self.minValue = minValue
            self.name = name
            self.scalingType = scalingType
        }

        public func validate(name: String) throws {
            try self.validate(self.maxValue, name: "maxValue", parent: name, max: 256)
            try self.validate(self.maxValue, name: "maxValue", parent: name, pattern: ".*")
            try self.validate(self.minValue, name: "minValue", parent: name, max: 256)
            try self.validate(self.minValue, name: "minValue", parent: name, pattern: ".*")
            try self.validate(self.name, name: "name", parent: name, max: 256)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxValue = "MaxValue"
            case minValue = "MinValue"
            case name = "Name"
            case scalingType = "ScalingType"
        }
    }

    public struct IntegerParameterRangeSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The maximum integer value allowed.
        public let maxValue: String
        /// The minimum integer value allowed.
        public let minValue: String

        public init(maxValue: String, minValue: String) {
            self.maxValue = maxValue
            self.minValue = minValue
        }

        public func validate(name: String) throws {
            try self.validate(self.maxValue, name: "maxValue", parent: name, max: 256)
            try self.validate(self.maxValue, name: "maxValue", parent: name, pattern: ".*")
            try self.validate(self.minValue, name: "minValue", parent: name, max: 256)
            try self.validate(self.minValue, name: "minValue", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxValue = "MaxValue"
            case minValue = "MinValue"
        }
    }

    public struct JupyterServerAppSettings: AWSEncodableShape & AWSDecodableShape {
        /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        public let defaultResourceSpec: ResourceSpec?

        public init(defaultResourceSpec: ResourceSpec? = nil) {
            self.defaultResourceSpec = defaultResourceSpec
        }

        public func validate(name: String) throws {
            try self.defaultResourceSpec?.validate(name: "\(name).defaultResourceSpec")
        }

        private enum CodingKeys: String, CodingKey {
            case defaultResourceSpec = "DefaultResourceSpec"
        }
    }

    public struct KernelGatewayAppSettings: AWSEncodableShape & AWSDecodableShape {
        /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        public let defaultResourceSpec: ResourceSpec?

        public init(defaultResourceSpec: ResourceSpec? = nil) {
            self.defaultResourceSpec = defaultResourceSpec
        }

        public func validate(name: String) throws {
            try self.defaultResourceSpec?.validate(name: "\(name).defaultResourceSpec")
        }

        private enum CodingKeys: String, CodingKey {
            case defaultResourceSpec = "DefaultResourceSpec"
        }
    }

    public struct LabelCounters: AWSDecodableShape {
        /// The total number of objects that could not be labeled due to an error.
        public let failedNonRetryableError: Int?
        /// The total number of objects labeled by a human worker.
        public let humanLabeled: Int?
        /// The total number of objects labeled by automated data labeling.
        public let machineLabeled: Int?
        /// The total number of objects labeled.
        public let totalLabeled: Int?
        /// The total number of objects not yet labeled.
        public let unlabeled: Int?

        public init(failedNonRetryableError: Int? = nil, humanLabeled: Int? = nil, machineLabeled: Int? = nil, totalLabeled: Int? = nil, unlabeled: Int? = nil) {
            self.failedNonRetryableError = failedNonRetryableError
            self.humanLabeled = humanLabeled
            self.machineLabeled = machineLabeled
            self.totalLabeled = totalLabeled
            self.unlabeled = unlabeled
        }

        private enum CodingKeys: String, CodingKey {
            case failedNonRetryableError = "FailedNonRetryableError"
            case humanLabeled = "HumanLabeled"
            case machineLabeled = "MachineLabeled"
            case totalLabeled = "TotalLabeled"
            case unlabeled = "Unlabeled"
        }
    }

    public struct LabelCountersForWorkteam: AWSDecodableShape {
        /// The total number of data objects labeled by a human worker.
        public let humanLabeled: Int?
        /// The total number of data objects that need to be labeled by a human worker.
        public let pendingHuman: Int?
        /// The total number of tasks in the labeling job.
        public let total: Int?

        public init(humanLabeled: Int? = nil, pendingHuman: Int? = nil, total: Int? = nil) {
            self.humanLabeled = humanLabeled
            self.pendingHuman = pendingHuman
            self.total = total
        }

        private enum CodingKeys: String, CodingKey {
            case humanLabeled = "HumanLabeled"
            case pendingHuman = "PendingHuman"
            case total = "Total"
        }
    }

    public struct LabelingJobAlgorithmsConfig: AWSEncodableShape & AWSDecodableShape {
        /// At the end of an auto-label job Amazon SageMaker Ground Truth sends the Amazon Resource Nam (ARN) of the final model used for auto-labeling. You can use this model as the starting point for subsequent similar jobs by providing the ARN of the model here.
        public let initialActiveLearningModelArn: String?
        /// Specifies the Amazon Resource Name (ARN) of the algorithm used for auto-labeling. You must select one of the following ARNs:    Image classification   arn:aws:sagemaker:region:027400017018:labeling-job-algorithm-specification/image-classification     Text classification   arn:aws:sagemaker:region:027400017018:labeling-job-algorithm-specification/text-classification     Object detection   arn:aws:sagemaker:region:027400017018:labeling-job-algorithm-specification/object-detection     Semantic Segmentation   arn:aws:sagemaker:region:027400017018:labeling-job-algorithm-specification/semantic-segmentation
        public let labelingJobAlgorithmSpecificationArn: String
        /// Provides configuration information for a labeling job.
        public let labelingJobResourceConfig: LabelingJobResourceConfig?

        public init(initialActiveLearningModelArn: String? = nil, labelingJobAlgorithmSpecificationArn: String, labelingJobResourceConfig: LabelingJobResourceConfig? = nil) {
            self.initialActiveLearningModelArn = initialActiveLearningModelArn
            self.labelingJobAlgorithmSpecificationArn = labelingJobAlgorithmSpecificationArn
            self.labelingJobResourceConfig = labelingJobResourceConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.initialActiveLearningModelArn, name: "initialActiveLearningModelArn", parent: name, max: 2048)
            try self.validate(self.initialActiveLearningModelArn, name: "initialActiveLearningModelArn", parent: name, min: 20)
            try self.validate(self.initialActiveLearningModelArn, name: "initialActiveLearningModelArn", parent: name, pattern: "arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:model/.*")
            try self.validate(self.labelingJobAlgorithmSpecificationArn, name: "labelingJobAlgorithmSpecificationArn", parent: name, max: 2048)
            try self.validate(self.labelingJobAlgorithmSpecificationArn, name: "labelingJobAlgorithmSpecificationArn", parent: name, pattern: "arn:.*")
            try self.labelingJobResourceConfig?.validate(name: "\(name).labelingJobResourceConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case initialActiveLearningModelArn = "InitialActiveLearningModelArn"
            case labelingJobAlgorithmSpecificationArn = "LabelingJobAlgorithmSpecificationArn"
            case labelingJobResourceConfig = "LabelingJobResourceConfig"
        }
    }

    public struct LabelingJobDataAttributes: AWSEncodableShape & AWSDecodableShape {
        /// Declares that your content is free of personally identifiable information or adult content. Amazon SageMaker may restrict the Amazon Mechanical Turk workers that can view your task based on this information.
        public let contentClassifiers: [ContentClassifier]?

        public init(contentClassifiers: [ContentClassifier]? = nil) {
            self.contentClassifiers = contentClassifiers
        }

        public func validate(name: String) throws {
            try self.validate(self.contentClassifiers, name: "contentClassifiers", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case contentClassifiers = "ContentClassifiers"
        }
    }

    public struct LabelingJobDataSource: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon S3 location of the input data objects.
        public let s3DataSource: LabelingJobS3DataSource?

        public init(s3DataSource: LabelingJobS3DataSource? = nil) {
            self.s3DataSource = s3DataSource
        }

        public func validate(name: String) throws {
            try self.s3DataSource?.validate(name: "\(name).s3DataSource")
        }

        private enum CodingKeys: String, CodingKey {
            case s3DataSource = "S3DataSource"
        }
    }

    public struct LabelingJobForWorkteamSummary: AWSDecodableShape {
        /// The date and time that the labeling job was created.
        public let creationTime: TimeStamp
        /// A unique identifier for a labeling job. You can use this to refer to a specific labeling job.
        public let jobReferenceCode: String
        /// Provides information about the progress of a labeling job.
        public let labelCounters: LabelCountersForWorkteam?
        /// The name of the labeling job that the work team is assigned to.
        public let labelingJobName: String?
        /// The configured number of workers per data object.
        public let numberOfHumanWorkersPerDataObject: Int?
        public let workRequesterAccountId: String

        public init(creationTime: TimeStamp, jobReferenceCode: String, labelCounters: LabelCountersForWorkteam? = nil, labelingJobName: String? = nil, numberOfHumanWorkersPerDataObject: Int? = nil, workRequesterAccountId: String) {
            self.creationTime = creationTime
            self.jobReferenceCode = jobReferenceCode
            self.labelCounters = labelCounters
            self.labelingJobName = labelingJobName
            self.numberOfHumanWorkersPerDataObject = numberOfHumanWorkersPerDataObject
            self.workRequesterAccountId = workRequesterAccountId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case jobReferenceCode = "JobReferenceCode"
            case labelCounters = "LabelCounters"
            case labelingJobName = "LabelingJobName"
            case numberOfHumanWorkersPerDataObject = "NumberOfHumanWorkersPerDataObject"
            case workRequesterAccountId = "WorkRequesterAccountId"
        }
    }

    public struct LabelingJobInputConfig: AWSEncodableShape & AWSDecodableShape {
        /// Attributes of the data specified by the customer.
        public let dataAttributes: LabelingJobDataAttributes?
        /// The location of the input data.
        public let dataSource: LabelingJobDataSource

        public init(dataAttributes: LabelingJobDataAttributes? = nil, dataSource: LabelingJobDataSource) {
            self.dataAttributes = dataAttributes
            self.dataSource = dataSource
        }

        public func validate(name: String) throws {
            try self.dataAttributes?.validate(name: "\(name).dataAttributes")
            try self.dataSource.validate(name: "\(name).dataSource")
        }

        private enum CodingKeys: String, CodingKey {
            case dataAttributes = "DataAttributes"
            case dataSource = "DataSource"
        }
    }

    public struct LabelingJobOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) for the most recent Amazon SageMaker model trained as part of automated data labeling.
        public let finalActiveLearningModelArn: String?
        /// The Amazon S3 bucket location of the manifest file for labeled data.
        public let outputDatasetS3Uri: String

        public init(finalActiveLearningModelArn: String? = nil, outputDatasetS3Uri: String) {
            self.finalActiveLearningModelArn = finalActiveLearningModelArn
            self.outputDatasetS3Uri = outputDatasetS3Uri
        }

        private enum CodingKeys: String, CodingKey {
            case finalActiveLearningModelArn = "FinalActiveLearningModelArn"
            case outputDatasetS3Uri = "OutputDatasetS3Uri"
        }
    }

    public struct LabelingJobOutputConfig: AWSEncodableShape & AWSDecodableShape {
        /// The AWS Key Management Service ID of the key used to encrypt the output data, if any. If you use a KMS key ID or an alias of your master key, the Amazon SageMaker execution role must include permissions to call kms:Encrypt. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. Amazon SageMaker uses server-side encryption with KMS-managed keys for LabelingJobOutputConfig. If you use a bucket policy with an s3:PutObject permission that only allows objects with server-side encryption, set the condition key of s3:x-amz-server-side-encryption to "aws:kms". For more information, see KMS-Managed Encryption Keys in the Amazon Simple Storage Service Developer Guide.  The KMS key policy must grant permission to the IAM role that you specify in your CreateLabelingJob request. For more information, see Using Key Policies in AWS KMS in the AWS Key Management Service Developer Guide.
        public let kmsKeyId: String?
        /// The Amazon S3 location to write output data.
        public let s3OutputPath: String

        public init(kmsKeyId: String? = nil, s3OutputPath: String) {
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
        }

        public func validate(name: String) throws {
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, pattern: ".*")
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, max: 1024)
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case s3OutputPath = "S3OutputPath"
        }
    }

    public struct LabelingJobResourceConfig: AWSEncodableShape & AWSDecodableShape {
        /// The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the training job. The VolumeKmsKeyId can be any of the following formats:   // KMS Key ID  "1234abcd-12ab-34cd-56ef-1234567890ab"    // Amazon Resource Name (ARN) of a KMS Key  "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public let volumeKmsKeyId: String?

        public init(volumeKmsKeyId: String? = nil) {
            self.volumeKmsKeyId = volumeKmsKeyId
        }

        public func validate(name: String) throws {
            try self.validate(self.volumeKmsKeyId, name: "volumeKmsKeyId", parent: name, max: 2048)
            try self.validate(self.volumeKmsKeyId, name: "volumeKmsKeyId", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case volumeKmsKeyId = "VolumeKmsKeyId"
        }
    }

    public struct LabelingJobS3DataSource: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon S3 location of the manifest file that describes the input data objects.
        public let manifestS3Uri: String

        public init(manifestS3Uri: String) {
            self.manifestS3Uri = manifestS3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.manifestS3Uri, name: "manifestS3Uri", parent: name, max: 1024)
            try self.validate(self.manifestS3Uri, name: "manifestS3Uri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case manifestS3Uri = "ManifestS3Uri"
        }
    }

    public struct LabelingJobStoppingConditions: AWSEncodableShape & AWSDecodableShape {
        /// The maximum number of objects that can be labeled by human workers.
        public let maxHumanLabeledObjectCount: Int?
        /// The maximum number of input data objects that should be labeled.
        public let maxPercentageOfInputDatasetLabeled: Int?

        public init(maxHumanLabeledObjectCount: Int? = nil, maxPercentageOfInputDatasetLabeled: Int? = nil) {
            self.maxHumanLabeledObjectCount = maxHumanLabeledObjectCount
            self.maxPercentageOfInputDatasetLabeled = maxPercentageOfInputDatasetLabeled
        }

        public func validate(name: String) throws {
            try self.validate(self.maxHumanLabeledObjectCount, name: "maxHumanLabeledObjectCount", parent: name, min: 1)
            try self.validate(self.maxPercentageOfInputDatasetLabeled, name: "maxPercentageOfInputDatasetLabeled", parent: name, max: 100)
            try self.validate(self.maxPercentageOfInputDatasetLabeled, name: "maxPercentageOfInputDatasetLabeled", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxHumanLabeledObjectCount = "MaxHumanLabeledObjectCount"
            case maxPercentageOfInputDatasetLabeled = "MaxPercentageOfInputDatasetLabeled"
        }
    }

    public struct LabelingJobSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Lambda function used to consolidate the annotations from individual workers into a label for a data object. For more information, see Annotation Consolidation.
        public let annotationConsolidationLambdaArn: String?
        /// The date and time that the job was created (timestamp).
        public let creationTime: TimeStamp
        /// If the LabelingJobStatus field is Failed, this field contains a description of the error.
        public let failureReason: String?
        /// Input configuration for the labeling job.
        public let inputConfig: LabelingJobInputConfig?
        /// Counts showing the progress of the labeling job.
        public let labelCounters: LabelCounters
        /// The Amazon Resource Name (ARN) assigned to the labeling job when it was created.
        public let labelingJobArn: String
        /// The name of the labeling job.
        public let labelingJobName: String
        /// The location of the output produced by the labeling job.
        public let labelingJobOutput: LabelingJobOutput?
        /// The current status of the labeling job.
        public let labelingJobStatus: LabelingJobStatus
        /// The date and time that the job was last modified (timestamp).
        public let lastModifiedTime: TimeStamp
        /// The Amazon Resource Name (ARN) of a Lambda function. The function is run before each data object is sent to a worker.
        public let preHumanTaskLambdaArn: String
        /// The Amazon Resource Name (ARN) of the work team assigned to the job.
        public let workteamArn: String

        public init(annotationConsolidationLambdaArn: String? = nil, creationTime: TimeStamp, failureReason: String? = nil, inputConfig: LabelingJobInputConfig? = nil, labelCounters: LabelCounters, labelingJobArn: String, labelingJobName: String, labelingJobOutput: LabelingJobOutput? = nil, labelingJobStatus: LabelingJobStatus, lastModifiedTime: TimeStamp, preHumanTaskLambdaArn: String, workteamArn: String) {
            self.annotationConsolidationLambdaArn = annotationConsolidationLambdaArn
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.inputConfig = inputConfig
            self.labelCounters = labelCounters
            self.labelingJobArn = labelingJobArn
            self.labelingJobName = labelingJobName
            self.labelingJobOutput = labelingJobOutput
            self.labelingJobStatus = labelingJobStatus
            self.lastModifiedTime = lastModifiedTime
            self.preHumanTaskLambdaArn = preHumanTaskLambdaArn
            self.workteamArn = workteamArn
        }

        private enum CodingKeys: String, CodingKey {
            case annotationConsolidationLambdaArn = "AnnotationConsolidationLambdaArn"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case inputConfig = "InputConfig"
            case labelCounters = "LabelCounters"
            case labelingJobArn = "LabelingJobArn"
            case labelingJobName = "LabelingJobName"
            case labelingJobOutput = "LabelingJobOutput"
            case labelingJobStatus = "LabelingJobStatus"
            case lastModifiedTime = "LastModifiedTime"
            case preHumanTaskLambdaArn = "PreHumanTaskLambdaArn"
            case workteamArn = "WorkteamArn"
        }
    }

    public struct ListAlgorithmsInput: AWSEncodableShape {
        /// A filter that returns only algorithms created after the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only algorithms created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        /// The maximum number of algorithms to return in the response.
        public let maxResults: Int?
        /// A string in the algorithm name. This filter returns only algorithms whose name contains the specified string.
        public let nameContains: String?
        /// If the response to a previous ListAlgorithms request was truncated, the response includes a NextToken. To retrieve the next set of algorithms, use the token in the next request.
        public let nextToken: String?
        /// The parameter by which to sort the results. The default is CreationTime.
        public let sortBy: AlgorithmSortBy?
        /// The sort order for the results. The default is Ascending.
        public let sortOrder: SortOrder?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: AlgorithmSortBy? = nil, sortOrder: SortOrder? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9\\-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListAlgorithmsOutput: AWSDecodableShape {
        /// &gt;An array of AlgorithmSummary objects, each of which lists an algorithm.
        public let algorithmSummaryList: [AlgorithmSummary]
        /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.
        public let nextToken: String?

        public init(algorithmSummaryList: [AlgorithmSummary], nextToken: String? = nil) {
            self.algorithmSummaryList = algorithmSummaryList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmSummaryList = "AlgorithmSummaryList"
            case nextToken = "NextToken"
        }
    }

    public struct ListAppsRequest: AWSEncodableShape {
        /// A parameter to search for the domain ID.
        public let domainIdEquals: String?
        /// Returns a list up to a specified limit.
        public let maxResults: Int?
        /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
        public let nextToken: String?
        /// The parameter by which to sort the results. The default is CreationTime.
        public let sortBy: AppSortKey?
        /// The sort order for the results. The default is Ascending.
        public let sortOrder: SortOrder?
        /// A parameter to search by user profile name.
        public let userProfileNameEquals: String?

        public init(domainIdEquals: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortBy: AppSortKey? = nil, sortOrder: SortOrder? = nil, userProfileNameEquals: String? = nil) {
            self.domainIdEquals = domainIdEquals
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.userProfileNameEquals = userProfileNameEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.domainIdEquals, name: "domainIdEquals", parent: name, max: 63)
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
            try self.validate(self.userProfileNameEquals, name: "userProfileNameEquals", parent: name, max: 63)
            try self.validate(self.userProfileNameEquals, name: "userProfileNameEquals", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case domainIdEquals = "DomainIdEquals"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case userProfileNameEquals = "UserProfileNameEquals"
        }
    }

    public struct ListAppsResponse: AWSDecodableShape {
        /// The list of apps.
        public let apps: [AppDetails]?
        /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
        public let nextToken: String?

        public init(apps: [AppDetails]? = nil, nextToken: String? = nil) {
            self.apps = apps
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apps = "Apps"
            case nextToken = "NextToken"
        }
    }

    public struct ListAutoMLJobsRequest: AWSEncodableShape {
        /// Request a list of jobs, using a filter for time.
        public let creationTimeAfter: TimeStamp?
        /// Request a list of jobs, using a filter for time.
        public let creationTimeBefore: TimeStamp?
        /// Request a list of jobs, using a filter for time.
        public let lastModifiedTimeAfter: TimeStamp?
        /// Request a list of jobs, using a filter for time.
        public let lastModifiedTimeBefore: TimeStamp?
        /// Request a list of jobs up to a specified limit.
        public let maxResults: Int?
        /// Request a list of jobs, using a search filter for name.
        public let nameContains: String?
        /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
        public let nextToken: String?
        /// The parameter by which to sort the results. The default is AutoMLJobName.
        public let sortBy: AutoMLSortBy?
        /// The sort order for the results. The default is Descending.
        public let sortOrder: AutoMLSortOrder?
        /// Request a list of jobs, using a filter for status.
        public let statusEquals: AutoMLJobStatus?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, lastModifiedTimeAfter: TimeStamp? = nil, lastModifiedTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: AutoMLSortBy? = nil, sortOrder: AutoMLSortOrder? = nil, statusEquals: AutoMLJobStatus? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9\\-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case statusEquals = "StatusEquals"
        }
    }

    public struct ListAutoMLJobsResponse: AWSDecodableShape {
        /// Returns a summary list of jobs.
        public let autoMLJobSummaries: [AutoMLJobSummary]
        /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
        public let nextToken: String?

        public init(autoMLJobSummaries: [AutoMLJobSummary], nextToken: String? = nil) {
            self.autoMLJobSummaries = autoMLJobSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case autoMLJobSummaries = "AutoMLJobSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct ListCandidatesForAutoMLJobRequest: AWSEncodableShape {
        /// List the Candidates created for the job by providing the job's name.
        public let autoMLJobName: String
        /// List the Candidates for the job and filter by candidate name.
        public let candidateNameEquals: String?
        /// List the job's Candidates up to a specified limit.
        public let maxResults: Int?
        /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
        public let nextToken: String?
        /// The parameter by which to sort the results. The default is Descending.
        public let sortBy: CandidateSortBy?
        /// The sort order for the results. The default is Ascending.
        public let sortOrder: AutoMLSortOrder?
        /// List the Candidates for the job and filter by status.
        public let statusEquals: CandidateStatus?

        public init(autoMLJobName: String, candidateNameEquals: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortBy: CandidateSortBy? = nil, sortOrder: AutoMLSortOrder? = nil, statusEquals: CandidateStatus? = nil) {
            self.autoMLJobName = autoMLJobName
            self.candidateNameEquals = candidateNameEquals
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.autoMLJobName, name: "autoMLJobName", parent: name, max: 32)
            try self.validate(self.autoMLJobName, name: "autoMLJobName", parent: name, min: 1)
            try self.validate(self.autoMLJobName, name: "autoMLJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.candidateNameEquals, name: "candidateNameEquals", parent: name, max: 64)
            try self.validate(self.candidateNameEquals, name: "candidateNameEquals", parent: name, min: 1)
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoMLJobName = "AutoMLJobName"
            case candidateNameEquals = "CandidateNameEquals"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case statusEquals = "StatusEquals"
        }
    }

    public struct ListCandidatesForAutoMLJobResponse: AWSDecodableShape {
        /// Summaries about the Candidates.
        public let candidates: [AutoMLCandidate]
        /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
        public let nextToken: String?

        public init(candidates: [AutoMLCandidate], nextToken: String? = nil) {
            self.candidates = candidates
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case candidates = "Candidates"
            case nextToken = "NextToken"
        }
    }

    public struct ListCodeRepositoriesInput: AWSEncodableShape {
        /// A filter that returns only Git repositories that were created after the specified time.
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only Git repositories that were created before the specified time.
        public let creationTimeBefore: TimeStamp?
        /// A filter that returns only Git repositories that were last modified after the specified time.
        public let lastModifiedTimeAfter: TimeStamp?
        /// A filter that returns only Git repositories that were last modified before the specified time.
        public let lastModifiedTimeBefore: TimeStamp?
        /// The maximum number of Git repositories to return in the response.
        public let maxResults: Int?
        /// A string in the Git repositories name. This filter returns only repositories whose name contains the specified string.
        public let nameContains: String?
        /// If the result of a ListCodeRepositoriesOutput request was truncated, the response includes a NextToken. To get the next set of Git repositories, use the token in the next request.
        public let nextToken: String?
        /// The field to sort results by. The default is Name.
        public let sortBy: CodeRepositorySortBy?
        /// The sort order for results. The default is Ascending.
        public let sortOrder: CodeRepositorySortOrder?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, lastModifiedTimeAfter: TimeStamp? = nil, lastModifiedTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: CodeRepositorySortBy? = nil, sortOrder: CodeRepositorySortOrder? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListCodeRepositoriesOutput: AWSDecodableShape {
        /// Gets a list of summaries of the Git repositories. Each summary specifies the following values for the repository:    Name   Amazon Resource Name (ARN)   Creation time   Last modified time   Configuration information, including the URL location of the repository and the ARN of the AWS Secrets Manager secret that contains the credentials used to access the repository.
        public let codeRepositorySummaryList: [CodeRepositorySummary]
        /// If the result of a ListCodeRepositoriesOutput request was truncated, the response includes a NextToken. To get the next set of Git repositories, use the token in the next request.
        public let nextToken: String?

        public init(codeRepositorySummaryList: [CodeRepositorySummary], nextToken: String? = nil) {
            self.codeRepositorySummaryList = codeRepositorySummaryList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case codeRepositorySummaryList = "CodeRepositorySummaryList"
            case nextToken = "NextToken"
        }
    }

    public struct ListCompilationJobsRequest: AWSEncodableShape {
        /// A filter that returns the model compilation jobs that were created after a specified time.
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns the model compilation jobs that were created before a specified time.
        public let creationTimeBefore: TimeStamp?
        /// A filter that returns the model compilation jobs that were modified after a specified time.
        public let lastModifiedTimeAfter: TimeStamp?
        /// A filter that returns the model compilation jobs that were modified before a specified time.
        public let lastModifiedTimeBefore: TimeStamp?
        /// The maximum number of model compilation jobs to return in the response.
        public let maxResults: Int?
        /// A filter that returns the model compilation jobs whose name contains a specified string.
        public let nameContains: String?
        /// If the result of the previous ListCompilationJobs request was truncated, the response includes a NextToken. To retrieve the next set of model compilation jobs, use the token in the next request.
        public let nextToken: String?
        /// The field by which to sort results. The default is CreationTime.
        public let sortBy: ListCompilationJobsSortBy?
        /// The sort order for results. The default is Ascending.
        public let sortOrder: SortOrder?
        /// A filter that retrieves model compilation jobs with a specific DescribeCompilationJobResponse$CompilationJobStatus status.
        public let statusEquals: CompilationJobStatus?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, lastModifiedTimeAfter: TimeStamp? = nil, lastModifiedTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: ListCompilationJobsSortBy? = nil, sortOrder: SortOrder? = nil, statusEquals: CompilationJobStatus? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9\\-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case statusEquals = "StatusEquals"
        }
    }

    public struct ListCompilationJobsResponse: AWSDecodableShape {
        /// An array of CompilationJobSummary objects, each describing a model compilation job.
        public let compilationJobSummaries: [CompilationJobSummary]
        /// If the response is truncated, Amazon SageMaker returns this NextToken. To retrieve the next set of model compilation jobs, use this token in the next request.
        public let nextToken: String?

        public init(compilationJobSummaries: [CompilationJobSummary], nextToken: String? = nil) {
            self.compilationJobSummaries = compilationJobSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case compilationJobSummaries = "CompilationJobSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct ListDomainsRequest: AWSEncodableShape {
        /// Returns a list up to a specified limit.
        public let maxResults: Int?
        /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListDomainsResponse: AWSDecodableShape {
        /// The list of domains.
        public let domains: [DomainDetails]?
        /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
        public let nextToken: String?

        public init(domains: [DomainDetails]? = nil, nextToken: String? = nil) {
            self.domains = domains
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case domains = "Domains"
            case nextToken = "NextToken"
        }
    }

    public struct ListEndpointConfigsInput: AWSEncodableShape {
        /// A filter that returns only endpoint configurations with a creation time greater than or equal to the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only endpoint configurations created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        /// The maximum number of training jobs to return in the response.
        public let maxResults: Int?
        /// A string in the endpoint configuration name. This filter returns only endpoint configurations whose name contains the specified string.
        public let nameContains: String?
        /// If the result of the previous ListEndpointConfig request was truncated, the response includes a NextToken. To retrieve the next set of endpoint configurations, use the token in the next request.
        public let nextToken: String?
        /// The field to sort results by. The default is CreationTime.
        public let sortBy: EndpointConfigSortKey?
        /// The sort order for results. The default is Descending.
        public let sortOrder: OrderKey?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: EndpointConfigSortKey? = nil, sortOrder: OrderKey? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListEndpointConfigsOutput: AWSDecodableShape {
        /// An array of endpoint configurations.
        public let endpointConfigs: [EndpointConfigSummary]
        ///  If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of endpoint configurations, use it in the subsequent request
        public let nextToken: String?

        public init(endpointConfigs: [EndpointConfigSummary], nextToken: String? = nil) {
            self.endpointConfigs = endpointConfigs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigs = "EndpointConfigs"
            case nextToken = "NextToken"
        }
    }

    public struct ListEndpointsInput: AWSEncodableShape {
        /// A filter that returns only endpoints with a creation time greater than or equal to the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only endpoints that were created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        ///  A filter that returns only endpoints that were modified after the specified timestamp.
        public let lastModifiedTimeAfter: TimeStamp?
        ///  A filter that returns only endpoints that were modified before the specified timestamp.
        public let lastModifiedTimeBefore: TimeStamp?
        /// The maximum number of endpoints to return in the response.
        public let maxResults: Int?
        /// A string in endpoint names. This filter returns only endpoints whose name contains the specified string.
        public let nameContains: String?
        /// If the result of a ListEndpoints request was truncated, the response includes a NextToken. To retrieve the next set of endpoints, use the token in the next request.
        public let nextToken: String?
        /// Sorts the list of results. The default is CreationTime.
        public let sortBy: EndpointSortKey?
        /// The sort order for results. The default is Descending.
        public let sortOrder: OrderKey?
        ///  A filter that returns only endpoints with the specified status.
        public let statusEquals: EndpointStatus?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, lastModifiedTimeAfter: TimeStamp? = nil, lastModifiedTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: EndpointSortKey? = nil, sortOrder: OrderKey? = nil, statusEquals: EndpointStatus? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case statusEquals = "StatusEquals"
        }
    }

    public struct ListEndpointsOutput: AWSDecodableShape {
        ///  An array or endpoint objects.
        public let endpoints: [EndpointSummary]
        ///  If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of training jobs, use it in the subsequent request.
        public let nextToken: String?

        public init(endpoints: [EndpointSummary], nextToken: String? = nil) {
            self.endpoints = endpoints
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case endpoints = "Endpoints"
            case nextToken = "NextToken"
        }
    }

    public struct ListExperimentsRequest: AWSEncodableShape {
        /// A filter that returns only experiments created after the specified time.
        public let createdAfter: TimeStamp?
        /// A filter that returns only experiments created before the specified time.
        public let createdBefore: TimeStamp?
        /// The maximum number of experiments to return in the response. The default value is 10.
        public let maxResults: Int?
        /// If the previous call to ListExperiments didn't return the full set of experiments, the call returns a token for getting the next set of experiments.
        public let nextToken: String?
        /// The property used to sort results. The default value is CreationTime.
        public let sortBy: SortExperimentsBy?
        /// The sort order. The default value is Descending.
        public let sortOrder: SortOrder?

        public init(createdAfter: TimeStamp? = nil, createdBefore: TimeStamp? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortBy: SortExperimentsBy? = nil, sortOrder: SortOrder? = nil) {
            self.createdAfter = createdAfter
            self.createdBefore = createdBefore
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case createdAfter = "CreatedAfter"
            case createdBefore = "CreatedBefore"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListExperimentsResponse: AWSDecodableShape {
        /// A list of the summaries of your experiments.
        public let experimentSummaries: [ExperimentSummary]?
        /// A token for getting the next set of experiments, if there are any.
        public let nextToken: String?

        public init(experimentSummaries: [ExperimentSummary]? = nil, nextToken: String? = nil) {
            self.experimentSummaries = experimentSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case experimentSummaries = "ExperimentSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct ListFlowDefinitionsRequest: AWSEncodableShape {
        /// A filter that returns only flow definitions with a creation time greater than or equal to the specified timestamp.
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only flow definitions that were created before the specified timestamp.
        public let creationTimeBefore: TimeStamp?
        /// The total number of items to return. If the total number of available items is more than the value specified in MaxResults, then a NextToken will be provided in the output that you can use to resume pagination.
        public let maxResults: Int?
        /// A token to resume pagination.
        public let nextToken: String?
        /// An optional value that specifies whether you want the results sorted in Ascending or Descending order.
        public let sortOrder: SortOrder?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortOrder: SortOrder? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListFlowDefinitionsResponse: AWSDecodableShape {
        /// An array of objects describing the flow definitions.
        public let flowDefinitionSummaries: [FlowDefinitionSummary]
        /// A token to resume pagination.
        public let nextToken: String?

        public init(flowDefinitionSummaries: [FlowDefinitionSummary], nextToken: String? = nil) {
            self.flowDefinitionSummaries = flowDefinitionSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case flowDefinitionSummaries = "FlowDefinitionSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct ListHumanTaskUisRequest: AWSEncodableShape {
        /// A filter that returns only human task user interfaces with a creation time greater than or equal to the specified timestamp.
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only human task user interfaces that were created before the specified timestamp.
        public let creationTimeBefore: TimeStamp?
        /// The total number of items to return. If the total number of available items is more than the value specified in MaxResults, then a NextToken will be provided in the output that you can use to resume pagination.
        public let maxResults: Int?
        /// A token to resume pagination.
        public let nextToken: String?
        /// An optional value that specifies whether you want the results sorted in Ascending or Descending order.
        public let sortOrder: SortOrder?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortOrder: SortOrder? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListHumanTaskUisResponse: AWSDecodableShape {
        /// An array of objects describing the human task user interfaces.
        public let humanTaskUiSummaries: [HumanTaskUiSummary]
        /// A token to resume pagination.
        public let nextToken: String?

        public init(humanTaskUiSummaries: [HumanTaskUiSummary], nextToken: String? = nil) {
            self.humanTaskUiSummaries = humanTaskUiSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case humanTaskUiSummaries = "HumanTaskUiSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct ListHyperParameterTuningJobsRequest: AWSEncodableShape {
        /// A filter that returns only tuning jobs that were created after the specified time.
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only tuning jobs that were created before the specified time.
        public let creationTimeBefore: TimeStamp?
        /// A filter that returns only tuning jobs that were modified after the specified time.
        public let lastModifiedTimeAfter: TimeStamp?
        /// A filter that returns only tuning jobs that were modified before the specified time.
        public let lastModifiedTimeBefore: TimeStamp?
        /// The maximum number of tuning jobs to return. The default value is 10.
        public let maxResults: Int?
        /// A string in the tuning job name. This filter returns only tuning jobs whose name contains the specified string.
        public let nameContains: String?
        /// If the result of the previous ListHyperParameterTuningJobs request was truncated, the response includes a NextToken. To retrieve the next set of tuning jobs, use the token in the next request.
        public let nextToken: String?
        /// The field to sort results by. The default is Name.
        public let sortBy: HyperParameterTuningJobSortByOptions?
        /// The sort order for results. The default is Ascending.
        public let sortOrder: SortOrder?
        /// A filter that returns only tuning jobs with the specified status.
        public let statusEquals: HyperParameterTuningJobStatus?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, lastModifiedTimeAfter: TimeStamp? = nil, lastModifiedTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: HyperParameterTuningJobSortByOptions? = nil, sortOrder: SortOrder? = nil, statusEquals: HyperParameterTuningJobStatus? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9\\-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case statusEquals = "StatusEquals"
        }
    }

    public struct ListHyperParameterTuningJobsResponse: AWSDecodableShape {
        /// A list of HyperParameterTuningJobSummary objects that describe the tuning jobs that the ListHyperParameterTuningJobs request returned.
        public let hyperParameterTuningJobSummaries: [HyperParameterTuningJobSummary]
        /// If the result of this ListHyperParameterTuningJobs request was truncated, the response includes a NextToken. To retrieve the next set of tuning jobs, use the token in the next request.
        public let nextToken: String?

        public init(hyperParameterTuningJobSummaries: [HyperParameterTuningJobSummary], nextToken: String? = nil) {
            self.hyperParameterTuningJobSummaries = hyperParameterTuningJobSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case hyperParameterTuningJobSummaries = "HyperParameterTuningJobSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct ListLabelingJobsForWorkteamRequest: AWSEncodableShape {
        /// A filter that returns only labeling jobs created after the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only labeling jobs created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        /// A filter the limits jobs to only the ones whose job reference code contains the specified string.
        public let jobReferenceCodeContains: String?
        /// The maximum number of labeling jobs to return in each page of the response.
        public let maxResults: Int?
        /// If the result of the previous ListLabelingJobsForWorkteam request was truncated, the response includes a NextToken. To retrieve the next set of labeling jobs, use the token in the next request.
        public let nextToken: String?
        /// The field to sort results by. The default is CreationTime.
        public let sortBy: ListLabelingJobsForWorkteamSortByOptions?
        /// The sort order for results. The default is Ascending.
        public let sortOrder: SortOrder?
        /// The Amazon Resource Name (ARN) of the work team for which you want to see labeling jobs for.
        public let workteamArn: String

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, jobReferenceCodeContains: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortBy: ListLabelingJobsForWorkteamSortByOptions? = nil, sortOrder: SortOrder? = nil, workteamArn: String) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.jobReferenceCodeContains = jobReferenceCodeContains
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.workteamArn = workteamArn
        }

        public func validate(name: String) throws {
            try self.validate(self.jobReferenceCodeContains, name: "jobReferenceCodeContains", parent: name, max: 255)
            try self.validate(self.jobReferenceCodeContains, name: "jobReferenceCodeContains", parent: name, min: 1)
            try self.validate(self.jobReferenceCodeContains, name: "jobReferenceCodeContains", parent: name, pattern: ".+")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
            try self.validate(self.workteamArn, name: "workteamArn", parent: name, max: 256)
            try self.validate(self.workteamArn, name: "workteamArn", parent: name, pattern: "arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:workteam/.*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case jobReferenceCodeContains = "JobReferenceCodeContains"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case workteamArn = "WorkteamArn"
        }
    }

    public struct ListLabelingJobsForWorkteamResponse: AWSDecodableShape {
        /// An array of LabelingJobSummary objects, each describing a labeling job.
        public let labelingJobSummaryList: [LabelingJobForWorkteamSummary]
        /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of labeling jobs, use it in the subsequent request.
        public let nextToken: String?

        public init(labelingJobSummaryList: [LabelingJobForWorkteamSummary], nextToken: String? = nil) {
            self.labelingJobSummaryList = labelingJobSummaryList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case labelingJobSummaryList = "LabelingJobSummaryList"
            case nextToken = "NextToken"
        }
    }

    public struct ListLabelingJobsRequest: AWSEncodableShape {
        /// A filter that returns only labeling jobs created after the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only labeling jobs created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        /// A filter that returns only labeling jobs modified after the specified time (timestamp).
        public let lastModifiedTimeAfter: TimeStamp?
        /// A filter that returns only labeling jobs modified before the specified time (timestamp).
        public let lastModifiedTimeBefore: TimeStamp?
        /// The maximum number of labeling jobs to return in each page of the response.
        public let maxResults: Int?
        /// A string in the labeling job name. This filter returns only labeling jobs whose name contains the specified string.
        public let nameContains: String?
        /// If the result of the previous ListLabelingJobs request was truncated, the response includes a NextToken. To retrieve the next set of labeling jobs, use the token in the next request.
        public let nextToken: String?
        /// The field to sort results by. The default is CreationTime.
        public let sortBy: SortBy?
        /// The sort order for results. The default is Ascending.
        public let sortOrder: SortOrder?
        /// A filter that retrieves only labeling jobs with a specific status.
        public let statusEquals: LabelingJobStatus?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, lastModifiedTimeAfter: TimeStamp? = nil, lastModifiedTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: SortBy? = nil, sortOrder: SortOrder? = nil, statusEquals: LabelingJobStatus? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9\\-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case statusEquals = "StatusEquals"
        }
    }

    public struct ListLabelingJobsResponse: AWSDecodableShape {
        /// An array of LabelingJobSummary objects, each describing a labeling job.
        public let labelingJobSummaryList: [LabelingJobSummary]?
        /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of labeling jobs, use it in the subsequent request.
        public let nextToken: String?

        public init(labelingJobSummaryList: [LabelingJobSummary]? = nil, nextToken: String? = nil) {
            self.labelingJobSummaryList = labelingJobSummaryList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case labelingJobSummaryList = "LabelingJobSummaryList"
            case nextToken = "NextToken"
        }
    }

    public struct ListModelPackagesInput: AWSEncodableShape {
        /// A filter that returns only model packages created after the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only model packages created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        /// The maximum number of model packages to return in the response.
        public let maxResults: Int?
        /// A string in the model package name. This filter returns only model packages whose name contains the specified string.
        public let nameContains: String?
        /// If the response to a previous ListModelPackages request was truncated, the response includes a NextToken. To retrieve the next set of model packages, use the token in the next request.
        public let nextToken: String?
        /// The parameter by which to sort the results. The default is CreationTime.
        public let sortBy: ModelPackageSortBy?
        /// The sort order for the results. The default is Ascending.
        public let sortOrder: SortOrder?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: ModelPackageSortBy? = nil, sortOrder: SortOrder? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9\\-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListModelPackagesOutput: AWSDecodableShape {
        /// An array of ModelPackageSummary objects, each of which lists a model package.
        public let modelPackageSummaryList: [ModelPackageSummary]
        /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of model packages, use it in the subsequent request.
        public let nextToken: String?

        public init(modelPackageSummaryList: [ModelPackageSummary], nextToken: String? = nil) {
            self.modelPackageSummaryList = modelPackageSummaryList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case modelPackageSummaryList = "ModelPackageSummaryList"
            case nextToken = "NextToken"
        }
    }

    public struct ListModelsInput: AWSEncodableShape {
        /// A filter that returns only models with a creation time greater than or equal to the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only models created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        /// The maximum number of models to return in the response.
        public let maxResults: Int?
        /// A string in the training job name. This filter returns only models in the training job whose name contains the specified string.
        public let nameContains: String?
        /// If the response to a previous ListModels request was truncated, the response includes a NextToken. To retrieve the next set of models, use the token in the next request.
        public let nextToken: String?
        /// Sorts the list of results. The default is CreationTime.
        public let sortBy: ModelSortKey?
        /// The sort order for results. The default is Descending.
        public let sortOrder: OrderKey?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: ModelSortKey? = nil, sortOrder: OrderKey? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListModelsOutput: AWSDecodableShape {
        /// An array of ModelSummary objects, each of which lists a model.
        public let models: [ModelSummary]
        ///  If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of models, use it in the subsequent request.
        public let nextToken: String?

        public init(models: [ModelSummary], nextToken: String? = nil) {
            self.models = models
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case models = "Models"
            case nextToken = "NextToken"
        }
    }

    public struct ListMonitoringExecutionsRequest: AWSEncodableShape {
        /// A filter that returns only jobs created after a specified time.
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only jobs created before a specified time.
        public let creationTimeBefore: TimeStamp?
        /// Name of a specific endpoint to fetch jobs for.
        public let endpointName: String?
        /// A filter that returns only jobs modified before a specified time.
        public let lastModifiedTimeAfter: TimeStamp?
        /// A filter that returns only jobs modified after a specified time.
        public let lastModifiedTimeBefore: TimeStamp?
        /// The maximum number of jobs to return in the response. The default value is 10.
        public let maxResults: Int?
        /// Name of a specific schedule to fetch jobs for.
        public let monitoringScheduleName: String?
        /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
        public let nextToken: String?
        /// Filter for jobs scheduled after a specified time.
        public let scheduledTimeAfter: TimeStamp?
        /// Filter for jobs scheduled before a specified time.
        public let scheduledTimeBefore: TimeStamp?
        /// Whether to sort results by Status, CreationTime, ScheduledTime field. The default is CreationTime.
        public let sortBy: MonitoringExecutionSortKey?
        /// Whether to sort the results in Ascending or Descending order. The default is Descending.
        public let sortOrder: SortOrder?
        /// A filter that retrieves only jobs with a specific status.
        public let statusEquals: ExecutionStatus?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, endpointName: String? = nil, lastModifiedTimeAfter: TimeStamp? = nil, lastModifiedTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, monitoringScheduleName: String? = nil, nextToken: String? = nil, scheduledTimeAfter: TimeStamp? = nil, scheduledTimeBefore: TimeStamp? = nil, sortBy: MonitoringExecutionSortKey? = nil, sortOrder: SortOrder? = nil, statusEquals: ExecutionStatus? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.endpointName = endpointName
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.maxResults = maxResults
            self.monitoringScheduleName = monitoringScheduleName
            self.nextToken = nextToken
            self.scheduledTimeAfter = scheduledTimeAfter
            self.scheduledTimeBefore = scheduledTimeBefore
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.endpointName, name: "endpointName", parent: name, max: 63)
            try self.validate(self.endpointName, name: "endpointName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, max: 63)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, min: 1)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case endpointName = "EndpointName"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case maxResults = "MaxResults"
            case monitoringScheduleName = "MonitoringScheduleName"
            case nextToken = "NextToken"
            case scheduledTimeAfter = "ScheduledTimeAfter"
            case scheduledTimeBefore = "ScheduledTimeBefore"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case statusEquals = "StatusEquals"
        }
    }

    public struct ListMonitoringExecutionsResponse: AWSDecodableShape {
        /// A JSON array in which each element is a summary for a monitoring execution.
        public let monitoringExecutionSummaries: [MonitoringExecutionSummary]
        /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs, use it in the subsequent reques
        public let nextToken: String?

        public init(monitoringExecutionSummaries: [MonitoringExecutionSummary], nextToken: String? = nil) {
            self.monitoringExecutionSummaries = monitoringExecutionSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case monitoringExecutionSummaries = "MonitoringExecutionSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct ListMonitoringSchedulesRequest: AWSEncodableShape {
        /// A filter that returns only monitoring schedules created after a specified time.
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only monitoring schedules created before a specified time.
        public let creationTimeBefore: TimeStamp?
        /// Name of a specific endpoint to fetch schedules for.
        public let endpointName: String?
        /// A filter that returns only monitoring schedules modified after a specified time.
        public let lastModifiedTimeAfter: TimeStamp?
        /// A filter that returns only monitoring schedules modified before a specified time.
        public let lastModifiedTimeBefore: TimeStamp?
        /// The maximum number of jobs to return in the response. The default value is 10.
        public let maxResults: Int?
        /// Filter for monitoring schedules whose name contains a specified string.
        public let nameContains: String?
        /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
        public let nextToken: String?
        /// Whether to sort results by Status, CreationTime, ScheduledTime field. The default is CreationTime.
        public let sortBy: MonitoringScheduleSortKey?
        /// Whether to sort the results in Ascending or Descending order. The default is Descending.
        public let sortOrder: SortOrder?
        /// A filter that returns only monitoring schedules modified before a specified time.
        public let statusEquals: ScheduleStatus?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, endpointName: String? = nil, lastModifiedTimeAfter: TimeStamp? = nil, lastModifiedTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: MonitoringScheduleSortKey? = nil, sortOrder: SortOrder? = nil, statusEquals: ScheduleStatus? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.endpointName = endpointName
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.endpointName, name: "endpointName", parent: name, max: 63)
            try self.validate(self.endpointName, name: "endpointName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9\\-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case endpointName = "EndpointName"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case statusEquals = "StatusEquals"
        }
    }

    public struct ListMonitoringSchedulesResponse: AWSDecodableShape {
        /// A JSON array in which each element is a summary for a monitoring schedule.
        public let monitoringScheduleSummaries: [MonitoringScheduleSummary]
        /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs, use it in the subsequent reques
        public let nextToken: String?

        public init(monitoringScheduleSummaries: [MonitoringScheduleSummary], nextToken: String? = nil) {
            self.monitoringScheduleSummaries = monitoringScheduleSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case monitoringScheduleSummaries = "MonitoringScheduleSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct ListNotebookInstanceLifecycleConfigsInput: AWSEncodableShape {
        /// A filter that returns only lifecycle configurations that were created after the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only lifecycle configurations that were created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        /// A filter that returns only lifecycle configurations that were modified after the specified time (timestamp).
        public let lastModifiedTimeAfter: TimeStamp?
        /// A filter that returns only lifecycle configurations that were modified before the specified time (timestamp).
        public let lastModifiedTimeBefore: TimeStamp?
        /// The maximum number of lifecycle configurations to return in the response.
        public let maxResults: Int?
        /// A string in the lifecycle configuration name. This filter returns only lifecycle configurations whose name contains the specified string.
        public let nameContains: String?
        /// If the result of a ListNotebookInstanceLifecycleConfigs request was truncated, the response includes a NextToken. To get the next set of lifecycle configurations, use the token in the next request.
        public let nextToken: String?
        /// Sorts the list of results. The default is CreationTime.
        public let sortBy: NotebookInstanceLifecycleConfigSortKey?
        /// The sort order for results.
        public let sortOrder: NotebookInstanceLifecycleConfigSortOrder?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, lastModifiedTimeAfter: TimeStamp? = nil, lastModifiedTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: NotebookInstanceLifecycleConfigSortKey? = nil, sortOrder: NotebookInstanceLifecycleConfigSortOrder? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListNotebookInstanceLifecycleConfigsOutput: AWSDecodableShape {
        /// If the response is truncated, Amazon SageMaker returns this token. To get the next set of lifecycle configurations, use it in the next request.
        public let nextToken: String?
        /// An array of NotebookInstanceLifecycleConfiguration objects, each listing a lifecycle configuration.
        public let notebookInstanceLifecycleConfigs: [NotebookInstanceLifecycleConfigSummary]?

        public init(nextToken: String? = nil, notebookInstanceLifecycleConfigs: [NotebookInstanceLifecycleConfigSummary]? = nil) {
            self.nextToken = nextToken
            self.notebookInstanceLifecycleConfigs = notebookInstanceLifecycleConfigs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case notebookInstanceLifecycleConfigs = "NotebookInstanceLifecycleConfigs"
        }
    }

    public struct ListNotebookInstancesInput: AWSEncodableShape {
        /// A filter that returns only notebook instances with associated with the specified git repository.
        public let additionalCodeRepositoryEquals: String?
        /// A filter that returns only notebook instances that were created after the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only notebook instances that were created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        /// A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.
        public let defaultCodeRepositoryContains: String?
        /// A filter that returns only notebook instances that were modified after the specified time (timestamp).
        public let lastModifiedTimeAfter: TimeStamp?
        /// A filter that returns only notebook instances that were modified before the specified time (timestamp).
        public let lastModifiedTimeBefore: TimeStamp?
        /// The maximum number of notebook instances to return.
        public let maxResults: Int?
        /// A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.
        public let nameContains: String?
        ///  If the previous call to the ListNotebookInstances is truncated, the response includes a NextToken. You can use this token in your subsequent ListNotebookInstances request to fetch the next set of notebook instances.   You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request.
        public let nextToken: String?
        /// A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.
        public let notebookInstanceLifecycleConfigNameContains: String?
        /// The field to sort results by. The default is Name.
        public let sortBy: NotebookInstanceSortKey?
        /// The sort order for results.
        public let sortOrder: NotebookInstanceSortOrder?
        /// A filter that returns only notebook instances with the specified status.
        public let statusEquals: NotebookInstanceStatus?

        public init(additionalCodeRepositoryEquals: String? = nil, creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, defaultCodeRepositoryContains: String? = nil, lastModifiedTimeAfter: TimeStamp? = nil, lastModifiedTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, notebookInstanceLifecycleConfigNameContains: String? = nil, sortBy: NotebookInstanceSortKey? = nil, sortOrder: NotebookInstanceSortOrder? = nil, statusEquals: NotebookInstanceStatus? = nil) {
            self.additionalCodeRepositoryEquals = additionalCodeRepositoryEquals
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.defaultCodeRepositoryContains = defaultCodeRepositoryContains
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.notebookInstanceLifecycleConfigNameContains = notebookInstanceLifecycleConfigNameContains
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.additionalCodeRepositoryEquals, name: "additionalCodeRepositoryEquals", parent: name, max: 1024)
            try self.validate(self.additionalCodeRepositoryEquals, name: "additionalCodeRepositoryEquals", parent: name, min: 1)
            try self.validate(self.additionalCodeRepositoryEquals, name: "additionalCodeRepositoryEquals", parent: name, pattern: "^https://([^/]+)/?(.*)$|^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.defaultCodeRepositoryContains, name: "defaultCodeRepositoryContains", parent: name, max: 1024)
            try self.validate(self.defaultCodeRepositoryContains, name: "defaultCodeRepositoryContains", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
            try self.validate(self.notebookInstanceLifecycleConfigNameContains, name: "notebookInstanceLifecycleConfigNameContains", parent: name, max: 63)
            try self.validate(self.notebookInstanceLifecycleConfigNameContains, name: "notebookInstanceLifecycleConfigNameContains", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case additionalCodeRepositoryEquals = "AdditionalCodeRepositoryEquals"
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case defaultCodeRepositoryContains = "DefaultCodeRepositoryContains"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case notebookInstanceLifecycleConfigNameContains = "NotebookInstanceLifecycleConfigNameContains"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case statusEquals = "StatusEquals"
        }
    }

    public struct ListNotebookInstancesOutput: AWSDecodableShape {
        /// If the response to the previous ListNotebookInstances request was truncated, Amazon SageMaker returns this token. To retrieve the next set of notebook instances, use the token in the next request.
        public let nextToken: String?
        /// An array of NotebookInstanceSummary objects, one for each notebook instance.
        public let notebookInstances: [NotebookInstanceSummary]?

        public init(nextToken: String? = nil, notebookInstances: [NotebookInstanceSummary]? = nil) {
            self.nextToken = nextToken
            self.notebookInstances = notebookInstances
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case notebookInstances = "NotebookInstances"
        }
    }

    public struct ListProcessingJobsRequest: AWSEncodableShape {
        /// A filter that returns only processing jobs created after the specified time.
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only processing jobs created after the specified time.
        public let creationTimeBefore: TimeStamp?
        /// A filter that returns only processing jobs modified after the specified time.
        public let lastModifiedTimeAfter: TimeStamp?
        /// A filter that returns only processing jobs modified before the specified time.
        public let lastModifiedTimeBefore: TimeStamp?
        /// The maximum number of processing jobs to return in the response.
        public let maxResults: Int?
        /// A string in the processing job name. This filter returns only processing jobs whose name contains the specified string.
        public let nameContains: String?
        /// If the result of the previous ListProcessingJobs request was truncated, the response includes a NextToken. To retrieve the next set of processing jobs, use the token in the next request.
        public let nextToken: String?
        /// The field to sort results by. The default is CreationTime.
        public let sortBy: SortBy?
        /// The sort order for results. The default is Ascending.
        public let sortOrder: SortOrder?
        /// A filter that retrieves only processing jobs with a specific status.
        public let statusEquals: ProcessingJobStatus?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, lastModifiedTimeAfter: TimeStamp? = nil, lastModifiedTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: SortBy? = nil, sortOrder: SortOrder? = nil, statusEquals: ProcessingJobStatus? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case statusEquals = "StatusEquals"
        }
    }

    public struct ListProcessingJobsResponse: AWSDecodableShape {
        /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of processing jobs, use it in the subsequent request.
        public let nextToken: String?
        /// An array of ProcessingJobSummary objects, each listing a processing job.
        public let processingJobSummaries: [ProcessingJobSummary]

        public init(nextToken: String? = nil, processingJobSummaries: [ProcessingJobSummary]) {
            self.nextToken = nextToken
            self.processingJobSummaries = processingJobSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case processingJobSummaries = "ProcessingJobSummaries"
        }
    }

    public struct ListSubscribedWorkteamsRequest: AWSEncodableShape {
        /// The maximum number of work teams to return in each page of the response.
        public let maxResults: Int?
        /// A string in the work team name. This filter returns only work teams whose name contains the specified string.
        public let nameContains: String?
        /// If the result of the previous ListSubscribedWorkteams request was truncated, the response includes a NextToken. To retrieve the next set of labeling jobs, use the token in the next request.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
        }
    }

    public struct ListSubscribedWorkteamsResponse: AWSDecodableShape {
        /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of work teams, use it in the subsequent request.
        public let nextToken: String?
        /// An array of Workteam objects, each describing a work team.
        public let subscribedWorkteams: [SubscribedWorkteam]

        public init(nextToken: String? = nil, subscribedWorkteams: [SubscribedWorkteam]) {
            self.nextToken = nextToken
            self.subscribedWorkteams = subscribedWorkteams
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case subscribedWorkteams = "SubscribedWorkteams"
        }
    }

    public struct ListTagsInput: AWSEncodableShape {
        /// Maximum number of tags to return.
        public let maxResults: Int?
        ///  If the response to the previous ListTags request is truncated, Amazon SageMaker returns this token. To retrieve the next set of tags, use it in the subsequent request.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) of the resource whose tags you want to retrieve.
        public let resourceArn: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, resourceArn: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 50)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 256)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "arn:.*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListTagsOutput: AWSDecodableShape {
        ///  If response is truncated, Amazon SageMaker includes a token in the response. You can use this token in your subsequent request to fetch next set of tokens.
        public let nextToken: String?
        /// An array of Tag objects, each with a tag key and a value.
        public let tags: [Tag]?

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tags = "Tags"
        }
    }

    public struct ListTrainingJobsForHyperParameterTuningJobRequest: AWSEncodableShape {
        /// The name of the tuning job whose training jobs you want to list.
        public let hyperParameterTuningJobName: String
        /// The maximum number of training jobs to return. The default value is 10.
        public let maxResults: Int?
        /// If the result of the previous ListTrainingJobsForHyperParameterTuningJob request was truncated, the response includes a NextToken. To retrieve the next set of training jobs, use the token in the next request.
        public let nextToken: String?
        /// The field to sort results by. The default is Name. If the value of this field is FinalObjectiveMetricValue, any training jobs that did not return an objective metric are not listed.
        public let sortBy: TrainingJobSortByOptions?
        /// The sort order for results. The default is Ascending.
        public let sortOrder: SortOrder?
        /// A filter that returns only training jobs with the specified status.
        public let statusEquals: TrainingJobStatus?

        public init(hyperParameterTuningJobName: String, maxResults: Int? = nil, nextToken: String? = nil, sortBy: TrainingJobSortByOptions? = nil, sortOrder: SortOrder? = nil, statusEquals: TrainingJobStatus? = nil) {
            self.hyperParameterTuningJobName = hyperParameterTuningJobName
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, max: 32)
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, min: 1)
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case hyperParameterTuningJobName = "HyperParameterTuningJobName"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case statusEquals = "StatusEquals"
        }
    }

    public struct ListTrainingJobsForHyperParameterTuningJobResponse: AWSDecodableShape {
        /// If the result of this ListTrainingJobsForHyperParameterTuningJob request was truncated, the response includes a NextToken. To retrieve the next set of training jobs, use the token in the next request.
        public let nextToken: String?
        /// A list of TrainingJobSummary objects that describe the training jobs that the ListTrainingJobsForHyperParameterTuningJob request returned.
        public let trainingJobSummaries: [HyperParameterTrainingJobSummary]

        public init(nextToken: String? = nil, trainingJobSummaries: [HyperParameterTrainingJobSummary]) {
            self.nextToken = nextToken
            self.trainingJobSummaries = trainingJobSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case trainingJobSummaries = "TrainingJobSummaries"
        }
    }

    public struct ListTrainingJobsRequest: AWSEncodableShape {
        /// A filter that returns only training jobs created after the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only training jobs created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        /// A filter that returns only training jobs modified after the specified time (timestamp).
        public let lastModifiedTimeAfter: TimeStamp?
        /// A filter that returns only training jobs modified before the specified time (timestamp).
        public let lastModifiedTimeBefore: TimeStamp?
        /// The maximum number of training jobs to return in the response.
        public let maxResults: Int?
        /// A string in the training job name. This filter returns only training jobs whose name contains the specified string.
        public let nameContains: String?
        /// If the result of the previous ListTrainingJobs request was truncated, the response includes a NextToken. To retrieve the next set of training jobs, use the token in the next request.
        public let nextToken: String?
        /// The field to sort results by. The default is CreationTime.
        public let sortBy: SortBy?
        /// The sort order for results. The default is Ascending.
        public let sortOrder: SortOrder?
        /// A filter that retrieves only training jobs with a specific status.
        public let statusEquals: TrainingJobStatus?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, lastModifiedTimeAfter: TimeStamp? = nil, lastModifiedTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: SortBy? = nil, sortOrder: SortOrder? = nil, statusEquals: TrainingJobStatus? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9\\-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case statusEquals = "StatusEquals"
        }
    }

    public struct ListTrainingJobsResponse: AWSDecodableShape {
        /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of training jobs, use it in the subsequent request.
        public let nextToken: String?
        /// An array of TrainingJobSummary objects, each listing a training job.
        public let trainingJobSummaries: [TrainingJobSummary]

        public init(nextToken: String? = nil, trainingJobSummaries: [TrainingJobSummary]) {
            self.nextToken = nextToken
            self.trainingJobSummaries = trainingJobSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case trainingJobSummaries = "TrainingJobSummaries"
        }
    }

    public struct ListTransformJobsRequest: AWSEncodableShape {
        /// A filter that returns only transform jobs created after the specified time.
        public let creationTimeAfter: TimeStamp?
        /// A filter that returns only transform jobs created before the specified time.
        public let creationTimeBefore: TimeStamp?
        /// A filter that returns only transform jobs modified after the specified time.
        public let lastModifiedTimeAfter: TimeStamp?
        /// A filter that returns only transform jobs modified before the specified time.
        public let lastModifiedTimeBefore: TimeStamp?
        /// The maximum number of transform jobs to return in the response. The default value is 10.
        public let maxResults: Int?
        /// A string in the transform job name. This filter returns only transform jobs whose name contains the specified string.
        public let nameContains: String?
        /// If the result of the previous ListTransformJobs request was truncated, the response includes a NextToken. To retrieve the next set of transform jobs, use the token in the next request.
        public let nextToken: String?
        /// The field to sort results by. The default is CreationTime.
        public let sortBy: SortBy?
        /// The sort order for results. The default is Descending.
        public let sortOrder: SortOrder?
        /// A filter that retrieves only transform jobs with a specific status.
        public let statusEquals: TransformJobStatus?

        public init(creationTimeAfter: TimeStamp? = nil, creationTimeBefore: TimeStamp? = nil, lastModifiedTimeAfter: TimeStamp? = nil, lastModifiedTimeBefore: TimeStamp? = nil, maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: SortBy? = nil, sortOrder: SortOrder? = nil, statusEquals: TransformJobStatus? = nil) {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "[a-zA-Z0-9\\-]+")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimeAfter = "CreationTimeAfter"
            case creationTimeBefore = "CreationTimeBefore"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case statusEquals = "StatusEquals"
        }
    }

    public struct ListTransformJobsResponse: AWSDecodableShape {
        /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of transform jobs, use it in the next request.
        public let nextToken: String?
        /// An array of TransformJobSummary objects.
        public let transformJobSummaries: [TransformJobSummary]

        public init(nextToken: String? = nil, transformJobSummaries: [TransformJobSummary]) {
            self.nextToken = nextToken
            self.transformJobSummaries = transformJobSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case transformJobSummaries = "TransformJobSummaries"
        }
    }

    public struct ListTrialComponentsRequest: AWSEncodableShape {
        /// A filter that returns only components created after the specified time.
        public let createdAfter: TimeStamp?
        /// A filter that returns only components created before the specified time.
        public let createdBefore: TimeStamp?
        /// A filter that returns only components that are part of the specified experiment. If you specify ExperimentName, you can't filter by SourceArn or TrialName.
        public let experimentName: String?
        /// The maximum number of components to return in the response. The default value is 10.
        public let maxResults: Int?
        /// If the previous call to ListTrialComponents didn't return the full set of components, the call returns a token for getting the next set of components.
        public let nextToken: String?
        /// The property used to sort results. The default value is CreationTime.
        public let sortBy: SortTrialComponentsBy?
        /// The sort order. The default value is Descending.
        public let sortOrder: SortOrder?
        /// A filter that returns only components that have the specified source Amazon Resource Name (ARN). If you specify SourceArn, you can't filter by ExperimentName or TrialName.
        public let sourceArn: String?
        /// A filter that returns only components that are part of the specified trial. If you specify TrialName, you can't filter by ExperimentName or SourceArn.
        public let trialName: String?

        public init(createdAfter: TimeStamp? = nil, createdBefore: TimeStamp? = nil, experimentName: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortBy: SortTrialComponentsBy? = nil, sortOrder: SortOrder? = nil, sourceArn: String? = nil, trialName: String? = nil) {
            self.createdAfter = createdAfter
            self.createdBefore = createdBefore
            self.experimentName = experimentName
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.sourceArn = sourceArn
            self.trialName = trialName
        }

        public func validate(name: String) throws {
            try self.validate(self.experimentName, name: "experimentName", parent: name, max: 82)
            try self.validate(self.experimentName, name: "experimentName", parent: name, min: 1)
            try self.validate(self.experimentName, name: "experimentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
            try self.validate(self.sourceArn, name: "sourceArn", parent: name, max: 256)
            try self.validate(self.trialName, name: "trialName", parent: name, max: 82)
            try self.validate(self.trialName, name: "trialName", parent: name, min: 1)
            try self.validate(self.trialName, name: "trialName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case createdAfter = "CreatedAfter"
            case createdBefore = "CreatedBefore"
            case experimentName = "ExperimentName"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case sourceArn = "SourceArn"
            case trialName = "TrialName"
        }
    }

    public struct ListTrialComponentsResponse: AWSDecodableShape {
        /// A token for getting the next set of components, if there are any.
        public let nextToken: String?
        /// A list of the summaries of your trial components.
        public let trialComponentSummaries: [TrialComponentSummary]?

        public init(nextToken: String? = nil, trialComponentSummaries: [TrialComponentSummary]? = nil) {
            self.nextToken = nextToken
            self.trialComponentSummaries = trialComponentSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case trialComponentSummaries = "TrialComponentSummaries"
        }
    }

    public struct ListTrialsRequest: AWSEncodableShape {
        /// A filter that returns only trials created after the specified time.
        public let createdAfter: TimeStamp?
        /// A filter that returns only trials created before the specified time.
        public let createdBefore: TimeStamp?
        /// A filter that returns only trials that are part of the specified experiment.
        public let experimentName: String?
        /// The maximum number of trials to return in the response. The default value is 10.
        public let maxResults: Int?
        /// If the previous call to ListTrials didn't return the full set of trials, the call returns a token for getting the next set of trials.
        public let nextToken: String?
        /// The property used to sort results. The default value is CreationTime.
        public let sortBy: SortTrialsBy?
        /// The sort order. The default value is Descending.
        public let sortOrder: SortOrder?
        /// A filter that returns only trials that are associated with the specified trial component.
        public let trialComponentName: String?

        public init(createdAfter: TimeStamp? = nil, createdBefore: TimeStamp? = nil, experimentName: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortBy: SortTrialsBy? = nil, sortOrder: SortOrder? = nil, trialComponentName: String? = nil) {
            self.createdAfter = createdAfter
            self.createdBefore = createdBefore
            self.experimentName = experimentName
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.trialComponentName = trialComponentName
        }

        public func validate(name: String) throws {
            try self.validate(self.experimentName, name: "experimentName", parent: name, max: 82)
            try self.validate(self.experimentName, name: "experimentName", parent: name, min: 1)
            try self.validate(self.experimentName, name: "experimentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, max: 82)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, min: 1)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case createdAfter = "CreatedAfter"
            case createdBefore = "CreatedBefore"
            case experimentName = "ExperimentName"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case trialComponentName = "TrialComponentName"
        }
    }

    public struct ListTrialsResponse: AWSDecodableShape {
        /// A token for getting the next set of trials, if there are any.
        public let nextToken: String?
        /// A list of the summaries of your trials.
        public let trialSummaries: [TrialSummary]?

        public init(nextToken: String? = nil, trialSummaries: [TrialSummary]? = nil) {
            self.nextToken = nextToken
            self.trialSummaries = trialSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case trialSummaries = "TrialSummaries"
        }
    }

    public struct ListUserProfilesRequest: AWSEncodableShape {
        /// A parameter by which to filter the results.
        public let domainIdEquals: String?
        /// Returns a list up to a specified limit.
        public let maxResults: Int?
        /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
        public let nextToken: String?
        /// The parameter by which to sort the results. The default is CreationTime.
        public let sortBy: UserProfileSortKey?
        /// The sort order for the results. The default is Ascending.
        public let sortOrder: SortOrder?
        /// A parameter by which to filter the results.
        public let userProfileNameContains: String?

        public init(domainIdEquals: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortBy: UserProfileSortKey? = nil, sortOrder: SortOrder? = nil, userProfileNameContains: String? = nil) {
            self.domainIdEquals = domainIdEquals
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.userProfileNameContains = userProfileNameContains
        }

        public func validate(name: String) throws {
            try self.validate(self.domainIdEquals, name: "domainIdEquals", parent: name, max: 63)
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
            try self.validate(self.userProfileNameContains, name: "userProfileNameContains", parent: name, max: 63)
            try self.validate(self.userProfileNameContains, name: "userProfileNameContains", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case domainIdEquals = "DomainIdEquals"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case userProfileNameContains = "UserProfileNameContains"
        }
    }

    public struct ListUserProfilesResponse: AWSDecodableShape {
        /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
        public let nextToken: String?
        /// The list of user profiles.
        public let userProfiles: [UserProfileDetails]?

        public init(nextToken: String? = nil, userProfiles: [UserProfileDetails]? = nil) {
            self.nextToken = nextToken
            self.userProfiles = userProfiles
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case userProfiles = "UserProfiles"
        }
    }

    public struct ListWorkforcesRequest: AWSEncodableShape {
        /// The maximum number of workforces returned in the response.
        public let maxResults: Int?
        /// A filter you can use to search for workforces using part of the workforce name.
        public let nameContains: String?
        /// A token to resume pagination.
        public let nextToken: String?
        /// Sort workforces using the workforce name or creation date.
        public let sortBy: ListWorkforcesSortByOptions?
        /// Sort workforces in ascending or descending order.
        public let sortOrder: SortOrder?

        public init(maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: ListWorkforcesSortByOptions? = nil, sortOrder: SortOrder? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "^[a-zA-Z0-9]([a-zA-Z0-9\\-])*$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListWorkforcesResponse: AWSDecodableShape {
        /// A token to resume pagination.
        public let nextToken: String?
        /// A list containing information about your workforce.
        public let workforces: [Workforce]

        public init(nextToken: String? = nil, workforces: [Workforce]) {
            self.nextToken = nextToken
            self.workforces = workforces
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case workforces = "Workforces"
        }
    }

    public struct ListWorkteamsRequest: AWSEncodableShape {
        /// The maximum number of work teams to return in each page of the response.
        public let maxResults: Int?
        /// A string in the work team's name. This filter returns only work teams whose name contains the specified string.
        public let nameContains: String?
        /// If the result of the previous ListWorkteams request was truncated, the response includes a NextToken. To retrieve the next set of labeling jobs, use the token in the next request.
        public let nextToken: String?
        /// The field to sort results by. The default is CreationTime.
        public let sortBy: ListWorkteamsSortByOptions?
        /// The sort order for results. The default is Ascending.
        public let sortOrder: SortOrder?

        public init(maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, sortBy: ListWorkteamsSortByOptions? = nil, sortOrder: SortOrder? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 63)
            try self.validate(self.nameContains, name: "nameContains", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nameContains = "NameContains"
            case nextToken = "NextToken"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListWorkteamsResponse: AWSDecodableShape {
        /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of work teams, use it in the subsequent request.
        public let nextToken: String?
        /// An array of Workteam objects, each describing a work team.
        public let workteams: [Workteam]

        public init(nextToken: String? = nil, workteams: [Workteam]) {
            self.nextToken = nextToken
            self.workteams = workteams
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case workteams = "Workteams"
        }
    }

    public struct MemberDefinition: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Cognito user group that is part of the work team.
        public let cognitoMemberDefinition: CognitoMemberDefinition?
        /// A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. When you add a user group to the list of Groups, you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team.
        public let oidcMemberDefinition: OidcMemberDefinition?

        public init(cognitoMemberDefinition: CognitoMemberDefinition? = nil, oidcMemberDefinition: OidcMemberDefinition? = nil) {
            self.cognitoMemberDefinition = cognitoMemberDefinition
            self.oidcMemberDefinition = oidcMemberDefinition
        }

        public func validate(name: String) throws {
            try self.cognitoMemberDefinition?.validate(name: "\(name).cognitoMemberDefinition")
            try self.oidcMemberDefinition?.validate(name: "\(name).oidcMemberDefinition")
        }

        private enum CodingKeys: String, CodingKey {
            case cognitoMemberDefinition = "CognitoMemberDefinition"
            case oidcMemberDefinition = "OidcMemberDefinition"
        }
    }

    public struct MetricData: AWSDecodableShape {
        /// The name of the metric.
        public let metricName: String?
        /// The date and time that the algorithm emitted the metric.
        public let timestamp: TimeStamp?
        /// The value of the metric.
        public let value: Float?

        public init(metricName: String? = nil, timestamp: TimeStamp? = nil, value: Float? = nil) {
            self.metricName = metricName
            self.timestamp = timestamp
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case timestamp = "Timestamp"
            case value = "Value"
        }
    }

    public struct MetricDefinition: AWSEncodableShape & AWSDecodableShape {
        /// The name of the metric.
        public let name: String
        /// A regular expression that searches the output of a training job and gets the value of the metric. For more information about using regular expressions to define metrics, see Defining Objective Metrics.
        public let regex: String

        public init(name: String, regex: String) {
            self.name = name
            self.regex = regex
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 255)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".+")
            try self.validate(self.regex, name: "regex", parent: name, max: 500)
            try self.validate(self.regex, name: "regex", parent: name, min: 1)
            try self.validate(self.regex, name: "regex", parent: name, pattern: ".+")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case regex = "Regex"
        }
    }

    public struct ModelArtifacts: AWSDecodableShape {
        /// The path of the S3 object that contains the model artifacts. For example, s3://bucket-name/keynameprefix/model.tar.gz.
        public let s3ModelArtifacts: String

        public init(s3ModelArtifacts: String) {
            self.s3ModelArtifacts = s3ModelArtifacts
        }

        private enum CodingKeys: String, CodingKey {
            case s3ModelArtifacts = "S3ModelArtifacts"
        }
    }

    public struct ModelClientConfig: AWSEncodableShape & AWSDecodableShape {
        /// The maximum number of retries when invocation requests are failing.
        public let invocationsMaxRetries: Int?
        /// The timeout value in seconds for an invocation request.
        public let invocationsTimeoutInSeconds: Int?

        public init(invocationsMaxRetries: Int? = nil, invocationsTimeoutInSeconds: Int? = nil) {
            self.invocationsMaxRetries = invocationsMaxRetries
            self.invocationsTimeoutInSeconds = invocationsTimeoutInSeconds
        }

        public func validate(name: String) throws {
            try self.validate(self.invocationsMaxRetries, name: "invocationsMaxRetries", parent: name, max: 3)
            try self.validate(self.invocationsMaxRetries, name: "invocationsMaxRetries", parent: name, min: 0)
            try self.validate(self.invocationsTimeoutInSeconds, name: "invocationsTimeoutInSeconds", parent: name, max: 3600)
            try self.validate(self.invocationsTimeoutInSeconds, name: "invocationsTimeoutInSeconds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case invocationsMaxRetries = "InvocationsMaxRetries"
            case invocationsTimeoutInSeconds = "InvocationsTimeoutInSeconds"
        }
    }

    public struct ModelPackageContainerDefinition: AWSEncodableShape & AWSDecodableShape {
        /// The DNS host name for the Docker container.
        public let containerHostname: String?
        /// The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored. If you are using your own custom algorithm instead of an algorithm provided by Amazon SageMaker, the inference code must meet Amazon SageMaker requirements. Amazon SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information, see Using Your Own Algorithms with Amazon SageMaker.
        public let image: String
        /// An MD5 hash of the training algorithm that identifies the Docker image used for training.
        public let imageDigest: String?
        /// The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        public let modelDataUrl: String?
        /// The AWS Marketplace product ID of the model package.
        public let productId: String?

        public init(containerHostname: String? = nil, image: String, imageDigest: String? = nil, modelDataUrl: String? = nil, productId: String? = nil) {
            self.containerHostname = containerHostname
            self.image = image
            self.imageDigest = imageDigest
            self.modelDataUrl = modelDataUrl
            self.productId = productId
        }

        public func validate(name: String) throws {
            try self.validate(self.containerHostname, name: "containerHostname", parent: name, max: 63)
            try self.validate(self.containerHostname, name: "containerHostname", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.image, name: "image", parent: name, max: 255)
            try self.validate(self.image, name: "image", parent: name, pattern: "[\\S]+")
            try self.validate(self.imageDigest, name: "imageDigest", parent: name, max: 72)
            try self.validate(self.imageDigest, name: "imageDigest", parent: name, pattern: "^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$")
            try self.validate(self.modelDataUrl, name: "modelDataUrl", parent: name, max: 1024)
            try self.validate(self.modelDataUrl, name: "modelDataUrl", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
            try self.validate(self.productId, name: "productId", parent: name, max: 256)
            try self.validate(self.productId, name: "productId", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case containerHostname = "ContainerHostname"
            case image = "Image"
            case imageDigest = "ImageDigest"
            case modelDataUrl = "ModelDataUrl"
            case productId = "ProductId"
        }
    }

    public struct ModelPackageStatusDetails: AWSDecodableShape {
        /// The status of the scan of the Docker image container for the model package.
        public let imageScanStatuses: [ModelPackageStatusItem]?
        /// The validation status of the model package.
        public let validationStatuses: [ModelPackageStatusItem]

        public init(imageScanStatuses: [ModelPackageStatusItem]? = nil, validationStatuses: [ModelPackageStatusItem]) {
            self.imageScanStatuses = imageScanStatuses
            self.validationStatuses = validationStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case imageScanStatuses = "ImageScanStatuses"
            case validationStatuses = "ValidationStatuses"
        }
    }

    public struct ModelPackageStatusItem: AWSDecodableShape {
        /// if the overall status is Failed, the reason for the failure.
        public let failureReason: String?
        /// The name of the model package for which the overall status is being reported.
        public let name: String
        /// The current status.
        public let status: DetailedModelPackageStatus

        public init(failureReason: String? = nil, name: String, status: DetailedModelPackageStatus) {
            self.failureReason = failureReason
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case failureReason = "FailureReason"
            case name = "Name"
            case status = "Status"
        }
    }

    public struct ModelPackageSummary: AWSDecodableShape {
        /// A timestamp that shows when the model package was created.
        public let creationTime: TimeStamp
        /// The Amazon Resource Name (ARN) of the model package.
        public let modelPackageArn: String
        /// A brief description of the model package.
        public let modelPackageDescription: String?
        /// The name of the model package.
        public let modelPackageName: String
        /// The overall status of the model package.
        public let modelPackageStatus: ModelPackageStatus

        public init(creationTime: TimeStamp, modelPackageArn: String, modelPackageDescription: String? = nil, modelPackageName: String, modelPackageStatus: ModelPackageStatus) {
            self.creationTime = creationTime
            self.modelPackageArn = modelPackageArn
            self.modelPackageDescription = modelPackageDescription
            self.modelPackageName = modelPackageName
            self.modelPackageStatus = modelPackageStatus
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case modelPackageArn = "ModelPackageArn"
            case modelPackageDescription = "ModelPackageDescription"
            case modelPackageName = "ModelPackageName"
            case modelPackageStatus = "ModelPackageStatus"
        }
    }

    public struct ModelPackageValidationProfile: AWSEncodableShape & AWSDecodableShape {
        /// The name of the profile for the model package.
        public let profileName: String
        /// The TransformJobDefinition object that describes the transform job used for the validation of the model package.
        public let transformJobDefinition: TransformJobDefinition

        public init(profileName: String, transformJobDefinition: TransformJobDefinition) {
            self.profileName = profileName
            self.transformJobDefinition = transformJobDefinition
        }

        public func validate(name: String) throws {
            try self.validate(self.profileName, name: "profileName", parent: name, max: 63)
            try self.validate(self.profileName, name: "profileName", parent: name, min: 1)
            try self.validate(self.profileName, name: "profileName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.transformJobDefinition.validate(name: "\(name).transformJobDefinition")
        }

        private enum CodingKeys: String, CodingKey {
            case profileName = "ProfileName"
            case transformJobDefinition = "TransformJobDefinition"
        }
    }

    public struct ModelPackageValidationSpecification: AWSEncodableShape & AWSDecodableShape {
        /// An array of ModelPackageValidationProfile objects, each of which specifies a batch transform job that Amazon SageMaker runs to validate your model package.
        public let validationProfiles: [ModelPackageValidationProfile]
        /// The IAM roles to be used for the validation of the model package.
        public let validationRole: String

        public init(validationProfiles: [ModelPackageValidationProfile], validationRole: String) {
            self.validationProfiles = validationProfiles
            self.validationRole = validationRole
        }

        public func validate(name: String) throws {
            try self.validationProfiles.forEach {
                try $0.validate(name: "\(name).validationProfiles[]")
            }
            try self.validate(self.validationProfiles, name: "validationProfiles", parent: name, max: 1)
            try self.validate(self.validationProfiles, name: "validationProfiles", parent: name, min: 1)
            try self.validate(self.validationRole, name: "validationRole", parent: name, max: 2048)
            try self.validate(self.validationRole, name: "validationRole", parent: name, min: 20)
            try self.validate(self.validationRole, name: "validationRole", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case validationProfiles = "ValidationProfiles"
            case validationRole = "ValidationRole"
        }
    }

    public struct ModelSummary: AWSDecodableShape {
        /// A timestamp that indicates when the model was created.
        public let creationTime: TimeStamp
        /// The Amazon Resource Name (ARN) of the model.
        public let modelArn: String
        /// The name of the model that you want a summary for.
        public let modelName: String

        public init(creationTime: TimeStamp, modelArn: String, modelName: String) {
            self.creationTime = creationTime
            self.modelArn = modelArn
            self.modelName = modelName
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case modelArn = "ModelArn"
            case modelName = "ModelName"
        }
    }

    public struct MonitoringAppSpecification: AWSEncodableShape & AWSDecodableShape {
        /// An array of arguments for the container used to run the monitoring job.
        public let containerArguments: [String]?
        /// Specifies the entrypoint for a container used to run the monitoring job.
        public let containerEntrypoint: [String]?
        /// The container image to be run by the monitoring job.
        public let imageUri: String
        /// An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        public let postAnalyticsProcessorSourceUri: String?
        /// An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
        public let recordPreprocessorSourceUri: String?

        public init(containerArguments: [String]? = nil, containerEntrypoint: [String]? = nil, imageUri: String, postAnalyticsProcessorSourceUri: String? = nil, recordPreprocessorSourceUri: String? = nil) {
            self.containerArguments = containerArguments
            self.containerEntrypoint = containerEntrypoint
            self.imageUri = imageUri
            self.postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUri
            self.recordPreprocessorSourceUri = recordPreprocessorSourceUri
        }

        public func validate(name: String) throws {
            try self.containerArguments?.forEach {
                try validate($0, name: "containerArguments[]", parent: name, max: 256)
                try validate($0, name: "containerArguments[]", parent: name, pattern: ".*")
            }
            try self.validate(self.containerArguments, name: "containerArguments", parent: name, max: 50)
            try self.validate(self.containerArguments, name: "containerArguments", parent: name, min: 1)
            try self.containerEntrypoint?.forEach {
                try validate($0, name: "containerEntrypoint[]", parent: name, max: 256)
                try validate($0, name: "containerEntrypoint[]", parent: name, pattern: ".*")
            }
            try self.validate(self.containerEntrypoint, name: "containerEntrypoint", parent: name, max: 100)
            try self.validate(self.containerEntrypoint, name: "containerEntrypoint", parent: name, min: 1)
            try self.validate(self.imageUri, name: "imageUri", parent: name, max: 255)
            try self.validate(self.imageUri, name: "imageUri", parent: name, pattern: ".*")
            try self.validate(self.postAnalyticsProcessorSourceUri, name: "postAnalyticsProcessorSourceUri", parent: name, max: 1024)
            try self.validate(self.postAnalyticsProcessorSourceUri, name: "postAnalyticsProcessorSourceUri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
            try self.validate(self.recordPreprocessorSourceUri, name: "recordPreprocessorSourceUri", parent: name, max: 1024)
            try self.validate(self.recordPreprocessorSourceUri, name: "recordPreprocessorSourceUri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case containerArguments = "ContainerArguments"
            case containerEntrypoint = "ContainerEntrypoint"
            case imageUri = "ImageUri"
            case postAnalyticsProcessorSourceUri = "PostAnalyticsProcessorSourceUri"
            case recordPreprocessorSourceUri = "RecordPreprocessorSourceUri"
        }
    }

    public struct MonitoringBaselineConfig: AWSEncodableShape & AWSDecodableShape {
        /// The baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        public let constraintsResource: MonitoringConstraintsResource?
        /// The baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
        public let statisticsResource: MonitoringStatisticsResource?

        public init(constraintsResource: MonitoringConstraintsResource? = nil, statisticsResource: MonitoringStatisticsResource? = nil) {
            self.constraintsResource = constraintsResource
            self.statisticsResource = statisticsResource
        }

        public func validate(name: String) throws {
            try self.constraintsResource?.validate(name: "\(name).constraintsResource")
            try self.statisticsResource?.validate(name: "\(name).statisticsResource")
        }

        private enum CodingKeys: String, CodingKey {
            case constraintsResource = "ConstraintsResource"
            case statisticsResource = "StatisticsResource"
        }
    }

    public struct MonitoringClusterConfig: AWSEncodableShape & AWSDecodableShape {
        /// The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        public let instanceCount: Int
        /// The ML compute instance type for the processing job.
        public let instanceType: ProcessingInstanceType
        /// The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        public let volumeKmsKeyId: String?
        /// The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        public let volumeSizeInGB: Int

        public init(instanceCount: Int, instanceType: ProcessingInstanceType, volumeKmsKeyId: String? = nil, volumeSizeInGB: Int) {
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.volumeKmsKeyId = volumeKmsKeyId
            self.volumeSizeInGB = volumeSizeInGB
        }

        public func validate(name: String) throws {
            try self.validate(self.instanceCount, name: "instanceCount", parent: name, max: 100)
            try self.validate(self.instanceCount, name: "instanceCount", parent: name, min: 1)
            try self.validate(self.volumeKmsKeyId, name: "volumeKmsKeyId", parent: name, max: 2048)
            try self.validate(self.volumeKmsKeyId, name: "volumeKmsKeyId", parent: name, pattern: ".*")
            try self.validate(self.volumeSizeInGB, name: "volumeSizeInGB", parent: name, max: 16384)
            try self.validate(self.volumeSizeInGB, name: "volumeSizeInGB", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "InstanceCount"
            case instanceType = "InstanceType"
            case volumeKmsKeyId = "VolumeKmsKeyId"
            case volumeSizeInGB = "VolumeSizeInGB"
        }
    }

    public struct MonitoringConstraintsResource: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon S3 URI for the constraints resource.
        public let s3Uri: String?

        public init(s3Uri: String? = nil) {
            self.s3Uri = s3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, max: 1024)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
        }
    }

    public struct MonitoringExecutionSummary: AWSDecodableShape {
        /// The time at which the monitoring job was created.
        public let creationTime: TimeStamp
        /// The name of teh endpoint used to run the monitoring job.
        public let endpointName: String?
        /// Contains the reason a monitoring job failed, if it failed.
        public let failureReason: String?
        /// A timestamp that indicates the last time the monitoring job was modified.
        public let lastModifiedTime: TimeStamp
        /// The status of the monitoring job.
        public let monitoringExecutionStatus: ExecutionStatus
        /// The name of the monitoring schedule.
        public let monitoringScheduleName: String
        /// The Amazon Resource Name (ARN) of the monitoring job.
        public let processingJobArn: String?
        /// The time the monitoring job was scheduled.
        public let scheduledTime: TimeStamp

        public init(creationTime: TimeStamp, endpointName: String? = nil, failureReason: String? = nil, lastModifiedTime: TimeStamp, monitoringExecutionStatus: ExecutionStatus, monitoringScheduleName: String, processingJobArn: String? = nil, scheduledTime: TimeStamp) {
            self.creationTime = creationTime
            self.endpointName = endpointName
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.monitoringExecutionStatus = monitoringExecutionStatus
            self.monitoringScheduleName = monitoringScheduleName
            self.processingJobArn = processingJobArn
            self.scheduledTime = scheduledTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case endpointName = "EndpointName"
            case failureReason = "FailureReason"
            case lastModifiedTime = "LastModifiedTime"
            case monitoringExecutionStatus = "MonitoringExecutionStatus"
            case monitoringScheduleName = "MonitoringScheduleName"
            case processingJobArn = "ProcessingJobArn"
            case scheduledTime = "ScheduledTime"
        }
    }

    public struct MonitoringInput: AWSEncodableShape & AWSDecodableShape {
        /// The endpoint for a monitoring job.
        public let endpointInput: EndpointInput

        public init(endpointInput: EndpointInput) {
            self.endpointInput = endpointInput
        }

        public func validate(name: String) throws {
            try self.endpointInput.validate(name: "\(name).endpointInput")
        }

        private enum CodingKeys: String, CodingKey {
            case endpointInput = "EndpointInput"
        }
    }

    public struct MonitoringJobDefinition: AWSEncodableShape & AWSDecodableShape {
        /// Baseline configuration used to validate that the data conforms to the specified constraints and statistics
        public let baselineConfig: MonitoringBaselineConfig?
        /// Sets the environment variables in the Docker container.
        public let environment: [String: String]?
        /// Configures the monitoring job to run a specified Docker container image.
        public let monitoringAppSpecification: MonitoringAppSpecification
        /// The array of inputs for the monitoring job. Currently we support monitoring an Amazon SageMaker Endpoint.
        public let monitoringInputs: [MonitoringInput]
        /// The array of outputs from the monitoring job to be uploaded to Amazon Simple Storage Service (Amazon S3).
        public let monitoringOutputConfig: MonitoringOutputConfig
        /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a monitoring job. In distributed processing, you specify more than one instance.
        public let monitoringResources: MonitoringResources
        /// Specifies networking options for an monitoring job.
        public let networkConfig: NetworkConfig?
        /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        public let roleArn: String
        /// Specifies a time limit for how long the monitoring job is allowed to run.
        public let stoppingCondition: MonitoringStoppingCondition?

        public init(baselineConfig: MonitoringBaselineConfig? = nil, environment: [String: String]? = nil, monitoringAppSpecification: MonitoringAppSpecification, monitoringInputs: [MonitoringInput], monitoringOutputConfig: MonitoringOutputConfig, monitoringResources: MonitoringResources, networkConfig: NetworkConfig? = nil, roleArn: String, stoppingCondition: MonitoringStoppingCondition? = nil) {
            self.baselineConfig = baselineConfig
            self.environment = environment
            self.monitoringAppSpecification = monitoringAppSpecification
            self.monitoringInputs = monitoringInputs
            self.monitoringOutputConfig = monitoringOutputConfig
            self.monitoringResources = monitoringResources
            self.networkConfig = networkConfig
            self.roleArn = roleArn
            self.stoppingCondition = stoppingCondition
        }

        public func validate(name: String) throws {
            try self.baselineConfig?.validate(name: "\(name).baselineConfig")
            try self.environment?.forEach {
                try validate($0.key, name: "environment.key", parent: name, max: 256)
                try validate($0.key, name: "environment.key", parent: name, pattern: "[a-zA-Z_][a-zA-Z0-9_]*")
                try validate($0.value, name: "environment[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "environment[\"\($0.key)\"]", parent: name, pattern: "[\\S\\s]*")
            }
            try self.monitoringAppSpecification.validate(name: "\(name).monitoringAppSpecification")
            try self.monitoringInputs.forEach {
                try $0.validate(name: "\(name).monitoringInputs[]")
            }
            try self.validate(self.monitoringInputs, name: "monitoringInputs", parent: name, max: 1)
            try self.validate(self.monitoringInputs, name: "monitoringInputs", parent: name, min: 1)
            try self.monitoringOutputConfig.validate(name: "\(name).monitoringOutputConfig")
            try self.monitoringResources.validate(name: "\(name).monitoringResources")
            try self.networkConfig?.validate(name: "\(name).networkConfig")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 2048)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 20)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
            try self.stoppingCondition?.validate(name: "\(name).stoppingCondition")
        }

        private enum CodingKeys: String, CodingKey {
            case baselineConfig = "BaselineConfig"
            case environment = "Environment"
            case monitoringAppSpecification = "MonitoringAppSpecification"
            case monitoringInputs = "MonitoringInputs"
            case monitoringOutputConfig = "MonitoringOutputConfig"
            case monitoringResources = "MonitoringResources"
            case networkConfig = "NetworkConfig"
            case roleArn = "RoleArn"
            case stoppingCondition = "StoppingCondition"
        }
    }

    public struct MonitoringOutput: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon S3 storage location where the results of a monitoring job are saved.
        public let s3Output: MonitoringS3Output

        public init(s3Output: MonitoringS3Output) {
            self.s3Output = s3Output
        }

        public func validate(name: String) throws {
            try self.s3Output.validate(name: "\(name).s3Output")
        }

        private enum CodingKeys: String, CodingKey {
            case s3Output = "S3Output"
        }
    }

    public struct MonitoringOutputConfig: AWSEncodableShape & AWSDecodableShape {
        /// The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        public let kmsKeyId: String?
        /// Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        public let monitoringOutputs: [MonitoringOutput]

        public init(kmsKeyId: String? = nil, monitoringOutputs: [MonitoringOutput]) {
            self.kmsKeyId = kmsKeyId
            self.monitoringOutputs = monitoringOutputs
        }

        public func validate(name: String) throws {
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, pattern: ".*")
            try self.monitoringOutputs.forEach {
                try $0.validate(name: "\(name).monitoringOutputs[]")
            }
            try self.validate(self.monitoringOutputs, name: "monitoringOutputs", parent: name, max: 1)
            try self.validate(self.monitoringOutputs, name: "monitoringOutputs", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case monitoringOutputs = "MonitoringOutputs"
        }
    }

    public struct MonitoringResources: AWSEncodableShape & AWSDecodableShape {
        /// The configuration for the cluster resources used to run the processing job.
        public let clusterConfig: MonitoringClusterConfig

        public init(clusterConfig: MonitoringClusterConfig) {
            self.clusterConfig = clusterConfig
        }

        public func validate(name: String) throws {
            try self.clusterConfig.validate(name: "\(name).clusterConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case clusterConfig = "ClusterConfig"
        }
    }

    public struct MonitoringS3Output: AWSEncodableShape & AWSDecodableShape {
        /// The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        public let localPath: String
        /// Whether to upload the results of the monitoring job continuously or after the job completes.
        public let s3UploadMode: ProcessingS3UploadMode?
        /// A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        public let s3Uri: String

        public init(localPath: String, s3UploadMode: ProcessingS3UploadMode? = nil, s3Uri: String) {
            self.localPath = localPath
            self.s3UploadMode = s3UploadMode
            self.s3Uri = s3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.localPath, name: "localPath", parent: name, max: 256)
            try self.validate(self.localPath, name: "localPath", parent: name, pattern: ".*")
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, max: 512)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case localPath = "LocalPath"
            case s3UploadMode = "S3UploadMode"
            case s3Uri = "S3Uri"
        }
    }

    public struct MonitoringScheduleConfig: AWSEncodableShape & AWSDecodableShape {
        /// Defines the monitoring job.
        public let monitoringJobDefinition: MonitoringJobDefinition
        /// Configures the monitoring schedule.
        public let scheduleConfig: ScheduleConfig?

        public init(monitoringJobDefinition: MonitoringJobDefinition, scheduleConfig: ScheduleConfig? = nil) {
            self.monitoringJobDefinition = monitoringJobDefinition
            self.scheduleConfig = scheduleConfig
        }

        public func validate(name: String) throws {
            try self.monitoringJobDefinition.validate(name: "\(name).monitoringJobDefinition")
            try self.scheduleConfig?.validate(name: "\(name).scheduleConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case monitoringJobDefinition = "MonitoringJobDefinition"
            case scheduleConfig = "ScheduleConfig"
        }
    }

    public struct MonitoringScheduleSummary: AWSDecodableShape {
        /// The creation time of the monitoring schedule.
        public let creationTime: TimeStamp
        /// The name of the endpoint using the monitoring schedule.
        public let endpointName: String?
        /// The last time the monitoring schedule was modified.
        public let lastModifiedTime: TimeStamp
        /// The Amazon Resource Name (ARN) of the monitoring schedule.
        public let monitoringScheduleArn: String
        /// The name of the monitoring schedule.
        public let monitoringScheduleName: String
        /// The status of the monitoring schedule.
        public let monitoringScheduleStatus: ScheduleStatus

        public init(creationTime: TimeStamp, endpointName: String? = nil, lastModifiedTime: TimeStamp, monitoringScheduleArn: String, monitoringScheduleName: String, monitoringScheduleStatus: ScheduleStatus) {
            self.creationTime = creationTime
            self.endpointName = endpointName
            self.lastModifiedTime = lastModifiedTime
            self.monitoringScheduleArn = monitoringScheduleArn
            self.monitoringScheduleName = monitoringScheduleName
            self.monitoringScheduleStatus = monitoringScheduleStatus
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case endpointName = "EndpointName"
            case lastModifiedTime = "LastModifiedTime"
            case monitoringScheduleArn = "MonitoringScheduleArn"
            case monitoringScheduleName = "MonitoringScheduleName"
            case monitoringScheduleStatus = "MonitoringScheduleStatus"
        }
    }

    public struct MonitoringStatisticsResource: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon S3 URI for the statistics resource.
        public let s3Uri: String?

        public init(s3Uri: String? = nil) {
            self.s3Uri = s3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, max: 1024)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
        }
    }

    public struct MonitoringStoppingCondition: AWSEncodableShape & AWSDecodableShape {
        /// The maximum runtime allowed in seconds.
        public let maxRuntimeInSeconds: Int

        public init(maxRuntimeInSeconds: Int) {
            self.maxRuntimeInSeconds = maxRuntimeInSeconds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxRuntimeInSeconds, name: "maxRuntimeInSeconds", parent: name, max: 86400)
            try self.validate(self.maxRuntimeInSeconds, name: "maxRuntimeInSeconds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxRuntimeInSeconds = "MaxRuntimeInSeconds"
        }
    }

    public struct NestedFilters: AWSEncodableShape {
        /// A list of filters. Each filter acts on a property. Filters must contain at least one Filters value. For example, a NestedFilters call might include a filter on the PropertyName parameter of the InputDataConfig property: InputDataConfig.DataSource.S3DataSource.S3Uri.
        public let filters: [Filter]
        /// The name of the property to use in the nested filters. The value must match a listed property name, such as InputDataConfig.
        public let nestedPropertyName: String

        public init(filters: [Filter], nestedPropertyName: String) {
            self.filters = filters
            self.nestedPropertyName = nestedPropertyName
        }

        public func validate(name: String) throws {
            try self.filters.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try self.validate(self.filters, name: "filters", parent: name, max: 20)
            try self.validate(self.filters, name: "filters", parent: name, min: 1)
            try self.validate(self.nestedPropertyName, name: "nestedPropertyName", parent: name, max: 255)
            try self.validate(self.nestedPropertyName, name: "nestedPropertyName", parent: name, min: 1)
            try self.validate(self.nestedPropertyName, name: "nestedPropertyName", parent: name, pattern: ".+")
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case nestedPropertyName = "NestedPropertyName"
        }
    }

    public struct NetworkConfig: AWSEncodableShape & AWSDecodableShape {
        /// Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        public let enableInterContainerTrafficEncryption: Bool?
        /// Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        public let enableNetworkIsolation: Bool?
        public let vpcConfig: VpcConfig?

        public init(enableInterContainerTrafficEncryption: Bool? = nil, enableNetworkIsolation: Bool? = nil, vpcConfig: VpcConfig? = nil) {
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableNetworkIsolation = enableNetworkIsolation
            self.vpcConfig = vpcConfig
        }

        public func validate(name: String) throws {
            try self.vpcConfig?.validate(name: "\(name).vpcConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
            case enableNetworkIsolation = "EnableNetworkIsolation"
            case vpcConfig = "VpcConfig"
        }
    }

    public struct NotebookInstanceLifecycleConfigSummary: AWSDecodableShape {
        /// A timestamp that tells when the lifecycle configuration was created.
        public let creationTime: TimeStamp?
        /// A timestamp that tells when the lifecycle configuration was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the lifecycle configuration.
        public let notebookInstanceLifecycleConfigArn: String
        /// The name of the lifecycle configuration.
        public let notebookInstanceLifecycleConfigName: String

        public init(creationTime: TimeStamp? = nil, lastModifiedTime: TimeStamp? = nil, notebookInstanceLifecycleConfigArn: String, notebookInstanceLifecycleConfigName: String) {
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArn
            self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case lastModifiedTime = "LastModifiedTime"
            case notebookInstanceLifecycleConfigArn = "NotebookInstanceLifecycleConfigArn"
            case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        }
    }

    public struct NotebookInstanceLifecycleHook: AWSEncodableShape & AWSDecodableShape {
        /// A base64-encoded string that contains a shell script for a notebook instance lifecycle configuration.
        public let content: String?

        public init(content: String? = nil) {
            self.content = content
        }

        public func validate(name: String) throws {
            try self.validate(self.content, name: "content", parent: name, max: 16384)
            try self.validate(self.content, name: "content", parent: name, min: 1)
            try self.validate(self.content, name: "content", parent: name, pattern: "[\\S\\s]+")
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
        }
    }

    public struct NotebookInstanceSummary: AWSDecodableShape {
        /// An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in AWS CodeCommit or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see Associating Git Repositories with Amazon SageMaker Notebook Instances.
        public let additionalCodeRepositories: [String]?
        /// A timestamp that shows when the notebook instance was created.
        public let creationTime: TimeStamp?
        /// The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in AWS CodeCommit or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see Associating Git Repositories with Amazon SageMaker Notebook Instances.
        public let defaultCodeRepository: String?
        /// The type of ML compute instance that the notebook instance is running on.
        public let instanceType: InstanceType?
        /// A timestamp that shows when the notebook instance was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the notebook instance.
        public let notebookInstanceArn: String
        /// The name of a notebook instance lifecycle configuration associated with this notebook instance. For information about notebook instance lifestyle configurations, see Step 2.1: (Optional) Customize a Notebook Instance.
        public let notebookInstanceLifecycleConfigName: String?
        /// The name of the notebook instance that you want a summary for.
        public let notebookInstanceName: String
        /// The status of the notebook instance.
        public let notebookInstanceStatus: NotebookInstanceStatus?
        /// The URL that you use to connect to the Jupyter instance running in your notebook instance.
        public let url: String?

        public init(additionalCodeRepositories: [String]? = nil, creationTime: TimeStamp? = nil, defaultCodeRepository: String? = nil, instanceType: InstanceType? = nil, lastModifiedTime: TimeStamp? = nil, notebookInstanceArn: String, notebookInstanceLifecycleConfigName: String? = nil, notebookInstanceName: String, notebookInstanceStatus: NotebookInstanceStatus? = nil, url: String? = nil) {
            self.additionalCodeRepositories = additionalCodeRepositories
            self.creationTime = creationTime
            self.defaultCodeRepository = defaultCodeRepository
            self.instanceType = instanceType
            self.lastModifiedTime = lastModifiedTime
            self.notebookInstanceArn = notebookInstanceArn
            self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
            self.notebookInstanceName = notebookInstanceName
            self.notebookInstanceStatus = notebookInstanceStatus
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case additionalCodeRepositories = "AdditionalCodeRepositories"
            case creationTime = "CreationTime"
            case defaultCodeRepository = "DefaultCodeRepository"
            case instanceType = "InstanceType"
            case lastModifiedTime = "LastModifiedTime"
            case notebookInstanceArn = "NotebookInstanceArn"
            case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
            case notebookInstanceName = "NotebookInstanceName"
            case notebookInstanceStatus = "NotebookInstanceStatus"
            case url = "Url"
        }
    }

    public struct NotificationConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The ARN for the SNS topic to which notifications should be published.
        public let notificationTopicArn: String?

        public init(notificationTopicArn: String? = nil) {
            self.notificationTopicArn = notificationTopicArn
        }

        public func validate(name: String) throws {
            try self.validate(self.notificationTopicArn, name: "notificationTopicArn", parent: name, pattern: "arn:aws[a-z\\-]*:sns:[a-z0-9\\-]*:[0-9]{12}:[a-zA-Z0-9_.-]*")
        }

        private enum CodingKeys: String, CodingKey {
            case notificationTopicArn = "NotificationTopicArn"
        }
    }

    public struct ObjectiveStatusCounters: AWSDecodableShape {
        /// The number of training jobs whose final objective metric was not evaluated and used in the hyperparameter tuning process. This typically occurs when the training job failed or did not emit an objective metric.
        public let failed: Int?
        /// The number of training jobs that are in progress and pending evaluation of their final objective metric.
        public let pending: Int?
        /// The number of training jobs whose final objective metric was evaluated by the hyperparameter tuning job and used in the hyperparameter tuning process.
        public let succeeded: Int?

        public init(failed: Int? = nil, pending: Int? = nil, succeeded: Int? = nil) {
            self.failed = failed
            self.pending = pending
            self.succeeded = succeeded
        }

        private enum CodingKeys: String, CodingKey {
            case failed = "Failed"
            case pending = "Pending"
            case succeeded = "Succeeded"
        }
    }

    public struct OidcConfig: AWSEncodableShape {
        /// The OIDC IdP authorization endpoint used to configure your private workforce.
        public let authorizationEndpoint: String
        /// The OIDC IdP client ID used to configure your private workforce.
        public let clientId: String
        /// The OIDC IdP client secret used to configure your private workforce.
        public let clientSecret: String
        /// The OIDC IdP issuer used to configure your private workforce.
        public let issuer: String
        /// The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
        public let jwksUri: String
        /// The OIDC IdP logout endpoint used to configure your private workforce.
        public let logoutEndpoint: String
        /// The OIDC IdP token endpoint used to configure your private workforce.
        public let tokenEndpoint: String
        /// The OIDC IdP user information endpoint used to configure your private workforce.
        public let userInfoEndpoint: String

        public init(authorizationEndpoint: String, clientId: String, clientSecret: String, issuer: String, jwksUri: String, logoutEndpoint: String, tokenEndpoint: String, userInfoEndpoint: String) {
            self.authorizationEndpoint = authorizationEndpoint
            self.clientId = clientId
            self.clientSecret = clientSecret
            self.issuer = issuer
            self.jwksUri = jwksUri
            self.logoutEndpoint = logoutEndpoint
            self.tokenEndpoint = tokenEndpoint
            self.userInfoEndpoint = userInfoEndpoint
        }

        public func validate(name: String) throws {
            try self.validate(self.authorizationEndpoint, name: "authorizationEndpoint", parent: name, max: 500)
            try self.validate(self.authorizationEndpoint, name: "authorizationEndpoint", parent: name, pattern: "https://\\S+")
            try self.validate(self.clientId, name: "clientId", parent: name, max: 128)
            try self.validate(self.clientId, name: "clientId", parent: name, min: 1)
            try self.validate(self.clientId, name: "clientId", parent: name, pattern: "[\\w+-]+")
            try self.validate(self.clientSecret, name: "clientSecret", parent: name, max: 64)
            try self.validate(self.clientSecret, name: "clientSecret", parent: name, min: 1)
            try self.validate(self.clientSecret, name: "clientSecret", parent: name, pattern: "[\\w+=/-]+")
            try self.validate(self.issuer, name: "issuer", parent: name, max: 500)
            try self.validate(self.issuer, name: "issuer", parent: name, pattern: "https://\\S+")
            try self.validate(self.jwksUri, name: "jwksUri", parent: name, max: 500)
            try self.validate(self.jwksUri, name: "jwksUri", parent: name, pattern: "https://\\S+")
            try self.validate(self.logoutEndpoint, name: "logoutEndpoint", parent: name, max: 500)
            try self.validate(self.logoutEndpoint, name: "logoutEndpoint", parent: name, pattern: "https://\\S+")
            try self.validate(self.tokenEndpoint, name: "tokenEndpoint", parent: name, max: 500)
            try self.validate(self.tokenEndpoint, name: "tokenEndpoint", parent: name, pattern: "https://\\S+")
            try self.validate(self.userInfoEndpoint, name: "userInfoEndpoint", parent: name, max: 500)
            try self.validate(self.userInfoEndpoint, name: "userInfoEndpoint", parent: name, pattern: "https://\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationEndpoint = "AuthorizationEndpoint"
            case clientId = "ClientId"
            case clientSecret = "ClientSecret"
            case issuer = "Issuer"
            case jwksUri = "JwksUri"
            case logoutEndpoint = "LogoutEndpoint"
            case tokenEndpoint = "TokenEndpoint"
            case userInfoEndpoint = "UserInfoEndpoint"
        }
    }

    public struct OidcConfigForResponse: AWSDecodableShape {
        /// The OIDC IdP authorization endpoint used to configure your private workforce.
        public let authorizationEndpoint: String?
        /// The OIDC IdP client ID used to configure your private workforce.
        public let clientId: String?
        /// The OIDC IdP issuer used to configure your private workforce.
        public let issuer: String?
        /// The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
        public let jwksUri: String?
        /// The OIDC IdP logout endpoint used to configure your private workforce.
        public let logoutEndpoint: String?
        /// The OIDC IdP token endpoint used to configure your private workforce.
        public let tokenEndpoint: String?
        /// The OIDC IdP user information endpoint used to configure your private workforce.
        public let userInfoEndpoint: String?

        public init(authorizationEndpoint: String? = nil, clientId: String? = nil, issuer: String? = nil, jwksUri: String? = nil, logoutEndpoint: String? = nil, tokenEndpoint: String? = nil, userInfoEndpoint: String? = nil) {
            self.authorizationEndpoint = authorizationEndpoint
            self.clientId = clientId
            self.issuer = issuer
            self.jwksUri = jwksUri
            self.logoutEndpoint = logoutEndpoint
            self.tokenEndpoint = tokenEndpoint
            self.userInfoEndpoint = userInfoEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationEndpoint = "AuthorizationEndpoint"
            case clientId = "ClientId"
            case issuer = "Issuer"
            case jwksUri = "JwksUri"
            case logoutEndpoint = "LogoutEndpoint"
            case tokenEndpoint = "TokenEndpoint"
            case userInfoEndpoint = "UserInfoEndpoint"
        }
    }

    public struct OidcMemberDefinition: AWSEncodableShape & AWSDecodableShape {
        /// A list of comma seperated strings that identifies user groups in your OIDC IdP. Each user group is made up of a group of private workers.
        public let groups: [String]

        public init(groups: [String]) {
            self.groups = groups
        }

        public func validate(name: String) throws {
            try self.groups.forEach {
                try validate($0, name: "groups[]", parent: name, max: 63)
                try validate($0, name: "groups[]", parent: name, min: 1)
                try validate($0, name: "groups[]", parent: name, pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+")
            }
            try self.validate(self.groups, name: "groups", parent: name, max: 10)
            try self.validate(self.groups, name: "groups", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "Groups"
        }
    }

    public struct OutputConfig: AWSEncodableShape & AWSDecodableShape {
        /// Specifies additional parameters for compiler options in JSON format. The compiler options are TargetPlatform specific. It is required for NVIDIA accelerators and highly recommended for CPU compliations. For any other cases, it is optional to specify CompilerOptions.     CPU: Compilation for CPU supports the following compiler options.    mcpu: CPU micro-architecture. For example, {'mcpu': 'skylake-avx512'}     mattr: CPU flags. For example, {'mattr': ['+neon', '+vfpv4']}       ARM: Details of ARM CPU compilations.    NEON: NEON is an implementation of the Advanced SIMD extension used in ARMv7 processors. For example, add {'mattr': ['+neon']} to the compiler options if compiling for ARM 32-bit platform with the NEON support.      NVIDIA: Compilation for NVIDIA GPU supports the following compiler options.    gpu_code: Specifies the targeted architecture.    trt-ver: Specifies the TensorRT versions in x.y.z. format.    cuda-ver: Specifies the CUDA version in x.y format.   For example, {'gpu-code': 'sm_72', 'trt-ver': '6.0.1', 'cuda-ver': '10.1'}     ANDROID: Compilation for the Android OS supports the following compiler options:    ANDROID_PLATFORM: Specifies the Android API levels. Available levels range from 21 to 29. For example, {'ANDROID_PLATFORM': 28}.    mattr: Add {'mattr': ['+neon']} to compiler options if compiling for ARM 32-bit platform with NEON support.
        public let compilerOptions: String?
        /// Identifies the S3 bucket where you want Amazon SageMaker to store the model artifacts. For example, s3://bucket-name/key-name-prefix.
        public let s3OutputLocation: String
        /// Identifies the target device or the machine learning instance that you want to run your model on after the compilation has completed. Alternatively, you can specify OS, architecture, and accelerator using TargetPlatform fields. It can be used instead of TargetPlatform.
        public let targetDevice: TargetDevice?
        /// Contains information about a target platform that you want your model to run on, such as OS, architecture, and accelerators. It is an alternative of TargetDevice. The following examples show how to configure the TargetPlatform and CompilerOptions JSON strings for popular target platforms:    Raspberry Pi 3 Model B+  "TargetPlatform": {"Os": "LINUX", "Arch": "ARM_EABIHF"},    "CompilerOptions": {'mattr': ['+neon']}    Jetson TX2  "TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator": "NVIDIA"},    "CompilerOptions": {'gpu-code': 'sm_62', 'trt-ver': '6.0.1', 'cuda-ver': '10.0'}    EC2 m5.2xlarge instance OS  "TargetPlatform": {"Os": "LINUX", "Arch": "X86_64", "Accelerator": "NVIDIA"},    "CompilerOptions": {'mcpu': 'skylake-avx512'}    RK3399  "TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator": "MALI"}    ARMv7 phone (CPU)  "TargetPlatform": {"Os": "ANDROID", "Arch": "ARM_EABI"},    "CompilerOptions": {'ANDROID_PLATFORM': 25, 'mattr': ['+neon']}    ARMv8 phone (CPU)  "TargetPlatform": {"Os": "ANDROID", "Arch": "ARM64"},    "CompilerOptions": {'ANDROID_PLATFORM': 29}
        public let targetPlatform: TargetPlatform?

        public init(compilerOptions: String? = nil, s3OutputLocation: String, targetDevice: TargetDevice? = nil, targetPlatform: TargetPlatform? = nil) {
            self.compilerOptions = compilerOptions
            self.s3OutputLocation = s3OutputLocation
            self.targetDevice = targetDevice
            self.targetPlatform = targetPlatform
        }

        public func validate(name: String) throws {
            try self.validate(self.compilerOptions, name: "compilerOptions", parent: name, max: 1024)
            try self.validate(self.compilerOptions, name: "compilerOptions", parent: name, min: 7)
            try self.validate(self.compilerOptions, name: "compilerOptions", parent: name, pattern: "^\\{.+\\}$")
            try self.validate(self.s3OutputLocation, name: "s3OutputLocation", parent: name, max: 1024)
            try self.validate(self.s3OutputLocation, name: "s3OutputLocation", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case compilerOptions = "CompilerOptions"
            case s3OutputLocation = "S3OutputLocation"
            case targetDevice = "TargetDevice"
            case targetPlatform = "TargetPlatform"
        }
    }

    public struct OutputDataConfig: AWSEncodableShape & AWSDecodableShape {
        /// The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption. The KmsKeyId can be any of the following formats:    // KMS Key ID  "1234abcd-12ab-34cd-56ef-1234567890ab"    // Amazon Resource Name (ARN) of a KMS Key  "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"    // KMS Key Alias  "alias/ExampleAlias"    // Amazon Resource Name (ARN) of a KMS Key Alias  "arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"    If you use a KMS key ID or an alias of your master key, the Amazon SageMaker execution role must include permissions to call kms:Encrypt. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. Amazon SageMaker uses server-side encryption with KMS-managed keys for OutputDataConfig. If you use a bucket policy with an s3:PutObject permission that only allows objects with server-side encryption, set the condition key of s3:x-amz-server-side-encryption to "aws:kms". For more information, see KMS-Managed Encryption Keys in the Amazon Simple Storage Service Developer Guide.  The KMS key policy must grant permission to the IAM role that you specify in your CreateTrainingJob, CreateTransformJob, or CreateHyperParameterTuningJob requests. For more information, see Using Key Policies in AWS KMS in the AWS Key Management Service Developer Guide.
        public let kmsKeyId: String?
        /// Identifies the S3 path where you want Amazon SageMaker to store the model artifacts. For example, s3://bucket-name/key-name-prefix.
        public let s3OutputPath: String

        public init(kmsKeyId: String? = nil, s3OutputPath: String) {
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
        }

        public func validate(name: String) throws {
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, pattern: ".*")
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, max: 1024)
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case s3OutputPath = "S3OutputPath"
        }
    }

    public struct ParameterRange: AWSEncodableShape & AWSDecodableShape {
        /// A CategoricalParameterRangeSpecification object that defines the possible values for a categorical hyperparameter.
        public let categoricalParameterRangeSpecification: CategoricalParameterRangeSpecification?
        /// A ContinuousParameterRangeSpecification object that defines the possible values for a continuous hyperparameter.
        public let continuousParameterRangeSpecification: ContinuousParameterRangeSpecification?
        /// A IntegerParameterRangeSpecification object that defines the possible values for an integer hyperparameter.
        public let integerParameterRangeSpecification: IntegerParameterRangeSpecification?

        public init(categoricalParameterRangeSpecification: CategoricalParameterRangeSpecification? = nil, continuousParameterRangeSpecification: ContinuousParameterRangeSpecification? = nil, integerParameterRangeSpecification: IntegerParameterRangeSpecification? = nil) {
            self.categoricalParameterRangeSpecification = categoricalParameterRangeSpecification
            self.continuousParameterRangeSpecification = continuousParameterRangeSpecification
            self.integerParameterRangeSpecification = integerParameterRangeSpecification
        }

        public func validate(name: String) throws {
            try self.categoricalParameterRangeSpecification?.validate(name: "\(name).categoricalParameterRangeSpecification")
            try self.continuousParameterRangeSpecification?.validate(name: "\(name).continuousParameterRangeSpecification")
            try self.integerParameterRangeSpecification?.validate(name: "\(name).integerParameterRangeSpecification")
        }

        private enum CodingKeys: String, CodingKey {
            case categoricalParameterRangeSpecification = "CategoricalParameterRangeSpecification"
            case continuousParameterRangeSpecification = "ContinuousParameterRangeSpecification"
            case integerParameterRangeSpecification = "IntegerParameterRangeSpecification"
        }
    }

    public struct ParameterRanges: AWSEncodableShape & AWSDecodableShape {
        /// The array of CategoricalParameterRange objects that specify ranges of categorical hyperparameters that a hyperparameter tuning job searches.
        public let categoricalParameterRanges: [CategoricalParameterRange]?
        /// The array of ContinuousParameterRange objects that specify ranges of continuous hyperparameters that a hyperparameter tuning job searches.
        public let continuousParameterRanges: [ContinuousParameterRange]?
        /// The array of IntegerParameterRange objects that specify ranges of integer hyperparameters that a hyperparameter tuning job searches.
        public let integerParameterRanges: [IntegerParameterRange]?

        public init(categoricalParameterRanges: [CategoricalParameterRange]? = nil, continuousParameterRanges: [ContinuousParameterRange]? = nil, integerParameterRanges: [IntegerParameterRange]? = nil) {
            self.categoricalParameterRanges = categoricalParameterRanges
            self.continuousParameterRanges = continuousParameterRanges
            self.integerParameterRanges = integerParameterRanges
        }

        public func validate(name: String) throws {
            try self.categoricalParameterRanges?.forEach {
                try $0.validate(name: "\(name).categoricalParameterRanges[]")
            }
            try self.validate(self.categoricalParameterRanges, name: "categoricalParameterRanges", parent: name, max: 20)
            try self.validate(self.categoricalParameterRanges, name: "categoricalParameterRanges", parent: name, min: 0)
            try self.continuousParameterRanges?.forEach {
                try $0.validate(name: "\(name).continuousParameterRanges[]")
            }
            try self.validate(self.continuousParameterRanges, name: "continuousParameterRanges", parent: name, max: 20)
            try self.validate(self.continuousParameterRanges, name: "continuousParameterRanges", parent: name, min: 0)
            try self.integerParameterRanges?.forEach {
                try $0.validate(name: "\(name).integerParameterRanges[]")
            }
            try self.validate(self.integerParameterRanges, name: "integerParameterRanges", parent: name, max: 20)
            try self.validate(self.integerParameterRanges, name: "integerParameterRanges", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case categoricalParameterRanges = "CategoricalParameterRanges"
            case continuousParameterRanges = "ContinuousParameterRanges"
            case integerParameterRanges = "IntegerParameterRanges"
        }
    }

    public struct Parent: AWSDecodableShape {
        /// The name of the experiment.
        public let experimentName: String?
        /// The name of the trial.
        public let trialName: String?

        public init(experimentName: String? = nil, trialName: String? = nil) {
            self.experimentName = experimentName
            self.trialName = trialName
        }

        private enum CodingKeys: String, CodingKey {
            case experimentName = "ExperimentName"
            case trialName = "TrialName"
        }
    }

    public struct ParentHyperParameterTuningJob: AWSEncodableShape & AWSDecodableShape {
        /// The name of the hyperparameter tuning job to be used as a starting point for a new hyperparameter tuning job.
        public let hyperParameterTuningJobName: String?

        public init(hyperParameterTuningJobName: String? = nil) {
            self.hyperParameterTuningJobName = hyperParameterTuningJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, max: 32)
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, min: 1)
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        }
    }

    public struct ProcessingClusterConfig: AWSEncodableShape & AWSDecodableShape {
        /// The number of ML compute instances to use in the processing job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        public let instanceCount: Int
        /// The ML compute instance type for the processing job.
        public let instanceType: ProcessingInstanceType
        /// The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the processing job.
        public let volumeKmsKeyId: String?
        /// The size of the ML storage volume in gigabytes that you want to provision. You must specify sufficient ML storage for your scenario.
        public let volumeSizeInGB: Int

        public init(instanceCount: Int, instanceType: ProcessingInstanceType, volumeKmsKeyId: String? = nil, volumeSizeInGB: Int) {
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.volumeKmsKeyId = volumeKmsKeyId
            self.volumeSizeInGB = volumeSizeInGB
        }

        public func validate(name: String) throws {
            try self.validate(self.instanceCount, name: "instanceCount", parent: name, max: 100)
            try self.validate(self.instanceCount, name: "instanceCount", parent: name, min: 1)
            try self.validate(self.volumeKmsKeyId, name: "volumeKmsKeyId", parent: name, max: 2048)
            try self.validate(self.volumeKmsKeyId, name: "volumeKmsKeyId", parent: name, pattern: ".*")
            try self.validate(self.volumeSizeInGB, name: "volumeSizeInGB", parent: name, max: 16384)
            try self.validate(self.volumeSizeInGB, name: "volumeSizeInGB", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "InstanceCount"
            case instanceType = "InstanceType"
            case volumeKmsKeyId = "VolumeKmsKeyId"
            case volumeSizeInGB = "VolumeSizeInGB"
        }
    }

    public struct ProcessingInput: AWSEncodableShape & AWSDecodableShape {
        /// The name of the inputs for the processing job.
        public let inputName: String
        /// The S3 inputs for the processing job.
        public let s3Input: ProcessingS3Input

        public init(inputName: String, s3Input: ProcessingS3Input) {
            self.inputName = inputName
            self.s3Input = s3Input
        }

        public func validate(name: String) throws {
            try self.s3Input.validate(name: "\(name).s3Input")
        }

        private enum CodingKeys: String, CodingKey {
            case inputName = "InputName"
            case s3Input = "S3Input"
        }
    }

    public struct ProcessingJob: AWSDecodableShape {
        public let appSpecification: AppSpecification?
        /// The Amazon Resource Name (ARN) of the AutoML job associated with this processing job.
        public let autoMLJobArn: String?
        /// The time the processing job was created.
        public let creationTime: TimeStamp?
        /// Sets the environment variables in the Docker container.
        public let environment: [String: String]?
        /// A string, up to one KB in size, that contains metadata from the processing container when the processing job exits.
        public let exitMessage: String?
        public let experimentConfig: ExperimentConfig?
        /// A string, up to one KB in size, that contains the reason a processing job failed, if it failed.
        public let failureReason: String?
        /// The time the processing job was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The ARN of a monitoring schedule for an endpoint associated with this processing job.
        public let monitoringScheduleArn: String?
        public let networkConfig: NetworkConfig?
        /// The time that the processing job ended.
        public let processingEndTime: TimeStamp?
        /// For each input, data is downloaded from S3 into the processing container before the processing job begins running if "S3InputMode" is set to File.
        public let processingInputs: [ProcessingInput]?
        /// The ARN of the processing job.
        public let processingJobArn: String?
        /// The name of the processing job.
        public let processingJobName: String?
        /// The status of the processing job.
        public let processingJobStatus: ProcessingJobStatus?
        public let processingOutputConfig: ProcessingOutputConfig?
        public let processingResources: ProcessingResources?
        /// The time that the processing job started.
        public let processingStartTime: TimeStamp?
        /// The ARN of the role used to create the processing job.
        public let roleArn: String?
        public let stoppingCondition: ProcessingStoppingCondition?
        /// An array of key-value pairs. For more information, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
        public let tags: [Tag]?
        /// The ARN of the training job associated with this processing job.
        public let trainingJobArn: String?

        public init(appSpecification: AppSpecification? = nil, autoMLJobArn: String? = nil, creationTime: TimeStamp? = nil, environment: [String: String]? = nil, exitMessage: String? = nil, experimentConfig: ExperimentConfig? = nil, failureReason: String? = nil, lastModifiedTime: TimeStamp? = nil, monitoringScheduleArn: String? = nil, networkConfig: NetworkConfig? = nil, processingEndTime: TimeStamp? = nil, processingInputs: [ProcessingInput]? = nil, processingJobArn: String? = nil, processingJobName: String? = nil, processingJobStatus: ProcessingJobStatus? = nil, processingOutputConfig: ProcessingOutputConfig? = nil, processingResources: ProcessingResources? = nil, processingStartTime: TimeStamp? = nil, roleArn: String? = nil, stoppingCondition: ProcessingStoppingCondition? = nil, tags: [Tag]? = nil, trainingJobArn: String? = nil) {
            self.appSpecification = appSpecification
            self.autoMLJobArn = autoMLJobArn
            self.creationTime = creationTime
            self.environment = environment
            self.exitMessage = exitMessage
            self.experimentConfig = experimentConfig
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.monitoringScheduleArn = monitoringScheduleArn
            self.networkConfig = networkConfig
            self.processingEndTime = processingEndTime
            self.processingInputs = processingInputs
            self.processingJobArn = processingJobArn
            self.processingJobName = processingJobName
            self.processingJobStatus = processingJobStatus
            self.processingOutputConfig = processingOutputConfig
            self.processingResources = processingResources
            self.processingStartTime = processingStartTime
            self.roleArn = roleArn
            self.stoppingCondition = stoppingCondition
            self.tags = tags
            self.trainingJobArn = trainingJobArn
        }

        private enum CodingKeys: String, CodingKey {
            case appSpecification = "AppSpecification"
            case autoMLJobArn = "AutoMLJobArn"
            case creationTime = "CreationTime"
            case environment = "Environment"
            case exitMessage = "ExitMessage"
            case experimentConfig = "ExperimentConfig"
            case failureReason = "FailureReason"
            case lastModifiedTime = "LastModifiedTime"
            case monitoringScheduleArn = "MonitoringScheduleArn"
            case networkConfig = "NetworkConfig"
            case processingEndTime = "ProcessingEndTime"
            case processingInputs = "ProcessingInputs"
            case processingJobArn = "ProcessingJobArn"
            case processingJobName = "ProcessingJobName"
            case processingJobStatus = "ProcessingJobStatus"
            case processingOutputConfig = "ProcessingOutputConfig"
            case processingResources = "ProcessingResources"
            case processingStartTime = "ProcessingStartTime"
            case roleArn = "RoleArn"
            case stoppingCondition = "StoppingCondition"
            case tags = "Tags"
            case trainingJobArn = "TrainingJobArn"
        }
    }

    public struct ProcessingJobSummary: AWSDecodableShape {
        /// The time at which the processing job was created.
        public let creationTime: TimeStamp
        /// An optional string, up to one KB in size, that contains metadata from the processing container when the processing job exits.
        public let exitMessage: String?
        /// A string, up to one KB in size, that contains the reason a processing job failed, if it failed.
        public let failureReason: String?
        /// A timestamp that indicates the last time the processing job was modified.
        public let lastModifiedTime: TimeStamp?
        /// The time at which the processing job completed.
        public let processingEndTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the processing job..
        public let processingJobArn: String
        /// The name of the processing job.
        public let processingJobName: String
        /// The status of the processing job.
        public let processingJobStatus: ProcessingJobStatus

        public init(creationTime: TimeStamp, exitMessage: String? = nil, failureReason: String? = nil, lastModifiedTime: TimeStamp? = nil, processingEndTime: TimeStamp? = nil, processingJobArn: String, processingJobName: String, processingJobStatus: ProcessingJobStatus) {
            self.creationTime = creationTime
            self.exitMessage = exitMessage
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.processingEndTime = processingEndTime
            self.processingJobArn = processingJobArn
            self.processingJobName = processingJobName
            self.processingJobStatus = processingJobStatus
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case exitMessage = "ExitMessage"
            case failureReason = "FailureReason"
            case lastModifiedTime = "LastModifiedTime"
            case processingEndTime = "ProcessingEndTime"
            case processingJobArn = "ProcessingJobArn"
            case processingJobName = "ProcessingJobName"
            case processingJobStatus = "ProcessingJobStatus"
        }
    }

    public struct ProcessingOutput: AWSEncodableShape & AWSDecodableShape {
        /// The name for the processing job output.
        public let outputName: String
        /// Configuration for processing job outputs in Amazon S3.
        public let s3Output: ProcessingS3Output

        public init(outputName: String, s3Output: ProcessingS3Output) {
            self.outputName = outputName
            self.s3Output = s3Output
        }

        public func validate(name: String) throws {
            try self.s3Output.validate(name: "\(name).s3Output")
        }

        private enum CodingKeys: String, CodingKey {
            case outputName = "OutputName"
            case s3Output = "S3Output"
        }
    }

    public struct ProcessingOutputConfig: AWSEncodableShape & AWSDecodableShape {
        /// The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the processing job output. KmsKeyId can be an ID of a KMS key, ARN of a KMS key, alias of a KMS key, or alias of a KMS key. The KmsKeyId is applied to all outputs.
        public let kmsKeyId: String?
        /// Output configuration information for a processing job.
        public let outputs: [ProcessingOutput]

        public init(kmsKeyId: String? = nil, outputs: [ProcessingOutput]) {
            self.kmsKeyId = kmsKeyId
            self.outputs = outputs
        }

        public func validate(name: String) throws {
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, pattern: ".*")
            try self.outputs.forEach {
                try $0.validate(name: "\(name).outputs[]")
            }
            try self.validate(self.outputs, name: "outputs", parent: name, max: 10)
            try self.validate(self.outputs, name: "outputs", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case outputs = "Outputs"
        }
    }

    public struct ProcessingResources: AWSEncodableShape & AWSDecodableShape {
        /// The configuration for the resources in a cluster used to run the processing job.
        public let clusterConfig: ProcessingClusterConfig

        public init(clusterConfig: ProcessingClusterConfig) {
            self.clusterConfig = clusterConfig
        }

        public func validate(name: String) throws {
            try self.clusterConfig.validate(name: "\(name).clusterConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case clusterConfig = "ClusterConfig"
        }
    }

    public struct ProcessingS3Input: AWSEncodableShape & AWSDecodableShape {
        /// The local path to the Amazon S3 bucket where you want Amazon SageMaker to download the inputs to run a processing job. LocalPath is an absolute path to the input data.
        public let localPath: String
        /// Whether to use Gzip compression for Amazon S3 storage.
        public let s3CompressionType: ProcessingS3CompressionType?
        /// Whether the data stored in Amazon S3 is FullyReplicated or ShardedByS3Key.
        public let s3DataDistributionType: ProcessingS3DataDistributionType?
        /// Whether you use an S3Prefix or a ManifestFile for the data type. If you choose S3Prefix, S3Uri identifies a key name prefix. Amazon SageMaker uses all objects with the specified key name prefix for the processing job. If you choose ManifestFile, S3Uri identifies an object that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for the processing job.
        public let s3DataType: ProcessingS3DataType
        /// Whether to use File or Pipe input mode. In File mode, Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used input mode. In Pipe mode, Amazon SageMaker streams input data from the source directly to your algorithm without using the EBS volume.
        public let s3InputMode: ProcessingS3InputMode
        /// The URI for the Amazon S3 storage where you want Amazon SageMaker to download the artifacts needed to run a processing job.
        public let s3Uri: String

        public init(localPath: String, s3CompressionType: ProcessingS3CompressionType? = nil, s3DataDistributionType: ProcessingS3DataDistributionType? = nil, s3DataType: ProcessingS3DataType, s3InputMode: ProcessingS3InputMode, s3Uri: String) {
            self.localPath = localPath
            self.s3CompressionType = s3CompressionType
            self.s3DataDistributionType = s3DataDistributionType
            self.s3DataType = s3DataType
            self.s3InputMode = s3InputMode
            self.s3Uri = s3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.localPath, name: "localPath", parent: name, max: 256)
            try self.validate(self.localPath, name: "localPath", parent: name, pattern: ".*")
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, max: 1024)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case localPath = "LocalPath"
            case s3CompressionType = "S3CompressionType"
            case s3DataDistributionType = "S3DataDistributionType"
            case s3DataType = "S3DataType"
            case s3InputMode = "S3InputMode"
            case s3Uri = "S3Uri"
        }
    }

    public struct ProcessingS3Output: AWSEncodableShape & AWSDecodableShape {
        /// The local path to the Amazon S3 bucket where you want Amazon SageMaker to save the results of an processing job. LocalPath is an absolute path to the input data.
        public let localPath: String
        /// Whether to upload the results of the processing job continuously or after the job completes.
        public let s3UploadMode: ProcessingS3UploadMode
        /// A URI that identifies the Amazon S3 bucket where you want Amazon SageMaker to save the results of a processing job.
        public let s3Uri: String

        public init(localPath: String, s3UploadMode: ProcessingS3UploadMode, s3Uri: String) {
            self.localPath = localPath
            self.s3UploadMode = s3UploadMode
            self.s3Uri = s3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.localPath, name: "localPath", parent: name, max: 256)
            try self.validate(self.localPath, name: "localPath", parent: name, pattern: ".*")
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, max: 1024)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case localPath = "LocalPath"
            case s3UploadMode = "S3UploadMode"
            case s3Uri = "S3Uri"
        }
    }

    public struct ProcessingStoppingCondition: AWSEncodableShape & AWSDecodableShape {
        /// Specifies the maximum runtime in seconds.
        public let maxRuntimeInSeconds: Int

        public init(maxRuntimeInSeconds: Int) {
            self.maxRuntimeInSeconds = maxRuntimeInSeconds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxRuntimeInSeconds, name: "maxRuntimeInSeconds", parent: name, max: 604_800)
            try self.validate(self.maxRuntimeInSeconds, name: "maxRuntimeInSeconds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxRuntimeInSeconds = "MaxRuntimeInSeconds"
        }
    }

    public struct ProductionVariant: AWSEncodableShape & AWSDecodableShape {
        /// The size of the Elastic Inference (EI) instance to use for the production variant. EI instances provide on-demand GPU computing for inference. For more information, see Using Elastic Inference in Amazon SageMaker.
        public let acceleratorType: ProductionVariantAcceleratorType?
        /// Number of instances to launch initially.
        public let initialInstanceCount: Int
        /// Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. The traffic to a production variant is determined by the ratio of the VariantWeight to the sum of all VariantWeight values across all ProductionVariants. If unspecified, it defaults to 1.0.
        public let initialVariantWeight: Float?
        /// The ML compute instance type.
        public let instanceType: ProductionVariantInstanceType
        /// The name of the model that you want to host. This is the name that you specified when creating the model.
        public let modelName: String
        /// The name of the production variant.
        public let variantName: String

        public init(acceleratorType: ProductionVariantAcceleratorType? = nil, initialInstanceCount: Int, initialVariantWeight: Float? = nil, instanceType: ProductionVariantInstanceType, modelName: String, variantName: String) {
            self.acceleratorType = acceleratorType
            self.initialInstanceCount = initialInstanceCount
            self.initialVariantWeight = initialVariantWeight
            self.instanceType = instanceType
            self.modelName = modelName
            self.variantName = variantName
        }

        public func validate(name: String) throws {
            try self.validate(self.initialInstanceCount, name: "initialInstanceCount", parent: name, min: 1)
            try self.validate(self.initialVariantWeight, name: "initialVariantWeight", parent: name, min: 0)
            try self.validate(self.modelName, name: "modelName", parent: name, max: 63)
            try self.validate(self.modelName, name: "modelName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.variantName, name: "variantName", parent: name, max: 63)
            try self.validate(self.variantName, name: "variantName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case acceleratorType = "AcceleratorType"
            case initialInstanceCount = "InitialInstanceCount"
            case initialVariantWeight = "InitialVariantWeight"
            case instanceType = "InstanceType"
            case modelName = "ModelName"
            case variantName = "VariantName"
        }
    }

    public struct ProductionVariantSummary: AWSDecodableShape {
        /// The number of instances associated with the variant.
        public let currentInstanceCount: Int?
        /// The weight associated with the variant.
        public let currentWeight: Float?
        /// An array of DeployedImage objects that specify the Amazon EC2 Container Registry paths of the inference images deployed on instances of this ProductionVariant.
        public let deployedImages: [DeployedImage]?
        /// The number of instances requested in the UpdateEndpointWeightsAndCapacities request.
        public let desiredInstanceCount: Int?
        /// The requested weight, as specified in the UpdateEndpointWeightsAndCapacities request.
        public let desiredWeight: Float?
        /// The name of the variant.
        public let variantName: String

        public init(currentInstanceCount: Int? = nil, currentWeight: Float? = nil, deployedImages: [DeployedImage]? = nil, desiredInstanceCount: Int? = nil, desiredWeight: Float? = nil, variantName: String) {
            self.currentInstanceCount = currentInstanceCount
            self.currentWeight = currentWeight
            self.deployedImages = deployedImages
            self.desiredInstanceCount = desiredInstanceCount
            self.desiredWeight = desiredWeight
            self.variantName = variantName
        }

        private enum CodingKeys: String, CodingKey {
            case currentInstanceCount = "CurrentInstanceCount"
            case currentWeight = "CurrentWeight"
            case deployedImages = "DeployedImages"
            case desiredInstanceCount = "DesiredInstanceCount"
            case desiredWeight = "DesiredWeight"
            case variantName = "VariantName"
        }
    }

    public struct PropertyNameQuery: AWSEncodableShape {
        /// Text that begins a property's name.
        public let propertyNameHint: String

        public init(propertyNameHint: String) {
            self.propertyNameHint = propertyNameHint
        }

        public func validate(name: String) throws {
            try self.validate(self.propertyNameHint, name: "propertyNameHint", parent: name, max: 100)
            try self.validate(self.propertyNameHint, name: "propertyNameHint", parent: name, min: 0)
            try self.validate(self.propertyNameHint, name: "propertyNameHint", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case propertyNameHint = "PropertyNameHint"
        }
    }

    public struct PropertyNameSuggestion: AWSDecodableShape {
        /// A suggested property name based on what you entered in the search textbox in the Amazon SageMaker console.
        public let propertyName: String?

        public init(propertyName: String? = nil) {
            self.propertyName = propertyName
        }

        private enum CodingKeys: String, CodingKey {
            case propertyName = "PropertyName"
        }
    }

    public struct PublicWorkforceTaskPrice: AWSEncodableShape & AWSDecodableShape {
        /// Defines the amount of money paid to an Amazon Mechanical Turk worker in United States dollars.
        public let amountInUsd: USD?

        public init(amountInUsd: USD? = nil) {
            self.amountInUsd = amountInUsd
        }

        public func validate(name: String) throws {
            try self.amountInUsd?.validate(name: "\(name).amountInUsd")
        }

        private enum CodingKeys: String, CodingKey {
            case amountInUsd = "AmountInUsd"
        }
    }

    public struct RenderUiTemplateRequest: AWSEncodableShape {
        /// The HumanTaskUiArn of the worker UI that you want to render. Do not provide a HumanTaskUiArn if you use the UiTemplate parameter. See a list of available Human Ui Amazon Resource Names (ARNs) in UiConfig.
        public let humanTaskUiArn: String?
        /// The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the template.
        public let roleArn: String
        /// A RenderableTask object containing a representative task to render.
        public let task: RenderableTask
        /// A Template object containing the worker UI template to render.
        public let uiTemplate: UiTemplate?

        public init(humanTaskUiArn: String? = nil, roleArn: String, task: RenderableTask, uiTemplate: UiTemplate? = nil) {
            self.humanTaskUiArn = humanTaskUiArn
            self.roleArn = roleArn
            self.task = task
            self.uiTemplate = uiTemplate
        }

        public func validate(name: String) throws {
            try self.validate(self.humanTaskUiArn, name: "humanTaskUiArn", parent: name, max: 1024)
            try self.validate(self.humanTaskUiArn, name: "humanTaskUiArn", parent: name, pattern: "arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:human-task-ui/.*")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 2048)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 20)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
            try self.task.validate(name: "\(name).task")
            try self.uiTemplate?.validate(name: "\(name).uiTemplate")
        }

        private enum CodingKeys: String, CodingKey {
            case humanTaskUiArn = "HumanTaskUiArn"
            case roleArn = "RoleArn"
            case task = "Task"
            case uiTemplate = "UiTemplate"
        }
    }

    public struct RenderUiTemplateResponse: AWSDecodableShape {
        /// A list of one or more RenderingError objects if any were encountered while rendering the template. If there were no errors, the list is empty.
        public let errors: [RenderingError]
        /// A Liquid template that renders the HTML for the worker UI.
        public let renderedContent: String

        public init(errors: [RenderingError], renderedContent: String) {
            self.errors = errors
            self.renderedContent = renderedContent
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "Errors"
            case renderedContent = "RenderedContent"
        }
    }

    public struct RenderableTask: AWSEncodableShape {
        /// A JSON object that contains values for the variables defined in the template. It is made available to the template under the substitution variable task.input. For example, if you define a variable task.input.text in your template, you can supply the variable in the JSON object as "text": "sample text".
        public let input: String

        public init(input: String) {
            self.input = input
        }

        public func validate(name: String) throws {
            try self.validate(self.input, name: "input", parent: name, max: 128_000)
            try self.validate(self.input, name: "input", parent: name, min: 2)
            try self.validate(self.input, name: "input", parent: name, pattern: "[\\S\\s]+")
        }

        private enum CodingKeys: String, CodingKey {
            case input = "Input"
        }
    }

    public struct RenderingError: AWSDecodableShape {
        /// A unique identifier for a specific class of errors.
        public let code: String
        /// A human-readable message describing the error.
        public let message: String

        public init(code: String, message: String) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public struct ResolvedAttributes: AWSDecodableShape {
        public let autoMLJobObjective: AutoMLJobObjective?
        public let completionCriteria: AutoMLJobCompletionCriteria?
        /// The problem type.
        public let problemType: ProblemType?

        public init(autoMLJobObjective: AutoMLJobObjective? = nil, completionCriteria: AutoMLJobCompletionCriteria? = nil, problemType: ProblemType? = nil) {
            self.autoMLJobObjective = autoMLJobObjective
            self.completionCriteria = completionCriteria
            self.problemType = problemType
        }

        private enum CodingKeys: String, CodingKey {
            case autoMLJobObjective = "AutoMLJobObjective"
            case completionCriteria = "CompletionCriteria"
            case problemType = "ProblemType"
        }
    }

    public struct ResourceConfig: AWSEncodableShape & AWSDecodableShape {
        /// The number of ML compute instances to use. For distributed training, provide a value greater than 1.
        public let instanceCount: Int
        /// The ML compute instance type.
        public let instanceType: TrainingInstanceType
        /// The AWS KMS key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the training job.  Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a VolumeKmsKeyId when using an instance type with local storage. For a list of instance types that support local instance storage, see Instance Store Volumes. For more information about local instance storage encryption, see SSD Instance Store Volumes.  The VolumeKmsKeyId can be in any of the following formats:   // KMS Key ID  "1234abcd-12ab-34cd-56ef-1234567890ab"    // Amazon Resource Name (ARN) of a KMS Key  "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public let volumeKmsKeyId: String?
        /// The size of the ML storage volume that you want to provision.  ML storage volumes store model artifacts and incremental states. Training algorithms might also use the ML storage volume for scratch space. If you want to store the training data in the ML storage volume, choose File as the TrainingInputMode in the algorithm specification.  You must specify sufficient ML storage for your scenario.    Amazon SageMaker supports only the General Purpose SSD (gp2) ML storage volume type.    Certain Nitro-based instances include local storage with a fixed total size, dependent on the instance type. When using these instances for training, Amazon SageMaker mounts the local instance storage instead of Amazon EBS gp2 storage. You can't request a VolumeSizeInGB greater than the total size of the local instance storage. For a list of instance types that support local instance storage, including the total size per instance type, see Instance Store Volumes.
        public let volumeSizeInGB: Int

        public init(instanceCount: Int, instanceType: TrainingInstanceType, volumeKmsKeyId: String? = nil, volumeSizeInGB: Int) {
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.volumeKmsKeyId = volumeKmsKeyId
            self.volumeSizeInGB = volumeSizeInGB
        }

        public func validate(name: String) throws {
            try self.validate(self.instanceCount, name: "instanceCount", parent: name, min: 1)
            try self.validate(self.volumeKmsKeyId, name: "volumeKmsKeyId", parent: name, max: 2048)
            try self.validate(self.volumeKmsKeyId, name: "volumeKmsKeyId", parent: name, pattern: ".*")
            try self.validate(self.volumeSizeInGB, name: "volumeSizeInGB", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "InstanceCount"
            case instanceType = "InstanceType"
            case volumeKmsKeyId = "VolumeKmsKeyId"
            case volumeSizeInGB = "VolumeSizeInGB"
        }
    }

    public struct ResourceLimits: AWSEncodableShape & AWSDecodableShape {
        /// The maximum number of training jobs that a hyperparameter tuning job can launch.
        public let maxNumberOfTrainingJobs: Int
        /// The maximum number of concurrent training jobs that a hyperparameter tuning job can launch.
        public let maxParallelTrainingJobs: Int

        public init(maxNumberOfTrainingJobs: Int, maxParallelTrainingJobs: Int) {
            self.maxNumberOfTrainingJobs = maxNumberOfTrainingJobs
            self.maxParallelTrainingJobs = maxParallelTrainingJobs
        }

        public func validate(name: String) throws {
            try self.validate(self.maxNumberOfTrainingJobs, name: "maxNumberOfTrainingJobs", parent: name, min: 1)
            try self.validate(self.maxParallelTrainingJobs, name: "maxParallelTrainingJobs", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxNumberOfTrainingJobs = "MaxNumberOfTrainingJobs"
            case maxParallelTrainingJobs = "MaxParallelTrainingJobs"
        }
    }

    public struct ResourceSpec: AWSEncodableShape & AWSDecodableShape {
        /// The instance type.
        public let instanceType: AppInstanceType?
        /// The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        public let sageMakerImageArn: String?

        public init(instanceType: AppInstanceType? = nil, sageMakerImageArn: String? = nil) {
            self.instanceType = instanceType
            self.sageMakerImageArn = sageMakerImageArn
        }

        public func validate(name: String) throws {
            try self.validate(self.sageMakerImageArn, name: "sageMakerImageArn", parent: name, max: 256)
            try self.validate(self.sageMakerImageArn, name: "sageMakerImageArn", parent: name, pattern: "^arn:aws(-[\\w]+)*:sagemaker:.+:[0-9]{12}:image/[a-z0-9]([-.]?[a-z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case sageMakerImageArn = "SageMakerImageArn"
        }
    }

    public struct RetentionPolicy: AWSEncodableShape {
        /// The default is Retain, which specifies to keep the data stored on the EFS volume. Specify Delete to delete the data stored on the EFS volume.
        public let homeEfsFileSystem: RetentionType?

        public init(homeEfsFileSystem: RetentionType? = nil) {
            self.homeEfsFileSystem = homeEfsFileSystem
        }

        private enum CodingKeys: String, CodingKey {
            case homeEfsFileSystem = "HomeEfsFileSystem"
        }
    }

    public struct S3DataSource: AWSEncodableShape & AWSDecodableShape {
        /// A list of one or more attribute names to use that are found in a specified augmented manifest file.
        public let attributeNames: [String]?
        /// If you want Amazon SageMaker to replicate the entire dataset on each ML compute instance that is launched for model training, specify FullyReplicated.  If you want Amazon SageMaker to replicate a subset of data on each ML compute instance that is launched for model training, specify ShardedByS3Key. If there are n ML compute instances launched for a training job, each instance gets approximately 1/n of the number of S3 objects. In this case, model training on each machine uses only the subset of training data.  Don't choose more ML compute instances for training than available S3 objects. If you do, some nodes won't get any data and you will pay for nodes that aren't getting any training data. This applies in both File and Pipe modes. Keep this in mind when developing algorithms.  In distributed training, where you use multiple ML compute EC2 instances, you might choose ShardedByS3Key. If the algorithm requires copying training data to the ML storage volume (when TrainingInputMode is set to File), this copies 1/n of the number of objects.
        public let s3DataDistributionType: S3DataDistribution?
        /// If you choose S3Prefix, S3Uri identifies a key name prefix. Amazon SageMaker uses all objects that match the specified key name prefix for model training.  If you choose ManifestFile, S3Uri identifies an object that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for model training.  If you choose AugmentedManifestFile, S3Uri identifies an object that is an augmented manifest file in JSON lines format. This file contains the data you want to use for model training. AugmentedManifestFile can only be used if the Channel's input mode is Pipe.
        public let s3DataType: S3DataType
        /// Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest. For example:     A key name prefix might look like this: s3://bucketname/exampleprefix     A manifest might look like this: s3://bucketname/example.manifest   A manifest is an S3 object which is a JSON file consisting of an array of elements. The first element is a prefix which is followed by one or more suffixes. SageMaker appends the suffix elements to the prefix to get a full set of S3Uri. Note that the prefix must be a valid non-empty S3Uri that precludes users from specifying a manifest whose individual S3Uri is sourced from different S3 buckets.  The following code example shows a valid manifest format:   [ {"prefix": "s3://customer_bucket/some/prefix/"},    "relative/path/to/custdata-1",    "relative/path/custdata-2",    ...    "relative/path/custdata-N"   ]   This JSON is equivalent to the following S3Uri list:  s3://customer_bucket/some/prefix/relative/path/to/custdata-1   s3://customer_bucket/some/prefix/relative/path/custdata-2   ...   s3://customer_bucket/some/prefix/relative/path/custdata-N  The complete set of S3Uri in this manifest is the input data for the channel for this data source. The object that each S3Uri points to must be readable by the IAM role that Amazon SageMaker uses to perform tasks on your behalf.
        public let s3Uri: String

        public init(attributeNames: [String]? = nil, s3DataDistributionType: S3DataDistribution? = nil, s3DataType: S3DataType, s3Uri: String) {
            self.attributeNames = attributeNames
            self.s3DataDistributionType = s3DataDistributionType
            self.s3DataType = s3DataType
            self.s3Uri = s3Uri
        }

        public func validate(name: String) throws {
            try self.attributeNames?.forEach {
                try validate($0, name: "attributeNames[]", parent: name, max: 256)
                try validate($0, name: "attributeNames[]", parent: name, min: 1)
                try validate($0, name: "attributeNames[]", parent: name, pattern: ".+")
            }
            try self.validate(self.attributeNames, name: "attributeNames", parent: name, max: 16)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, max: 1024)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "AttributeNames"
            case s3DataDistributionType = "S3DataDistributionType"
            case s3DataType = "S3DataType"
            case s3Uri = "S3Uri"
        }
    }

    public struct ScheduleConfig: AWSEncodableShape & AWSDecodableShape {
        /// A cron expression that describes details about the monitoring schedule. Currently the only supported cron expressions are:   If you want to set the job to start every hour, please use the following:  Hourly: cron(0 * ? * * *)    If you want to start the job daily:  cron(0 [00-23] ? * * *)    For example, the following are valid cron expressions:   Daily at noon UTC: cron(0 12 ? * * *)    Daily at midnight UTC: cron(0 0 ? * * *)    To support running every 6, 12 hours, the following are also supported:  cron(0 [00-23]/[01-24] ? * * *)  For example, the following are valid cron expressions:   Every 12 hours, starting at 5pm UTC: cron(0 17/12 ? * * *)    Every two hours starting at midnight: cron(0 0/2 ? * * *)       Even though the cron expression is set to start at 5PM UTC, note that there could be a delay of 0-20 minutes from the actual requested time to run the execution.    We recommend that if you would like a daily schedule, you do not provide this parameter. Amazon SageMaker will pick a time for running every day.
        public let scheduleExpression: String

        public init(scheduleExpression: String) {
            self.scheduleExpression = scheduleExpression
        }

        public func validate(name: String) throws {
            try self.validate(self.scheduleExpression, name: "scheduleExpression", parent: name, max: 256)
            try self.validate(self.scheduleExpression, name: "scheduleExpression", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case scheduleExpression = "ScheduleExpression"
        }
    }

    public class SearchExpression: AWSEncodableShape {
        /// A list of filter objects.
        public let filters: [Filter]?
        /// A list of nested filter objects.
        public let nestedFilters: [NestedFilters]?
        /// A Boolean operator used to evaluate the search expression. If you want every conditional statement in all lists to be satisfied for the entire search expression to be true, specify And. If only a single conditional statement needs to be true for the entire search expression to be true, specify Or. The default value is And.
        public let `operator`: BooleanOperator?
        /// A list of search expression objects.
        public let subExpressions: [SearchExpression]?

        public init(filters: [Filter]? = nil, nestedFilters: [NestedFilters]? = nil, operator: BooleanOperator? = nil, subExpressions: [SearchExpression]? = nil) {
            self.filters = filters
            self.nestedFilters = nestedFilters
            self.`operator` = `operator`
            self.subExpressions = subExpressions
        }

        public func validate(name: String) throws {
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try self.validate(self.filters, name: "filters", parent: name, max: 20)
            try self.validate(self.filters, name: "filters", parent: name, min: 1)
            try self.nestedFilters?.forEach {
                try $0.validate(name: "\(name).nestedFilters[]")
            }
            try self.validate(self.nestedFilters, name: "nestedFilters", parent: name, max: 20)
            try self.validate(self.nestedFilters, name: "nestedFilters", parent: name, min: 1)
            try self.subExpressions?.forEach {
                try $0.validate(name: "\(name).subExpressions[]")
            }
            try self.validate(self.subExpressions, name: "subExpressions", parent: name, max: 20)
            try self.validate(self.subExpressions, name: "subExpressions", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case nestedFilters = "NestedFilters"
            case `operator` = "Operator"
            case subExpressions = "SubExpressions"
        }
    }

    public struct SearchRecord: AWSDecodableShape {
        /// The properties of an experiment.
        public let experiment: Experiment?
        /// The properties of a training job.
        public let trainingJob: TrainingJob?
        /// The properties of a trial.
        public let trial: Trial?
        /// The properties of a trial component.
        public let trialComponent: TrialComponent?

        public init(experiment: Experiment? = nil, trainingJob: TrainingJob? = nil, trial: Trial? = nil, trialComponent: TrialComponent? = nil) {
            self.experiment = experiment
            self.trainingJob = trainingJob
            self.trial = trial
            self.trialComponent = trialComponent
        }

        private enum CodingKeys: String, CodingKey {
            case experiment = "Experiment"
            case trainingJob = "TrainingJob"
            case trial = "Trial"
            case trialComponent = "TrialComponent"
        }
    }

    public struct SearchRequest: AWSEncodableShape {
        /// The maximum number of results to return.
        public let maxResults: Int?
        /// If more than MaxResults resources match the specified SearchExpression, the response includes a NextToken. The NextToken can be passed to the next SearchRequest to continue retrieving results.
        public let nextToken: String?
        /// The name of the Amazon SageMaker resource to search for.
        public let resource: ResourceType
        /// A Boolean conditional statement. Resources must satisfy this condition to be included in search results. You must provide at least one subexpression, filter, or nested filter. The maximum number of recursive SubExpressions, NestedFilters, and Filters that can be included in a SearchExpression object is 50.
        public let searchExpression: SearchExpression?
        /// The name of the resource property used to sort the SearchResults. The default is LastModifiedTime.
        public let sortBy: String?
        /// How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending.
        public let sortOrder: SearchSortOrder?

        public init(maxResults: Int? = nil, nextToken: String? = nil, resource: ResourceType, searchExpression: SearchExpression? = nil, sortBy: String? = nil, sortOrder: SearchSortOrder? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resource = resource
            self.searchExpression = searchExpression
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
            try self.searchExpression?.validate(name: "\(name).searchExpression")
            try self.validate(self.sortBy, name: "sortBy", parent: name, max: 255)
            try self.validate(self.sortBy, name: "sortBy", parent: name, min: 1)
            try self.validate(self.sortBy, name: "sortBy", parent: name, pattern: ".+")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case resource = "Resource"
            case searchExpression = "SearchExpression"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
        }
    }

    public struct SearchResponse: AWSDecodableShape {
        /// If the result of the previous Search request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request.
        public let nextToken: String?
        /// A list of SearchRecord objects.
        public let results: [SearchRecord]?

        public init(nextToken: String? = nil, results: [SearchRecord]? = nil) {
            self.nextToken = nextToken
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case results = "Results"
        }
    }

    public struct SecondaryStatusTransition: AWSDecodableShape {
        /// A timestamp that shows when the training job transitioned out of this secondary status state into another secondary status state or when the training job has ended.
        public let endTime: TimeStamp?
        /// A timestamp that shows when the training job transitioned to the current secondary status state.
        public let startTime: TimeStamp
        /// Contains a secondary status information from a training job. Status might be one of the following secondary statuses:  InProgress     Starting - Starting the training job.    Downloading - An optional stage for algorithms that support File training input mode. It indicates that data is being downloaded to the ML storage volumes.    Training - Training is in progress.    Uploading - Training is complete and the model artifacts are being uploaded to the S3 location.    Completed     Completed - The training job has completed.    Failed     Failed - The training job has failed. The reason for the failure is returned in the FailureReason field of DescribeTrainingJobResponse.    Stopped     MaxRuntimeExceeded - The job stopped because it exceeded the maximum allowed runtime.    Stopped - The training job has stopped.    Stopping     Stopping - Stopping the training job.     We no longer support the following secondary statuses:    LaunchingMLInstances     PreparingTrainingStack     DownloadingTrainingImage
        public let status: SecondaryStatus
        /// A detailed description of the progress within a secondary status.  Amazon SageMaker provides secondary statuses and status messages that apply to each of them:  Starting    Starting the training job.   Launching requested ML instances.   Insufficient capacity error from EC2 while launching instances, retrying!   Launched instance was unhealthy, replacing it!   Preparing the instances for training.    Training    Downloading the training image.   Training image download completed. Training in progress.      Status messages are subject to change. Therefore, we recommend not including them in code that programmatically initiates actions. For examples, don't use status messages in if statements.  To have an overview of your training job's progress, view TrainingJobStatus and SecondaryStatus in DescribeTrainingJob, and StatusMessage together. For example, at the start of a training job, you might see the following:    TrainingJobStatus - InProgress    SecondaryStatus - Training    StatusMessage - Downloading the training image
        public let statusMessage: String?

        public init(endTime: TimeStamp? = nil, startTime: TimeStamp, status: SecondaryStatus, statusMessage: String? = nil) {
            self.endTime = endTime
            self.startTime = startTime
            self.status = status
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case startTime = "StartTime"
            case status = "Status"
            case statusMessage = "StatusMessage"
        }
    }

    public struct SharingSettings: AWSEncodableShape & AWSDecodableShape {
        /// Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
        public let notebookOutputOption: NotebookOutputOption?
        /// When NotebookOutputOption is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        public let s3KmsKeyId: String?
        /// When NotebookOutputOption is Allowed, the Amazon S3 bucket used to save the notebook cell output. If S3OutputPath isn't specified, a default bucket is used.
        public let s3OutputPath: String?

        public init(notebookOutputOption: NotebookOutputOption? = nil, s3KmsKeyId: String? = nil, s3OutputPath: String? = nil) {
            self.notebookOutputOption = notebookOutputOption
            self.s3KmsKeyId = s3KmsKeyId
            self.s3OutputPath = s3OutputPath
        }

        public func validate(name: String) throws {
            try self.validate(self.s3KmsKeyId, name: "s3KmsKeyId", parent: name, max: 2048)
            try self.validate(self.s3KmsKeyId, name: "s3KmsKeyId", parent: name, pattern: ".*")
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, max: 1024)
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case notebookOutputOption = "NotebookOutputOption"
            case s3KmsKeyId = "S3KmsKeyId"
            case s3OutputPath = "S3OutputPath"
        }
    }

    public struct ShuffleConfig: AWSEncodableShape & AWSDecodableShape {
        /// Determines the shuffling order in ShuffleConfig value.
        public let seed: Int64

        public init(seed: Int64) {
            self.seed = seed
        }

        private enum CodingKeys: String, CodingKey {
            case seed = "Seed"
        }
    }

    public struct SourceAlgorithm: AWSEncodableShape & AWSDecodableShape {
        /// The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
        public let algorithmName: String
        /// The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        public let modelDataUrl: String?

        public init(algorithmName: String, modelDataUrl: String? = nil) {
            self.algorithmName = algorithmName
            self.modelDataUrl = modelDataUrl
        }

        public func validate(name: String) throws {
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, max: 170)
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, min: 1)
            try self.validate(self.algorithmName, name: "algorithmName", parent: name, pattern: "(arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:[a-z\\-]*\\/)?([a-zA-Z0-9]([a-zA-Z0-9-]){0,62})(?<!-)$")
            try self.validate(self.modelDataUrl, name: "modelDataUrl", parent: name, max: 1024)
            try self.validate(self.modelDataUrl, name: "modelDataUrl", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmName = "AlgorithmName"
            case modelDataUrl = "ModelDataUrl"
        }
    }

    public struct SourceAlgorithmSpecification: AWSEncodableShape & AWSDecodableShape {
        /// A list of the algorithms that were used to create a model package.
        public let sourceAlgorithms: [SourceAlgorithm]

        public init(sourceAlgorithms: [SourceAlgorithm]) {
            self.sourceAlgorithms = sourceAlgorithms
        }

        public func validate(name: String) throws {
            try self.sourceAlgorithms.forEach {
                try $0.validate(name: "\(name).sourceAlgorithms[]")
            }
            try self.validate(self.sourceAlgorithms, name: "sourceAlgorithms", parent: name, max: 1)
            try self.validate(self.sourceAlgorithms, name: "sourceAlgorithms", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case sourceAlgorithms = "SourceAlgorithms"
        }
    }

    public struct SourceIpConfig: AWSEncodableShape & AWSDecodableShape {
        /// A list of one to ten Classless Inter-Domain Routing (CIDR) values. Maximum: Ten CIDR values  The following Length Constraints apply to individual CIDR values in the CIDR value list.
        public let cidrs: [String]

        public init(cidrs: [String]) {
            self.cidrs = cidrs
        }

        public func validate(name: String) throws {
            try self.cidrs.forEach {
                try validate($0, name: "cidrs[]", parent: name, max: 64)
                try validate($0, name: "cidrs[]", parent: name, min: 4)
                try validate($0, name: "cidrs[]", parent: name, pattern: "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))$)|(^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\\/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9]))$)")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case cidrs = "Cidrs"
        }
    }

    public struct StartMonitoringScheduleRequest: AWSEncodableShape {
        /// The name of the schedule to start.
        public let monitoringScheduleName: String

        public init(monitoringScheduleName: String) {
            self.monitoringScheduleName = monitoringScheduleName
        }

        public func validate(name: String) throws {
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, max: 63)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, min: 1)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case monitoringScheduleName = "MonitoringScheduleName"
        }
    }

    public struct StartNotebookInstanceInput: AWSEncodableShape {
        /// The name of the notebook instance to start.
        public let notebookInstanceName: String

        public init(notebookInstanceName: String) {
            self.notebookInstanceName = notebookInstanceName
        }

        public func validate(name: String) throws {
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, max: 63)
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceName = "NotebookInstanceName"
        }
    }

    public struct StopAutoMLJobRequest: AWSEncodableShape {
        /// The name of the object you are requesting.
        public let autoMLJobName: String

        public init(autoMLJobName: String) {
            self.autoMLJobName = autoMLJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.autoMLJobName, name: "autoMLJobName", parent: name, max: 32)
            try self.validate(self.autoMLJobName, name: "autoMLJobName", parent: name, min: 1)
            try self.validate(self.autoMLJobName, name: "autoMLJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case autoMLJobName = "AutoMLJobName"
        }
    }

    public struct StopCompilationJobRequest: AWSEncodableShape {
        /// The name of the model compilation job to stop.
        public let compilationJobName: String

        public init(compilationJobName: String) {
            self.compilationJobName = compilationJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.compilationJobName, name: "compilationJobName", parent: name, max: 63)
            try self.validate(self.compilationJobName, name: "compilationJobName", parent: name, min: 1)
            try self.validate(self.compilationJobName, name: "compilationJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case compilationJobName = "CompilationJobName"
        }
    }

    public struct StopHyperParameterTuningJobRequest: AWSEncodableShape {
        /// The name of the tuning job to stop.
        public let hyperParameterTuningJobName: String

        public init(hyperParameterTuningJobName: String) {
            self.hyperParameterTuningJobName = hyperParameterTuningJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, max: 32)
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, min: 1)
            try self.validate(self.hyperParameterTuningJobName, name: "hyperParameterTuningJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        }
    }

    public struct StopLabelingJobRequest: AWSEncodableShape {
        /// The name of the labeling job to stop.
        public let labelingJobName: String

        public init(labelingJobName: String) {
            self.labelingJobName = labelingJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.labelingJobName, name: "labelingJobName", parent: name, max: 63)
            try self.validate(self.labelingJobName, name: "labelingJobName", parent: name, min: 1)
            try self.validate(self.labelingJobName, name: "labelingJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case labelingJobName = "LabelingJobName"
        }
    }

    public struct StopMonitoringScheduleRequest: AWSEncodableShape {
        /// The name of the schedule to stop.
        public let monitoringScheduleName: String

        public init(monitoringScheduleName: String) {
            self.monitoringScheduleName = monitoringScheduleName
        }

        public func validate(name: String) throws {
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, max: 63)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, min: 1)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case monitoringScheduleName = "MonitoringScheduleName"
        }
    }

    public struct StopNotebookInstanceInput: AWSEncodableShape {
        /// The name of the notebook instance to terminate.
        public let notebookInstanceName: String

        public init(notebookInstanceName: String) {
            self.notebookInstanceName = notebookInstanceName
        }

        public func validate(name: String) throws {
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, max: 63)
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceName = "NotebookInstanceName"
        }
    }

    public struct StopProcessingJobRequest: AWSEncodableShape {
        /// The name of the processing job to stop.
        public let processingJobName: String

        public init(processingJobName: String) {
            self.processingJobName = processingJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.processingJobName, name: "processingJobName", parent: name, max: 63)
            try self.validate(self.processingJobName, name: "processingJobName", parent: name, min: 1)
            try self.validate(self.processingJobName, name: "processingJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case processingJobName = "ProcessingJobName"
        }
    }

    public struct StopTrainingJobRequest: AWSEncodableShape {
        /// The name of the training job to stop.
        public let trainingJobName: String

        public init(trainingJobName: String) {
            self.trainingJobName = trainingJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.trainingJobName, name: "trainingJobName", parent: name, max: 63)
            try self.validate(self.trainingJobName, name: "trainingJobName", parent: name, min: 1)
            try self.validate(self.trainingJobName, name: "trainingJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case trainingJobName = "TrainingJobName"
        }
    }

    public struct StopTransformJobRequest: AWSEncodableShape {
        /// The name of the transform job to stop.
        public let transformJobName: String

        public init(transformJobName: String) {
            self.transformJobName = transformJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.transformJobName, name: "transformJobName", parent: name, max: 63)
            try self.validate(self.transformJobName, name: "transformJobName", parent: name, min: 1)
            try self.validate(self.transformJobName, name: "transformJobName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case transformJobName = "TransformJobName"
        }
    }

    public struct StoppingCondition: AWSEncodableShape & AWSDecodableShape {
        /// The maximum length of time, in seconds, that the training or compilation job can run. If job does not complete during this time, Amazon SageMaker ends the job. If value is not specified, default value is 1 day. The maximum value is 28 days.
        public let maxRuntimeInSeconds: Int?
        /// The maximum length of time, in seconds, how long you are willing to wait for a managed spot training job to complete. It is the amount of time spent waiting for Spot capacity plus the amount of time the training job runs. It must be equal to or greater than MaxRuntimeInSeconds.
        public let maxWaitTimeInSeconds: Int?

        public init(maxRuntimeInSeconds: Int? = nil, maxWaitTimeInSeconds: Int? = nil) {
            self.maxRuntimeInSeconds = maxRuntimeInSeconds
            self.maxWaitTimeInSeconds = maxWaitTimeInSeconds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxRuntimeInSeconds, name: "maxRuntimeInSeconds", parent: name, min: 1)
            try self.validate(self.maxWaitTimeInSeconds, name: "maxWaitTimeInSeconds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxRuntimeInSeconds = "MaxRuntimeInSeconds"
            case maxWaitTimeInSeconds = "MaxWaitTimeInSeconds"
        }
    }

    public struct SubscribedWorkteam: AWSDecodableShape {
        /// Marketplace product listing ID.
        public let listingId: String?
        /// The description of the vendor from the Amazon Marketplace.
        public let marketplaceDescription: String?
        /// The title of the service provided by the vendor in the Amazon Marketplace.
        public let marketplaceTitle: String?
        /// The name of the vendor in the Amazon Marketplace.
        public let sellerName: String?
        /// The Amazon Resource Name (ARN) of the vendor that you have subscribed.
        public let workteamArn: String

        public init(listingId: String? = nil, marketplaceDescription: String? = nil, marketplaceTitle: String? = nil, sellerName: String? = nil, workteamArn: String) {
            self.listingId = listingId
            self.marketplaceDescription = marketplaceDescription
            self.marketplaceTitle = marketplaceTitle
            self.sellerName = sellerName
            self.workteamArn = workteamArn
        }

        private enum CodingKeys: String, CodingKey {
            case listingId = "ListingId"
            case marketplaceDescription = "MarketplaceDescription"
            case marketplaceTitle = "MarketplaceTitle"
            case sellerName = "SellerName"
            case workteamArn = "WorkteamArn"
        }
    }

    public struct SuggestionQuery: AWSEncodableShape {
        /// Defines a property name hint. Only property names that begin with the specified hint are included in the response.
        public let propertyNameQuery: PropertyNameQuery?

        public init(propertyNameQuery: PropertyNameQuery? = nil) {
            self.propertyNameQuery = propertyNameQuery
        }

        public func validate(name: String) throws {
            try self.propertyNameQuery?.validate(name: "\(name).propertyNameQuery")
        }

        private enum CodingKeys: String, CodingKey {
            case propertyNameQuery = "PropertyNameQuery"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The tag key.
        public let key: String
        /// The tag value.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.key, name: "key", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.value, name: "value", parent: name, max: 256)
            try self.validate(self.value, name: "value", parent: name, min: 0)
            try self.validate(self.value, name: "value", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TargetPlatform: AWSEncodableShape & AWSDecodableShape {
        /// Specifies a target platform accelerator (optional).    NVIDIA: Nvidia graphics processing unit. It also requires gpu-code, trt-ver, cuda-ver compiler options    MALI: ARM Mali graphics processor    INTEL_GRAPHICS: Integrated Intel graphics
        public let accelerator: TargetPlatformAccelerator?
        /// Specifies a target platform architecture.    X86_64: 64-bit version of the x86 instruction set.    X86: 32-bit version of the x86 instruction set.    ARM64: ARMv8 64-bit CPU.    ARM_EABIHF: ARMv7 32-bit, Hard Float.    ARM_EABI: ARMv7 32-bit, Soft Float. Used by Android 32-bit ARM platform.
        public let arch: TargetPlatformArch
        /// Specifies a target platform OS.    LINUX: Linux-based operating systems.    ANDROID: Android operating systems. Android API level can be specified using the ANDROID_PLATFORM compiler option. For example, "CompilerOptions": {'ANDROID_PLATFORM': 28}
        public let os: TargetPlatformOs

        public init(accelerator: TargetPlatformAccelerator? = nil, arch: TargetPlatformArch, os: TargetPlatformOs) {
            self.accelerator = accelerator
            self.arch = arch
            self.os = os
        }

        private enum CodingKeys: String, CodingKey {
            case accelerator = "Accelerator"
            case arch = "Arch"
            case os = "Os"
        }
    }

    public struct TensorBoardAppSettings: AWSEncodableShape & AWSDecodableShape {
        /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        public let defaultResourceSpec: ResourceSpec?

        public init(defaultResourceSpec: ResourceSpec? = nil) {
            self.defaultResourceSpec = defaultResourceSpec
        }

        public func validate(name: String) throws {
            try self.defaultResourceSpec?.validate(name: "\(name).defaultResourceSpec")
        }

        private enum CodingKeys: String, CodingKey {
            case defaultResourceSpec = "DefaultResourceSpec"
        }
    }

    public struct TensorBoardOutputConfig: AWSEncodableShape & AWSDecodableShape {
        /// Path to local storage location for tensorBoard output. Defaults to /opt/ml/output/tensorboard.
        public let localPath: String?
        /// Path to Amazon S3 storage location for TensorBoard output.
        public let s3OutputPath: String

        public init(localPath: String? = nil, s3OutputPath: String) {
            self.localPath = localPath
            self.s3OutputPath = s3OutputPath
        }

        public func validate(name: String) throws {
            try self.validate(self.localPath, name: "localPath", parent: name, max: 4096)
            try self.validate(self.localPath, name: "localPath", parent: name, pattern: ".*")
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, max: 1024)
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case localPath = "LocalPath"
            case s3OutputPath = "S3OutputPath"
        }
    }

    public struct TrainingJob: AWSDecodableShape {
        /// Information about the algorithm used for training, and algorithm metadata.
        public let algorithmSpecification: AlgorithmSpecification?
        /// The Amazon Resource Name (ARN) of the job.
        public let autoMLJobArn: String?
        /// The billable time in seconds.
        public let billableTimeInSeconds: Int?
        public let checkpointConfig: CheckpointConfig?
        /// A timestamp that indicates when the training job was created.
        public let creationTime: TimeStamp?
        public let debugHookConfig: DebugHookConfig?
        /// Information about the debug rule configuration.
        public let debugRuleConfigurations: [DebugRuleConfiguration]?
        /// Information about the evaluation status of the rules for the training job.
        public let debugRuleEvaluationStatuses: [DebugRuleEvaluationStatus]?
        /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training.
        public let enableInterContainerTrafficEncryption: Bool?
        /// When true, enables managed spot training using Amazon EC2 Spot instances to run training jobs instead of on-demand instances. For more information, see Managed Spot Training.
        public let enableManagedSpotTraining: Bool?
        /// If the TrainingJob was created with network isolation, the value is set to true. If network isolation is enabled, nodes can't communicate beyond the VPC they run in.
        public let enableNetworkIsolation: Bool?
        public let experimentConfig: ExperimentConfig?
        /// If the training job failed, the reason it failed.
        public let failureReason: String?
        /// A list of final metric values that are set when the training job completes. Used only if the training job was configured to use metrics.
        public let finalMetricDataList: [MetricData]?
        /// Algorithm-specific parameters.
        public let hyperParameters: [String: String]?
        /// An array of Channel objects that describes each data input channel.
        public let inputDataConfig: [Channel]?
        /// The Amazon Resource Name (ARN) of the labeling job.
        public let labelingJobArn: String?
        /// A timestamp that indicates when the status of the training job was last modified.
        public let lastModifiedTime: TimeStamp?
        /// Information about the Amazon S3 location that is configured for storing model artifacts.
        public let modelArtifacts: ModelArtifacts?
        /// The S3 path where model artifacts that you configured when creating the job are stored. Amazon SageMaker creates subfolders for model artifacts.
        public let outputDataConfig: OutputDataConfig?
        /// Resources, including ML compute instances and ML storage volumes, that are configured for model training.
        public let resourceConfig: ResourceConfig?
        /// The AWS Identity and Access Management (IAM) role configured for the training job.
        public let roleArn: String?
        ///  Provides detailed information about the state of the training job. For detailed information about the secondary status of the training job, see StatusMessage under SecondaryStatusTransition. Amazon SageMaker provides primary statuses and secondary statuses that apply to each of them:  InProgress     Starting - Starting the training job.    Downloading - An optional stage for algorithms that support File training input mode. It indicates that data is being downloaded to the ML storage volumes.    Training - Training is in progress.    Uploading - Training is complete and the model artifacts are being uploaded to the S3 location.    Completed     Completed - The training job has completed.    Failed     Failed - The training job has failed. The reason for the failure is returned in the FailureReason field of DescribeTrainingJobResponse.    Stopped     MaxRuntimeExceeded - The job stopped because it exceeded the maximum allowed runtime.    Stopped - The training job has stopped.    Stopping     Stopping - Stopping the training job.      Valid values for SecondaryStatus are subject to change.   We no longer support the following secondary statuses:    LaunchingMLInstances     PreparingTrainingStack     DownloadingTrainingImage
        public let secondaryStatus: SecondaryStatus?
        /// A history of all of the secondary statuses that the training job has transitioned through.
        public let secondaryStatusTransitions: [SecondaryStatusTransition]?
        /// Specifies a limit to how long a model training job can run. When the job reaches the time limit, Amazon SageMaker ends the training job. Use this API to cap model training costs. To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
        public let stoppingCondition: StoppingCondition?
        /// An array of key-value pairs. For more information, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
        public let tags: [Tag]?
        public let tensorBoardOutputConfig: TensorBoardOutputConfig?
        /// Indicates the time when the training job ends on training instances. You are billed for the time interval between the value of TrainingStartTime and this time. For successful jobs and stopped jobs, this is the time after model artifacts are uploaded. For failed jobs, this is the time when Amazon SageMaker detects a job failure.
        public let trainingEndTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the training job.
        public let trainingJobArn: String?
        /// The name of the training job.
        public let trainingJobName: String?
        /// The status of the training job. Training job statuses are:    InProgress - The training is in progress.    Completed - The training job has completed.    Failed - The training job has failed. To see the reason for the failure, see the FailureReason field in the response to a DescribeTrainingJobResponse call.    Stopping - The training job is stopping.    Stopped - The training job has stopped.   For more detailed information, see SecondaryStatus.
        public let trainingJobStatus: TrainingJobStatus?
        /// Indicates the time when the training job starts on training instances. You are billed for the time interval between this time and the value of TrainingEndTime. The start time in CloudWatch Logs might be later than this time. The difference is due to the time it takes to download the training data and to the size of the training container.
        public let trainingStartTime: TimeStamp?
        /// The training time in seconds.
        public let trainingTimeInSeconds: Int?
        /// The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the training job was launched by a hyperparameter tuning job.
        public let tuningJobArn: String?
        /// A VpcConfig object that specifies the VPC that this training job has access to. For more information, see Protect Training Jobs by Using an Amazon Virtual Private Cloud.
        public let vpcConfig: VpcConfig?

        public init(algorithmSpecification: AlgorithmSpecification? = nil, autoMLJobArn: String? = nil, billableTimeInSeconds: Int? = nil, checkpointConfig: CheckpointConfig? = nil, creationTime: TimeStamp? = nil, debugHookConfig: DebugHookConfig? = nil, debugRuleConfigurations: [DebugRuleConfiguration]? = nil, debugRuleEvaluationStatuses: [DebugRuleEvaluationStatus]? = nil, enableInterContainerTrafficEncryption: Bool? = nil, enableManagedSpotTraining: Bool? = nil, enableNetworkIsolation: Bool? = nil, experimentConfig: ExperimentConfig? = nil, failureReason: String? = nil, finalMetricDataList: [MetricData]? = nil, hyperParameters: [String: String]? = nil, inputDataConfig: [Channel]? = nil, labelingJobArn: String? = nil, lastModifiedTime: TimeStamp? = nil, modelArtifacts: ModelArtifacts? = nil, outputDataConfig: OutputDataConfig? = nil, resourceConfig: ResourceConfig? = nil, roleArn: String? = nil, secondaryStatus: SecondaryStatus? = nil, secondaryStatusTransitions: [SecondaryStatusTransition]? = nil, stoppingCondition: StoppingCondition? = nil, tags: [Tag]? = nil, tensorBoardOutputConfig: TensorBoardOutputConfig? = nil, trainingEndTime: TimeStamp? = nil, trainingJobArn: String? = nil, trainingJobName: String? = nil, trainingJobStatus: TrainingJobStatus? = nil, trainingStartTime: TimeStamp? = nil, trainingTimeInSeconds: Int? = nil, tuningJobArn: String? = nil, vpcConfig: VpcConfig? = nil) {
            self.algorithmSpecification = algorithmSpecification
            self.autoMLJobArn = autoMLJobArn
            self.billableTimeInSeconds = billableTimeInSeconds
            self.checkpointConfig = checkpointConfig
            self.creationTime = creationTime
            self.debugHookConfig = debugHookConfig
            self.debugRuleConfigurations = debugRuleConfigurations
            self.debugRuleEvaluationStatuses = debugRuleEvaluationStatuses
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableManagedSpotTraining = enableManagedSpotTraining
            self.enableNetworkIsolation = enableNetworkIsolation
            self.experimentConfig = experimentConfig
            self.failureReason = failureReason
            self.finalMetricDataList = finalMetricDataList
            self.hyperParameters = hyperParameters
            self.inputDataConfig = inputDataConfig
            self.labelingJobArn = labelingJobArn
            self.lastModifiedTime = lastModifiedTime
            self.modelArtifacts = modelArtifacts
            self.outputDataConfig = outputDataConfig
            self.resourceConfig = resourceConfig
            self.roleArn = roleArn
            self.secondaryStatus = secondaryStatus
            self.secondaryStatusTransitions = secondaryStatusTransitions
            self.stoppingCondition = stoppingCondition
            self.tags = tags
            self.tensorBoardOutputConfig = tensorBoardOutputConfig
            self.trainingEndTime = trainingEndTime
            self.trainingJobArn = trainingJobArn
            self.trainingJobName = trainingJobName
            self.trainingJobStatus = trainingJobStatus
            self.trainingStartTime = trainingStartTime
            self.trainingTimeInSeconds = trainingTimeInSeconds
            self.tuningJobArn = tuningJobArn
            self.vpcConfig = vpcConfig
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmSpecification = "AlgorithmSpecification"
            case autoMLJobArn = "AutoMLJobArn"
            case billableTimeInSeconds = "BillableTimeInSeconds"
            case checkpointConfig = "CheckpointConfig"
            case creationTime = "CreationTime"
            case debugHookConfig = "DebugHookConfig"
            case debugRuleConfigurations = "DebugRuleConfigurations"
            case debugRuleEvaluationStatuses = "DebugRuleEvaluationStatuses"
            case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
            case enableManagedSpotTraining = "EnableManagedSpotTraining"
            case enableNetworkIsolation = "EnableNetworkIsolation"
            case experimentConfig = "ExperimentConfig"
            case failureReason = "FailureReason"
            case finalMetricDataList = "FinalMetricDataList"
            case hyperParameters = "HyperParameters"
            case inputDataConfig = "InputDataConfig"
            case labelingJobArn = "LabelingJobArn"
            case lastModifiedTime = "LastModifiedTime"
            case modelArtifacts = "ModelArtifacts"
            case outputDataConfig = "OutputDataConfig"
            case resourceConfig = "ResourceConfig"
            case roleArn = "RoleArn"
            case secondaryStatus = "SecondaryStatus"
            case secondaryStatusTransitions = "SecondaryStatusTransitions"
            case stoppingCondition = "StoppingCondition"
            case tags = "Tags"
            case tensorBoardOutputConfig = "TensorBoardOutputConfig"
            case trainingEndTime = "TrainingEndTime"
            case trainingJobArn = "TrainingJobArn"
            case trainingJobName = "TrainingJobName"
            case trainingJobStatus = "TrainingJobStatus"
            case trainingStartTime = "TrainingStartTime"
            case trainingTimeInSeconds = "TrainingTimeInSeconds"
            case tuningJobArn = "TuningJobArn"
            case vpcConfig = "VpcConfig"
        }
    }

    public struct TrainingJobDefinition: AWSEncodableShape & AWSDecodableShape {
        /// The hyperparameters used for the training job.
        public let hyperParameters: [String: String]?
        /// An array of Channel objects, each of which specifies an input source.
        public let inputDataConfig: [Channel]
        /// the path to the S3 bucket where you want to store model artifacts. Amazon SageMaker creates subfolders for the artifacts.
        public let outputDataConfig: OutputDataConfig
        /// The resources, including the ML compute instances and ML storage volumes, to use for model training.
        public let resourceConfig: ResourceConfig
        /// Specifies a limit to how long a model training job can run. When the job reaches the time limit, Amazon SageMaker ends the training job. Use this API to cap model training costs. To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts.
        public let stoppingCondition: StoppingCondition
        /// The input mode used by the algorithm for the training job. For the input modes that Amazon SageMaker algorithms support, see Algorithms. If an algorithm supports the File input mode, Amazon SageMaker downloads the training data from S3 to the provisioned ML storage Volume, and mounts the directory to docker volume for training container. If an algorithm supports the Pipe input mode, Amazon SageMaker streams data directly from S3 to the container.
        public let trainingInputMode: TrainingInputMode

        public init(hyperParameters: [String: String]? = nil, inputDataConfig: [Channel], outputDataConfig: OutputDataConfig, resourceConfig: ResourceConfig, stoppingCondition: StoppingCondition, trainingInputMode: TrainingInputMode) {
            self.hyperParameters = hyperParameters
            self.inputDataConfig = inputDataConfig
            self.outputDataConfig = outputDataConfig
            self.resourceConfig = resourceConfig
            self.stoppingCondition = stoppingCondition
            self.trainingInputMode = trainingInputMode
        }

        public func validate(name: String) throws {
            try self.hyperParameters?.forEach {
                try validate($0.key, name: "hyperParameters.key", parent: name, max: 256)
                try validate($0.key, name: "hyperParameters.key", parent: name, pattern: ".*")
                try validate($0.value, name: "hyperParameters[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "hyperParameters[\"\($0.key)\"]", parent: name, pattern: ".*")
            }
            try self.inputDataConfig.forEach {
                try $0.validate(name: "\(name).inputDataConfig[]")
            }
            try self.validate(self.inputDataConfig, name: "inputDataConfig", parent: name, max: 20)
            try self.validate(self.inputDataConfig, name: "inputDataConfig", parent: name, min: 1)
            try self.outputDataConfig.validate(name: "\(name).outputDataConfig")
            try self.resourceConfig.validate(name: "\(name).resourceConfig")
            try self.stoppingCondition.validate(name: "\(name).stoppingCondition")
        }

        private enum CodingKeys: String, CodingKey {
            case hyperParameters = "HyperParameters"
            case inputDataConfig = "InputDataConfig"
            case outputDataConfig = "OutputDataConfig"
            case resourceConfig = "ResourceConfig"
            case stoppingCondition = "StoppingCondition"
            case trainingInputMode = "TrainingInputMode"
        }
    }

    public struct TrainingJobStatusCounters: AWSDecodableShape {
        /// The number of completed training jobs launched by the hyperparameter tuning job.
        public let completed: Int?
        /// The number of in-progress training jobs launched by a hyperparameter tuning job.
        public let inProgress: Int?
        /// The number of training jobs that failed and can't be retried. A failed training job can't be retried if it failed because a client error occurred.
        public let nonRetryableError: Int?
        /// The number of training jobs that failed, but can be retried. A failed training job can be retried only if it failed because an internal service error occurred.
        public let retryableError: Int?
        /// The number of training jobs launched by a hyperparameter tuning job that were manually stopped.
        public let stopped: Int?

        public init(completed: Int? = nil, inProgress: Int? = nil, nonRetryableError: Int? = nil, retryableError: Int? = nil, stopped: Int? = nil) {
            self.completed = completed
            self.inProgress = inProgress
            self.nonRetryableError = nonRetryableError
            self.retryableError = retryableError
            self.stopped = stopped
        }

        private enum CodingKeys: String, CodingKey {
            case completed = "Completed"
            case inProgress = "InProgress"
            case nonRetryableError = "NonRetryableError"
            case retryableError = "RetryableError"
            case stopped = "Stopped"
        }
    }

    public struct TrainingJobSummary: AWSDecodableShape {
        /// A timestamp that shows when the training job was created.
        public let creationTime: TimeStamp
        ///  Timestamp when the training job was last modified.
        public let lastModifiedTime: TimeStamp?
        /// A timestamp that shows when the training job ended. This field is set only if the training job has one of the terminal statuses (Completed, Failed, or Stopped).
        public let trainingEndTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the training job.
        public let trainingJobArn: String
        /// The name of the training job that you want a summary for.
        public let trainingJobName: String
        /// The status of the training job.
        public let trainingJobStatus: TrainingJobStatus

        public init(creationTime: TimeStamp, lastModifiedTime: TimeStamp? = nil, trainingEndTime: TimeStamp? = nil, trainingJobArn: String, trainingJobName: String, trainingJobStatus: TrainingJobStatus) {
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.trainingEndTime = trainingEndTime
            self.trainingJobArn = trainingJobArn
            self.trainingJobName = trainingJobName
            self.trainingJobStatus = trainingJobStatus
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case lastModifiedTime = "LastModifiedTime"
            case trainingEndTime = "TrainingEndTime"
            case trainingJobArn = "TrainingJobArn"
            case trainingJobName = "TrainingJobName"
            case trainingJobStatus = "TrainingJobStatus"
        }
    }

    public struct TrainingSpecification: AWSEncodableShape & AWSDecodableShape {
        /// A list of MetricDefinition objects, which are used for parsing metrics generated by the algorithm.
        public let metricDefinitions: [MetricDefinition]?
        /// A list of the HyperParameterSpecification objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.&gt;
        public let supportedHyperParameters: [HyperParameterSpecification]?
        /// A list of the instance types that this algorithm can use for training.
        public let supportedTrainingInstanceTypes: [TrainingInstanceType]
        /// A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job.
        public let supportedTuningJobObjectiveMetrics: [HyperParameterTuningJobObjective]?
        /// Indicates whether the algorithm supports distributed training. If set to false, buyers can't request more than one instance during training.
        public let supportsDistributedTraining: Bool?
        /// A list of ChannelSpecification objects, which specify the input sources to be used by the algorithm.
        public let trainingChannels: [ChannelSpecification]
        /// The Amazon ECR registry path of the Docker image that contains the training algorithm.
        public let trainingImage: String
        /// An MD5 hash of the training algorithm that identifies the Docker image used for training.
        public let trainingImageDigest: String?

        public init(metricDefinitions: [MetricDefinition]? = nil, supportedHyperParameters: [HyperParameterSpecification]? = nil, supportedTrainingInstanceTypes: [TrainingInstanceType], supportedTuningJobObjectiveMetrics: [HyperParameterTuningJobObjective]? = nil, supportsDistributedTraining: Bool? = nil, trainingChannels: [ChannelSpecification], trainingImage: String, trainingImageDigest: String? = nil) {
            self.metricDefinitions = metricDefinitions
            self.supportedHyperParameters = supportedHyperParameters
            self.supportedTrainingInstanceTypes = supportedTrainingInstanceTypes
            self.supportedTuningJobObjectiveMetrics = supportedTuningJobObjectiveMetrics
            self.supportsDistributedTraining = supportsDistributedTraining
            self.trainingChannels = trainingChannels
            self.trainingImage = trainingImage
            self.trainingImageDigest = trainingImageDigest
        }

        public func validate(name: String) throws {
            try self.metricDefinitions?.forEach {
                try $0.validate(name: "\(name).metricDefinitions[]")
            }
            try self.validate(self.metricDefinitions, name: "metricDefinitions", parent: name, max: 40)
            try self.validate(self.metricDefinitions, name: "metricDefinitions", parent: name, min: 0)
            try self.supportedHyperParameters?.forEach {
                try $0.validate(name: "\(name).supportedHyperParameters[]")
            }
            try self.validate(self.supportedHyperParameters, name: "supportedHyperParameters", parent: name, max: 100)
            try self.validate(self.supportedHyperParameters, name: "supportedHyperParameters", parent: name, min: 0)
            try self.supportedTuningJobObjectiveMetrics?.forEach {
                try $0.validate(name: "\(name).supportedTuningJobObjectiveMetrics[]")
            }
            try self.trainingChannels.forEach {
                try $0.validate(name: "\(name).trainingChannels[]")
            }
            try self.validate(self.trainingChannels, name: "trainingChannels", parent: name, max: 8)
            try self.validate(self.trainingChannels, name: "trainingChannels", parent: name, min: 1)
            try self.validate(self.trainingImage, name: "trainingImage", parent: name, max: 255)
            try self.validate(self.trainingImage, name: "trainingImage", parent: name, pattern: "[\\S]+")
            try self.validate(self.trainingImageDigest, name: "trainingImageDigest", parent: name, max: 72)
            try self.validate(self.trainingImageDigest, name: "trainingImageDigest", parent: name, pattern: "^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$")
        }

        private enum CodingKeys: String, CodingKey {
            case metricDefinitions = "MetricDefinitions"
            case supportedHyperParameters = "SupportedHyperParameters"
            case supportedTrainingInstanceTypes = "SupportedTrainingInstanceTypes"
            case supportedTuningJobObjectiveMetrics = "SupportedTuningJobObjectiveMetrics"
            case supportsDistributedTraining = "SupportsDistributedTraining"
            case trainingChannels = "TrainingChannels"
            case trainingImage = "TrainingImage"
            case trainingImageDigest = "TrainingImageDigest"
        }
    }

    public struct TransformDataSource: AWSEncodableShape & AWSDecodableShape {
        /// The S3 location of the data source that is associated with a channel.
        public let s3DataSource: TransformS3DataSource

        public init(s3DataSource: TransformS3DataSource) {
            self.s3DataSource = s3DataSource
        }

        public func validate(name: String) throws {
            try self.s3DataSource.validate(name: "\(name).s3DataSource")
        }

        private enum CodingKeys: String, CodingKey {
            case s3DataSource = "S3DataSource"
        }
    }

    public struct TransformInput: AWSEncodableShape & AWSDecodableShape {
        /// If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
        public let compressionType: CompressionType?
        /// The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
        public let contentType: String?
        /// Describes the location of the channel data, which is, the S3 location of the input data that the model can consume.
        public let dataSource: TransformDataSource
        /// The method to use to split the transform job's data files into smaller batches. Splitting is necessary when the total size of each object is too large to fit in a single request. You can also use data splitting to improve performance by processing multiple concurrent mini-batches. The default value for SplitType is None, which indicates that input data files are not split, and request payloads contain the entire contents of an input object. Set the value of this parameter to Line to split records on a newline character boundary. SplitType also supports a number of record-oriented binary data formats. Currently, the supported record formats are:   RecordIO   TFRecord   When splitting is enabled, the size of a mini-batch depends on the values of the BatchStrategy and MaxPayloadInMB parameters. When the value of BatchStrategy is MultiRecord, Amazon SageMaker sends the maximum number of records in each request, up to the MaxPayloadInMB limit. If the value of BatchStrategy is SingleRecord, Amazon SageMaker sends individual records in each request.  Some data formats represent a record as a binary payload wrapped with extra padding bytes. When splitting is applied to a binary data format, padding is removed if the value of BatchStrategy is set to SingleRecord. Padding is not removed if the value of BatchStrategy is set to MultiRecord. For more information about RecordIO, see Create a Dataset Using RecordIO in the MXNet documentation. For more information about TFRecord, see Consuming TFRecord data in the TensorFlow documentation.
        public let splitType: SplitType?

        public init(compressionType: CompressionType? = nil, contentType: String? = nil, dataSource: TransformDataSource, splitType: SplitType? = nil) {
            self.compressionType = compressionType
            self.contentType = contentType
            self.dataSource = dataSource
            self.splitType = splitType
        }

        public func validate(name: String) throws {
            try self.validate(self.contentType, name: "contentType", parent: name, max: 256)
            try self.validate(self.contentType, name: "contentType", parent: name, pattern: ".*")
            try self.dataSource.validate(name: "\(name).dataSource")
        }

        private enum CodingKeys: String, CodingKey {
            case compressionType = "CompressionType"
            case contentType = "ContentType"
            case dataSource = "DataSource"
            case splitType = "SplitType"
        }
    }

    public struct TransformJob: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the AutoML job that created the transform job.
        public let autoMLJobArn: String?
        /// Specifies the number of records to include in a mini-batch for an HTTP inference request. A record is a single unit of input data that inference can be made on. For example, a single line in a CSV file is a record.
        public let batchStrategy: BatchStrategy?
        /// A timestamp that shows when the transform Job was created.
        public let creationTime: TimeStamp?
        public let dataProcessing: DataProcessing?
        /// The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.
        public let environment: [String: String]?
        public let experimentConfig: ExperimentConfig?
        /// If the transform job failed, the reason it failed.
        public let failureReason: String?
        /// The Amazon Resource Name (ARN) of the labeling job that created the transform job.
        public let labelingJobArn: String?
        /// The maximum number of parallel requests that can be sent to each instance in a transform job. If MaxConcurrentTransforms is set to 0 or left unset, SageMaker checks the optional execution-parameters to determine the settings for your chosen algorithm. If the execution-parameters endpoint is not enabled, the default value is 1. For built-in algorithms, you don't need to set a value for MaxConcurrentTransforms.
        public let maxConcurrentTransforms: Int?
        /// The maximum allowed size of the payload, in MB. A payload is the data portion of a record (without metadata). The value in MaxPayloadInMB must be greater than, or equal to, the size of a single record. To estimate the size of a record in MB, divide the size of your dataset by the number of records. To ensure that the records fit within the maximum payload size, we recommend using a slightly larger value. The default value is 6 MB. For cases where the payload might be arbitrarily large and is transmitted using HTTP chunked encoding, set the value to 0. This feature works only in supported algorithms. Currently, SageMaker built-in algorithms do not support HTTP chunked encoding.
        public let maxPayloadInMB: Int?
        public let modelClientConfig: ModelClientConfig?
        /// The name of the model associated with the transform job.
        public let modelName: String?
        /// A list of tags associated with the transform job.
        public let tags: [Tag]?
        /// Indicates when the transform job has been completed, or has stopped or failed. You are billed for the time interval between this time and the value of TransformStartTime.
        public let transformEndTime: TimeStamp?
        public let transformInput: TransformInput?
        /// The Amazon Resource Name (ARN) of the transform job.
        public let transformJobArn: String?
        /// The name of the transform job.
        public let transformJobName: String?
        /// The status of the transform job. Transform job statuses are:    InProgress - The job is in progress.    Completed - The job has completed.    Failed - The transform job has failed. To see the reason for the failure, see the FailureReason field in the response to a DescribeTransformJob call.    Stopping - The transform job is stopping.    Stopped - The transform job has stopped.
        public let transformJobStatus: TransformJobStatus?
        public let transformOutput: TransformOutput?
        public let transformResources: TransformResources?
        /// Indicates when the transform job starts on ML instances. You are billed for the time interval between this time and the value of TransformEndTime.
        public let transformStartTime: TimeStamp?

        public init(autoMLJobArn: String? = nil, batchStrategy: BatchStrategy? = nil, creationTime: TimeStamp? = nil, dataProcessing: DataProcessing? = nil, environment: [String: String]? = nil, experimentConfig: ExperimentConfig? = nil, failureReason: String? = nil, labelingJobArn: String? = nil, maxConcurrentTransforms: Int? = nil, maxPayloadInMB: Int? = nil, modelClientConfig: ModelClientConfig? = nil, modelName: String? = nil, tags: [Tag]? = nil, transformEndTime: TimeStamp? = nil, transformInput: TransformInput? = nil, transformJobArn: String? = nil, transformJobName: String? = nil, transformJobStatus: TransformJobStatus? = nil, transformOutput: TransformOutput? = nil, transformResources: TransformResources? = nil, transformStartTime: TimeStamp? = nil) {
            self.autoMLJobArn = autoMLJobArn
            self.batchStrategy = batchStrategy
            self.creationTime = creationTime
            self.dataProcessing = dataProcessing
            self.environment = environment
            self.experimentConfig = experimentConfig
            self.failureReason = failureReason
            self.labelingJobArn = labelingJobArn
            self.maxConcurrentTransforms = maxConcurrentTransforms
            self.maxPayloadInMB = maxPayloadInMB
            self.modelClientConfig = modelClientConfig
            self.modelName = modelName
            self.tags = tags
            self.transformEndTime = transformEndTime
            self.transformInput = transformInput
            self.transformJobArn = transformJobArn
            self.transformJobName = transformJobName
            self.transformJobStatus = transformJobStatus
            self.transformOutput = transformOutput
            self.transformResources = transformResources
            self.transformStartTime = transformStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case autoMLJobArn = "AutoMLJobArn"
            case batchStrategy = "BatchStrategy"
            case creationTime = "CreationTime"
            case dataProcessing = "DataProcessing"
            case environment = "Environment"
            case experimentConfig = "ExperimentConfig"
            case failureReason = "FailureReason"
            case labelingJobArn = "LabelingJobArn"
            case maxConcurrentTransforms = "MaxConcurrentTransforms"
            case maxPayloadInMB = "MaxPayloadInMB"
            case modelClientConfig = "ModelClientConfig"
            case modelName = "ModelName"
            case tags = "Tags"
            case transformEndTime = "TransformEndTime"
            case transformInput = "TransformInput"
            case transformJobArn = "TransformJobArn"
            case transformJobName = "TransformJobName"
            case transformJobStatus = "TransformJobStatus"
            case transformOutput = "TransformOutput"
            case transformResources = "TransformResources"
            case transformStartTime = "TransformStartTime"
        }
    }

    public struct TransformJobDefinition: AWSEncodableShape & AWSDecodableShape {
        /// A string that determines the number of records included in a single mini-batch.  SingleRecord means only one record is used per mini-batch. MultiRecord means a mini-batch is set to contain as many records that can fit within the MaxPayloadInMB limit.
        public let batchStrategy: BatchStrategy?
        /// The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.
        public let environment: [String: String]?
        /// The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
        public let maxConcurrentTransforms: Int?
        /// The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
        public let maxPayloadInMB: Int?
        /// A description of the input source and the way the transform job consumes it.
        public let transformInput: TransformInput
        /// Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.
        public let transformOutput: TransformOutput
        /// Identifies the ML compute instances for the transform job.
        public let transformResources: TransformResources

        public init(batchStrategy: BatchStrategy? = nil, environment: [String: String]? = nil, maxConcurrentTransforms: Int? = nil, maxPayloadInMB: Int? = nil, transformInput: TransformInput, transformOutput: TransformOutput, transformResources: TransformResources) {
            self.batchStrategy = batchStrategy
            self.environment = environment
            self.maxConcurrentTransforms = maxConcurrentTransforms
            self.maxPayloadInMB = maxPayloadInMB
            self.transformInput = transformInput
            self.transformOutput = transformOutput
            self.transformResources = transformResources
        }

        public func validate(name: String) throws {
            try self.environment?.forEach {
                try validate($0.key, name: "environment.key", parent: name, max: 1024)
                try validate($0.key, name: "environment.key", parent: name, pattern: "[a-zA-Z_][a-zA-Z0-9_]*")
                try validate($0.value, name: "environment[\"\($0.key)\"]", parent: name, max: 10240)
                try validate($0.value, name: "environment[\"\($0.key)\"]", parent: name, pattern: "[\\S\\s]*")
            }
            try self.validate(self.maxConcurrentTransforms, name: "maxConcurrentTransforms", parent: name, min: 0)
            try self.validate(self.maxPayloadInMB, name: "maxPayloadInMB", parent: name, min: 0)
            try self.transformInput.validate(name: "\(name).transformInput")
            try self.transformOutput.validate(name: "\(name).transformOutput")
            try self.transformResources.validate(name: "\(name).transformResources")
        }

        private enum CodingKeys: String, CodingKey {
            case batchStrategy = "BatchStrategy"
            case environment = "Environment"
            case maxConcurrentTransforms = "MaxConcurrentTransforms"
            case maxPayloadInMB = "MaxPayloadInMB"
            case transformInput = "TransformInput"
            case transformOutput = "TransformOutput"
            case transformResources = "TransformResources"
        }
    }

    public struct TransformJobSummary: AWSDecodableShape {
        /// A timestamp that shows when the transform Job was created.
        public let creationTime: TimeStamp
        /// If the transform job failed, the reason it failed.
        public let failureReason: String?
        /// Indicates when the transform job was last modified.
        public let lastModifiedTime: TimeStamp?
        /// Indicates when the transform job ends on compute instances. For successful jobs and stopped jobs, this is the exact time recorded after the results are uploaded. For failed jobs, this is when Amazon SageMaker detected that the job failed.
        public let transformEndTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the transform job.
        public let transformJobArn: String
        /// The name of the transform job.
        public let transformJobName: String
        /// The status of the transform job.
        public let transformJobStatus: TransformJobStatus

        public init(creationTime: TimeStamp, failureReason: String? = nil, lastModifiedTime: TimeStamp? = nil, transformEndTime: TimeStamp? = nil, transformJobArn: String, transformJobName: String, transformJobStatus: TransformJobStatus) {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.transformEndTime = transformEndTime
            self.transformJobArn = transformJobArn
            self.transformJobName = transformJobName
            self.transformJobStatus = transformJobStatus
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case lastModifiedTime = "LastModifiedTime"
            case transformEndTime = "TransformEndTime"
            case transformJobArn = "TransformJobArn"
            case transformJobName = "TransformJobName"
            case transformJobStatus = "TransformJobStatus"
        }
    }

    public struct TransformOutput: AWSEncodableShape & AWSDecodableShape {
        /// The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job.
        public let accept: String?
        /// Defines how to assemble the results of the transform job as a single S3 object. Choose a format that is most convenient to you. To concatenate the results in binary format, specify None. To add a newline character at the end of every transformed record, specify Line.
        public let assembleWith: AssemblyType?
        /// The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption. The KmsKeyId can be any of the following formats:    Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias    If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. For more information, see KMS-Managed Encryption Keys in the Amazon Simple Storage Service Developer Guide.  The KMS key policy must grant permission to the IAM role that you specify in your CreateModel request. For more information, see Using Key Policies in AWS KMS in the AWS Key Management Service Developer Guide.
        public let kmsKeyId: String?
        /// The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job. For example, s3://bucket-name/key-name-prefix. For every S3 object used as input for the transform job, batch transform stores the transformed data with an .out suffix in a corresponding subfolder in the location in the output prefix. For example, for the input data stored at s3://bucket-name/input-name-prefix/dataset01/data.csv, batch transform stores the transformed data at s3://bucket-name/output-name-prefix/input-name-prefix/data.csv.out. Batch transform doesn't upload partially processed objects. For an input S3 object that contains multiple records, it creates an .out file only if the transform job succeeds on the entire file. When the input contains multiple S3 objects, the batch transform job processes the listed S3 objects and uploads only the output for successfully processed objects. If any object fails in the transform job batch transform marks the job as failed to prompt investigation.
        public let s3OutputPath: String

        public init(accept: String? = nil, assembleWith: AssemblyType? = nil, kmsKeyId: String? = nil, s3OutputPath: String) {
            self.accept = accept
            self.assembleWith = assembleWith
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
        }

        public func validate(name: String) throws {
            try self.validate(self.accept, name: "accept", parent: name, max: 256)
            try self.validate(self.accept, name: "accept", parent: name, pattern: ".*")
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, pattern: ".*")
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, max: 1024)
            try self.validate(self.s3OutputPath, name: "s3OutputPath", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case accept = "Accept"
            case assembleWith = "AssembleWith"
            case kmsKeyId = "KmsKeyId"
            case s3OutputPath = "S3OutputPath"
        }
    }

    public struct TransformResources: AWSEncodableShape & AWSDecodableShape {
        /// The number of ML compute instances to use in the transform job. For distributed transform jobs, specify a value greater than 1. The default value is 1.
        public let instanceCount: Int
        /// The ML compute instance type for the transform job. If you are using built-in algorithms to transform moderately sized datasets, we recommend using ml.m4.xlarge or ml.m5.large instance types.
        public let instanceType: TransformInstanceType
        /// The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume attached to the ML compute instance(s) that run the batch transform job. The VolumeKmsKeyId can be any of the following formats:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias
        public let volumeKmsKeyId: String?

        public init(instanceCount: Int, instanceType: TransformInstanceType, volumeKmsKeyId: String? = nil) {
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.volumeKmsKeyId = volumeKmsKeyId
        }

        public func validate(name: String) throws {
            try self.validate(self.instanceCount, name: "instanceCount", parent: name, min: 1)
            try self.validate(self.volumeKmsKeyId, name: "volumeKmsKeyId", parent: name, max: 2048)
            try self.validate(self.volumeKmsKeyId, name: "volumeKmsKeyId", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "InstanceCount"
            case instanceType = "InstanceType"
            case volumeKmsKeyId = "VolumeKmsKeyId"
        }
    }

    public struct TransformS3DataSource: AWSEncodableShape & AWSDecodableShape {
        /// If you choose S3Prefix, S3Uri identifies a key name prefix. Amazon SageMaker uses all objects with the specified key name prefix for batch transform.  If you choose ManifestFile, S3Uri identifies an object that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for batch transform.  The following values are compatible: ManifestFile, S3Prefix  The following value is not compatible: AugmentedManifestFile
        public let s3DataType: S3DataType
        /// Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest. For example:    A key name prefix might look like this: s3://bucketname/exampleprefix.     A manifest might look like this: s3://bucketname/example.manifest   The manifest is an S3 object which is a JSON file with the following format:   [ {"prefix": "s3://customer_bucket/some/prefix/"},   "relative/path/to/custdata-1",   "relative/path/custdata-2",   ...   "relative/path/custdata-N"   ]   The preceding JSON matches the following S3Uris:   s3://customer_bucket/some/prefix/relative/path/to/custdata-1   s3://customer_bucket/some/prefix/relative/path/custdata-2   ...   s3://customer_bucket/some/prefix/relative/path/custdata-N   The complete set of S3Uris in this manifest constitutes the input data for the channel for this datasource. The object that each S3Uris points to must be readable by the IAM role that Amazon SageMaker uses to perform tasks on your behalf.
        public let s3Uri: String

        public init(s3DataType: S3DataType, s3Uri: String) {
            self.s3DataType = s3DataType
            self.s3Uri = s3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, max: 1024)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case s3DataType = "S3DataType"
            case s3Uri = "S3Uri"
        }
    }

    public struct Trial: AWSDecodableShape {
        public let createdBy: UserContext?
        /// When the trial was created.
        public let creationTime: TimeStamp?
        /// The name of the trial as displayed. If DisplayName isn't specified, TrialName is displayed.
        public let displayName: String?
        /// The name of the experiment the trial is part of.
        public let experimentName: String?
        public let lastModifiedBy: UserContext?
        /// Who last modified the trial.
        public let lastModifiedTime: TimeStamp?
        public let source: TrialSource?
        /// The list of tags that are associated with the trial. You can use Search API to search on the tags.
        public let tags: [Tag]?
        /// The Amazon Resource Name (ARN) of the trial.
        public let trialArn: String?
        /// A list of the components associated with the trial. For each component, a summary of the component's properties is included.
        public let trialComponentSummaries: [TrialComponentSimpleSummary]?
        /// The name of the trial.
        public let trialName: String?

        public init(createdBy: UserContext? = nil, creationTime: TimeStamp? = nil, displayName: String? = nil, experimentName: String? = nil, lastModifiedBy: UserContext? = nil, lastModifiedTime: TimeStamp? = nil, source: TrialSource? = nil, tags: [Tag]? = nil, trialArn: String? = nil, trialComponentSummaries: [TrialComponentSimpleSummary]? = nil, trialName: String? = nil) {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.displayName = displayName
            self.experimentName = experimentName
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.source = source
            self.tags = tags
            self.trialArn = trialArn
            self.trialComponentSummaries = trialComponentSummaries
            self.trialName = trialName
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy = "CreatedBy"
            case creationTime = "CreationTime"
            case displayName = "DisplayName"
            case experimentName = "ExperimentName"
            case lastModifiedBy = "LastModifiedBy"
            case lastModifiedTime = "LastModifiedTime"
            case source = "Source"
            case tags = "Tags"
            case trialArn = "TrialArn"
            case trialComponentSummaries = "TrialComponentSummaries"
            case trialName = "TrialName"
        }
    }

    public struct TrialComponent: AWSDecodableShape {
        public let createdBy: UserContext?
        /// When the component was created.
        public let creationTime: TimeStamp?
        /// The name of the component as displayed. If DisplayName isn't specified, TrialComponentName is displayed.
        public let displayName: String?
        /// When the component ended.
        public let endTime: TimeStamp?
        /// The input artifacts of the component.
        public let inputArtifacts: [String: TrialComponentArtifact]?
        public let lastModifiedBy: UserContext?
        /// When the component was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The metrics for the component.
        public let metrics: [TrialComponentMetricSummary]?
        /// The output artifacts of the component.
        public let outputArtifacts: [String: TrialComponentArtifact]?
        /// The hyperparameters of the component.
        public let parameters: [String: TrialComponentParameterValue]?
        /// An array of the parents of the component. A parent is a trial the component is associated with and the experiment the trial is part of. A component might not have any parents.
        public let parents: [Parent]?
        /// The Amazon Resource Name (ARN) and job type of the source of the component.
        public let source: TrialComponentSource?
        /// Details of the source of the component.
        public let sourceDetail: TrialComponentSourceDetail?
        /// When the component started.
        public let startTime: TimeStamp?
        public let status: TrialComponentStatus?
        /// The list of tags that are associated with the component. You can use Search API to search on the tags.
        public let tags: [Tag]?
        /// The Amazon Resource Name (ARN) of the trial component.
        public let trialComponentArn: String?
        /// The name of the trial component.
        public let trialComponentName: String?

        public init(createdBy: UserContext? = nil, creationTime: TimeStamp? = nil, displayName: String? = nil, endTime: TimeStamp? = nil, inputArtifacts: [String: TrialComponentArtifact]? = nil, lastModifiedBy: UserContext? = nil, lastModifiedTime: TimeStamp? = nil, metrics: [TrialComponentMetricSummary]? = nil, outputArtifacts: [String: TrialComponentArtifact]? = nil, parameters: [String: TrialComponentParameterValue]? = nil, parents: [Parent]? = nil, source: TrialComponentSource? = nil, sourceDetail: TrialComponentSourceDetail? = nil, startTime: TimeStamp? = nil, status: TrialComponentStatus? = nil, tags: [Tag]? = nil, trialComponentArn: String? = nil, trialComponentName: String? = nil) {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.displayName = displayName
            self.endTime = endTime
            self.inputArtifacts = inputArtifacts
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.metrics = metrics
            self.outputArtifacts = outputArtifacts
            self.parameters = parameters
            self.parents = parents
            self.source = source
            self.sourceDetail = sourceDetail
            self.startTime = startTime
            self.status = status
            self.tags = tags
            self.trialComponentArn = trialComponentArn
            self.trialComponentName = trialComponentName
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy = "CreatedBy"
            case creationTime = "CreationTime"
            case displayName = "DisplayName"
            case endTime = "EndTime"
            case inputArtifacts = "InputArtifacts"
            case lastModifiedBy = "LastModifiedBy"
            case lastModifiedTime = "LastModifiedTime"
            case metrics = "Metrics"
            case outputArtifacts = "OutputArtifacts"
            case parameters = "Parameters"
            case parents = "Parents"
            case source = "Source"
            case sourceDetail = "SourceDetail"
            case startTime = "StartTime"
            case status = "Status"
            case tags = "Tags"
            case trialComponentArn = "TrialComponentArn"
            case trialComponentName = "TrialComponentName"
        }
    }

    public struct TrialComponentArtifact: AWSEncodableShape & AWSDecodableShape {
        /// The media type of the artifact, which indicates the type of data in the artifact file. The media type consists of a type and a subtype concatenated with a slash (/) character, for example, text/csv, image/jpeg, and s3/uri. The type specifies the category of the media. The subtype specifies the kind of data.
        public let mediaType: String?
        /// The location of the artifact.
        public let value: String

        public init(mediaType: String? = nil, value: String) {
            self.mediaType = mediaType
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.mediaType, name: "mediaType", parent: name, max: 64)
            try self.validate(self.mediaType, name: "mediaType", parent: name, pattern: "^[\\w]+\\/[\\w+]+$")
            try self.validate(self.value, name: "value", parent: name, max: 2048)
            try self.validate(self.value, name: "value", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case mediaType = "MediaType"
            case value = "Value"
        }
    }

    public struct TrialComponentMetricSummary: AWSDecodableShape {
        /// The average value of the metric.
        public let avg: Double?
        /// The number of samples used to generate the metric.
        public let count: Int?
        /// The most recent value of the metric.
        public let last: Double?
        /// The maximum value of the metric.
        public let max: Double?
        /// The name of the metric.
        public let metricName: String?
        /// The minimum value of the metric.
        public let min: Double?
        /// The Amazon Resource Name (ARN) of the source.
        public let sourceArn: String?
        /// The standard deviation of the metric.
        public let stdDev: Double?
        /// When the metric was last updated.
        public let timeStamp: TimeStamp?

        public init(avg: Double? = nil, count: Int? = nil, last: Double? = nil, max: Double? = nil, metricName: String? = nil, min: Double? = nil, sourceArn: String? = nil, stdDev: Double? = nil, timeStamp: TimeStamp? = nil) {
            self.avg = avg
            self.count = count
            self.last = last
            self.max = max
            self.metricName = metricName
            self.min = min
            self.sourceArn = sourceArn
            self.stdDev = stdDev
            self.timeStamp = timeStamp
        }

        private enum CodingKeys: String, CodingKey {
            case avg = "Avg"
            case count = "Count"
            case last = "Last"
            case max = "Max"
            case metricName = "MetricName"
            case min = "Min"
            case sourceArn = "SourceArn"
            case stdDev = "StdDev"
            case timeStamp = "TimeStamp"
        }
    }

    public struct TrialComponentParameterValue: AWSEncodableShape & AWSDecodableShape {
        /// The numeric value of a numeric hyperparameter. If you specify a value for this parameter, you can't specify the StringValue parameter.
        public let numberValue: Double?
        /// The string value of a categorical hyperparameter. If you specify a value for this parameter, you can't specify the NumberValue parameter.
        public let stringValue: String?

        public init(numberValue: Double? = nil, stringValue: String? = nil) {
            self.numberValue = numberValue
            self.stringValue = stringValue
        }

        public func validate(name: String) throws {
            try self.validate(self.stringValue, name: "stringValue", parent: name, max: 256)
            try self.validate(self.stringValue, name: "stringValue", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case numberValue = "NumberValue"
            case stringValue = "StringValue"
        }
    }

    public struct TrialComponentSimpleSummary: AWSDecodableShape {
        public let createdBy: UserContext?
        /// When the component was created.
        public let creationTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the trial component.
        public let trialComponentArn: String?
        /// The name of the trial component.
        public let trialComponentName: String?
        public let trialComponentSource: TrialComponentSource?

        public init(createdBy: UserContext? = nil, creationTime: TimeStamp? = nil, trialComponentArn: String? = nil, trialComponentName: String? = nil, trialComponentSource: TrialComponentSource? = nil) {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.trialComponentArn = trialComponentArn
            self.trialComponentName = trialComponentName
            self.trialComponentSource = trialComponentSource
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy = "CreatedBy"
            case creationTime = "CreationTime"
            case trialComponentArn = "TrialComponentArn"
            case trialComponentName = "TrialComponentName"
            case trialComponentSource = "TrialComponentSource"
        }
    }

    public struct TrialComponentSource: AWSDecodableShape {
        /// The source ARN.
        public let sourceArn: String
        /// The source job type.
        public let sourceType: String?

        public init(sourceArn: String, sourceType: String? = nil) {
            self.sourceArn = sourceArn
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case sourceArn = "SourceArn"
            case sourceType = "SourceType"
        }
    }

    public struct TrialComponentSourceDetail: AWSDecodableShape {
        /// Information about a processing job that's the source of a trial component.
        public let processingJob: ProcessingJob?
        /// The Amazon Resource Name (ARN) of the source.
        public let sourceArn: String?
        /// Information about a training job that's the source of a trial component.
        public let trainingJob: TrainingJob?
        /// Information about a transform job that's the source of the trial component.
        public let transformJob: TransformJob?

        public init(processingJob: ProcessingJob? = nil, sourceArn: String? = nil, trainingJob: TrainingJob? = nil, transformJob: TransformJob? = nil) {
            self.processingJob = processingJob
            self.sourceArn = sourceArn
            self.trainingJob = trainingJob
            self.transformJob = transformJob
        }

        private enum CodingKeys: String, CodingKey {
            case processingJob = "ProcessingJob"
            case sourceArn = "SourceArn"
            case trainingJob = "TrainingJob"
            case transformJob = "TransformJob"
        }
    }

    public struct TrialComponentStatus: AWSEncodableShape & AWSDecodableShape {
        /// If the component failed, a message describing why.
        public let message: String?
        /// The status of the trial component.
        public let primaryStatus: TrialComponentPrimaryStatus?

        public init(message: String? = nil, primaryStatus: TrialComponentPrimaryStatus? = nil) {
            self.message = message
            self.primaryStatus = primaryStatus
        }

        public func validate(name: String) throws {
            try self.validate(self.message, name: "message", parent: name, max: 1024)
            try self.validate(self.message, name: "message", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case primaryStatus = "PrimaryStatus"
        }
    }

    public struct TrialComponentSummary: AWSDecodableShape {
        /// Who created the component.
        public let createdBy: UserContext?
        /// When the component was created.
        public let creationTime: TimeStamp?
        /// The name of the component as displayed. If DisplayName isn't specified, TrialComponentName is displayed.
        public let displayName: String?
        /// When the component ended.
        public let endTime: TimeStamp?
        /// Who last modified the component.
        public let lastModifiedBy: UserContext?
        /// When the component was last modified.
        public let lastModifiedTime: TimeStamp?
        /// When the component started.
        public let startTime: TimeStamp?
        /// The status of the component. States include:   InProgress   Completed   Failed
        public let status: TrialComponentStatus?
        /// The ARN of the trial component.
        public let trialComponentArn: String?
        /// The name of the trial component.
        public let trialComponentName: String?
        public let trialComponentSource: TrialComponentSource?

        public init(createdBy: UserContext? = nil, creationTime: TimeStamp? = nil, displayName: String? = nil, endTime: TimeStamp? = nil, lastModifiedBy: UserContext? = nil, lastModifiedTime: TimeStamp? = nil, startTime: TimeStamp? = nil, status: TrialComponentStatus? = nil, trialComponentArn: String? = nil, trialComponentName: String? = nil, trialComponentSource: TrialComponentSource? = nil) {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.displayName = displayName
            self.endTime = endTime
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.startTime = startTime
            self.status = status
            self.trialComponentArn = trialComponentArn
            self.trialComponentName = trialComponentName
            self.trialComponentSource = trialComponentSource
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy = "CreatedBy"
            case creationTime = "CreationTime"
            case displayName = "DisplayName"
            case endTime = "EndTime"
            case lastModifiedBy = "LastModifiedBy"
            case lastModifiedTime = "LastModifiedTime"
            case startTime = "StartTime"
            case status = "Status"
            case trialComponentArn = "TrialComponentArn"
            case trialComponentName = "TrialComponentName"
            case trialComponentSource = "TrialComponentSource"
        }
    }

    public struct TrialSource: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the source.
        public let sourceArn: String
        /// The source job type.
        public let sourceType: String?

        public init(sourceArn: String, sourceType: String? = nil) {
            self.sourceArn = sourceArn
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case sourceArn = "SourceArn"
            case sourceType = "SourceType"
        }
    }

    public struct TrialSummary: AWSDecodableShape {
        /// When the trial was created.
        public let creationTime: TimeStamp?
        /// The name of the trial as displayed. If DisplayName isn't specified, TrialName is displayed.
        public let displayName: String?
        /// When the trial was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the trial.
        public let trialArn: String?
        /// The name of the trial.
        public let trialName: String?
        public let trialSource: TrialSource?

        public init(creationTime: TimeStamp? = nil, displayName: String? = nil, lastModifiedTime: TimeStamp? = nil, trialArn: String? = nil, trialName: String? = nil, trialSource: TrialSource? = nil) {
            self.creationTime = creationTime
            self.displayName = displayName
            self.lastModifiedTime = lastModifiedTime
            self.trialArn = trialArn
            self.trialName = trialName
            self.trialSource = trialSource
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case displayName = "DisplayName"
            case lastModifiedTime = "LastModifiedTime"
            case trialArn = "TrialArn"
            case trialName = "TrialName"
            case trialSource = "TrialSource"
        }
    }

    public struct TuningJobCompletionCriteria: AWSEncodableShape & AWSDecodableShape {
        /// The value of the objective metric.
        public let targetObjectiveMetricValue: Float

        public init(targetObjectiveMetricValue: Float) {
            self.targetObjectiveMetricValue = targetObjectiveMetricValue
        }

        private enum CodingKeys: String, CodingKey {
            case targetObjectiveMetricValue = "TargetObjectiveMetricValue"
        }
    }

    public struct USD: AWSEncodableShape & AWSDecodableShape {
        /// The fractional portion, in cents, of the amount.
        public let cents: Int?
        /// The whole number of dollars in the amount.
        public let dollars: Int?
        /// Fractions of a cent, in tenths.
        public let tenthFractionsOfACent: Int?

        public init(cents: Int? = nil, dollars: Int? = nil, tenthFractionsOfACent: Int? = nil) {
            self.cents = cents
            self.dollars = dollars
            self.tenthFractionsOfACent = tenthFractionsOfACent
        }

        public func validate(name: String) throws {
            try self.validate(self.cents, name: "cents", parent: name, max: 99)
            try self.validate(self.cents, name: "cents", parent: name, min: 0)
            try self.validate(self.dollars, name: "dollars", parent: name, max: 2)
            try self.validate(self.dollars, name: "dollars", parent: name, min: 0)
            try self.validate(self.tenthFractionsOfACent, name: "tenthFractionsOfACent", parent: name, max: 9)
            try self.validate(self.tenthFractionsOfACent, name: "tenthFractionsOfACent", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case cents = "Cents"
            case dollars = "Dollars"
            case tenthFractionsOfACent = "TenthFractionsOfACent"
        }
    }

    public struct UiConfig: AWSEncodableShape & AWSDecodableShape {
        /// The ARN of the worker task template used to render the worker UI and tools for labeling job tasks. Use this parameter when you are creating a labeling job for 3D point cloud and video fram labeling jobs. Use your labeling job task type to select one of the following ARN's and use it with this parameter when you create a labeling job. Replace aws-region with the AWS region you are creating your labeling job in.  3D Point Cloud HumanTaskUiArns  Use this HumanTaskUiArn for 3D point cloud object detection and 3D point cloud object detection adjustment labeling jobs.     arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectDetection     Use this HumanTaskUiArn for 3D point cloud object tracking and 3D point cloud object tracking adjustment labeling jobs.     arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectTracking     Use this HumanTaskUiArn for 3D point cloud semantic segmentation and 3D point cloud semantic segmentation adjustment labeling jobs.    arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudSemanticSegmentation     Video Frame HumanTaskUiArns  Use this HumanTaskUiArn for video frame object detection and video frame object detection adjustment labeling jobs.     arn:aws:sagemaker:region:394669845002:human-task-ui/VideoObjectDetection     Use this HumanTaskUiArn for video frame object tracking and video frame object tracking adjustment labeling jobs.     arn:aws:sagemaker:aws-region:394669845002:human-task-ui/VideoObjectTracking
        public let humanTaskUiArn: String?
        /// The Amazon S3 bucket location of the UI template, or worker task template. This is the template used to render the worker UI and tools for labeling job tasks. For more information about the contents of a UI template, see  Creating Your Custom Labeling Task Template.
        public let uiTemplateS3Uri: String?

        public init(humanTaskUiArn: String? = nil, uiTemplateS3Uri: String? = nil) {
            self.humanTaskUiArn = humanTaskUiArn
            self.uiTemplateS3Uri = uiTemplateS3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.humanTaskUiArn, name: "humanTaskUiArn", parent: name, max: 1024)
            try self.validate(self.humanTaskUiArn, name: "humanTaskUiArn", parent: name, pattern: "arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:human-task-ui/.*")
            try self.validate(self.uiTemplateS3Uri, name: "uiTemplateS3Uri", parent: name, max: 1024)
            try self.validate(self.uiTemplateS3Uri, name: "uiTemplateS3Uri", parent: name, pattern: "^(https|s3)://([^/]+)/?(.*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case humanTaskUiArn = "HumanTaskUiArn"
            case uiTemplateS3Uri = "UiTemplateS3Uri"
        }
    }

    public struct UiTemplate: AWSEncodableShape {
        /// The content of the Liquid template for the worker user interface.
        public let content: String

        public init(content: String) {
            self.content = content
        }

        public func validate(name: String) throws {
            try self.validate(self.content, name: "content", parent: name, max: 128_000)
            try self.validate(self.content, name: "content", parent: name, min: 1)
            try self.validate(self.content, name: "content", parent: name, pattern: "[\\S\\s]+")
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
        }
    }

    public struct UiTemplateInfo: AWSDecodableShape {
        /// The SHA-256 digest of the contents of the template.
        public let contentSha256: String?
        /// The URL for the user interface template.
        public let url: String?

        public init(contentSha256: String? = nil, url: String? = nil) {
            self.contentSha256 = contentSha256
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case contentSha256 = "ContentSha256"
            case url = "Url"
        }
    }

    public struct UpdateCodeRepositoryInput: AWSEncodableShape {
        /// The name of the Git repository to update.
        public let codeRepositoryName: String
        /// The configuration of the git repository, including the URL and the Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the repository. The secret must have a staging label of AWSCURRENT and must be in the following format:  {"username": UserName, "password": Password}
        public let gitConfig: GitConfigForUpdate?

        public init(codeRepositoryName: String, gitConfig: GitConfigForUpdate? = nil) {
            self.codeRepositoryName = codeRepositoryName
            self.gitConfig = gitConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.codeRepositoryName, name: "codeRepositoryName", parent: name, max: 63)
            try self.validate(self.codeRepositoryName, name: "codeRepositoryName", parent: name, min: 1)
            try self.validate(self.codeRepositoryName, name: "codeRepositoryName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
            try self.gitConfig?.validate(name: "\(name).gitConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case codeRepositoryName = "CodeRepositoryName"
            case gitConfig = "GitConfig"
        }
    }

    public struct UpdateCodeRepositoryOutput: AWSDecodableShape {
        /// The ARN of the Git repository.
        public let codeRepositoryArn: String

        public init(codeRepositoryArn: String) {
            self.codeRepositoryArn = codeRepositoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case codeRepositoryArn = "CodeRepositoryArn"
        }
    }

    public struct UpdateDomainRequest: AWSEncodableShape {
        /// A collection of settings.
        public let defaultUserSettings: UserSettings?
        /// The ID of the domain to be updated.
        public let domainId: String

        public init(defaultUserSettings: UserSettings? = nil, domainId: String) {
            self.defaultUserSettings = defaultUserSettings
            self.domainId = domainId
        }

        public func validate(name: String) throws {
            try self.defaultUserSettings?.validate(name: "\(name).defaultUserSettings")
            try self.validate(self.domainId, name: "domainId", parent: name, max: 63)
        }

        private enum CodingKeys: String, CodingKey {
            case defaultUserSettings = "DefaultUserSettings"
            case domainId = "DomainId"
        }
    }

    public struct UpdateDomainResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the domain.
        public let domainArn: String?

        public init(domainArn: String? = nil) {
            self.domainArn = domainArn
        }

        private enum CodingKeys: String, CodingKey {
            case domainArn = "DomainArn"
        }
    }

    public struct UpdateEndpointInput: AWSEncodableShape {
        /// The name of the new endpoint configuration.
        public let endpointConfigName: String
        /// The name of the endpoint whose configuration you want to update.
        public let endpointName: String
        /// When you are updating endpoint resources with UpdateEndpointInput$RetainAllVariantProperties, whose value is set to true, ExcludeRetainedVariantProperties specifies the list of type VariantProperty to override with the values provided by EndpointConfig. If you don't specify a value for ExcludeAllVariantProperties, no variant properties are overridden.
        public let excludeRetainedVariantProperties: [VariantProperty]?
        /// When updating endpoint resources, enables or disables the retention of variant properties, such as the instance count or the variant weight. To retain the variant properties of an endpoint when updating it, set RetainAllVariantProperties to true. To use the variant properties specified in a new EndpointConfig call when updating an endpoint, set RetainAllVariantProperties to false.
        public let retainAllVariantProperties: Bool?

        public init(endpointConfigName: String, endpointName: String, excludeRetainedVariantProperties: [VariantProperty]? = nil, retainAllVariantProperties: Bool? = nil) {
            self.endpointConfigName = endpointConfigName
            self.endpointName = endpointName
            self.excludeRetainedVariantProperties = excludeRetainedVariantProperties
            self.retainAllVariantProperties = retainAllVariantProperties
        }

        public func validate(name: String) throws {
            try self.validate(self.endpointConfigName, name: "endpointConfigName", parent: name, max: 63)
            try self.validate(self.endpointConfigName, name: "endpointConfigName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.endpointName, name: "endpointName", parent: name, max: 63)
            try self.validate(self.endpointName, name: "endpointName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.excludeRetainedVariantProperties, name: "excludeRetainedVariantProperties", parent: name, max: 3)
            try self.validate(self.excludeRetainedVariantProperties, name: "excludeRetainedVariantProperties", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigName = "EndpointConfigName"
            case endpointName = "EndpointName"
            case excludeRetainedVariantProperties = "ExcludeRetainedVariantProperties"
            case retainAllVariantProperties = "RetainAllVariantProperties"
        }
    }

    public struct UpdateEndpointOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the endpoint.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct UpdateEndpointWeightsAndCapacitiesInput: AWSEncodableShape {
        /// An object that provides new capacity and weight values for a variant.
        public let desiredWeightsAndCapacities: [DesiredWeightAndCapacity]
        /// The name of an existing Amazon SageMaker endpoint.
        public let endpointName: String

        public init(desiredWeightsAndCapacities: [DesiredWeightAndCapacity], endpointName: String) {
            self.desiredWeightsAndCapacities = desiredWeightsAndCapacities
            self.endpointName = endpointName
        }

        public func validate(name: String) throws {
            try self.desiredWeightsAndCapacities.forEach {
                try $0.validate(name: "\(name).desiredWeightsAndCapacities[]")
            }
            try self.validate(self.desiredWeightsAndCapacities, name: "desiredWeightsAndCapacities", parent: name, min: 1)
            try self.validate(self.endpointName, name: "endpointName", parent: name, max: 63)
            try self.validate(self.endpointName, name: "endpointName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case desiredWeightsAndCapacities = "DesiredWeightsAndCapacities"
            case endpointName = "EndpointName"
        }
    }

    public struct UpdateEndpointWeightsAndCapacitiesOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the updated endpoint.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct UpdateExperimentRequest: AWSEncodableShape {
        /// The description of the experiment.
        public let description: String?
        /// The name of the experiment as displayed. The name doesn't need to be unique. If DisplayName isn't specified, ExperimentName is displayed.
        public let displayName: String?
        /// The name of the experiment to update.
        public let experimentName: String

        public init(description: String? = nil, displayName: String? = nil, experimentName: String) {
            self.description = description
            self.displayName = displayName
            self.experimentName = experimentName
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 3072)
            try self.validate(self.description, name: "description", parent: name, pattern: ".*")
            try self.validate(self.displayName, name: "displayName", parent: name, max: 82)
            try self.validate(self.displayName, name: "displayName", parent: name, min: 1)
            try self.validate(self.displayName, name: "displayName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.experimentName, name: "experimentName", parent: name, max: 82)
            try self.validate(self.experimentName, name: "experimentName", parent: name, min: 1)
            try self.validate(self.experimentName, name: "experimentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case displayName = "DisplayName"
            case experimentName = "ExperimentName"
        }
    }

    public struct UpdateExperimentResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the experiment.
        public let experimentArn: String?

        public init(experimentArn: String? = nil) {
            self.experimentArn = experimentArn
        }

        private enum CodingKeys: String, CodingKey {
            case experimentArn = "ExperimentArn"
        }
    }

    public struct UpdateMonitoringScheduleRequest: AWSEncodableShape {
        /// The configuration object that specifies the monitoring schedule and defines the monitoring job.
        public let monitoringScheduleConfig: MonitoringScheduleConfig
        /// The name of the monitoring schedule. The name must be unique within an AWS Region within an AWS account.
        public let monitoringScheduleName: String

        public init(monitoringScheduleConfig: MonitoringScheduleConfig, monitoringScheduleName: String) {
            self.monitoringScheduleConfig = monitoringScheduleConfig
            self.monitoringScheduleName = monitoringScheduleName
        }

        public func validate(name: String) throws {
            try self.monitoringScheduleConfig.validate(name: "\(name).monitoringScheduleConfig")
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, max: 63)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, min: 1)
            try self.validate(self.monitoringScheduleName, name: "monitoringScheduleName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case monitoringScheduleConfig = "MonitoringScheduleConfig"
            case monitoringScheduleName = "MonitoringScheduleName"
        }
    }

    public struct UpdateMonitoringScheduleResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the monitoring schedule.
        public let monitoringScheduleArn: String

        public init(monitoringScheduleArn: String) {
            self.monitoringScheduleArn = monitoringScheduleArn
        }

        private enum CodingKeys: String, CodingKey {
            case monitoringScheduleArn = "MonitoringScheduleArn"
        }
    }

    public struct UpdateNotebookInstanceInput: AWSEncodableShape {
        /// A list of the Elastic Inference (EI) instance types to associate with this notebook instance. Currently only one EI instance type can be associated with a notebook instance. For more information, see Using Elastic Inference in Amazon SageMaker.
        public let acceleratorTypes: [NotebookInstanceAcceleratorType]?
        /// An array of up to three Git repositories to associate with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in AWS CodeCommit or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see Associating Git Repositories with Amazon SageMaker Notebook Instances.
        public let additionalCodeRepositories: [String]?
        /// The Git repository to associate with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in AWS CodeCommit or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see Associating Git Repositories with Amazon SageMaker Notebook Instances.
        public let defaultCodeRepository: String?
        /// A list of the Elastic Inference (EI) instance types to remove from this notebook instance. This operation is idempotent. If you specify an accelerator type that is not associated with the notebook instance when you call this method, it does not throw an error.
        public let disassociateAcceleratorTypes: Bool?
        /// A list of names or URLs of the default Git repositories to remove from this notebook instance. This operation is idempotent. If you specify a Git repository that is not associated with the notebook instance when you call this method, it does not throw an error.
        public let disassociateAdditionalCodeRepositories: Bool?
        /// The name or URL of the default Git repository to remove from this notebook instance. This operation is idempotent. If you specify a Git repository that is not associated with the notebook instance when you call this method, it does not throw an error.
        public let disassociateDefaultCodeRepository: Bool?
        /// Set to true to remove the notebook instance lifecycle configuration currently associated with the notebook instance. This operation is idempotent. If you specify a lifecycle configuration that is not associated with the notebook instance when you call this method, it does not throw an error.
        public let disassociateLifecycleConfig: Bool?
        /// The Amazon ML compute instance type.
        public let instanceType: InstanceType?
        /// The name of a lifecycle configuration to associate with the notebook instance. For information about lifestyle configurations, see Step 2.1: (Optional) Customize a Notebook Instance.
        public let lifecycleConfigName: String?
        /// The name of the notebook instance to update.
        public let notebookInstanceName: String
        /// The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker can assume to access the notebook instance. For more information, see Amazon SageMaker Roles.   To be able to pass this role to Amazon SageMaker, the caller of this API must have the iam:PassRole permission.
        public let roleArn: String?
        /// Whether root access is enabled or disabled for users of the notebook instance. The default value is Enabled.  If you set this to Disabled, users don't have root access on the notebook instance, but lifecycle configuration scripts still run with root permissions.
        public let rootAccess: RootAccess?
        /// The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB. ML storage volumes are encrypted, so Amazon SageMaker can't determine the amount of available free space on the volume. Because of this, you can increase the volume size when you update a notebook instance, but you can't decrease the volume size. If you want to decrease the size of the ML storage volume in use, create a new notebook instance with the desired size.
        public let volumeSizeInGB: Int?

        public init(acceleratorTypes: [NotebookInstanceAcceleratorType]? = nil, additionalCodeRepositories: [String]? = nil, defaultCodeRepository: String? = nil, disassociateAcceleratorTypes: Bool? = nil, disassociateAdditionalCodeRepositories: Bool? = nil, disassociateDefaultCodeRepository: Bool? = nil, disassociateLifecycleConfig: Bool? = nil, instanceType: InstanceType? = nil, lifecycleConfigName: String? = nil, notebookInstanceName: String, roleArn: String? = nil, rootAccess: RootAccess? = nil, volumeSizeInGB: Int? = nil) {
            self.acceleratorTypes = acceleratorTypes
            self.additionalCodeRepositories = additionalCodeRepositories
            self.defaultCodeRepository = defaultCodeRepository
            self.disassociateAcceleratorTypes = disassociateAcceleratorTypes
            self.disassociateAdditionalCodeRepositories = disassociateAdditionalCodeRepositories
            self.disassociateDefaultCodeRepository = disassociateDefaultCodeRepository
            self.disassociateLifecycleConfig = disassociateLifecycleConfig
            self.instanceType = instanceType
            self.lifecycleConfigName = lifecycleConfigName
            self.notebookInstanceName = notebookInstanceName
            self.roleArn = roleArn
            self.rootAccess = rootAccess
            self.volumeSizeInGB = volumeSizeInGB
        }

        public func validate(name: String) throws {
            try self.additionalCodeRepositories?.forEach {
                try validate($0, name: "additionalCodeRepositories[]", parent: name, max: 1024)
                try validate($0, name: "additionalCodeRepositories[]", parent: name, min: 1)
                try validate($0, name: "additionalCodeRepositories[]", parent: name, pattern: "^https://([^/]+)/?(.*)$|^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            }
            try self.validate(self.additionalCodeRepositories, name: "additionalCodeRepositories", parent: name, max: 3)
            try self.validate(self.defaultCodeRepository, name: "defaultCodeRepository", parent: name, max: 1024)
            try self.validate(self.defaultCodeRepository, name: "defaultCodeRepository", parent: name, min: 1)
            try self.validate(self.defaultCodeRepository, name: "defaultCodeRepository", parent: name, pattern: "^https://([^/]+)/?(.*)$|^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.lifecycleConfigName, name: "lifecycleConfigName", parent: name, max: 63)
            try self.validate(self.lifecycleConfigName, name: "lifecycleConfigName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, max: 63)
            try self.validate(self.notebookInstanceName, name: "notebookInstanceName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 2048)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 20)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
            try self.validate(self.volumeSizeInGB, name: "volumeSizeInGB", parent: name, max: 16384)
            try self.validate(self.volumeSizeInGB, name: "volumeSizeInGB", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case acceleratorTypes = "AcceleratorTypes"
            case additionalCodeRepositories = "AdditionalCodeRepositories"
            case defaultCodeRepository = "DefaultCodeRepository"
            case disassociateAcceleratorTypes = "DisassociateAcceleratorTypes"
            case disassociateAdditionalCodeRepositories = "DisassociateAdditionalCodeRepositories"
            case disassociateDefaultCodeRepository = "DisassociateDefaultCodeRepository"
            case disassociateLifecycleConfig = "DisassociateLifecycleConfig"
            case instanceType = "InstanceType"
            case lifecycleConfigName = "LifecycleConfigName"
            case notebookInstanceName = "NotebookInstanceName"
            case roleArn = "RoleArn"
            case rootAccess = "RootAccess"
            case volumeSizeInGB = "VolumeSizeInGB"
        }
    }

    public struct UpdateNotebookInstanceLifecycleConfigInput: AWSEncodableShape {
        /// The name of the lifecycle configuration.
        public let notebookInstanceLifecycleConfigName: String
        /// The shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.
        public let onCreate: [NotebookInstanceLifecycleHook]?
        /// The shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.
        public let onStart: [NotebookInstanceLifecycleHook]?

        public init(notebookInstanceLifecycleConfigName: String, onCreate: [NotebookInstanceLifecycleHook]? = nil, onStart: [NotebookInstanceLifecycleHook]? = nil) {
            self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
            self.onCreate = onCreate
            self.onStart = onStart
        }

        public func validate(name: String) throws {
            try self.validate(self.notebookInstanceLifecycleConfigName, name: "notebookInstanceLifecycleConfigName", parent: name, max: 63)
            try self.validate(self.notebookInstanceLifecycleConfigName, name: "notebookInstanceLifecycleConfigName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.onCreate?.forEach {
                try $0.validate(name: "\(name).onCreate[]")
            }
            try self.validate(self.onCreate, name: "onCreate", parent: name, max: 1)
            try self.onStart?.forEach {
                try $0.validate(name: "\(name).onStart[]")
            }
            try self.validate(self.onStart, name: "onStart", parent: name, max: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
            case onCreate = "OnCreate"
            case onStart = "OnStart"
        }
    }

    public struct UpdateNotebookInstanceLifecycleConfigOutput: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateNotebookInstanceOutput: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateTrialComponentRequest: AWSEncodableShape {
        /// The name of the component as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialComponentName is displayed.
        public let displayName: String?
        /// When the component ended.
        public let endTime: TimeStamp?
        /// Replaces all of the component's input artifacts with the specified artifacts.
        public let inputArtifacts: [String: TrialComponentArtifact]?
        /// The input artifacts to remove from the component.
        public let inputArtifactsToRemove: [String]?
        /// Replaces all of the component's output artifacts with the specified artifacts.
        public let outputArtifacts: [String: TrialComponentArtifact]?
        /// The output artifacts to remove from the component.
        public let outputArtifactsToRemove: [String]?
        /// Replaces all of the component's hyperparameters with the specified hyperparameters.
        public let parameters: [String: TrialComponentParameterValue]?
        /// The hyperparameters to remove from the component.
        public let parametersToRemove: [String]?
        /// When the component started.
        public let startTime: TimeStamp?
        /// The new status of the component.
        public let status: TrialComponentStatus?
        /// The name of the component to update.
        public let trialComponentName: String

        public init(displayName: String? = nil, endTime: TimeStamp? = nil, inputArtifacts: [String: TrialComponentArtifact]? = nil, inputArtifactsToRemove: [String]? = nil, outputArtifacts: [String: TrialComponentArtifact]? = nil, outputArtifactsToRemove: [String]? = nil, parameters: [String: TrialComponentParameterValue]? = nil, parametersToRemove: [String]? = nil, startTime: TimeStamp? = nil, status: TrialComponentStatus? = nil, trialComponentName: String) {
            self.displayName = displayName
            self.endTime = endTime
            self.inputArtifacts = inputArtifacts
            self.inputArtifactsToRemove = inputArtifactsToRemove
            self.outputArtifacts = outputArtifacts
            self.outputArtifactsToRemove = outputArtifactsToRemove
            self.parameters = parameters
            self.parametersToRemove = parametersToRemove
            self.startTime = startTime
            self.status = status
            self.trialComponentName = trialComponentName
        }

        public func validate(name: String) throws {
            try self.validate(self.displayName, name: "displayName", parent: name, max: 82)
            try self.validate(self.displayName, name: "displayName", parent: name, min: 1)
            try self.validate(self.displayName, name: "displayName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.inputArtifacts?.forEach {
                try validate($0.key, name: "inputArtifacts.key", parent: name, max: 64)
                try validate($0.key, name: "inputArtifacts.key", parent: name, pattern: ".*")
                try $0.value.validate(name: "\(name).inputArtifacts[\"\($0.key)\"]")
            }
            try self.inputArtifactsToRemove?.forEach {
                try validate($0, name: "inputArtifactsToRemove[]", parent: name, max: 256)
                try validate($0, name: "inputArtifactsToRemove[]", parent: name, pattern: ".*")
            }
            try self.outputArtifacts?.forEach {
                try validate($0.key, name: "outputArtifacts.key", parent: name, max: 64)
                try validate($0.key, name: "outputArtifacts.key", parent: name, pattern: ".*")
                try $0.value.validate(name: "\(name).outputArtifacts[\"\($0.key)\"]")
            }
            try self.outputArtifactsToRemove?.forEach {
                try validate($0, name: "outputArtifactsToRemove[]", parent: name, max: 256)
                try validate($0, name: "outputArtifactsToRemove[]", parent: name, pattern: ".*")
            }
            try self.parameters?.forEach {
                try validate($0.key, name: "parameters.key", parent: name, max: 256)
                try validate($0.key, name: "parameters.key", parent: name, pattern: ".*")
                try $0.value.validate(name: "\(name).parameters[\"\($0.key)\"]")
            }
            try self.parametersToRemove?.forEach {
                try validate($0, name: "parametersToRemove[]", parent: name, max: 256)
                try validate($0, name: "parametersToRemove[]", parent: name, pattern: ".*")
            }
            try self.status?.validate(name: "\(name).status")
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, max: 82)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, min: 1)
            try self.validate(self.trialComponentName, name: "trialComponentName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case endTime = "EndTime"
            case inputArtifacts = "InputArtifacts"
            case inputArtifactsToRemove = "InputArtifactsToRemove"
            case outputArtifacts = "OutputArtifacts"
            case outputArtifactsToRemove = "OutputArtifactsToRemove"
            case parameters = "Parameters"
            case parametersToRemove = "ParametersToRemove"
            case startTime = "StartTime"
            case status = "Status"
            case trialComponentName = "TrialComponentName"
        }
    }

    public struct UpdateTrialComponentResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the trial component.
        public let trialComponentArn: String?

        public init(trialComponentArn: String? = nil) {
            self.trialComponentArn = trialComponentArn
        }

        private enum CodingKeys: String, CodingKey {
            case trialComponentArn = "TrialComponentArn"
        }
    }

    public struct UpdateTrialRequest: AWSEncodableShape {
        /// The name of the trial as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialName is displayed.
        public let displayName: String?
        /// The name of the trial to update.
        public let trialName: String

        public init(displayName: String? = nil, trialName: String) {
            self.displayName = displayName
            self.trialName = trialName
        }

        public func validate(name: String) throws {
            try self.validate(self.displayName, name: "displayName", parent: name, max: 82)
            try self.validate(self.displayName, name: "displayName", parent: name, min: 1)
            try self.validate(self.displayName, name: "displayName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.validate(self.trialName, name: "trialName", parent: name, max: 82)
            try self.validate(self.trialName, name: "trialName", parent: name, min: 1)
            try self.validate(self.trialName, name: "trialName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case trialName = "TrialName"
        }
    }

    public struct UpdateTrialResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the trial.
        public let trialArn: String?

        public init(trialArn: String? = nil) {
            self.trialArn = trialArn
        }

        private enum CodingKeys: String, CodingKey {
            case trialArn = "TrialArn"
        }
    }

    public struct UpdateUserProfileRequest: AWSEncodableShape {
        /// The domain ID.
        public let domainId: String
        /// The user profile name.
        public let userProfileName: String
        /// A collection of settings.
        public let userSettings: UserSettings?

        public init(domainId: String, userProfileName: String, userSettings: UserSettings? = nil) {
            self.domainId = domainId
            self.userProfileName = userProfileName
            self.userSettings = userSettings
        }

        public func validate(name: String) throws {
            try self.validate(self.domainId, name: "domainId", parent: name, max: 63)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, max: 63)
            try self.validate(self.userProfileName, name: "userProfileName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
            try self.userSettings?.validate(name: "\(name).userSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case domainId = "DomainId"
            case userProfileName = "UserProfileName"
            case userSettings = "UserSettings"
        }
    }

    public struct UpdateUserProfileResponse: AWSDecodableShape {
        /// The user profile Amazon Resource Name (ARN).
        public let userProfileArn: String?

        public init(userProfileArn: String? = nil) {
            self.userProfileArn = userProfileArn
        }

        private enum CodingKeys: String, CodingKey {
            case userProfileArn = "UserProfileArn"
        }
    }

    public struct UpdateWorkforceRequest: AWSEncodableShape {
        /// Use this parameter to update your OIDC Identity Provider (IdP) configuration for a workforce made using your own IdP.
        public let oidcConfig: OidcConfig?
        /// A list of one to ten worker IP address ranges (CIDRs) that can be used to access tasks assigned to this workforce. Maximum: Ten CIDR values
        public let sourceIpConfig: SourceIpConfig?
        /// The name of the private workforce that you want to update. You can find your workforce name by using the operation.
        public let workforceName: String

        public init(oidcConfig: OidcConfig? = nil, sourceIpConfig: SourceIpConfig? = nil, workforceName: String) {
            self.oidcConfig = oidcConfig
            self.sourceIpConfig = sourceIpConfig
            self.workforceName = workforceName
        }

        public func validate(name: String) throws {
            try self.oidcConfig?.validate(name: "\(name).oidcConfig")
            try self.sourceIpConfig?.validate(name: "\(name).sourceIpConfig")
            try self.validate(self.workforceName, name: "workforceName", parent: name, max: 63)
            try self.validate(self.workforceName, name: "workforceName", parent: name, min: 1)
            try self.validate(self.workforceName, name: "workforceName", parent: name, pattern: "^[a-zA-Z0-9]([a-zA-Z0-9\\-])*$")
        }

        private enum CodingKeys: String, CodingKey {
            case oidcConfig = "OidcConfig"
            case sourceIpConfig = "SourceIpConfig"
            case workforceName = "WorkforceName"
        }
    }

    public struct UpdateWorkforceResponse: AWSDecodableShape {
        /// A single private workforce. You can create one private work force in each AWS Region. By default, any workforce-related API operation used in a specific region will apply to the workforce created in that region. To learn how to create a private workforce, see Create a Private Workforce.
        public let workforce: Workforce

        public init(workforce: Workforce) {
            self.workforce = workforce
        }

        private enum CodingKeys: String, CodingKey {
            case workforce = "Workforce"
        }
    }

    public struct UpdateWorkteamRequest: AWSEncodableShape {
        /// An updated description for the work team.
        public let description: String?
        /// A list of MemberDefinition objects that contains objects that identify the workers that make up the work team.  Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use CognitoMemberDefinition. For workforces created using your own OIDC identity provider (IdP) use OidcMemberDefinition. You should not provide input for both of these parameters in a single request. For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito user groups within the user pool used to create a workforce. All of the CognitoMemberDefinition objects that make up the member definition must have the same ClientId and UserPool values. To add a Amazon Cognito user group to an existing worker pool, see Adding groups to a User Pool. For more information about user pools, see Amazon Cognito User Pools. For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in OidcMemberDefinition by listing those groups in Groups. Be aware that user groups that are already in the work team must also be listed in Groups when you make this request to remain on the work team. If you do not include these user groups, they will no longer be associated with the work team you update.
        public let memberDefinitions: [MemberDefinition]?
        /// Configures SNS topic notifications for available or expiring work items
        public let notificationConfiguration: NotificationConfiguration?
        /// The name of the work team to update.
        public let workteamName: String

        public init(description: String? = nil, memberDefinitions: [MemberDefinition]? = nil, notificationConfiguration: NotificationConfiguration? = nil, workteamName: String) {
            self.description = description
            self.memberDefinitions = memberDefinitions
            self.notificationConfiguration = notificationConfiguration
            self.workteamName = workteamName
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 200)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, pattern: ".+")
            try self.memberDefinitions?.forEach {
                try $0.validate(name: "\(name).memberDefinitions[]")
            }
            try self.validate(self.memberDefinitions, name: "memberDefinitions", parent: name, max: 10)
            try self.validate(self.memberDefinitions, name: "memberDefinitions", parent: name, min: 1)
            try self.notificationConfiguration?.validate(name: "\(name).notificationConfiguration")
            try self.validate(self.workteamName, name: "workteamName", parent: name, max: 63)
            try self.validate(self.workteamName, name: "workteamName", parent: name, min: 1)
            try self.validate(self.workteamName, name: "workteamName", parent: name, pattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case memberDefinitions = "MemberDefinitions"
            case notificationConfiguration = "NotificationConfiguration"
            case workteamName = "WorkteamName"
        }
    }

    public struct UpdateWorkteamResponse: AWSDecodableShape {
        /// A Workteam object that describes the updated work team.
        public let workteam: Workteam

        public init(workteam: Workteam) {
            self.workteam = workteam
        }

        private enum CodingKeys: String, CodingKey {
            case workteam = "Workteam"
        }
    }

    public struct UserContext: AWSDecodableShape {
        /// The domain associated with the user.
        public let domainId: String?
        /// The Amazon Resource Name (ARN) of the user's profile.
        public let userProfileArn: String?
        /// The name of the user's profile.
        public let userProfileName: String?

        public init(domainId: String? = nil, userProfileArn: String? = nil, userProfileName: String? = nil) {
            self.domainId = domainId
            self.userProfileArn = userProfileArn
            self.userProfileName = userProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case domainId = "DomainId"
            case userProfileArn = "UserProfileArn"
            case userProfileName = "UserProfileName"
        }
    }

    public struct UserProfileDetails: AWSDecodableShape {
        /// The creation time.
        public let creationTime: TimeStamp?
        /// The domain ID.
        public let domainId: String?
        /// The last modified time.
        public let lastModifiedTime: TimeStamp?
        /// The status.
        public let status: UserProfileStatus?
        /// The user profile name.
        public let userProfileName: String?

        public init(creationTime: TimeStamp? = nil, domainId: String? = nil, lastModifiedTime: TimeStamp? = nil, status: UserProfileStatus? = nil, userProfileName: String? = nil) {
            self.creationTime = creationTime
            self.domainId = domainId
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.userProfileName = userProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case domainId = "DomainId"
            case lastModifiedTime = "LastModifiedTime"
            case status = "Status"
            case userProfileName = "UserProfileName"
        }
    }

    public struct UserSettings: AWSEncodableShape & AWSDecodableShape {
        /// The execution role for the user.
        public let executionRole: String?
        /// The Jupyter server's app settings.
        public let jupyterServerAppSettings: JupyterServerAppSettings?
        /// The kernel gateway app settings.
        public let kernelGatewayAppSettings: KernelGatewayAppSettings?
        /// The security groups.
        public let securityGroups: [String]?
        /// The sharing settings.
        public let sharingSettings: SharingSettings?
        /// The TensorBoard app settings.
        public let tensorBoardAppSettings: TensorBoardAppSettings?

        public init(executionRole: String? = nil, jupyterServerAppSettings: JupyterServerAppSettings? = nil, kernelGatewayAppSettings: KernelGatewayAppSettings? = nil, securityGroups: [String]? = nil, sharingSettings: SharingSettings? = nil, tensorBoardAppSettings: TensorBoardAppSettings? = nil) {
            self.executionRole = executionRole
            self.jupyterServerAppSettings = jupyterServerAppSettings
            self.kernelGatewayAppSettings = kernelGatewayAppSettings
            self.securityGroups = securityGroups
            self.sharingSettings = sharingSettings
            self.tensorBoardAppSettings = tensorBoardAppSettings
        }

        public func validate(name: String) throws {
            try self.validate(self.executionRole, name: "executionRole", parent: name, max: 2048)
            try self.validate(self.executionRole, name: "executionRole", parent: name, min: 20)
            try self.validate(self.executionRole, name: "executionRole", parent: name, pattern: "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$")
            try self.jupyterServerAppSettings?.validate(name: "\(name).jupyterServerAppSettings")
            try self.kernelGatewayAppSettings?.validate(name: "\(name).kernelGatewayAppSettings")
            try self.securityGroups?.forEach {
                try validate($0, name: "securityGroups[]", parent: name, max: 32)
                try validate($0, name: "securityGroups[]", parent: name, pattern: "[-0-9a-zA-Z]+")
            }
            try self.validate(self.securityGroups, name: "securityGroups", parent: name, max: 5)
            try self.sharingSettings?.validate(name: "\(name).sharingSettings")
            try self.tensorBoardAppSettings?.validate(name: "\(name).tensorBoardAppSettings")
        }

        private enum CodingKeys: String, CodingKey {
            case executionRole = "ExecutionRole"
            case jupyterServerAppSettings = "JupyterServerAppSettings"
            case kernelGatewayAppSettings = "KernelGatewayAppSettings"
            case securityGroups = "SecurityGroups"
            case sharingSettings = "SharingSettings"
            case tensorBoardAppSettings = "TensorBoardAppSettings"
        }
    }

    public struct VariantProperty: AWSEncodableShape {
        /// The type of variant property. The supported values are:    DesiredInstanceCount: Overrides the existing variant instance counts using the ProductionVariant$InitialInstanceCount values in the CreateEndpointConfigInput$ProductionVariants.    DesiredWeight: Overrides the existing variant weights using the ProductionVariant$InitialVariantWeight values in the CreateEndpointConfigInput$ProductionVariants.    DataCaptureConfig: (Not currently supported.)
        public let variantPropertyType: VariantPropertyType

        public init(variantPropertyType: VariantPropertyType) {
            self.variantPropertyType = variantPropertyType
        }

        private enum CodingKeys: String, CodingKey {
            case variantPropertyType = "VariantPropertyType"
        }
    }

    public struct VpcConfig: AWSEncodableShape & AWSDecodableShape {
        /// The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        public let securityGroupIds: [String]
        /// The ID of the subnets in the VPC to which you want to connect your training job or model. For information about the availability of specific instance types, see Supported Instance Types and Availability Zones.
        public let subnets: [String]

        public init(securityGroupIds: [String], subnets: [String]) {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
        }

        public func validate(name: String) throws {
            try self.securityGroupIds.forEach {
                try validate($0, name: "securityGroupIds[]", parent: name, max: 32)
                try validate($0, name: "securityGroupIds[]", parent: name, pattern: "[-0-9a-zA-Z]+")
            }
            try self.validate(self.securityGroupIds, name: "securityGroupIds", parent: name, max: 5)
            try self.validate(self.securityGroupIds, name: "securityGroupIds", parent: name, min: 1)
            try self.subnets.forEach {
                try validate($0, name: "subnets[]", parent: name, max: 32)
                try validate($0, name: "subnets[]", parent: name, pattern: "[-0-9a-zA-Z]+")
            }
            try self.validate(self.subnets, name: "subnets", parent: name, max: 16)
            try self.validate(self.subnets, name: "subnets", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds = "SecurityGroupIds"
            case subnets = "Subnets"
        }
    }

    public struct Workforce: AWSDecodableShape {
        /// The configuration of an Amazon Cognito workforce. A single Cognito workforce is created using and corresponds to a single  Amazon Cognito user pool.
        public let cognitoConfig: CognitoConfig?
        /// The date that the workforce is created.
        public let createDate: TimeStamp?
        /// The most recent date that was used to successfully add one or more IP address ranges (CIDRs) to a private workforce's allow list.
        public let lastUpdatedDate: TimeStamp?
        /// The configuration of an OIDC Identity Provider (IdP) private workforce.
        public let oidcConfig: OidcConfigForResponse?
        /// A list of one to ten IP address ranges (CIDRs) to be added to the workforce allow list. By default, a workforce isn't restricted to specific IP addresses.
        public let sourceIpConfig: SourceIpConfig?
        /// The subdomain for your OIDC Identity Provider.
        public let subDomain: String?
        /// The Amazon Resource Name (ARN) of the private workforce.
        public let workforceArn: String
        /// The name of the private workforce.
        public let workforceName: String

        public init(cognitoConfig: CognitoConfig? = nil, createDate: TimeStamp? = nil, lastUpdatedDate: TimeStamp? = nil, oidcConfig: OidcConfigForResponse? = nil, sourceIpConfig: SourceIpConfig? = nil, subDomain: String? = nil, workforceArn: String, workforceName: String) {
            self.cognitoConfig = cognitoConfig
            self.createDate = createDate
            self.lastUpdatedDate = lastUpdatedDate
            self.oidcConfig = oidcConfig
            self.sourceIpConfig = sourceIpConfig
            self.subDomain = subDomain
            self.workforceArn = workforceArn
            self.workforceName = workforceName
        }

        private enum CodingKeys: String, CodingKey {
            case cognitoConfig = "CognitoConfig"
            case createDate = "CreateDate"
            case lastUpdatedDate = "LastUpdatedDate"
            case oidcConfig = "OidcConfig"
            case sourceIpConfig = "SourceIpConfig"
            case subDomain = "SubDomain"
            case workforceArn = "WorkforceArn"
            case workforceName = "WorkforceName"
        }
    }

    public struct Workteam: AWSDecodableShape {
        /// The date and time that the work team was created (timestamp).
        public let createDate: TimeStamp?
        /// A description of the work team.
        public let description: String
        /// The date and time that the work team was last updated (timestamp).
        public let lastUpdatedDate: TimeStamp?
        /// A list of MemberDefinition objects that contains objects that identify the workers that make up the work team.  Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use CognitoMemberDefinition. For workforces created using your own OIDC identity provider (IdP) use OidcMemberDefinition.
        public let memberDefinitions: [MemberDefinition]
        /// Configures SNS notifications of available or expiring work items for work teams.
        public let notificationConfiguration: NotificationConfiguration?
        /// The Amazon Marketplace identifier for a vendor's work team.
        public let productListingIds: [String]?
        /// The URI of the labeling job's user interface. Workers open this URI to start labeling your data objects.
        public let subDomain: String?
        /// The Amazon Resource Name (ARN) of the workforce.
        public let workforceArn: String?
        /// The Amazon Resource Name (ARN) that identifies the work team.
        public let workteamArn: String
        /// The name of the work team.
        public let workteamName: String

        public init(createDate: TimeStamp? = nil, description: String, lastUpdatedDate: TimeStamp? = nil, memberDefinitions: [MemberDefinition], notificationConfiguration: NotificationConfiguration? = nil, productListingIds: [String]? = nil, subDomain: String? = nil, workforceArn: String? = nil, workteamArn: String, workteamName: String) {
            self.createDate = createDate
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.memberDefinitions = memberDefinitions
            self.notificationConfiguration = notificationConfiguration
            self.productListingIds = productListingIds
            self.subDomain = subDomain
            self.workforceArn = workforceArn
            self.workteamArn = workteamArn
            self.workteamName = workteamName
        }

        private enum CodingKeys: String, CodingKey {
            case createDate = "CreateDate"
            case description = "Description"
            case lastUpdatedDate = "LastUpdatedDate"
            case memberDefinitions = "MemberDefinitions"
            case notificationConfiguration = "NotificationConfiguration"
            case productListingIds = "ProductListingIds"
            case subDomain = "SubDomain"
            case workforceArn = "WorkforceArn"
            case workteamArn = "WorkteamArn"
            case workteamName = "WorkteamName"
        }
    }
}
