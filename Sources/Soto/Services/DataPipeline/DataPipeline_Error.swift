//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for DataPipeline
public struct DataPipelineErrorType: AWSErrorType {
    enum Code: String {
        case internalServiceError = "InternalServiceError"
        case invalidRequestException = "InvalidRequestException"
        case pipelineDeletedException = "PipelineDeletedException"
        case pipelineNotFoundException = "PipelineNotFoundException"
        case taskNotFoundException = "TaskNotFoundException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize DataPipeline
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var internalServiceError: Self { .init(.internalServiceError) }
    public static var invalidRequestException: Self { .init(.invalidRequestException) }
    public static var pipelineDeletedException: Self { .init(.pipelineDeletedException) }
    public static var pipelineNotFoundException: Self { .init(.pipelineNotFoundException) }
    public static var taskNotFoundException: Self { .init(.taskNotFoundException) }
}

extension DataPipelineErrorType: Equatable {
    public static func == (lhs: DataPipelineErrorType, rhs: DataPipelineErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension DataPipelineErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
