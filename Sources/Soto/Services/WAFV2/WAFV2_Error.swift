//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for WAFV2
public struct WAFV2ErrorType: AWSErrorType {
    enum Code: String {
        case wAFAssociatedItemException = "WAFAssociatedItemException"
        case wAFDuplicateItemException = "WAFDuplicateItemException"
        case wAFInternalErrorException = "WAFInternalErrorException"
        case wAFInvalidOperationException = "WAFInvalidOperationException"
        case wAFInvalidParameterException = "WAFInvalidParameterException"
        case wAFInvalidPermissionPolicyException = "WAFInvalidPermissionPolicyException"
        case wAFInvalidResourceException = "WAFInvalidResourceException"
        case wAFLimitsExceededException = "WAFLimitsExceededException"
        case wAFNonexistentItemException = "WAFNonexistentItemException"
        case wAFOptimisticLockException = "WAFOptimisticLockException"
        case wAFServiceLinkedRoleErrorException = "WAFServiceLinkedRoleErrorException"
        case wAFSubscriptionNotFoundException = "WAFSubscriptionNotFoundException"
        case wAFTagOperationException = "WAFTagOperationException"
        case wAFTagOperationInternalErrorException = "WAFTagOperationInternalErrorException"
        case wAFUnavailableEntityException = "WAFUnavailableEntityException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var wAFAssociatedItemException: Self { .init(.wAFAssociatedItemException) }
    public static var wAFDuplicateItemException: Self { .init(.wAFDuplicateItemException) }
    public static var wAFInternalErrorException: Self { .init(.wAFInternalErrorException) }
    public static var wAFInvalidOperationException: Self { .init(.wAFInvalidOperationException) }
    public static var wAFInvalidParameterException: Self { .init(.wAFInvalidParameterException) }
    public static var wAFInvalidPermissionPolicyException: Self { .init(.wAFInvalidPermissionPolicyException) }
    public static var wAFInvalidResourceException: Self { .init(.wAFInvalidResourceException) }
    public static var wAFLimitsExceededException: Self { .init(.wAFLimitsExceededException) }
    public static var wAFNonexistentItemException: Self { .init(.wAFNonexistentItemException) }
    public static var wAFOptimisticLockException: Self { .init(.wAFOptimisticLockException) }
    public static var wAFServiceLinkedRoleErrorException: Self { .init(.wAFServiceLinkedRoleErrorException) }
    public static var wAFSubscriptionNotFoundException: Self { .init(.wAFSubscriptionNotFoundException) }
    public static var wAFTagOperationException: Self { .init(.wAFTagOperationException) }
    public static var wAFTagOperationInternalErrorException: Self { .init(.wAFTagOperationInternalErrorException) }
    public static var wAFUnavailableEntityException: Self { .init(.wAFUnavailableEntityException) }
}

extension WAFV2ErrorType: Equatable {
    public static func == (lhs: WAFV2ErrorType, rhs: WAFV2ErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension WAFV2ErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
