//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for SWF
public struct SWFErrorType: AWSErrorType {
    enum Code: String {
        case defaultUndefinedFault = "DefaultUndefinedFault"
        case domainAlreadyExistsFault = "DomainAlreadyExistsFault"
        case domainDeprecatedFault = "DomainDeprecatedFault"
        case limitExceededFault = "LimitExceededFault"
        case operationNotPermittedFault = "OperationNotPermittedFault"
        case tooManyTagsFault = "TooManyTagsFault"
        case typeAlreadyExistsFault = "TypeAlreadyExistsFault"
        case typeDeprecatedFault = "TypeDeprecatedFault"
        case unknownResourceFault = "UnknownResourceFault"
        case workflowExecutionAlreadyStartedFault = "WorkflowExecutionAlreadyStartedFault"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var defaultUndefinedFault: Self { .init(.defaultUndefinedFault) }
    public static var domainAlreadyExistsFault: Self { .init(.domainAlreadyExistsFault) }
    public static var domainDeprecatedFault: Self { .init(.domainDeprecatedFault) }
    public static var limitExceededFault: Self { .init(.limitExceededFault) }
    public static var operationNotPermittedFault: Self { .init(.operationNotPermittedFault) }
    public static var tooManyTagsFault: Self { .init(.tooManyTagsFault) }
    public static var typeAlreadyExistsFault: Self { .init(.typeAlreadyExistsFault) }
    public static var typeDeprecatedFault: Self { .init(.typeDeprecatedFault) }
    public static var unknownResourceFault: Self { .init(.unknownResourceFault) }
    public static var workflowExecutionAlreadyStartedFault: Self { .init(.workflowExecutionAlreadyStartedFault) }
}

extension SWFErrorType: Equatable {
    public static func == (lhs: SWFErrorType, rhs: SWFErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension SWFErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
