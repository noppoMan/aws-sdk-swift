//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension EKS {
    // MARK: Enums

    public enum AMITypes: String, CustomStringConvertible, Codable {
        case al2X8664 = "AL2_x86_64"
        case al2X8664Gpu = "AL2_x86_64_GPU"
        case al2Arm64 = "AL2_ARM_64"
        public var description: String { return self.rawValue }
    }

    public enum ClusterStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        case failed = "FAILED"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum ErrorCode: String, CustomStringConvertible, Codable {
        case subnetnotfound = "SubnetNotFound"
        case securitygroupnotfound = "SecurityGroupNotFound"
        case enilimitreached = "EniLimitReached"
        case ipnotavailable = "IpNotAvailable"
        case accessdenied = "AccessDenied"
        case operationnotpermitted = "OperationNotPermitted"
        case vpcidnotfound = "VpcIdNotFound"
        case unknown = "Unknown"
        case nodecreationfailure = "NodeCreationFailure"
        case podevictionfailure = "PodEvictionFailure"
        case insufficientfreeaddresses = "InsufficientFreeAddresses"
        case clusterunreachable = "ClusterUnreachable"
        public var description: String { return self.rawValue }
    }

    public enum FargateProfileStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        case createFailed = "CREATE_FAILED"
        case deleteFailed = "DELETE_FAILED"
        public var description: String { return self.rawValue }
    }

    public enum LogType: String, CustomStringConvertible, Codable {
        case api
        case audit
        case authenticator
        case controllermanager = "controllerManager"
        case scheduler
        public var description: String { return self.rawValue }
    }

    public enum NodegroupIssueCode: String, CustomStringConvertible, Codable {
        case autoscalinggroupnotfound = "AutoScalingGroupNotFound"
        case autoscalinggroupinvalidconfiguration = "AutoScalingGroupInvalidConfiguration"
        case ec2securitygroupnotfound = "Ec2SecurityGroupNotFound"
        case ec2securitygroupdeletionfailure = "Ec2SecurityGroupDeletionFailure"
        case ec2launchtemplatenotfound = "Ec2LaunchTemplateNotFound"
        case ec2launchtemplateversionmismatch = "Ec2LaunchTemplateVersionMismatch"
        case ec2subnetnotfound = "Ec2SubnetNotFound"
        case ec2subnetinvalidconfiguration = "Ec2SubnetInvalidConfiguration"
        case iaminstanceprofilenotfound = "IamInstanceProfileNotFound"
        case iamlimitexceeded = "IamLimitExceeded"
        case iamnoderolenotfound = "IamNodeRoleNotFound"
        case nodecreationfailure = "NodeCreationFailure"
        case asginstancelaunchfailures = "AsgInstanceLaunchFailures"
        case instancelimitexceeded = "InstanceLimitExceeded"
        case insufficientfreeaddresses = "InsufficientFreeAddresses"
        case accessdenied = "AccessDenied"
        case internalfailure = "InternalFailure"
        case clusterunreachable = "ClusterUnreachable"
        public var description: String { return self.rawValue }
    }

    public enum NodegroupStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case active = "ACTIVE"
        case updating = "UPDATING"
        case deleting = "DELETING"
        case createFailed = "CREATE_FAILED"
        case deleteFailed = "DELETE_FAILED"
        case degraded = "DEGRADED"
        public var description: String { return self.rawValue }
    }

    public enum UpdateParamType: String, CustomStringConvertible, Codable {
        case version = "Version"
        case platformversion = "PlatformVersion"
        case endpointprivateaccess = "EndpointPrivateAccess"
        case endpointpublicaccess = "EndpointPublicAccess"
        case clusterlogging = "ClusterLogging"
        case desiredsize = "DesiredSize"
        case labelstoadd = "LabelsToAdd"
        case labelstoremove = "LabelsToRemove"
        case maxsize = "MaxSize"
        case minsize = "MinSize"
        case releaseversion = "ReleaseVersion"
        case publicaccesscidrs = "PublicAccessCidrs"
        public var description: String { return self.rawValue }
    }

    public enum UpdateStatus: String, CustomStringConvertible, Codable {
        case inprogress = "InProgress"
        case failed = "Failed"
        case cancelled = "Cancelled"
        case successful = "Successful"
        public var description: String { return self.rawValue }
    }

    public enum UpdateType: String, CustomStringConvertible, Codable {
        case versionupdate = "VersionUpdate"
        case endpointaccessupdate = "EndpointAccessUpdate"
        case loggingupdate = "LoggingUpdate"
        case configupdate = "ConfigUpdate"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AutoScalingGroup: AWSDecodableShape {
        /// The name of the Auto Scaling group associated with an Amazon EKS managed node group.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name
        }
    }

    public struct Certificate: AWSDecodableShape {
        /// The Base64-encoded certificate data required to communicate with your cluster. Add this to the certificate-authority-data section of the kubeconfig file for your cluster.
        public let data: String?

        public init(data: String? = nil) {
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case data
        }
    }

    public struct Cluster: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the cluster.
        public let arn: String?
        /// The certificate-authority-data for your cluster.
        public let certificateAuthority: Certificate?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// The Unix epoch timestamp in seconds for when the cluster was created.
        public let createdAt: Date?
        /// The encryption configuration for the cluster.
        public let encryptionConfig: [EncryptionConfig]?
        /// The endpoint for your Kubernetes API server.
        public let endpoint: String?
        /// The identity provider information for the cluster.
        public let identity: Identity?
        /// Network configuration settings for your cluster.
        public let kubernetesNetworkConfig: KubernetesNetworkConfigResponse?
        /// The logging configuration for your cluster.
        public let logging: Logging?
        /// The name of the cluster.
        public let name: String?
        /// The platform version of your Amazon EKS cluster. For more information, see Platform Versions in the  Amazon EKS User Guide .
        public let platformVersion: String?
        /// The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see Cluster VPC Considerations and Cluster Security Group Considerations in the Amazon EKS User Guide.
        public let resourcesVpcConfig: VpcConfigResponse?
        /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf.
        public let roleArn: String?
        /// The current status of the cluster.
        public let status: ClusterStatus?
        /// The metadata that you apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Cluster tags do not propagate to any other resources associated with the cluster.
        public let tags: [String: String]?
        /// The Kubernetes server version for the cluster.
        public let version: String?

        public init(arn: String? = nil, certificateAuthority: Certificate? = nil, clientRequestToken: String? = nil, createdAt: Date? = nil, encryptionConfig: [EncryptionConfig]? = nil, endpoint: String? = nil, identity: Identity? = nil, kubernetesNetworkConfig: KubernetesNetworkConfigResponse? = nil, logging: Logging? = nil, name: String? = nil, platformVersion: String? = nil, resourcesVpcConfig: VpcConfigResponse? = nil, roleArn: String? = nil, status: ClusterStatus? = nil, tags: [String: String]? = nil, version: String? = nil) {
            self.arn = arn
            self.certificateAuthority = certificateAuthority
            self.clientRequestToken = clientRequestToken
            self.createdAt = createdAt
            self.encryptionConfig = encryptionConfig
            self.endpoint = endpoint
            self.identity = identity
            self.kubernetesNetworkConfig = kubernetesNetworkConfig
            self.logging = logging
            self.name = name
            self.platformVersion = platformVersion
            self.resourcesVpcConfig = resourcesVpcConfig
            self.roleArn = roleArn
            self.status = status
            self.tags = tags
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case certificateAuthority
            case clientRequestToken
            case createdAt
            case encryptionConfig
            case endpoint
            case identity
            case kubernetesNetworkConfig
            case logging
            case name
            case platformVersion
            case resourcesVpcConfig
            case roleArn
            case status
            case tags
            case version
        }
    }

    public struct CreateClusterRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// The encryption configuration for the cluster.
        public let encryptionConfig: [EncryptionConfig]?
        /// The Kubernetes network configuration for the cluster.
        public let kubernetesNetworkConfig: KubernetesNetworkConfigRequest?
        /// Enable or disable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more information, see Amazon EKS Cluster Control Plane Logs in the  Amazon EKS User Guide .  CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported control plane logs. For more information, see Amazon CloudWatch Pricing.
        public let logging: Logging?
        /// The unique name to give to your cluster.
        public let name: String
        /// The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see Cluster VPC Considerations and Cluster Security Group Considerations in the Amazon EKS User Guide. You must specify at least two subnets. You can specify up to five security groups, but we recommend that you use a dedicated security group for your cluster control plane.
        public let resourcesVpcConfig: VpcConfigRequest
        /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf. For more information, see Amazon EKS Service IAM Role in the  Amazon EKS User Guide .
        public let roleArn: String
        /// The metadata to apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define.
        public let tags: [String: String]?
        /// The desired Kubernetes version for your cluster. If you don't specify a value here, the latest version available in Amazon EKS is used.
        public let version: String?

        public init(clientRequestToken: String? = CreateClusterRequest.idempotencyToken(), encryptionConfig: [EncryptionConfig]? = nil, kubernetesNetworkConfig: KubernetesNetworkConfigRequest? = nil, logging: Logging? = nil, name: String, resourcesVpcConfig: VpcConfigRequest, roleArn: String, tags: [String: String]? = nil, version: String? = nil) {
            self.clientRequestToken = clientRequestToken
            self.encryptionConfig = encryptionConfig
            self.kubernetesNetworkConfig = kubernetesNetworkConfig
            self.logging = logging
            self.name = name
            self.resourcesVpcConfig = resourcesVpcConfig
            self.roleArn = roleArn
            self.tags = tags
            self.version = version
        }

        public func validate(name: String) throws {
            try self.validate(self.encryptionConfig, name: "encryptionConfig", parent: name, max: 1)
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z][A-Za-z0-9\\-_]*")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken
            case encryptionConfig
            case kubernetesNetworkConfig
            case logging
            case name
            case resourcesVpcConfig
            case roleArn
            case tags
            case version
        }
    }

    public struct CreateClusterResponse: AWSDecodableShape {
        /// The full description of your new cluster.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster
        }
    }

    public struct CreateFargateProfileRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "clusterName", location: .uri(locationName: "name"))
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of the Amazon EKS cluster to apply the Fargate profile to.
        public let clusterName: String
        /// The name of the Fargate profile.
        public let fargateProfileName: String
        /// The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in the Fargate profile. The pod execution role allows Fargate infrastructure to register with your cluster as a node, and it provides read access to Amazon ECR image repositories. For more information, see Pod Execution Role in the Amazon EKS User Guide.
        public let podExecutionRoleArn: String
        /// The selectors to match for pods to use this Fargate profile. Each selector must have an associated namespace. Optionally, you can also specify labels for a namespace. You may specify up to five selectors in a Fargate profile.
        public let selectors: [FargateProfileSelector]?
        /// The IDs of subnets to launch your pods into. At this time, pods running on Fargate are not assigned public IP addresses, so only private subnets (with no direct route to an Internet Gateway) are accepted for this parameter.
        public let subnets: [String]?
        /// The metadata to apply to the Fargate profile to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Fargate profile tags do not propagate to any other resources associated with the Fargate profile, such as the pods that are scheduled with it.
        public let tags: [String: String]?

        public init(clientRequestToken: String? = CreateFargateProfileRequest.idempotencyToken(), clusterName: String, fargateProfileName: String, podExecutionRoleArn: String, selectors: [FargateProfileSelector]? = nil, subnets: [String]? = nil, tags: [String: String]? = nil) {
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.fargateProfileName = fargateProfileName
            self.podExecutionRoleArn = podExecutionRoleArn
            self.selectors = selectors
            self.subnets = subnets
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken
            case fargateProfileName
            case podExecutionRoleArn
            case selectors
            case subnets
            case tags
        }
    }

    public struct CreateFargateProfileResponse: AWSDecodableShape {
        /// The full description of your new Fargate profile.
        public let fargateProfile: FargateProfile?

        public init(fargateProfile: FargateProfile? = nil) {
            self.fargateProfile = fargateProfile
        }

        private enum CodingKeys: String, CodingKey {
            case fargateProfile
        }
    }

    public struct CreateNodegroupRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "clusterName", location: .uri(locationName: "name"))
        ]

        /// The AMI type for your node group. GPU instance types should use the AL2_x86_64_GPU AMI type. Non-GPU instances should use the AL2_x86_64 AMI type. Arm instances should use the AL2_ARM_64 AMI type. All types use the Amazon EKS-optimized Amazon Linux 2 AMI. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify amiType, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let amiType: AMITypes?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of the cluster to create the node group in.
        public let clusterName: String
        /// The root device disk size (in GiB) for your node group instances. The default disk size is 20 GiB. If you specify launchTemplate, then don't specify diskSize, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let diskSize: Int?
        /// The instance type to use for your node group. You can specify a single instance type for a node group. The default value for instanceTypes is t3.medium. If you choose a GPU instance type, be sure to specify AL2_x86_64_GPU with the amiType parameter. If you specify launchTemplate, then don't specify instanceTypes, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let instanceTypes: [String]?
        /// The Kubernetes labels to be applied to the nodes in the node group when they are created.
        public let labels: [String: String]?
        /// An object representing a node group's launch template specification. If specified, then do not specify instanceTypes, diskSize, or remoteAccess and make sure that the launch template meets the requirements in launchTemplateSpecification.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The unique name to give your node group.
        public let nodegroupName: String
        /// The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS worker node kubelet daemon makes calls to AWS APIs on your behalf. Worker nodes receive permissions for these API calls through an IAM instance profile and associated policies. Before you can launch worker nodes and register them into a cluster, you must create an IAM role for those worker nodes to use when they are launched. For more information, see Amazon EKS Worker Node IAM Role in the  Amazon EKS User Guide . If you specify launchTemplate, then don't specify  IamInstanceProfile  in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let nodeRole: String
        /// The AMI version of the Amazon EKS-optimized AMI to use with your node group. By default, the latest available AMI version for the node group's current Kubernetes version is used. For more information, see Amazon EKS-Optimized Linux AMI Versions in the Amazon EKS User Guide. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify releaseVersion, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let releaseVersion: String?
        /// The remote access (SSH) configuration to use with your node group. If you specify launchTemplate, then don't specify remoteAccess, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let remoteAccess: RemoteAccessConfig?
        /// The scaling configuration details for the Auto Scaling group that is created for your node group.
        public let scalingConfig: NodegroupScalingConfig?
        /// The subnets to use for the Auto Scaling group that is created for your node group. These subnets must have the tag key kubernetes.io/cluster/CLUSTER_NAME with a value of shared, where CLUSTER_NAME is replaced with the name of your cluster. If you specify launchTemplate, then don't specify  SubnetId  in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let subnets: [String]
        /// The metadata to apply to the node group to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Node group tags do not propagate to any other resources associated with the node group, such as the Amazon EC2 instances or subnets.
        public let tags: [String: String]?
        /// The Kubernetes version to use for your managed nodes. By default, the Kubernetes version of the cluster is used, and this is the only accepted specified value. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify version, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let version: String?

        public init(amiType: AMITypes? = nil, clientRequestToken: String? = CreateNodegroupRequest.idempotencyToken(), clusterName: String, diskSize: Int? = nil, instanceTypes: [String]? = nil, labels: [String: String]? = nil, launchTemplate: LaunchTemplateSpecification? = nil, nodegroupName: String, nodeRole: String, releaseVersion: String? = nil, remoteAccess: RemoteAccessConfig? = nil, scalingConfig: NodegroupScalingConfig? = nil, subnets: [String], tags: [String: String]? = nil, version: String? = nil) {
            self.amiType = amiType
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.diskSize = diskSize
            self.instanceTypes = instanceTypes
            self.labels = labels
            self.launchTemplate = launchTemplate
            self.nodegroupName = nodegroupName
            self.nodeRole = nodeRole
            self.releaseVersion = releaseVersion
            self.remoteAccess = remoteAccess
            self.scalingConfig = scalingConfig
            self.subnets = subnets
            self.tags = tags
            self.version = version
        }

        public func validate(name: String) throws {
            try self.labels?.forEach {
                try validate($0.key, name: "labels.key", parent: name, max: 63)
                try validate($0.key, name: "labels.key", parent: name, min: 1)
                try validate($0.value, name: "labels[\"\($0.key)\"]", parent: name, max: 253)
                try validate($0.value, name: "labels[\"\($0.key)\"]", parent: name, min: 1)
            }
            try self.scalingConfig?.validate(name: "\(name).scalingConfig")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case amiType
            case clientRequestToken
            case diskSize
            case instanceTypes
            case labels
            case launchTemplate
            case nodegroupName
            case nodeRole
            case releaseVersion
            case remoteAccess
            case scalingConfig
            case subnets
            case tags
            case version
        }
    }

    public struct CreateNodegroupResponse: AWSDecodableShape {
        /// The full description of your new node group.
        public let nodegroup: Nodegroup?

        public init(nodegroup: Nodegroup? = nil) {
            self.nodegroup = nodegroup
        }

        private enum CodingKeys: String, CodingKey {
            case nodegroup
        }
    }

    public struct DeleteClusterRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "name", location: .uri(locationName: "name"))
        ]

        /// The name of the cluster to delete.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteClusterResponse: AWSDecodableShape {
        /// The full description of the cluster to delete.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster
        }
    }

    public struct DeleteFargateProfileRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "clusterName", location: .uri(locationName: "name")),
            AWSMemberEncoding(label: "fargateProfileName", location: .uri(locationName: "fargateProfileName"))
        ]

        /// The name of the Amazon EKS cluster associated with the Fargate profile to delete.
        public let clusterName: String
        /// The name of the Fargate profile to delete.
        public let fargateProfileName: String

        public init(clusterName: String, fargateProfileName: String) {
            self.clusterName = clusterName
            self.fargateProfileName = fargateProfileName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteFargateProfileResponse: AWSDecodableShape {
        /// The deleted Fargate profile.
        public let fargateProfile: FargateProfile?

        public init(fargateProfile: FargateProfile? = nil) {
            self.fargateProfile = fargateProfile
        }

        private enum CodingKeys: String, CodingKey {
            case fargateProfile
        }
    }

    public struct DeleteNodegroupRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "clusterName", location: .uri(locationName: "name")),
            AWSMemberEncoding(label: "nodegroupName", location: .uri(locationName: "nodegroupName"))
        ]

        /// The name of the Amazon EKS cluster that is associated with your node group.
        public let clusterName: String
        /// The name of the node group to delete.
        public let nodegroupName: String

        public init(clusterName: String, nodegroupName: String) {
            self.clusterName = clusterName
            self.nodegroupName = nodegroupName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteNodegroupResponse: AWSDecodableShape {
        /// The full description of your deleted node group.
        public let nodegroup: Nodegroup?

        public init(nodegroup: Nodegroup? = nil) {
            self.nodegroup = nodegroup
        }

        private enum CodingKeys: String, CodingKey {
            case nodegroup
        }
    }

    public struct DescribeClusterRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "name", location: .uri(locationName: "name"))
        ]

        /// The name of the cluster to describe.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeClusterResponse: AWSDecodableShape {
        /// The full description of your specified cluster.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster
        }
    }

    public struct DescribeFargateProfileRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "clusterName", location: .uri(locationName: "name")),
            AWSMemberEncoding(label: "fargateProfileName", location: .uri(locationName: "fargateProfileName"))
        ]

        /// The name of the Amazon EKS cluster associated with the Fargate profile.
        public let clusterName: String
        /// The name of the Fargate profile to describe.
        public let fargateProfileName: String

        public init(clusterName: String, fargateProfileName: String) {
            self.clusterName = clusterName
            self.fargateProfileName = fargateProfileName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeFargateProfileResponse: AWSDecodableShape {
        /// The full description of your Fargate profile.
        public let fargateProfile: FargateProfile?

        public init(fargateProfile: FargateProfile? = nil) {
            self.fargateProfile = fargateProfile
        }

        private enum CodingKeys: String, CodingKey {
            case fargateProfile
        }
    }

    public struct DescribeNodegroupRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "clusterName", location: .uri(locationName: "name")),
            AWSMemberEncoding(label: "nodegroupName", location: .uri(locationName: "nodegroupName"))
        ]

        /// The name of the Amazon EKS cluster associated with the node group.
        public let clusterName: String
        /// The name of the node group to describe.
        public let nodegroupName: String

        public init(clusterName: String, nodegroupName: String) {
            self.clusterName = clusterName
            self.nodegroupName = nodegroupName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeNodegroupResponse: AWSDecodableShape {
        /// The full description of your node group.
        public let nodegroup: Nodegroup?

        public init(nodegroup: Nodegroup? = nil) {
            self.nodegroup = nodegroup
        }

        private enum CodingKeys: String, CodingKey {
            case nodegroup
        }
    }

    public struct DescribeUpdateRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "name", location: .uri(locationName: "name")),
            AWSMemberEncoding(label: "nodegroupName", location: .querystring(locationName: "nodegroupName")),
            AWSMemberEncoding(label: "updateId", location: .uri(locationName: "updateId"))
        ]

        /// The name of the Amazon EKS cluster associated with the update.
        public let name: String
        /// The name of the Amazon EKS node group associated with the update.
        public let nodegroupName: String?
        /// The ID of the update to describe.
        public let updateId: String

        public init(name: String, nodegroupName: String? = nil, updateId: String) {
            self.name = name
            self.nodegroupName = nodegroupName
            self.updateId = updateId
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeUpdateResponse: AWSDecodableShape {
        /// The full description of the specified update.
        public let update: Update?

        public init(update: Update? = nil) {
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case update
        }
    }

    public struct EncryptionConfig: AWSEncodableShape & AWSDecodableShape {
        /// AWS Key Management Service (AWS KMS) customer master key (CMK). Either the ARN or the alias can be used.
        public let provider: Provider?
        /// Specifies the resources to be encrypted. The only supported value is "secrets".
        public let resources: [String]?

        public init(provider: Provider? = nil, resources: [String]? = nil) {
            self.provider = provider
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case provider
            case resources
        }
    }

    public struct ErrorDetail: AWSDecodableShape {
        /// A brief description of the error.     SubnetNotFound: We couldn't find one of the subnets associated with the cluster.    SecurityGroupNotFound: We couldn't find one of the security groups associated with the cluster.    EniLimitReached: You have reached the elastic network interface limit for your account.    IpNotAvailable: A subnet associated with the cluster doesn't have any free IP addresses.    AccessDenied: You don't have permissions to perform the specified operation.    OperationNotPermitted: The service role associated with the cluster doesn't have the required access permissions for Amazon EKS.    VpcIdNotFound: We couldn't find the VPC associated with the cluster.
        public let errorCode: ErrorCode?
        /// A more complete description of the error.
        public let errorMessage: String?
        /// An optional field that contains the resource IDs associated with the error.
        public let resourceIds: [String]?

        public init(errorCode: ErrorCode? = nil, errorMessage: String? = nil, resourceIds: [String]? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.resourceIds = resourceIds
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode
            case errorMessage
            case resourceIds
        }
    }

    public struct FargateProfile: AWSDecodableShape {
        /// The name of the Amazon EKS cluster that the Fargate profile belongs to.
        public let clusterName: String?
        /// The Unix epoch timestamp in seconds for when the Fargate profile was created.
        public let createdAt: Date?
        /// The full Amazon Resource Name (ARN) of the Fargate profile.
        public let fargateProfileArn: String?
        /// The name of the Fargate profile.
        public let fargateProfileName: String?
        /// The Amazon Resource Name (ARN) of the pod execution role to use for pods that match the selectors in the Fargate profile. For more information, see Pod Execution Role in the Amazon EKS User Guide.
        public let podExecutionRoleArn: String?
        /// The selectors to match for pods to use this Fargate profile.
        public let selectors: [FargateProfileSelector]?
        /// The current status of the Fargate profile.
        public let status: FargateProfileStatus?
        /// The IDs of subnets to launch pods into.
        public let subnets: [String]?
        /// The metadata applied to the Fargate profile to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Fargate profile tags do not propagate to any other resources associated with the Fargate profile, such as the pods that are scheduled with it.
        public let tags: [String: String]?

        public init(clusterName: String? = nil, createdAt: Date? = nil, fargateProfileArn: String? = nil, fargateProfileName: String? = nil, podExecutionRoleArn: String? = nil, selectors: [FargateProfileSelector]? = nil, status: FargateProfileStatus? = nil, subnets: [String]? = nil, tags: [String: String]? = nil) {
            self.clusterName = clusterName
            self.createdAt = createdAt
            self.fargateProfileArn = fargateProfileArn
            self.fargateProfileName = fargateProfileName
            self.podExecutionRoleArn = podExecutionRoleArn
            self.selectors = selectors
            self.status = status
            self.subnets = subnets
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case clusterName
            case createdAt
            case fargateProfileArn
            case fargateProfileName
            case podExecutionRoleArn
            case selectors
            case status
            case subnets
            case tags
        }
    }

    public struct FargateProfileSelector: AWSEncodableShape & AWSDecodableShape {
        /// The Kubernetes labels that the selector should match. A pod must contain all of the labels that are specified in the selector for it to be considered a match.
        public let labels: [String: String]?
        /// The Kubernetes namespace that the selector should match.
        public let namespace: String?

        public init(labels: [String: String]? = nil, namespace: String? = nil) {
            self.labels = labels
            self.namespace = namespace
        }

        private enum CodingKeys: String, CodingKey {
            case labels
            case namespace
        }
    }

    public struct Identity: AWSDecodableShape {
        /// The OpenID Connect identity provider information for the cluster.
        public let oidc: OIDC?

        public init(oidc: OIDC? = nil) {
            self.oidc = oidc
        }

        private enum CodingKeys: String, CodingKey {
            case oidc
        }
    }

    public struct Issue: AWSDecodableShape {
        /// A brief description of the error.    AutoScalingGroupNotFound: We couldn't find the Auto Scaling group associated with the managed node group. You may be able to recreate an Auto Scaling group with the same settings to recover.    Ec2SecurityGroupNotFound: We couldn't find the cluster security group for the cluster. You must recreate your cluster.    Ec2SecurityGroupDeletionFailure: We could not delete the remote access security group for your managed node group. Remove any dependencies from the security group.    Ec2LaunchTemplateNotFound: We couldn't find the Amazon EC2 launch template for your managed node group. You may be able to recreate a launch template with the same settings to recover.    Ec2LaunchTemplateVersionMismatch: The Amazon EC2 launch template version for your managed node group does not match the version that Amazon EKS created. You may be able to revert to the version that Amazon EKS created to recover.    Ec2SubnetInvalidConfiguration: One or more Amazon EC2 subnets specified for a node group do not automatically assign public IP addresses to instances launched into it. If you want your instances to be assigned a public IP address, then you need to enable the auto-assign public IP address setting for the subnet. See Modifying the public IPv4 addressing attribute for your subnet in the Amazon VPC User Guide.    IamInstanceProfileNotFound: We couldn't find the IAM instance profile for your managed node group. You may be able to recreate an instance profile with the same settings to recover.    IamNodeRoleNotFound: We couldn't find the IAM role for your managed node group. You may be able to recreate an IAM role with the same settings to recover.    AsgInstanceLaunchFailures: Your Auto Scaling group is experiencing failures while attempting to launch instances.    NodeCreationFailure: Your launched instances are unable to register with your Amazon EKS cluster. Common causes of this failure are insufficient worker node IAM role permissions or lack of outbound internet access for the nodes.     InstanceLimitExceeded: Your AWS account is unable to launch any more instances of the specified instance type. You may be able to request an Amazon EC2 instance limit increase to recover.    InsufficientFreeAddresses: One or more of the subnets associated with your managed node group does not have enough available IP addresses for new nodes.    AccessDenied: Amazon EKS or one or more of your managed nodes is unable to communicate with your cluster API server.    InternalFailure: These errors are usually caused by an Amazon EKS server-side issue.
        public let code: NodegroupIssueCode?
        /// The error message associated with the issue.
        public let message: String?
        /// The AWS resources that are afflicted by this issue.
        public let resourceIds: [String]?

        public init(code: NodegroupIssueCode? = nil, message: String? = nil, resourceIds: [String]? = nil) {
            self.code = code
            self.message = message
            self.resourceIds = resourceIds
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
            case resourceIds
        }
    }

    public struct KubernetesNetworkConfigRequest: AWSEncodableShape {
        /// The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. The block must meet the following requirements:   Within one of the following private IP address blocks: 10.0.0.0/8, 172.16.0.0.0/12, or 192.168.0.0/16.   Doesn't overlap with any CIDR block assigned to the VPC that you selected for VPC.   Between /24 and /12.    You can only specify a custom CIDR block when you create a cluster and can't change this value once the cluster is created.
        public let serviceIpv4Cidr: String?

        public init(serviceIpv4Cidr: String? = nil) {
            self.serviceIpv4Cidr = serviceIpv4Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case serviceIpv4Cidr
        }
    }

    public struct KubernetesNetworkConfigResponse: AWSDecodableShape {
        /// The CIDR block that Kubernetes service IP addresses are assigned from. If you didn't specify a CIDR block, then Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. If this was specified, then it was specified when the cluster was created and it cannot be changed.
        public let serviceIpv4Cidr: String?

        public init(serviceIpv4Cidr: String? = nil) {
            self.serviceIpv4Cidr = serviceIpv4Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case serviceIpv4Cidr
        }
    }

    public struct LaunchTemplateSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The ID of the launch template.
        public let id: String?
        /// The name of the launch template.
        public let name: String?
        /// The version of the launch template to use. If no version is specified, then the template's default version is used.
        public let version: String?

        public init(id: String? = nil, name: String? = nil, version: String? = nil) {
            self.id = id
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case name
            case version
        }
    }

    public struct ListClustersRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken"))
        ]

        /// The maximum number of cluster results returned by ListClusters in paginated output. When you use this parameter, ListClusters returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListClusters request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListClusters returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated ListClusters request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListClustersResponse: AWSDecodableShape {
        /// A list of all of the clusters for your account in the specified Region.
        public let clusters: [String]?
        /// The nextToken value to include in a future ListClusters request. When the results of a ListClusters request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(clusters: [String]? = nil, nextToken: String? = nil) {
            self.clusters = clusters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case clusters
            case nextToken
        }
    }

    public struct ListFargateProfilesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "clusterName", location: .uri(locationName: "name")),
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken"))
        ]

        /// The name of the Amazon EKS cluster that you would like to listFargate profiles in.
        public let clusterName: String
        /// The maximum number of Fargate profile results returned by ListFargateProfiles in paginated output. When you use this parameter, ListFargateProfiles returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListFargateProfiles request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListFargateProfiles returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated ListFargateProfiles request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.
        public let nextToken: String?

        public init(clusterName: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clusterName = clusterName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListFargateProfilesResponse: AWSDecodableShape {
        /// A list of all of the Fargate profiles associated with the specified cluster.
        public let fargateProfileNames: [String]?
        /// The nextToken value to include in a future ListFargateProfiles request. When the results of a ListFargateProfiles request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(fargateProfileNames: [String]? = nil, nextToken: String? = nil) {
            self.fargateProfileNames = fargateProfileNames
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fargateProfileNames
            case nextToken
        }
    }

    public struct ListNodegroupsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "clusterName", location: .uri(locationName: "name")),
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken"))
        ]

        /// The name of the Amazon EKS cluster that you would like to list node groups in.
        public let clusterName: String
        /// The maximum number of node group results returned by ListNodegroups in paginated output. When you use this parameter, ListNodegroups returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListNodegroups request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListNodegroups returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated ListNodegroups request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.
        public let nextToken: String?

        public init(clusterName: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clusterName = clusterName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListNodegroupsResponse: AWSDecodableShape {
        /// The nextToken value to include in a future ListNodegroups request. When the results of a ListNodegroups request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A list of all of the node groups associated with the specified cluster.
        public let nodegroups: [String]?

        public init(nextToken: String? = nil, nodegroups: [String]? = nil) {
            self.nextToken = nextToken
            self.nodegroups = nodegroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case nodegroups
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri(locationName: "resourceArn"))
        ]

        /// The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the supported resources are Amazon EKS clusters and managed node groups.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        /// The tags for the resource.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags
        }
    }

    public struct ListUpdatesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "name", location: .uri(locationName: "name")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken")),
            AWSMemberEncoding(label: "nodegroupName", location: .querystring(locationName: "nodegroupName"))
        ]

        /// The maximum number of update results returned by ListUpdates in paginated output. When you use this parameter, ListUpdates returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListUpdates request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListUpdates returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The name of the Amazon EKS cluster to list updates for.
        public let name: String
        /// The nextToken value returned from a previous paginated ListUpdates request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.
        public let nextToken: String?
        /// The name of the Amazon EKS managed node group to list updates for.
        public let nodegroupName: String?

        public init(maxResults: Int? = nil, name: String, nextToken: String? = nil, nodegroupName: String? = nil) {
            self.maxResults = maxResults
            self.name = name
            self.nextToken = nextToken
            self.nodegroupName = nodegroupName
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListUpdatesResponse: AWSDecodableShape {
        /// The nextToken value to include in a future ListUpdates request. When the results of a ListUpdates request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A list of all the updates for the specified cluster and Region.
        public let updateIds: [String]?

        public init(nextToken: String? = nil, updateIds: [String]? = nil) {
            self.nextToken = nextToken
            self.updateIds = updateIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case updateIds
        }
    }

    public struct LogSetup: AWSEncodableShape & AWSDecodableShape {
        /// If a log type is enabled, that log type exports its control plane logs to CloudWatch Logs. If a log type isn't enabled, that log type doesn't export its control plane logs. Each individual log type can be enabled or disabled independently.
        public let enabled: Bool?
        /// The available cluster control plane log types.
        public let types: [LogType]?

        public init(enabled: Bool? = nil, types: [LogType]? = nil) {
            self.enabled = enabled
            self.types = types
        }

        private enum CodingKeys: String, CodingKey {
            case enabled
            case types
        }
    }

    public struct Logging: AWSEncodableShape & AWSDecodableShape {
        /// The cluster control plane logging configuration for your cluster.
        public let clusterLogging: [LogSetup]?

        public init(clusterLogging: [LogSetup]? = nil) {
            self.clusterLogging = clusterLogging
        }

        private enum CodingKeys: String, CodingKey {
            case clusterLogging
        }
    }

    public struct Nodegroup: AWSDecodableShape {
        /// If the node group was deployed using a launch template with a custom AMI, then this is CUSTOM. For node groups that weren't deployed using a launch template, this is the AMI type that was specified in the node group configuration.
        public let amiType: AMITypes?
        /// The name of the cluster that the managed node group resides in.
        public let clusterName: String?
        /// The Unix epoch timestamp in seconds for when the managed node group was created.
        public let createdAt: Date?
        /// If the node group wasn't deployed with a launch template, then this is the disk size in the node group configuration. If the node group was deployed with a launch template, then this is null.
        public let diskSize: Int?
        /// The health status of the node group. If there are issues with your node group's health, they are listed here.
        public let health: NodegroupHealth?
        /// If the node group wasn't deployed with a launch template, then this is the instance type that is associated with the node group. If the node group was deployed with a launch template, then this is null.
        public let instanceTypes: [String]?
        /// The Kubernetes labels applied to the nodes in the node group.  Only labels that are applied with the Amazon EKS API are shown here. There may be other Kubernetes labels applied to the nodes in this group.
        public let labels: [String: String]?
        /// If a launch template was used to create the node group, then this is the launch template that was used.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The Unix epoch timestamp in seconds for when the managed node group was last modified.
        public let modifiedAt: Date?
        /// The Amazon Resource Name (ARN) associated with the managed node group.
        public let nodegroupArn: String?
        /// The name associated with an Amazon EKS managed node group.
        public let nodegroupName: String?
        /// The IAM role associated with your node group. The Amazon EKS worker node kubelet daemon makes calls to AWS APIs on your behalf. Worker nodes receive permissions for these API calls through an IAM instance profile and associated policies.
        public let nodeRole: String?
        /// If the node group was deployed using a launch template with a custom AMI, then this is the AMI ID that was specified in the launch template. For node groups that weren't deployed using a launch template, this is the version of the Amazon EKS-optimized AMI that the node group was deployed with.
        public let releaseVersion: String?
        /// If the node group wasn't deployed with a launch template, then this is the remote access configuration that is associated with the node group. If the node group was deployed with a launch template, then this is null.
        public let remoteAccess: RemoteAccessConfig?
        /// The resources associated with the node group, such as Auto Scaling groups and security groups for remote access.
        public let resources: NodegroupResources?
        /// The scaling configuration details for the Auto Scaling group that is associated with your node group.
        public let scalingConfig: NodegroupScalingConfig?
        /// The current status of the managed node group.
        public let status: NodegroupStatus?
        /// The subnets that were specified for the Auto Scaling group that is associated with your node group.
        public let subnets: [String]?
        /// The metadata applied to the node group to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Node group tags do not propagate to any other resources associated with the node group, such as the Amazon EC2 instances or subnets.
        public let tags: [String: String]?
        /// The Kubernetes version of the managed node group.
        public let version: String?

        public init(amiType: AMITypes? = nil, clusterName: String? = nil, createdAt: Date? = nil, diskSize: Int? = nil, health: NodegroupHealth? = nil, instanceTypes: [String]? = nil, labels: [String: String]? = nil, launchTemplate: LaunchTemplateSpecification? = nil, modifiedAt: Date? = nil, nodegroupArn: String? = nil, nodegroupName: String? = nil, nodeRole: String? = nil, releaseVersion: String? = nil, remoteAccess: RemoteAccessConfig? = nil, resources: NodegroupResources? = nil, scalingConfig: NodegroupScalingConfig? = nil, status: NodegroupStatus? = nil, subnets: [String]? = nil, tags: [String: String]? = nil, version: String? = nil) {
            self.amiType = amiType
            self.clusterName = clusterName
            self.createdAt = createdAt
            self.diskSize = diskSize
            self.health = health
            self.instanceTypes = instanceTypes
            self.labels = labels
            self.launchTemplate = launchTemplate
            self.modifiedAt = modifiedAt
            self.nodegroupArn = nodegroupArn
            self.nodegroupName = nodegroupName
            self.nodeRole = nodeRole
            self.releaseVersion = releaseVersion
            self.remoteAccess = remoteAccess
            self.resources = resources
            self.scalingConfig = scalingConfig
            self.status = status
            self.subnets = subnets
            self.tags = tags
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case amiType
            case clusterName
            case createdAt
            case diskSize
            case health
            case instanceTypes
            case labels
            case launchTemplate
            case modifiedAt
            case nodegroupArn
            case nodegroupName
            case nodeRole
            case releaseVersion
            case remoteAccess
            case resources
            case scalingConfig
            case status
            case subnets
            case tags
            case version
        }
    }

    public struct NodegroupHealth: AWSDecodableShape {
        /// Any issues that are associated with the node group.
        public let issues: [Issue]?

        public init(issues: [Issue]? = nil) {
            self.issues = issues
        }

        private enum CodingKeys: String, CodingKey {
            case issues
        }
    }

    public struct NodegroupResources: AWSDecodableShape {
        /// The Auto Scaling groups associated with the node group.
        public let autoScalingGroups: [AutoScalingGroup]?
        /// The remote access security group associated with the node group. This security group controls SSH access to the worker nodes.
        public let remoteAccessSecurityGroup: String?

        public init(autoScalingGroups: [AutoScalingGroup]? = nil, remoteAccessSecurityGroup: String? = nil) {
            self.autoScalingGroups = autoScalingGroups
            self.remoteAccessSecurityGroup = remoteAccessSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroups
            case remoteAccessSecurityGroup
        }
    }

    public struct NodegroupScalingConfig: AWSEncodableShape & AWSDecodableShape {
        /// The current number of worker nodes that the managed node group should maintain.
        public let desiredSize: Int?
        /// The maximum number of worker nodes that the managed node group can scale out to. Managed node groups can support up to 100 nodes by default.
        public let maxSize: Int?
        /// The minimum number of worker nodes that the managed node group can scale in to. This number must be greater than zero.
        public let minSize: Int?

        public init(desiredSize: Int? = nil, maxSize: Int? = nil, minSize: Int? = nil) {
            self.desiredSize = desiredSize
            self.maxSize = maxSize
            self.minSize = minSize
        }

        public func validate(name: String) throws {
            try self.validate(self.desiredSize, name: "desiredSize", parent: name, min: 1)
            try self.validate(self.maxSize, name: "maxSize", parent: name, min: 1)
            try self.validate(self.minSize, name: "minSize", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case desiredSize
            case maxSize
            case minSize
        }
    }

    public struct OIDC: AWSDecodableShape {
        /// The issuer URL for the OpenID Connect identity provider.
        public let issuer: String?

        public init(issuer: String? = nil) {
            self.issuer = issuer
        }

        private enum CodingKeys: String, CodingKey {
            case issuer
        }
    }

    public struct Provider: AWSEncodableShape & AWSDecodableShape {
        /// Amazon Resource Name (ARN) or alias of the customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide.
        public let keyArn: String?

        public init(keyArn: String? = nil) {
            self.keyArn = keyArn
        }

        private enum CodingKeys: String, CodingKey {
            case keyArn
        }
    }

    public struct RemoteAccessConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon EC2 SSH key that provides access for SSH communication with the worker nodes in the managed node group. For more information, see Amazon EC2 Key Pairs in the Amazon Elastic Compute Cloud User Guide for Linux Instances.
        public let ec2SshKey: String?
        /// The security groups that are allowed SSH access (port 22) to the worker nodes. If you specify an Amazon EC2 SSH key but do not specify a source security group when you create a managed node group, then port 22 on the worker nodes is opened to the internet (0.0.0.0/0). For more information, see Security Groups for Your VPC in the Amazon Virtual Private Cloud User Guide.
        public let sourceSecurityGroups: [String]?

        public init(ec2SshKey: String? = nil, sourceSecurityGroups: [String]? = nil) {
            self.ec2SshKey = ec2SshKey
            self.sourceSecurityGroups = sourceSecurityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case ec2SshKey
            case sourceSecurityGroups
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri(locationName: "resourceArn"))
        ]

        /// The Amazon Resource Name (ARN) of the resource to which to add tags. Currently, the supported resources are Amazon EKS clusters and managed node groups.
        public let resourceArn: String
        /// The tags to add to the resource. A tag is an array of key-value pairs.
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case tags
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri(locationName: "resourceArn")),
            AWSMemberEncoding(label: "tagKeys", location: .querystring(locationName: "tagKeys"))
        ]

        /// The Amazon Resource Name (ARN) of the resource from which to delete tags. Currently, the supported resources are Amazon EKS clusters and managed node groups.
        public let resourceArn: String
        /// The keys of the tags to be removed.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 50)
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct Update: AWSDecodableShape {
        /// The Unix epoch timestamp in seconds for when the update was created.
        public let createdAt: Date?
        /// Any errors associated with a Failed update.
        public let errors: [ErrorDetail]?
        /// A UUID that is used to track the update.
        public let id: String?
        /// A key-value map that contains the parameters associated with the update.
        public let params: [UpdateParam]?
        /// The current status of the update.
        public let status: UpdateStatus?
        /// The type of the update.
        public let type: UpdateType?

        public init(createdAt: Date? = nil, errors: [ErrorDetail]? = nil, id: String? = nil, params: [UpdateParam]? = nil, status: UpdateStatus? = nil, type: UpdateType? = nil) {
            self.createdAt = createdAt
            self.errors = errors
            self.id = id
            self.params = params
            self.status = status
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt
            case errors
            case id
            case params
            case status
            case type
        }
    }

    public struct UpdateClusterConfigRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "name", location: .uri(locationName: "name"))
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// Enable or disable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more information, see Amazon EKS Cluster Control Plane Logs in the  Amazon EKS User Guide .  CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported control plane logs. For more information, see Amazon CloudWatch Pricing.
        public let logging: Logging?
        /// The name of the Amazon EKS cluster to update.
        public let name: String
        public let resourcesVpcConfig: VpcConfigRequest?

        public init(clientRequestToken: String? = UpdateClusterConfigRequest.idempotencyToken(), logging: Logging? = nil, name: String, resourcesVpcConfig: VpcConfigRequest? = nil) {
            self.clientRequestToken = clientRequestToken
            self.logging = logging
            self.name = name
            self.resourcesVpcConfig = resourcesVpcConfig
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken
            case logging
            case resourcesVpcConfig
        }
    }

    public struct UpdateClusterConfigResponse: AWSDecodableShape {
        public let update: Update?

        public init(update: Update? = nil) {
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case update
        }
    }

    public struct UpdateClusterVersionRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "name", location: .uri(locationName: "name"))
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of the Amazon EKS cluster to update.
        public let name: String
        /// The desired Kubernetes version following a successful update.
        public let version: String

        public init(clientRequestToken: String? = UpdateClusterVersionRequest.idempotencyToken(), name: String, version: String) {
            self.clientRequestToken = clientRequestToken
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken
            case version
        }
    }

    public struct UpdateClusterVersionResponse: AWSDecodableShape {
        /// The full description of the specified update
        public let update: Update?

        public init(update: Update? = nil) {
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case update
        }
    }

    public struct UpdateLabelsPayload: AWSEncodableShape {
        /// Kubernetes labels to be added or updated.
        public let addOrUpdateLabels: [String: String]?
        /// Kubernetes labels to be removed.
        public let removeLabels: [String]?

        public init(addOrUpdateLabels: [String: String]? = nil, removeLabels: [String]? = nil) {
            self.addOrUpdateLabels = addOrUpdateLabels
            self.removeLabels = removeLabels
        }

        public func validate(name: String) throws {
            try self.addOrUpdateLabels?.forEach {
                try validate($0.key, name: "addOrUpdateLabels.key", parent: name, max: 63)
                try validate($0.key, name: "addOrUpdateLabels.key", parent: name, min: 1)
                try validate($0.value, name: "addOrUpdateLabels[\"\($0.key)\"]", parent: name, max: 253)
                try validate($0.value, name: "addOrUpdateLabels[\"\($0.key)\"]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case addOrUpdateLabels
            case removeLabels
        }
    }

    public struct UpdateNodegroupConfigRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "clusterName", location: .uri(locationName: "name")),
            AWSMemberEncoding(label: "nodegroupName", location: .uri(locationName: "nodegroupName"))
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of the Amazon EKS cluster that the managed node group resides in.
        public let clusterName: String
        /// The Kubernetes labels to be applied to the nodes in the node group after the update.
        public let labels: UpdateLabelsPayload?
        /// The name of the managed node group to update.
        public let nodegroupName: String
        /// The scaling configuration details for the Auto Scaling group after the update.
        public let scalingConfig: NodegroupScalingConfig?

        public init(clientRequestToken: String? = UpdateNodegroupConfigRequest.idempotencyToken(), clusterName: String, labels: UpdateLabelsPayload? = nil, nodegroupName: String, scalingConfig: NodegroupScalingConfig? = nil) {
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.labels = labels
            self.nodegroupName = nodegroupName
            self.scalingConfig = scalingConfig
        }

        public func validate(name: String) throws {
            try self.labels?.validate(name: "\(name).labels")
            try self.scalingConfig?.validate(name: "\(name).scalingConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken
            case labels
            case scalingConfig
        }
    }

    public struct UpdateNodegroupConfigResponse: AWSDecodableShape {
        public let update: Update?

        public init(update: Update? = nil) {
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case update
        }
    }

    public struct UpdateNodegroupVersionRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "clusterName", location: .uri(locationName: "name")),
            AWSMemberEncoding(label: "nodegroupName", location: .uri(locationName: "nodegroupName"))
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of the Amazon EKS cluster that is associated with the managed node group to update.
        public let clusterName: String
        /// Force the update if the existing node group's pods are unable to be drained due to a pod disruption budget issue. If an update fails because pods could not be drained, you can force the update after it fails to terminate the old node whether or not any pods are running on the node.
        public let force: Bool?
        /// An object representing a node group's launch template specification. You can only update a node group using a launch template if the node group was originally deployed with a launch template.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The name of the managed node group to update.
        public let nodegroupName: String
        /// The AMI version of the Amazon EKS-optimized AMI to use for the update. By default, the latest available AMI version for the node group's Kubernetes version is used. For more information, see Amazon EKS-Optimized Linux AMI Versions  in the Amazon EKS User Guide. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify releaseVersion, or the node group update will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let releaseVersion: String?
        /// The Kubernetes version to update to. If no version is specified, then the Kubernetes version of the node group does not change. You can specify the Kubernetes version of the cluster to update the node group to the latest AMI version of the cluster's Kubernetes version. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify version, or the node group update will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let version: String?

        public init(clientRequestToken: String? = UpdateNodegroupVersionRequest.idempotencyToken(), clusterName: String, force: Bool? = nil, launchTemplate: LaunchTemplateSpecification? = nil, nodegroupName: String, releaseVersion: String? = nil, version: String? = nil) {
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.force = force
            self.launchTemplate = launchTemplate
            self.nodegroupName = nodegroupName
            self.releaseVersion = releaseVersion
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken
            case force
            case launchTemplate
            case releaseVersion
            case version
        }
    }

    public struct UpdateNodegroupVersionResponse: AWSDecodableShape {
        public let update: Update?

        public init(update: Update? = nil) {
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case update
        }
    }

    public struct UpdateParam: AWSDecodableShape {
        /// The keys associated with an update request.
        public let type: UpdateParamType?
        /// The value of the keys submitted as part of an update request.
        public let value: String?

        public init(type: UpdateParamType? = nil, value: String? = nil) {
            self.type = type
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case type
            case value
        }
    }

    public struct VpcConfigRequest: AWSEncodableShape {
        /// Set this value to true to enable private access for your cluster's Kubernetes API server endpoint. If you enable private access, Kubernetes API requests from within your cluster's VPC use the private VPC endpoint. The default value for this parameter is false, which disables private access for your Kubernetes API server. If you disable private access and you have worker nodes or AWS Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the worker nodes or Fargate pods. For more information, see Amazon EKS Cluster Endpoint Access Control in the  Amazon EKS User Guide .
        public let endpointPrivateAccess: Bool?
        /// Set this value to false to disable public access to your cluster's Kubernetes API server endpoint. If you disable public access, your cluster's Kubernetes API server can only receive requests from within the cluster VPC. The default value for this parameter is true, which enables public access for your Kubernetes API server. For more information, see Amazon EKS Cluster Endpoint Access Control in the  Amazon EKS User Guide .
        public let endpointPublicAccess: Bool?
        /// The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. The default value is 0.0.0.0/0. If you've disabled private endpoint access and you have worker nodes or AWS Fargate pods in the cluster, then ensure that you specify the necessary CIDR blocks. For more information, see Amazon EKS Cluster Endpoint Access Control in the  Amazon EKS User Guide .
        public let publicAccessCidrs: [String]?
        /// Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane. If you don't specify a security group, the default security group for your VPC is used.
        public let securityGroupIds: [String]?
        /// Specify subnets for your Amazon EKS worker nodes. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
        public let subnetIds: [String]?

        public init(endpointPrivateAccess: Bool? = nil, endpointPublicAccess: Bool? = nil, publicAccessCidrs: [String]? = nil, securityGroupIds: [String]? = nil, subnetIds: [String]? = nil) {
            self.endpointPrivateAccess = endpointPrivateAccess
            self.endpointPublicAccess = endpointPublicAccess
            self.publicAccessCidrs = publicAccessCidrs
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case endpointPrivateAccess
            case endpointPublicAccess
            case publicAccessCidrs
            case securityGroupIds
            case subnetIds
        }
    }

    public struct VpcConfigResponse: AWSDecodableShape {
        /// The cluster security group that was created by Amazon EKS for the cluster. Managed node groups use this security group for control-plane-to-data-plane communication.
        public let clusterSecurityGroupId: String?
        /// This parameter indicates whether the Amazon EKS private API server endpoint is enabled. If the Amazon EKS private API server endpoint is enabled, Kubernetes API requests that originate from within your cluster's VPC use the private VPC endpoint instead of traversing the internet. If this value is disabled and you have worker nodes or AWS Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the worker nodes or Fargate pods. For more information, see Amazon EKS Cluster Endpoint Access Control in the  Amazon EKS User Guide .
        public let endpointPrivateAccess: Bool?
        /// This parameter indicates whether the Amazon EKS public API server endpoint is enabled. If the Amazon EKS public API server endpoint is disabled, your cluster's Kubernetes API server can only receive requests that originate from within the cluster VPC.
        public let endpointPublicAccess: Bool?
        /// The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the listed CIDR blocks is denied. The default value is 0.0.0.0/0. If you've disabled private endpoint access and you have worker nodes or AWS Fargate pods in the cluster, then ensure that the necessary CIDR blocks are listed. For more information, see Amazon EKS Cluster Endpoint Access Control in the  Amazon EKS User Guide .
        public let publicAccessCidrs: [String]?
        /// The security groups associated with the cross-account elastic network interfaces that are used to allow communication between your worker nodes and the Kubernetes control plane.
        public let securityGroupIds: [String]?
        /// The subnets associated with your cluster.
        public let subnetIds: [String]?
        /// The VPC associated with your cluster.
        public let vpcId: String?

        public init(clusterSecurityGroupId: String? = nil, endpointPrivateAccess: Bool? = nil, endpointPublicAccess: Bool? = nil, publicAccessCidrs: [String]? = nil, securityGroupIds: [String]? = nil, subnetIds: [String]? = nil, vpcId: String? = nil) {
            self.clusterSecurityGroupId = clusterSecurityGroupId
            self.endpointPrivateAccess = endpointPrivateAccess
            self.endpointPublicAccess = endpointPublicAccess
            self.publicAccessCidrs = publicAccessCidrs
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterSecurityGroupId
            case endpointPrivateAccess
            case endpointPublicAccess
            case publicAccessCidrs
            case securityGroupIds
            case subnetIds
            case vpcId
        }
    }
}
