//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

@_exported import SotoCore

import SotoCore

// MARK: Waiters

extension OpsWorks {
    public func AppExistsWaiter(
        _ input: DescribeAppsRequest,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .failure, matcher: AWSErrorStatusMatcher(400)),
            ],
            command: describeApps
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func DeploymentSuccessfulWaiter(
        _ input: DescribeDeploymentsRequest,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSAllPathMatcher(arrayPath: \DescribeDeploymentsResult.deployments, elementPath: \Deployment.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeDeploymentsResult.deployments, elementPath: \Deployment.status, expected: "string")),
            ],
            command: describeDeployments
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func InstanceOnlineWaiter(
        _ input: DescribeInstancesRequest,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSAllPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
            ],
            command: describeInstances
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func InstanceRegisteredWaiter(
        _ input: DescribeInstancesRequest,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSAllPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
            ],
            command: describeInstances
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func InstanceStoppedWaiter(
        _ input: DescribeInstancesRequest,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSAllPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
            ],
            command: describeInstances
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func InstanceTerminatedWaiter(
        _ input: DescribeInstancesRequest,
        maxWaitTime: TimeAmount,
        logger: Logger,
        on eventLoop: EventLoop
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSAllPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
                .init(state: .failure, matcher: AWSAnyPathMatcher(arrayPath: \DescribeInstancesResult.instances, elementPath: \Instance.status, expected: "string")),
            ],
            command: describeInstances
        )
        return self.client.wait(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }
}
