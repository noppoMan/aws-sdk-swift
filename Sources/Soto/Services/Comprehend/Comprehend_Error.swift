//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Comprehend
public enum ComprehendErrorType: AWSErrorType {
    case batchSizeLimitExceededException(message: String?)
    case concurrentModificationException(message: String?)
    case internalServerException(message: String?)
    case invalidFilterException(message: String?)
    case invalidRequestException(message: String?)
    case jobNotFoundException(message: String?)
    case kmsKeyValidationException(message: String?)
    case resourceInUseException(message: String?)
    case resourceLimitExceededException(message: String?)
    case resourceNotFoundException(message: String?)
    case resourceUnavailableException(message: String?)
    case textSizeLimitExceededException(message: String?)
    case tooManyRequestsException(message: String?)
    case tooManyTagKeysException(message: String?)
    case tooManyTagsException(message: String?)
    case unsupportedLanguageException(message: String?)
}

extension ComprehendErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "BatchSizeLimitExceededException":
            self = .batchSizeLimitExceededException(message: message)
        case "ConcurrentModificationException":
            self = .concurrentModificationException(message: message)
        case "InternalServerException":
            self = .internalServerException(message: message)
        case "InvalidFilterException":
            self = .invalidFilterException(message: message)
        case "InvalidRequestException":
            self = .invalidRequestException(message: message)
        case "JobNotFoundException":
            self = .jobNotFoundException(message: message)
        case "KmsKeyValidationException":
            self = .kmsKeyValidationException(message: message)
        case "ResourceInUseException":
            self = .resourceInUseException(message: message)
        case "ResourceLimitExceededException":
            self = .resourceLimitExceededException(message: message)
        case "ResourceNotFoundException":
            self = .resourceNotFoundException(message: message)
        case "ResourceUnavailableException":
            self = .resourceUnavailableException(message: message)
        case "TextSizeLimitExceededException":
            self = .textSizeLimitExceededException(message: message)
        case "TooManyRequestsException":
            self = .tooManyRequestsException(message: message)
        case "TooManyTagKeysException":
            self = .tooManyTagKeysException(message: message)
        case "TooManyTagsException":
            self = .tooManyTagsException(message: message)
        case "UnsupportedLanguageException":
            self = .unsupportedLanguageException(message: message)
        default:
            return nil
        }
    }
}

extension ComprehendErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .batchSizeLimitExceededException(let message):
            return "BatchSizeLimitExceededException: \(message ?? "")"
        case .concurrentModificationException(let message):
            return "ConcurrentModificationException: \(message ?? "")"
        case .internalServerException(let message):
            return "InternalServerException: \(message ?? "")"
        case .invalidFilterException(let message):
            return "InvalidFilterException: \(message ?? "")"
        case .invalidRequestException(let message):
            return "InvalidRequestException: \(message ?? "")"
        case .jobNotFoundException(let message):
            return "JobNotFoundException: \(message ?? "")"
        case .kmsKeyValidationException(let message):
            return "KmsKeyValidationException: \(message ?? "")"
        case .resourceInUseException(let message):
            return "ResourceInUseException: \(message ?? "")"
        case .resourceLimitExceededException(let message):
            return "ResourceLimitExceededException: \(message ?? "")"
        case .resourceNotFoundException(let message):
            return "ResourceNotFoundException: \(message ?? "")"
        case .resourceUnavailableException(let message):
            return "ResourceUnavailableException: \(message ?? "")"
        case .textSizeLimitExceededException(let message):
            return "TextSizeLimitExceededException: \(message ?? "")"
        case .tooManyRequestsException(let message):
            return "TooManyRequestsException: \(message ?? "")"
        case .tooManyTagKeysException(let message):
            return "TooManyTagKeysException: \(message ?? "")"
        case .tooManyTagsException(let message):
            return "TooManyTagsException: \(message ?? "")"
        case .unsupportedLanguageException(let message):
            return "UnsupportedLanguageException: \(message ?? "")"
        }
    }
}
