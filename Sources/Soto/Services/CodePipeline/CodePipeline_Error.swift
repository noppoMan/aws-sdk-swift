//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for CodePipeline
public struct CodePipelineErrorType: AWSErrorType {
    enum Code: String {
        case actionNotFoundException = "ActionNotFoundException"
        case actionTypeNotFoundException = "ActionTypeNotFoundException"
        case approvalAlreadyCompletedException = "ApprovalAlreadyCompletedException"
        case concurrentModificationException = "ConcurrentModificationException"
        case duplicatedStopRequestException = "DuplicatedStopRequestException"
        case invalidActionDeclarationException = "InvalidActionDeclarationException"
        case invalidApprovalTokenException = "InvalidApprovalTokenException"
        case invalidArnException = "InvalidArnException"
        case invalidBlockerDeclarationException = "InvalidBlockerDeclarationException"
        case invalidClientTokenException = "InvalidClientTokenException"
        case invalidJobException = "InvalidJobException"
        case invalidJobStateException = "InvalidJobStateException"
        case invalidNextTokenException = "InvalidNextTokenException"
        case invalidNonceException = "InvalidNonceException"
        case invalidStageDeclarationException = "InvalidStageDeclarationException"
        case invalidStructureException = "InvalidStructureException"
        case invalidTagsException = "InvalidTagsException"
        case invalidWebhookAuthenticationParametersException = "InvalidWebhookAuthenticationParametersException"
        case invalidWebhookFilterPatternException = "InvalidWebhookFilterPatternException"
        case jobNotFoundException = "JobNotFoundException"
        case limitExceededException = "LimitExceededException"
        case notLatestPipelineExecutionException = "NotLatestPipelineExecutionException"
        case outputVariablesSizeExceededException = "OutputVariablesSizeExceededException"
        case pipelineExecutionNotFoundException = "PipelineExecutionNotFoundException"
        case pipelineExecutionNotStoppableException = "PipelineExecutionNotStoppableException"
        case pipelineNameInUseException = "PipelineNameInUseException"
        case pipelineNotFoundException = "PipelineNotFoundException"
        case pipelineVersionNotFoundException = "PipelineVersionNotFoundException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case stageNotFoundException = "StageNotFoundException"
        case stageNotRetryableException = "StageNotRetryableException"
        case tooManyTagsException = "TooManyTagsException"
        case validationException = "ValidationException"
        case webhookNotFoundException = "WebhookNotFoundException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var actionNotFoundException: Self { .init(.actionNotFoundException) }
    public static var actionTypeNotFoundException: Self { .init(.actionTypeNotFoundException) }
    public static var approvalAlreadyCompletedException: Self { .init(.approvalAlreadyCompletedException) }
    public static var concurrentModificationException: Self { .init(.concurrentModificationException) }
    public static var duplicatedStopRequestException: Self { .init(.duplicatedStopRequestException) }
    public static var invalidActionDeclarationException: Self { .init(.invalidActionDeclarationException) }
    public static var invalidApprovalTokenException: Self { .init(.invalidApprovalTokenException) }
    public static var invalidArnException: Self { .init(.invalidArnException) }
    public static var invalidBlockerDeclarationException: Self { .init(.invalidBlockerDeclarationException) }
    public static var invalidClientTokenException: Self { .init(.invalidClientTokenException) }
    public static var invalidJobException: Self { .init(.invalidJobException) }
    public static var invalidJobStateException: Self { .init(.invalidJobStateException) }
    public static var invalidNextTokenException: Self { .init(.invalidNextTokenException) }
    public static var invalidNonceException: Self { .init(.invalidNonceException) }
    public static var invalidStageDeclarationException: Self { .init(.invalidStageDeclarationException) }
    public static var invalidStructureException: Self { .init(.invalidStructureException) }
    public static var invalidTagsException: Self { .init(.invalidTagsException) }
    public static var invalidWebhookAuthenticationParametersException: Self { .init(.invalidWebhookAuthenticationParametersException) }
    public static var invalidWebhookFilterPatternException: Self { .init(.invalidWebhookFilterPatternException) }
    public static var jobNotFoundException: Self { .init(.jobNotFoundException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var notLatestPipelineExecutionException: Self { .init(.notLatestPipelineExecutionException) }
    public static var outputVariablesSizeExceededException: Self { .init(.outputVariablesSizeExceededException) }
    public static var pipelineExecutionNotFoundException: Self { .init(.pipelineExecutionNotFoundException) }
    public static var pipelineExecutionNotStoppableException: Self { .init(.pipelineExecutionNotStoppableException) }
    public static var pipelineNameInUseException: Self { .init(.pipelineNameInUseException) }
    public static var pipelineNotFoundException: Self { .init(.pipelineNotFoundException) }
    public static var pipelineVersionNotFoundException: Self { .init(.pipelineVersionNotFoundException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var stageNotFoundException: Self { .init(.stageNotFoundException) }
    public static var stageNotRetryableException: Self { .init(.stageNotRetryableException) }
    public static var tooManyTagsException: Self { .init(.tooManyTagsException) }
    public static var validationException: Self { .init(.validationException) }
    public static var webhookNotFoundException: Self { .init(.webhookNotFoundException) }
}

extension CodePipelineErrorType: Equatable {
    public static func == (lhs: CodePipelineErrorType, rhs: CodePipelineErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension CodePipelineErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
