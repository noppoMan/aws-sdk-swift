//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for IoT
public struct IoTErrorType: AWSErrorType {
    enum Code: String {
        case certificateConflictException = "CertificateConflictException"
        case certificateStateException = "CertificateStateException"
        case certificateValidationException = "CertificateValidationException"
        case conflictingResourceUpdateException = "ConflictingResourceUpdateException"
        case deleteConflictException = "DeleteConflictException"
        case indexNotReadyException = "IndexNotReadyException"
        case internalException = "InternalException"
        case internalFailureException = "InternalFailureException"
        case invalidAggregationException = "InvalidAggregationException"
        case invalidQueryException = "InvalidQueryException"
        case invalidRequestException = "InvalidRequestException"
        case invalidResponseException = "InvalidResponseException"
        case invalidStateTransitionException = "InvalidStateTransitionException"
        case limitExceededException = "LimitExceededException"
        case malformedPolicyException = "MalformedPolicyException"
        case notConfiguredException = "NotConfiguredException"
        case registrationCodeValidationException = "RegistrationCodeValidationException"
        case resourceAlreadyExistsException = "ResourceAlreadyExistsException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case resourceRegistrationFailureException = "ResourceRegistrationFailureException"
        case serviceUnavailableException = "ServiceUnavailableException"
        case sqlParseException = "SqlParseException"
        case taskAlreadyExistsException = "TaskAlreadyExistsException"
        case throttlingException = "ThrottlingException"
        case transferAlreadyCompletedException = "TransferAlreadyCompletedException"
        case transferConflictException = "TransferConflictException"
        case unauthorizedException = "UnauthorizedException"
        case versionConflictException = "VersionConflictException"
        case versionsLimitExceededException = "VersionsLimitExceededException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var certificateConflictException: Self { .init(.certificateConflictException) }
    public static var certificateStateException: Self { .init(.certificateStateException) }
    public static var certificateValidationException: Self { .init(.certificateValidationException) }
    public static var conflictingResourceUpdateException: Self { .init(.conflictingResourceUpdateException) }
    public static var deleteConflictException: Self { .init(.deleteConflictException) }
    public static var indexNotReadyException: Self { .init(.indexNotReadyException) }
    public static var internalException: Self { .init(.internalException) }
    public static var internalFailureException: Self { .init(.internalFailureException) }
    public static var invalidAggregationException: Self { .init(.invalidAggregationException) }
    public static var invalidQueryException: Self { .init(.invalidQueryException) }
    public static var invalidRequestException: Self { .init(.invalidRequestException) }
    public static var invalidResponseException: Self { .init(.invalidResponseException) }
    public static var invalidStateTransitionException: Self { .init(.invalidStateTransitionException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var malformedPolicyException: Self { .init(.malformedPolicyException) }
    public static var notConfiguredException: Self { .init(.notConfiguredException) }
    public static var registrationCodeValidationException: Self { .init(.registrationCodeValidationException) }
    public static var resourceAlreadyExistsException: Self { .init(.resourceAlreadyExistsException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var resourceRegistrationFailureException: Self { .init(.resourceRegistrationFailureException) }
    public static var serviceUnavailableException: Self { .init(.serviceUnavailableException) }
    public static var sqlParseException: Self { .init(.sqlParseException) }
    public static var taskAlreadyExistsException: Self { .init(.taskAlreadyExistsException) }
    public static var throttlingException: Self { .init(.throttlingException) }
    public static var transferAlreadyCompletedException: Self { .init(.transferAlreadyCompletedException) }
    public static var transferConflictException: Self { .init(.transferConflictException) }
    public static var unauthorizedException: Self { .init(.unauthorizedException) }
    public static var versionConflictException: Self { .init(.versionConflictException) }
    public static var versionsLimitExceededException: Self { .init(.versionsLimitExceededException) }
}

extension IoTErrorType: Equatable {
    public static func == (lhs: IoTErrorType, rhs: IoTErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension IoTErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
