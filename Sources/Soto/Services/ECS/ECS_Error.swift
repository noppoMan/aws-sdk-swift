//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for ECS
public struct ECSErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case attributeLimitExceededException = "AttributeLimitExceededException"
        case blockedException = "BlockedException"
        case clientException = "ClientException"
        case clusterContainsContainerInstancesException = "ClusterContainsContainerInstancesException"
        case clusterContainsServicesException = "ClusterContainsServicesException"
        case clusterContainsTasksException = "ClusterContainsTasksException"
        case clusterNotFoundException = "ClusterNotFoundException"
        case invalidParameterException = "InvalidParameterException"
        case limitExceededException = "LimitExceededException"
        case missingVersionException = "MissingVersionException"
        case noUpdateAvailableException = "NoUpdateAvailableException"
        case platformTaskDefinitionIncompatibilityException = "PlatformTaskDefinitionIncompatibilityException"
        case platformUnknownException = "PlatformUnknownException"
        case resourceInUseException = "ResourceInUseException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case serverException = "ServerException"
        case serviceNotActiveException = "ServiceNotActiveException"
        case serviceNotFoundException = "ServiceNotFoundException"
        case targetNotFoundException = "TargetNotFoundException"
        case taskSetNotFoundException = "TaskSetNotFoundException"
        case unsupportedFeatureException = "UnsupportedFeatureException"
        case updateInProgressException = "UpdateInProgressException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    public static var attributeLimitExceededException: Self { .init(.attributeLimitExceededException) }
    public static var blockedException: Self { .init(.blockedException) }
    public static var clientException: Self { .init(.clientException) }
    public static var clusterContainsContainerInstancesException: Self { .init(.clusterContainsContainerInstancesException) }
    public static var clusterContainsServicesException: Self { .init(.clusterContainsServicesException) }
    public static var clusterContainsTasksException: Self { .init(.clusterContainsTasksException) }
    public static var clusterNotFoundException: Self { .init(.clusterNotFoundException) }
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var missingVersionException: Self { .init(.missingVersionException) }
    public static var noUpdateAvailableException: Self { .init(.noUpdateAvailableException) }
    public static var platformTaskDefinitionIncompatibilityException: Self { .init(.platformTaskDefinitionIncompatibilityException) }
    public static var platformUnknownException: Self { .init(.platformUnknownException) }
    public static var resourceInUseException: Self { .init(.resourceInUseException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var serverException: Self { .init(.serverException) }
    public static var serviceNotActiveException: Self { .init(.serviceNotActiveException) }
    public static var serviceNotFoundException: Self { .init(.serviceNotFoundException) }
    public static var targetNotFoundException: Self { .init(.targetNotFoundException) }
    public static var taskSetNotFoundException: Self { .init(.taskSetNotFoundException) }
    public static var unsupportedFeatureException: Self { .init(.unsupportedFeatureException) }
    public static var updateInProgressException: Self { .init(.updateInProgressException) }
}

extension ECSErrorType: Equatable {
    public static func == (lhs: ECSErrorType, rhs: ECSErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension ECSErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
