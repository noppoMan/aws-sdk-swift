//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Support
public struct SupportErrorType: AWSErrorType {
    enum Code: String {
        case attachmentIdNotFound = "AttachmentIdNotFound"
        case attachmentLimitExceeded = "AttachmentLimitExceeded"
        case attachmentSetExpired = "AttachmentSetExpired"
        case attachmentSetIdNotFound = "AttachmentSetIdNotFound"
        case attachmentSetSizeLimitExceeded = "AttachmentSetSizeLimitExceeded"
        case caseCreationLimitExceeded = "CaseCreationLimitExceeded"
        case caseIdNotFound = "CaseIdNotFound"
        case describeAttachmentLimitExceeded = "DescribeAttachmentLimitExceeded"
        case internalServerError = "InternalServerError"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var attachmentIdNotFound: Self { .init(.attachmentIdNotFound) }
    public static var attachmentLimitExceeded: Self { .init(.attachmentLimitExceeded) }
    public static var attachmentSetExpired: Self { .init(.attachmentSetExpired) }
    public static var attachmentSetIdNotFound: Self { .init(.attachmentSetIdNotFound) }
    public static var attachmentSetSizeLimitExceeded: Self { .init(.attachmentSetSizeLimitExceeded) }
    public static var caseCreationLimitExceeded: Self { .init(.caseCreationLimitExceeded) }
    public static var caseIdNotFound: Self { .init(.caseIdNotFound) }
    public static var describeAttachmentLimitExceeded: Self { .init(.describeAttachmentLimitExceeded) }
    public static var internalServerError: Self { .init(.internalServerError) }
}

extension SupportErrorType: Equatable {
    public static func == (lhs: SupportErrorType, rhs: SupportErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension SupportErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
