//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for Support
public enum SupportErrorType: AWSErrorType {
    case attachmentIdNotFound(message: String?)
    case attachmentLimitExceeded(message: String?)
    case attachmentSetExpired(message: String?)
    case attachmentSetIdNotFound(message: String?)
    case attachmentSetSizeLimitExceeded(message: String?)
    case caseCreationLimitExceeded(message: String?)
    case caseIdNotFound(message: String?)
    case describeAttachmentLimitExceeded(message: String?)
    case internalServerError(message: String?)
}

extension SupportErrorType {
    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "AttachmentIdNotFound":
            self = .attachmentIdNotFound(message: message)
        case "AttachmentLimitExceeded":
            self = .attachmentLimitExceeded(message: message)
        case "AttachmentSetExpired":
            self = .attachmentSetExpired(message: message)
        case "AttachmentSetIdNotFound":
            self = .attachmentSetIdNotFound(message: message)
        case "AttachmentSetSizeLimitExceeded":
            self = .attachmentSetSizeLimitExceeded(message: message)
        case "CaseCreationLimitExceeded":
            self = .caseCreationLimitExceeded(message: message)
        case "CaseIdNotFound":
            self = .caseIdNotFound(message: message)
        case "DescribeAttachmentLimitExceeded":
            self = .describeAttachmentLimitExceeded(message: message)
        case "InternalServerError":
            self = .internalServerError(message: message)
        default:
            return nil
        }
    }
}

extension SupportErrorType: CustomStringConvertible {
    public var description: String {
        switch self {
        case .attachmentIdNotFound(let message):
            return "AttachmentIdNotFound: \(message ?? "")"
        case .attachmentLimitExceeded(let message):
            return "AttachmentLimitExceeded: \(message ?? "")"
        case .attachmentSetExpired(let message):
            return "AttachmentSetExpired: \(message ?? "")"
        case .attachmentSetIdNotFound(let message):
            return "AttachmentSetIdNotFound: \(message ?? "")"
        case .attachmentSetSizeLimitExceeded(let message):
            return "AttachmentSetSizeLimitExceeded: \(message ?? "")"
        case .caseCreationLimitExceeded(let message):
            return "CaseCreationLimitExceeded: \(message ?? "")"
        case .caseIdNotFound(let message):
            return "CaseIdNotFound: \(message ?? "")"
        case .describeAttachmentLimitExceeded(let message):
            return "DescribeAttachmentLimitExceeded: \(message ?? "")"
        case .internalServerError(let message):
            return "InternalServerError: \(message ?? "")"
        }
    }
}
