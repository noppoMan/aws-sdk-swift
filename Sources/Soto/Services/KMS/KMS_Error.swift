//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/soto/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import SotoCore

/// Error enum for KMS
public struct KMSErrorType: AWSErrorType {
    enum Code: String {
        case alreadyExistsException = "AlreadyExistsException"
        case cloudHsmClusterInUseException = "CloudHsmClusterInUseException"
        case cloudHsmClusterInvalidConfigurationException = "CloudHsmClusterInvalidConfigurationException"
        case cloudHsmClusterNotActiveException = "CloudHsmClusterNotActiveException"
        case cloudHsmClusterNotFoundException = "CloudHsmClusterNotFoundException"
        case cloudHsmClusterNotRelatedException = "CloudHsmClusterNotRelatedException"
        case customKeyStoreHasCMKsException = "CustomKeyStoreHasCMKsException"
        case customKeyStoreInvalidStateException = "CustomKeyStoreInvalidStateException"
        case customKeyStoreNameInUseException = "CustomKeyStoreNameInUseException"
        case customKeyStoreNotFoundException = "CustomKeyStoreNotFoundException"
        case dependencyTimeoutException = "DependencyTimeoutException"
        case disabledException = "DisabledException"
        case expiredImportTokenException = "ExpiredImportTokenException"
        case incorrectKeyException = "IncorrectKeyException"
        case incorrectKeyMaterialException = "IncorrectKeyMaterialException"
        case incorrectTrustAnchorException = "IncorrectTrustAnchorException"
        case invalidAliasNameException = "InvalidAliasNameException"
        case invalidArnException = "InvalidArnException"
        case invalidCiphertextException = "InvalidCiphertextException"
        case invalidGrantIdException = "InvalidGrantIdException"
        case invalidGrantTokenException = "InvalidGrantTokenException"
        case invalidImportTokenException = "InvalidImportTokenException"
        case invalidKeyUsageException = "InvalidKeyUsageException"
        case invalidMarkerException = "InvalidMarkerException"
        case kMSInternalException = "KMSInternalException"
        case kMSInvalidSignatureException = "KMSInvalidSignatureException"
        case kMSInvalidStateException = "KMSInvalidStateException"
        case keyUnavailableException = "KeyUnavailableException"
        case limitExceededException = "LimitExceededException"
        case malformedPolicyDocumentException = "MalformedPolicyDocumentException"
        case notFoundException = "NotFoundException"
        case tagException = "TagException"
        case unsupportedOperationException = "UnsupportedOperationException"
    }

    private var error: Code
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }

    internal init(_ error: Code) {
        self.error = error
        self.message = nil
    }

    public static var alreadyExistsException: Self { .init(.alreadyExistsException) }
    public static var cloudHsmClusterInUseException: Self { .init(.cloudHsmClusterInUseException) }
    public static var cloudHsmClusterInvalidConfigurationException: Self { .init(.cloudHsmClusterInvalidConfigurationException) }
    public static var cloudHsmClusterNotActiveException: Self { .init(.cloudHsmClusterNotActiveException) }
    public static var cloudHsmClusterNotFoundException: Self { .init(.cloudHsmClusterNotFoundException) }
    public static var cloudHsmClusterNotRelatedException: Self { .init(.cloudHsmClusterNotRelatedException) }
    public static var customKeyStoreHasCMKsException: Self { .init(.customKeyStoreHasCMKsException) }
    public static var customKeyStoreInvalidStateException: Self { .init(.customKeyStoreInvalidStateException) }
    public static var customKeyStoreNameInUseException: Self { .init(.customKeyStoreNameInUseException) }
    public static var customKeyStoreNotFoundException: Self { .init(.customKeyStoreNotFoundException) }
    public static var dependencyTimeoutException: Self { .init(.dependencyTimeoutException) }
    public static var disabledException: Self { .init(.disabledException) }
    public static var expiredImportTokenException: Self { .init(.expiredImportTokenException) }
    public static var incorrectKeyException: Self { .init(.incorrectKeyException) }
    public static var incorrectKeyMaterialException: Self { .init(.incorrectKeyMaterialException) }
    public static var incorrectTrustAnchorException: Self { .init(.incorrectTrustAnchorException) }
    public static var invalidAliasNameException: Self { .init(.invalidAliasNameException) }
    public static var invalidArnException: Self { .init(.invalidArnException) }
    public static var invalidCiphertextException: Self { .init(.invalidCiphertextException) }
    public static var invalidGrantIdException: Self { .init(.invalidGrantIdException) }
    public static var invalidGrantTokenException: Self { .init(.invalidGrantTokenException) }
    public static var invalidImportTokenException: Self { .init(.invalidImportTokenException) }
    public static var invalidKeyUsageException: Self { .init(.invalidKeyUsageException) }
    public static var invalidMarkerException: Self { .init(.invalidMarkerException) }
    public static var kMSInternalException: Self { .init(.kMSInternalException) }
    public static var kMSInvalidSignatureException: Self { .init(.kMSInvalidSignatureException) }
    public static var kMSInvalidStateException: Self { .init(.kMSInvalidStateException) }
    public static var keyUnavailableException: Self { .init(.keyUnavailableException) }
    public static var limitExceededException: Self { .init(.limitExceededException) }
    public static var malformedPolicyDocumentException: Self { .init(.malformedPolicyDocumentException) }
    public static var notFoundException: Self { .init(.notFoundException) }
    public static var tagException: Self { .init(.tagException) }
    public static var unsupportedOperationException: Self { .init(.unsupportedOperationException) }
}

extension KMSErrorType: Equatable {
    public static func == (lhs: KMSErrorType, rhs: KMSErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension KMSErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
